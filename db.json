{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/about/qr.png","path":"about/qr.png","modified":0,"renderable":0},{"_id":"source/about/qrh.png","path":"about/qrh.png","modified":0,"renderable":0},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/next-theme/source/google3b552a10c255473b.html","path":"google3b552a10c255473b.html","modified":0,"renderable":1},{"_id":"source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":0},{"_id":"source/images/[原始文件]/alipay.jpg","path":"images/[原始文件]/alipay.jpg","modified":0,"renderable":0},{"_id":"themes/next-theme/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next-theme/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next-theme/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next-theme/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-theme/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next-theme/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-theme/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-theme/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-theme/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next-theme/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next-theme/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next-theme/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next-theme/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next-theme/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next-theme/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"source/images/[原始文件]/wechat.jpg","path":"images/[原始文件]/wechat.jpg","modified":0,"renderable":0},{"_id":"themes/next-theme/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"fe99efeeffb82c0c03563103cda7b823d1450a1d","modified":1494122794632},{"_id":"source/favicon.ico","hash":"3cf8dbb793a8aba654ddffa23caa49a377ff72d2","modified":1494573088890},{"_id":"themes/next-theme/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1494226112666},{"_id":"themes/next-theme/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1494226112667},{"_id":"themes/next-theme/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1494226112715},{"_id":"themes/next-theme/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1494226112717},{"_id":"themes/next-theme/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1494226112718},{"_id":"themes/next-theme/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1494226112718},{"_id":"themes/next-theme/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1494226112720},{"_id":"themes/next-theme/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1494226112719},{"_id":"themes/next-theme/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1494226112720},{"_id":"themes/next-theme/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1494226112845},{"_id":"themes/next-theme/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1494226112846},{"_id":"themes/next-theme/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1494226112847},{"_id":"themes/next-theme/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1494226112721},{"_id":"themes/next-theme/_config.yml","hash":"e353592dbce6b46ebede48a5766cf5e9ad9e79e8","modified":1498638432177},{"_id":"themes/next-theme/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1494226112721},{"_id":"themes/next-theme/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1494226112846},{"_id":"source/categories/index.md","hash":"a85039b98dc4e4aa542cb56a647892abcee4a6a0","modified":1494467871234},{"_id":"source/_posts/debug-ros-using-qt.md","hash":"351ad5fa4dd13b711d9077e3aa25d439850ad09d","modified":1496990587528},{"_id":"source/_posts/float-to-byte.md","hash":"424c99bc6946fd50d846fb0adcc2e52e4a3eeb22","modified":1495185068071},{"_id":"source/_posts/git-summary.md","hash":"f3d711c48d2dd5317666c711ea8a1d9c9952f632","modified":1497344221540},{"_id":"source/_posts/hexo-advance.md","hash":"60454be9ff1c99320ce0a0d1886235a5a7f578ef","modified":1497425145047},{"_id":"source/_posts/hexo-backup.md","hash":"3302723456c6856c6c392d10eafd11e8b4d6a9a1","modified":1494806182522},{"_id":"source/_posts/hexo-error.md","hash":"62980d22013deb2bb4ce94fc30c6889f57fcf7df","modified":1494806182522},{"_id":"source/_posts/hexo-blog.md","hash":"3e9f72ba9ea5acc09d42a4ec43484b64dc2372ca","modified":1495583718148},{"_id":"source/_posts/linux-serial.md","hash":"1cd28a9cefaaea9efff5dbf1d5fffc259ba18076","modified":1495185068071},{"_id":"source/_posts/omniwheel-kinematical-analysis.md","hash":"770998d9b88b6f33a165d523563cb418b0145930","modified":1498639737745},{"_id":"source/_posts/putty-graphics-ubuntu.md","hash":"ef93f4c0a7f243de82bf5f2d6301e666f7b50f22","modified":1497232073296},{"_id":"source/_posts/qt-widget-designated-location.md","hash":"4d972f03a97f82525031f9304bfed1f1ce30ae6a","modified":1494806182522},{"_id":"source/_posts/raspberryPi.md","hash":"85b60d8f2957dc835bb2f995e9191b7f9e564afe","modified":1495185231480},{"_id":"source/_posts/ros-books.md","hash":"f7c3c595ff396670de5ddc5448911f6cf81c8189","modified":1498108306929},{"_id":"source/_posts/ros-communication.md","hash":"7fa2f2fecb4e46cc029c73909cee7d8cddfc98e2","modified":1495499013109},{"_id":"source/_posts/ros-indigo-raspberry.md","hash":"4dc679dff9e84ac501bdcf18f9f073552797b5fb","modified":1494835940396},{"_id":"source/_posts/ros-navigation-compile.md","hash":"ade325c09c37d9027135a6f9616a208f197e1b5b","modified":1495583431492},{"_id":"source/_posts/ros-navigation-simulation.md","hash":"c772376cb17d66de81f79f68a0b97df885345131","modified":1495608893570},{"_id":"source/_posts/ros-primary-tutorial-1.md","hash":"7a9cd79a0f36c8e9f74294ac3a236ae22133f8e0","modified":1497333340424},{"_id":"source/_posts/ros-primary-tutorial-10.md","hash":"f68fb4c443e014ed0d6b4281bd2fe05cfa3a6f4f","modified":1497344784771},{"_id":"source/_posts/ros-primary-tutorial-11.md","hash":"94ed28a8c40d35960716476a122ef63f104b6d3a","modified":1497333228462},{"_id":"source/_posts/ros-primary-tutorial-12.md","hash":"f0bc89417ce393a6247e1ea1f8e694dc5f5e2b5f","modified":1497344480229},{"_id":"source/_posts/ros-primary-tutorial-14.md","hash":"d9a823cae7f95f77b03624bd564ff964a85bf04c","modified":1497333483472},{"_id":"source/_posts/ros-primary-tutorial-13.md","hash":"159f6be16cee90dc8985378164a7518b1ac0ee70","modified":1497333135456},{"_id":"source/_posts/ros-primary-tutorial-2.md","hash":"abb273cf08344480a7c2d567b796a7d4f2f236a2","modified":1497333332095},{"_id":"source/_posts/ros-primary-tutorial-3.md","hash":"029b09735f2c3fc8320ef55c0bb126fb079e8602","modified":1497333322440},{"_id":"source/_posts/ros-primary-tutorial-4.md","hash":"71a53887a393b953a0ba6edeee84b501e03e46af","modified":1497333314257},{"_id":"source/_posts/ros-primary-tutorial-5.md","hash":"0c6315f44a57139afc2925ff5d1f1b86dc928857","modified":1497427218888},{"_id":"source/_posts/ros-primary-tutorial-6.md","hash":"98e9d2f85e5b37c829f122b8eb98a80d3ee2d252","modified":1497333296873},{"_id":"source/_posts/ros-primary-tutorial-7.md","hash":"cf5d68598e5b6a67251aaaaf6a400d02768088a5","modified":1497333287881},{"_id":"source/_posts/ros-primary-tutorial-8.md","hash":"23656bc72876d70177cefce66bdffb08382d38a4","modified":1497333277258},{"_id":"source/_posts/ros-primary-tutorial-9.md","hash":"8bbf23db3506469955ca0d98c446ae2729eeaef3","modified":1497333261768},{"_id":"source/_posts/ros-serial.md","hash":"72474385bd2162eb1addc7276559bbe636a9f02d","modified":1495000373457},{"_id":"source/_posts/ros-simulation.md","hash":"3e18a619c531df24ef70b2f6f8235fa71941dab2","modified":1495604031089},{"_id":"source/_posts/ubuntu-hexo.md","hash":"f3f7d5f093f370d03962c92a4fe281995ddc9eae","modified":1495847799526},{"_id":"source/_posts/vim.md","hash":"66d97dc7bfba21f3e9e8b28b855fff44aa245e9f","modified":1496290912515},{"_id":"source/about/index.md","hash":"ad809f0df4d825d7b7aa7b5ea986175a6a251823","modified":1497843328752},{"_id":"source/about/qr.png","hash":"fe70fbe9b928f4c234636425f800d54e7a089a04","modified":1494299044000},{"_id":"source/about/qrh.png","hash":"1cb43ac737f02ed1874cb7b7489ed486b9e4c22c","modified":1494299046000},{"_id":"source/images/alipay.jpg","hash":"d8c8a6b853225f9dc3e9b94beadbc0bf6be7bb93","modified":1494460928880},{"_id":"source/images/avatar.jpg","hash":"0c4428cbc398b7f18ef1fcae5a1c9664c29d6fca","modified":1494319604774},{"_id":"source/tags/index.md","hash":"5222f78c07cd7911ae9acbb44720f7db8a41a893","modified":1494467930563},{"_id":"themes/next-theme/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1494226112716},{"_id":"themes/next-theme/.github/ISSUE_TEMPLATE.md","hash":"4de856de657a27f340f245eb491a1f52ceba1735","modified":1494226112717},{"_id":"themes/next-theme/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1494226112722},{"_id":"themes/next-theme/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1494226112723},{"_id":"themes/next-theme/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1494226112724},{"_id":"themes/next-theme/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1494226112723},{"_id":"themes/next-theme/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1494226112724},{"_id":"themes/next-theme/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1494226112793},{"_id":"themes/next-theme/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1494226112794},{"_id":"themes/next-theme/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1494226112794},{"_id":"themes/next-theme/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1494226112795},{"_id":"themes/next-theme/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1494226112795},{"_id":"themes/next-theme/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1494226112796},{"_id":"themes/next-theme/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1494226112797},{"_id":"themes/next-theme/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1494226112796},{"_id":"themes/next-theme/layout/_layout.swig","hash":"efa71671290bb4b497d83720282b36482b6b0efb","modified":1494226112803},{"_id":"themes/next-theme/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1494226112798},{"_id":"themes/next-theme/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1494226112798},{"_id":"themes/next-theme/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1494226112799},{"_id":"themes/next-theme/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1494226112800},{"_id":"themes/next-theme/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1494226112801},{"_id":"themes/next-theme/layout/page.swig","hash":"79297b9b9abd684ba025ba2d1551e9e0591b5a63","modified":1494226112800},{"_id":"themes/next-theme/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1494226112801},{"_id":"themes/next-theme/source/google3b552a10c255473b.html","hash":"f2b96b19cb98579df26479cdb158b28d592906c6","modified":1497423617995},{"_id":"themes/next-theme/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1494226112995},{"_id":"themes/next-theme/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1494226112994},{"_id":"themes/next-theme/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1494226112995},{"_id":"themes/next-theme/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1494226112847},{"_id":"themes/next-theme/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1494226112848},{"_id":"source/images/wechat.jpg","hash":"d673254d35893b0a8dc4e6501e1f2bd5fceb176f","modified":1494391666120},{"_id":"themes/next-theme/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494226112922},{"_id":"source/_posts/hexo-advance/error.jpg","hash":"22a649fd5c56aadc9f327b1569705419d50f2237","modified":1497337894057},{"_id":"source/_posts/hexo-advance/baidusitemap.jpg","hash":"922fff106618c75c14f2bbb3d0616f8b78802b23","modified":1497330867982},{"_id":"source/_posts/hexo-advance/googleconsole.jpg","hash":"80202f30acd3f34d6ba34cd6f4fa656f17224899","modified":1497421669961},{"_id":"source/_posts/hexo-advance/addsitemap.jpg","hash":"6f99f8f371bd84b036ffe91ded7abbd704921651","modified":1497424848978},{"_id":"source/_posts/hexo-advance/googleverify.jpg","hash":"4f763221d87615a0959a0032a595f4684fd8ecb7","modified":1497424330893},{"_id":"source/_posts/hexo-advance/pay.jpg","hash":"15178d5e18e706c9b6c1b67235b83f504379e8e9","modified":1494392998187},{"_id":"source/_posts/hexo-backup/setbranch.jpg","hash":"3cf5e1105cadb1de2190da051cde55d182599003","modified":1494377528652},{"_id":"source/_posts/hexo-advance/sitemap.jpg","hash":"3c3f0e8aa077c59988b915579781362ebeb9203b","modified":1497337038021},{"_id":"source/_posts/hexo-blog/leancloudc.jpg","hash":"b7991651b5bc2901864733da810a7e58513e5788","modified":1494142825265},{"_id":"source/_posts/omniwheel-kinematical-analysis/omni.jpg","hash":"9f6b81e6f029d51bd0c2346787fea9de1874838e","modified":1498628453317},{"_id":"source/_posts/putty-graphics-ubuntu/puttyx11.jpg","hash":"f134359992dcf28e92f5314bae6723919da1c8c5","modified":1497231807588},{"_id":"source/_posts/omniwheel-kinematical-analysis/omnidiagram.jpg","hash":"5ae5d553bbcde940c590d6f24a1f05d07e35a0ed","modified":1498629414613},{"_id":"source/_posts/putty-graphics-ubuntu/puttyssh.jpg","hash":"8104a9c218ca93589cb85785bcb1f8b0fada91fb","modified":1497229244566},{"_id":"source/_posts/qt-widget-designated-location/final.jpg","hash":"6094e589bfcf4f7f21d5e0fbf1e84d0368e1d83c","modified":1494303777958},{"_id":"source/_posts/putty-graphics-ubuntu/xmingconfig.jpg","hash":"d38d420a95007bd93e6ec5591a5b1422c045cd57","modified":1497228706739},{"_id":"source/_posts/qt-widget-designated-location/qrc.jpg","hash":"94bb19dd0e013f4d24bd3b8bb5cdab7486773ff2","modified":1494295169033},{"_id":"source/_posts/qt-widget-designated-location/res-qrc.jpg","hash":"33fc26d52a5cdeed861e6b4bae59da2d3531e407","modified":1494295790173},{"_id":"source/_posts/raspberryPi/wpacli.jpg","hash":"0862f7c3cbfeff4217f4d7f9ff209a09da58289e","modified":1494817544972},{"_id":"source/_posts/ros-indigo-raspberry/urdf.jpg","hash":"c9928f762f38bceab10973d1aad63cd1b98a7bc8","modified":1494834493469},{"_id":"source/_posts/ros-indigo-raspberry/roscore.jpg","hash":"88f9c1ebe7ac49fb9b6083183e09d4edb432ac4d","modified":1494835546610},{"_id":"source/_posts/ros-navigation-simulation/movebase.png","hash":"fa7e997b2d42319a04fc33515fdb67aac1703d06","modified":1495605616161},{"_id":"source/_posts/ros-primary-tutorial-1/rosv.jpg","hash":"7e36718479a611ef04d504ca1d2b32c694141fb0","modified":1495759521824},{"_id":"source/_posts/ros-primary-tutorial-11/service.jpg","hash":"5c83d68778e910130029fb0071e0eb17468a54b3","modified":1496286357576},{"_id":"source/_posts/ros-primary-tutorial-12/matrix.png","hash":"d747714d175f6b454794ad7f115604e400472a92","modified":1496818333932},{"_id":"source/_posts/ros-primary-tutorial-12/pdf.jpg","hash":"b45b7e38ed157fb60318c2524a39724270b940d3","modified":1496806197467},{"_id":"source/_posts/ros-primary-tutorial-12/follow.jpg","hash":"0a55643364f6796d4534d836e4349b919de04c11","modified":1496805292840},{"_id":"source/_posts/ros-primary-tutorial-12/runtime.jpg","hash":"58462fa2fa621ec6de60b99af99f6384daced99c","modified":1496809132168},{"_id":"source/_posts/ros-primary-tutorial-13/moving.jpg","hash":"2197112d35ccbac2bbb1771ace238f4dd2ff6c31","modified":1496976222213},{"_id":"source/_posts/ros-primary-tutorial-13/tree.png","hash":"9cd47e2312f76338bc000edec8e5b3895b2104e9","modified":1496971171007},{"_id":"source/_posts/ros-primary-tutorial-13/carrot1.jpg","hash":"0a5f4ad7bb940d71bd3f97adf5a29c5b95e07e20","modified":1496974558721},{"_id":"source/_posts/ros-primary-tutorial-14/simple_robot.png","hash":"f2b805374f0eb59ddc4f1032626132127cc0e228","modified":1496900624857},{"_id":"source/_posts/ros-primary-tutorial-14/tf.png","hash":"29045c6baa311349a4862040756b76a7b70eff20","modified":1496907120880},{"_id":"source/_posts/ros-primary-tutorial-14/tf_robot.png","hash":"c9994255cc4b88da3dd5534a12eb63b0543705d2","modified":1496901976782},{"_id":"source/_posts/ros-primary-tutorial-6/turtlesim.jpg","hash":"36236ab203a145b0869faefbf2e4fcb6bc98dc2d","modified":1495863377484},{"_id":"source/_posts/ros-primary-tutorial-5/turtlesim.jpg","hash":"71fe4734aa3c0ad31175403d2dc5c7928997dfb9","modified":1495852318769},{"_id":"source/_posts/ros-primary-tutorial-5/nodeinfo.jpg","hash":"c182557f2e24fa792c6bc3cc26517aef04641e2a","modified":1495852731210},{"_id":"source/_posts/ros-primary-tutorial-7/rosparam.jpg","hash":"6bf0b8a78413f5d87d48786e994f13a2d04f0735","modified":1496196263377},{"_id":"source/_posts/ros-primary-tutorial-7/spawn.jpg","hash":"406b2dd36d8d7ad537caf4c1b5af15dcbfa2f50a","modified":1496194397717},{"_id":"source/_posts/ros-primary-tutorial-8/rqtconsole.jpg","hash":"9f2af6083e11b09b986de4596ec683823ced69fa","modified":1496199705677},{"_id":"source/_posts/ros-primary-tutorial-8/info.jpg","hash":"0da19a929a82c03f6d190f4b3c73190955c1106b","modified":1496200030805},{"_id":"source/_posts/ros-primary-tutorial-8/two.jpg","hash":"79cbd5a15195b5ecc19d6d0c858ccb6e0cc8f966","modified":1496207418546},{"_id":"source/_posts/ros-primary-tutorial-8/rqtgraph.jpg","hash":"f83f6b5f5b61e693752b663c3e108a464e0df5f9","modified":1496207754925},{"_id":"source/_posts/ros-primary-tutorial-8/rqtloglevel.jpg","hash":"efa939871cda1da144b35c0245966ecc3571ae13","modified":1496199802446},{"_id":"source/_posts/ros-simulation/axis.jpg","hash":"7e94a975e132b4e1452d4a392f306a2b35464aa5","modified":1495599838324},{"_id":"source/_posts/ros-serial/arch.jpg","hash":"0cd82634c7c53170f0fab6c8b2f9c5bc4f02a583","modified":1494988352773},{"_id":"source/_posts/ros-simulation/screw-rule.jpg","hash":"d79c5fe79a74d9253063b2aa20f5ff265dee641b","modified":1495603950528},{"_id":"source/_posts/ros-simulation/rviz-left.jpg","hash":"a2910d078601bbe693b17c8d8422e36cc5f2c74a","modified":1495597309245},{"_id":"source/_posts/vim/powerline.jpg","hash":"f6437229e71edbc9a8571a2ff358071d2c858514","modified":1495086347033},{"_id":"source/_posts/vim/tree.jpg","hash":"427511d6e79478bfb0885ec5a1a707619a74f22c","modified":1495086562109},{"_id":"source/images/[原始文件]/alipay.jpg","hash":"5e676d7d1e10c982d93f9c6634d362443d101a56","modified":1494391498192},{"_id":"themes/next-theme/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1494226112805},{"_id":"themes/next-theme/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1494226112804},{"_id":"themes/next-theme/layout/_macro/post.swig","hash":"3c6ef2ec749f2102ea5006016261263d34b6d162","modified":1494226112806},{"_id":"themes/next-theme/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1494226112807},{"_id":"themes/next-theme/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1494226112807},{"_id":"themes/next-theme/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1494226112808},{"_id":"themes/next-theme/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1494226112803},{"_id":"themes/next-theme/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1494226112802},{"_id":"themes/next-theme/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1494226112809},{"_id":"themes/next-theme/layout/_partials/footer.swig","hash":"63997332854621a1e7f1a7a3219adcd7462f9b6e","modified":1494818861841},{"_id":"themes/next-theme/layout/_partials/head.swig","hash":"49b9350fd175097645a0eccdc690b2afb536db76","modified":1497423368151},{"_id":"themes/next-theme/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1494226112812},{"_id":"themes/next-theme/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1494226112812},{"_id":"themes/next-theme/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1494226112815},{"_id":"themes/next-theme/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1494226112813},{"_id":"themes/next-theme/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1494226112819},{"_id":"themes/next-theme/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1494226112819},{"_id":"themes/next-theme/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1494226112823},{"_id":"themes/next-theme/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1494226112837},{"_id":"themes/next-theme/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1494226112838},{"_id":"themes/next-theme/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1494226112839},{"_id":"themes/next-theme/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1494226112839},{"_id":"themes/next-theme/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1494226112840},{"_id":"themes/next-theme/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1494226112853},{"_id":"themes/next-theme/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1494226112924},{"_id":"themes/next-theme/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1494226112923},{"_id":"themes/next-theme/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1494226112925},{"_id":"themes/next-theme/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1494226112926},{"_id":"themes/next-theme/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1494226112924},{"_id":"themes/next-theme/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1494226112927},{"_id":"themes/next-theme/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1494226112926},{"_id":"themes/next-theme/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1494226112928},{"_id":"themes/next-theme/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1494226112927},{"_id":"themes/next-theme/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1494226112929},{"_id":"themes/next-theme/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1494226112930},{"_id":"themes/next-theme/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1494226112931},{"_id":"themes/next-theme/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1494226112929},{"_id":"themes/next-theme/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1494226112930},{"_id":"themes/next-theme/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1494226112850},{"_id":"themes/next-theme/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1494226112850},{"_id":"themes/next-theme/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1494226112849},{"_id":"themes/next-theme/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1494226112851},{"_id":"themes/next-theme/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1494226112849},{"_id":"themes/next-theme/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1494226112852},{"_id":"source/_posts/hexo-advance/addok.jpg","hash":"9f4a47c06f9c81d54f984c0b6fb1ee9bd5c63de8","modified":1497425074619},{"_id":"source/_posts/putty-graphics-ubuntu/run.jpg","hash":"2b6e45f299f8d38fa3ea8f0e54584d73e91a040f","modified":1497231601940},{"_id":"source/_posts/qt-widget-designated-location/linux.jpg","hash":"c34ad72bcef156217728ddde4a06fb1f7387bc89","modified":1494297222633},{"_id":"source/_posts/qt-widget-designated-location/grid.jpg","hash":"2470d283416fb2cda7315f9f972dcf9bf7f0a740","modified":1494298348902},{"_id":"source/_posts/qt-widget-designated-location/text.jpg","hash":"128179bd2b0b6a40e378a33eafc63a26c925bb2a","modified":1494301542941},{"_id":"source/_posts/raspberryPi/portconfig.jpg","hash":"999761e11eefc0bcf6b59d5fe3c3e95eccd07eff","modified":1494816579345},{"_id":"source/_posts/raspberryPi/config.jpg","hash":"31d988f2efaea004b2ccfcfca7227235c073998b","modified":1494816360500},{"_id":"source/_posts/raspberryPi/vnc.jpg","hash":"01d06e3af2c437a5831b442dc9d0c45ebf3fb80f","modified":1494816856750},{"_id":"source/_posts/ros-books/book.jpg","hash":"9c2d70e790a0d2e75796a04c33f3309f77af7ad3","modified":1498108267291},{"_id":"source/_posts/ros-communication/turtle.jpg","hash":"2de104d636fa5b823ebf67e058ebaae08a1f3a2d","modified":1495459734000},{"_id":"source/_posts/ros-navigation-compile/ltierror.jpg","hash":"838dd5dafc7e8336058e1db47b489eb1e9cb076a","modified":1495583163886},{"_id":"source/_posts/ros-navigation-simulation/forward.jpg","hash":"56a101f80435ae8db529e0219d86913da32ff40f","modified":1495606741001},{"_id":"source/_posts/ros-primary-tutorial-12/rviz.jpg","hash":"ea1f6671fd71e0f627270737eae6bc5765692437","modified":1496818229794},{"_id":"source/_posts/ros-primary-tutorial-12/tf.png","hash":"1a62784279851e5d48c5c252878d5dad7e44b006","modified":1496803736681},{"_id":"source/_posts/ros-primary-tutorial-13/startdemo.jpg","hash":"cd1711f828c5e95d866839d59e2a82e0b88da3e7","modified":1496890455509},{"_id":"source/_posts/ros-primary-tutorial-6/topic.jpg","hash":"8c20c9617cfa246f7b9b7ef0c32396e08285bec7","modified":1495865856833},{"_id":"source/_posts/ros-primary-tutorial-6/rqtgraph.jpg","hash":"454565603793ffacac1043994892a69285f68b74","modified":1495864650784},{"_id":"source/_posts/ros-primary-tutorial-6/rqth.jpg","hash":"26c5f5df64a348f839db9e0c34ca8211a44ace74","modified":1495865150705},{"_id":"source/_posts/ros-primary-tutorial-6/rqtplot.jpg","hash":"dc14ead3b91767710d1594048ebdf5025b8ec716","modified":1495869673574},{"_id":"source/_posts/ros-simulation/rviz.jpg","hash":"45a231c457bea27898eb1462b0c122c8ad23f929","modified":1495595911189},{"_id":"source/images/[原始文件]/wechat.jpg","hash":"2e70bc628e855045909e36f236cb9908babeb210","modified":1494391486802},{"_id":"themes/next-theme/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494226112821},{"_id":"themes/next-theme/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494226112821},{"_id":"themes/next-theme/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494226112901},{"_id":"themes/next-theme/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494226112901},{"_id":"themes/next-theme/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494226112901},{"_id":"themes/next-theme/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494226112920},{"_id":"themes/next-theme/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494226112921},{"_id":"source/_posts/debug-ros-using-qt/setup.jpg","hash":"70b87340dd263abb20efd121335d1ba00ed5aa70","modified":1496989679148},{"_id":"source/_posts/hexo-blog/hello-world.jpg","hash":"5cda94b2c45b93aa4eb20dfbcb3fafd79a2f47ea","modified":1494133840276},{"_id":"source/_posts/linux-serial/libcssl.jpg","hash":"fea0d9285fd68ab2409c7ec9b5c580f99f5b6d6f","modified":1495008220203},{"_id":"source/_posts/ros-indigo-raspberry/catkin.jpg","hash":"48a6c28b11e71ad941daf8274c8cf78def9ea46d","modified":1494835397080},{"_id":"source/_posts/ros-navigation-simulation/obstacle.jpg","hash":"1637d252148acadb9b53d18a85396c7d61935063","modified":1495607816180},{"_id":"source/_posts/ros-simulation/rviz-move.jpg","hash":"d82e2262b5e5c20fb7a354af87d109fa6371b1bb","modified":1495596109336},{"_id":"themes/next-theme/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1494226112811},{"_id":"themes/next-theme/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1494226112810},{"_id":"themes/next-theme/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1494226112814},{"_id":"themes/next-theme/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1494226112814},{"_id":"themes/next-theme/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1494226112815},{"_id":"themes/next-theme/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1494226112816},{"_id":"themes/next-theme/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1494226112817},{"_id":"themes/next-theme/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1494226112817},{"_id":"themes/next-theme/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1494226112818},{"_id":"themes/next-theme/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1494226112820},{"_id":"themes/next-theme/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1494226112822},{"_id":"themes/next-theme/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1494226112825},{"_id":"themes/next-theme/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1494226112826},{"_id":"themes/next-theme/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1494226112826},{"_id":"themes/next-theme/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1494226112827},{"_id":"themes/next-theme/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1494226112827},{"_id":"themes/next-theme/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1494226112828},{"_id":"themes/next-theme/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1494226112828},{"_id":"themes/next-theme/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1494226112829},{"_id":"themes/next-theme/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1494226112830},{"_id":"themes/next-theme/layout/_third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1494226112830},{"_id":"themes/next-theme/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1494226112831},{"_id":"themes/next-theme/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1494226112832},{"_id":"themes/next-theme/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1494226112833},{"_id":"themes/next-theme/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1494226112834},{"_id":"themes/next-theme/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1494226112833},{"_id":"themes/next-theme/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1494226112834},{"_id":"themes/next-theme/layout/_third-party/comments/livere.swig","hash":"c75024151fc63220e7d01035d8a1aff9affdecc7","modified":1494226112836},{"_id":"themes/next-theme/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1494226112835},{"_id":"themes/next-theme/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1494226112836},{"_id":"themes/next-theme/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1494226112842},{"_id":"themes/next-theme/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1494226112844},{"_id":"themes/next-theme/layout/_third-party/search/localsearch.swig","hash":"a0c042a74ea1afcb19daac7e2604a2bc5495037b","modified":1494226112843},{"_id":"themes/next-theme/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1494226112844},{"_id":"themes/next-theme/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1494226112899},{"_id":"themes/next-theme/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1494226112902},{"_id":"themes/next-theme/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1494226112900},{"_id":"themes/next-theme/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1494226112921},{"_id":"themes/next-theme/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1494226112920},{"_id":"themes/next-theme/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1494226112922},{"_id":"themes/next-theme/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1494226112932},{"_id":"themes/next-theme/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1494226112933},{"_id":"themes/next-theme/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1494226112934},{"_id":"themes/next-theme/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1494226112934},{"_id":"themes/next-theme/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1494226112935},{"_id":"themes/next-theme/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1494226112935},{"_id":"themes/next-theme/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1494226112936},{"_id":"themes/next-theme/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1494226112936},{"_id":"themes/next-theme/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1494226112938},{"_id":"themes/next-theme/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1494226112938},{"_id":"themes/next-theme/source/js/src/utils.js","hash":"092a32149b67a7af271c6c2c45f4c737f64b7e54","modified":1494226112939},{"_id":"themes/next-theme/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1494226112940},{"_id":"themes/next-theme/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1494226112942},{"_id":"themes/next-theme/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"68db2c0bf1064176627199394f25f6dc37ea23ad","modified":1494226112943},{"_id":"themes/next-theme/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1494226112945},{"_id":"themes/next-theme/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1494226112944},{"_id":"themes/next-theme/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1494226112956},{"_id":"themes/next-theme/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1494226112959},{"_id":"themes/next-theme/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1494226112960},{"_id":"themes/next-theme/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1494226112957},{"_id":"themes/next-theme/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1494226112961},{"_id":"themes/next-theme/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1494226112961},{"_id":"themes/next-theme/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1494226112962},{"_id":"themes/next-theme/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1494226112963},{"_id":"themes/next-theme/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1494226112971},{"_id":"themes/next-theme/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1494226112978},{"_id":"themes/next-theme/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1494226112984},{"_id":"themes/next-theme/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1494226112985},{"_id":"themes/next-theme/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1494226112985},{"_id":"themes/next-theme/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1494226112989},{"_id":"themes/next-theme/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1494226112992},{"_id":"themes/next-theme/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1494226112990},{"_id":"themes/next-theme/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1494226112992},{"_id":"themes/next-theme/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1494226112993},{"_id":"themes/next-theme/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1494226112980},{"_id":"themes/next-theme/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1494226112983},{"_id":"themes/next-theme/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1494226112981},{"_id":"themes/next-theme/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1494226112980},{"_id":"themes/next-theme/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1494226112982},{"_id":"themes/next-theme/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1494226112982},{"_id":"source/_posts/debug-ros-using-qt/mode.jpg","hash":"2d4f4400878e14d8aff74dfa4dcbb08139d59c6c","modified":1496989740071},{"_id":"source/_posts/debug-ros-using-qt/open.jpg","hash":"4ada9d43c0a1b4ac564b6e09c6744397626be14f","modified":1496989532373},{"_id":"source/_posts/ros-navigation-simulation/amcl.jpg","hash":"44dbdf14bd88a5ef4640fb81d307c8593c2043c7","modified":1495608548005},{"_id":"source/_posts/ros-navigation-simulation/amcl-move.jpg","hash":"89d30b1c109fae2fe58685a43eab222cbb154bfe","modified":1495608714196},{"_id":"source/_posts/ros-navigation-simulation/square.jpg","hash":"c95f31b51db5771c52112eb92b1dbfd1d7b1ec33","modified":1495607113243},{"_id":"source/_posts/vim/ycm.jpg","hash":"afdb3559549b9f6949a961ddd77e5481a6dab98c","modified":1496288929477},{"_id":"themes/next-theme/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1494226112978},{"_id":"source/_posts/debug-ros-using-qt/compile.jpg","hash":"059df4f076ca2e0df54904996b1aa618964325c5","modified":1496989828407},{"_id":"source/_posts/ros-communication/talker.jpg","hash":"5b4496fc8d5bbff82328140a0aa60003180afa50","modified":1495459308000},{"_id":"themes/next-theme/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1494226112842},{"_id":"themes/next-theme/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1494226112841},{"_id":"themes/next-theme/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1494226112856},{"_id":"themes/next-theme/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1494226112854},{"_id":"themes/next-theme/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1494226112855},{"_id":"themes/next-theme/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1494226112857},{"_id":"themes/next-theme/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1494226112857},{"_id":"themes/next-theme/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1494226112869},{"_id":"themes/next-theme/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1494226112884},{"_id":"themes/next-theme/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1494226112895},{"_id":"themes/next-theme/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1494226112896},{"_id":"themes/next-theme/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1494226112897},{"_id":"themes/next-theme/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1494226112898},{"_id":"themes/next-theme/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1494226112898},{"_id":"themes/next-theme/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1494226112899},{"_id":"themes/next-theme/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1494226112907},{"_id":"themes/next-theme/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1494226112908},{"_id":"themes/next-theme/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1494226112907},{"_id":"themes/next-theme/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1494226112909},{"_id":"themes/next-theme/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1494226112909},{"_id":"themes/next-theme/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1494226112910},{"_id":"themes/next-theme/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1494226112912},{"_id":"themes/next-theme/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1494226112904},{"_id":"themes/next-theme/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1494226112913},{"_id":"themes/next-theme/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1494226112914},{"_id":"themes/next-theme/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1494226112913},{"_id":"themes/next-theme/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1494226112911},{"_id":"themes/next-theme/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1494226112916},{"_id":"themes/next-theme/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1494226112917},{"_id":"themes/next-theme/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1494226112916},{"_id":"themes/next-theme/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1494226112918},{"_id":"themes/next-theme/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1494226112918},{"_id":"themes/next-theme/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1494226112915},{"_id":"themes/next-theme/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1494226112937},{"_id":"themes/next-theme/source/lib/Han/dist/han.min.css","hash":"95518d298d3c5c271faec2e4977df9e5dedd5d84","modified":1494226112976},{"_id":"themes/next-theme/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1494226112977},{"_id":"themes/next-theme/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1494226112945},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1494226112947},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1494226112946},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1494226112946},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1494226112948},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1494226112949},{"_id":"themes/next-theme/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1494226112954},{"_id":"themes/next-theme/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1494226112955},{"_id":"themes/next-theme/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1494226112955},{"_id":"themes/next-theme/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1494226112958},{"_id":"themes/next-theme/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1494226112958},{"_id":"themes/next-theme/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1494226112964},{"_id":"themes/next-theme/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1494226112964},{"_id":"themes/next-theme/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1494226112965},{"_id":"themes/next-theme/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1494226112988},{"_id":"themes/next-theme/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1494226112988},{"_id":"source/_posts/ros-primary-tutorial-10/test.jpg","hash":"c3b4f2dd4ee99f5ab81fe5412d62e2f64b501c98","modified":1496220039345},{"_id":"themes/next-theme/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1494226112975},{"_id":"themes/next-theme/source/lib/Han/dist/han.css","hash":"524cfca7b6ab135d81ea723d8de06fdf0dbe7e56","modified":1494226112975},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1494226112969},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1494226112969},{"_id":"themes/next-theme/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1494226112991},{"_id":"source/_posts/ros-serial/serial.jpg","hash":"37f55bdc08df9dfe0ed175102bed4b03c1849cf8","modified":1494987346231},{"_id":"themes/next-theme/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1494226112858},{"_id":"themes/next-theme/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1494226112863},{"_id":"themes/next-theme/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1494226112864},{"_id":"themes/next-theme/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1494226112863},{"_id":"themes/next-theme/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1494226112865},{"_id":"themes/next-theme/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1494226112868},{"_id":"themes/next-theme/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1494226112866},{"_id":"themes/next-theme/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1494226112867},{"_id":"themes/next-theme/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1494226112868},{"_id":"themes/next-theme/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1494226112859},{"_id":"themes/next-theme/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1494226112860},{"_id":"themes/next-theme/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1494226112861},{"_id":"themes/next-theme/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1494226112860},{"_id":"themes/next-theme/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1494226112862},{"_id":"themes/next-theme/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1494226112879},{"_id":"themes/next-theme/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1494226112879},{"_id":"themes/next-theme/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1494226112881},{"_id":"themes/next-theme/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1494226112882},{"_id":"themes/next-theme/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1494226112880},{"_id":"themes/next-theme/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1494226112882},{"_id":"themes/next-theme/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1494226112883},{"_id":"themes/next-theme/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1494226112883},{"_id":"themes/next-theme/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1494226112870},{"_id":"themes/next-theme/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1494226112884},{"_id":"themes/next-theme/source/css/_common/components/post/post-collapse.styl","hash":"e1a7a0828e3c93cc044250084c1ae0c9a22a6d4c","modified":1494226112871},{"_id":"themes/next-theme/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1494226112871},{"_id":"themes/next-theme/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1494226112872},{"_id":"themes/next-theme/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1494226112873},{"_id":"themes/next-theme/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1494226112873},{"_id":"themes/next-theme/source/css/_common/components/post/post-meta.styl","hash":"3d3e0200716ceb276ac755cc400def9c1b437489","modified":1494226112874},{"_id":"themes/next-theme/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1494226112875},{"_id":"themes/next-theme/source/css/_common/components/post/post-reward.styl","hash":"636884d2ec9caaa5566107dc2af94160de8731ed","modified":1494393192004},{"_id":"themes/next-theme/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1494226112876},{"_id":"themes/next-theme/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1494226112877},{"_id":"themes/next-theme/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1494226112877},{"_id":"themes/next-theme/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1494226112885},{"_id":"themes/next-theme/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1494226112878},{"_id":"themes/next-theme/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1494226112886},{"_id":"themes/next-theme/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1494226112886},{"_id":"themes/next-theme/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1494226112887},{"_id":"themes/next-theme/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1494226112889},{"_id":"themes/next-theme/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1494226112888},{"_id":"themes/next-theme/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1494226112890},{"_id":"themes/next-theme/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1494226112891},{"_id":"themes/next-theme/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1494226112890},{"_id":"themes/next-theme/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1494226112892},{"_id":"themes/next-theme/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1494226112892},{"_id":"themes/next-theme/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1494226112893},{"_id":"themes/next-theme/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1494226112893},{"_id":"themes/next-theme/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1494226112894},{"_id":"themes/next-theme/source/css/_common/components/third-party/third-party.styl","hash":"eb45ee16051624c6e36a274c0a9538e961f10c4d","modified":1494226112894},{"_id":"themes/next-theme/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1494226112911},{"_id":"themes/next-theme/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1494226112905},{"_id":"themes/next-theme/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1494226112906},{"_id":"themes/next-theme/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1494226112973},{"_id":"themes/next-theme/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1494226112972},{"_id":"themes/next-theme/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1494226112973},{"_id":"themes/next-theme/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1494226112974},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1494226112950},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1494226112950},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1494226112951},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1494226112952},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1494226112952},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1494226112953},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1494226112970},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1494226112966},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1494226112968},{"_id":"themes/next-theme/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1494226112941},{"_id":"themes/next-theme/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1494226112987},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1494226112967},{"_id":"public/baidusitemap.xml","hash":"2798f258a653f740aba5ac5a3833a2e811927282","modified":1498693472957},{"_id":"public/search.xml","hash":"e1420b1d130bf7471cba13c5c967d7ea7b87a052","modified":1498693472984},{"_id":"public/atom.xml","hash":"6dd59da1c4ec6b3102ceebd63e48aa590e24accc","modified":1498693472984},{"_id":"public/sitemap.xml","hash":"70bfd49972fbcfc79bcd8f85650ea90cc61d927c","modified":1498693473006},{"_id":"public/categories/index.html","hash":"e2671252f3af8f81b5a8b6fb441089007c89fcb9","modified":1498693473916},{"_id":"public/2017/06/28/omniwheel-kinematical-analysis/index.html","hash":"cb59acb5ccb0e79504863b51b7827033b582897d","modified":1498693473917},{"_id":"public/tags/index.html","hash":"52a503bc0945304043d1c7cf95484647aef63e49","modified":1498693473917},{"_id":"public/about/index.html","hash":"322ef7d61b2dcfd4cc49fa9ca5304d8ef5ac43bb","modified":1498693473922},{"_id":"public/2017/06/12/ros-books/index.html","hash":"6afdd7e89f1d016a4fff637b23da6bb96f9706c6","modified":1498693473922},{"_id":"public/2017/06/12/putty-graphics-ubuntu/index.html","hash":"d8f252431708b8e01e73660ff5fddb6000084879","modified":1498693473922},{"_id":"public/2017/06/09/git-summary/index.html","hash":"3d6c9417598d91a8c165236f1e38940349b9a1e9","modified":1498693473922},{"_id":"public/2017/06/07/ros-primary-tutorial-13/index.html","hash":"b516a46db25c8013d531415bff84a4ca25ce2863","modified":1498693473922},{"_id":"public/2017/06/08/ros-primary-tutorial-14/index.html","hash":"56227a5b029d156a3a689487147197c9b79f1786","modified":1498693473923},{"_id":"public/2017/06/07/ros-primary-tutorial-12/index.html","hash":"f977071612e1b5db5366c4b02d2e07688f700f1d","modified":1498693473923},{"_id":"public/2017/05/31/ros-primary-tutorial-9/index.html","hash":"a1972e1c3cbf60c3a24f9697b63c968c15735d67","modified":1498693473923},{"_id":"public/2017/06/01/ros-primary-tutorial-11/index.html","hash":"81bbdeab247f8d8c81f1dddd6b1d869c7f353d86","modified":1498693473923},{"_id":"public/2017/05/31/ros-primary-tutorial-10/index.html","hash":"2ba9e71239f46b14d78fcf00d623599c37ea22f7","modified":1498693473923},{"_id":"public/2017/05/31/ros-primary-tutorial-8/index.html","hash":"cc9245c7d48069df7cdd45e3bc7756d87c1c3e51","modified":1498693473923},{"_id":"public/2017/05/31/ros-primary-tutorial-7/index.html","hash":"371582322a37d7e295e33759abe822127fc16bc3","modified":1498693473923},{"_id":"public/2017/05/27/ros-primary-tutorial-6/index.html","hash":"58d8d612d95a0a0ac5679d93a69a043379147855","modified":1498693473923},{"_id":"public/2017/05/27/ros-primary-tutorial-5/index.html","hash":"2c085c520bec47bc055f8f1c2ab3483f8429bfa7","modified":1498693473923},{"_id":"public/2017/05/26/ros-primary-tutorial-4/index.html","hash":"b6953c9c7fd584cfda016c7f3cedfd9355150a13","modified":1498693473923},{"_id":"public/2017/05/26/ros-primary-tutorial-3/index.html","hash":"c0f046e85fdd506af0b6361bf42c662747424140","modified":1498693473924},{"_id":"public/2017/05/26/ros-primary-tutorial-2/index.html","hash":"6c1237070a0e9edbfc4875718b29c29c45c1b3ab","modified":1498693473924},{"_id":"public/2017/05/26/ros-primary-tutorial-1/index.html","hash":"23f6ff586b8693877f70e65de98523e7f8827a5e","modified":1498693473924},{"_id":"public/2017/05/25/debug-ros-using-qt/index.html","hash":"447388426e2c1ce75900089ce80ae5827571f44a","modified":1498693473924},{"_id":"public/2017/05/24/ros-navigation-simulation/index.html","hash":"7bfa5f71fa3f1b9adf502a764467fe51d12edb57","modified":1498693473924},{"_id":"public/2017/05/23/ubuntu-hexo/index.html","hash":"3a8a998f822e2888d806982ee449b9fa62ddb366","modified":1498693473924},{"_id":"public/2017/05/24/ros-simulation/index.html","hash":"28e145d387557d94e261cfeb810c2cf2925c690e","modified":1498693473924},{"_id":"public/2017/05/23/ros-navigation-compile/index.html","hash":"5fa7bfbaec53f623d3a7eb2ee54f47620c2d2525","modified":1498693473924},{"_id":"public/2017/05/22/ros-communication/index.html","hash":"84599ac30c7948ccca0f6d29317a2f32f09cd227","modified":1498693473924},{"_id":"public/2017/05/17/linux-serial/index.html","hash":"dae108e75bb30bc6ea837809c5aa3abf42d3960b","modified":1498693473924},{"_id":"public/2017/05/18/vim/index.html","hash":"63ed739a4ca886d7ad4461c5b6a03083691c3e3e","modified":1498693473924},{"_id":"public/2017/05/17/ros-serial/index.html","hash":"28b9d670d0e5f8aa985234ac3f6ed88d5fa04f99","modified":1498693473924},{"_id":"public/2017/05/15/ros-indigo-raspberry/index.html","hash":"f97da79d5e2a2b2a093cad37affa9a9dcef4f347","modified":1498693473924},{"_id":"public/2017/05/15/raspberryPi/index.html","hash":"f68d909628b0d0ce77fd6e5b94dec202d18882aa","modified":1498693473924},{"_id":"public/2017/05/13/hexo-error/index.html","hash":"1a53d38f76c9b8fe9d6b4f1fd8e5fc51cccd5e7a","modified":1498693473924},{"_id":"public/2017/05/11/float-to-byte/index.html","hash":"de31d789f644acdc3030ebe2bf2ac3771cba81c1","modified":1498693473924},{"_id":"public/2017/05/09/hexo-advance/index.html","hash":"0711f711ec1f5db55d6ae5e8ea987d36975c2399","modified":1498693473924},{"_id":"public/2017/05/09/qt-widget-designated-location/index.html","hash":"41b9a8d0b6756349322a6f5c3993c97962d530c4","modified":1498693473924},{"_id":"public/2017/05/07/hexo-backup/index.html","hash":"7e1c6f65feb5f9eb1bd08bc2f45a10d5aff18628","modified":1498693473924},{"_id":"public/2017/05/07/hexo-blog/index.html","hash":"7b5d9ec4eb5581a63809482fef395d34751b5f12","modified":1498693473924},{"_id":"public/archives/index.html","hash":"19f732d11f83e6f6392453d68a81f6794d4b39a3","modified":1498693473925},{"_id":"public/archives/page/3/index.html","hash":"2af3cb3cdb65b114dc13d90463b95004c2a8af7b","modified":1498693473925},{"_id":"public/archives/page/2/index.html","hash":"bc9e18c64c7e528fd2b1fb659475a5c0a2f45db5","modified":1498693473925},{"_id":"public/archives/page/4/index.html","hash":"6bc9bd5c47e279fa636ab799866d8ce91e12f3da","modified":1498693473925},{"_id":"public/archives/2017/page/2/index.html","hash":"2619da5be92c3d8aa0e99ba09e678fa44a72b262","modified":1498693473925},{"_id":"public/archives/2017/index.html","hash":"dd4d7519ce9f2f2b1559e1ae9807ffa4976adc1a","modified":1498693473925},{"_id":"public/archives/2017/page/3/index.html","hash":"d3b74235d7f3a186534dd4f68cbb2d2847857e55","modified":1498693473925},{"_id":"public/archives/2017/page/4/index.html","hash":"a854eecb0d4878f33cc1974d146a71b242fe2b15","modified":1498693473925},{"_id":"public/archives/2017/05/index.html","hash":"4eb322dc7895eca7e9f993f0cce69f989d77f7fc","modified":1498693473926},{"_id":"public/archives/2017/05/page/2/index.html","hash":"0ebd7b6c73b24c455286b48e6a1472c654fa0014","modified":1498693473926},{"_id":"public/archives/2017/05/page/3/index.html","hash":"ebd11a4c714c6a881b65a101e338ee7e723ecb77","modified":1498693473926},{"_id":"public/archives/2017/06/index.html","hash":"184a0e1224f581c9c65b11ab5c6e0d0e72dc1134","modified":1498693473926},{"_id":"public/categories/Linux/index.html","hash":"2925ed29355b11588fb8483544a50b7d26f9bf47","modified":1498693473926},{"_id":"public/categories/ROS/index.html","hash":"e494e17bd241ef0162f1683258969556eaff3588","modified":1498693473926},{"_id":"public/categories/ROS/page/2/index.html","hash":"13962a5a086dac4e95e59d39834d47510f7771c9","modified":1498693473926},{"_id":"public/categories/hexo/index.html","hash":"0baffc476e16e309b25abeb50b086a185be48957","modified":1498693473926},{"_id":"public/categories/ROS/page/3/index.html","hash":"b9acd3feac8e3f23cefd1fdd307c1008a2f181bd","modified":1498693473926},{"_id":"public/categories/Qt/index.html","hash":"dcf698526f89efd7093b2c87104bbd8537338c23","modified":1498693473927},{"_id":"public/tags/Git-Command/index.html","hash":"684485f07d1e529945599b8dd39d3a77a510f8fd","modified":1498693473927},{"_id":"public/tags/Linux/index.html","hash":"15e3a3c36aadcd6a0964fa437d39ff7bd608f813","modified":1498693473927},{"_id":"public/tags/ROS-Qt/index.html","hash":"7ff94656b3478d32cf6d1cee1ae2ec174e0bb2ec","modified":1498693473927},{"_id":"public/tags/hexo/index.html","hash":"dd4056abeeb0e0ff2de56de8399c297e15cc71ec","modified":1498693473927},{"_id":"public/tags/Linux-serial/index.html","hash":"4b6ed1c734b49d195f15bfc91b3bbc75192f5473","modified":1498693473927},{"_id":"public/tags/omniwheel/index.html","hash":"c4a1c46942266c328d7f7c7c59b428d7aed43516","modified":1498693473927},{"_id":"public/tags/Qt/index.html","hash":"f3c4cf3520d8cacc4839adbe14500158987a49c4","modified":1498693473927},{"_id":"public/tags/PuttyGraphics/index.html","hash":"1a26cfd1d006816a34eba52c493811fa4c163b96","modified":1498693473927},{"_id":"public/tags/raspberryPi/index.html","hash":"22d1df0df0be0d0d20ac6336f294f23cf23ec66a","modified":1498693473927},{"_id":"public/tags/ROS-Books/index.html","hash":"4cbffd0df20ac2919d705d27535f325285d00522","modified":1498693473927},{"_id":"public/tags/Communication/index.html","hash":"e18c1b76163867835ec7101e7423ddb5a7298586","modified":1498693473927},{"_id":"public/tags/ROS-Navigation/index.html","hash":"1aacfee8a0eeb9c0a2066b1022de8262d0d0f17f","modified":1498693473927},{"_id":"public/tags/raspberryPi-ros-indigo-jessie/index.html","hash":"07c30ffee20eec30caa50d4bb9d0d1db25ef38df","modified":1498693473928},{"_id":"public/tags/BayesianFiltering/index.html","hash":"1591f098620ecafbfafd6a25220815ad7f858563","modified":1498693473941},{"_id":"public/tags/ROS-Installation/index.html","hash":"87eb1630a0383d8988d6e74ba3965faa3dc910e4","modified":1498693473941},{"_id":"public/tags/ServiceClient/index.html","hash":"5206dec0dd47224e258f5fab035508899ae9a45a","modified":1498693473941},{"_id":"public/tags/Publisher/index.html","hash":"96a9c23c5b47e15e1904f1d67d151a6f1147b191","modified":1498693473941},{"_id":"public/tags/ROStf/index.html","hash":"8956fd8920ab49254b4bef92d01f902ba92d23c7","modified":1498693473941},{"_id":"public/tags/ROS-tf/index.html","hash":"28035dcdaae9f05b9086822339945380b63cdfb2","modified":1498693473941},{"_id":"public/tags/ROS-File-s-System/index.html","hash":"49ecf785abe82e9ab743109257e228951713492f","modified":1498693473941},{"_id":"public/tags/Catkin-make/index.html","hash":"5703558cbed7cfcadfdcb6a49d8e74fa9df9c0d6","modified":1498693473941},{"_id":"public/tags/ROS-Topics/index.html","hash":"8af497a50029f0a2ab4aa8822b68424bdb2ad01a","modified":1498693473941},{"_id":"public/tags/catkin-create-pkg/index.html","hash":"ef78440449423afef505c3957ea969d6409f1b00","modified":1498693473941},{"_id":"public/tags/ROS-Node/index.html","hash":"908f1d6f28dde58a788621265e9145bfda26c6b5","modified":1498693473941},{"_id":"public/tags/rqt-console/index.html","hash":"731a9dc1a7a81d107ab9921ec9a330aa604b50a0","modified":1498693473941},{"_id":"public/tags/ROS-Services/index.html","hash":"c89b99572ff75814a6943cbc86040c829df123c5","modified":1498693473941},{"_id":"public/tags/ROS-Messages/index.html","hash":"12879b9018c0e08657f835f52a9ff212f0f4533f","modified":1498693473941},{"_id":"public/tags/ROS-serial/index.html","hash":"bcd3dad91517e18b07b9742c88be55e3824e3400","modified":1498693473941},{"_id":"public/tags/ROS-Simulation/index.html","hash":"71b9debaf6391114b01e4a7e6af8e6411018aeda","modified":1498693473941},{"_id":"public/index.html","hash":"dcfd169e8d8f005123ea2331e3bd41e876d248a0","modified":1498693473941},{"_id":"public/tags/ubuntu-hexo/index.html","hash":"eb6ad9493c404fd0008fa13054b9970023652642","modified":1498693473941},{"_id":"public/tags/Vim/index.html","hash":"9f136180114e6fb3f8b7737d170248e5922ac0ad","modified":1498693473942},{"_id":"public/page/2/index.html","hash":"6de105870afda62781bfbda3e8f3300c9fad009b","modified":1498693473942},{"_id":"public/page/3/index.html","hash":"92b1dac8c7d304319c1677d818dea3218c7aa935","modified":1498693473942},{"_id":"public/page/4/index.html","hash":"7f28a94edbeb650dd52d52a9d8b4439f53fc4afd","modified":1498693473942},{"_id":"public/CNAME","hash":"fe99efeeffb82c0c03563103cda7b823d1450a1d","modified":1498693473942},{"_id":"public/favicon.ico","hash":"3cf8dbb793a8aba654ddffa23caa49a377ff72d2","modified":1498693473942},{"_id":"public/about/qr.png","hash":"fe70fbe9b928f4c234636425f800d54e7a089a04","modified":1498693473942},{"_id":"public/images/alipay.jpg","hash":"d8c8a6b853225f9dc3e9b94beadbc0bf6be7bb93","modified":1498693473942},{"_id":"public/about/qrh.png","hash":"1cb43ac737f02ed1874cb7b7489ed486b9e4c22c","modified":1498693473942},{"_id":"public/images/avatar.jpg","hash":"0c4428cbc398b7f18ef1fcae5a1c9664c29d6fca","modified":1498693473942},{"_id":"public/images/[原始文件]/alipay.jpg","hash":"5e676d7d1e10c982d93f9c6634d362443d101a56","modified":1498693473942},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1498693473942},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1498693473942},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1498693473942},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1498693473942},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1498693473943},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1498693473943},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1498693473943},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1498693473943},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1498693473943},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1498693473943},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1498693473943},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1498693473943},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1498693473943},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1498693473943},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1498693473943},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1498693473943},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1498693473943},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1498693473943},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1498693473943},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1498693473943},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1498693473943},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1498693473943},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1498693473943},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1498693473943},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1498693473943},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1498693473943},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1498693473943},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1498693473943},{"_id":"public/2017/05/07/hexo-backup/setbranch.jpg","hash":"3cf5e1105cadb1de2190da051cde55d182599003","modified":1498693473943},{"_id":"public/2017/05/26/ros-primary-tutorial-1/rosv.jpg","hash":"7e36718479a611ef04d504ca1d2b32c694141fb0","modified":1498693473943},{"_id":"public/2017/06/01/ros-primary-tutorial-11/service.jpg","hash":"5c83d68778e910130029fb0071e0eb17468a54b3","modified":1498693473943},{"_id":"public/2017/05/07/hexo-blog/leancloudc.jpg","hash":"b7991651b5bc2901864733da810a7e58513e5788","modified":1498693473944},{"_id":"public/2017/06/28/omniwheel-kinematical-analysis/omni.jpg","hash":"9f6b81e6f029d51bd0c2346787fea9de1874838e","modified":1498693473944},{"_id":"public/2017/06/28/omniwheel-kinematical-analysis/omnidiagram.jpg","hash":"5ae5d553bbcde940c590d6f24a1f05d07e35a0ed","modified":1498693473944},{"_id":"public/2017/05/27/ros-primary-tutorial-5/turtlesim.jpg","hash":"71fe4734aa3c0ad31175403d2dc5c7928997dfb9","modified":1498693473944},{"_id":"public/2017/05/27/ros-primary-tutorial-5/nodeinfo.jpg","hash":"c182557f2e24fa792c6bc3cc26517aef04641e2a","modified":1498693473944},{"_id":"public/2017/05/17/ros-serial/arch.jpg","hash":"0cd82634c7c53170f0fab6c8b2f9c5bc4f02a583","modified":1498693473944},{"_id":"public/2017/05/31/ros-primary-tutorial-7/rosparam.jpg","hash":"6bf0b8a78413f5d87d48786e994f13a2d04f0735","modified":1498693473944},{"_id":"public/2017/05/31/ros-primary-tutorial-7/spawn.jpg","hash":"406b2dd36d8d7ad537caf4c1b5af15dcbfa2f50a","modified":1498693473944},{"_id":"public/2017/05/15/ros-indigo-raspberry/roscore.jpg","hash":"88f9c1ebe7ac49fb9b6083183e09d4edb432ac4d","modified":1498693473944},{"_id":"public/2017/05/15/ros-indigo-raspberry/urdf.jpg","hash":"c9928f762f38bceab10973d1aad63cd1b98a7bc8","modified":1498693473944},{"_id":"public/2017/06/08/ros-primary-tutorial-14/simple_robot.png","hash":"f2b805374f0eb59ddc4f1032626132127cc0e228","modified":1498693473945},{"_id":"public/2017/06/08/ros-primary-tutorial-14/tf.png","hash":"29045c6baa311349a4862040756b76a7b70eff20","modified":1498693473945},{"_id":"public/2017/06/08/ros-primary-tutorial-14/tf_robot.png","hash":"c9994255cc4b88da3dd5534a12eb63b0543705d2","modified":1498693473945},{"_id":"public/2017/05/18/vim/powerline.jpg","hash":"f6437229e71edbc9a8571a2ff358071d2c858514","modified":1498693473945},{"_id":"public/2017/06/12/putty-graphics-ubuntu/puttyssh.jpg","hash":"8104a9c218ca93589cb85785bcb1f8b0fada91fb","modified":1498693473945},{"_id":"public/2017/05/18/vim/tree.jpg","hash":"427511d6e79478bfb0885ec5a1a707619a74f22c","modified":1498693473945},{"_id":"public/2017/06/12/putty-graphics-ubuntu/puttyx11.jpg","hash":"f134359992dcf28e92f5314bae6723919da1c8c5","modified":1498693473945},{"_id":"public/2017/06/12/putty-graphics-ubuntu/xmingconfig.jpg","hash":"d38d420a95007bd93e6ec5591a5b1422c045cd57","modified":1498693473945},{"_id":"public/2017/06/07/ros-primary-tutorial-13/moving.jpg","hash":"2197112d35ccbac2bbb1771ace238f4dd2ff6c31","modified":1498693473945},{"_id":"public/2017/05/15/raspberryPi/wpacli.jpg","hash":"0862f7c3cbfeff4217f4d7f9ff209a09da58289e","modified":1498693473945},{"_id":"public/2017/06/07/ros-primary-tutorial-13/carrot1.jpg","hash":"0a5f4ad7bb940d71bd3f97adf5a29c5b95e07e20","modified":1498693473945},{"_id":"public/2017/06/07/ros-primary-tutorial-13/tree.png","hash":"9cd47e2312f76338bc000edec8e5b3895b2104e9","modified":1498693473945},{"_id":"public/2017/05/27/ros-primary-tutorial-6/turtlesim.jpg","hash":"36236ab203a145b0869faefbf2e4fcb6bc98dc2d","modified":1498693473945},{"_id":"public/2017/05/31/ros-primary-tutorial-8/info.jpg","hash":"0da19a929a82c03f6d190f4b3c73190955c1106b","modified":1498693473945},{"_id":"public/2017/05/31/ros-primary-tutorial-8/rqtconsole.jpg","hash":"9f2af6083e11b09b986de4596ec683823ced69fa","modified":1498693473945},{"_id":"public/2017/05/31/ros-primary-tutorial-8/rqtloglevel.jpg","hash":"efa939871cda1da144b35c0245966ecc3571ae13","modified":1498693473945},{"_id":"public/2017/05/31/ros-primary-tutorial-8/rqtgraph.jpg","hash":"f83f6b5f5b61e693752b663c3e108a464e0df5f9","modified":1498693473945},{"_id":"public/2017/05/31/ros-primary-tutorial-8/two.jpg","hash":"79cbd5a15195b5ecc19d6d0c858ccb6e0cc8f966","modified":1498693473945},{"_id":"public/2017/05/24/ros-simulation/axis.jpg","hash":"7e94a975e132b4e1452d4a392f306a2b35464aa5","modified":1498693473945},{"_id":"public/2017/05/24/ros-simulation/screw-rule.jpg","hash":"d79c5fe79a74d9253063b2aa20f5ff265dee641b","modified":1498693473945},{"_id":"public/2017/05/24/ros-simulation/rviz-left.jpg","hash":"a2910d078601bbe693b17c8d8422e36cc5f2c74a","modified":1498693473945},{"_id":"public/2017/05/09/qt-widget-designated-location/final.jpg","hash":"6094e589bfcf4f7f21d5e0fbf1e84d0368e1d83c","modified":1498693473945},{"_id":"public/2017/05/09/qt-widget-designated-location/qrc.jpg","hash":"94bb19dd0e013f4d24bd3b8bb5cdab7486773ff2","modified":1498693473945},{"_id":"public/2017/05/09/qt-widget-designated-location/res-qrc.jpg","hash":"33fc26d52a5cdeed861e6b4bae59da2d3531e407","modified":1498693473945},{"_id":"public/2017/06/07/ros-primary-tutorial-12/follow.jpg","hash":"0a55643364f6796d4534d836e4349b919de04c11","modified":1498693473946},{"_id":"public/2017/05/24/ros-navigation-simulation/movebase.png","hash":"fa7e997b2d42319a04fc33515fdb67aac1703d06","modified":1498693473946},{"_id":"public/2017/06/07/ros-primary-tutorial-12/matrix.png","hash":"d747714d175f6b454794ad7f115604e400472a92","modified":1498693473946},{"_id":"public/2017/06/07/ros-primary-tutorial-12/pdf.jpg","hash":"b45b7e38ed157fb60318c2524a39724270b940d3","modified":1498693473946},{"_id":"public/2017/06/07/ros-primary-tutorial-12/runtime.jpg","hash":"58462fa2fa621ec6de60b99af99f6384daced99c","modified":1498693473946},{"_id":"public/2017/05/09/hexo-advance/baidusitemap.jpg","hash":"922fff106618c75c14f2bbb3d0616f8b78802b23","modified":1498693473946},{"_id":"public/2017/05/09/hexo-advance/addsitemap.jpg","hash":"6f99f8f371bd84b036ffe91ded7abbd704921651","modified":1498693473946},{"_id":"public/2017/05/09/hexo-advance/error.jpg","hash":"22a649fd5c56aadc9f327b1569705419d50f2237","modified":1498693473946},{"_id":"public/2017/05/09/hexo-advance/googleconsole.jpg","hash":"80202f30acd3f34d6ba34cd6f4fa656f17224899","modified":1498693473946},{"_id":"public/2017/05/09/hexo-advance/googleverify.jpg","hash":"4f763221d87615a0959a0032a595f4684fd8ecb7","modified":1498693473946},{"_id":"public/2017/05/09/hexo-advance/pay.jpg","hash":"15178d5e18e706c9b6c1b67235b83f504379e8e9","modified":1498693473946},{"_id":"public/2017/05/09/hexo-advance/sitemap.jpg","hash":"3c3f0e8aa077c59988b915579781362ebeb9203b","modified":1498693473946},{"_id":"public/images/wechat.jpg","hash":"d673254d35893b0a8dc4e6501e1f2bd5fceb176f","modified":1498693474498},{"_id":"public/images/[原始文件]/wechat.jpg","hash":"2e70bc628e855045909e36f236cb9908babeb210","modified":1498693474502},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1498693474509},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1498693474509},{"_id":"public/2017/06/12/ros-books/book.jpg","hash":"9c2d70e790a0d2e75796a04c33f3309f77af7ad3","modified":1498693474509},{"_id":"public/2017/05/23/ros-navigation-compile/ltierror.jpg","hash":"838dd5dafc7e8336058e1db47b489eb1e9cb076a","modified":1498693474510},{"_id":"public/2017/05/22/ros-communication/turtle.jpg","hash":"2de104d636fa5b823ebf67e058ebaae08a1f3a2d","modified":1498693474510},{"_id":"public/2017/06/12/putty-graphics-ubuntu/run.jpg","hash":"2b6e45f299f8d38fa3ea8f0e54584d73e91a040f","modified":1498693474510},{"_id":"public/2017/05/15/raspberryPi/config.jpg","hash":"31d988f2efaea004b2ccfcfca7227235c073998b","modified":1498693474510},{"_id":"public/2017/05/15/raspberryPi/portconfig.jpg","hash":"999761e11eefc0bcf6b59d5fe3c3e95eccd07eff","modified":1498693474510},{"_id":"public/2017/05/15/raspberryPi/vnc.jpg","hash":"01d06e3af2c437a5831b442dc9d0c45ebf3fb80f","modified":1498693474510},{"_id":"public/2017/05/27/ros-primary-tutorial-6/rqtgraph.jpg","hash":"454565603793ffacac1043994892a69285f68b74","modified":1498693474510},{"_id":"public/2017/06/07/ros-primary-tutorial-13/startdemo.jpg","hash":"cd1711f828c5e95d866839d59e2a82e0b88da3e7","modified":1498693474510},{"_id":"public/2017/05/27/ros-primary-tutorial-6/rqth.jpg","hash":"26c5f5df64a348f839db9e0c34ca8211a44ace74","modified":1498693474510},{"_id":"public/2017/05/27/ros-primary-tutorial-6/rqtplot.jpg","hash":"dc14ead3b91767710d1594048ebdf5025b8ec716","modified":1498693474510},{"_id":"public/2017/05/27/ros-primary-tutorial-6/topic.jpg","hash":"8c20c9617cfa246f7b9b7ef0c32396e08285bec7","modified":1498693474510},{"_id":"public/2017/05/24/ros-simulation/rviz.jpg","hash":"45a231c457bea27898eb1462b0c122c8ad23f929","modified":1498693474510},{"_id":"public/2017/05/09/qt-widget-designated-location/grid.jpg","hash":"2470d283416fb2cda7315f9f972dcf9bf7f0a740","modified":1498693474510},{"_id":"public/2017/05/09/qt-widget-designated-location/linux.jpg","hash":"c34ad72bcef156217728ddde4a06fb1f7387bc89","modified":1498693474511},{"_id":"public/2017/05/09/qt-widget-designated-location/text.jpg","hash":"128179bd2b0b6a40e378a33eafc63a26c925bb2a","modified":1498693474511},{"_id":"public/2017/05/24/ros-navigation-simulation/forward.jpg","hash":"56a101f80435ae8db529e0219d86913da32ff40f","modified":1498693474511},{"_id":"public/2017/06/07/ros-primary-tutorial-12/rviz.jpg","hash":"ea1f6671fd71e0f627270737eae6bc5765692437","modified":1498693474511},{"_id":"public/2017/06/07/ros-primary-tutorial-12/tf.png","hash":"1a62784279851e5d48c5c252878d5dad7e44b006","modified":1498693474511},{"_id":"public/2017/05/09/hexo-advance/addok.jpg","hash":"9f4a47c06f9c81d54f984c0b6fb1ee9bd5c63de8","modified":1498693474511},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1498693474523},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1498693474523},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1498693474523},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1498693474523},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1498693474523},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1498693474523},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1498693474523},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1498693474523},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1498693474523},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1498693474523},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1498693474523},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1498693474523},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1498693474523},{"_id":"public/js/src/utils.js","hash":"803f684fa7d0e729115a48851023a31f6fb6d0a7","modified":1498693474523},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1498693474523},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1498693474523},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1498693474523},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1498693474523},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1498693474523},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1498693474523},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1498693474523},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1498693474523},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1498693474523},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1498693474523},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1498693474523},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1498693474523},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1498693474523},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1498693474523},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1498693474523},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1498693474523},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1498693474523},{"_id":"public/google3b552a10c255473b.html","hash":"f2b96b19cb98579df26479cdb158b28d592906c6","modified":1498693474523},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1498693474523},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1498693474524},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1498693474524},{"_id":"public/css/main.css","hash":"0f4396a2ed7552abe4750ba4fcaf2ee39111413e","modified":1498693474524},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1498693474524},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1498693474524},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1498693474524},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1498693474524},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1498693474524},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1498693474524},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1498693474524},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1498693474524},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1498693474524},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1498693474524},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1498693474524},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1498693474524},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1498693474524},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1498693474524},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1498693474524},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1498693474524},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1498693474524},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1498693474525},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1498693474525},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1498693474525},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1498693474525},{"_id":"public/2017/05/25/debug-ros-using-qt/setup.jpg","hash":"70b87340dd263abb20efd121335d1ba00ed5aa70","modified":1498693474525},{"_id":"public/2017/05/07/hexo-blog/hello-world.jpg","hash":"5cda94b2c45b93aa4eb20dfbcb3fafd79a2f47ea","modified":1498693474525},{"_id":"public/2017/05/17/linux-serial/libcssl.jpg","hash":"fea0d9285fd68ab2409c7ec9b5c580f99f5b6d6f","modified":1498693474525},{"_id":"public/2017/05/15/ros-indigo-raspberry/catkin.jpg","hash":"48a6c28b11e71ad941daf8274c8cf78def9ea46d","modified":1498693474525},{"_id":"public/2017/05/24/ros-simulation/rviz-move.jpg","hash":"d82e2262b5e5c20fb7a354af87d109fa6371b1bb","modified":1498693474525},{"_id":"public/2017/05/24/ros-navigation-simulation/obstacle.jpg","hash":"1637d252148acadb9b53d18a85396c7d61935063","modified":1498693474525},{"_id":"public/2017/05/25/debug-ros-using-qt/mode.jpg","hash":"2d4f4400878e14d8aff74dfa4dcbb08139d59c6c","modified":1498693474533},{"_id":"public/2017/05/25/debug-ros-using-qt/open.jpg","hash":"4ada9d43c0a1b4ac564b6e09c6744397626be14f","modified":1498693474533},{"_id":"public/2017/05/24/ros-navigation-simulation/amcl-move.jpg","hash":"89d30b1c109fae2fe58685a43eab222cbb154bfe","modified":1498693474533},{"_id":"public/2017/05/24/ros-navigation-simulation/amcl.jpg","hash":"44dbdf14bd88a5ef4640fb81d307c8593c2043c7","modified":1498693474533},{"_id":"public/2017/05/24/ros-navigation-simulation/square.jpg","hash":"c95f31b51db5771c52112eb92b1dbfd1d7b1ec33","modified":1498693474533},{"_id":"public/2017/05/18/vim/ycm.jpg","hash":"afdb3559549b9f6949a961ddd77e5481a6dab98c","modified":1498693474534},{"_id":"public/2017/05/25/debug-ros-using-qt/compile.jpg","hash":"059df4f076ca2e0df54904996b1aa618964325c5","modified":1498693474536},{"_id":"public/2017/05/22/ros-communication/talker.jpg","hash":"5b4496fc8d5bbff82328140a0aa60003180afa50","modified":1498693474536},{"_id":"public/2017/05/31/ros-primary-tutorial-10/test.jpg","hash":"c3b4f2dd4ee99f5ab81fe5412d62e2f64b501c98","modified":1498693474543},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1498693474548},{"_id":"public/2017/05/17/ros-serial/serial.jpg","hash":"37f55bdc08df9dfe0ed175102bed4b03c1849cf8","modified":1498693474548}],"Category":[{"name":"Linux","_id":"cj4hne51u0004w8int8zh6apm"},{"name":"ROS","_id":"cj4hne527000gw8inmq9tmdmx"},{"name":"hexo","_id":"cj4hne52b000mw8inkxs8ptgz"},{"name":"Qt","_id":"cj4hne535001ew8inn7hanf2s"}],"Data":[],"Page":[{"title":"分类","date":"2017-05-05T04:30:42.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-05-05 12:30:42\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-05-11T01:57:51.234Z","path":"categories/index.html","layout":"page","_id":"cj4hne51m0000w8inldljhgen","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","comments":0,"_content":"......\n\n\n学习、交流、分享\n\n专注于嵌入式linux、ROS、智能硬件\n\n本站文章均属原创，转载请注明出处。\n\n本站永久链接:  http://stevenshi.me\n![Alt text](qrh.png)\nEmail:  steven_1825@163.com\n\nGithub: https://github.com/stevenshichina\n\n  知乎: http://www.zhihu.com/people/stevenshichina\n\n......\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ncomments: false\n---\n......\n\n\n学习、交流、分享\n\n专注于嵌入式linux、ROS、智能硬件\n\n本站文章均属原创，转载请注明出处。\n\n本站永久链接:  http://stevenshi.me\n![Alt text](qrh.png)\nEmail:  steven_1825@163.com\n\nGithub: https://github.com/stevenshichina\n\n  知乎: http://www.zhihu.com/people/stevenshichina\n\n......\n\n\n","date":"2017-06-19T03:35:28.752Z","updated":"2017-06-19T03:35:28.752Z","path":"about/index.html","layout":"page","_id":"cj4hne51s0002w8in34vkvyw5","content":"<p>……</p>\n<p>学习、交流、分享</p>\n<p>专注于嵌入式linux、ROS、智能硬件</p>\n<p>本站文章均属原创，转载请注明出处。</p>\n<p>本站永久链接:  <a href=\"http://stevenshi.me\">http://stevenshi.me</a><br><img src=\"/about/qrh.png\" alt=\"Alt text\"><br>Email:  steven_1825@163.com</p>\n<p>Github: <a href=\"https://github.com/stevenshichina\" target=\"_blank\" rel=\"external\">https://github.com/stevenshichina</a></p>\n<p>  知乎: <a href=\"http://www.zhihu.com/people/stevenshichina\" target=\"_blank\" rel=\"external\">http://www.zhihu.com/people/stevenshichina</a></p>\n<p>……</p>\n","site":{"data":{}},"excerpt":"","more":"<p>……</p>\n<p>学习、交流、分享</p>\n<p>专注于嵌入式linux、ROS、智能硬件</p>\n<p>本站文章均属原创，转载请注明出处。</p>\n<p>本站永久链接:  <a href=\"http://stevenshi.me\">http://stevenshi.me</a><br><img src=\"/about/qrh.png\" alt=\"Alt text\"><br>Email:  steven_1825@163.com</p>\n<p>Github: <a href=\"https://github.com/stevenshichina\" target=\"_blank\" rel=\"external\">https://github.com/stevenshichina</a></p>\n<p>  知乎: <a href=\"http://www.zhihu.com/people/stevenshichina\" target=\"_blank\" rel=\"external\">http://www.zhihu.com/people/stevenshichina</a></p>\n<p>……</p>\n"},{"title":"标签","date":"2017-05-05T04:30:52.000Z","type":"tags","comments":0,"tags":["Qt","Linux","Hexo","ROS"],"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-05-05 12:30:52\ntype: \"tags\"\ncomments: false\ntags:\n - Qt\n - Linux\n - Hexo\n - ROS\n---\n","updated":"2017-05-11T01:58:50.563Z","path":"tags/index.html","layout":"page","_id":"cj4hne51x0006w8in2j7d4u05","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"浮点数与16进制的相互转换","date":"2017-05-11T05:35:03.000Z","comments":1,"_content":"# 前言\n 在嵌入式中经常会遇到浮点数的传输问题，一般将浮点数转换成4字节的16进制传输，这里的浮点数仅限于单精度浮点。大多数人的做法都是使用指针实现强制类型转换，其实浮点数在CPU里就是以4字节存储，既然在同一块内存，那我们能不能使用联合体呢？答案是肯定的。除了强制类型转换，这里介绍使用联合体实现浮点和16进制的转换，简单易用，你绝对会爱上这种方法。\n<!--more-->\n# 强制转换法\n 浮点转换成4字节16进制:\n　　```\n void float2bytes(float p,unsigned char *bytes)\n {\n  unsigned char *pchar = (unsigned char*)&p;\n  for(int i=0;i < sizeof(float);i++)\n  {\n    *bytes = *pchar;\n    pchar++;\n    bytes++;\n  }\n }\n\n　　```\n 16进制4字节转换成浮点：\n　　```\n float bytes2float(unsigned char *bytes)\n {\n  return *((float*)bytes);//强制转换\n }\n　　```\n# 联合体法\n 话不多说，直接上代码：\n　```\n typedef union{\n\n\tunsigned char cvalue[4];\n\tfloat fvalue;\n\n }float_union;\n　```\n 定义联合体变量:\n　```\n float_union trans_data;\n　```\n 此时如果给变量trans_data赋值一个浮点数:\n 　```\n trans_data.fvalue = 10.05;\n　 ```\n 那么直接调用cvalue即可获取浮点数10.05的4字节16进制数据：\n　 ```\n for(int i=0;i<4;i++)\n printf(\" 0x%02x\",trans_data.cvalue[i]);\n \n 　```\n 是不是非常简单实用。\n","source":"_posts/float-to-byte.md","raw":"---\ntitle: 浮点数与16进制的相互转换\ndate: 2017-05-11 13:35:03\ncategories: Linux\ntags: Linux\ncomments: true\n---\n# 前言\n 在嵌入式中经常会遇到浮点数的传输问题，一般将浮点数转换成4字节的16进制传输，这里的浮点数仅限于单精度浮点。大多数人的做法都是使用指针实现强制类型转换，其实浮点数在CPU里就是以4字节存储，既然在同一块内存，那我们能不能使用联合体呢？答案是肯定的。除了强制类型转换，这里介绍使用联合体实现浮点和16进制的转换，简单易用，你绝对会爱上这种方法。\n<!--more-->\n# 强制转换法\n 浮点转换成4字节16进制:\n　　```\n void float2bytes(float p,unsigned char *bytes)\n {\n  unsigned char *pchar = (unsigned char*)&p;\n  for(int i=0;i < sizeof(float);i++)\n  {\n    *bytes = *pchar;\n    pchar++;\n    bytes++;\n  }\n }\n\n　　```\n 16进制4字节转换成浮点：\n　　```\n float bytes2float(unsigned char *bytes)\n {\n  return *((float*)bytes);//强制转换\n }\n　　```\n# 联合体法\n 话不多说，直接上代码：\n　```\n typedef union{\n\n\tunsigned char cvalue[4];\n\tfloat fvalue;\n\n }float_union;\n　```\n 定义联合体变量:\n　```\n float_union trans_data;\n　```\n 此时如果给变量trans_data赋值一个浮点数:\n 　```\n trans_data.fvalue = 10.05;\n　 ```\n 那么直接调用cvalue即可获取浮点数10.05的4字节16进制数据：\n　 ```\n for(int i=0;i<4;i++)\n printf(\" 0x%02x\",trans_data.cvalue[i]);\n \n 　```\n 是不是非常简单实用。\n","slug":"float-to-byte","published":1,"updated":"2017-05-19T09:11:08.071Z","layout":"post","photos":[],"link":"","_id":"cj4hne51o0001w8in3xm24k9m","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p> 在嵌入式中经常会遇到浮点数的传输问题，一般将浮点数转换成4字节的16进制传输，这里的浮点数仅限于单精度浮点。大多数人的做法都是使用指针实现强制类型转换，其实浮点数在CPU里就是以4字节存储，既然在同一块内存，那我们能不能使用联合体呢？答案是肯定的。除了强制类型转换，这里介绍使用联合体实现浮点和16进制的转换，简单易用，你绝对会爱上这种方法。<br><a id=\"more\"></a></p>\n<h1 id=\"强制转换法\"><a href=\"#强制转换法\" class=\"headerlink\" title=\"强制转换法\"></a>强制转换法</h1><p> 浮点转换成4字节16进制:<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">float2bytes</span><span class=\"params\">(<span class=\"keyword\">float</span> p,<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *bytes)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *pchar = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)&amp;p;</div><div class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i &lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">float</span>);i++)</div><div class=\"line\"> &#123;</div><div class=\"line\">   *bytes = *pchar;</div><div class=\"line\">   pchar++;</div><div class=\"line\">   bytes++;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 16进制4字节转换成浮点：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">bytes2float</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *bytes)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"keyword\">return</span> *((<span class=\"keyword\">float</span>*)bytes);<span class=\"comment\">//强制转换</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"联合体法\"><a href=\"#联合体法\" class=\"headerlink\" title=\"联合体法\"></a>联合体法</h1><p> 话不多说，直接上代码：<br>　<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef <span class=\"class\"><span class=\"keyword\">union</span>&#123;</span></div><div class=\"line\"></div><div class=\"line\">unsigned char cvalue[<span class=\"number\">4</span>];</div><div class=\"line\">float fvalue;</div><div class=\"line\"></div><div class=\"line\">&#125;float_union;</div></pre></td></tr></table></figure></p>\n<p> 定义联合体变量:<br>　<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">float_union trans_data<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p> 此时如果给变量trans_data赋值一个浮点数:<br> 　<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">trans_data.fvalue = <span class=\"number\">10.05</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p> 那么直接调用cvalue即可获取浮点数10.05的4字节16进制数据：<br>　 <figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)</div><div class=\"line\"><span class=\"keyword\">printf</span>(<span class=\"string\">\" 0x%02x\"</span>,trans_data.cvalue[i]);</div></pre></td></tr></table></figure></p>\n<p> 是不是非常简单实用。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p> 在嵌入式中经常会遇到浮点数的传输问题，一般将浮点数转换成4字节的16进制传输，这里的浮点数仅限于单精度浮点。大多数人的做法都是使用指针实现强制类型转换，其实浮点数在CPU里就是以4字节存储，既然在同一块内存，那我们能不能使用联合体呢？答案是肯定的。除了强制类型转换，这里介绍使用联合体实现浮点和16进制的转换，简单易用，你绝对会爱上这种方法。<br></p>","more":"<p></p>\n<h1 id=\"强制转换法\"><a href=\"#强制转换法\" class=\"headerlink\" title=\"强制转换法\"></a>强制转换法</h1><p> 浮点转换成4字节16进制:<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">float2bytes</span><span class=\"params\">(<span class=\"keyword\">float</span> p,<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *bytes)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *pchar = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)&amp;p;</div><div class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i &lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">float</span>);i++)</div><div class=\"line\"> &#123;</div><div class=\"line\">   *bytes = *pchar;</div><div class=\"line\">   pchar++;</div><div class=\"line\">   bytes++;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 16进制4字节转换成浮点：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">bytes2float</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *bytes)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"keyword\">return</span> *((<span class=\"keyword\">float</span>*)bytes);<span class=\"comment\">//强制转换</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"联合体法\"><a href=\"#联合体法\" class=\"headerlink\" title=\"联合体法\"></a>联合体法</h1><p> 话不多说，直接上代码：<br>　<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef <span class=\"class\"><span class=\"keyword\">union</span>&#123;</span></div><div class=\"line\"></div><div class=\"line\">unsigned char cvalue[<span class=\"number\">4</span>];</div><div class=\"line\">float fvalue;</div><div class=\"line\"></div><div class=\"line\">&#125;float_union;</div></pre></td></tr></table></figure></p>\n<p> 定义联合体变量:<br>　<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">float_union trans_data<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p> 此时如果给变量trans_data赋值一个浮点数:<br> 　<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">trans_data.fvalue = <span class=\"number\">10.05</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p> 那么直接调用cvalue即可获取浮点数10.05的4字节16进制数据：<br>　 <figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)</div><div class=\"line\"><span class=\"keyword\">printf</span>(<span class=\"string\">\" 0x%02x\"</span>,trans_data.cvalue[i]);</div></pre></td></tr></table></figure></p>\n<p> 是不是非常简单实用。</p>"},{"title":"Git 实用命令总结","date":"2017-06-09T02:16:08.000Z","comments":1,"_content":"使用 Git 那么久也没来得及总结一下，今天抽空将 Git 经常用到的一些命令记录下来，以备不时之需。\n# 创建代码仓\n如果远程已有代码仓可以直接 clone 至本地：\n   ```\n $ git clone https://github.com/username/repository.git\n   ```\n使用时请将 username 和 repository 替换成自己需要的远程代码仓地址，比如 clone 我的 learning_tf 代码仓至本地：\n   ```\n$ git clone https://github.com/StevenShiChina/learning_tf.git\n   ```\n值得一提得是 git 不仅支持 https 协议，还支持 ssh 协议等，具体可参考 [git-protocols](https://git-scm.com/book/id/v2/Git-on-the-Server-The-Protocols)。\n也可以在本地创建一个 git 项目：\n   ```\n $ git init\n   ```\n<!--more-->\n# 本地修改与更新\n在本地新建文件或修改文件后，要将文件修改提交到暂存区：\n   ```\n $ git add --all // 当前目录下的所有文件都提交到暂存\n   ```\n也可以使用如下命令：\n   ```\n $ git add . // ‘.’指当前目录下所有文件\n   ```\n只添加某个文件：\n   ```\n $ git add -p <file>\n   ```\n如果忘记了当前目录下修改了哪个文件可以用以下命令查看：\n   ```\n $ git status\n   ```\n修改完之后可以提交本地所有修改到暂存区：\n   ```\n $ git commit -a\n   ```\n为了区分每次提交的不同可以附加消息提交：\n   ```\n $ git commit -m \"your message to add here\"\n   ```\n 如果在提交到暂存前提示错误，可以删除 git 的缓存，重新提交到暂存：\n   ```\n $ git rm -r --cached .\n $ git add --all\n $ git commit -m \"your message to add here\"\n   ```\n\n# 配置\n在将本地代码仓推送至远程之前，我们还需要对本地 git 进行一些必要的配置，包括全局用户名以及邮件，这个可以配置为全局的也可以配置在自己的代码仓下：\n   ```\n $ ssh-keygen -t rsa -C \"your_email@youremail.com\"  // 生成SSH Key\n $ git config --global user.name \"your username\" //配置远程仓的用户名\n $ git config --global user.email \"your_email@youremail.com\" //配置邮件地址\n   ```\n需要将生成的 SSH Key 添加到 github 具体可参考站内文章 [hexo+github建立个人博客](http://stevenshi.me/2017/05/07/hexo-blog/)。\n可以通过以下命令查看是否能连接到远程：\n   ```\n $ ssh -T git@github.com\n   ```\n# 分支\n如果是本地新建的代码仓，需要通过以下命令将远程主机的代码仓与本地对应起来：\n   ```\n $ git remote add origin https://github.com/username/repository.git\n   ```\n查看远程分支：\n   ```\n $ git remote -v\n $ git remote show <分支名> //查看某个分支信息\n   ```\n如果远程有多个分支，可以通过以下命令切换：\n   ```\n $ git checkout <分支名>\n $ git checkout -b <分支名> //该命令可以创建分支并切换到分支\n   ```\n如果搞错了，可以删除本地分支：\n   ```\n $ git branch -d <分支名>\n   ```\n可以通过 tag 给当前版本打个标签：\n   ```\n $ git tag <tag-name>\n   ```\n# 发布\n本地修改完成后，需要推送至远程：\n   ```\n $ git push origin <分支名>\n   ```\n# 本地同步\n在本地可以通过 pull 命令来同步远程文件：\n   ```\n $ git pull  // 同步所有\n $ git pull origin <分支名> //同步某个分支\n   ```\n# 合并\n\n   ```\n $ git merge <分支名>\n   ```\n# 回撤\n如果修改错了，想回退到上一个版本：\n   ```\n $ git reset --hard HEAD\n   ```\n未完待续...","source":"_posts/git-summary.md","raw":"---\ntitle: Git 实用命令总结\ndate: 2017-06-09 10:16:08\ncategories: Linux\ntags: Git Command\ncomments: true\n---\n使用 Git 那么久也没来得及总结一下，今天抽空将 Git 经常用到的一些命令记录下来，以备不时之需。\n# 创建代码仓\n如果远程已有代码仓可以直接 clone 至本地：\n   ```\n $ git clone https://github.com/username/repository.git\n   ```\n使用时请将 username 和 repository 替换成自己需要的远程代码仓地址，比如 clone 我的 learning_tf 代码仓至本地：\n   ```\n$ git clone https://github.com/StevenShiChina/learning_tf.git\n   ```\n值得一提得是 git 不仅支持 https 协议，还支持 ssh 协议等，具体可参考 [git-protocols](https://git-scm.com/book/id/v2/Git-on-the-Server-The-Protocols)。\n也可以在本地创建一个 git 项目：\n   ```\n $ git init\n   ```\n<!--more-->\n# 本地修改与更新\n在本地新建文件或修改文件后，要将文件修改提交到暂存区：\n   ```\n $ git add --all // 当前目录下的所有文件都提交到暂存\n   ```\n也可以使用如下命令：\n   ```\n $ git add . // ‘.’指当前目录下所有文件\n   ```\n只添加某个文件：\n   ```\n $ git add -p <file>\n   ```\n如果忘记了当前目录下修改了哪个文件可以用以下命令查看：\n   ```\n $ git status\n   ```\n修改完之后可以提交本地所有修改到暂存区：\n   ```\n $ git commit -a\n   ```\n为了区分每次提交的不同可以附加消息提交：\n   ```\n $ git commit -m \"your message to add here\"\n   ```\n 如果在提交到暂存前提示错误，可以删除 git 的缓存，重新提交到暂存：\n   ```\n $ git rm -r --cached .\n $ git add --all\n $ git commit -m \"your message to add here\"\n   ```\n\n# 配置\n在将本地代码仓推送至远程之前，我们还需要对本地 git 进行一些必要的配置，包括全局用户名以及邮件，这个可以配置为全局的也可以配置在自己的代码仓下：\n   ```\n $ ssh-keygen -t rsa -C \"your_email@youremail.com\"  // 生成SSH Key\n $ git config --global user.name \"your username\" //配置远程仓的用户名\n $ git config --global user.email \"your_email@youremail.com\" //配置邮件地址\n   ```\n需要将生成的 SSH Key 添加到 github 具体可参考站内文章 [hexo+github建立个人博客](http://stevenshi.me/2017/05/07/hexo-blog/)。\n可以通过以下命令查看是否能连接到远程：\n   ```\n $ ssh -T git@github.com\n   ```\n# 分支\n如果是本地新建的代码仓，需要通过以下命令将远程主机的代码仓与本地对应起来：\n   ```\n $ git remote add origin https://github.com/username/repository.git\n   ```\n查看远程分支：\n   ```\n $ git remote -v\n $ git remote show <分支名> //查看某个分支信息\n   ```\n如果远程有多个分支，可以通过以下命令切换：\n   ```\n $ git checkout <分支名>\n $ git checkout -b <分支名> //该命令可以创建分支并切换到分支\n   ```\n如果搞错了，可以删除本地分支：\n   ```\n $ git branch -d <分支名>\n   ```\n可以通过 tag 给当前版本打个标签：\n   ```\n $ git tag <tag-name>\n   ```\n# 发布\n本地修改完成后，需要推送至远程：\n   ```\n $ git push origin <分支名>\n   ```\n# 本地同步\n在本地可以通过 pull 命令来同步远程文件：\n   ```\n $ git pull  // 同步所有\n $ git pull origin <分支名> //同步某个分支\n   ```\n# 合并\n\n   ```\n $ git merge <分支名>\n   ```\n# 回撤\n如果修改错了，想回退到上一个版本：\n   ```\n $ git reset --hard HEAD\n   ```\n未完待续...","slug":"git-summary","published":1,"updated":"2017-06-13T08:57:01.540Z","layout":"post","photos":[],"link":"","_id":"cj4hne51s0003w8inpmyp3cz9","content":"<p>使用 Git 那么久也没来得及总结一下，今天抽空将 Git 经常用到的一些命令记录下来，以备不时之需。</p>\n<h1 id=\"创建代码仓\"><a href=\"#创建代码仓\" class=\"headerlink\" title=\"创建代码仓\"></a>创建代码仓</h1><p>如果远程已有代码仓可以直接 clone 至本地：<br>   <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://github.com/username/repository.git</div></pre></td></tr></table></figure></p>\n<p>使用时请将 username 和 repository 替换成自己需要的远程代码仓地址，比如 clone 我的 learning_tf 代码仓至本地：<br>   <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://github.com/StevenShiChina/learning_tf.git</div></pre></td></tr></table></figure></p>\n<p>值得一提得是 git 不仅支持 https 协议，还支持 ssh 协议等，具体可参考 <a href=\"https://git-scm.com/book/id/v2/Git-on-the-Server-The-Protocols\" target=\"_blank\" rel=\"external\">git-protocols</a>。<br>也可以在本地创建一个 git 项目：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h1 id=\"本地修改与更新\"><a href=\"#本地修改与更新\" class=\"headerlink\" title=\"本地修改与更新\"></a>本地修改与更新</h1><p>在本地新建文件或修改文件后，要将文件修改提交到暂存区：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">$</span> git add --<span class=\"keyword\">all</span> <span class=\"comment\">// 当前目录下的所有文件都提交到暂存</span></div></pre></td></tr></table></figure></p>\n<p>也可以使用如下命令：<br>   <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"keyword\">add</span> . <span class=\"comment\">// ‘.’指当前目录下所有文件</span></div></pre></td></tr></table></figure></p>\n<p>只添加某个文件：<br>   <figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> -p &lt;file&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果忘记了当前目录下修改了哪个文件可以用以下命令查看：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></div></pre></td></tr></table></figure></p>\n<p>修改完之后可以提交本地所有修改到暂存区：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit <span class=\"_\">-a</span></span></div></pre></td></tr></table></figure></p>\n<p>为了区分每次提交的不同可以附加消息提交：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m <span class=\"string\">\"your message to add here\"</span></span></div></pre></td></tr></table></figure></p>\n<p> 如果在提交到暂存前提示错误，可以删除 git 的缓存，重新提交到暂存：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git rm -r --cached .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add --all</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m <span class=\"string\">\"your message to add here\"</span></span></div></pre></td></tr></table></figure></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>在将本地代码仓推送至远程之前，我们还需要对本地 git 进行一些必要的配置，包括全局用户名以及邮件，这个可以配置为全局的也可以配置在自己的代码仓下：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span>  <span class=\"comment\">// 生成SSH Key</span></div><div class=\"line\">$ git config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"your username\"</span> <span class=\"comment\">//配置远程仓的用户名</span></div><div class=\"line\">$ git config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"your_email@youremail.com\"</span> <span class=\"comment\">//配置邮件地址</span></div></pre></td></tr></table></figure></p>\n<p>需要将生成的 SSH Key 添加到 github 具体可参考站内文章 <a href=\"http://stevenshi.me/2017/05/07/hexo-blog/\">hexo+github建立个人博客</a>。<br>可以通过以下命令查看是否能连接到远程：<br>   <figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>ssh -T git<span class=\"variable\">@github</span>.com</div></pre></td></tr></table></figure></p>\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><p>如果是本地新建的代码仓，需要通过以下命令将远程主机的代码仓与本地对应起来：<br>   <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote <span class=\"built_in\">add</span> origin http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/username/repository.git</div></pre></td></tr></table></figure></p>\n<p>查看远程分支：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote -v</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote show &lt;分支名&gt; //查看某个分支信息</span></div></pre></td></tr></table></figure></p>\n<p>如果远程有多个分支，可以通过以下命令切换：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout &lt;分支名&gt;</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -b &lt;分支名&gt; //该命令可以创建分支并切换到分支</span></div></pre></td></tr></table></figure></p>\n<p>如果搞错了，可以删除本地分支：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch <span class=\"_\">-d</span> &lt;分支名&gt;</span></div></pre></td></tr></table></figure></p>\n<p>可以通过 tag 给当前版本打个标签：<br>   <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">&lt;tag-name</span>&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h1><p>本地修改完成后，需要推送至远程：<br>   <figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> &lt;分支名&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"本地同步\"><a href=\"#本地同步\" class=\"headerlink\" title=\"本地同步\"></a>本地同步</h1><p>在本地可以通过 pull 命令来同步远程文件：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">$</span> git pull  <span class=\"comment\">// 同步所有</span></div><div class=\"line\"><span class=\"symbol\">$</span> git pull origin &lt;分支名&gt; <span class=\"comment\">//同步某个分支</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h1>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git merge &lt;分支名&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"回撤\"><a href=\"#回撤\" class=\"headerlink\" title=\"回撤\"></a>回撤</h1><p>如果修改错了，想回退到上一个版本：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --hard HEAD</span></div></pre></td></tr></table></figure></p>\n<p>未完待续…</p>\n","site":{"data":{}},"excerpt":"<p>使用 Git 那么久也没来得及总结一下，今天抽空将 Git 经常用到的一些命令记录下来，以备不时之需。</p>\n<h1 id=\"创建代码仓\"><a href=\"#创建代码仓\" class=\"headerlink\" title=\"创建代码仓\"></a>创建代码仓</h1><p>如果远程已有代码仓可以直接 clone 至本地：<br>   <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://github.com/username/repository.git</div></pre></td></tr></table></figure></p>\n<p>使用时请将 username 和 repository 替换成自己需要的远程代码仓地址，比如 clone 我的 learning_tf 代码仓至本地：<br>   <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://github.com/StevenShiChina/learning_tf.git</div></pre></td></tr></table></figure></p>\n<p>值得一提得是 git 不仅支持 https 协议，还支持 ssh 协议等，具体可参考 <a href=\"https://git-scm.com/book/id/v2/Git-on-the-Server-The-Protocols\" target=\"_blank\" rel=\"external\">git-protocols</a>。<br>也可以在本地创建一个 git 项目：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init</span></div></pre></td></tr></table></figure></p>","more":"<h1 id=\"本地修改与更新\"><a href=\"#本地修改与更新\" class=\"headerlink\" title=\"本地修改与更新\"></a>本地修改与更新</h1><p>在本地新建文件或修改文件后，要将文件修改提交到暂存区：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">$</span> git add --<span class=\"keyword\">all</span> <span class=\"comment\">// 当前目录下的所有文件都提交到暂存</span></div></pre></td></tr></table></figure></p>\n<p>也可以使用如下命令：<br>   <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"keyword\">add</span> . <span class=\"comment\">// ‘.’指当前目录下所有文件</span></div></pre></td></tr></table></figure></p>\n<p>只添加某个文件：<br>   <figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> -p &lt;file&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果忘记了当前目录下修改了哪个文件可以用以下命令查看：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></div></pre></td></tr></table></figure></p>\n<p>修改完之后可以提交本地所有修改到暂存区：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit <span class=\"_\">-a</span></span></div></pre></td></tr></table></figure></p>\n<p>为了区分每次提交的不同可以附加消息提交：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m <span class=\"string\">\"your message to add here\"</span></span></div></pre></td></tr></table></figure></p>\n<p> 如果在提交到暂存前提示错误，可以删除 git 的缓存，重新提交到暂存：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git rm -r --cached .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add --all</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m <span class=\"string\">\"your message to add here\"</span></span></div></pre></td></tr></table></figure></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>在将本地代码仓推送至远程之前，我们还需要对本地 git 进行一些必要的配置，包括全局用户名以及邮件，这个可以配置为全局的也可以配置在自己的代码仓下：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span>  <span class=\"comment\">// 生成SSH Key</span></div><div class=\"line\">$ git config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"your username\"</span> <span class=\"comment\">//配置远程仓的用户名</span></div><div class=\"line\">$ git config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"your_email@youremail.com\"</span> <span class=\"comment\">//配置邮件地址</span></div></pre></td></tr></table></figure></p>\n<p>需要将生成的 SSH Key 添加到 github 具体可参考站内文章 <a href=\"http://stevenshi.me/2017/05/07/hexo-blog/\">hexo+github建立个人博客</a>。<br>可以通过以下命令查看是否能连接到远程：<br>   <figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>ssh -T git<span class=\"variable\">@github</span>.com</div></pre></td></tr></table></figure></p>\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><p>如果是本地新建的代码仓，需要通过以下命令将远程主机的代码仓与本地对应起来：<br>   <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote <span class=\"built_in\">add</span> origin http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/username/repository.git</div></pre></td></tr></table></figure></p>\n<p>查看远程分支：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote -v</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote show &lt;分支名&gt; //查看某个分支信息</span></div></pre></td></tr></table></figure></p>\n<p>如果远程有多个分支，可以通过以下命令切换：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout &lt;分支名&gt;</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -b &lt;分支名&gt; //该命令可以创建分支并切换到分支</span></div></pre></td></tr></table></figure></p>\n<p>如果搞错了，可以删除本地分支：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch <span class=\"_\">-d</span> &lt;分支名&gt;</span></div></pre></td></tr></table></figure></p>\n<p>可以通过 tag 给当前版本打个标签：<br>   <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">&lt;tag-name</span>&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h1><p>本地修改完成后，需要推送至远程：<br>   <figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> &lt;分支名&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"本地同步\"><a href=\"#本地同步\" class=\"headerlink\" title=\"本地同步\"></a>本地同步</h1><p>在本地可以通过 pull 命令来同步远程文件：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">$</span> git pull  <span class=\"comment\">// 同步所有</span></div><div class=\"line\"><span class=\"symbol\">$</span> git pull origin &lt;分支名&gt; <span class=\"comment\">//同步某个分支</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h1>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git merge &lt;分支名&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"回撤\"><a href=\"#回撤\" class=\"headerlink\" title=\"回撤\"></a>回撤</h1><p>如果修改错了，想回退到上一个版本：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --hard HEAD</span></div></pre></td></tr></table></figure></p>\n<p>未完待续…</p>"},{"title":"使用 Qt 编译调试 ROS","date":"2017-05-25T06:06:45.000Z","comments":1,"_content":"其实 vim 配置好后可以很方便的调试 ROS ，就是 Vim 配置比较麻烦，可以参考我的站内文章  [如何让VIM变的爱不释手](http://stevenshi.me/2017/05/18/vim/) 。 相信很多人都用过 Qt ，它原生支持 CMake ，因此 Qt 可以很好的支持 ROS，本篇学习如何使用 Qt 进行 ROS 的开发。\n<!--more-->\n# 配置\n首先找到这个文件 QtProject-qtcreator.desktop 该文件可能位于~/.local/share/applications/，也可能位于/usr/share/applications，可以使用如下命令查找：\n   ```\n $ cd /\n $ sudo find -name QtProject-qtcreator.desktop\n   ```\n打开该文件，在Exec那一行添加 bash -i –c ：\n   ```\n Exec=bash -i -c /usr/local/qtcreator-3.4.2/bin/qtcreator\n   ```\n添加 “bash -i –c” 是为了在通过快捷方式启动Qt Creator的同时加载ROS环境变量，ROS环境变量加载脚本配置在 ~/.bashrc 文件内，类似于加载工作空间里的 *devel/setup.bash* 。\n# 打开工程\n在桌面上打开 qt-creator，打开某一个ROS工程，找到 CMakelist.txt 因为 qt 本身支持 cmake 项目:\n\n![](debug-ros-using-qt/open.jpg)\n\n设置编译路径为 catkin_ws 的 build 路径:\n\n![](debug-ros-using-qt/setup.jpg)\n\n设置CMake编译模式：-DCMAKE_BUILD_TYPE=Debug :\n\n![](debug-ros-using-qt/mode.jpg)\n\n最后点击 Run CMake 按钮,然后点击 Finish 按钮就可以编译该工程了：\n\n![](debug-ros-using-qt/compile.jpg)\n\n值得注意的是，在运行前需要新开一个 terminal 运行 roscore,然后再运行编译后的工程节点。\n# 新建工程\n对于 ROS 新工程的建立需要 [Qt Creator](https://www.qt.io/ide/) 4.1 以上版本，需要安装 [ros_qtc_plugin](http://rosindustrial.org/news/2016/6/9/ros-qt-ide-plugin) 插件，该插件位于 [github](https://github.com/ros-industrial/ros_qtc_plugin)。 因为我安装的版本较低，所以我依然采用 ROS 命令行建立新的 pkg。 至此，可以开始使用 Qt 开发 ROS 了。\n\n","source":"_posts/debug-ros-using-qt.md","raw":"---\ntitle: 使用 Qt 编译调试 ROS\ndate: 2017-05-25 14:06:45\ncategories: ROS\ntags: ROS Qt\ncomments: true\n---\n其实 vim 配置好后可以很方便的调试 ROS ，就是 Vim 配置比较麻烦，可以参考我的站内文章  [如何让VIM变的爱不释手](http://stevenshi.me/2017/05/18/vim/) 。 相信很多人都用过 Qt ，它原生支持 CMake ，因此 Qt 可以很好的支持 ROS，本篇学习如何使用 Qt 进行 ROS 的开发。\n<!--more-->\n# 配置\n首先找到这个文件 QtProject-qtcreator.desktop 该文件可能位于~/.local/share/applications/，也可能位于/usr/share/applications，可以使用如下命令查找：\n   ```\n $ cd /\n $ sudo find -name QtProject-qtcreator.desktop\n   ```\n打开该文件，在Exec那一行添加 bash -i –c ：\n   ```\n Exec=bash -i -c /usr/local/qtcreator-3.4.2/bin/qtcreator\n   ```\n添加 “bash -i –c” 是为了在通过快捷方式启动Qt Creator的同时加载ROS环境变量，ROS环境变量加载脚本配置在 ~/.bashrc 文件内，类似于加载工作空间里的 *devel/setup.bash* 。\n# 打开工程\n在桌面上打开 qt-creator，打开某一个ROS工程，找到 CMakelist.txt 因为 qt 本身支持 cmake 项目:\n\n![](debug-ros-using-qt/open.jpg)\n\n设置编译路径为 catkin_ws 的 build 路径:\n\n![](debug-ros-using-qt/setup.jpg)\n\n设置CMake编译模式：-DCMAKE_BUILD_TYPE=Debug :\n\n![](debug-ros-using-qt/mode.jpg)\n\n最后点击 Run CMake 按钮,然后点击 Finish 按钮就可以编译该工程了：\n\n![](debug-ros-using-qt/compile.jpg)\n\n值得注意的是，在运行前需要新开一个 terminal 运行 roscore,然后再运行编译后的工程节点。\n# 新建工程\n对于 ROS 新工程的建立需要 [Qt Creator](https://www.qt.io/ide/) 4.1 以上版本，需要安装 [ros_qtc_plugin](http://rosindustrial.org/news/2016/6/9/ros-qt-ide-plugin) 插件，该插件位于 [github](https://github.com/ros-industrial/ros_qtc_plugin)。 因为我安装的版本较低，所以我依然采用 ROS 命令行建立新的 pkg。 至此，可以开始使用 Qt 开发 ROS 了。\n\n","slug":"debug-ros-using-qt","published":1,"updated":"2017-06-09T06:43:07.528Z","layout":"post","photos":[],"link":"","_id":"cj4hne51y0007w8inhiavri2r","content":"<p>其实 vim 配置好后可以很方便的调试 ROS ，就是 Vim 配置比较麻烦，可以参考我的站内文章  <a href=\"http://stevenshi.me/2017/05/18/vim/\">如何让VIM变的爱不释手</a> 。 相信很多人都用过 Qt ，它原生支持 CMake ，因此 Qt 可以很好的支持 ROS，本篇学习如何使用 Qt 进行 ROS 的开发。<br><a id=\"more\"></a></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>首先找到这个文件 QtProject-qtcreator.desktop 该文件可能位于~/.local/share/applications/，也可能位于/usr/share/applications，可以使用如下命令查找：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo find -name QtProject-qtcreator.desktop</span></div></pre></td></tr></table></figure></p>\n<p>打开该文件，在Exec那一行添加 bash -i –c ：<br>   <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Exec=bash -i -c <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/qtcreator-3.4.2/</span>bin<span class=\"regexp\">/qtcreator</span></div></pre></td></tr></table></figure></p>\n<p>添加 “bash -i –c” 是为了在通过快捷方式启动Qt Creator的同时加载ROS环境变量，ROS环境变量加载脚本配置在 ~/.bashrc 文件内，类似于加载工作空间里的 <em>devel/setup.bash</em> 。</p>\n<h1 id=\"打开工程\"><a href=\"#打开工程\" class=\"headerlink\" title=\"打开工程\"></a>打开工程</h1><p>在桌面上打开 qt-creator，打开某一个ROS工程，找到 CMakelist.txt 因为 qt 本身支持 cmake 项目:</p>\n<p><img src=\"/2017/05/25/debug-ros-using-qt/open.jpg\" alt=\"\"></p>\n<p>设置编译路径为 catkin_ws 的 build 路径:</p>\n<p><img src=\"/2017/05/25/debug-ros-using-qt/setup.jpg\" alt=\"\"></p>\n<p>设置CMake编译模式：-DCMAKE_BUILD_TYPE=Debug :</p>\n<p><img src=\"/2017/05/25/debug-ros-using-qt/mode.jpg\" alt=\"\"></p>\n<p>最后点击 Run CMake 按钮,然后点击 Finish 按钮就可以编译该工程了：</p>\n<p><img src=\"/2017/05/25/debug-ros-using-qt/compile.jpg\" alt=\"\"></p>\n<p>值得注意的是，在运行前需要新开一个 terminal 运行 roscore,然后再运行编译后的工程节点。</p>\n<h1 id=\"新建工程\"><a href=\"#新建工程\" class=\"headerlink\" title=\"新建工程\"></a>新建工程</h1><p>对于 ROS 新工程的建立需要 <a href=\"https://www.qt.io/ide/\" target=\"_blank\" rel=\"external\">Qt Creator</a> 4.1 以上版本，需要安装 <a href=\"http://rosindustrial.org/news/2016/6/9/ros-qt-ide-plugin\" target=\"_blank\" rel=\"external\">ros_qtc_plugin</a> 插件，该插件位于 <a href=\"https://github.com/ros-industrial/ros_qtc_plugin\" target=\"_blank\" rel=\"external\">github</a>。 因为我安装的版本较低，所以我依然采用 ROS 命令行建立新的 pkg。 至此，可以开始使用 Qt 开发 ROS 了。</p>\n","site":{"data":{}},"excerpt":"<p>其实 vim 配置好后可以很方便的调试 ROS ，就是 Vim 配置比较麻烦，可以参考我的站内文章  <a href=\"http://stevenshi.me/2017/05/18/vim/\">如何让VIM变的爱不释手</a> 。 相信很多人都用过 Qt ，它原生支持 CMake ，因此 Qt 可以很好的支持 ROS，本篇学习如何使用 Qt 进行 ROS 的开发。<br></p>","more":"<p></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>首先找到这个文件 QtProject-qtcreator.desktop 该文件可能位于~/.local/share/applications/，也可能位于/usr/share/applications，可以使用如下命令查找：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo find -name QtProject-qtcreator.desktop</span></div></pre></td></tr></table></figure></p>\n<p>打开该文件，在Exec那一行添加 bash -i –c ：<br>   <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Exec=bash -i -c <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/qtcreator-3.4.2/</span>bin<span class=\"regexp\">/qtcreator</span></div></pre></td></tr></table></figure></p>\n<p>添加 “bash -i –c” 是为了在通过快捷方式启动Qt Creator的同时加载ROS环境变量，ROS环境变量加载脚本配置在 ~/.bashrc 文件内，类似于加载工作空间里的 <em>devel/setup.bash</em> 。</p>\n<h1 id=\"打开工程\"><a href=\"#打开工程\" class=\"headerlink\" title=\"打开工程\"></a>打开工程</h1><p>在桌面上打开 qt-creator，打开某一个ROS工程，找到 CMakelist.txt 因为 qt 本身支持 cmake 项目:</p>\n<p><img src=\"/2017/05/25/debug-ros-using-qt/open.jpg\" alt=\"\"></p>\n<p>设置编译路径为 catkin_ws 的 build 路径:</p>\n<p><img src=\"/2017/05/25/debug-ros-using-qt/setup.jpg\" alt=\"\"></p>\n<p>设置CMake编译模式：-DCMAKE_BUILD_TYPE=Debug :</p>\n<p><img src=\"/2017/05/25/debug-ros-using-qt/mode.jpg\" alt=\"\"></p>\n<p>最后点击 Run CMake 按钮,然后点击 Finish 按钮就可以编译该工程了：</p>\n<p><img src=\"/2017/05/25/debug-ros-using-qt/compile.jpg\" alt=\"\"></p>\n<p>值得注意的是，在运行前需要新开一个 terminal 运行 roscore,然后再运行编译后的工程节点。</p>\n<h1 id=\"新建工程\"><a href=\"#新建工程\" class=\"headerlink\" title=\"新建工程\"></a>新建工程</h1><p>对于 ROS 新工程的建立需要 <a href=\"https://www.qt.io/ide/\" target=\"_blank\" rel=\"external\">Qt Creator</a> 4.1 以上版本，需要安装 <a href=\"http://rosindustrial.org/news/2016/6/9/ros-qt-ide-plugin\" target=\"_blank\" rel=\"external\">ros_qtc_plugin</a> 插件，该插件位于 <a href=\"https://github.com/ros-industrial/ros_qtc_plugin\" target=\"_blank\" rel=\"external\">github</a>。 因为我安装的版本较低，所以我依然采用 ROS 命令行建立新的 pkg。 至此，可以开始使用 Qt 开发 ROS 了。</p>"},{"title":"hexo进阶","date":"2017-05-09T06:32:38.000Z","comments":1,"_content":"# 添加页面\n页面指的是分类页*categories*、标签页*tags*、关于页*about*等。使用以下命令生成以上页面参考[nexT](http://theme-next.iissnan.com/theme-settings.html):\n　　```\n $hexo new page categories\n $hexo new page tags\n $hexo new page about　\n　　```\n在 *hexo* 配置文件 *_config.yml* 文件中设置 *post_asset_folder* 为true,当新建页面后会自动生成一个同名文件夹，用于存储所需的资源图片等。生成以上页面后在主题配置文件中 *themes/nexT/_config.yml* 打开相关配置项:\n　　```\n menu:\n   home: /\n   categories: /categories\n   about: /about\n   archives: /archives\n   tags: /tags\n   #sitemap: /sitemap.xml\n   #commonweal: /404.html\n　　```\n<!--more-->\n设置自己的标签页面位于*hexo/source/tags*:\n  ```\ntitle: 标签\ndate: 2017-05-05 12:30:52\ntype: \"tags\"\ncomments: false\ntags:\n - Qt\n - Linux\n - Hexo\n - ROS\n　```\n可以在上面添加自己的标签。\n分类页的示例如下:\n　```\n title: 分类\n date: 2017-05-05 12:30:42\n type: \"categories\"\n comments: false\n　```\n# 发表文章\n新文章的发表使用以下命令：\n　　```\n $hexo new post \"文章名\" 或者 hexo n \"文章名\"\n　　```\n一个文章的开头应包含:\n　```\n title: #文章题目\n date: #日期\n tags: #标签\n categories: #分类\n　```\n文章存储在*hexo/source/_posts*目录下，后缀为*.md*。可以在适当位置插入以下符号用于部分显示:\n　　```\n<!--more-->\n　　```\n插入该符号之前的文字可以直接显示出来，之后的需要鼠标点击*阅读全文*来显示全部。\n　　```\n $hexo g //生成静态文件\n $hexo d //部署\n　　```\n# 添加RSS\n安装RSS插件：\n　　```\n $npm install hexo-generator-feed --save\n　　```\n修改*hexo/_config.yml*根目录下的站点配置文件，添加以下内容:\n　　```\n #RSS 订阅支持\n plugin:\n - hexo-generator-feed\n #feed Atom\n feed:\n   type: atom\n   path: atom.xml\n   limit: 20\n　　```\n修改主题目录下的配置文件*themes/nexT/_config.yml*\n　　```\n rss: /atom.xml\n　　```\n# 添加sitemap\nsitemap 插件可以方便的管理网站，并生成符合搜索引擎需要的网站格式，供那些网络爬虫抓取，以便于我们的网站可以被搜索到。\n安装*sitemap*插件:\n　```\n $npm install hexo-generator-sitemap --save\n　　```\n修改*hexo/_config.yml*根目录下的站点配置文件:\n　　```\n sitemap:\n　　　path: sitemap.xml\n　　```\n添加baidusitemap：\n  ```\n $npm install hexo-generator-baidu-sitemap --save\n  ```\n修改*hexo/_config.yml*根目录下的站点配置文件:\n　　```\n baidusitemap:\n　　　path: baidusitemap.xml\n　　```\n在站点配置文件中添加：\n　　```\nplugin:\n- hexo-generator-sitemap\n- hexo-generator-baidu-sitemap\n 　```\n修改文件 node_modules/hexo-generator-baidu-sitemap/baidusitemap.ejs ,添加自己的网站地址：\n 　```\n <loc><%- encodeURI(\"http://stevenshi.me/\" + post.path) %></loc>\n 　```\n当执行 hexo g 命令后会在站点目录下的 public/ 下生成 baidusitemap.xml 和 sitemap.xml 文件。将 baidusitemap.xml 提交给百度，[百度提交入口](http://www.sousuoyinqingtijiao.com/baidu/tijiao/) 将 sitemap.xml 提交给 google,[Google提交入口](https://www.google.com/webmasters/verification/home?hl=en)\n## 百度提交\n先去百度站长平台注册，并添加自己的网站然后开始验证。关于验证方式，百度提供了三种,这里为了简单选择 html 标签验证。将百度提供的标签信息添加到主题目录下的 layout/_partials/head.swig 文件内即可：\n 　```\n{% if theme.baidu_site_verification %}\n  <meta name=\"baidu-site-verification\" content=   />\n{% endif %}\n 　```\ncontent 内容为百度提供的验证内容，同时在主题目录中的 _config.ym l中将  baidu_site_verification 的值设置为 true 即可。\n 　```\nbaidu_site_verification: true\n 　```\n重新部署网站后开始验证，不出意外很快会验证成功。成功之后转到百度站长找到左边的链接提交，选择自己的站点，选择自动提交，添加自己的sitemap:\n![](hexo-advance/sitemap.jpg)\n填入自己的 sitemap 地址： *http://stevenshi.me/baidusitemap.xml*，剩下的时间就是等待了。\n## 谷歌提交\n其实不做谷歌提交，谷歌的网络爬虫每隔一段都会自动在网上抓取一些网页，不过为了及时让谷歌收录，还是做一下提交。首先登陆 [GoogleWebmasterCentral](https://www.google.com/webmasters/verification/home?hl=en) 进入后如下图：\n![](hexo-advance/googleconsole.jpg)\n点击 ADD A PROPERTY,输入自己的域名，并继续，之后选择一种验证方式，这里选择推荐的方式，下载一个 html 文件放到博客主题根目录下的 source 目录下，并部署网站后开始验证，成功后提示：\n\n![](hexo-advance/googleverify.jpg)\n\n验证完后登陆 [google站长工具](https://www.google.com/webmasters/tools)，选择添加站点地图：\n\n![](hexo-advance/addsitemap.jpg)\n\n至此 google 提交完成。\n## 错误\n\n当在浏览器输入 *localhost:4000/baidusitemap.xml* 时出现错误：\n\n![](hexo-advance/baidusitemap.jpg)\n\n貌似是标题格式问题， baidusitemap.xml 和普通的 sitemap.xml 格式不同，它多一个标题,经过仔细检查原来标题中的<>符号问题，标题中有该符号即报上面的错误，去掉该符号后问题解决。\n\n提交网站 sitemap 百度提示抓取失败：\n\n![](hexo-advance/error.jpg)\n\n原来百度抓取 github 时是被拒绝的，github 屏蔽了百度爬虫，汗..\n\n网络上有几种解决方案，可以选择同时部署到国内的 [Coding net](https://coding.net/) 和 github,同时配置域名解析国内的解析到 [Coding net](https://coding.net/) 国外的解析到 github 。这样就能解决百度爬虫的问题，但 [Coding](https://coding.net/) 目前针对免费用户只提供可怜 256M 的空间。所以还是想其它办法。\n# 添加侧栏社交链接\n修改主题目录下的配置文件 *themes/nexT/_config.yml*\n　　```\n # Social Links\n # Key is the link label showing to end users.\n # Value is the target link (E.g. GitHub: https://github.com/iissnan)\n social:\n   Github: https://github.com/username\n   知乎: http://www.zhihu.com/people/username\n   Email: mailto: user@xx.com\n　　```\n设置链接的图标，对应的字段是*social_icons*在主题配置文件中:\n　```\n # Social Icons\n social_icons:\n enable: true\n # Icon Mappings\n GitHub: github\n Email: envelope\n　　```\nnexT使用的图标来自[FontAwesome](http://fontawesome.io/)，只要上面有的都可以配置到nexT使用。\n# 添加本地搜索\n安装*hexo-generator-serarch*\n　　```\n $npm install hexo-generator-search --save\n　　```\n修改*hexo/_config.yml*根目录下的站点配置文件添加:\n　　```\n search:\n  path: search.xml\n  field: post\n　　```\n# 设置头像\n在hexo/source/目录下建立images文件夹，将头像放置在该文件夹下，修改主题目录下的配置文件*themes/nexT/_config.yml*\n　　```\n avatar: /images/avatar.jpg\n　　```\n# 生成网站二维码\n二维码生成工具很多，这个[Custom QR Code Generator](https://www.unitag.io/qrcode)比较不错。生成后将二维码添加到关于页面。\n# 设置代码高亮主题\nNexT 使用[TomorrowTheme](https://github.com/chriskempson/tomorrow-theme)作为代码高亮，共有5款主题供选择。 打开主题配置文件*themes/nexT/_config.yml*修改:\n　　```\n # Code Highlight theme\n # Available value:\n #    normal | night | night eighties | night blue | night bright\n # https://github.com/chriskempson/tomorrow-theme\n highlight_theme: night bright\n\n　　```\n# 开启打赏功能\n只需要主题配置文件中填入微信和支付宝收款二维码图片地址，即可开启该功能。修改主题配置文件*themes/nexT/_config.yml*\n　　```\n reward_comment: 您的支持是我原创的动力\n  wechatpay: /path/to/wechat-reward-image\n  alipay: /path/to/alipay-reward-image\n\n　　```\n鼠标放置在二维码上面时，下面的字来回晃眼，修改如下文件:\n*themes/next/source/css/_common/components/post/post-reward.styl*\n注释掉以下代码：![Alt text](hexo-advance/pay.jpg)\n# 友情链接\n修改主题配置文件*themes/next/_config.yml*\n　　```\n # Blog rolls\n links_title: 友情链接\n #links_layout: block\n #links_layout: inline\n links:\n  hexo: https://hexo.io/zh-cn/docs\n  nexT: http://theme-next.iissnan.com/\n　　```\n# 开启动画背景\n[nexT](http://theme-next.iissnan.com/theme-settings.html) 自带两种背景动画效果，canvas_nest以及three_waves,在主题配置文件:\n *themes/next/_config.yml*中设置为true即可开启,\n　　```\n # Canvas-nest\n canvas_nest: true\n　　```\n# 开启JiaThis分享\n[Jiathis](http://www.jiathis.com/)为文章提供社会化分享功能。修改主题配置文件*themes/next/_config.yml*:\n　　```\n # Share\n jiathis: true\n　　```\n# 百度分享\n两种分享只能同时开启一种，百度分享需要在站点配置文件*hexo/_config.yml*中添加：\n　　```\n # baidu share\n baidushare: true #百度分享功能\n　　```\n另外需要在主题配置文件*themes/next/_config.yml*中开启百度分享功能：\n　　```\n # Baidu Share\n # Available value:\n #    button | slide\n # Warning: Baidu Share does not support https.\n baidushare: \n  type: button\n\n　　```\n# 添加DISQUS评论\n修改主题配置文件开启[DISQUS](https://disqus.com/)功能：\n　　```\n # Disqus\n disqus:\n  enable: true\n  shortname:\n  count: true\n　　```\n去[DISQUS](https://disqus.com/)官网注册，并获取自己的shortname,填写至主题配置文件中的对应字段中。取消一篇文章的评论只需要在文章的头部修改：\n　　```\n comments: false\n　　```\n# 设置网站图标\n图标制作网站[faviconer](http://www.faviconer.com/)，制作完成自己的网站图标后放到*hexo/source*根目录下，并修改主题配置文件：\n　　```\n# Put your favicon.ico into `hexo-site/source/` directory.\nfavicon: /favicon.ico\n　　```\n# 页面中插入图片\n图片的插入可以使用[MarkdownPad](http://markdownpad.com/ \"markdown Editor for Windows\")的语法：\n　　```\n ![图片名称](图片地址)\n　　```\n图片可以放在本地，也可以放在云端。建议放在云端，因为github的空间有限，云端可以使用[七牛云存储](https://www.qiniu.com/)。\n本地图片的插入有两种方法，早期的[hexo](https://hexo.io/zh-cn/docs/ \"hexo说明\")需要将图片放在网站根目录下的*source/*文件夹中比如*source/images/*文件夹，将图片放到该处，即可在页面中引用：\n　　```\n ![test](source/images/test.jgp)\n　　```\n[hexo](https://hexo.io/zh-cn/docs/ \"hexo说明\")2.0之后，引入新方法，参考[CodeFalling/hexo-asset-image](https://github.com/CodeFalling/hexo-asset-image)\n安装插件：\n　　```\n $npm install hexo-asset-image --save\n　　```\n 修改配置文件中的 *post_asset_folder:* 为 *true* ，这样新建文章时，会在 *_post* 目录下生成同名的文件夹，页面需要的各种图片都可以放到此处。比如：\n　　```\n my-Publish\n ├── my.jpg\n ├── logo.jpg\n └── test.jpg\n my-Publish.md\n　　```\n新建名为 *my-Publish* 的新文章，文章需要的图片都放到该文件夹中。引用:\n　　```\n ![xx](my-Publish/my.jpg)\n　　```\n即可插入图片，*xx*可以随意。\n\n ","source":"_posts/hexo-advance.md","raw":"---\ntitle: hexo进阶\ndate: 2017-05-09 14:32:38\ncategories: hexo\ntags: hexo\ncomments: true\n---\n# 添加页面\n页面指的是分类页*categories*、标签页*tags*、关于页*about*等。使用以下命令生成以上页面参考[nexT](http://theme-next.iissnan.com/theme-settings.html):\n　　```\n $hexo new page categories\n $hexo new page tags\n $hexo new page about　\n　　```\n在 *hexo* 配置文件 *_config.yml* 文件中设置 *post_asset_folder* 为true,当新建页面后会自动生成一个同名文件夹，用于存储所需的资源图片等。生成以上页面后在主题配置文件中 *themes/nexT/_config.yml* 打开相关配置项:\n　　```\n menu:\n   home: /\n   categories: /categories\n   about: /about\n   archives: /archives\n   tags: /tags\n   #sitemap: /sitemap.xml\n   #commonweal: /404.html\n　　```\n<!--more-->\n设置自己的标签页面位于*hexo/source/tags*:\n  ```\ntitle: 标签\ndate: 2017-05-05 12:30:52\ntype: \"tags\"\ncomments: false\ntags:\n - Qt\n - Linux\n - Hexo\n - ROS\n　```\n可以在上面添加自己的标签。\n分类页的示例如下:\n　```\n title: 分类\n date: 2017-05-05 12:30:42\n type: \"categories\"\n comments: false\n　```\n# 发表文章\n新文章的发表使用以下命令：\n　　```\n $hexo new post \"文章名\" 或者 hexo n \"文章名\"\n　　```\n一个文章的开头应包含:\n　```\n title: #文章题目\n date: #日期\n tags: #标签\n categories: #分类\n　```\n文章存储在*hexo/source/_posts*目录下，后缀为*.md*。可以在适当位置插入以下符号用于部分显示:\n　　```\n<!--more-->\n　　```\n插入该符号之前的文字可以直接显示出来，之后的需要鼠标点击*阅读全文*来显示全部。\n　　```\n $hexo g //生成静态文件\n $hexo d //部署\n　　```\n# 添加RSS\n安装RSS插件：\n　　```\n $npm install hexo-generator-feed --save\n　　```\n修改*hexo/_config.yml*根目录下的站点配置文件，添加以下内容:\n　　```\n #RSS 订阅支持\n plugin:\n - hexo-generator-feed\n #feed Atom\n feed:\n   type: atom\n   path: atom.xml\n   limit: 20\n　　```\n修改主题目录下的配置文件*themes/nexT/_config.yml*\n　　```\n rss: /atom.xml\n　　```\n# 添加sitemap\nsitemap 插件可以方便的管理网站，并生成符合搜索引擎需要的网站格式，供那些网络爬虫抓取，以便于我们的网站可以被搜索到。\n安装*sitemap*插件:\n　```\n $npm install hexo-generator-sitemap --save\n　　```\n修改*hexo/_config.yml*根目录下的站点配置文件:\n　　```\n sitemap:\n　　　path: sitemap.xml\n　　```\n添加baidusitemap：\n  ```\n $npm install hexo-generator-baidu-sitemap --save\n  ```\n修改*hexo/_config.yml*根目录下的站点配置文件:\n　　```\n baidusitemap:\n　　　path: baidusitemap.xml\n　　```\n在站点配置文件中添加：\n　　```\nplugin:\n- hexo-generator-sitemap\n- hexo-generator-baidu-sitemap\n 　```\n修改文件 node_modules/hexo-generator-baidu-sitemap/baidusitemap.ejs ,添加自己的网站地址：\n 　```\n <loc><%- encodeURI(\"http://stevenshi.me/\" + post.path) %></loc>\n 　```\n当执行 hexo g 命令后会在站点目录下的 public/ 下生成 baidusitemap.xml 和 sitemap.xml 文件。将 baidusitemap.xml 提交给百度，[百度提交入口](http://www.sousuoyinqingtijiao.com/baidu/tijiao/) 将 sitemap.xml 提交给 google,[Google提交入口](https://www.google.com/webmasters/verification/home?hl=en)\n## 百度提交\n先去百度站长平台注册，并添加自己的网站然后开始验证。关于验证方式，百度提供了三种,这里为了简单选择 html 标签验证。将百度提供的标签信息添加到主题目录下的 layout/_partials/head.swig 文件内即可：\n 　```\n{% if theme.baidu_site_verification %}\n  <meta name=\"baidu-site-verification\" content=   />\n{% endif %}\n 　```\ncontent 内容为百度提供的验证内容，同时在主题目录中的 _config.ym l中将  baidu_site_verification 的值设置为 true 即可。\n 　```\nbaidu_site_verification: true\n 　```\n重新部署网站后开始验证，不出意外很快会验证成功。成功之后转到百度站长找到左边的链接提交，选择自己的站点，选择自动提交，添加自己的sitemap:\n![](hexo-advance/sitemap.jpg)\n填入自己的 sitemap 地址： *http://stevenshi.me/baidusitemap.xml*，剩下的时间就是等待了。\n## 谷歌提交\n其实不做谷歌提交，谷歌的网络爬虫每隔一段都会自动在网上抓取一些网页，不过为了及时让谷歌收录，还是做一下提交。首先登陆 [GoogleWebmasterCentral](https://www.google.com/webmasters/verification/home?hl=en) 进入后如下图：\n![](hexo-advance/googleconsole.jpg)\n点击 ADD A PROPERTY,输入自己的域名，并继续，之后选择一种验证方式，这里选择推荐的方式，下载一个 html 文件放到博客主题根目录下的 source 目录下，并部署网站后开始验证，成功后提示：\n\n![](hexo-advance/googleverify.jpg)\n\n验证完后登陆 [google站长工具](https://www.google.com/webmasters/tools)，选择添加站点地图：\n\n![](hexo-advance/addsitemap.jpg)\n\n至此 google 提交完成。\n## 错误\n\n当在浏览器输入 *localhost:4000/baidusitemap.xml* 时出现错误：\n\n![](hexo-advance/baidusitemap.jpg)\n\n貌似是标题格式问题， baidusitemap.xml 和普通的 sitemap.xml 格式不同，它多一个标题,经过仔细检查原来标题中的<>符号问题，标题中有该符号即报上面的错误，去掉该符号后问题解决。\n\n提交网站 sitemap 百度提示抓取失败：\n\n![](hexo-advance/error.jpg)\n\n原来百度抓取 github 时是被拒绝的，github 屏蔽了百度爬虫，汗..\n\n网络上有几种解决方案，可以选择同时部署到国内的 [Coding net](https://coding.net/) 和 github,同时配置域名解析国内的解析到 [Coding net](https://coding.net/) 国外的解析到 github 。这样就能解决百度爬虫的问题，但 [Coding](https://coding.net/) 目前针对免费用户只提供可怜 256M 的空间。所以还是想其它办法。\n# 添加侧栏社交链接\n修改主题目录下的配置文件 *themes/nexT/_config.yml*\n　　```\n # Social Links\n # Key is the link label showing to end users.\n # Value is the target link (E.g. GitHub: https://github.com/iissnan)\n social:\n   Github: https://github.com/username\n   知乎: http://www.zhihu.com/people/username\n   Email: mailto: user@xx.com\n　　```\n设置链接的图标，对应的字段是*social_icons*在主题配置文件中:\n　```\n # Social Icons\n social_icons:\n enable: true\n # Icon Mappings\n GitHub: github\n Email: envelope\n　　```\nnexT使用的图标来自[FontAwesome](http://fontawesome.io/)，只要上面有的都可以配置到nexT使用。\n# 添加本地搜索\n安装*hexo-generator-serarch*\n　　```\n $npm install hexo-generator-search --save\n　　```\n修改*hexo/_config.yml*根目录下的站点配置文件添加:\n　　```\n search:\n  path: search.xml\n  field: post\n　　```\n# 设置头像\n在hexo/source/目录下建立images文件夹，将头像放置在该文件夹下，修改主题目录下的配置文件*themes/nexT/_config.yml*\n　　```\n avatar: /images/avatar.jpg\n　　```\n# 生成网站二维码\n二维码生成工具很多，这个[Custom QR Code Generator](https://www.unitag.io/qrcode)比较不错。生成后将二维码添加到关于页面。\n# 设置代码高亮主题\nNexT 使用[TomorrowTheme](https://github.com/chriskempson/tomorrow-theme)作为代码高亮，共有5款主题供选择。 打开主题配置文件*themes/nexT/_config.yml*修改:\n　　```\n # Code Highlight theme\n # Available value:\n #    normal | night | night eighties | night blue | night bright\n # https://github.com/chriskempson/tomorrow-theme\n highlight_theme: night bright\n\n　　```\n# 开启打赏功能\n只需要主题配置文件中填入微信和支付宝收款二维码图片地址，即可开启该功能。修改主题配置文件*themes/nexT/_config.yml*\n　　```\n reward_comment: 您的支持是我原创的动力\n  wechatpay: /path/to/wechat-reward-image\n  alipay: /path/to/alipay-reward-image\n\n　　```\n鼠标放置在二维码上面时，下面的字来回晃眼，修改如下文件:\n*themes/next/source/css/_common/components/post/post-reward.styl*\n注释掉以下代码：![Alt text](hexo-advance/pay.jpg)\n# 友情链接\n修改主题配置文件*themes/next/_config.yml*\n　　```\n # Blog rolls\n links_title: 友情链接\n #links_layout: block\n #links_layout: inline\n links:\n  hexo: https://hexo.io/zh-cn/docs\n  nexT: http://theme-next.iissnan.com/\n　　```\n# 开启动画背景\n[nexT](http://theme-next.iissnan.com/theme-settings.html) 自带两种背景动画效果，canvas_nest以及three_waves,在主题配置文件:\n *themes/next/_config.yml*中设置为true即可开启,\n　　```\n # Canvas-nest\n canvas_nest: true\n　　```\n# 开启JiaThis分享\n[Jiathis](http://www.jiathis.com/)为文章提供社会化分享功能。修改主题配置文件*themes/next/_config.yml*:\n　　```\n # Share\n jiathis: true\n　　```\n# 百度分享\n两种分享只能同时开启一种，百度分享需要在站点配置文件*hexo/_config.yml*中添加：\n　　```\n # baidu share\n baidushare: true #百度分享功能\n　　```\n另外需要在主题配置文件*themes/next/_config.yml*中开启百度分享功能：\n　　```\n # Baidu Share\n # Available value:\n #    button | slide\n # Warning: Baidu Share does not support https.\n baidushare: \n  type: button\n\n　　```\n# 添加DISQUS评论\n修改主题配置文件开启[DISQUS](https://disqus.com/)功能：\n　　```\n # Disqus\n disqus:\n  enable: true\n  shortname:\n  count: true\n　　```\n去[DISQUS](https://disqus.com/)官网注册，并获取自己的shortname,填写至主题配置文件中的对应字段中。取消一篇文章的评论只需要在文章的头部修改：\n　　```\n comments: false\n　　```\n# 设置网站图标\n图标制作网站[faviconer](http://www.faviconer.com/)，制作完成自己的网站图标后放到*hexo/source*根目录下，并修改主题配置文件：\n　　```\n# Put your favicon.ico into `hexo-site/source/` directory.\nfavicon: /favicon.ico\n　　```\n# 页面中插入图片\n图片的插入可以使用[MarkdownPad](http://markdownpad.com/ \"markdown Editor for Windows\")的语法：\n　　```\n ![图片名称](图片地址)\n　　```\n图片可以放在本地，也可以放在云端。建议放在云端，因为github的空间有限，云端可以使用[七牛云存储](https://www.qiniu.com/)。\n本地图片的插入有两种方法，早期的[hexo](https://hexo.io/zh-cn/docs/ \"hexo说明\")需要将图片放在网站根目录下的*source/*文件夹中比如*source/images/*文件夹，将图片放到该处，即可在页面中引用：\n　　```\n ![test](source/images/test.jgp)\n　　```\n[hexo](https://hexo.io/zh-cn/docs/ \"hexo说明\")2.0之后，引入新方法，参考[CodeFalling/hexo-asset-image](https://github.com/CodeFalling/hexo-asset-image)\n安装插件：\n　　```\n $npm install hexo-asset-image --save\n　　```\n 修改配置文件中的 *post_asset_folder:* 为 *true* ，这样新建文章时，会在 *_post* 目录下生成同名的文件夹，页面需要的各种图片都可以放到此处。比如：\n　　```\n my-Publish\n ├── my.jpg\n ├── logo.jpg\n └── test.jpg\n my-Publish.md\n　　```\n新建名为 *my-Publish* 的新文章，文章需要的图片都放到该文件夹中。引用:\n　　```\n ![xx](my-Publish/my.jpg)\n　　```\n即可插入图片，*xx*可以随意。\n\n ","slug":"hexo-advance","published":1,"updated":"2017-06-14T07:25:45.047Z","layout":"post","photos":[],"link":"","_id":"cj4hne5200008w8ineekjh2ho","content":"<h1 id=\"添加页面\"><a href=\"#添加页面\" class=\"headerlink\" title=\"添加页面\"></a>添加页面</h1><p>页面指的是分类页<em>categories</em>、标签页<em>tags</em>、关于页<em>about</em>等。使用以下命令生成以上页面参考<a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"external\">nexT</a>:<br>　　<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">$hexo</span> <span class=\"keyword\">new</span> page categories</div><div class=\"line\"><span class=\"built_in\">$hexo</span> <span class=\"keyword\">new</span> page tags</div><div class=\"line\"><span class=\"built_in\">$hexo</span> <span class=\"keyword\">new</span> page about</div></pre></td></tr></table></figure></p>\n<p>在 <em>hexo</em> 配置文件 <em>_config.yml</em> 文件中设置 <em>post_asset_folder</em> 为true,当新建页面后会自动生成一个同名文件夹，用于存储所需的资源图片等。生成以上页面后在主题配置文件中 <em>themes/nexT/_config.yml</em> 打开相关配置项:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">menu:</span></div><div class=\"line\"><span class=\"symbol\">  home:</span> /</div><div class=\"line\"><span class=\"symbol\">  categories:</span> /categories</div><div class=\"line\"><span class=\"symbol\">  about:</span> /about</div><div class=\"line\"><span class=\"symbol\">  archives:</span> /archives</div><div class=\"line\"><span class=\"symbol\">  tags:</span> /tags</div><div class=\"line\">  <span class=\"meta\">#sitemap: /sitemap.xml</span></div><div class=\"line\">  <span class=\"meta\">#commonweal: /404.html</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>设置自己的标签页面位于<em>hexo/source/tags</em>:<br>  <figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: 标签</div><div class=\"line\">date: 2017<span class=\"string\">-05</span><span class=\"string\">-05</span> 12:30:52</div><div class=\"line\">type: \"tags\"</div><div class=\"line\">comments: false</div><div class=\"line\"><span class=\"keyword\">tags:</span></div><div class=\"line\"> - Qt</div><div class=\"line\"> - Linux</div><div class=\"line\"> - Hexo</div><div class=\"line\"> - ROS</div></pre></td></tr></table></figure></p>\n<p>可以在上面添加自己的标签。<br>分类页的示例如下:<br>　<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">title:</span> 分类</div><div class=\"line\"><span class=\"string\">date:</span> <span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-05</span> <span class=\"number\">12</span>:<span class=\"number\">30</span>:<span class=\"number\">42</span></div><div class=\"line\"><span class=\"string\">type:</span> <span class=\"string\">\"categories\"</span></div><div class=\"line\"><span class=\"string\">comments:</span> <span class=\"literal\">false</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"发表文章\"><a href=\"#发表文章\" class=\"headerlink\" title=\"发表文章\"></a>发表文章</h1><p>新文章的发表使用以下命令：<br>　　<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">$hexo</span> <span class=\"keyword\">new</span> post <span class=\"string\">\"文章名\"</span> 或者 hexo n <span class=\"string\">\"文章名\"</span></div></pre></td></tr></table></figure></p>\n<p>一个文章的开头应包含:<br>　<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: #文章题目</div><div class=\"line\">date: #日期</div><div class=\"line\"><span class=\"keyword\">tags:</span> #标签</div><div class=\"line\">categories: #分类</div></pre></td></tr></table></figure></p>\n<p>文章存储在<em>hexo/source/_posts</em>目录下，后缀为<em>.md</em>。可以在适当位置插入以下符号用于部分显示:<br>　　<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--more--&gt;</span></div></pre></td></tr></table></figure></p>\n<p>插入该符号之前的文字可以直接显示出来，之后的需要鼠标点击<em>阅读全文</em>来显示全部。<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$hexo</span> g <span class=\"regexp\">//</span>生成静态文件</div><div class=\"line\"><span class=\"variable\">$hexo</span> d <span class=\"regexp\">//</span>部署</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加RSS\"><a href=\"#添加RSS\" class=\"headerlink\" title=\"添加RSS\"></a>添加RSS</h1><p>安装RSS插件：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-generator-feed --save</span></div></pre></td></tr></table></figure></p>\n<p>修改<em>hexo/_config.yml</em>根目录下的站点配置文件，添加以下内容:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#RSS 订阅支持</span></div><div class=\"line\"><span class=\"symbol\">plugin:</span></div><div class=\"line\">- hexo-generator-feed</div><div class=\"line\"><span class=\"meta\">#feed Atom</span></div><div class=\"line\"><span class=\"symbol\">feed:</span></div><div class=\"line\"><span class=\"symbol\">  type:</span> atom</div><div class=\"line\"><span class=\"symbol\">  path:</span> atom.xml</div><div class=\"line\"><span class=\"symbol\">  limit:</span> <span class=\"number\">20</span></div></pre></td></tr></table></figure></p>\n<p>修改主题目录下的配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">rss:</span> /atom.xml</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加sitemap\"><a href=\"#添加sitemap\" class=\"headerlink\" title=\"添加sitemap\"></a>添加sitemap</h1><p>sitemap 插件可以方便的管理网站，并生成符合搜索引擎需要的网站格式，供那些网络爬虫抓取，以便于我们的网站可以被搜索到。<br>安装<em>sitemap</em>插件:<br>　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-generator-sitemap --save</span></div></pre></td></tr></table></figure></p>\n<p>修改<em>hexo/_config.yml</em>根目录下的站点配置文件:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">sitemap:</span></div><div class=\"line\"><span class=\"symbol\">　　　path:</span> sitemap.xml</div></pre></td></tr></table></figure></p>\n<p>添加baidusitemap：<br>  <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-generator-baidu-sitemap --save</span></div></pre></td></tr></table></figure></p>\n<p>修改<em>hexo/_config.yml</em>根目录下的站点配置文件:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">baidusitemap:</span></div><div class=\"line\"><span class=\"symbol\">　　　path:</span> baidusitemap.xml</div></pre></td></tr></table></figure></p>\n<p>在站点配置文件中添加：<br>　　<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugin:</div><div class=\"line\">-<span class=\"ruby\"> hexo-generator-sitemap</span></div><div class=\"line\">-<span class=\"ruby\"> hexo-generator-baidu-sitemap</span></div></pre></td></tr></table></figure></p>\n<p>修改文件 node_modules/hexo-generator-baidu-sitemap/baidusitemap.ejs ,添加自己的网站地址：<br> 　<figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">loc</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%-</span></span></span><span class=\"ruby\"> encodeURI(<span class=\"string\">\"http://stevenshi.me/\"</span> + post.path) </span><span class=\"xml\"><span class=\"tag\">%&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">loc</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>当执行 hexo g 命令后会在站点目录下的 public/ 下生成 baidusitemap.xml 和 sitemap.xml 文件。将 baidusitemap.xml 提交给百度，<a href=\"http://www.sousuoyinqingtijiao.com/baidu/tijiao/\" target=\"_blank\" rel=\"external\">百度提交入口</a> 将 sitemap.xml 提交给 google,<a href=\"https://www.google.com/webmasters/verification/home?hl=en\" target=\"_blank\" rel=\"external\">Google提交入口</a></p>\n<h2 id=\"百度提交\"><a href=\"#百度提交\" class=\"headerlink\" title=\"百度提交\"></a>百度提交</h2><p>先去百度站长平台注册，并添加自己的网站然后开始验证。关于验证方式，百度提供了三种,这里为了简单选择 html 标签验证。将百度提供的标签信息添加到主题目录下的 layout/_partials/head.swig 文件内即可：<br> 　<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">if</span></span> theme.baidu_site_verification %&#125;</span><span class=\"xml\"></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"baidu-site-verification\"</span> <span class=\"attr\">content</span>=   <span class=\"string\">/</span>&gt;</span></div><div class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">endif</span></span> %&#125;</span><span class=\"xml\"></span></div></pre></td></tr></table></figure></p>\n<p>content 内容为百度提供的验证内容，同时在主题目录中的 _config.ym l中将  baidu_site_verification 的值设置为 true 即可。<br> 　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">baidu_site_verification:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>重新部署网站后开始验证，不出意外很快会验证成功。成功之后转到百度站长找到左边的链接提交，选择自己的站点，选择自动提交，添加自己的sitemap:<br><img src=\"/2017/05/09/hexo-advance/sitemap.jpg\" alt=\"\"><br>填入自己的 sitemap 地址： <em><a href=\"http://stevenshi.me/baidusitemap.xml\">http://stevenshi.me/baidusitemap.xml</a></em>，剩下的时间就是等待了。</p>\n<h2 id=\"谷歌提交\"><a href=\"#谷歌提交\" class=\"headerlink\" title=\"谷歌提交\"></a>谷歌提交</h2><p>其实不做谷歌提交，谷歌的网络爬虫每隔一段都会自动在网上抓取一些网页，不过为了及时让谷歌收录，还是做一下提交。首先登陆 <a href=\"https://www.google.com/webmasters/verification/home?hl=en\" target=\"_blank\" rel=\"external\">GoogleWebmasterCentral</a> 进入后如下图：<br><img src=\"/2017/05/09/hexo-advance/googleconsole.jpg\" alt=\"\"><br>点击 ADD A PROPERTY,输入自己的域名，并继续，之后选择一种验证方式，这里选择推荐的方式，下载一个 html 文件放到博客主题根目录下的 source 目录下，并部署网站后开始验证，成功后提示：</p>\n<p><img src=\"/2017/05/09/hexo-advance/googleverify.jpg\" alt=\"\"></p>\n<p>验证完后登陆 <a href=\"https://www.google.com/webmasters/tools\" target=\"_blank\" rel=\"external\">google站长工具</a>，选择添加站点地图：</p>\n<p><img src=\"/2017/05/09/hexo-advance/addsitemap.jpg\" alt=\"\"></p>\n<p>至此 google 提交完成。</p>\n<h2 id=\"错误\"><a href=\"#错误\" class=\"headerlink\" title=\"错误\"></a>错误</h2><p>当在浏览器输入 <em>localhost:4000/baidusitemap.xml</em> 时出现错误：</p>\n<p><img src=\"/2017/05/09/hexo-advance/baidusitemap.jpg\" alt=\"\"></p>\n<p>貌似是标题格式问题， baidusitemap.xml 和普通的 sitemap.xml 格式不同，它多一个标题,经过仔细检查原来标题中的&lt;&gt;符号问题，标题中有该符号即报上面的错误，去掉该符号后问题解决。</p>\n<p>提交网站 sitemap 百度提示抓取失败：</p>\n<p><img src=\"/2017/05/09/hexo-advance/error.jpg\" alt=\"\"></p>\n<p>原来百度抓取 github 时是被拒绝的，github 屏蔽了百度爬虫，汗..</p>\n<p>网络上有几种解决方案，可以选择同时部署到国内的 <a href=\"https://coding.net/\" target=\"_blank\" rel=\"external\">Coding net</a> 和 github,同时配置域名解析国内的解析到 <a href=\"https://coding.net/\" target=\"_blank\" rel=\"external\">Coding net</a> 国外的解析到 github 。这样就能解决百度爬虫的问题，但 <a href=\"https://coding.net/\" target=\"_blank\" rel=\"external\">Coding</a> 目前针对免费用户只提供可怜 256M 的空间。所以还是想其它办法。</p>\n<h1 id=\"添加侧栏社交链接\"><a href=\"#添加侧栏社交链接\" class=\"headerlink\" title=\"添加侧栏社交链接\"></a>添加侧栏社交链接</h1><p>修改主题目录下的配置文件 <em>themes/nexT/_config.yml</em><br>　　<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">Social</span> <span class=\"selector-tag\">Links</span></div><div class=\"line\"># <span class=\"selector-tag\">Key</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">link</span> <span class=\"selector-tag\">label</span> <span class=\"selector-tag\">showing</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">end</span> <span class=\"selector-tag\">users</span>.</div><div class=\"line\"># <span class=\"selector-tag\">Value</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">target</span> <span class=\"selector-tag\">link</span> (E.g. <span class=\"attribute\">GitHub</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/iissnan)</span></div><div class=\"line\"><span class=\"attribute\">social</span>:</div><div class=\"line\">  <span class=\"attribute\">Github</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/username</span></div><div class=\"line\">  知乎: <span class=\"attribute\">http</span>:<span class=\"comment\">//www.zhihu.com/people/username</span></div><div class=\"line\">  <span class=\"attribute\">Email</span>: <span class=\"attribute\">mailto</span>: user<span class=\"variable\">@xx</span>.com</div></pre></td></tr></table></figure></p>\n<p>设置链接的图标，对应的字段是<em>social_icons</em>在主题配置文件中:<br>　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Social Icons</span></div><div class=\"line\"><span class=\"attr\">social_icons:</span></div><div class=\"line\"><span class=\"attr\">enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\"># Icon Mappings</span></div><div class=\"line\"><span class=\"attr\">GitHub:</span> <span class=\"string\">github</span></div><div class=\"line\"><span class=\"attr\">Email:</span> <span class=\"string\">envelope</span></div></pre></td></tr></table></figure></p>\n<p>nexT使用的图标来自<a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"external\">FontAwesome</a>，只要上面有的都可以配置到nexT使用。</p>\n<h1 id=\"添加本地搜索\"><a href=\"#添加本地搜索\" class=\"headerlink\" title=\"添加本地搜索\"></a>添加本地搜索</h1><p>安装<em>hexo-generator-serarch</em><br>　　<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$npm <span class=\"keyword\">install</span> hexo-generator-<span class=\"keyword\">search</span> <span class=\"comment\">--save</span></div></pre></td></tr></table></figure></p>\n<p>修改<em>hexo/_config.yml</em>根目录下的站点配置文件添加:<br>　　<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">search:</div><div class=\"line\"> path: search.<span class=\"keyword\">xml</span></div><div class=\"line\"> <span class=\"title\">field</span>: post</div></pre></td></tr></table></figure></p>\n<h1 id=\"设置头像\"><a href=\"#设置头像\" class=\"headerlink\" title=\"设置头像\"></a>设置头像</h1><p>在hexo/source/目录下建立images文件夹，将头像放置在该文件夹下，修改主题目录下的配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">avatar:</span> <span class=\"meta-keyword\">/images/</span>avatar.jpg</div></pre></td></tr></table></figure></p>\n<h1 id=\"生成网站二维码\"><a href=\"#生成网站二维码\" class=\"headerlink\" title=\"生成网站二维码\"></a>生成网站二维码</h1><p>二维码生成工具很多，这个<a href=\"https://www.unitag.io/qrcode\" target=\"_blank\" rel=\"external\">Custom QR Code Generator</a>比较不错。生成后将二维码添加到关于页面。</p>\n<h1 id=\"设置代码高亮主题\"><a href=\"#设置代码高亮主题\" class=\"headerlink\" title=\"设置代码高亮主题\"></a>设置代码高亮主题</h1><p>NexT 使用<a href=\"https://github.com/chriskempson/tomorrow-theme\" target=\"_blank\" rel=\"external\">TomorrowTheme</a>作为代码高亮，共有5款主题供选择。 打开主题配置文件<em>themes/nexT/_config.yml</em>修改:<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Code Highlight theme</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Available value:</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    normal | night | night eighties | night blue | night bright</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> https://github.com/chriskempson/tomorrow-theme</span></div><div class=\"line\">highlight_theme: night bright</div></pre></td></tr></table></figure></p>\n<h1 id=\"开启打赏功能\"><a href=\"#开启打赏功能\" class=\"headerlink\" title=\"开启打赏功能\"></a>开启打赏功能</h1><p>只需要主题配置文件中填入微信和支付宝收款二维码图片地址，即可开启该功能。修改主题配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">reward_comment:</span> 您的支持是我原创的动力</div><div class=\"line\"><span class=\"symbol\"> wechatpay:</span> <span class=\"meta-keyword\">/path/</span>to/wechat-reward-image</div><div class=\"line\"><span class=\"symbol\"> alipay:</span> <span class=\"meta-keyword\">/path/</span>to/alipay-reward-image</div></pre></td></tr></table></figure></p>\n<p>鼠标放置在二维码上面时，下面的字来回晃眼，修改如下文件:<br><em>themes/next/source/css/_common/components/post/post-reward.styl</em><br>注释掉以下代码：<img src=\"/2017/05/09/hexo-advance/pay.jpg\" alt=\"Alt text\"></p>\n<h1 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h1><p>修改主题配置文件<em>themes/next/_config.yml</em><br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># Blog rolls</span></div><div class=\"line\"><span class=\"symbol\">links_title:</span> 友情链接</div><div class=\"line\"><span class=\"meta\">#links_layout: block</span></div><div class=\"line\"><span class=\"meta\">#links_layout: inline</span></div><div class=\"line\"><span class=\"symbol\">links:</span></div><div class=\"line\"><span class=\"symbol\"> hexo:</span> https:<span class=\"comment\">//hexo.io/zh-cn/docs</span></div><div class=\"line\"><span class=\"symbol\"> nexT:</span> http:<span class=\"comment\">//theme-next.iissnan.com/</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"开启动画背景\"><a href=\"#开启动画背景\" class=\"headerlink\" title=\"开启动画背景\"></a>开启动画背景</h1><p><a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"external\">nexT</a> 自带两种背景动画效果，canvas_nest以及three_waves,在主题配置文件:<br> <em>themes/next/_config.yml</em>中设置为true即可开启,<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Canvas-nest</span></div><div class=\"line\"><span class=\"attr\">canvas_nest:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"开启JiaThis分享\"><a href=\"#开启JiaThis分享\" class=\"headerlink\" title=\"开启JiaThis分享\"></a>开启JiaThis分享</h1><p><a href=\"http://www.jiathis.com/\" target=\"_blank\" rel=\"external\">Jiathis</a>为文章提供社会化分享功能。修改主题配置文件<em>themes/next/_config.yml</em>:<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Share</span></div><div class=\"line\"><span class=\"attr\">jiathis:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"百度分享\"><a href=\"#百度分享\" class=\"headerlink\" title=\"百度分享\"></a>百度分享</h1><p>两种分享只能同时开启一种，百度分享需要在站点配置文件<em>hexo/_config.yml</em>中添加：<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># baidu share</span></div><div class=\"line\"><span class=\"attr\">baidushare:</span> <span class=\"literal\">true</span> <span class=\"comment\">#百度分享功能</span></div></pre></td></tr></table></figure></p>\n<p>另外需要在主题配置文件<em>themes/next/_config.yml</em>中开启百度分享功能：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Baidu Share</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Available value:</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    button | slide</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Warning: Baidu Share does not support https.</span></div><div class=\"line\">baidushare: </div><div class=\"line\"> type: button</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加DISQUS评论\"><a href=\"#添加DISQUS评论\" class=\"headerlink\" title=\"添加DISQUS评论\"></a>添加DISQUS评论</h1><p>修改主题配置文件开启<a href=\"https://disqus.com/\" target=\"_blank\" rel=\"external\">DISQUS</a>功能：<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Disqus</span></div><div class=\"line\"><span class=\"attr\">disqus:</span></div><div class=\"line\"><span class=\"attr\"> enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\"> shortname:</span></div><div class=\"line\"><span class=\"attr\"> count:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>去<a href=\"https://disqus.com/\" target=\"_blank\" rel=\"external\">DISQUS</a>官网注册，并获取自己的shortname,填写至主题配置文件中的对应字段中。取消一篇文章的评论只需要在文章的头部修改：<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">comments:</span> <span class=\"literal\">false</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"设置网站图标\"><a href=\"#设置网站图标\" class=\"headerlink\" title=\"设置网站图标\"></a>设置网站图标</h1><p>图标制作网站<a href=\"http://www.faviconer.com/\" target=\"_blank\" rel=\"external\">faviconer</a>，制作完成自己的网站图标后放到<em>hexo/source</em>根目录下，并修改主题配置文件：<br>　　<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Put your favicon.ico into `hexo-site/source/` directory.</div><div class=\"line\">favicon: /favicon.ico</div></pre></td></tr></table></figure></p>\n<h1 id=\"页面中插入图片\"><a href=\"#页面中插入图片\" class=\"headerlink\" title=\"页面中插入图片\"></a>页面中插入图片</h1><p>图片的插入可以使用<a href=\"http://markdownpad.com/\" title=\"markdown Editor for Windows\" target=\"_blank\" rel=\"external\">MarkdownPad</a>的语法：<br>　　<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">图片名称</span>](<span class=\"link\">图片地址</span>)</div></pre></td></tr></table></figure></p>\n<p>图片可以放在本地，也可以放在云端。建议放在云端，因为github的空间有限，云端可以使用<a href=\"https://www.qiniu.com/\" target=\"_blank\" rel=\"external\">七牛云存储</a>。<br>本地图片的插入有两种方法，早期的<a href=\"https://hexo.io/zh-cn/docs/\" title=\"hexo说明\" target=\"_blank\" rel=\"external\">hexo</a>需要将图片放在网站根目录下的<em>source/</em>文件夹中比如<em>source/images/</em>文件夹，将图片放到该处，即可在页面中引用：<br>　　<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">test</span>](<span class=\"link\">source/images/test.jgp</span>)</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\" title=\"hexo说明\" target=\"_blank\" rel=\"external\">hexo</a>2.0之后，引入新方法，参考<a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">CodeFalling/hexo-asset-image</a><br>安装插件：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-asset-image --save</span></div></pre></td></tr></table></figure></p>\n<p> 修改配置文件中的 <em>post_asset_folder:</em> 为 <em>true</em> ，这样新建文章时，会在 <em>_post</em> 目录下生成同名的文件夹，页面需要的各种图片都可以放到此处。比如：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">my-Publish</div><div class=\"line\">├── my<span class=\"selector-class\">.jpg</span></div><div class=\"line\">├── logo<span class=\"selector-class\">.jpg</span></div><div class=\"line\">└── test<span class=\"selector-class\">.jpg</span></div><div class=\"line\">my-Publish.md</div></pre></td></tr></table></figure></p>\n<p>新建名为 <em>my-Publish</em> 的新文章，文章需要的图片都放到该文件夹中。引用:<br>　　<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">xx</span>](<span class=\"link\">my-Publish/my.jpg</span>)</div></pre></td></tr></table></figure></p>\n<p>即可插入图片，<em>xx</em>可以随意。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"添加页面\"><a href=\"#添加页面\" class=\"headerlink\" title=\"添加页面\"></a>添加页面</h1><p>页面指的是分类页<em>categories</em>、标签页<em>tags</em>、关于页<em>about</em>等。使用以下命令生成以上页面参考<a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"external\">nexT</a>:<br>　　<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">$hexo</span> <span class=\"keyword\">new</span> page categories</div><div class=\"line\"><span class=\"built_in\">$hexo</span> <span class=\"keyword\">new</span> page tags</div><div class=\"line\"><span class=\"built_in\">$hexo</span> <span class=\"keyword\">new</span> page about</div></pre></td></tr></table></figure></p>\n<p>在 <em>hexo</em> 配置文件 <em>_config.yml</em> 文件中设置 <em>post_asset_folder</em> 为true,当新建页面后会自动生成一个同名文件夹，用于存储所需的资源图片等。生成以上页面后在主题配置文件中 <em>themes/nexT/_config.yml</em> 打开相关配置项:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">menu:</span></div><div class=\"line\"><span class=\"symbol\">  home:</span> /</div><div class=\"line\"><span class=\"symbol\">  categories:</span> /categories</div><div class=\"line\"><span class=\"symbol\">  about:</span> /about</div><div class=\"line\"><span class=\"symbol\">  archives:</span> /archives</div><div class=\"line\"><span class=\"symbol\">  tags:</span> /tags</div><div class=\"line\">  <span class=\"meta\">#sitemap: /sitemap.xml</span></div><div class=\"line\">  <span class=\"meta\">#commonweal: /404.html</span></div></pre></td></tr></table></figure></p>","more":"<p>设置自己的标签页面位于<em>hexo/source/tags</em>:<br>  <figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: 标签</div><div class=\"line\">date: 2017<span class=\"string\">-05</span><span class=\"string\">-05</span> 12:30:52</div><div class=\"line\">type: \"tags\"</div><div class=\"line\">comments: false</div><div class=\"line\"><span class=\"keyword\">tags:</span></div><div class=\"line\"> - Qt</div><div class=\"line\"> - Linux</div><div class=\"line\"> - Hexo</div><div class=\"line\"> - ROS</div></pre></td></tr></table></figure></p>\n<p>可以在上面添加自己的标签。<br>分类页的示例如下:<br>　<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">title:</span> 分类</div><div class=\"line\"><span class=\"string\">date:</span> <span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-05</span> <span class=\"number\">12</span>:<span class=\"number\">30</span>:<span class=\"number\">42</span></div><div class=\"line\"><span class=\"string\">type:</span> <span class=\"string\">\"categories\"</span></div><div class=\"line\"><span class=\"string\">comments:</span> <span class=\"literal\">false</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"发表文章\"><a href=\"#发表文章\" class=\"headerlink\" title=\"发表文章\"></a>发表文章</h1><p>新文章的发表使用以下命令：<br>　　<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">$hexo</span> <span class=\"keyword\">new</span> post <span class=\"string\">\"文章名\"</span> 或者 hexo n <span class=\"string\">\"文章名\"</span></div></pre></td></tr></table></figure></p>\n<p>一个文章的开头应包含:<br>　<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: #文章题目</div><div class=\"line\">date: #日期</div><div class=\"line\"><span class=\"keyword\">tags:</span> #标签</div><div class=\"line\">categories: #分类</div></pre></td></tr></table></figure></p>\n<p>文章存储在<em>hexo/source/_posts</em>目录下，后缀为<em>.md</em>。可以在适当位置插入以下符号用于部分显示:<br>　　<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--more--&gt;</span></div></pre></td></tr></table></figure></p>\n<p>插入该符号之前的文字可以直接显示出来，之后的需要鼠标点击<em>阅读全文</em>来显示全部。<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$hexo</span> g <span class=\"regexp\">//</span>生成静态文件</div><div class=\"line\"><span class=\"variable\">$hexo</span> d <span class=\"regexp\">//</span>部署</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加RSS\"><a href=\"#添加RSS\" class=\"headerlink\" title=\"添加RSS\"></a>添加RSS</h1><p>安装RSS插件：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-generator-feed --save</span></div></pre></td></tr></table></figure></p>\n<p>修改<em>hexo/_config.yml</em>根目录下的站点配置文件，添加以下内容:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#RSS 订阅支持</span></div><div class=\"line\"><span class=\"symbol\">plugin:</span></div><div class=\"line\">- hexo-generator-feed</div><div class=\"line\"><span class=\"meta\">#feed Atom</span></div><div class=\"line\"><span class=\"symbol\">feed:</span></div><div class=\"line\"><span class=\"symbol\">  type:</span> atom</div><div class=\"line\"><span class=\"symbol\">  path:</span> atom.xml</div><div class=\"line\"><span class=\"symbol\">  limit:</span> <span class=\"number\">20</span></div></pre></td></tr></table></figure></p>\n<p>修改主题目录下的配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">rss:</span> /atom.xml</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加sitemap\"><a href=\"#添加sitemap\" class=\"headerlink\" title=\"添加sitemap\"></a>添加sitemap</h1><p>sitemap 插件可以方便的管理网站，并生成符合搜索引擎需要的网站格式，供那些网络爬虫抓取，以便于我们的网站可以被搜索到。<br>安装<em>sitemap</em>插件:<br>　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-generator-sitemap --save</span></div></pre></td></tr></table></figure></p>\n<p>修改<em>hexo/_config.yml</em>根目录下的站点配置文件:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">sitemap:</span></div><div class=\"line\"><span class=\"symbol\">　　　path:</span> sitemap.xml</div></pre></td></tr></table></figure></p>\n<p>添加baidusitemap：<br>  <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-generator-baidu-sitemap --save</span></div></pre></td></tr></table></figure></p>\n<p>修改<em>hexo/_config.yml</em>根目录下的站点配置文件:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">baidusitemap:</span></div><div class=\"line\"><span class=\"symbol\">　　　path:</span> baidusitemap.xml</div></pre></td></tr></table></figure></p>\n<p>在站点配置文件中添加：<br>　　<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugin:</div><div class=\"line\">-<span class=\"ruby\"> hexo-generator-sitemap</span></div><div class=\"line\">-<span class=\"ruby\"> hexo-generator-baidu-sitemap</span></div></pre></td></tr></table></figure></p>\n<p>修改文件 node_modules/hexo-generator-baidu-sitemap/baidusitemap.ejs ,添加自己的网站地址：<br> 　<figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">loc</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%-</span></span></span><span class=\"ruby\"> encodeURI(<span class=\"string\">\"http://stevenshi.me/\"</span> + post.path) </span><span class=\"xml\"><span class=\"tag\">%&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">loc</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>当执行 hexo g 命令后会在站点目录下的 public/ 下生成 baidusitemap.xml 和 sitemap.xml 文件。将 baidusitemap.xml 提交给百度，<a href=\"http://www.sousuoyinqingtijiao.com/baidu/tijiao/\" target=\"_blank\" rel=\"external\">百度提交入口</a> 将 sitemap.xml 提交给 google,<a href=\"https://www.google.com/webmasters/verification/home?hl=en\" target=\"_blank\" rel=\"external\">Google提交入口</a></p>\n<h2 id=\"百度提交\"><a href=\"#百度提交\" class=\"headerlink\" title=\"百度提交\"></a>百度提交</h2><p>先去百度站长平台注册，并添加自己的网站然后开始验证。关于验证方式，百度提供了三种,这里为了简单选择 html 标签验证。将百度提供的标签信息添加到主题目录下的 layout/_partials/head.swig 文件内即可：<br> 　<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">if</span></span> theme.baidu_site_verification %&#125;</span><span class=\"xml\"></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"baidu-site-verification\"</span> <span class=\"attr\">content</span>=   <span class=\"string\">/</span>&gt;</span></div><div class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">endif</span></span> %&#125;</span><span class=\"xml\"></span></div></pre></td></tr></table></figure></p>\n<p>content 内容为百度提供的验证内容，同时在主题目录中的 _config.ym l中将  baidu_site_verification 的值设置为 true 即可。<br> 　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">baidu_site_verification:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>重新部署网站后开始验证，不出意外很快会验证成功。成功之后转到百度站长找到左边的链接提交，选择自己的站点，选择自动提交，添加自己的sitemap:<br><img src=\"/2017/05/09/hexo-advance/sitemap.jpg\" alt=\"\"><br>填入自己的 sitemap 地址： <em><a href=\"http://stevenshi.me/baidusitemap.xml\">http://stevenshi.me/baidusitemap.xml</a></em>，剩下的时间就是等待了。</p>\n<h2 id=\"谷歌提交\"><a href=\"#谷歌提交\" class=\"headerlink\" title=\"谷歌提交\"></a>谷歌提交</h2><p>其实不做谷歌提交，谷歌的网络爬虫每隔一段都会自动在网上抓取一些网页，不过为了及时让谷歌收录，还是做一下提交。首先登陆 <a href=\"https://www.google.com/webmasters/verification/home?hl=en\" target=\"_blank\" rel=\"external\">GoogleWebmasterCentral</a> 进入后如下图：<br><img src=\"/2017/05/09/hexo-advance/googleconsole.jpg\" alt=\"\"><br>点击 ADD A PROPERTY,输入自己的域名，并继续，之后选择一种验证方式，这里选择推荐的方式，下载一个 html 文件放到博客主题根目录下的 source 目录下，并部署网站后开始验证，成功后提示：</p>\n<p><img src=\"/2017/05/09/hexo-advance/googleverify.jpg\" alt=\"\"></p>\n<p>验证完后登陆 <a href=\"https://www.google.com/webmasters/tools\" target=\"_blank\" rel=\"external\">google站长工具</a>，选择添加站点地图：</p>\n<p><img src=\"/2017/05/09/hexo-advance/addsitemap.jpg\" alt=\"\"></p>\n<p>至此 google 提交完成。</p>\n<h2 id=\"错误\"><a href=\"#错误\" class=\"headerlink\" title=\"错误\"></a>错误</h2><p>当在浏览器输入 <em>localhost:4000/baidusitemap.xml</em> 时出现错误：</p>\n<p><img src=\"/2017/05/09/hexo-advance/baidusitemap.jpg\" alt=\"\"></p>\n<p>貌似是标题格式问题， baidusitemap.xml 和普通的 sitemap.xml 格式不同，它多一个标题,经过仔细检查原来标题中的&lt;&gt;符号问题，标题中有该符号即报上面的错误，去掉该符号后问题解决。</p>\n<p>提交网站 sitemap 百度提示抓取失败：</p>\n<p><img src=\"/2017/05/09/hexo-advance/error.jpg\" alt=\"\"></p>\n<p>原来百度抓取 github 时是被拒绝的，github 屏蔽了百度爬虫，汗..</p>\n<p>网络上有几种解决方案，可以选择同时部署到国内的 <a href=\"https://coding.net/\" target=\"_blank\" rel=\"external\">Coding net</a> 和 github,同时配置域名解析国内的解析到 <a href=\"https://coding.net/\" target=\"_blank\" rel=\"external\">Coding net</a> 国外的解析到 github 。这样就能解决百度爬虫的问题，但 <a href=\"https://coding.net/\" target=\"_blank\" rel=\"external\">Coding</a> 目前针对免费用户只提供可怜 256M 的空间。所以还是想其它办法。</p>\n<h1 id=\"添加侧栏社交链接\"><a href=\"#添加侧栏社交链接\" class=\"headerlink\" title=\"添加侧栏社交链接\"></a>添加侧栏社交链接</h1><p>修改主题目录下的配置文件 <em>themes/nexT/_config.yml</em><br>　　<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">Social</span> <span class=\"selector-tag\">Links</span></div><div class=\"line\"># <span class=\"selector-tag\">Key</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">link</span> <span class=\"selector-tag\">label</span> <span class=\"selector-tag\">showing</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">end</span> <span class=\"selector-tag\">users</span>.</div><div class=\"line\"># <span class=\"selector-tag\">Value</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">target</span> <span class=\"selector-tag\">link</span> (E.g. <span class=\"attribute\">GitHub</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/iissnan)</span></div><div class=\"line\"><span class=\"attribute\">social</span>:</div><div class=\"line\">  <span class=\"attribute\">Github</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/username</span></div><div class=\"line\">  知乎: <span class=\"attribute\">http</span>:<span class=\"comment\">//www.zhihu.com/people/username</span></div><div class=\"line\">  <span class=\"attribute\">Email</span>: <span class=\"attribute\">mailto</span>: user<span class=\"variable\">@xx</span>.com</div></pre></td></tr></table></figure></p>\n<p>设置链接的图标，对应的字段是<em>social_icons</em>在主题配置文件中:<br>　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Social Icons</span></div><div class=\"line\"><span class=\"attr\">social_icons:</span></div><div class=\"line\"><span class=\"attr\">enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\"># Icon Mappings</span></div><div class=\"line\"><span class=\"attr\">GitHub:</span> <span class=\"string\">github</span></div><div class=\"line\"><span class=\"attr\">Email:</span> <span class=\"string\">envelope</span></div></pre></td></tr></table></figure></p>\n<p>nexT使用的图标来自<a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"external\">FontAwesome</a>，只要上面有的都可以配置到nexT使用。</p>\n<h1 id=\"添加本地搜索\"><a href=\"#添加本地搜索\" class=\"headerlink\" title=\"添加本地搜索\"></a>添加本地搜索</h1><p>安装<em>hexo-generator-serarch</em><br>　　<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$npm <span class=\"keyword\">install</span> hexo-generator-<span class=\"keyword\">search</span> <span class=\"comment\">--save</span></div></pre></td></tr></table></figure></p>\n<p>修改<em>hexo/_config.yml</em>根目录下的站点配置文件添加:<br>　　<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">search:</div><div class=\"line\"> path: search.<span class=\"keyword\">xml</span></div><div class=\"line\"> <span class=\"title\">field</span>: post</div></pre></td></tr></table></figure></p>\n<h1 id=\"设置头像\"><a href=\"#设置头像\" class=\"headerlink\" title=\"设置头像\"></a>设置头像</h1><p>在hexo/source/目录下建立images文件夹，将头像放置在该文件夹下，修改主题目录下的配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">avatar:</span> <span class=\"meta-keyword\">/images/</span>avatar.jpg</div></pre></td></tr></table></figure></p>\n<h1 id=\"生成网站二维码\"><a href=\"#生成网站二维码\" class=\"headerlink\" title=\"生成网站二维码\"></a>生成网站二维码</h1><p>二维码生成工具很多，这个<a href=\"https://www.unitag.io/qrcode\" target=\"_blank\" rel=\"external\">Custom QR Code Generator</a>比较不错。生成后将二维码添加到关于页面。</p>\n<h1 id=\"设置代码高亮主题\"><a href=\"#设置代码高亮主题\" class=\"headerlink\" title=\"设置代码高亮主题\"></a>设置代码高亮主题</h1><p>NexT 使用<a href=\"https://github.com/chriskempson/tomorrow-theme\" target=\"_blank\" rel=\"external\">TomorrowTheme</a>作为代码高亮，共有5款主题供选择。 打开主题配置文件<em>themes/nexT/_config.yml</em>修改:<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Code Highlight theme</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Available value:</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    normal | night | night eighties | night blue | night bright</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> https://github.com/chriskempson/tomorrow-theme</span></div><div class=\"line\">highlight_theme: night bright</div></pre></td></tr></table></figure></p>\n<h1 id=\"开启打赏功能\"><a href=\"#开启打赏功能\" class=\"headerlink\" title=\"开启打赏功能\"></a>开启打赏功能</h1><p>只需要主题配置文件中填入微信和支付宝收款二维码图片地址，即可开启该功能。修改主题配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">reward_comment:</span> 您的支持是我原创的动力</div><div class=\"line\"><span class=\"symbol\"> wechatpay:</span> <span class=\"meta-keyword\">/path/</span>to/wechat-reward-image</div><div class=\"line\"><span class=\"symbol\"> alipay:</span> <span class=\"meta-keyword\">/path/</span>to/alipay-reward-image</div></pre></td></tr></table></figure></p>\n<p>鼠标放置在二维码上面时，下面的字来回晃眼，修改如下文件:<br><em>themes/next/source/css/_common/components/post/post-reward.styl</em><br>注释掉以下代码：<img src=\"/2017/05/09/hexo-advance/pay.jpg\" alt=\"Alt text\"></p>\n<h1 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h1><p>修改主题配置文件<em>themes/next/_config.yml</em><br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># Blog rolls</span></div><div class=\"line\"><span class=\"symbol\">links_title:</span> 友情链接</div><div class=\"line\"><span class=\"meta\">#links_layout: block</span></div><div class=\"line\"><span class=\"meta\">#links_layout: inline</span></div><div class=\"line\"><span class=\"symbol\">links:</span></div><div class=\"line\"><span class=\"symbol\"> hexo:</span> https:<span class=\"comment\">//hexo.io/zh-cn/docs</span></div><div class=\"line\"><span class=\"symbol\"> nexT:</span> http:<span class=\"comment\">//theme-next.iissnan.com/</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"开启动画背景\"><a href=\"#开启动画背景\" class=\"headerlink\" title=\"开启动画背景\"></a>开启动画背景</h1><p><a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"external\">nexT</a> 自带两种背景动画效果，canvas_nest以及three_waves,在主题配置文件:<br> <em>themes/next/_config.yml</em>中设置为true即可开启,<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Canvas-nest</span></div><div class=\"line\"><span class=\"attr\">canvas_nest:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"开启JiaThis分享\"><a href=\"#开启JiaThis分享\" class=\"headerlink\" title=\"开启JiaThis分享\"></a>开启JiaThis分享</h1><p><a href=\"http://www.jiathis.com/\" target=\"_blank\" rel=\"external\">Jiathis</a>为文章提供社会化分享功能。修改主题配置文件<em>themes/next/_config.yml</em>:<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Share</span></div><div class=\"line\"><span class=\"attr\">jiathis:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"百度分享\"><a href=\"#百度分享\" class=\"headerlink\" title=\"百度分享\"></a>百度分享</h1><p>两种分享只能同时开启一种，百度分享需要在站点配置文件<em>hexo/_config.yml</em>中添加：<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># baidu share</span></div><div class=\"line\"><span class=\"attr\">baidushare:</span> <span class=\"literal\">true</span> <span class=\"comment\">#百度分享功能</span></div></pre></td></tr></table></figure></p>\n<p>另外需要在主题配置文件<em>themes/next/_config.yml</em>中开启百度分享功能：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Baidu Share</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Available value:</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    button | slide</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Warning: Baidu Share does not support https.</span></div><div class=\"line\">baidushare: </div><div class=\"line\"> type: button</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加DISQUS评论\"><a href=\"#添加DISQUS评论\" class=\"headerlink\" title=\"添加DISQUS评论\"></a>添加DISQUS评论</h1><p>修改主题配置文件开启<a href=\"https://disqus.com/\" target=\"_blank\" rel=\"external\">DISQUS</a>功能：<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Disqus</span></div><div class=\"line\"><span class=\"attr\">disqus:</span></div><div class=\"line\"><span class=\"attr\"> enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\"> shortname:</span></div><div class=\"line\"><span class=\"attr\"> count:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>去<a href=\"https://disqus.com/\" target=\"_blank\" rel=\"external\">DISQUS</a>官网注册，并获取自己的shortname,填写至主题配置文件中的对应字段中。取消一篇文章的评论只需要在文章的头部修改：<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">comments:</span> <span class=\"literal\">false</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"设置网站图标\"><a href=\"#设置网站图标\" class=\"headerlink\" title=\"设置网站图标\"></a>设置网站图标</h1><p>图标制作网站<a href=\"http://www.faviconer.com/\" target=\"_blank\" rel=\"external\">faviconer</a>，制作完成自己的网站图标后放到<em>hexo/source</em>根目录下，并修改主题配置文件：<br>　　<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Put your favicon.ico into `hexo-site/source/` directory.</div><div class=\"line\">favicon: /favicon.ico</div></pre></td></tr></table></figure></p>\n<h1 id=\"页面中插入图片\"><a href=\"#页面中插入图片\" class=\"headerlink\" title=\"页面中插入图片\"></a>页面中插入图片</h1><p>图片的插入可以使用<a href=\"http://markdownpad.com/\" title=\"markdown Editor for Windows\" target=\"_blank\" rel=\"external\">MarkdownPad</a>的语法：<br>　　<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">图片名称</span>](<span class=\"link\">图片地址</span>)</div></pre></td></tr></table></figure></p>\n<p>图片可以放在本地，也可以放在云端。建议放在云端，因为github的空间有限，云端可以使用<a href=\"https://www.qiniu.com/\" target=\"_blank\" rel=\"external\">七牛云存储</a>。<br>本地图片的插入有两种方法，早期的<a href=\"https://hexo.io/zh-cn/docs/\" title=\"hexo说明\" target=\"_blank\" rel=\"external\">hexo</a>需要将图片放在网站根目录下的<em>source/</em>文件夹中比如<em>source/images/</em>文件夹，将图片放到该处，即可在页面中引用：<br>　　<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">test</span>](<span class=\"link\">source/images/test.jgp</span>)</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\" title=\"hexo说明\" target=\"_blank\" rel=\"external\">hexo</a>2.0之后，引入新方法，参考<a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">CodeFalling/hexo-asset-image</a><br>安装插件：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-asset-image --save</span></div></pre></td></tr></table></figure></p>\n<p> 修改配置文件中的 <em>post_asset_folder:</em> 为 <em>true</em> ，这样新建文章时，会在 <em>_post</em> 目录下生成同名的文件夹，页面需要的各种图片都可以放到此处。比如：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">my-Publish</div><div class=\"line\">├── my<span class=\"selector-class\">.jpg</span></div><div class=\"line\">├── logo<span class=\"selector-class\">.jpg</span></div><div class=\"line\">└── test<span class=\"selector-class\">.jpg</span></div><div class=\"line\">my-Publish.md</div></pre></td></tr></table></figure></p>\n<p>新建名为 <em>my-Publish</em> 的新文章，文章需要的图片都放到该文件夹中。引用:<br>　　<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">xx</span>](<span class=\"link\">my-Publish/my.jpg</span>)</div></pre></td></tr></table></figure></p>\n<p>即可插入图片，<em>xx</em>可以随意。</p>"},{"title":"hexo问题汇总","date":"2017-05-13T09:42:11.000Z","_content":"# Unable to call the return value of (posts[\"first\"])[\"updated\"][\"toISOString\"], which is undefined or falsey\n 运行*hexo g*生成静态文件时提示错误：\n　　```\n $ hexo g\n INFO  Start processing\n FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\n Template render error: (unknown path) [Line 7, Column 23]\n Error: Unable to call `the return value of (posts[\"first\"])[\"updated\"][\"toISOString\"]`, which is undefined or falsey\n　　```\n <!--more-->\n 当移除掉插件hexo-generator-feed和hexo-generator-sitemap后错误消失，怀疑该插件与hexo兼容性不好\n　　```\n $npm uninstall hexo-generator-feed\n $npm uninstall hexo-generator-sitemap\n　　```\n# WARN No layout: index.html?\n 查看主题目录是否为空，如果为空下载主题\n# fatal: AggregateException encountered\n 当推送至远程分支时提示错误:\n　　```\n $git push origin hexo\n fatal: AggregateException encountered\n   •¢ÉúÒ»¸ö»ò¶à¸ö´íÎó¡£\n Username for 'https://github.com':\n　　```\n 多数是网络问题，重来一次即可。\n## Cannot GET /\n 当启动服务器后，浏览器输入*http://localhost:4000*，却提示错误：*Cannot GET*\n 一般是配置文件错误，当在其他电脑从远程clone下来代码仓后，安装必要的工具使用 *hexo clean* 以及 *hexo g* 后产生的 *public* 文件与本地电脑原有源码仓生成的 *public* 不一样，查看里面并没有生成以日期命名的文章文件，怀疑是配置文件出了问题，对比两个配置文件都一样，最后发现 *node_modules* 文件夹问题，就是hexo的配置和安装问题，其他文件都推送到远程仓库，唯独没有推送这个文件夹，它保存有hexo的一些可执行文件。按照hexo安装教程在clone下来的代码仓重新安装一遍hexo，最后还是不行。使用[WinMerge](http://winmerge.org/)比较原电脑中和现在电脑中的两个node_modules文件的不同，发现hexo的很多二进制文件都不同。无语-\n 当使用 *hexo init* 后，再把远程仓库的配置文件覆盖到本地电脑后，可以正常生成静态网页。肯定是 *hexo* 安装不完整缺少某些依赖项。\n 所以，当在一台新电脑部署 *hexo* 的正确做法是安装好 *hexo* 之后需要 *hexo init* 一下，这样会安装依赖项，得到完整的 *node_modules*文件夹：\n　　```\n $npm install hexo --save\n $npm install hexo-server  --save\n $npm install hexo-generator-search --save\n $npm install hexo-deployer-git --save\n $hexo init //\n　　```\n 初始化之后，保留node_modules文件夹，其它删除，之后获取远程仓库最新更新：\n　　```\n $git remote add origin https://github.com/yourusername/yourusername.github.io.git\n $git pull origin hexo\n　　```\n# bash: /dev/tty: No such device or address.error: failed to execute prompt script (exit code 1)\n 当部署自己的博客文件时：\n　　```\n $hexo d \n　　```\n 出现以下错误：\n　　```\n bash: /dev/tty: No such device or address\n error: failed to execute prompt script (exit code 1)\n fatal: could not read Username for 'https://github.com': Invalid argument\n FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\n Error: bash: /dev/tty: No such device or address\n error: failed to execute prompt script (exit code 1)\n fatal: could not read Username for 'https://github.com': Invalid argument.\n　　```\n 出现该现象是 *windows* 环境下的*git bash shell*配置问题，当改用 *github for windows* 下的*git bash shell* 再次部署时问题解决。由于国内的网络问题，官网下载很难安装成功，这里附上一个CSDN上的大神的离线安装包地址[GithubforWindows](http://download.csdn.net/user/devsplash)。\n# Permission denied (publickey).\n 当部署博客文件时提示错误：\n　　```\n $hexo d\n The authenticity of host 'github.com (192.30.255.112)' can't be established.\n Permission denied (publickey).\n　　```\n 本机没有配置SSH Key：\n 　```\n $ssh-keygen -t rsa -C \"your_email@youremail.com\"\n　 ```\n 将生成的SSH Key拷贝下来，粘贴到自己的github网站的new ssh key中即可。或者使用原来电脑的SSH Key。完成后查看配置是否成功：\n 　```\n $ssh -T git@github.com\n 　```\n# Changes not staged for commit: Untracked files:\n当每次git commit提交更改时，总是提示以下错误：\n　　```\n $git commit -m \"\"\n On branch hexo\n Changes not staged for commit:\n       \n Untracked files:\n　　```\n 通过输入git status查看提示：\n　　```\n $ git status\n On branch hexo\n Changes not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        \n Untracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        \n no changes added to commit (use \"git add\" and/or \"git commit -a\")\n \n　　```\n *Changes not staged for commit* 说明 *git* 已经跟踪到这些文件的修改，但还没有放到暂存区，需要使用 *git add* 命令提交更新到暂存区。之后再通过 *git status* 查看状态：\n　　```\n $git status\n On branch hexo\n Changes to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n       \n　　```\n 状态已经变成了Changes to be committed。提示未被跟踪的文件Untracked files说明是新建立的文件，在git之前的提交中没有这些文件，git不会自动将它们纳入跟踪范围，必须手动添加这些文件。使用 *git add* 命令跟踪新文件：\n　　```\n $git add \"file\" //添加未被跟踪的文件\n　　```\n 如果还有错误，直接清除缓存:\n　　```\n $git rm -r --cached .\n $git add --all //跟踪所有文件\n $git commit -m \"your commit\" //提交更新\n $git push origin \"yourbranch\" //推送到远程分支yourbranch\n　　```","source":"_posts/hexo-error.md","raw":"---\ntitle: hexo问题汇总\ndate: 2017-05-13 17:42:11\ntags: hexo\ncategories: hexo\n---\n# Unable to call the return value of (posts[\"first\"])[\"updated\"][\"toISOString\"], which is undefined or falsey\n 运行*hexo g*生成静态文件时提示错误：\n　　```\n $ hexo g\n INFO  Start processing\n FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\n Template render error: (unknown path) [Line 7, Column 23]\n Error: Unable to call `the return value of (posts[\"first\"])[\"updated\"][\"toISOString\"]`, which is undefined or falsey\n　　```\n <!--more-->\n 当移除掉插件hexo-generator-feed和hexo-generator-sitemap后错误消失，怀疑该插件与hexo兼容性不好\n　　```\n $npm uninstall hexo-generator-feed\n $npm uninstall hexo-generator-sitemap\n　　```\n# WARN No layout: index.html?\n 查看主题目录是否为空，如果为空下载主题\n# fatal: AggregateException encountered\n 当推送至远程分支时提示错误:\n　　```\n $git push origin hexo\n fatal: AggregateException encountered\n   •¢ÉúÒ»¸ö»ò¶à¸ö´íÎó¡£\n Username for 'https://github.com':\n　　```\n 多数是网络问题，重来一次即可。\n## Cannot GET /\n 当启动服务器后，浏览器输入*http://localhost:4000*，却提示错误：*Cannot GET*\n 一般是配置文件错误，当在其他电脑从远程clone下来代码仓后，安装必要的工具使用 *hexo clean* 以及 *hexo g* 后产生的 *public* 文件与本地电脑原有源码仓生成的 *public* 不一样，查看里面并没有生成以日期命名的文章文件，怀疑是配置文件出了问题，对比两个配置文件都一样，最后发现 *node_modules* 文件夹问题，就是hexo的配置和安装问题，其他文件都推送到远程仓库，唯独没有推送这个文件夹，它保存有hexo的一些可执行文件。按照hexo安装教程在clone下来的代码仓重新安装一遍hexo，最后还是不行。使用[WinMerge](http://winmerge.org/)比较原电脑中和现在电脑中的两个node_modules文件的不同，发现hexo的很多二进制文件都不同。无语-\n 当使用 *hexo init* 后，再把远程仓库的配置文件覆盖到本地电脑后，可以正常生成静态网页。肯定是 *hexo* 安装不完整缺少某些依赖项。\n 所以，当在一台新电脑部署 *hexo* 的正确做法是安装好 *hexo* 之后需要 *hexo init* 一下，这样会安装依赖项，得到完整的 *node_modules*文件夹：\n　　```\n $npm install hexo --save\n $npm install hexo-server  --save\n $npm install hexo-generator-search --save\n $npm install hexo-deployer-git --save\n $hexo init //\n　　```\n 初始化之后，保留node_modules文件夹，其它删除，之后获取远程仓库最新更新：\n　　```\n $git remote add origin https://github.com/yourusername/yourusername.github.io.git\n $git pull origin hexo\n　　```\n# bash: /dev/tty: No such device or address.error: failed to execute prompt script (exit code 1)\n 当部署自己的博客文件时：\n　　```\n $hexo d \n　　```\n 出现以下错误：\n　　```\n bash: /dev/tty: No such device or address\n error: failed to execute prompt script (exit code 1)\n fatal: could not read Username for 'https://github.com': Invalid argument\n FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\n Error: bash: /dev/tty: No such device or address\n error: failed to execute prompt script (exit code 1)\n fatal: could not read Username for 'https://github.com': Invalid argument.\n　　```\n 出现该现象是 *windows* 环境下的*git bash shell*配置问题，当改用 *github for windows* 下的*git bash shell* 再次部署时问题解决。由于国内的网络问题，官网下载很难安装成功，这里附上一个CSDN上的大神的离线安装包地址[GithubforWindows](http://download.csdn.net/user/devsplash)。\n# Permission denied (publickey).\n 当部署博客文件时提示错误：\n　　```\n $hexo d\n The authenticity of host 'github.com (192.30.255.112)' can't be established.\n Permission denied (publickey).\n　　```\n 本机没有配置SSH Key：\n 　```\n $ssh-keygen -t rsa -C \"your_email@youremail.com\"\n　 ```\n 将生成的SSH Key拷贝下来，粘贴到自己的github网站的new ssh key中即可。或者使用原来电脑的SSH Key。完成后查看配置是否成功：\n 　```\n $ssh -T git@github.com\n 　```\n# Changes not staged for commit: Untracked files:\n当每次git commit提交更改时，总是提示以下错误：\n　　```\n $git commit -m \"\"\n On branch hexo\n Changes not staged for commit:\n       \n Untracked files:\n　　```\n 通过输入git status查看提示：\n　　```\n $ git status\n On branch hexo\n Changes not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        \n Untracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        \n no changes added to commit (use \"git add\" and/or \"git commit -a\")\n \n　　```\n *Changes not staged for commit* 说明 *git* 已经跟踪到这些文件的修改，但还没有放到暂存区，需要使用 *git add* 命令提交更新到暂存区。之后再通过 *git status* 查看状态：\n　　```\n $git status\n On branch hexo\n Changes to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n       \n　　```\n 状态已经变成了Changes to be committed。提示未被跟踪的文件Untracked files说明是新建立的文件，在git之前的提交中没有这些文件，git不会自动将它们纳入跟踪范围，必须手动添加这些文件。使用 *git add* 命令跟踪新文件：\n　　```\n $git add \"file\" //添加未被跟踪的文件\n　　```\n 如果还有错误，直接清除缓存:\n　　```\n $git rm -r --cached .\n $git add --all //跟踪所有文件\n $git commit -m \"your commit\" //提交更新\n $git push origin \"yourbranch\" //推送到远程分支yourbranch\n　　```","slug":"hexo-error","published":1,"updated":"2017-05-14T23:56:22.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4hne5220009w8inbkqj6l1z","content":"<h1 id=\"Unable-to-call-the-return-value-of-posts-“first”-“updated”-“toISOString”-which-is-undefined-or-falsey\"><a href=\"#Unable-to-call-the-return-value-of-posts-“first”-“updated”-“toISOString”-which-is-undefined-or-falsey\" class=\"headerlink\" title=\"Unable to call the return value of (posts[“first”])[“updated”][“toISOString”], which is undefined or falsey\"></a>Unable to call the return value of (posts[“first”])[“updated”][“toISOString”], which is undefined or falsey</h1><p> 运行<em>hexo g</em>生成静态文件时提示错误：<br>　　<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div><div class=\"line\">INFO  Start processing</div><div class=\"line\">FATAL Something<span class=\"comment\">'s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span></div><div class=\"line\">Template render <span class=\"keyword\">error</span>: (unknown path) [Line <span class=\"number\">7</span>, Column <span class=\"number\">23</span>]</div><div class=\"line\"><span class=\"keyword\">Error</span>: Unable <span class=\"keyword\">to</span> <span class=\"keyword\">call</span> `the <span class=\"keyword\">return</span> value <span class=\"keyword\">of</span> (posts[<span class=\"string\">\"first\"</span>])[<span class=\"string\">\"updated\"</span>][<span class=\"string\">\"toISOString\"</span>]`, which <span class=\"keyword\">is</span> undefined <span class=\"keyword\">or</span> falsey</div></pre></td></tr></table></figure></p>\n <a id=\"more\"></a>\n<p> 当移除掉插件hexo-generator-feed和hexo-generator-sitemap后错误消失，怀疑该插件与hexo兼容性不好<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> uninstall hexo-generator-feed</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> uninstall hexo-generator-sitemap</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"WARN-No-layout-index-html\"><a href=\"#WARN-No-layout-index-html\" class=\"headerlink\" title=\"WARN No layout: index.html?\"></a>WARN No layout: index.html?</h1><p> 查看主题目录是否为空，如果为空下载主题</p>\n<h1 id=\"fatal-AggregateException-encountered\"><a href=\"#fatal-AggregateException-encountered\" class=\"headerlink\" title=\"fatal: AggregateException encountered\"></a>fatal: AggregateException encountered</h1><p> 当推送至远程分支时提示错误:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> push origin hexo</span></div><div class=\"line\">fatal: AggregateException encountered</div><div class=\"line\">  •¢ÉúÒ»¸ö»ò¶à¸ö´íÎó¡£</div><div class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">'https://github.com'</span>:</div></pre></td></tr></table></figure></p>\n<p> 多数是网络问题，重来一次即可。</p>\n<h2 id=\"Cannot-GET\"><a href=\"#Cannot-GET\" class=\"headerlink\" title=\"Cannot GET /\"></a>Cannot GET /</h2><p> 当启动服务器后，浏览器输入<em><a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a></em>，却提示错误：<em>Cannot GET</em><br> 一般是配置文件错误，当在其他电脑从远程clone下来代码仓后，安装必要的工具使用 <em>hexo clean</em> 以及 <em>hexo g</em> 后产生的 <em>public</em> 文件与本地电脑原有源码仓生成的 <em>public</em> 不一样，查看里面并没有生成以日期命名的文章文件，怀疑是配置文件出了问题，对比两个配置文件都一样，最后发现 <em>node_modules</em> 文件夹问题，就是hexo的配置和安装问题，其他文件都推送到远程仓库，唯独没有推送这个文件夹，它保存有hexo的一些可执行文件。按照hexo安装教程在clone下来的代码仓重新安装一遍hexo，最后还是不行。使用<a href=\"http://winmerge.org/\" target=\"_blank\" rel=\"external\">WinMerge</a>比较原电脑中和现在电脑中的两个node_modules文件的不同，发现hexo的很多二进制文件都不同。无语-<br> 当使用 <em>hexo init</em> 后，再把远程仓库的配置文件覆盖到本地电脑后，可以正常生成静态网页。肯定是 <em>hexo</em> 安装不完整缺少某些依赖项。<br> 所以，当在一台新电脑部署 <em>hexo</em> 的正确做法是安装好 <em>hexo</em> 之后需要 <em>hexo init</em> 一下，这样会安装依赖项，得到完整的 <em>node_modules</em>文件夹：<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$npm</span> install hexo --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-server  --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-generator-<span class=\"keyword\">search</span> --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-deployer-git --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$hexo</span> init <span class=\"comment\">//</span></div></pre></td></tr></table></figure></p>\n<p> 初始化之后，保留node_modules文件夹，其它删除，之后获取远程仓库最新更新：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> remote add origin https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/yourusername/y</span>ourusername.github.io.git</div><div class=\"line\"><span class=\"variable\">$git</span> pull origin hexo</div></pre></td></tr></table></figure></p>\n<h1 id=\"bash-dev-tty-No-such-device-or-address-error-failed-to-execute-prompt-script-exit-code-1\"><a href=\"#bash-dev-tty-No-such-device-or-address-error-failed-to-execute-prompt-script-exit-code-1\" class=\"headerlink\" title=\"bash: /dev/tty: No such device or address.error: failed to execute prompt script (exit code 1)\"></a>bash: /dev/tty: No such device or address.error: failed to execute prompt script (exit code 1)</h1><p> 当部署自己的博客文件时：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$hexo</span> d</span></div></pre></td></tr></table></figure></p>\n<p> 出现以下错误：<br>　　<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">bash: /dev/tty: No such device or address</div><div class=\"line\"><span class=\"keyword\">error: </span>failed to execute prompt script (exit code 1)</div><div class=\"line\">fatal: could not read Username for 'https://github.com': Invalid argument</div><div class=\"line\">FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</div><div class=\"line\"><span class=\"keyword\">Error: </span>bash: /dev/tty: No such device or address</div><div class=\"line\"><span class=\"keyword\">error: </span>failed to execute prompt script (exit code 1)</div><div class=\"line\">fatal: could not read Username for 'https://github.com': Invalid argument.</div></pre></td></tr></table></figure></p>\n<p> 出现该现象是 <em>windows</em> 环境下的<em>git bash shell</em>配置问题，当改用 <em>github for windows</em> 下的<em>git bash shell</em> 再次部署时问题解决。由于国内的网络问题，官网下载很难安装成功，这里附上一个CSDN上的大神的离线安装包地址<a href=\"http://download.csdn.net/user/devsplash\" target=\"_blank\" rel=\"external\">GithubforWindows</a>。</p>\n<h1 id=\"Permission-denied-publickey\"><a href=\"#Permission-denied-publickey\" class=\"headerlink\" title=\"Permission denied (publickey).\"></a>Permission denied (publickey).</h1><p> 当部署博客文件时提示错误：<br>　　<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$hexo d</div><div class=\"line\">The authenticity <span class=\"keyword\">of</span> host <span class=\"symbol\">'github.com</span> (<span class=\"number\">192.30</span>.<span class=\"number\">255.112</span>)' can<span class=\"symbol\">'t</span> be established.</div><div class=\"line\">Permission denied (publickey).</div></pre></td></tr></table></figure></p>\n<p> 本机没有配置SSH Key：<br> 　<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></div></pre></td></tr></table></figure></p>\n<p> 将生成的SSH Key拷贝下来，粘贴到自己的github网站的new ssh key中即可。或者使用原来电脑的SSH Key。完成后查看配置是否成功：<br> 　<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh -T git<span class=\"symbol\">@github</span>.com</div></pre></td></tr></table></figure></p>\n<h1 id=\"Changes-not-staged-for-commit-Untracked-files\"><a href=\"#Changes-not-staged-for-commit-Untracked-files\" class=\"headerlink\" title=\"Changes not staged for commit: Untracked files:\"></a>Changes not staged for commit: Untracked files:</h1><p>当每次git commit提交更改时，总是提示以下错误：<br>　　<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git <span class=\"keyword\">commit</span> -m <span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"keyword\">On</span> branch hexo</div><div class=\"line\">Changes <span class=\"keyword\">not</span> staged <span class=\"keyword\">for</span> <span class=\"keyword\">commit</span>:</div><div class=\"line\">      </div><div class=\"line\">Untracked files:</div></pre></td></tr></table></figure></p>\n<p> 通过输入git status查看提示：<br>　　<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch hexo</div><div class=\"line\">Changes not staged for <span class=\"keyword\">commit</span>:</div><div class=\"line\"> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> <span class=\"keyword\">update</span> what will be committed)</div><div class=\"line\"> (<span class=\"keyword\">use</span> <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> discard changes <span class=\"keyword\">in</span> working <span class=\"keyword\">directory</span>)</div><div class=\"line\"></div><div class=\"line\">       </div><div class=\"line\">Untracked files:</div><div class=\"line\"> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> <span class=\"keyword\">include</span> <span class=\"keyword\">in</span> what will be committed)</div><div class=\"line\"></div><div class=\"line\">       </div><div class=\"line\"><span class=\"keyword\">no</span> changes added <span class=\"keyword\">to</span> <span class=\"keyword\">commit</span> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add\"</span> <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> <span class=\"string\">\"git commit -a\"</span>)</div></pre></td></tr></table></figure></p>\n<p> <em>Changes not staged for commit</em> 说明 <em>git</em> 已经跟踪到这些文件的修改，但还没有放到暂存区，需要使用 <em>git add</em> 命令提交更新到暂存区。之后再通过 <em>git status</em> 查看状态：<br>　　<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git status</div><div class=\"line\"><span class=\"keyword\">On</span> branch hexo</div><div class=\"line\">Changes <span class=\"keyword\">to</span> be committed:</div><div class=\"line\"> (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> unstage)</div></pre></td></tr></table></figure></p>\n<p> 状态已经变成了Changes to be committed。提示未被跟踪的文件Untracked files说明是新建立的文件，在git之前的提交中没有这些文件，git不会自动将它们纳入跟踪范围，必须手动添加这些文件。使用 <em>git add</em> 命令跟踪新文件：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> add <span class=\"string\">\"file\"</span> <span class=\"regexp\">//</span>添加未被跟踪的文件</div></pre></td></tr></table></figure></p>\n<p> 如果还有错误，直接清除缓存:<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git rm -r --cached .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git add --all //跟踪所有文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git commit -m <span class=\"string\">\"your commit\"</span> //提交更新</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git push origin <span class=\"string\">\"yourbranch\"</span> //推送到远程分支yourbranch</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Unable-to-call-the-return-value-of-posts-“first”-“updated”-“toISOString”-which-is-undefined-or-falsey\"><a href=\"#Unable-to-call-the-return-value-of-posts-“first”-“updated”-“toISOString”-which-is-undefined-or-falsey\" class=\"headerlink\" title=\"Unable to call the return value of (posts[“first”])[“updated”][“toISOString”], which is undefined or falsey\"></a>Unable to call the return value of (posts[“first”])[“updated”][“toISOString”], which is undefined or falsey</h1><p> 运行<em>hexo g</em>生成静态文件时提示错误：<br>　　<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div><div class=\"line\">INFO  Start processing</div><div class=\"line\">FATAL Something<span class=\"comment\">'s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span></div><div class=\"line\">Template render <span class=\"keyword\">error</span>: (unknown path) [Line <span class=\"number\">7</span>, Column <span class=\"number\">23</span>]</div><div class=\"line\"><span class=\"keyword\">Error</span>: Unable <span class=\"keyword\">to</span> <span class=\"keyword\">call</span> `the <span class=\"keyword\">return</span> value <span class=\"keyword\">of</span> (posts[<span class=\"string\">\"first\"</span>])[<span class=\"string\">\"updated\"</span>][<span class=\"string\">\"toISOString\"</span>]`, which <span class=\"keyword\">is</span> undefined <span class=\"keyword\">or</span> falsey</div></pre></td></tr></table></figure></p>","more":"<p> 当移除掉插件hexo-generator-feed和hexo-generator-sitemap后错误消失，怀疑该插件与hexo兼容性不好<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> uninstall hexo-generator-feed</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> uninstall hexo-generator-sitemap</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"WARN-No-layout-index-html\"><a href=\"#WARN-No-layout-index-html\" class=\"headerlink\" title=\"WARN No layout: index.html?\"></a>WARN No layout: index.html?</h1><p> 查看主题目录是否为空，如果为空下载主题</p>\n<h1 id=\"fatal-AggregateException-encountered\"><a href=\"#fatal-AggregateException-encountered\" class=\"headerlink\" title=\"fatal: AggregateException encountered\"></a>fatal: AggregateException encountered</h1><p> 当推送至远程分支时提示错误:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> push origin hexo</span></div><div class=\"line\">fatal: AggregateException encountered</div><div class=\"line\">  •¢ÉúÒ»¸ö»ò¶à¸ö´íÎó¡£</div><div class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">'https://github.com'</span>:</div></pre></td></tr></table></figure></p>\n<p> 多数是网络问题，重来一次即可。</p>\n<h2 id=\"Cannot-GET\"><a href=\"#Cannot-GET\" class=\"headerlink\" title=\"Cannot GET /\"></a>Cannot GET /</h2><p> 当启动服务器后，浏览器输入<em><a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a></em>，却提示错误：<em>Cannot GET</em><br> 一般是配置文件错误，当在其他电脑从远程clone下来代码仓后，安装必要的工具使用 <em>hexo clean</em> 以及 <em>hexo g</em> 后产生的 <em>public</em> 文件与本地电脑原有源码仓生成的 <em>public</em> 不一样，查看里面并没有生成以日期命名的文章文件，怀疑是配置文件出了问题，对比两个配置文件都一样，最后发现 <em>node_modules</em> 文件夹问题，就是hexo的配置和安装问题，其他文件都推送到远程仓库，唯独没有推送这个文件夹，它保存有hexo的一些可执行文件。按照hexo安装教程在clone下来的代码仓重新安装一遍hexo，最后还是不行。使用<a href=\"http://winmerge.org/\" target=\"_blank\" rel=\"external\">WinMerge</a>比较原电脑中和现在电脑中的两个node_modules文件的不同，发现hexo的很多二进制文件都不同。无语-<br> 当使用 <em>hexo init</em> 后，再把远程仓库的配置文件覆盖到本地电脑后，可以正常生成静态网页。肯定是 <em>hexo</em> 安装不完整缺少某些依赖项。<br> 所以，当在一台新电脑部署 <em>hexo</em> 的正确做法是安装好 <em>hexo</em> 之后需要 <em>hexo init</em> 一下，这样会安装依赖项，得到完整的 <em>node_modules</em>文件夹：<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$npm</span> install hexo --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-server  --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-generator-<span class=\"keyword\">search</span> --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-deployer-git --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$hexo</span> init <span class=\"comment\">//</span></div></pre></td></tr></table></figure></p>\n<p> 初始化之后，保留node_modules文件夹，其它删除，之后获取远程仓库最新更新：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> remote add origin https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/yourusername/y</span>ourusername.github.io.git</div><div class=\"line\"><span class=\"variable\">$git</span> pull origin hexo</div></pre></td></tr></table></figure></p>\n<h1 id=\"bash-dev-tty-No-such-device-or-address-error-failed-to-execute-prompt-script-exit-code-1\"><a href=\"#bash-dev-tty-No-such-device-or-address-error-failed-to-execute-prompt-script-exit-code-1\" class=\"headerlink\" title=\"bash: /dev/tty: No such device or address.error: failed to execute prompt script (exit code 1)\"></a>bash: /dev/tty: No such device or address.error: failed to execute prompt script (exit code 1)</h1><p> 当部署自己的博客文件时：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$hexo</span> d</span></div></pre></td></tr></table></figure></p>\n<p> 出现以下错误：<br>　　<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">bash: /dev/tty: No such device or address</div><div class=\"line\"><span class=\"keyword\">error: </span>failed to execute prompt script (exit code 1)</div><div class=\"line\">fatal: could not read Username for 'https://github.com': Invalid argument</div><div class=\"line\">FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</div><div class=\"line\"><span class=\"keyword\">Error: </span>bash: /dev/tty: No such device or address</div><div class=\"line\"><span class=\"keyword\">error: </span>failed to execute prompt script (exit code 1)</div><div class=\"line\">fatal: could not read Username for 'https://github.com': Invalid argument.</div></pre></td></tr></table></figure></p>\n<p> 出现该现象是 <em>windows</em> 环境下的<em>git bash shell</em>配置问题，当改用 <em>github for windows</em> 下的<em>git bash shell</em> 再次部署时问题解决。由于国内的网络问题，官网下载很难安装成功，这里附上一个CSDN上的大神的离线安装包地址<a href=\"http://download.csdn.net/user/devsplash\" target=\"_blank\" rel=\"external\">GithubforWindows</a>。</p>\n<h1 id=\"Permission-denied-publickey\"><a href=\"#Permission-denied-publickey\" class=\"headerlink\" title=\"Permission denied (publickey).\"></a>Permission denied (publickey).</h1><p> 当部署博客文件时提示错误：<br>　　<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$hexo d</div><div class=\"line\">The authenticity <span class=\"keyword\">of</span> host <span class=\"symbol\">'github.com</span> (<span class=\"number\">192.30</span>.<span class=\"number\">255.112</span>)' can<span class=\"symbol\">'t</span> be established.</div><div class=\"line\">Permission denied (publickey).</div></pre></td></tr></table></figure></p>\n<p> 本机没有配置SSH Key：<br> 　<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></div></pre></td></tr></table></figure></p>\n<p> 将生成的SSH Key拷贝下来，粘贴到自己的github网站的new ssh key中即可。或者使用原来电脑的SSH Key。完成后查看配置是否成功：<br> 　<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh -T git<span class=\"symbol\">@github</span>.com</div></pre></td></tr></table></figure></p>\n<h1 id=\"Changes-not-staged-for-commit-Untracked-files\"><a href=\"#Changes-not-staged-for-commit-Untracked-files\" class=\"headerlink\" title=\"Changes not staged for commit: Untracked files:\"></a>Changes not staged for commit: Untracked files:</h1><p>当每次git commit提交更改时，总是提示以下错误：<br>　　<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git <span class=\"keyword\">commit</span> -m <span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"keyword\">On</span> branch hexo</div><div class=\"line\">Changes <span class=\"keyword\">not</span> staged <span class=\"keyword\">for</span> <span class=\"keyword\">commit</span>:</div><div class=\"line\">      </div><div class=\"line\">Untracked files:</div></pre></td></tr></table></figure></p>\n<p> 通过输入git status查看提示：<br>　　<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch hexo</div><div class=\"line\">Changes not staged for <span class=\"keyword\">commit</span>:</div><div class=\"line\"> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> <span class=\"keyword\">update</span> what will be committed)</div><div class=\"line\"> (<span class=\"keyword\">use</span> <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> discard changes <span class=\"keyword\">in</span> working <span class=\"keyword\">directory</span>)</div><div class=\"line\"></div><div class=\"line\">       </div><div class=\"line\">Untracked files:</div><div class=\"line\"> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> <span class=\"keyword\">include</span> <span class=\"keyword\">in</span> what will be committed)</div><div class=\"line\"></div><div class=\"line\">       </div><div class=\"line\"><span class=\"keyword\">no</span> changes added <span class=\"keyword\">to</span> <span class=\"keyword\">commit</span> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add\"</span> <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> <span class=\"string\">\"git commit -a\"</span>)</div></pre></td></tr></table></figure></p>\n<p> <em>Changes not staged for commit</em> 说明 <em>git</em> 已经跟踪到这些文件的修改，但还没有放到暂存区，需要使用 <em>git add</em> 命令提交更新到暂存区。之后再通过 <em>git status</em> 查看状态：<br>　　<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git status</div><div class=\"line\"><span class=\"keyword\">On</span> branch hexo</div><div class=\"line\">Changes <span class=\"keyword\">to</span> be committed:</div><div class=\"line\"> (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> unstage)</div></pre></td></tr></table></figure></p>\n<p> 状态已经变成了Changes to be committed。提示未被跟踪的文件Untracked files说明是新建立的文件，在git之前的提交中没有这些文件，git不会自动将它们纳入跟踪范围，必须手动添加这些文件。使用 <em>git add</em> 命令跟踪新文件：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> add <span class=\"string\">\"file\"</span> <span class=\"regexp\">//</span>添加未被跟踪的文件</div></pre></td></tr></table></figure></p>\n<p> 如果还有错误，直接清除缓存:<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git rm -r --cached .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git add --all //跟踪所有文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git commit -m <span class=\"string\">\"your commit\"</span> //提交更新</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git push origin <span class=\"string\">\"yourbranch\"</span> //推送到远程分支yourbranch</span></div></pre></td></tr></table></figure></p>"},{"title":"hexo+github建立个人博客","date":"2017-05-07T03:07:34.000Z","comments":1,"_content":"# 前言\n*hexo*是一个高效简洁的静态博客框架，基于*Node.js*使用Markdown解析文章，几秒内即可利用靓丽的主题生成静态网页。\n\n#环境： \n*windows10 64bits*\n#所需软件： \n　　1. [Node.js](https://nodejs.org/en/ \"Java Script运行环境\")　基于Chrome V8引擎的JavaScript运行环境；\n　　2. [Git-for-windows](https://github.com/git-for-windows/git/releases \"git for windows\")　windows平台下git 运行环境；也可以使用 [github-for-windows](https://github.com/gavincook/githubOfflineInstaller) 里的 *git shell*, 由于在线安装 [github-for-windows](https://github.com/gavincook/githubOfflineInstaller) 在国内不翻墙是不可能成功的，所以上面的链接是离线版的安装版本。\n　　3. [MarkdownPad](http://markdownpad.com/ \"markdown Editor for Windows\")　博客撰写工具\n\n*开始之前先去 [github](www.github.com) 注册一个账户，并新建一个名为username.github.io的仓库，最后生成的仓库地址：https://github.com/username/username.github.io  注：username替换为自己的用户名*\n# hexo安装与配置\n首先在本地建立自己的博客文件夹，比如 *F:\\github\\hexo*，进入该文件夹内，右键点击*Git Bash Here*,打开*git for windows*环境，开始安装 [hexo](https://hexo.io/zh-cn/docs/ \"hexo说明\")：\n<!--more-->\n　　```\n　$npm install hexo-cli -g //注: -g表示全局安装\n　$npm install hexo-server -g //注： hexo3.0之后server模块是独立的,需要单独安装\n　　```\n完成之后可以通过命令查看*hexo*是否安装成功：\n　　```\n　$hexo -v\n　　```\n*hexo*根目录下的*_config.yml*文件是全局配置文件，修改该文件实现自己的配置。具体可参考[hexo](https://hexo.io/zh-cn/docs/ \"hexo说明\")官网。\n## hexo常用命令\nhexo常用命令可以参考hexo的帮助说明，下面列举几个常用命令：\n　　```\n　$hexo g //等同于hexo generate,用于生成静态文件\n　$hexo s //等同于hexo server,用于启动本地服务器，预览网页\n　$hexo d //等同于hexo deploy,用于部署文件到github\n　　```\n\n## 建站\n在自己的博客文件夹下*F:\\github\\hexo*,执行命令：\n　　```\n　$hexo init //初始化，自动下载搭建网站所需的所有文件\n　$npm install //安装依赖包\n　$hexo g //产生静态文件\n　$hexo s //启动本地服务器，开启预览功能\n　　```\n这个时候在浏览器输入localhost:4000即可查看到生成的静态网页：![Alt text](hexo-blog/hello-world.jpg)\n## 部署到github\n在hexo根目录下找到配置文件_config.yml，使用[MarkdownPad](http://markdownpad.com/ \"markdown Editor for Windows\") 打开，编辑最后的deploy字段，将自己的github仓库地址输入进去：\n　　```\n　deploy:\n　　　type: git //注意冒号':'后面的空格一定要有\n　　　repository: https://github.com/username/username.github.io.git\n　　　branch: master\n　　```\n### 配置SSH Key\n在桌面空白处鼠标右键选择*Git Bash Here*,输入以下命令配置SSH Key:\n　　```\n $ssh-keygen -t rsa -C \"your_email@youremail.com\"\n　　```\n引号里面的内容输入邮箱地址，然后回车，会提示文件保存的路径，这时候按回车键确认，然后会提示你输入密码，然后会确认输入一次，在*c:/user/username/.ssh/*文件夹内看到生成了两个文件，一个是id_rsa，另一个是id_rsa.pub，打开id_rsa.pub然后选中里面的全部内容，复制下来。登录[github](https://github.com/login),点击*setting*,左边有一个*SSH and GPG keys*选项，进入*New SSH*选项，*title*随意，将之前复制的内容粘贴到key里面去。回到*Git bash*命令行，输入以下命令验证:\n　　```\n $ssh -T git@github.com\n　　```\n### 配置用户名和密码\n　　```\n $git config --global user.name \"your username\"  \n $git config --global user.email \"your_email@youremail.com\"\n　　```\n重新生成一下静态文件：\n　　```\n　$hexo clean //清除缓存文件db.json和已生成的静态文件public\n　$hexo g //产生静态文件\n　$hexo d //部署到github\n　　```\n在运行*hexo d*之前需要安装git部署工具\n　　```\n　$npm install hexo-deployer-git -g\n　　```\n\n第一次执行*hexo d*会弹出对话框提示输入github的用户名和密码。此时在浏览器输入：\n*https://github.com/username/username.github.io*即可看到自己的博客已经搭建成功。\n注: username替换为自己的用户名.\n# nexT主题\nhexo安装完成后，默认的主题是landscape，保存在hexo/themes/文件夹下。[nexT](http://theme-next.iissnan.com/) 主题需要自行下载。在博客文件目录下F:\\github\\hexo右键单击Git Bash Here，输入命令:\n　　```\n　$git clone https://github.com/iissnan/hexo-theme-next.git themes/nexT\n　　```\n下载后的nexT主题会保存在themes目录下。修改hexo根目录下的配置文件_config.yml使主题生效:\n　　```\n　# Extensions\n　## Plugins: https://hexo.io/plugins/\n　## Themes: https://hexo.io/themes/\n　theme: nexT\n　　```\n接下来选择nexT的Scheme，打开nexT的配置文件themes/nexT/_config.yml中，修改:\n　　```\n　# Schemes\n　#scheme: Muse //默认Scheme，黑白主调，大量留白\n　#scheme: Mist //紧凑版本，整洁有序\n　scheme: Pisces //双栏显示，清新\n　　```\n更多的设置请参考: [nexT](http://theme-next.iissnan.com/getting-started.html)\n## 设置语言\n打开hexo的配置文件F:\\github\\hexo\\_config.yml，修改:\n　　```\n　language: zh-Hans //中文汉字\n　　```\n# 访问量统计\n### 文章阅读量统计\n使用 [leancloud](https://leancloud.cn) 实现文章阅读次数统计。注册完成后，点击访问控制台，选择创建新应用:![Alt-text](hexo-blog/leancloudc.jpg)\n\n创建名为Counter的class。之后找到该应用的AppID、AppKey，将这两个值写入到nexT的主题配置文件中_config.yml:\n　　```\n　# Show number of visitors to each article.\n　# You can visit https://leancloud.cn get AppID and AppKey.\n　leancloud_visitors:\n  　　enable: true\n  　　app_id: #<app_id> //复制刚才创建的应用的AppID\n  　　app_key: #<app_key> //复制刚才创建的应用的AppKey\n　　```\n为了安全，将自己的域名加入安全中心->web安全域名中，防止恶意修改。完成后部署网站，看效果是不是已经有了文章阅读量显示了。\n### 站点访问统计\n使用 [不蒜子](http://ibruce.info/2015/04/04/busuanzi/) 脚本实现。\n在themes\\nexT\\layout\\_partials目录下找到文件footer.swig，在文件的头部添加:\n　　```\n　<script async src=\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\">\n　</script>\n　　```\n\n　　\n\n　　\n　　\n\n　　","source":"_posts/hexo-blog.md","raw":"---\ntitle: hexo+github建立个人博客\ndate: 2017-05-07 11:07:34\ncategories: hexo\ntags: hexo\ncomments: true\n---\n# 前言\n*hexo*是一个高效简洁的静态博客框架，基于*Node.js*使用Markdown解析文章，几秒内即可利用靓丽的主题生成静态网页。\n\n#环境： \n*windows10 64bits*\n#所需软件： \n　　1. [Node.js](https://nodejs.org/en/ \"Java Script运行环境\")　基于Chrome V8引擎的JavaScript运行环境；\n　　2. [Git-for-windows](https://github.com/git-for-windows/git/releases \"git for windows\")　windows平台下git 运行环境；也可以使用 [github-for-windows](https://github.com/gavincook/githubOfflineInstaller) 里的 *git shell*, 由于在线安装 [github-for-windows](https://github.com/gavincook/githubOfflineInstaller) 在国内不翻墙是不可能成功的，所以上面的链接是离线版的安装版本。\n　　3. [MarkdownPad](http://markdownpad.com/ \"markdown Editor for Windows\")　博客撰写工具\n\n*开始之前先去 [github](www.github.com) 注册一个账户，并新建一个名为username.github.io的仓库，最后生成的仓库地址：https://github.com/username/username.github.io  注：username替换为自己的用户名*\n# hexo安装与配置\n首先在本地建立自己的博客文件夹，比如 *F:\\github\\hexo*，进入该文件夹内，右键点击*Git Bash Here*,打开*git for windows*环境，开始安装 [hexo](https://hexo.io/zh-cn/docs/ \"hexo说明\")：\n<!--more-->\n　　```\n　$npm install hexo-cli -g //注: -g表示全局安装\n　$npm install hexo-server -g //注： hexo3.0之后server模块是独立的,需要单独安装\n　　```\n完成之后可以通过命令查看*hexo*是否安装成功：\n　　```\n　$hexo -v\n　　```\n*hexo*根目录下的*_config.yml*文件是全局配置文件，修改该文件实现自己的配置。具体可参考[hexo](https://hexo.io/zh-cn/docs/ \"hexo说明\")官网。\n## hexo常用命令\nhexo常用命令可以参考hexo的帮助说明，下面列举几个常用命令：\n　　```\n　$hexo g //等同于hexo generate,用于生成静态文件\n　$hexo s //等同于hexo server,用于启动本地服务器，预览网页\n　$hexo d //等同于hexo deploy,用于部署文件到github\n　　```\n\n## 建站\n在自己的博客文件夹下*F:\\github\\hexo*,执行命令：\n　　```\n　$hexo init //初始化，自动下载搭建网站所需的所有文件\n　$npm install //安装依赖包\n　$hexo g //产生静态文件\n　$hexo s //启动本地服务器，开启预览功能\n　　```\n这个时候在浏览器输入localhost:4000即可查看到生成的静态网页：![Alt text](hexo-blog/hello-world.jpg)\n## 部署到github\n在hexo根目录下找到配置文件_config.yml，使用[MarkdownPad](http://markdownpad.com/ \"markdown Editor for Windows\") 打开，编辑最后的deploy字段，将自己的github仓库地址输入进去：\n　　```\n　deploy:\n　　　type: git //注意冒号':'后面的空格一定要有\n　　　repository: https://github.com/username/username.github.io.git\n　　　branch: master\n　　```\n### 配置SSH Key\n在桌面空白处鼠标右键选择*Git Bash Here*,输入以下命令配置SSH Key:\n　　```\n $ssh-keygen -t rsa -C \"your_email@youremail.com\"\n　　```\n引号里面的内容输入邮箱地址，然后回车，会提示文件保存的路径，这时候按回车键确认，然后会提示你输入密码，然后会确认输入一次，在*c:/user/username/.ssh/*文件夹内看到生成了两个文件，一个是id_rsa，另一个是id_rsa.pub，打开id_rsa.pub然后选中里面的全部内容，复制下来。登录[github](https://github.com/login),点击*setting*,左边有一个*SSH and GPG keys*选项，进入*New SSH*选项，*title*随意，将之前复制的内容粘贴到key里面去。回到*Git bash*命令行，输入以下命令验证:\n　　```\n $ssh -T git@github.com\n　　```\n### 配置用户名和密码\n　　```\n $git config --global user.name \"your username\"  \n $git config --global user.email \"your_email@youremail.com\"\n　　```\n重新生成一下静态文件：\n　　```\n　$hexo clean //清除缓存文件db.json和已生成的静态文件public\n　$hexo g //产生静态文件\n　$hexo d //部署到github\n　　```\n在运行*hexo d*之前需要安装git部署工具\n　　```\n　$npm install hexo-deployer-git -g\n　　```\n\n第一次执行*hexo d*会弹出对话框提示输入github的用户名和密码。此时在浏览器输入：\n*https://github.com/username/username.github.io*即可看到自己的博客已经搭建成功。\n注: username替换为自己的用户名.\n# nexT主题\nhexo安装完成后，默认的主题是landscape，保存在hexo/themes/文件夹下。[nexT](http://theme-next.iissnan.com/) 主题需要自行下载。在博客文件目录下F:\\github\\hexo右键单击Git Bash Here，输入命令:\n　　```\n　$git clone https://github.com/iissnan/hexo-theme-next.git themes/nexT\n　　```\n下载后的nexT主题会保存在themes目录下。修改hexo根目录下的配置文件_config.yml使主题生效:\n　　```\n　# Extensions\n　## Plugins: https://hexo.io/plugins/\n　## Themes: https://hexo.io/themes/\n　theme: nexT\n　　```\n接下来选择nexT的Scheme，打开nexT的配置文件themes/nexT/_config.yml中，修改:\n　　```\n　# Schemes\n　#scheme: Muse //默认Scheme，黑白主调，大量留白\n　#scheme: Mist //紧凑版本，整洁有序\n　scheme: Pisces //双栏显示，清新\n　　```\n更多的设置请参考: [nexT](http://theme-next.iissnan.com/getting-started.html)\n## 设置语言\n打开hexo的配置文件F:\\github\\hexo\\_config.yml，修改:\n　　```\n　language: zh-Hans //中文汉字\n　　```\n# 访问量统计\n### 文章阅读量统计\n使用 [leancloud](https://leancloud.cn) 实现文章阅读次数统计。注册完成后，点击访问控制台，选择创建新应用:![Alt-text](hexo-blog/leancloudc.jpg)\n\n创建名为Counter的class。之后找到该应用的AppID、AppKey，将这两个值写入到nexT的主题配置文件中_config.yml:\n　　```\n　# Show number of visitors to each article.\n　# You can visit https://leancloud.cn get AppID and AppKey.\n　leancloud_visitors:\n  　　enable: true\n  　　app_id: #<app_id> //复制刚才创建的应用的AppID\n  　　app_key: #<app_key> //复制刚才创建的应用的AppKey\n　　```\n为了安全，将自己的域名加入安全中心->web安全域名中，防止恶意修改。完成后部署网站，看效果是不是已经有了文章阅读量显示了。\n### 站点访问统计\n使用 [不蒜子](http://ibruce.info/2015/04/04/busuanzi/) 脚本实现。\n在themes\\nexT\\layout\\_partials目录下找到文件footer.swig，在文件的头部添加:\n　　```\n　<script async src=\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\">\n　</script>\n　　```\n\n　　\n\n　　\n　　\n\n　　","slug":"hexo-blog","published":1,"updated":"2017-05-23T23:55:18.148Z","layout":"post","photos":[],"link":"","_id":"cj4hne524000dw8inchqa01ty","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><em>hexo</em>是一个高效简洁的静态博客框架，基于<em>Node.js</em>使用Markdown解析文章，几秒内即可利用靓丽的主题生成静态网页。</p>\n<p>#环境：<br><em>windows10 64bits</em></p>\n<p>#所需软件：<br>　　1. <a href=\"https://nodejs.org/en/\" title=\"Java Script运行环境\" target=\"_blank\" rel=\"external\">Node.js</a>　基于Chrome V8引擎的JavaScript运行环境；<br>　　2. <a href=\"https://github.com/git-for-windows/git/releases\" title=\"git for windows\" target=\"_blank\" rel=\"external\">Git-for-windows</a>　windows平台下git 运行环境；也可以使用 <a href=\"https://github.com/gavincook/githubOfflineInstaller\" target=\"_blank\" rel=\"external\">github-for-windows</a> 里的 <em>git shell</em>, 由于在线安装 <a href=\"https://github.com/gavincook/githubOfflineInstaller\" target=\"_blank\" rel=\"external\">github-for-windows</a> 在国内不翻墙是不可能成功的，所以上面的链接是离线版的安装版本。<br>　　3. <a href=\"http://markdownpad.com/\" title=\"markdown Editor for Windows\" target=\"_blank\" rel=\"external\">MarkdownPad</a>　博客撰写工具</p>\n<p><em>开始之前先去 <a href=\"www.github.com\">github</a> 注册一个账户，并新建一个名为username.github.io的仓库，最后生成的仓库地址：<a href=\"https://github.com/username/username.github.io\" target=\"_blank\" rel=\"external\">https://github.com/username/username.github.io</a>  注：username替换为自己的用户名</em></p>\n<h1 id=\"hexo安装与配置\"><a href=\"#hexo安装与配置\" class=\"headerlink\" title=\"hexo安装与配置\"></a>hexo安装与配置</h1><p>首先在本地建立自己的博客文件夹，比如 <em>F:\\github\\hexo</em>，进入该文件夹内，右键点击<em>Git Bash Here</em>,打开<em>git for windows</em>环境，开始安装 <a href=\"https://hexo.io/zh-cn/docs/\" title=\"hexo说明\" target=\"_blank\" rel=\"external\">hexo</a>：<br><a id=\"more\"></a><br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$npm</span> install hexo-<span class=\"keyword\">cli</span> -<span class=\"keyword\">g</span> <span class=\"comment\">//注: -g表示全局安装</span></div><div class=\"line\">　<span class=\"variable\">$npm</span> install hexo-server -<span class=\"keyword\">g</span> <span class=\"comment\">//注： hexo3.0之后server模块是独立的,需要单独安装</span></div></pre></td></tr></table></figure></p>\n<p>完成之后可以通过命令查看<em>hexo</em>是否安装成功：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">　$</span><span class=\"bash\">hexo -v</span></div></pre></td></tr></table></figure></p>\n<p><em>hexo</em>根目录下的<em>_config.yml</em>文件是全局配置文件，修改该文件实现自己的配置。具体可参考<a href=\"https://hexo.io/zh-cn/docs/\" title=\"hexo说明\" target=\"_blank\" rel=\"external\">hexo</a>官网。</p>\n<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><p>hexo常用命令可以参考hexo的帮助说明，下面列举几个常用命令：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$hexo</span> g <span class=\"regexp\">//</span>等同于hexo generate,用于生成静态文件</div><div class=\"line\">　<span class=\"variable\">$hexo</span> s <span class=\"regexp\">//</span>等同于hexo server,用于启动本地服务器，预览网页</div><div class=\"line\">　<span class=\"variable\">$hexo</span> d <span class=\"regexp\">//</span>等同于hexo deploy,用于部署文件到github</div></pre></td></tr></table></figure></p>\n<h2 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h2><p>在自己的博客文件夹下<em>F:\\github\\hexo</em>,执行命令：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$hexo</span> init <span class=\"regexp\">//</span>初始化，自动下载搭建网站所需的所有文件</div><div class=\"line\">　<span class=\"variable\">$npm</span> install <span class=\"regexp\">//</span>安装依赖包</div><div class=\"line\">　<span class=\"variable\">$hexo</span> g <span class=\"regexp\">//</span>产生静态文件</div><div class=\"line\">　<span class=\"variable\">$hexo</span> s <span class=\"regexp\">//</span>启动本地服务器，开启预览功能</div></pre></td></tr></table></figure></p>\n<p>这个时候在浏览器输入localhost:4000即可查看到生成的静态网页：<img src=\"/2017/05/07/hexo-blog/hello-world.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"部署到github\"><a href=\"#部署到github\" class=\"headerlink\" title=\"部署到github\"></a>部署到github</h2><p>在hexo根目录下找到配置文件_config.yml，使用<a href=\"http://markdownpad.com/\" title=\"markdown Editor for Windows\" target=\"_blank\" rel=\"external\">MarkdownPad</a> 打开，编辑最后的deploy字段，将自己的github仓库地址输入进去：<br>　　<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"attribute\">deploy</span>:</div><div class=\"line\">　　　<span class=\"attribute\">type</span>: git <span class=\"comment\">//注意冒号':'后面的空格一定要有</span></div><div class=\"line\">　　　<span class=\"attribute\">repository</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/username/username.github.io.git</span></div><div class=\"line\">　　　<span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置SSH-Key\"><a href=\"#配置SSH-Key\" class=\"headerlink\" title=\"配置SSH Key\"></a>配置SSH Key</h3><p>在桌面空白处鼠标右键选择<em>Git Bash Here</em>,输入以下命令配置SSH Key:<br>　　<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></div></pre></td></tr></table></figure></p>\n<p>引号里面的内容输入邮箱地址，然后回车，会提示文件保存的路径，这时候按回车键确认，然后会提示你输入密码，然后会确认输入一次，在<em>c:/user/username/.ssh/</em>文件夹内看到生成了两个文件，一个是id_rsa，另一个是id_rsa.pub，打开id_rsa.pub然后选中里面的全部内容，复制下来。登录<a href=\"https://github.com/login\" target=\"_blank\" rel=\"external\">github</a>,点击<em>setting</em>,左边有一个<em>SSH and GPG keys</em>选项，进入<em>New SSH</em>选项，<em>title</em>随意，将之前复制的内容粘贴到key里面去。回到<em>Git bash</em>命令行，输入以下命令验证:<br>　　<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh -T git<span class=\"symbol\">@github</span>.com</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置用户名和密码\"><a href=\"#配置用户名和密码\" class=\"headerlink\" title=\"配置用户名和密码\"></a>配置用户名和密码</h3><p>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"your username\"</span>  </div><div class=\"line\"><span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"your_email@youremail.com\"</span></div></pre></td></tr></table></figure></p>\n<p>重新生成一下静态文件：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$hexo</span> clean <span class=\"regexp\">//</span>清除缓存文件db.json和已生成的静态文件public</div><div class=\"line\">　<span class=\"variable\">$hexo</span> g <span class=\"regexp\">//</span>产生静态文件</div><div class=\"line\">　<span class=\"variable\">$hexo</span> d <span class=\"regexp\">//</span>部署到github</div></pre></td></tr></table></figure></p>\n<p>在运行<em>hexo d</em>之前需要安装git部署工具<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">　$</span><span class=\"bash\">npm install hexo-deployer-git -g</span></div></pre></td></tr></table></figure></p>\n<p>第一次执行<em>hexo d</em>会弹出对话框提示输入github的用户名和密码。此时在浏览器输入：<br><em><a href=\"https://github.com/username/username.github.io\" target=\"_blank\" rel=\"external\">https://github.com/username/username.github.io</a></em>即可看到自己的博客已经搭建成功。<br>注: username替换为自己的用户名.</p>\n<h1 id=\"nexT主题\"><a href=\"#nexT主题\" class=\"headerlink\" title=\"nexT主题\"></a>nexT主题</h1><p>hexo安装完成后，默认的主题是landscape，保存在hexo/themes/文件夹下。<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">nexT</a> 主题需要自行下载。在博客文件目录下F:\\github\\hexo右键单击Git Bash Here，输入命令:<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$git</span> clone https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/iissnan/</span>hexo-theme-<span class=\"keyword\">next</span>.git themes<span class=\"regexp\">/nexT</span></div></pre></td></tr></table></figure></p>\n<p>下载后的nexT主题会保存在themes目录下。修改hexo根目录下的配置文件_config.yml使主题生效:<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">　#</span><span class=\"bash\"> Extensions</span></div><div class=\"line\"><span class=\"meta\">　#</span><span class=\"bash\"><span class=\"comment\"># Plugins: https://hexo.io/plugins/</span></span></div><div class=\"line\"><span class=\"meta\">　#</span><span class=\"bash\"><span class=\"comment\"># Themes: https://hexo.io/themes/</span></span></div><div class=\"line\">　theme: nexT</div></pre></td></tr></table></figure></p>\n<p>接下来选择nexT的Scheme，打开nexT的配置文件themes/nexT/_config.yml中，修改:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"meta\"># Schemes</span></div><div class=\"line\">　<span class=\"meta\">#scheme: Muse <span class=\"comment\">//默认Scheme，黑白主调，大量留白</span></span></div><div class=\"line\">　<span class=\"meta\">#scheme: Mist <span class=\"comment\">//紧凑版本，整洁有序</span></span></div><div class=\"line\"><span class=\"symbol\">　scheme:</span> Pisces <span class=\"comment\">//双栏显示，清新</span></div></pre></td></tr></table></figure></p>\n<p>更多的设置请参考: <a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">nexT</a></p>\n<h2 id=\"设置语言\"><a href=\"#设置语言\" class=\"headerlink\" title=\"设置语言\"></a>设置语言</h2><p>打开hexo的配置文件F:\\github\\hexo_config.yml，修改:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">　language:</span> zh-Hans <span class=\"comment\">//中文汉字</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"访问量统计\"><a href=\"#访问量统计\" class=\"headerlink\" title=\"访问量统计\"></a>访问量统计</h1><h3 id=\"文章阅读量统计\"><a href=\"#文章阅读量统计\" class=\"headerlink\" title=\"文章阅读量统计\"></a>文章阅读量统计</h3><p>使用 <a href=\"https://leancloud.cn\" target=\"_blank\" rel=\"external\">leancloud</a> 实现文章阅读次数统计。注册完成后，点击访问控制台，选择创建新应用:<img src=\"/2017/05/07/hexo-blog/leancloudc.jpg\" alt=\"Alt-text\"></p>\n<p>创建名为Counter的class。之后找到该应用的AppID、AppKey，将这两个值写入到nexT的主题配置文件中_config.yml:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"meta\"># Show number of visitors to each article.</span></div><div class=\"line\">　<span class=\"meta\"># You can visit https:<span class=\"comment\">//leancloud.cn get AppID and AppKey.</span></span></div><div class=\"line\"><span class=\"symbol\">　leancloud_visitors:</span></div><div class=\"line\"><span class=\"symbol\">  　　enable:</span> true</div><div class=\"line\"><span class=\"symbol\">  　　app_id:</span> <span class=\"meta\">#&lt;app_id&gt; <span class=\"comment\">//复制刚才创建的应用的AppID</span></span></div><div class=\"line\"><span class=\"symbol\">  　　app_key:</span> <span class=\"meta\">#&lt;app_key&gt; <span class=\"comment\">//复制刚才创建的应用的AppKey</span></span></div></pre></td></tr></table></figure></p>\n<p>为了安全，将自己的域名加入安全中心-&gt;web安全域名中，防止恶意修改。完成后部署网站，看效果是不是已经有了文章阅读量显示了。</p>\n<h3 id=\"站点访问统计\"><a href=\"#站点访问统计\" class=\"headerlink\" title=\"站点访问统计\"></a>站点访问统计</h3><p>使用 <a href=\"http://ibruce.info/2015/04/04/busuanzi/\" target=\"_blank\" rel=\"external\">不蒜子</a> 脚本实现。<br>在themes\\nexT\\layout_partials目录下找到文件footer.swig，在文件的头部添加:<br>　　<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">　<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>　　</p>\n<p>　　\n　　</p>\n<p>　　</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><em>hexo</em>是一个高效简洁的静态博客框架，基于<em>Node.js</em>使用Markdown解析文章，几秒内即可利用靓丽的主题生成静态网页。</p>\n<p>#环境：<br><em>windows10 64bits</em></p>\n<p>#所需软件：<br>　　1. <a href=\"https://nodejs.org/en/\" title=\"Java Script运行环境\" target=\"_blank\" rel=\"external\">Node.js</a>　基于Chrome V8引擎的JavaScript运行环境；<br>　　2. <a href=\"https://github.com/git-for-windows/git/releases\" title=\"git for windows\" target=\"_blank\" rel=\"external\">Git-for-windows</a>　windows平台下git 运行环境；也可以使用 <a href=\"https://github.com/gavincook/githubOfflineInstaller\" target=\"_blank\" rel=\"external\">github-for-windows</a> 里的 <em>git shell</em>, 由于在线安装 <a href=\"https://github.com/gavincook/githubOfflineInstaller\" target=\"_blank\" rel=\"external\">github-for-windows</a> 在国内不翻墙是不可能成功的，所以上面的链接是离线版的安装版本。<br>　　3. <a href=\"http://markdownpad.com/\" title=\"markdown Editor for Windows\" target=\"_blank\" rel=\"external\">MarkdownPad</a>　博客撰写工具</p>\n<p><em>开始之前先去 <a href=\"www.github.com\">github</a> 注册一个账户，并新建一个名为username.github.io的仓库，最后生成的仓库地址：<a href=\"https://github.com/username/username.github.io\" target=\"_blank\" rel=\"external\">https://github.com/username/username.github.io</a>  注：username替换为自己的用户名</em></p>\n<h1 id=\"hexo安装与配置\"><a href=\"#hexo安装与配置\" class=\"headerlink\" title=\"hexo安装与配置\"></a>hexo安装与配置</h1><p>首先在本地建立自己的博客文件夹，比如 <em>F:\\github\\hexo</em>，进入该文件夹内，右键点击<em>Git Bash Here</em>,打开<em>git for windows</em>环境，开始安装 <a href=\"https://hexo.io/zh-cn/docs/\" title=\"hexo说明\" target=\"_blank\" rel=\"external\">hexo</a>：<br></p>","more":"<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$npm</span> install hexo-<span class=\"keyword\">cli</span> -<span class=\"keyword\">g</span> <span class=\"comment\">//注: -g表示全局安装</span></div><div class=\"line\">　<span class=\"variable\">$npm</span> install hexo-server -<span class=\"keyword\">g</span> <span class=\"comment\">//注： hexo3.0之后server模块是独立的,需要单独安装</span></div></pre></td></tr></table></figure><p></p>\n<p>完成之后可以通过命令查看<em>hexo</em>是否安装成功：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">　$</span><span class=\"bash\">hexo -v</span></div></pre></td></tr></table></figure></p>\n<p><em>hexo</em>根目录下的<em>_config.yml</em>文件是全局配置文件，修改该文件实现自己的配置。具体可参考<a href=\"https://hexo.io/zh-cn/docs/\" title=\"hexo说明\" target=\"_blank\" rel=\"external\">hexo</a>官网。</p>\n<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><p>hexo常用命令可以参考hexo的帮助说明，下面列举几个常用命令：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$hexo</span> g <span class=\"regexp\">//</span>等同于hexo generate,用于生成静态文件</div><div class=\"line\">　<span class=\"variable\">$hexo</span> s <span class=\"regexp\">//</span>等同于hexo server,用于启动本地服务器，预览网页</div><div class=\"line\">　<span class=\"variable\">$hexo</span> d <span class=\"regexp\">//</span>等同于hexo deploy,用于部署文件到github</div></pre></td></tr></table></figure></p>\n<h2 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h2><p>在自己的博客文件夹下<em>F:\\github\\hexo</em>,执行命令：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$hexo</span> init <span class=\"regexp\">//</span>初始化，自动下载搭建网站所需的所有文件</div><div class=\"line\">　<span class=\"variable\">$npm</span> install <span class=\"regexp\">//</span>安装依赖包</div><div class=\"line\">　<span class=\"variable\">$hexo</span> g <span class=\"regexp\">//</span>产生静态文件</div><div class=\"line\">　<span class=\"variable\">$hexo</span> s <span class=\"regexp\">//</span>启动本地服务器，开启预览功能</div></pre></td></tr></table></figure></p>\n<p>这个时候在浏览器输入localhost:4000即可查看到生成的静态网页：<img src=\"/2017/05/07/hexo-blog/hello-world.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"部署到github\"><a href=\"#部署到github\" class=\"headerlink\" title=\"部署到github\"></a>部署到github</h2><p>在hexo根目录下找到配置文件_config.yml，使用<a href=\"http://markdownpad.com/\" title=\"markdown Editor for Windows\" target=\"_blank\" rel=\"external\">MarkdownPad</a> 打开，编辑最后的deploy字段，将自己的github仓库地址输入进去：<br>　　<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"attribute\">deploy</span>:</div><div class=\"line\">　　　<span class=\"attribute\">type</span>: git <span class=\"comment\">//注意冒号':'后面的空格一定要有</span></div><div class=\"line\">　　　<span class=\"attribute\">repository</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/username/username.github.io.git</span></div><div class=\"line\">　　　<span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置SSH-Key\"><a href=\"#配置SSH-Key\" class=\"headerlink\" title=\"配置SSH Key\"></a>配置SSH Key</h3><p>在桌面空白处鼠标右键选择<em>Git Bash Here</em>,输入以下命令配置SSH Key:<br>　　<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></div></pre></td></tr></table></figure></p>\n<p>引号里面的内容输入邮箱地址，然后回车，会提示文件保存的路径，这时候按回车键确认，然后会提示你输入密码，然后会确认输入一次，在<em>c:/user/username/.ssh/</em>文件夹内看到生成了两个文件，一个是id_rsa，另一个是id_rsa.pub，打开id_rsa.pub然后选中里面的全部内容，复制下来。登录<a href=\"https://github.com/login\" target=\"_blank\" rel=\"external\">github</a>,点击<em>setting</em>,左边有一个<em>SSH and GPG keys</em>选项，进入<em>New SSH</em>选项，<em>title</em>随意，将之前复制的内容粘贴到key里面去。回到<em>Git bash</em>命令行，输入以下命令验证:<br>　　<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh -T git<span class=\"symbol\">@github</span>.com</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置用户名和密码\"><a href=\"#配置用户名和密码\" class=\"headerlink\" title=\"配置用户名和密码\"></a>配置用户名和密码</h3><p>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"your username\"</span>  </div><div class=\"line\"><span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"your_email@youremail.com\"</span></div></pre></td></tr></table></figure></p>\n<p>重新生成一下静态文件：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$hexo</span> clean <span class=\"regexp\">//</span>清除缓存文件db.json和已生成的静态文件public</div><div class=\"line\">　<span class=\"variable\">$hexo</span> g <span class=\"regexp\">//</span>产生静态文件</div><div class=\"line\">　<span class=\"variable\">$hexo</span> d <span class=\"regexp\">//</span>部署到github</div></pre></td></tr></table></figure></p>\n<p>在运行<em>hexo d</em>之前需要安装git部署工具<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">　$</span><span class=\"bash\">npm install hexo-deployer-git -g</span></div></pre></td></tr></table></figure></p>\n<p>第一次执行<em>hexo d</em>会弹出对话框提示输入github的用户名和密码。此时在浏览器输入：<br><em><a href=\"https://github.com/username/username.github.io\" target=\"_blank\" rel=\"external\">https://github.com/username/username.github.io</a></em>即可看到自己的博客已经搭建成功。<br>注: username替换为自己的用户名.</p>\n<h1 id=\"nexT主题\"><a href=\"#nexT主题\" class=\"headerlink\" title=\"nexT主题\"></a>nexT主题</h1><p>hexo安装完成后，默认的主题是landscape，保存在hexo/themes/文件夹下。<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">nexT</a> 主题需要自行下载。在博客文件目录下F:\\github\\hexo右键单击Git Bash Here，输入命令:<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$git</span> clone https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/iissnan/</span>hexo-theme-<span class=\"keyword\">next</span>.git themes<span class=\"regexp\">/nexT</span></div></pre></td></tr></table></figure></p>\n<p>下载后的nexT主题会保存在themes目录下。修改hexo根目录下的配置文件_config.yml使主题生效:<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">　#</span><span class=\"bash\"> Extensions</span></div><div class=\"line\"><span class=\"meta\">　#</span><span class=\"bash\"><span class=\"comment\"># Plugins: https://hexo.io/plugins/</span></span></div><div class=\"line\"><span class=\"meta\">　#</span><span class=\"bash\"><span class=\"comment\"># Themes: https://hexo.io/themes/</span></span></div><div class=\"line\">　theme: nexT</div></pre></td></tr></table></figure></p>\n<p>接下来选择nexT的Scheme，打开nexT的配置文件themes/nexT/_config.yml中，修改:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"meta\"># Schemes</span></div><div class=\"line\">　<span class=\"meta\">#scheme: Muse <span class=\"comment\">//默认Scheme，黑白主调，大量留白</span></span></div><div class=\"line\">　<span class=\"meta\">#scheme: Mist <span class=\"comment\">//紧凑版本，整洁有序</span></span></div><div class=\"line\"><span class=\"symbol\">　scheme:</span> Pisces <span class=\"comment\">//双栏显示，清新</span></div></pre></td></tr></table></figure></p>\n<p>更多的设置请参考: <a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">nexT</a></p>\n<h2 id=\"设置语言\"><a href=\"#设置语言\" class=\"headerlink\" title=\"设置语言\"></a>设置语言</h2><p>打开hexo的配置文件F:\\github\\hexo_config.yml，修改:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">　language:</span> zh-Hans <span class=\"comment\">//中文汉字</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"访问量统计\"><a href=\"#访问量统计\" class=\"headerlink\" title=\"访问量统计\"></a>访问量统计</h1><h3 id=\"文章阅读量统计\"><a href=\"#文章阅读量统计\" class=\"headerlink\" title=\"文章阅读量统计\"></a>文章阅读量统计</h3><p>使用 <a href=\"https://leancloud.cn\" target=\"_blank\" rel=\"external\">leancloud</a> 实现文章阅读次数统计。注册完成后，点击访问控制台，选择创建新应用:<img src=\"/2017/05/07/hexo-blog/leancloudc.jpg\" alt=\"Alt-text\"></p>\n<p>创建名为Counter的class。之后找到该应用的AppID、AppKey，将这两个值写入到nexT的主题配置文件中_config.yml:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"meta\"># Show number of visitors to each article.</span></div><div class=\"line\">　<span class=\"meta\"># You can visit https:<span class=\"comment\">//leancloud.cn get AppID and AppKey.</span></span></div><div class=\"line\"><span class=\"symbol\">　leancloud_visitors:</span></div><div class=\"line\"><span class=\"symbol\">  　　enable:</span> true</div><div class=\"line\"><span class=\"symbol\">  　　app_id:</span> <span class=\"meta\">#&lt;app_id&gt; <span class=\"comment\">//复制刚才创建的应用的AppID</span></span></div><div class=\"line\"><span class=\"symbol\">  　　app_key:</span> <span class=\"meta\">#&lt;app_key&gt; <span class=\"comment\">//复制刚才创建的应用的AppKey</span></span></div></pre></td></tr></table></figure></p>\n<p>为了安全，将自己的域名加入安全中心-&gt;web安全域名中，防止恶意修改。完成后部署网站，看效果是不是已经有了文章阅读量显示了。</p>\n<h3 id=\"站点访问统计\"><a href=\"#站点访问统计\" class=\"headerlink\" title=\"站点访问统计\"></a>站点访问统计</h3><p>使用 <a href=\"http://ibruce.info/2015/04/04/busuanzi/\" target=\"_blank\" rel=\"external\">不蒜子</a> 脚本实现。<br>在themes\\nexT\\layout_partials目录下找到文件footer.swig，在文件的头部添加:<br>　　<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">　<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>　　</p>\n<p>　　\n　　</p>\n<p>　　</p>"},{"title":"linux串口数据不连续问题","date":"2017-05-17T06:51:26.000Z","comments":1,"_content":"# 前言\n*linux* 下编写串口应用程序，无论是中断模式，还是 *select/poll* 模式，每次接收到的数据不一定是自己希望得到的数据。比如数据帧长度为40，有可能先接收到18个字节，接着接收到了12个字节，最后接收到了10个字节。不管怎么折腾，一帧数据总是不能一次接收完全。查阅相关资料，貌似是串口芯片缓存所致。串口芯片缓存满或着超时时间到都会触发读或写中断，这个说法是否真的如此，暂且不管，能不能用一种机制保证一次读到的是一帧数据呢？只有自己编写协议，先把数据分多次接收过来满足一个有效的帧长度之后，再进行处理。\n<!--more-->\n# 实现\n关于 *linux* 串口编程有很多参考例子：[serial-how-to](http://www.faqs.org/docs/Linux-HOWTO/Serial-Programming-HOWTO.html) [serial-Programming-Guide-For-POSIX-OS](http://digilander.libero.it/robang/rubrica/serial.htm)。其他读者可自行 [google](www.google.com)。为避免重复造轮子，本次采用 [libcssl](https://github.com/mwheels/libcssl),也可以从 [sourceforge](https://sourceforge.net/projects/cssl/) 下载它是基于事件驱动的异步串口驱动库，用该库测试时，即出现上面的现象，一帧数据总是分多次接收。为了避免该现象，修改代码如下：\n　　```\n static void callback(int id,\n               uint8_t *buf,\n               int length)\n  {\n      int i;\n      //printf(\"length:%d\\n\",length);\n      //printf(\"length:%d\\n\",length);\n      //如果数据帧不是一次接收到的\n      //则进行下面的处理，数据包的长度为FRAMELENGTH\n      for(i=0;i<length;i++) {\n          data[i+pos] = buf[i];\n          //printf(\"0x%02x \",buf[i]);\n      }\n      //记录位置\n      pos += length;\n      //收到既定的一帧\n      if(pos >= FRAMELENGTH){\n          pos = 0;\n          data_already = 1;\n      }\n      //进行处理\n      if(data_already == 1){//\n \n          for(i=0;i<FRAMELENGTH;i++)\n              printf(\"0x%02x \",data[i]);\n          memset(data,0,FRAMELENGTH);\n          data_already = 0 ;//数据包准备好信号置零\n          printf(\"\\n\");\n      }\n \n \n      //printf(\"\\n\");\n      //fflush(stdout);\n  }\n　　```\n在中断回调函数中，每次记录收到字节的个数 *pos* ，直到满足既定帧长度。测试结果可正常接收既定的一帧数据包，测试时可自行指定帧长度。\n本次测试一帧数据长度为32字节：\n![](linux-serial/libcssl.jpg)\n完整代码已 *push* 到 [github](https://github.com/StevenShiChina/libcssl-cpp)，欢迎下载测试交流。\n","source":"_posts/linux-serial.md","raw":"---\ntitle: linux串口数据不连续问题\ndate: 2017-05-17 14:51:26\ncategories: Linux\ntags:  Linux serial\ncomments: true\n---\n# 前言\n*linux* 下编写串口应用程序，无论是中断模式，还是 *select/poll* 模式，每次接收到的数据不一定是自己希望得到的数据。比如数据帧长度为40，有可能先接收到18个字节，接着接收到了12个字节，最后接收到了10个字节。不管怎么折腾，一帧数据总是不能一次接收完全。查阅相关资料，貌似是串口芯片缓存所致。串口芯片缓存满或着超时时间到都会触发读或写中断，这个说法是否真的如此，暂且不管，能不能用一种机制保证一次读到的是一帧数据呢？只有自己编写协议，先把数据分多次接收过来满足一个有效的帧长度之后，再进行处理。\n<!--more-->\n# 实现\n关于 *linux* 串口编程有很多参考例子：[serial-how-to](http://www.faqs.org/docs/Linux-HOWTO/Serial-Programming-HOWTO.html) [serial-Programming-Guide-For-POSIX-OS](http://digilander.libero.it/robang/rubrica/serial.htm)。其他读者可自行 [google](www.google.com)。为避免重复造轮子，本次采用 [libcssl](https://github.com/mwheels/libcssl),也可以从 [sourceforge](https://sourceforge.net/projects/cssl/) 下载它是基于事件驱动的异步串口驱动库，用该库测试时，即出现上面的现象，一帧数据总是分多次接收。为了避免该现象，修改代码如下：\n　　```\n static void callback(int id,\n               uint8_t *buf,\n               int length)\n  {\n      int i;\n      //printf(\"length:%d\\n\",length);\n      //printf(\"length:%d\\n\",length);\n      //如果数据帧不是一次接收到的\n      //则进行下面的处理，数据包的长度为FRAMELENGTH\n      for(i=0;i<length;i++) {\n          data[i+pos] = buf[i];\n          //printf(\"0x%02x \",buf[i]);\n      }\n      //记录位置\n      pos += length;\n      //收到既定的一帧\n      if(pos >= FRAMELENGTH){\n          pos = 0;\n          data_already = 1;\n      }\n      //进行处理\n      if(data_already == 1){//\n \n          for(i=0;i<FRAMELENGTH;i++)\n              printf(\"0x%02x \",data[i]);\n          memset(data,0,FRAMELENGTH);\n          data_already = 0 ;//数据包准备好信号置零\n          printf(\"\\n\");\n      }\n \n \n      //printf(\"\\n\");\n      //fflush(stdout);\n  }\n　　```\n在中断回调函数中，每次记录收到字节的个数 *pos* ，直到满足既定帧长度。测试结果可正常接收既定的一帧数据包，测试时可自行指定帧长度。\n本次测试一帧数据长度为32字节：\n![](linux-serial/libcssl.jpg)\n完整代码已 *push* 到 [github](https://github.com/StevenShiChina/libcssl-cpp)，欢迎下载测试交流。\n","slug":"linux-serial","published":1,"updated":"2017-05-19T09:11:08.071Z","layout":"post","photos":[],"link":"","_id":"cj4hne526000fw8in622soo1h","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><em>linux</em> 下编写串口应用程序，无论是中断模式，还是 <em>select/poll</em> 模式，每次接收到的数据不一定是自己希望得到的数据。比如数据帧长度为40，有可能先接收到18个字节，接着接收到了12个字节，最后接收到了10个字节。不管怎么折腾，一帧数据总是不能一次接收完全。查阅相关资料，貌似是串口芯片缓存所致。串口芯片缓存满或着超时时间到都会触发读或写中断，这个说法是否真的如此，暂且不管，能不能用一种机制保证一次读到的是一帧数据呢？只有自己编写协议，先把数据分多次接收过来满足一个有效的帧长度之后，再进行处理。<br><a id=\"more\"></a></p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>关于 <em>linux</em> 串口编程有很多参考例子：<a href=\"http://www.faqs.org/docs/Linux-HOWTO/Serial-Programming-HOWTO.html\" target=\"_blank\" rel=\"external\">serial-how-to</a> <a href=\"http://digilander.libero.it/robang/rubrica/serial.htm\" target=\"_blank\" rel=\"external\">serial-Programming-Guide-For-POSIX-OS</a>。其他读者可自行 <a href=\"www.google.com\">google</a>。为避免重复造轮子，本次采用 <a href=\"https://github.com/mwheels/libcssl\" target=\"_blank\" rel=\"external\">libcssl</a>,也可以从 <a href=\"https://sourceforge.net/projects/cssl/\" target=\"_blank\" rel=\"external\">sourceforge</a> 下载它是基于事件驱动的异步串口驱动库，用该库测试时，即出现上面的现象，一帧数据总是分多次接收。为了避免该现象，修改代码如下：<br>　　<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">static void callback(<span class=\"keyword\">int</span> id,</div><div class=\"line\">              uint8_t *buf,</div><div class=\"line\">              <span class=\"keyword\">int</span> <span class=\"keyword\">length</span>)</div><div class=\"line\"> &#123;</div><div class=\"line\">     <span class=\"keyword\">int</span> i;</div><div class=\"line\">     <span class=\"regexp\">//printf</span>(<span class=\"string\">\"length:%d\\n\"</span>,<span class=\"keyword\">length</span>);</div><div class=\"line\">     <span class=\"regexp\">//printf</span>(<span class=\"string\">\"length:%d\\n\"</span>,<span class=\"keyword\">length</span>);</div><div class=\"line\">     <span class=\"regexp\">//</span>如果数据帧不是一次接收到的</div><div class=\"line\">     //则进行下面的处理，数据包的长度为FRAMELENGTH</div><div class=\"line\">     <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"keyword\">length</span>;i++) &#123;</div><div class=\"line\">         data[i+<span class=\"keyword\">pos</span>] = buf[i];</div><div class=\"line\">         <span class=\"regexp\">//printf</span>(<span class=\"string\">\"0x%02x \"</span>,buf[i]);</div><div class=\"line\">     &#125;</div><div class=\"line\">     //记录位置</div><div class=\"line\">     <span class=\"keyword\">pos</span> += <span class=\"keyword\">length</span>;</div><div class=\"line\">     <span class=\"regexp\">//</span>收到既定的一帧</div><div class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"keyword\">pos</span> &gt;= FRAMELENGTH)&#123;</div><div class=\"line\">         <span class=\"keyword\">pos</span> = <span class=\"number\">0</span>;</div><div class=\"line\">         data_already = <span class=\"number\">1</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     //进行处理</div><div class=\"line\">     <span class=\"keyword\">if</span>(data_already == <span class=\"number\">1</span>)&#123;<span class=\"regexp\">//</span></div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;FRAMELENGTH;i++)</div><div class=\"line\">             <span class=\"keyword\">printf</span>(<span class=\"string\">\"0x%02x \"</span>,data[i]);</div><div class=\"line\">         memset(data,<span class=\"number\">0</span>,FRAMELENGTH);</div><div class=\"line\">         data_already = <span class=\"number\">0</span> ;<span class=\"regexp\">//</span>数据包准备好信号置零</div><div class=\"line\">         <span class=\"keyword\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     //<span class=\"keyword\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">     <span class=\"regexp\">//fflush</span>(stdout);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>在中断回调函数中，每次记录收到字节的个数 <em>pos</em> ，直到满足既定帧长度。测试结果可正常接收既定的一帧数据包，测试时可自行指定帧长度。<br>本次测试一帧数据长度为32字节：<br><img src=\"/2017/05/17/linux-serial/libcssl.jpg\" alt=\"\"><br>完整代码已 <em>push</em> 到 <a href=\"https://github.com/StevenShiChina/libcssl-cpp\" target=\"_blank\" rel=\"external\">github</a>，欢迎下载测试交流。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><em>linux</em> 下编写串口应用程序，无论是中断模式，还是 <em>select/poll</em> 模式，每次接收到的数据不一定是自己希望得到的数据。比如数据帧长度为40，有可能先接收到18个字节，接着接收到了12个字节，最后接收到了10个字节。不管怎么折腾，一帧数据总是不能一次接收完全。查阅相关资料，貌似是串口芯片缓存所致。串口芯片缓存满或着超时时间到都会触发读或写中断，这个说法是否真的如此，暂且不管，能不能用一种机制保证一次读到的是一帧数据呢？只有自己编写协议，先把数据分多次接收过来满足一个有效的帧长度之后，再进行处理。<br></p>","more":"<p></p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>关于 <em>linux</em> 串口编程有很多参考例子：<a href=\"http://www.faqs.org/docs/Linux-HOWTO/Serial-Programming-HOWTO.html\" target=\"_blank\" rel=\"external\">serial-how-to</a> <a href=\"http://digilander.libero.it/robang/rubrica/serial.htm\" target=\"_blank\" rel=\"external\">serial-Programming-Guide-For-POSIX-OS</a>。其他读者可自行 <a href=\"www.google.com\">google</a>。为避免重复造轮子，本次采用 <a href=\"https://github.com/mwheels/libcssl\" target=\"_blank\" rel=\"external\">libcssl</a>,也可以从 <a href=\"https://sourceforge.net/projects/cssl/\" target=\"_blank\" rel=\"external\">sourceforge</a> 下载它是基于事件驱动的异步串口驱动库，用该库测试时，即出现上面的现象，一帧数据总是分多次接收。为了避免该现象，修改代码如下：<br>　　<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">static void callback(<span class=\"keyword\">int</span> id,</div><div class=\"line\">              uint8_t *buf,</div><div class=\"line\">              <span class=\"keyword\">int</span> <span class=\"keyword\">length</span>)</div><div class=\"line\"> &#123;</div><div class=\"line\">     <span class=\"keyword\">int</span> i;</div><div class=\"line\">     <span class=\"regexp\">//printf</span>(<span class=\"string\">\"length:%d\\n\"</span>,<span class=\"keyword\">length</span>);</div><div class=\"line\">     <span class=\"regexp\">//printf</span>(<span class=\"string\">\"length:%d\\n\"</span>,<span class=\"keyword\">length</span>);</div><div class=\"line\">     <span class=\"regexp\">//</span>如果数据帧不是一次接收到的</div><div class=\"line\">     //则进行下面的处理，数据包的长度为FRAMELENGTH</div><div class=\"line\">     <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"keyword\">length</span>;i++) &#123;</div><div class=\"line\">         data[i+<span class=\"keyword\">pos</span>] = buf[i];</div><div class=\"line\">         <span class=\"regexp\">//printf</span>(<span class=\"string\">\"0x%02x \"</span>,buf[i]);</div><div class=\"line\">     &#125;</div><div class=\"line\">     //记录位置</div><div class=\"line\">     <span class=\"keyword\">pos</span> += <span class=\"keyword\">length</span>;</div><div class=\"line\">     <span class=\"regexp\">//</span>收到既定的一帧</div><div class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"keyword\">pos</span> &gt;= FRAMELENGTH)&#123;</div><div class=\"line\">         <span class=\"keyword\">pos</span> = <span class=\"number\">0</span>;</div><div class=\"line\">         data_already = <span class=\"number\">1</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     //进行处理</div><div class=\"line\">     <span class=\"keyword\">if</span>(data_already == <span class=\"number\">1</span>)&#123;<span class=\"regexp\">//</span></div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;FRAMELENGTH;i++)</div><div class=\"line\">             <span class=\"keyword\">printf</span>(<span class=\"string\">\"0x%02x \"</span>,data[i]);</div><div class=\"line\">         memset(data,<span class=\"number\">0</span>,FRAMELENGTH);</div><div class=\"line\">         data_already = <span class=\"number\">0</span> ;<span class=\"regexp\">//</span>数据包准备好信号置零</div><div class=\"line\">         <span class=\"keyword\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     //<span class=\"keyword\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">     <span class=\"regexp\">//fflush</span>(stdout);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>在中断回调函数中，每次记录收到字节的个数 <em>pos</em> ，直到满足既定帧长度。测试结果可正常接收既定的一帧数据包，测试时可自行指定帧长度。<br>本次测试一帧数据长度为32字节：<br><img src=\"/2017/05/17/linux-serial/libcssl.jpg\" alt=\"\"><br>完整代码已 <em>push</em> 到 <a href=\"https://github.com/StevenShiChina/libcssl-cpp\" target=\"_blank\" rel=\"external\">github</a>，欢迎下载测试交流。</p>"},{"title":"三轮全向移动底盘运动学解析","date":"2017-06-28T05:44:18.000Z","comments":1,"_content":"\n三轮全向移动底盘因其良好的运动性并且结构简单，近年来备受欢迎。三个轮子互相间隔120°，每个全向轮由若干个小滚轮组成，各个滚轮的母线组成一个完整的圆。机器人既可以沿轮面的切线方向移动，也可以沿轮子的轴线方向移动，这两种运动的组合即可以实现平面内任意方向的运动。\n\n![](omniwheel-kinematical-analysis/omnidiagram.jpg)\n\n<!--more-->\n# 运动学分析\n\n![](omniwheel-kinematical-analysis/omni.jpg)\n为便于运动学分析，我们以理想情况为基础，三个轮子相对于车体的中轴线对称，且物理尺寸重量等完全一致；上层负载均衡，机器人的重心与三个轮子转动轴线的交点重合；三个轮体与地面摩擦力足够大，不会发生打滑现象；机器人中心到三个全向轮的距离相等。\n定义绝对坐标系 *XOY*，机器人自身坐标系 *X'O'Y'*。机器人的姿态角为 *θ*，即机器人自身坐标相对于绝对坐标的旋转角度。机器人自身旋转的角速度设为 *W*。 *L* 为三个轮子相对于机器人中心的距离，$V_A$,$V_B$,$V_C$ 分别表示三个轮子沿驱动方向的速度；角度 *ψ* 为 轮子与机器人坐标系 *X* 轴的夹角，这个夹角我们可以算出为 60°。我们假定机器人在任意时刻的速度为 $V = [V_x,V_y,W]$,其中 V_x 和 V_y 分别为机器人在自身坐标系下的  *X* 轴 *Y* 轴方向的速度，*W* 为机器人运动的角速度，假定顺时针方向为正方向。那么可得出机器人运动学方程：\n$ V_A= V_x + L W $\n$ V_B= -V_x cosψ + V_y sinψ + L W $\n$ V_C= -V_x cosψ - V_y sinψ + L W $\n写成矩阵形式为：\n$\\left[\n\\begin{matrix}\nV_A \\\\\\\\\nV_B \\\\\\\\\nV_C \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n1 & 0 & L \\\\\\\\\n-cosψ & sinψ & L \\\\\\\\\n-cosψ & -sinψ & L\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nV_x \\\\\\\\\nV_y \\\\\\\\\nW \\\\\\\\\n\\end{matrix}\n\\right] $\n车轮的线速度还可以表示为：\n$ V_A = Rω_A $\n$ V_B = Rω_B $\n$ V_C = Rω_C $\n未完 待续...\n\n ","source":"_posts/omniwheel-kinematical-analysis.md","raw":"---\ntitle: 三轮全向移动底盘运动学解析\ndate: 2017-06-28 13:44:18\ncategories: ROS\ntags: omniwheel\ncomments: true\n---\n\n三轮全向移动底盘因其良好的运动性并且结构简单，近年来备受欢迎。三个轮子互相间隔120°，每个全向轮由若干个小滚轮组成，各个滚轮的母线组成一个完整的圆。机器人既可以沿轮面的切线方向移动，也可以沿轮子的轴线方向移动，这两种运动的组合即可以实现平面内任意方向的运动。\n\n![](omniwheel-kinematical-analysis/omnidiagram.jpg)\n\n<!--more-->\n# 运动学分析\n\n![](omniwheel-kinematical-analysis/omni.jpg)\n为便于运动学分析，我们以理想情况为基础，三个轮子相对于车体的中轴线对称，且物理尺寸重量等完全一致；上层负载均衡，机器人的重心与三个轮子转动轴线的交点重合；三个轮体与地面摩擦力足够大，不会发生打滑现象；机器人中心到三个全向轮的距离相等。\n定义绝对坐标系 *XOY*，机器人自身坐标系 *X'O'Y'*。机器人的姿态角为 *θ*，即机器人自身坐标相对于绝对坐标的旋转角度。机器人自身旋转的角速度设为 *W*。 *L* 为三个轮子相对于机器人中心的距离，$V_A$,$V_B$,$V_C$ 分别表示三个轮子沿驱动方向的速度；角度 *ψ* 为 轮子与机器人坐标系 *X* 轴的夹角，这个夹角我们可以算出为 60°。我们假定机器人在任意时刻的速度为 $V = [V_x,V_y,W]$,其中 V_x 和 V_y 分别为机器人在自身坐标系下的  *X* 轴 *Y* 轴方向的速度，*W* 为机器人运动的角速度，假定顺时针方向为正方向。那么可得出机器人运动学方程：\n$ V_A= V_x + L W $\n$ V_B= -V_x cosψ + V_y sinψ + L W $\n$ V_C= -V_x cosψ - V_y sinψ + L W $\n写成矩阵形式为：\n$\\left[\n\\begin{matrix}\nV_A \\\\\\\\\nV_B \\\\\\\\\nV_C \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n1 & 0 & L \\\\\\\\\n-cosψ & sinψ & L \\\\\\\\\n-cosψ & -sinψ & L\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nV_x \\\\\\\\\nV_y \\\\\\\\\nW \\\\\\\\\n\\end{matrix}\n\\right] $\n车轮的线速度还可以表示为：\n$ V_A = Rω_A $\n$ V_B = Rω_B $\n$ V_C = Rω_C $\n未完 待续...\n\n ","slug":"omniwheel-kinematical-analysis","published":1,"updated":"2017-06-28T08:48:57.745Z","layout":"post","photos":[],"link":"","_id":"cj4hne528000iw8invzrjkclv","content":"<p>三轮全向移动底盘因其良好的运动性并且结构简单，近年来备受欢迎。三个轮子互相间隔120°，每个全向轮由若干个小滚轮组成，各个滚轮的母线组成一个完整的圆。机器人既可以沿轮面的切线方向移动，也可以沿轮子的轴线方向移动，这两种运动的组合即可以实现平面内任意方向的运动。</p>\n<p><img src=\"/2017/06/28/omniwheel-kinematical-analysis/omnidiagram.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h1 id=\"运动学分析\"><a href=\"#运动学分析\" class=\"headerlink\" title=\"运动学分析\"></a>运动学分析</h1><p><img src=\"/2017/06/28/omniwheel-kinematical-analysis/omni.jpg\" alt=\"\"><br>为便于运动学分析，我们以理想情况为基础，三个轮子相对于车体的中轴线对称，且物理尺寸重量等完全一致；上层负载均衡，机器人的重心与三个轮子转动轴线的交点重合；三个轮体与地面摩擦力足够大，不会发生打滑现象；机器人中心到三个全向轮的距离相等。<br>定义绝对坐标系 <em>XOY</em>，机器人自身坐标系 <em>X’O’Y’</em>。机器人的姿态角为 <em>θ</em>，即机器人自身坐标相对于绝对坐标的旋转角度。机器人自身旋转的角速度设为 <em>W</em>。 <em>L</em> 为三个轮子相对于机器人中心的距离，$V_A$,$V_B$,$V_C$ 分别表示三个轮子沿驱动方向的速度；角度 <em>ψ</em> 为 轮子与机器人坐标系 <em>X</em> 轴的夹角，这个夹角我们可以算出为 60°。我们假定机器人在任意时刻的速度为 $V = [V_x,V_y,W]$,其中 V_x 和 V_y 分别为机器人在自身坐标系下的  <em>X</em> 轴 <em>Y</em> 轴方向的速度，<em>W</em> 为机器人运动的角速度，假定顺时针方向为正方向。那么可得出机器人运动学方程：<br>$ V_A= V_x + L W $<br>$ V_B= -V_x cosψ + V_y sinψ + L W $<br>$ V_C= -V_x cosψ - V_y sinψ + L W $<br>写成矩阵形式为：<br>$\\left[<br>\\begin{matrix}<br>V_A \\\\<br>V_B \\\\<br>V_C \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>1 &amp; 0 &amp; L \\\\<br>-cosψ &amp; sinψ &amp; L \\\\<br>-cosψ &amp; -sinψ &amp; L<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>V_x \\\\<br>V_y \\\\<br>W \\\\<br>\\end{matrix}<br>\\right] $<br>车轮的线速度还可以表示为：<br>$ V_A = Rω_A $<br>$ V_B = Rω_B $<br>$ V_C = Rω_C $<br>未完 待续…</p>\n","site":{"data":{}},"excerpt":"<p>三轮全向移动底盘因其良好的运动性并且结构简单，近年来备受欢迎。三个轮子互相间隔120°，每个全向轮由若干个小滚轮组成，各个滚轮的母线组成一个完整的圆。机器人既可以沿轮面的切线方向移动，也可以沿轮子的轴线方向移动，这两种运动的组合即可以实现平面内任意方向的运动。</p>\n<p><img src=\"/2017/06/28/omniwheel-kinematical-analysis/omnidiagram.jpg\" alt=\"\"></p>","more":"<h1 id=\"运动学分析\"><a href=\"#运动学分析\" class=\"headerlink\" title=\"运动学分析\"></a>运动学分析</h1><p><img src=\"/2017/06/28/omniwheel-kinematical-analysis/omni.jpg\" alt=\"\"><br>为便于运动学分析，我们以理想情况为基础，三个轮子相对于车体的中轴线对称，且物理尺寸重量等完全一致；上层负载均衡，机器人的重心与三个轮子转动轴线的交点重合；三个轮体与地面摩擦力足够大，不会发生打滑现象；机器人中心到三个全向轮的距离相等。<br>定义绝对坐标系 <em>XOY</em>，机器人自身坐标系 <em>X’O’Y’</em>。机器人的姿态角为 <em>θ</em>，即机器人自身坐标相对于绝对坐标的旋转角度。机器人自身旋转的角速度设为 <em>W</em>。 <em>L</em> 为三个轮子相对于机器人中心的距离，$V_A$,$V_B$,$V_C$ 分别表示三个轮子沿驱动方向的速度；角度 <em>ψ</em> 为 轮子与机器人坐标系 <em>X</em> 轴的夹角，这个夹角我们可以算出为 60°。我们假定机器人在任意时刻的速度为 $V = [V_x,V_y,W]$,其中 V_x 和 V_y 分别为机器人在自身坐标系下的  <em>X</em> 轴 <em>Y</em> 轴方向的速度，<em>W</em> 为机器人运动的角速度，假定顺时针方向为正方向。那么可得出机器人运动学方程：<br>$ V_A= V_x + L W $<br>$ V_B= -V_x cosψ + V_y sinψ + L W $<br>$ V_C= -V_x cosψ - V_y sinψ + L W $<br>写成矩阵形式为：<br>$\\left[<br>\\begin{matrix}<br>V_A \\\\<br>V_B \\\\<br>V_C \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>1 &amp; 0 &amp; L \\\\<br>-cosψ &amp; sinψ &amp; L \\\\<br>-cosψ &amp; -sinψ &amp; L<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>V_x \\\\<br>V_y \\\\<br>W \\\\<br>\\end{matrix}<br>\\right] $<br>车轮的线速度还可以表示为：<br>$ V_A = Rω_A $<br>$ V_B = Rω_B $<br>$ V_C = Rω_C $<br>未完 待续…</p>"},{"title":"hexo 博客备份","date":"2017-05-07T13:25:07.000Z","comments":1,"_content":"# 前言\n在公司电脑中做好了hexo博客撰写，也将文章推送到了github并且发布了;回到家中在自己的电脑上想给自己的博客添加一篇文章，按照hexo建站流程，又建了一遍，但写完文章后发现，之前在公司写得博客被覆盖了，想哭的感觉有木有。当使用不同的电脑撰写博客时，会涉及到博客资源的备份和更新，如果简单的拷贝会比较麻烦，当然也可以tar整个hexo工作目录;单纯的push到github会有部分文件不全,由于主题文件目录也是git管理方式，当push后，主题默认是不会被推送到github上的。所以，必须稍作修改，才能正确的备份。\n# 解决方案\n在自己的github仓库中默认有master分支，比如username目录下的：\nusername.github.io仓库。使用master分支保存自己的hexo博客静态文件，新建hexo分支用于保存hexo资源文件。每次撰写完博客后，顺便将自己的hexo工作目录push到远程仓库的hexo分支;当在另外一台电脑上写博客时，先获取远程仓库的分支，之后就可以编辑了\n<!--more-->\n## 推送到远程\n进入到自己的博客工作目录比如*github\\hexo*,先查看远程主机\n　```\n$git remote -v\n　```\n如果有输出，查看下是否是自己远程仓库的名字，如果不是username.github.io则删除：\n　　```\n$git remote rm origin\n　　```\n添加远程主机：\n　　```\n $git remote add origin https://github.com/yourusername/yourusername.github.io.git\n $git init \n　　```\n删除掉*theme\\nexT*目录下的*.git*文件夹，因为我们要将主题配置一同推送。如果删除后还是不能推送nexT主题，就将nexT改个名字，但要注意在hexo的_config.yml中对应的主题名字与这个文件夹名字要保持一致。\n　　```\n $git add --all //add之后可以用*git status*查看刚刚改过的文件状态\n $git commit -m \"backup hexo\"\n $git push origin hexo //将本地文件push到远程仓库的hexo分支，没有则建立该分支\n　　```\n在远程仓库查看，username.github.io的仓库下已经有了两个分支，一个叫master,一个叫hexo。但发现有些不想推送的文件也被推送到了远程，比如hexo根目录下的public文件夹，这个文件夹是生成的博客静态文件，它是在博客部署后被推送到：username.github.io的master分支的，我们这里并不需要保存该文件夹。编辑hexo根目录下的.gitignore文件，添加不需要推送的文件或文件夹：\n　　```\n  .DS_Store\n  Thumbs.db\n  *.log\n  node_modules/\n  public/\n  .deploy*/\n　　```\n由于之前推送过，可能.gitignore没有起作用，.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。这个时候就需要删除缓存改变未被追踪状态，重新提交：\n　　```\n $git rm -r --cached .\n $git add --all\n $git commit -m \"update .gitignore\"\n　　```\n 之后再次推送即可。\n## 获取远程分支\n前面已经将写好的博客资源文件推送到远程仓库username.github.io的分支hexo,无论在哪里都可以获取远程分支至本地进行博客撰写，并且保持文章的更新状态。假如我在家中的电脑的目录*F:\\github\\home*下想撰写一篇新博客文章，首先要做的是进入到该目录下，进行hexo环境的安装，参考我的前一篇博客。\n　　```\n $npm install hexo-cli --save //在新电脑上配置hexo\n $npm install hexo --save\n $npm install hexo-server --save\n $npm install hexo-generator-search --save\n $npm install hexo-deployer-git --save\n　　```\n当环境建立好后，运行*hexo init*命令：\n　　```\n $hexo init\n　　```\n然后删除*hexo init*命令产生的其它文件夹，只保留生成的node_modules文件夹，建立博客需要的hexo各种命令以及依赖项都在这里:\n　　```\n $rm _config.yml db.json package.json \n $rm -rf scaffolds/ themes/ source/\n $rm .npmignore\n　　```\n之后添加远程仓库分支至本地：\n　　```\n $git init\n $git remote add origin https://github.com/yourusername/yourusername.github.io.git\n　　```\n 查看远程仓库所有分支：\n　　```\n $git branch -r\n　　```\n 一般输出为：\n　　```\n *origin/HEAD -> origin/master*\n *origin/hexo*\n *origin/master*\n　　```\n此时可以看到远程仓库有两个分支，但默认的分支为master,我们需要的是hexo分支，所以需要将默认分支修改为hexo:\n![Alt text](hexo-backup/setbranch.jpg)\n\n如果不修改则需要获取分支hexo到本地：\n　　```\n $git fetch origin hexo:hexo\n　　```\n或者：\n　　```\n $git pull origin hexo\n　　```\n切换到hexo分支：\n　　```\n  $git checkout hexo //此处为hexo分支\n　　```\n此时就可以在该目录下进行博客的撰写工作了，撰写完可以将最新更新提交，并push到远程仓库的hexo分支，至此完成多个电脑同步的问题。\n当再次回到公司电脑时，进入到博客目录使用*git pull*即可同步更新。\n在写新文章之前先配置好git的用户名和邮箱：\n  ```\n *$git config --global user.name \"yourusername\" \n *$git config --global user.email \"yourusername@xxx.com\"*\n  ```\n 新电脑需要生成SSH Key，*github*允许一个用户使用多个SSH Key。如果不想使用那么多个，可以拷贝原来电脑下的SSH Key之后就可以开始新文章的撰写和发布了：\n  ```\n $git pull //获取更新\n $hexo n post \"new blog\"\n $hexo clean //清除生成的静态文件\n $hexo g //生成静态文件\n $hexo d //部署到远程\n $git add --all //添加所有文件\n $git commit -m \"add new blog\"\n $git push origin hexo //推送到远程分支hexo\n　　```\n\n 如果不小心搞乱了，或者误删了，使用命令恢复到前一个版本:\n　　```\n $git log //查看记录\n $git reset --hard HEAD^ //恢复到前一个记录\n　　```\n \n","source":"_posts/hexo-backup.md","raw":"---\ntitle: hexo 博客备份\ndate: 2017-05-07 21:25:07\ncategories: hexo\ntags: hexo\ncomments: true\n---\n# 前言\n在公司电脑中做好了hexo博客撰写，也将文章推送到了github并且发布了;回到家中在自己的电脑上想给自己的博客添加一篇文章，按照hexo建站流程，又建了一遍，但写完文章后发现，之前在公司写得博客被覆盖了，想哭的感觉有木有。当使用不同的电脑撰写博客时，会涉及到博客资源的备份和更新，如果简单的拷贝会比较麻烦，当然也可以tar整个hexo工作目录;单纯的push到github会有部分文件不全,由于主题文件目录也是git管理方式，当push后，主题默认是不会被推送到github上的。所以，必须稍作修改，才能正确的备份。\n# 解决方案\n在自己的github仓库中默认有master分支，比如username目录下的：\nusername.github.io仓库。使用master分支保存自己的hexo博客静态文件，新建hexo分支用于保存hexo资源文件。每次撰写完博客后，顺便将自己的hexo工作目录push到远程仓库的hexo分支;当在另外一台电脑上写博客时，先获取远程仓库的分支，之后就可以编辑了\n<!--more-->\n## 推送到远程\n进入到自己的博客工作目录比如*github\\hexo*,先查看远程主机\n　```\n$git remote -v\n　```\n如果有输出，查看下是否是自己远程仓库的名字，如果不是username.github.io则删除：\n　　```\n$git remote rm origin\n　　```\n添加远程主机：\n　　```\n $git remote add origin https://github.com/yourusername/yourusername.github.io.git\n $git init \n　　```\n删除掉*theme\\nexT*目录下的*.git*文件夹，因为我们要将主题配置一同推送。如果删除后还是不能推送nexT主题，就将nexT改个名字，但要注意在hexo的_config.yml中对应的主题名字与这个文件夹名字要保持一致。\n　　```\n $git add --all //add之后可以用*git status*查看刚刚改过的文件状态\n $git commit -m \"backup hexo\"\n $git push origin hexo //将本地文件push到远程仓库的hexo分支，没有则建立该分支\n　　```\n在远程仓库查看，username.github.io的仓库下已经有了两个分支，一个叫master,一个叫hexo。但发现有些不想推送的文件也被推送到了远程，比如hexo根目录下的public文件夹，这个文件夹是生成的博客静态文件，它是在博客部署后被推送到：username.github.io的master分支的，我们这里并不需要保存该文件夹。编辑hexo根目录下的.gitignore文件，添加不需要推送的文件或文件夹：\n　　```\n  .DS_Store\n  Thumbs.db\n  *.log\n  node_modules/\n  public/\n  .deploy*/\n　　```\n由于之前推送过，可能.gitignore没有起作用，.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。这个时候就需要删除缓存改变未被追踪状态，重新提交：\n　　```\n $git rm -r --cached .\n $git add --all\n $git commit -m \"update .gitignore\"\n　　```\n 之后再次推送即可。\n## 获取远程分支\n前面已经将写好的博客资源文件推送到远程仓库username.github.io的分支hexo,无论在哪里都可以获取远程分支至本地进行博客撰写，并且保持文章的更新状态。假如我在家中的电脑的目录*F:\\github\\home*下想撰写一篇新博客文章，首先要做的是进入到该目录下，进行hexo环境的安装，参考我的前一篇博客。\n　　```\n $npm install hexo-cli --save //在新电脑上配置hexo\n $npm install hexo --save\n $npm install hexo-server --save\n $npm install hexo-generator-search --save\n $npm install hexo-deployer-git --save\n　　```\n当环境建立好后，运行*hexo init*命令：\n　　```\n $hexo init\n　　```\n然后删除*hexo init*命令产生的其它文件夹，只保留生成的node_modules文件夹，建立博客需要的hexo各种命令以及依赖项都在这里:\n　　```\n $rm _config.yml db.json package.json \n $rm -rf scaffolds/ themes/ source/\n $rm .npmignore\n　　```\n之后添加远程仓库分支至本地：\n　　```\n $git init\n $git remote add origin https://github.com/yourusername/yourusername.github.io.git\n　　```\n 查看远程仓库所有分支：\n　　```\n $git branch -r\n　　```\n 一般输出为：\n　　```\n *origin/HEAD -> origin/master*\n *origin/hexo*\n *origin/master*\n　　```\n此时可以看到远程仓库有两个分支，但默认的分支为master,我们需要的是hexo分支，所以需要将默认分支修改为hexo:\n![Alt text](hexo-backup/setbranch.jpg)\n\n如果不修改则需要获取分支hexo到本地：\n　　```\n $git fetch origin hexo:hexo\n　　```\n或者：\n　　```\n $git pull origin hexo\n　　```\n切换到hexo分支：\n　　```\n  $git checkout hexo //此处为hexo分支\n　　```\n此时就可以在该目录下进行博客的撰写工作了，撰写完可以将最新更新提交，并push到远程仓库的hexo分支，至此完成多个电脑同步的问题。\n当再次回到公司电脑时，进入到博客目录使用*git pull*即可同步更新。\n在写新文章之前先配置好git的用户名和邮箱：\n  ```\n *$git config --global user.name \"yourusername\" \n *$git config --global user.email \"yourusername@xxx.com\"*\n  ```\n 新电脑需要生成SSH Key，*github*允许一个用户使用多个SSH Key。如果不想使用那么多个，可以拷贝原来电脑下的SSH Key之后就可以开始新文章的撰写和发布了：\n  ```\n $git pull //获取更新\n $hexo n post \"new blog\"\n $hexo clean //清除生成的静态文件\n $hexo g //生成静态文件\n $hexo d //部署到远程\n $git add --all //添加所有文件\n $git commit -m \"add new blog\"\n $git push origin hexo //推送到远程分支hexo\n　　```\n\n 如果不小心搞乱了，或者误删了，使用命令恢复到前一个版本:\n　　```\n $git log //查看记录\n $git reset --hard HEAD^ //恢复到前一个记录\n　　```\n \n","slug":"hexo-backup","published":1,"updated":"2017-05-14T23:56:22.522Z","layout":"post","photos":[],"link":"","_id":"cj4hne52a000lw8in9pk9p2qf","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在公司电脑中做好了hexo博客撰写，也将文章推送到了github并且发布了;回到家中在自己的电脑上想给自己的博客添加一篇文章，按照hexo建站流程，又建了一遍，但写完文章后发现，之前在公司写得博客被覆盖了，想哭的感觉有木有。当使用不同的电脑撰写博客时，会涉及到博客资源的备份和更新，如果简单的拷贝会比较麻烦，当然也可以tar整个hexo工作目录;单纯的push到github会有部分文件不全,由于主题文件目录也是git管理方式，当push后，主题默认是不会被推送到github上的。所以，必须稍作修改，才能正确的备份。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>在自己的github仓库中默认有master分支，比如username目录下的：<br>username.github.io仓库。使用master分支保存自己的hexo博客静态文件，新建hexo分支用于保存hexo资源文件。每次撰写完博客后，顺便将自己的hexo工作目录push到远程仓库的hexo分支;当在另外一台电脑上写博客时，先获取远程仓库的分支，之后就可以编辑了<br><a id=\"more\"></a></p>\n<h2 id=\"推送到远程\"><a href=\"#推送到远程\" class=\"headerlink\" title=\"推送到远程\"></a>推送到远程</h2><p>进入到自己的博客工作目录比如<em>github\\hexo</em>,先查看远程主机<br>　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> remote -v</span></div></pre></td></tr></table></figure></p>\n<p>如果有输出，查看下是否是自己远程仓库的名字，如果不是username.github.io则删除：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> remote rm origin</span></div></pre></td></tr></table></figure></p>\n<p>添加远程主机：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> remote add origin https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/yourusername/y</span>ourusername.github.io.git</div><div class=\"line\"><span class=\"variable\">$git</span> init</div></pre></td></tr></table></figure></p>\n<p>删除掉<em>theme\\nexT</em>目录下的<em>.git</em>文件夹，因为我们要将主题配置一同推送。如果删除后还是不能推送nexT主题，就将nexT改个名字，但要注意在hexo的_config.yml中对应的主题名字与这个文件夹名字要保持一致。<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git add --all //add之后可以用*git status*查看刚刚改过的文件状态</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git commit -m <span class=\"string\">\"backup hexo\"</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git push origin hexo //将本地文件push到远程仓库的hexo分支，没有则建立该分支</span></div></pre></td></tr></table></figure></p>\n<p>在远程仓库查看，username.github.io的仓库下已经有了两个分支，一个叫master,一个叫hexo。但发现有些不想推送的文件也被推送到了远程，比如hexo根目录下的public文件夹，这个文件夹是生成的博客静态文件，它是在博客部署后被推送到：username.github.io的master分支的，我们这里并不需要保存该文件夹。编辑hexo根目录下的.gitignore文件，添加不需要推送的文件或文件夹：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.DS_Store</span></div><div class=\"line\">Thumbs<span class=\"selector-class\">.db</span></div><div class=\"line\">*<span class=\"selector-class\">.log</span></div><div class=\"line\">node_modules/</div><div class=\"line\">public/</div><div class=\"line\">.deploy*/</div></pre></td></tr></table></figure></p>\n<p>由于之前推送过，可能.gitignore没有起作用，.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。这个时候就需要删除缓存改变未被追踪状态，重新提交：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git rm -r --cached .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git add --all</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git commit -m <span class=\"string\">\"update .gitignore\"</span></span></div></pre></td></tr></table></figure></p>\n<p> 之后再次推送即可。</p>\n<h2 id=\"获取远程分支\"><a href=\"#获取远程分支\" class=\"headerlink\" title=\"获取远程分支\"></a>获取远程分支</h2><p>前面已经将写好的博客资源文件推送到远程仓库username.github.io的分支hexo,无论在哪里都可以获取远程分支至本地进行博客撰写，并且保持文章的更新状态。假如我在家中的电脑的目录<em>F:\\github\\home</em>下想撰写一篇新博客文章，首先要做的是进入到该目录下，进行hexo环境的安装，参考我的前一篇博客。<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-<span class=\"keyword\">cli</span> --<span class=\"keyword\">save</span> <span class=\"comment\">//在新电脑上配置hexo</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-server --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-generator-<span class=\"keyword\">search</span> --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-deployer-git --<span class=\"keyword\">save</span></div></pre></td></tr></table></figure></p>\n<p>当环境建立好后，运行<em>hexo init</em>命令：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$hexo</span> init</span></div></pre></td></tr></table></figure></p>\n<p>然后删除<em>hexo init</em>命令产生的其它文件夹，只保留生成的node_modules文件夹，建立博客需要的hexo各种命令以及依赖项都在这里:<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$rm</span> _config<span class=\"selector-class\">.yml</span> db<span class=\"selector-class\">.json</span> package<span class=\"selector-class\">.json</span> </div><div class=\"line\"><span class=\"variable\">$rm</span> -rf scaffolds/ themes/ source/</div><div class=\"line\"><span class=\"variable\">$rm</span> .npmignore</div></pre></td></tr></table></figure></p>\n<p>之后添加远程仓库分支至本地：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> init</div><div class=\"line\"><span class=\"variable\">$git</span> remote add origin https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/yourusername/y</span>ourusername.github.io.git</div></pre></td></tr></table></figure></p>\n<p> 查看远程仓库所有分支：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> branch -r</span></div></pre></td></tr></table></figure></p>\n<p> 一般输出为：<br>　　<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*<span class=\"built_in\">origin</span>/HEAD -&gt; <span class=\"built_in\">origin</span>/master*</div><div class=\"line\">*<span class=\"built_in\">origin</span>/hexo*</div><div class=\"line\">*<span class=\"built_in\">origin</span>/master*</div></pre></td></tr></table></figure></p>\n<p>此时可以看到远程仓库有两个分支，但默认的分支为master,我们需要的是hexo分支，所以需要将默认分支修改为hexo:<br><img src=\"/2017/05/07/hexo-backup/setbranch.jpg\" alt=\"Alt text\"></p>\n<p>如果不修改则需要获取分支hexo到本地：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> fetch origin hexo:hexo</span></div></pre></td></tr></table></figure></p>\n<p>或者：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> pull origin hexo</span></div></pre></td></tr></table></figure></p>\n<p>切换到hexo分支：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> checkout hexo <span class=\"regexp\">//</span>此处为hexo分支</div></pre></td></tr></table></figure></p>\n<p>此时就可以在该目录下进行博客的撰写工作了，撰写完可以将最新更新提交，并push到远程仓库的hexo分支，至此完成多个电脑同步的问题。<br>当再次回到公司电脑时，进入到博客目录使用<em>git pull</em>即可同步更新。<br>在写新文章之前先配置好git的用户名和邮箱：<br>  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">*<span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"yourusername\"</span> </div><div class=\"line\">*<span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"yourusername@xxx.com\"</span>*</div></pre></td></tr></table></figure></p>\n<p> 新电脑需要生成SSH Key，<em>github</em>允许一个用户使用多个SSH Key。如果不想使用那么多个，可以拷贝原来电脑下的SSH Key之后就可以开始新文章的撰写和发布了：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git pull //获取更新</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo n post <span class=\"string\">\"new blog\"</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo clean //清除生成的静态文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo g //生成静态文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo d //部署到远程</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git add --all //添加所有文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git commit -m <span class=\"string\">\"add new blog\"</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git push origin hexo //推送到远程分支hexo</span></div></pre></td></tr></table></figure></p>\n<p> 如果不小心搞乱了，或者误删了，使用命令恢复到前一个版本:<br>　　<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git <span class=\"keyword\">log</span> <span class=\"comment\">//查看记录</span></div><div class=\"line\">$git reset -<span class=\"params\">-hard</span> HEAD^ <span class=\"comment\">//恢复到前一个记录</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在公司电脑中做好了hexo博客撰写，也将文章推送到了github并且发布了;回到家中在自己的电脑上想给自己的博客添加一篇文章，按照hexo建站流程，又建了一遍，但写完文章后发现，之前在公司写得博客被覆盖了，想哭的感觉有木有。当使用不同的电脑撰写博客时，会涉及到博客资源的备份和更新，如果简单的拷贝会比较麻烦，当然也可以tar整个hexo工作目录;单纯的push到github会有部分文件不全,由于主题文件目录也是git管理方式，当push后，主题默认是不会被推送到github上的。所以，必须稍作修改，才能正确的备份。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>在自己的github仓库中默认有master分支，比如username目录下的：<br>username.github.io仓库。使用master分支保存自己的hexo博客静态文件，新建hexo分支用于保存hexo资源文件。每次撰写完博客后，顺便将自己的hexo工作目录push到远程仓库的hexo分支;当在另外一台电脑上写博客时，先获取远程仓库的分支，之后就可以编辑了<br></p>","more":"<p></p>\n<h2 id=\"推送到远程\"><a href=\"#推送到远程\" class=\"headerlink\" title=\"推送到远程\"></a>推送到远程</h2><p>进入到自己的博客工作目录比如<em>github\\hexo</em>,先查看远程主机<br>　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> remote -v</span></div></pre></td></tr></table></figure></p>\n<p>如果有输出，查看下是否是自己远程仓库的名字，如果不是username.github.io则删除：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> remote rm origin</span></div></pre></td></tr></table></figure></p>\n<p>添加远程主机：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> remote add origin https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/yourusername/y</span>ourusername.github.io.git</div><div class=\"line\"><span class=\"variable\">$git</span> init</div></pre></td></tr></table></figure></p>\n<p>删除掉<em>theme\\nexT</em>目录下的<em>.git</em>文件夹，因为我们要将主题配置一同推送。如果删除后还是不能推送nexT主题，就将nexT改个名字，但要注意在hexo的_config.yml中对应的主题名字与这个文件夹名字要保持一致。<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git add --all //add之后可以用*git status*查看刚刚改过的文件状态</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git commit -m <span class=\"string\">\"backup hexo\"</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git push origin hexo //将本地文件push到远程仓库的hexo分支，没有则建立该分支</span></div></pre></td></tr></table></figure></p>\n<p>在远程仓库查看，username.github.io的仓库下已经有了两个分支，一个叫master,一个叫hexo。但发现有些不想推送的文件也被推送到了远程，比如hexo根目录下的public文件夹，这个文件夹是生成的博客静态文件，它是在博客部署后被推送到：username.github.io的master分支的，我们这里并不需要保存该文件夹。编辑hexo根目录下的.gitignore文件，添加不需要推送的文件或文件夹：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.DS_Store</span></div><div class=\"line\">Thumbs<span class=\"selector-class\">.db</span></div><div class=\"line\">*<span class=\"selector-class\">.log</span></div><div class=\"line\">node_modules/</div><div class=\"line\">public/</div><div class=\"line\">.deploy*/</div></pre></td></tr></table></figure></p>\n<p>由于之前推送过，可能.gitignore没有起作用，.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。这个时候就需要删除缓存改变未被追踪状态，重新提交：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git rm -r --cached .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git add --all</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git commit -m <span class=\"string\">\"update .gitignore\"</span></span></div></pre></td></tr></table></figure></p>\n<p> 之后再次推送即可。</p>\n<h2 id=\"获取远程分支\"><a href=\"#获取远程分支\" class=\"headerlink\" title=\"获取远程分支\"></a>获取远程分支</h2><p>前面已经将写好的博客资源文件推送到远程仓库username.github.io的分支hexo,无论在哪里都可以获取远程分支至本地进行博客撰写，并且保持文章的更新状态。假如我在家中的电脑的目录<em>F:\\github\\home</em>下想撰写一篇新博客文章，首先要做的是进入到该目录下，进行hexo环境的安装，参考我的前一篇博客。<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-<span class=\"keyword\">cli</span> --<span class=\"keyword\">save</span> <span class=\"comment\">//在新电脑上配置hexo</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-server --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-generator-<span class=\"keyword\">search</span> --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-deployer-git --<span class=\"keyword\">save</span></div></pre></td></tr></table></figure></p>\n<p>当环境建立好后，运行<em>hexo init</em>命令：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$hexo</span> init</span></div></pre></td></tr></table></figure></p>\n<p>然后删除<em>hexo init</em>命令产生的其它文件夹，只保留生成的node_modules文件夹，建立博客需要的hexo各种命令以及依赖项都在这里:<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$rm</span> _config<span class=\"selector-class\">.yml</span> db<span class=\"selector-class\">.json</span> package<span class=\"selector-class\">.json</span> </div><div class=\"line\"><span class=\"variable\">$rm</span> -rf scaffolds/ themes/ source/</div><div class=\"line\"><span class=\"variable\">$rm</span> .npmignore</div></pre></td></tr></table></figure></p>\n<p>之后添加远程仓库分支至本地：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> init</div><div class=\"line\"><span class=\"variable\">$git</span> remote add origin https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/yourusername/y</span>ourusername.github.io.git</div></pre></td></tr></table></figure></p>\n<p> 查看远程仓库所有分支：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> branch -r</span></div></pre></td></tr></table></figure></p>\n<p> 一般输出为：<br>　　<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*<span class=\"built_in\">origin</span>/HEAD -&gt; <span class=\"built_in\">origin</span>/master*</div><div class=\"line\">*<span class=\"built_in\">origin</span>/hexo*</div><div class=\"line\">*<span class=\"built_in\">origin</span>/master*</div></pre></td></tr></table></figure></p>\n<p>此时可以看到远程仓库有两个分支，但默认的分支为master,我们需要的是hexo分支，所以需要将默认分支修改为hexo:<br><img src=\"/2017/05/07/hexo-backup/setbranch.jpg\" alt=\"Alt text\"></p>\n<p>如果不修改则需要获取分支hexo到本地：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> fetch origin hexo:hexo</span></div></pre></td></tr></table></figure></p>\n<p>或者：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> pull origin hexo</span></div></pre></td></tr></table></figure></p>\n<p>切换到hexo分支：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> checkout hexo <span class=\"regexp\">//</span>此处为hexo分支</div></pre></td></tr></table></figure></p>\n<p>此时就可以在该目录下进行博客的撰写工作了，撰写完可以将最新更新提交，并push到远程仓库的hexo分支，至此完成多个电脑同步的问题。<br>当再次回到公司电脑时，进入到博客目录使用<em>git pull</em>即可同步更新。<br>在写新文章之前先配置好git的用户名和邮箱：<br>  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">*<span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"yourusername\"</span> </div><div class=\"line\">*<span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"yourusername@xxx.com\"</span>*</div></pre></td></tr></table></figure></p>\n<p> 新电脑需要生成SSH Key，<em>github</em>允许一个用户使用多个SSH Key。如果不想使用那么多个，可以拷贝原来电脑下的SSH Key之后就可以开始新文章的撰写和发布了：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git pull //获取更新</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo n post <span class=\"string\">\"new blog\"</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo clean //清除生成的静态文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo g //生成静态文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo d //部署到远程</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git add --all //添加所有文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git commit -m <span class=\"string\">\"add new blog\"</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git push origin hexo //推送到远程分支hexo</span></div></pre></td></tr></table></figure></p>\n<p> 如果不小心搞乱了，或者误删了，使用命令恢复到前一个版本:<br>　　<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git <span class=\"keyword\">log</span> <span class=\"comment\">//查看记录</span></div><div class=\"line\">$git reset -<span class=\"params\">-hard</span> HEAD^ <span class=\"comment\">//恢复到前一个记录</span></div></pre></td></tr></table></figure></p>"},{"title":"Putty 远程运行 ubuntu 图形界面程序","date":"2017-06-12T00:16:20.000Z","comments":1,"_content":"远程登录 linux 一般通过 SSH 协议，或 telnet 协议，这两种协议一般都只是命令行界面，而不能远程运行带有图形界面的应用程序。但是 putty 这款软件支持 X11 Forwarding,如果再配合一个 [X server](https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1) 问题就解决了。一般常用的 [X server](https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1) 有 [Xming](https://sourceforge.net/projects/xming/) 和 [VcXsrv](https://sourceforge.net/projects/vcxsrv/)。基本的原理就是 ubuntu 开启 X11 转发服务，putty 负责数据的转发，而 X Server 进行图形界面的显示。\n<!--more-->\n# SSH 配置\n配置 ubuntu 允许 X11 转发，打开 /etc/ssh/sshd_config 使能 X11 forwarding:\n   ```\n X11Forwarding yes\n   ```\n配置完成后记得重启 SSH 服务：\n   ```\n $ sudo /etc/init.d/ssh restart\n   ```\n# X Server 配置\nX Server 可以使用 [Xming](https://sourceforge.net/projects/xming/) 也可以使用 [VcXsrv](https://sourceforge.net/projects/vcxsrv/)，在 win10 64bits 环境下测试 [VcXsrv](https://sourceforge.net/projects/vcxsrv/) 的效果较好。\n## [Xming](https://sourceforge.net/projects/xming/) \nXming 的安装保持默认即可，安装完成后运行 Xlaunch 进行简单的配置：\n\n![](putty-graphics-ubuntu/xmingconfig.jpg)\n\n主要是 Display number 的配置，记住这个号码，之后在 putty 中会用到。保存配置后即可启动 Xming。\n## [VcXsrv](https://sourceforge.net/projects/vcxsrv/)\nVcXsrv 安装完成后运行 XLaunch 进行配置，和前面 xming 的配置类似，主要是 Display number 我这里配置为 0。\n# Putty 配置\nPutty 首先选择 SSH 协议，端口 22：\n![](putty-graphics-ubuntu/puttyssh.jpg)\n还需配置X11：\n![](putty-graphics-ubuntu/puttyx11.jpg)\n\n注意 X display location 中的 localhost:0 ，这个端口号即是前面设置的 Display number，保持前后一致即可。\n登录到 ubuntu 后，在命令行界面打开一个图形界面程序：\n![](putty-graphics-ubuntu/run.jpg)\n比较不爽的是当用键盘控制时，turtle 的反应比较慢，不如直接在 ubuntu 系统内运行快。","source":"_posts/putty-graphics-ubuntu.md","raw":"---\ntitle: Putty 远程运行 ubuntu 图形界面程序\ndate: 2017-06-12 08:16:20\ncategories: Linux\ntags: PuttyGraphics\ncomments: true\n---\n远程登录 linux 一般通过 SSH 协议，或 telnet 协议，这两种协议一般都只是命令行界面，而不能远程运行带有图形界面的应用程序。但是 putty 这款软件支持 X11 Forwarding,如果再配合一个 [X server](https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1) 问题就解决了。一般常用的 [X server](https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1) 有 [Xming](https://sourceforge.net/projects/xming/) 和 [VcXsrv](https://sourceforge.net/projects/vcxsrv/)。基本的原理就是 ubuntu 开启 X11 转发服务，putty 负责数据的转发，而 X Server 进行图形界面的显示。\n<!--more-->\n# SSH 配置\n配置 ubuntu 允许 X11 转发，打开 /etc/ssh/sshd_config 使能 X11 forwarding:\n   ```\n X11Forwarding yes\n   ```\n配置完成后记得重启 SSH 服务：\n   ```\n $ sudo /etc/init.d/ssh restart\n   ```\n# X Server 配置\nX Server 可以使用 [Xming](https://sourceforge.net/projects/xming/) 也可以使用 [VcXsrv](https://sourceforge.net/projects/vcxsrv/)，在 win10 64bits 环境下测试 [VcXsrv](https://sourceforge.net/projects/vcxsrv/) 的效果较好。\n## [Xming](https://sourceforge.net/projects/xming/) \nXming 的安装保持默认即可，安装完成后运行 Xlaunch 进行简单的配置：\n\n![](putty-graphics-ubuntu/xmingconfig.jpg)\n\n主要是 Display number 的配置，记住这个号码，之后在 putty 中会用到。保存配置后即可启动 Xming。\n## [VcXsrv](https://sourceforge.net/projects/vcxsrv/)\nVcXsrv 安装完成后运行 XLaunch 进行配置，和前面 xming 的配置类似，主要是 Display number 我这里配置为 0。\n# Putty 配置\nPutty 首先选择 SSH 协议，端口 22：\n![](putty-graphics-ubuntu/puttyssh.jpg)\n还需配置X11：\n![](putty-graphics-ubuntu/puttyx11.jpg)\n\n注意 X display location 中的 localhost:0 ，这个端口号即是前面设置的 Display number，保持前后一致即可。\n登录到 ubuntu 后，在命令行界面打开一个图形界面程序：\n![](putty-graphics-ubuntu/run.jpg)\n比较不爽的是当用键盘控制时，turtle 的反应比较慢，不如直接在 ubuntu 系统内运行快。","slug":"putty-graphics-ubuntu","published":1,"updated":"2017-06-12T01:47:53.296Z","layout":"post","photos":[],"link":"","_id":"cj4hne52c000pw8in6rnt8k1v","content":"<p>远程登录 linux 一般通过 SSH 协议，或 telnet 协议，这两种协议一般都只是命令行界面，而不能远程运行带有图形界面的应用程序。但是 putty 这款软件支持 X11 Forwarding,如果再配合一个 <a href=\"https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1\" target=\"_blank\" rel=\"external\">X server</a> 问题就解决了。一般常用的 <a href=\"https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1\" target=\"_blank\" rel=\"external\">X server</a> 有 <a href=\"https://sourceforge.net/projects/xming/\" target=\"_blank\" rel=\"external\">Xming</a> 和 <a href=\"https://sourceforge.net/projects/vcxsrv/\" target=\"_blank\" rel=\"external\">VcXsrv</a>。基本的原理就是 ubuntu 开启 X11 转发服务，putty 负责数据的转发，而 X Server 进行图形界面的显示。<br><a id=\"more\"></a></p>\n<h1 id=\"SSH-配置\"><a href=\"#SSH-配置\" class=\"headerlink\" title=\"SSH 配置\"></a>SSH 配置</h1><p>配置 ubuntu 允许 X11 转发，打开 /etc/ssh/sshd_config 使能 X11 forwarding:<br>   <figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">X11Forwarding</span> <span class=\"literal\">yes</span></div></pre></td></tr></table></figure></p>\n<p>配置完成后记得重启 SSH 服务：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo /etc/init.d/ssh restart</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"X-Server-配置\"><a href=\"#X-Server-配置\" class=\"headerlink\" title=\"X Server 配置\"></a>X Server 配置</h1><p>X Server 可以使用 <a href=\"https://sourceforge.net/projects/xming/\" target=\"_blank\" rel=\"external\">Xming</a> 也可以使用 <a href=\"https://sourceforge.net/projects/vcxsrv/\" target=\"_blank\" rel=\"external\">VcXsrv</a>，在 win10 64bits 环境下测试 <a href=\"https://sourceforge.net/projects/vcxsrv/\" target=\"_blank\" rel=\"external\">VcXsrv</a> 的效果较好。</p>\n<h2 id=\"Xming\"><a href=\"#Xming\" class=\"headerlink\" title=\"Xming\"></a><a href=\"https://sourceforge.net/projects/xming/\" target=\"_blank\" rel=\"external\">Xming</a></h2><p>Xming 的安装保持默认即可，安装完成后运行 Xlaunch 进行简单的配置：</p>\n<p><img src=\"/2017/06/12/putty-graphics-ubuntu/xmingconfig.jpg\" alt=\"\"></p>\n<p>主要是 Display number 的配置，记住这个号码，之后在 putty 中会用到。保存配置后即可启动 Xming。</p>\n<h2 id=\"VcXsrv\"><a href=\"#VcXsrv\" class=\"headerlink\" title=\"VcXsrv\"></a><a href=\"https://sourceforge.net/projects/vcxsrv/\" target=\"_blank\" rel=\"external\">VcXsrv</a></h2><p>VcXsrv 安装完成后运行 XLaunch 进行配置，和前面 xming 的配置类似，主要是 Display number 我这里配置为 0。</p>\n<h1 id=\"Putty-配置\"><a href=\"#Putty-配置\" class=\"headerlink\" title=\"Putty 配置\"></a>Putty 配置</h1><p>Putty 首先选择 SSH 协议，端口 22：<br><img src=\"/2017/06/12/putty-graphics-ubuntu/puttyssh.jpg\" alt=\"\"><br>还需配置X11：<br><img src=\"/2017/06/12/putty-graphics-ubuntu/puttyx11.jpg\" alt=\"\"></p>\n<p>注意 X display location 中的 localhost:0 ，这个端口号即是前面设置的 Display number，保持前后一致即可。<br>登录到 ubuntu 后，在命令行界面打开一个图形界面程序：<br><img src=\"/2017/06/12/putty-graphics-ubuntu/run.jpg\" alt=\"\"><br>比较不爽的是当用键盘控制时，turtle 的反应比较慢，不如直接在 ubuntu 系统内运行快。</p>\n","site":{"data":{}},"excerpt":"<p>远程登录 linux 一般通过 SSH 协议，或 telnet 协议，这两种协议一般都只是命令行界面，而不能远程运行带有图形界面的应用程序。但是 putty 这款软件支持 X11 Forwarding,如果再配合一个 <a href=\"https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1\" target=\"_blank\" rel=\"external\">X server</a> 问题就解决了。一般常用的 <a href=\"https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1\" target=\"_blank\" rel=\"external\">X server</a> 有 <a href=\"https://sourceforge.net/projects/xming/\" target=\"_blank\" rel=\"external\">Xming</a> 和 <a href=\"https://sourceforge.net/projects/vcxsrv/\" target=\"_blank\" rel=\"external\">VcXsrv</a>。基本的原理就是 ubuntu 开启 X11 转发服务，putty 负责数据的转发，而 X Server 进行图形界面的显示。<br></p>","more":"<p></p>\n<h1 id=\"SSH-配置\"><a href=\"#SSH-配置\" class=\"headerlink\" title=\"SSH 配置\"></a>SSH 配置</h1><p>配置 ubuntu 允许 X11 转发，打开 /etc/ssh/sshd_config 使能 X11 forwarding:<br>   <figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">X11Forwarding</span> <span class=\"literal\">yes</span></div></pre></td></tr></table></figure></p>\n<p>配置完成后记得重启 SSH 服务：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo /etc/init.d/ssh restart</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"X-Server-配置\"><a href=\"#X-Server-配置\" class=\"headerlink\" title=\"X Server 配置\"></a>X Server 配置</h1><p>X Server 可以使用 <a href=\"https://sourceforge.net/projects/xming/\" target=\"_blank\" rel=\"external\">Xming</a> 也可以使用 <a href=\"https://sourceforge.net/projects/vcxsrv/\" target=\"_blank\" rel=\"external\">VcXsrv</a>，在 win10 64bits 环境下测试 <a href=\"https://sourceforge.net/projects/vcxsrv/\" target=\"_blank\" rel=\"external\">VcXsrv</a> 的效果较好。</p>\n<h2 id=\"Xming\"><a href=\"#Xming\" class=\"headerlink\" title=\"Xming\"></a><a href=\"https://sourceforge.net/projects/xming/\" target=\"_blank\" rel=\"external\">Xming</a></h2><p>Xming 的安装保持默认即可，安装完成后运行 Xlaunch 进行简单的配置：</p>\n<p><img src=\"/2017/06/12/putty-graphics-ubuntu/xmingconfig.jpg\" alt=\"\"></p>\n<p>主要是 Display number 的配置，记住这个号码，之后在 putty 中会用到。保存配置后即可启动 Xming。</p>\n<h2 id=\"VcXsrv\"><a href=\"#VcXsrv\" class=\"headerlink\" title=\"VcXsrv\"></a><a href=\"https://sourceforge.net/projects/vcxsrv/\" target=\"_blank\" rel=\"external\">VcXsrv</a></h2><p>VcXsrv 安装完成后运行 XLaunch 进行配置，和前面 xming 的配置类似，主要是 Display number 我这里配置为 0。</p>\n<h1 id=\"Putty-配置\"><a href=\"#Putty-配置\" class=\"headerlink\" title=\"Putty 配置\"></a>Putty 配置</h1><p>Putty 首先选择 SSH 协议，端口 22：<br><img src=\"/2017/06/12/putty-graphics-ubuntu/puttyssh.jpg\" alt=\"\"><br>还需配置X11：<br><img src=\"/2017/06/12/putty-graphics-ubuntu/puttyx11.jpg\" alt=\"\"></p>\n<p>注意 X display location 中的 localhost:0 ，这个端口号即是前面设置的 Display number，保持前后一致即可。<br>登录到 ubuntu 后，在命令行界面打开一个图形界面程序：<br><img src=\"/2017/06/12/putty-graphics-ubuntu/run.jpg\" alt=\"\"><br>比较不爽的是当用键盘控制时，turtle 的反应比较慢，不如直接在 ubuntu 系统内运行快。</p>"},{"title":"Qt如何在指定位置显示控件","date":"2017-05-09T01:20:14.000Z","comments":1,"_content":"# 前言\n假如窗体背景为一张图片，想要在图片的某一个位置放置一个*Qlabel*，用于显示一个实时变量，但又不知道这个位置的精确坐标，这个时候该如何实现呢？\n# 思路\n一种方法是借用图片工具，找到指定位置的相对坐标，然后将控件放置在该坐标处;另一种方法可以将图片用网格划分，然后添加一个网格布局，查看指定的位置位于哪一行哪一列，然后将控件放置到布局中。这种方式不能做到精确的定位，但大体上可以使用。考虑到简单实用，选择第二种方法。\n# 开始\n<!--more-->\n## 添加资源文件\n首先创建一个*QWidget*，并设置背景图片。在工程目录下创建一个名为*icons*的文件夹，将图片放置到这个位置。回到*Qt*工程目录，右键自己的工程选择添加新文件->*qt*资源文件: ![Alt text](qt-widget-designated-location/qrc.jpg)\n\n假如建立后的资源文件为*res.qrc*,打开后，选择添加前缀，并添加刚才放置的图片文件，添加后的*res.qrc*如下:![Alt text](qt-widget-designated-location/res-qrc.jpg)\n## 设置背景图片\n在设置背景图片后要保证窗口变化时，背景图片能够随着窗口的变化而变化。因此需要重写窗口的*resizeEvent*事件。\n　　```\nvoid MainWindow::resizeEvent(QResizeEvent *event)\n{\n　QWidget::resizeEvent(event);\n　QImage image;\n　image.load(\":/icons/linux.jpeg\");\n　QPalette palette;\n　palette.setBrush(this->backgroundRole(),QBrush(image.scaled(event->size(),Qt::IgnoreAspectRatio,Qt::SmoothTransformation)));\n　this->setPalette(palette);\n　}\n　　```\n显示效果如下：![Alt text](qt-widget-designated-location/linux.jpg)\n## 将窗体网格化\n假如我想在X字符下面显示一个*Qlabel*，现将窗体分成8行9列因为我的显示器是16:9尺寸，并显示所画的网格线，重写窗体的*paintEvent*事件：\n　　```\n void MainWindow::paintEvent(QPaintEvent *event)\n {\n　//画网格线\n  QPainter painter(this);\n  drawMyGrid(&painter,8,9);\n  painter.setPen(Qt::black);\n　}\n void MainWindow::drawMyGrid(QPainter *painter,int row,int col)\n {\n  int mgin=1;//边界\n  QRect rect;\n  int i,j,x,y;\n  rect=QRect(mgin,mgin,width()-mgin,height()-mgin);\n\n  for( j=0;j<=row;j++)//行\n  {\n   y=rect.bottom()-(j*(rect.height()-mgin)/row);\n   painter->drawLine(rect.left(),y,rect.right(),y);\n  }\n  for(i=0;i<=col;i++)//列\n  {\n   x=rect.left()+(i*(rect.width()-mgin)/col);\n   painter->drawLine(x,rect.top(),x,rect.bottom());\n  }\n}\n　　```\n显示效果：![Alt text](qt-widget-designated-location/grid.jpg)\n## 在指定位置放置控件\n字符X下方的位置为第六行第七列。首先给窗体安装一个*QGridLayout*布局，将*Qlabel*放置到该布局中。\n　　```\n　label1  = new QLabel(tr(\"Text\"));\n　label1->setStyleSheet(\"color:white;font:bold;font-size:30\");\n　QGridLayout *mylayout     = new QGridLayout;\n　mylayout->addWidget(label1,5,6,1,1);//第六行第七列，占用1行1列\n　QWidget * widget = new QWidget(this);\n　widget->setLayout(mylayout);//安装布局\n　setCentralWidget(widget);\n　　```\n通过以下代码设置行列的宽高比例:\n　　```\n mylayout->setColumnStretch(0,1);//设置第一列的宽度比例\n mylayout->setRowStretch(0,1);//设置第一行的高度比例\n　　```\n必须指定每一行每一列的高度和宽度比。\n最后效果:![Alt text](qt-widget-designated-location/final.jpg)\n","source":"_posts/qt-widget-designated-location.md","raw":"---\ntitle: Qt如何在指定位置显示控件\ndate: 2017-05-09 09:20:14\ntags: Qt\ncategories: Qt\ncomments: true\n---\n# 前言\n假如窗体背景为一张图片，想要在图片的某一个位置放置一个*Qlabel*，用于显示一个实时变量，但又不知道这个位置的精确坐标，这个时候该如何实现呢？\n# 思路\n一种方法是借用图片工具，找到指定位置的相对坐标，然后将控件放置在该坐标处;另一种方法可以将图片用网格划分，然后添加一个网格布局，查看指定的位置位于哪一行哪一列，然后将控件放置到布局中。这种方式不能做到精确的定位，但大体上可以使用。考虑到简单实用，选择第二种方法。\n# 开始\n<!--more-->\n## 添加资源文件\n首先创建一个*QWidget*，并设置背景图片。在工程目录下创建一个名为*icons*的文件夹，将图片放置到这个位置。回到*Qt*工程目录，右键自己的工程选择添加新文件->*qt*资源文件: ![Alt text](qt-widget-designated-location/qrc.jpg)\n\n假如建立后的资源文件为*res.qrc*,打开后，选择添加前缀，并添加刚才放置的图片文件，添加后的*res.qrc*如下:![Alt text](qt-widget-designated-location/res-qrc.jpg)\n## 设置背景图片\n在设置背景图片后要保证窗口变化时，背景图片能够随着窗口的变化而变化。因此需要重写窗口的*resizeEvent*事件。\n　　```\nvoid MainWindow::resizeEvent(QResizeEvent *event)\n{\n　QWidget::resizeEvent(event);\n　QImage image;\n　image.load(\":/icons/linux.jpeg\");\n　QPalette palette;\n　palette.setBrush(this->backgroundRole(),QBrush(image.scaled(event->size(),Qt::IgnoreAspectRatio,Qt::SmoothTransformation)));\n　this->setPalette(palette);\n　}\n　　```\n显示效果如下：![Alt text](qt-widget-designated-location/linux.jpg)\n## 将窗体网格化\n假如我想在X字符下面显示一个*Qlabel*，现将窗体分成8行9列因为我的显示器是16:9尺寸，并显示所画的网格线，重写窗体的*paintEvent*事件：\n　　```\n void MainWindow::paintEvent(QPaintEvent *event)\n {\n　//画网格线\n  QPainter painter(this);\n  drawMyGrid(&painter,8,9);\n  painter.setPen(Qt::black);\n　}\n void MainWindow::drawMyGrid(QPainter *painter,int row,int col)\n {\n  int mgin=1;//边界\n  QRect rect;\n  int i,j,x,y;\n  rect=QRect(mgin,mgin,width()-mgin,height()-mgin);\n\n  for( j=0;j<=row;j++)//行\n  {\n   y=rect.bottom()-(j*(rect.height()-mgin)/row);\n   painter->drawLine(rect.left(),y,rect.right(),y);\n  }\n  for(i=0;i<=col;i++)//列\n  {\n   x=rect.left()+(i*(rect.width()-mgin)/col);\n   painter->drawLine(x,rect.top(),x,rect.bottom());\n  }\n}\n　　```\n显示效果：![Alt text](qt-widget-designated-location/grid.jpg)\n## 在指定位置放置控件\n字符X下方的位置为第六行第七列。首先给窗体安装一个*QGridLayout*布局，将*Qlabel*放置到该布局中。\n　　```\n　label1  = new QLabel(tr(\"Text\"));\n　label1->setStyleSheet(\"color:white;font:bold;font-size:30\");\n　QGridLayout *mylayout     = new QGridLayout;\n　mylayout->addWidget(label1,5,6,1,1);//第六行第七列，占用1行1列\n　QWidget * widget = new QWidget(this);\n　widget->setLayout(mylayout);//安装布局\n　setCentralWidget(widget);\n　　```\n通过以下代码设置行列的宽高比例:\n　　```\n mylayout->setColumnStretch(0,1);//设置第一列的宽度比例\n mylayout->setRowStretch(0,1);//设置第一行的高度比例\n　　```\n必须指定每一行每一列的高度和宽度比。\n最后效果:![Alt text](qt-widget-designated-location/final.jpg)\n","slug":"qt-widget-designated-location","published":1,"updated":"2017-05-14T23:56:22.522Z","layout":"post","photos":[],"link":"","_id":"cj4hne52i000sw8inyx0c2sf1","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>假如窗体背景为一张图片，想要在图片的某一个位置放置一个<em>Qlabel</em>，用于显示一个实时变量，但又不知道这个位置的精确坐标，这个时候该如何实现呢？</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>一种方法是借用图片工具，找到指定位置的相对坐标，然后将控件放置在该坐标处;另一种方法可以将图片用网格划分，然后添加一个网格布局，查看指定的位置位于哪一行哪一列，然后将控件放置到布局中。这种方式不能做到精确的定位，但大体上可以使用。考虑到简单实用，选择第二种方法。</p>\n<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><a id=\"more\"></a>\n<h2 id=\"添加资源文件\"><a href=\"#添加资源文件\" class=\"headerlink\" title=\"添加资源文件\"></a>添加资源文件</h2><p>首先创建一个<em>QWidget</em>，并设置背景图片。在工程目录下创建一个名为<em>icons</em>的文件夹，将图片放置到这个位置。回到<em>Qt</em>工程目录，右键自己的工程选择添加新文件-&gt;<em>qt</em>资源文件: <img src=\"/2017/05/09/qt-widget-designated-location/qrc.jpg\" alt=\"Alt text\"></p>\n<p>假如建立后的资源文件为<em>res.qrc</em>,打开后，选择添加前缀，并添加刚才放置的图片文件，添加后的<em>res.qrc</em>如下:<img src=\"/2017/05/09/qt-widget-designated-location/res-qrc.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"设置背景图片\"><a href=\"#设置背景图片\" class=\"headerlink\" title=\"设置背景图片\"></a>设置背景图片</h2><p>在设置背景图片后要保证窗口变化时，背景图片能够随着窗口的变化而变化。因此需要重写窗口的<em>resizeEvent</em>事件。<br>　　<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> MainWindow::resizeEvent(QResizeEvent *event)</div><div class=\"line\">&#123;</div><div class=\"line\">　QWidget::resizeEvent(event);</div><div class=\"line\">　QImage <span class=\"built_in\">image</span>;</div><div class=\"line\">　<span class=\"built_in\">image</span>.load(<span class=\"string\">\":/icons/linux.jpeg\"</span>);</div><div class=\"line\">　QPalette palette;</div><div class=\"line\">　palette.setBrush(<span class=\"keyword\">this</span>-&gt;backgroundRole(),QBrush(<span class=\"built_in\">image</span>.scaled(event-&gt;<span class=\"built_in\">size</span>(),Qt::IgnoreAspectRatio,Qt::SmoothTransformation)));</div><div class=\"line\">　<span class=\"keyword\">this</span>-&gt;setPalette(palette);</div><div class=\"line\">　&#125;</div></pre></td></tr></table></figure></p>\n<p>显示效果如下：<img src=\"/2017/05/09/qt-widget-designated-location/linux.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"将窗体网格化\"><a href=\"#将窗体网格化\" class=\"headerlink\" title=\"将窗体网格化\"></a>将窗体网格化</h2><p>假如我想在X字符下面显示一个<em>Qlabel</em>，现将窗体分成8行9列因为我的显示器是16:9尺寸，并显示所画的网格线，重写窗体的<em>paintEvent</em>事件：<br>　　<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">void</span> MainWindow::paintEvent(QPaintEvent *event)</div><div class=\"line\"> &#123;</div><div class=\"line\">　<span class=\"comment\">//画网格线</span></div><div class=\"line\">  QPainter painter(<span class=\"keyword\">this</span>);</div><div class=\"line\">  drawMyGrid(&amp;painter,<span class=\"number\">8</span>,<span class=\"number\">9</span>);</div><div class=\"line\">  painter.setPen(Qt::black);</div><div class=\"line\">　&#125;</div><div class=\"line\"> <span class=\"keyword\">void</span> MainWindow::drawMyGrid(QPainter *painter,<span class=\"keyword\">int</span> row,<span class=\"keyword\">int</span> col)</div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> mgin=<span class=\"number\">1</span>;<span class=\"comment\">//边界</span></div><div class=\"line\">  QRect <span class=\"built_in\">rect</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> i,j,x,y;</div><div class=\"line\">  <span class=\"built_in\">rect</span>=QRect(mgin,mgin,<span class=\"built_in\">width</span>()-mgin,<span class=\"built_in\">height</span>()-mgin);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">for</span>( j=<span class=\"number\">0</span>;j&lt;=row;j++)<span class=\"comment\">//行</span></div><div class=\"line\">  &#123;</div><div class=\"line\">   y=<span class=\"built_in\">rect</span>.bottom()-(j*(<span class=\"built_in\">rect</span>.<span class=\"built_in\">height</span>()-mgin)/row);</div><div class=\"line\">   painter-&gt;drawLine(<span class=\"built_in\">rect</span>.left(),y,<span class=\"built_in\">rect</span>.right(),y);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">for</span>(i=<span class=\"number\">0</span>;i&lt;=col;i++)<span class=\"comment\">//列</span></div><div class=\"line\">  &#123;</div><div class=\"line\">   x=<span class=\"built_in\">rect</span>.left()+(i*(<span class=\"built_in\">rect</span>.<span class=\"built_in\">width</span>()-mgin)/col);</div><div class=\"line\">   painter-&gt;drawLine(x,<span class=\"built_in\">rect</span>.top(),x,<span class=\"built_in\">rect</span>.bottom());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>显示效果：<img src=\"/2017/05/09/qt-widget-designated-location/grid.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"在指定位置放置控件\"><a href=\"#在指定位置放置控件\" class=\"headerlink\" title=\"在指定位置放置控件\"></a>在指定位置放置控件</h2><p>字符X下方的位置为第六行第七列。首先给窗体安装一个<em>QGridLayout</em>布局，将<em>Qlabel</em>放置到该布局中。<br>　　<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　label1  = new QLabel(<span class=\"name\">tr</span>(<span class=\"string\">\"Text\"</span>))<span class=\"comment\">;</span></div><div class=\"line\">　label1-&gt;setStyleSheet(<span class=\"string\">\"color:white;font:bold;font-size:30\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">　QGridLayout *mylayout     = new QGridLayout<span class=\"comment\">;</span></div><div class=\"line\">　mylayout-&gt;addWidget(<span class=\"name\">label1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>)<span class=\"comment\">;//第六行第七列，占用1行1列</span></div><div class=\"line\">　QWidget * widget = new QWidget(<span class=\"name\">this</span>)<span class=\"comment\">;</span></div><div class=\"line\">　widget-&gt;setLayout(<span class=\"name\">mylayout</span>)<span class=\"comment\">;//安装布局</span></div><div class=\"line\">　setCentralWidget(<span class=\"name\">widget</span>)<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>通过以下代码设置行列的宽高比例:<br>　　<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mylayout-&gt;setColumnStretch(<span class=\"number\">0</span>,<span class=\"number\">1</span>);<span class=\"comment\">//设置第一列的宽度比例</span></div><div class=\"line\">mylayout-&gt;setRowStretch(<span class=\"number\">0</span>,<span class=\"number\">1</span>);<span class=\"comment\">//设置第一行的高度比例</span></div></pre></td></tr></table></figure></p>\n<p>必须指定每一行每一列的高度和宽度比。<br>最后效果:<img src=\"/2017/05/09/qt-widget-designated-location/final.jpg\" alt=\"Alt text\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>假如窗体背景为一张图片，想要在图片的某一个位置放置一个<em>Qlabel</em>，用于显示一个实时变量，但又不知道这个位置的精确坐标，这个时候该如何实现呢？</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>一种方法是借用图片工具，找到指定位置的相对坐标，然后将控件放置在该坐标处;另一种方法可以将图片用网格划分，然后添加一个网格布局，查看指定的位置位于哪一行哪一列，然后将控件放置到布局中。这种方式不能做到精确的定位，但大体上可以使用。考虑到简单实用，选择第二种方法。</p>\n<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1>","more":"<h2 id=\"添加资源文件\"><a href=\"#添加资源文件\" class=\"headerlink\" title=\"添加资源文件\"></a>添加资源文件</h2><p>首先创建一个<em>QWidget</em>，并设置背景图片。在工程目录下创建一个名为<em>icons</em>的文件夹，将图片放置到这个位置。回到<em>Qt</em>工程目录，右键自己的工程选择添加新文件-&gt;<em>qt</em>资源文件: <img src=\"/2017/05/09/qt-widget-designated-location/qrc.jpg\" alt=\"Alt text\"></p>\n<p>假如建立后的资源文件为<em>res.qrc</em>,打开后，选择添加前缀，并添加刚才放置的图片文件，添加后的<em>res.qrc</em>如下:<img src=\"/2017/05/09/qt-widget-designated-location/res-qrc.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"设置背景图片\"><a href=\"#设置背景图片\" class=\"headerlink\" title=\"设置背景图片\"></a>设置背景图片</h2><p>在设置背景图片后要保证窗口变化时，背景图片能够随着窗口的变化而变化。因此需要重写窗口的<em>resizeEvent</em>事件。<br>　　<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> MainWindow::resizeEvent(QResizeEvent *event)</div><div class=\"line\">&#123;</div><div class=\"line\">　QWidget::resizeEvent(event);</div><div class=\"line\">　QImage <span class=\"built_in\">image</span>;</div><div class=\"line\">　<span class=\"built_in\">image</span>.load(<span class=\"string\">\":/icons/linux.jpeg\"</span>);</div><div class=\"line\">　QPalette palette;</div><div class=\"line\">　palette.setBrush(<span class=\"keyword\">this</span>-&gt;backgroundRole(),QBrush(<span class=\"built_in\">image</span>.scaled(event-&gt;<span class=\"built_in\">size</span>(),Qt::IgnoreAspectRatio,Qt::SmoothTransformation)));</div><div class=\"line\">　<span class=\"keyword\">this</span>-&gt;setPalette(palette);</div><div class=\"line\">　&#125;</div></pre></td></tr></table></figure></p>\n<p>显示效果如下：<img src=\"/2017/05/09/qt-widget-designated-location/linux.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"将窗体网格化\"><a href=\"#将窗体网格化\" class=\"headerlink\" title=\"将窗体网格化\"></a>将窗体网格化</h2><p>假如我想在X字符下面显示一个<em>Qlabel</em>，现将窗体分成8行9列因为我的显示器是16:9尺寸，并显示所画的网格线，重写窗体的<em>paintEvent</em>事件：<br>　　<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">void</span> MainWindow::paintEvent(QPaintEvent *event)</div><div class=\"line\"> &#123;</div><div class=\"line\">　<span class=\"comment\">//画网格线</span></div><div class=\"line\">  QPainter painter(<span class=\"keyword\">this</span>);</div><div class=\"line\">  drawMyGrid(&amp;painter,<span class=\"number\">8</span>,<span class=\"number\">9</span>);</div><div class=\"line\">  painter.setPen(Qt::black);</div><div class=\"line\">　&#125;</div><div class=\"line\"> <span class=\"keyword\">void</span> MainWindow::drawMyGrid(QPainter *painter,<span class=\"keyword\">int</span> row,<span class=\"keyword\">int</span> col)</div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> mgin=<span class=\"number\">1</span>;<span class=\"comment\">//边界</span></div><div class=\"line\">  QRect <span class=\"built_in\">rect</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> i,j,x,y;</div><div class=\"line\">  <span class=\"built_in\">rect</span>=QRect(mgin,mgin,<span class=\"built_in\">width</span>()-mgin,<span class=\"built_in\">height</span>()-mgin);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">for</span>( j=<span class=\"number\">0</span>;j&lt;=row;j++)<span class=\"comment\">//行</span></div><div class=\"line\">  &#123;</div><div class=\"line\">   y=<span class=\"built_in\">rect</span>.bottom()-(j*(<span class=\"built_in\">rect</span>.<span class=\"built_in\">height</span>()-mgin)/row);</div><div class=\"line\">   painter-&gt;drawLine(<span class=\"built_in\">rect</span>.left(),y,<span class=\"built_in\">rect</span>.right(),y);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">for</span>(i=<span class=\"number\">0</span>;i&lt;=col;i++)<span class=\"comment\">//列</span></div><div class=\"line\">  &#123;</div><div class=\"line\">   x=<span class=\"built_in\">rect</span>.left()+(i*(<span class=\"built_in\">rect</span>.<span class=\"built_in\">width</span>()-mgin)/col);</div><div class=\"line\">   painter-&gt;drawLine(x,<span class=\"built_in\">rect</span>.top(),x,<span class=\"built_in\">rect</span>.bottom());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>显示效果：<img src=\"/2017/05/09/qt-widget-designated-location/grid.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"在指定位置放置控件\"><a href=\"#在指定位置放置控件\" class=\"headerlink\" title=\"在指定位置放置控件\"></a>在指定位置放置控件</h2><p>字符X下方的位置为第六行第七列。首先给窗体安装一个<em>QGridLayout</em>布局，将<em>Qlabel</em>放置到该布局中。<br>　　<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　label1  = new QLabel(<span class=\"name\">tr</span>(<span class=\"string\">\"Text\"</span>))<span class=\"comment\">;</span></div><div class=\"line\">　label1-&gt;setStyleSheet(<span class=\"string\">\"color:white;font:bold;font-size:30\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">　QGridLayout *mylayout     = new QGridLayout<span class=\"comment\">;</span></div><div class=\"line\">　mylayout-&gt;addWidget(<span class=\"name\">label1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>)<span class=\"comment\">;//第六行第七列，占用1行1列</span></div><div class=\"line\">　QWidget * widget = new QWidget(<span class=\"name\">this</span>)<span class=\"comment\">;</span></div><div class=\"line\">　widget-&gt;setLayout(<span class=\"name\">mylayout</span>)<span class=\"comment\">;//安装布局</span></div><div class=\"line\">　setCentralWidget(<span class=\"name\">widget</span>)<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>通过以下代码设置行列的宽高比例:<br>　　<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mylayout-&gt;setColumnStretch(<span class=\"number\">0</span>,<span class=\"number\">1</span>);<span class=\"comment\">//设置第一列的宽度比例</span></div><div class=\"line\">mylayout-&gt;setRowStretch(<span class=\"number\">0</span>,<span class=\"number\">1</span>);<span class=\"comment\">//设置第一行的高度比例</span></div></pre></td></tr></table></figure></p>\n<p>必须指定每一行每一列的高度和宽度比。<br>最后效果:<img src=\"/2017/05/09/qt-widget-designated-location/final.jpg\" alt=\"Alt text\"></p>"},{"title":"树莓派3B使用前的配置","date":"2017-05-15T01:32:02.000Z","comments":1,"_content":"前段时间入手一块树莓派[raspberryPi](https://www.raspberrypi.org/)型号为3B。关于它的介绍这里就不多说了，可自行[google](https://www.google.com)。使用前需要准备一张SD卡用于安装系统镜像。容量尽可能大，最好不低于16G。树莓派支持多种平台，因后续要安装[ROS](http://www.ros.org/)，考虑到官方支持的稳定性，选用 *Raspbian* 平台镜像。因为*Raspbian* 是官方推荐的支持的操作系统，而[Ros-indigo](http://wiki.ros.org/cn/indigo)也刚好有基于该平台的安装包。\n# 镜像安装\n参考官网[Install-Images](https://www.raspberrypi.org/documentation/installation/installing-images/)。我安装的版本为*2017-03-02-raspbian-jessie.img*\n<!--more-->\n# 开启SSH和串口\n该版本默认不开启SSH以及串口功能，需要手动开启。树莓派板子需要连接显示器、键盘、鼠标。在终端中输入:\n　　```\n  $sudo raspi-config\n　　```\n进行配置。树莓派默认的用户名为*pi*密码为*raspberry*。\n![](raspberryPi/config.jpg)\n进入第5项开启SSH以及GPIO14 GPIO15对应的串口控制台功能。串口功能开启后就可以抛弃鼠标、键盘、显示器直接在控制台访问树莓派。\n# 开启VNC远程桌面\n同样在配置菜单的第5项开启:![](raspberryPi/portconfig.jpg)\n在windows上安装[VNC Viewer](https://www.realvnc.com/)并且输入树莓派的IP地址就可以远程访问树莓派。![](raspberryPi/vnc.jpg)\n如果不知道IP地址，可以使用工具[freeIpScanner](http://www.eusing.com/ipscan/free_ip_scanner.htm)获取IP地址。或者使用linux下的nmap命令,nmap命令说明：\n　　```\n  $namp 192.168.1.1/24 //扫描整个子网\n  $namp 192.168.1.x (x:0-255) //扫描单个主机\n  $namp 192.168.1.x 192.168.1.y //扫描多个目标\n  $namp 192.168.1.100-255 扫描某个范围内的目标#ip地址在192.168.1.100和192.168.1.255之间 \n  $nmap 192.168.1.1/24 -exclude 192.168.1.1 扫描一个网段除了某个主机\n  $nmap -p80,21,23 192.168.1.1 扫描某个主机下的端口（80端口 21端口 23 端口）\n\n　　```\n# 手动配置wifi\n命令行下启动 *wpa_cli* 参考 [WPA_supplicant](http://w1.fi/wpa_supplicant/)：\n　　```\n $sudo wpa_cli\n　　```\n![](raspberryPi/wpacli.jpg)\n　 ```\n  status //列出目前的联网状态\n  list_networks //记住网络ID\n  set_network \"ID\" key_mgmt WPA-PSK  //设置无线网络加密方式\n  set_network \"ID\" psk \"yourpassword\"   //设置密码\n  enable_network \"ID\"   //使能该网络\n  save_config //保存配置\n  　```\n完成之后会在文件/etc/wpa_supplicant/wpa_supplicant.conf看到配置信息已经写入到文件,此时可以查看网络是否连接:\n  　```\n $ifconfig\n  　```\n","source":"_posts/raspberryPi.md","raw":"---\ntitle: 树莓派3B使用前的配置\ndate: 2017-05-15 09:32:02\ntags: raspberryPi\ncategories: Linux\ncomments: true\n---\n前段时间入手一块树莓派[raspberryPi](https://www.raspberrypi.org/)型号为3B。关于它的介绍这里就不多说了，可自行[google](https://www.google.com)。使用前需要准备一张SD卡用于安装系统镜像。容量尽可能大，最好不低于16G。树莓派支持多种平台，因后续要安装[ROS](http://www.ros.org/)，考虑到官方支持的稳定性，选用 *Raspbian* 平台镜像。因为*Raspbian* 是官方推荐的支持的操作系统，而[Ros-indigo](http://wiki.ros.org/cn/indigo)也刚好有基于该平台的安装包。\n# 镜像安装\n参考官网[Install-Images](https://www.raspberrypi.org/documentation/installation/installing-images/)。我安装的版本为*2017-03-02-raspbian-jessie.img*\n<!--more-->\n# 开启SSH和串口\n该版本默认不开启SSH以及串口功能，需要手动开启。树莓派板子需要连接显示器、键盘、鼠标。在终端中输入:\n　　```\n  $sudo raspi-config\n　　```\n进行配置。树莓派默认的用户名为*pi*密码为*raspberry*。\n![](raspberryPi/config.jpg)\n进入第5项开启SSH以及GPIO14 GPIO15对应的串口控制台功能。串口功能开启后就可以抛弃鼠标、键盘、显示器直接在控制台访问树莓派。\n# 开启VNC远程桌面\n同样在配置菜单的第5项开启:![](raspberryPi/portconfig.jpg)\n在windows上安装[VNC Viewer](https://www.realvnc.com/)并且输入树莓派的IP地址就可以远程访问树莓派。![](raspberryPi/vnc.jpg)\n如果不知道IP地址，可以使用工具[freeIpScanner](http://www.eusing.com/ipscan/free_ip_scanner.htm)获取IP地址。或者使用linux下的nmap命令,nmap命令说明：\n　　```\n  $namp 192.168.1.1/24 //扫描整个子网\n  $namp 192.168.1.x (x:0-255) //扫描单个主机\n  $namp 192.168.1.x 192.168.1.y //扫描多个目标\n  $namp 192.168.1.100-255 扫描某个范围内的目标#ip地址在192.168.1.100和192.168.1.255之间 \n  $nmap 192.168.1.1/24 -exclude 192.168.1.1 扫描一个网段除了某个主机\n  $nmap -p80,21,23 192.168.1.1 扫描某个主机下的端口（80端口 21端口 23 端口）\n\n　　```\n# 手动配置wifi\n命令行下启动 *wpa_cli* 参考 [WPA_supplicant](http://w1.fi/wpa_supplicant/)：\n　　```\n $sudo wpa_cli\n　　```\n![](raspberryPi/wpacli.jpg)\n　 ```\n  status //列出目前的联网状态\n  list_networks //记住网络ID\n  set_network \"ID\" key_mgmt WPA-PSK  //设置无线网络加密方式\n  set_network \"ID\" psk \"yourpassword\"   //设置密码\n  enable_network \"ID\"   //使能该网络\n  save_config //保存配置\n  　```\n完成之后会在文件/etc/wpa_supplicant/wpa_supplicant.conf看到配置信息已经写入到文件,此时可以查看网络是否连接:\n  　```\n $ifconfig\n  　```\n","slug":"raspberryPi","published":1,"updated":"2017-05-19T09:13:51.480Z","layout":"post","photos":[],"link":"","_id":"cj4hne52m000ww8int5hvozob","content":"<p>前段时间入手一块树莓派<a href=\"https://www.raspberrypi.org/\" target=\"_blank\" rel=\"external\">raspberryPi</a>型号为3B。关于它的介绍这里就不多说了，可自行<a href=\"https://www.google.com\" target=\"_blank\" rel=\"external\">google</a>。使用前需要准备一张SD卡用于安装系统镜像。容量尽可能大，最好不低于16G。树莓派支持多种平台，因后续要安装<a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a>，考虑到官方支持的稳定性，选用 <em>Raspbian</em> 平台镜像。因为<em>Raspbian</em> 是官方推荐的支持的操作系统，而<a href=\"http://wiki.ros.org/cn/indigo\" target=\"_blank\" rel=\"external\">Ros-indigo</a>也刚好有基于该平台的安装包。</p>\n<h1 id=\"镜像安装\"><a href=\"#镜像安装\" class=\"headerlink\" title=\"镜像安装\"></a>镜像安装</h1><p>参考官网<a href=\"https://www.raspberrypi.org/documentation/installation/installing-images/\" target=\"_blank\" rel=\"external\">Install-Images</a>。我安装的版本为<em>2017-03-02-raspbian-jessie.img</em><br><a id=\"more\"></a></p>\n<h1 id=\"开启SSH和串口\"><a href=\"#开启SSH和串口\" class=\"headerlink\" title=\"开启SSH和串口\"></a>开启SSH和串口</h1><p>该版本默认不开启SSH以及串口功能，需要手动开启。树莓派板子需要连接显示器、键盘、鼠标。在终端中输入:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> raspi-config</span></div></pre></td></tr></table></figure></p>\n<p>进行配置。树莓派默认的用户名为<em>pi</em>密码为<em>raspberry</em>。<br><img src=\"/2017/05/15/raspberryPi/config.jpg\" alt=\"\"><br>进入第5项开启SSH以及GPIO14 GPIO15对应的串口控制台功能。串口功能开启后就可以抛弃鼠标、键盘、显示器直接在控制台访问树莓派。</p>\n<h1 id=\"开启VNC远程桌面\"><a href=\"#开启VNC远程桌面\" class=\"headerlink\" title=\"开启VNC远程桌面\"></a>开启VNC远程桌面</h1><p>同样在配置菜单的第5项开启:<img src=\"/2017/05/15/raspberryPi/portconfig.jpg\" alt=\"\"><br>在windows上安装<a href=\"https://www.realvnc.com/\" target=\"_blank\" rel=\"external\">VNC Viewer</a>并且输入树莓派的IP地址就可以远程访问树莓派。<img src=\"/2017/05/15/raspberryPi/vnc.jpg\" alt=\"\"><br>如果不知道IP地址，可以使用工具<a href=\"http://www.eusing.com/ipscan/free_ip_scanner.htm\" target=\"_blank\" rel=\"external\">freeIpScanner</a>获取IP地址。或者使用linux下的nmap命令,nmap命令说明：<br>　　<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$namp <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.1</span>/<span class=\"number\">24</span> //扫描整个子网</div><div class=\"line\">$namp <span class=\"number\">192.168</span><span class=\"meta\">.1</span>.x (x:<span class=\"number\">0</span>-<span class=\"number\">255</span>) //扫描单个主机</div><div class=\"line\">$namp <span class=\"number\">192.168</span><span class=\"meta\">.1</span>.x <span class=\"number\">192.168</span><span class=\"meta\">.1</span>.y //扫描多个目标</div><div class=\"line\">$namp <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.100</span>-<span class=\"number\">255</span> 扫描某个范围内的目标#<span class=\"built_in\">ip</span>地址在<span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.100</span>和<span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.255</span>之间 </div><div class=\"line\">$nmap <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.1</span>/<span class=\"number\">24</span> -exclude <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.1</span> 扫描一个网段除了某个主机</div><div class=\"line\">$nmap -p80,<span class=\"number\">21</span>,<span class=\"number\">23</span> <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.1</span> 扫描某个主机下的端口（<span class=\"number\">80</span>端口 <span class=\"number\">21</span>端口 <span class=\"number\">23</span> 端口）</div></pre></td></tr></table></figure></p>\n<h1 id=\"手动配置wifi\"><a href=\"#手动配置wifi\" class=\"headerlink\" title=\"手动配置wifi\"></a>手动配置wifi</h1><p>命令行下启动 <em>wpa_cli</em> 参考 <a href=\"http://w1.fi/wpa_supplicant/\" target=\"_blank\" rel=\"external\">WPA_supplicant</a>：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> wpa_cli</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/15/raspberryPi/wpacli.jpg\" alt=\"\"><br>　 <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">status <span class=\"string\">//</span>列出目前的联网状态</div><div class=\"line\">list_networks <span class=\"string\">//</span>记住网络ID</div><div class=\"line\"><span class=\"keyword\">set</span>_network <span class=\"string\">\"ID\"</span> key_mgmt WPA-PSK  <span class=\"string\">//</span>设置无线网络加密方式</div><div class=\"line\"><span class=\"keyword\">set</span>_network <span class=\"string\">\"ID\"</span> psk <span class=\"string\">\"yourpassword\"</span>   <span class=\"string\">//</span>设置密码</div><div class=\"line\">enable_network <span class=\"string\">\"ID\"</span>   <span class=\"string\">//</span>使能该网络</div><div class=\"line\">save_config <span class=\"string\">//</span>保存配置</div></pre></td></tr></table></figure></p>\n<p>完成之后会在文件/etc/wpa_supplicant/wpa_supplicant.conf看到配置信息已经写入到文件,此时可以查看网络是否连接:<br>  　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$ifconfig</span></span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>前段时间入手一块树莓派<a href=\"https://www.raspberrypi.org/\" target=\"_blank\" rel=\"external\">raspberryPi</a>型号为3B。关于它的介绍这里就不多说了，可自行<a href=\"https://www.google.com\" target=\"_blank\" rel=\"external\">google</a>。使用前需要准备一张SD卡用于安装系统镜像。容量尽可能大，最好不低于16G。树莓派支持多种平台，因后续要安装<a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a>，考虑到官方支持的稳定性，选用 <em>Raspbian</em> 平台镜像。因为<em>Raspbian</em> 是官方推荐的支持的操作系统，而<a href=\"http://wiki.ros.org/cn/indigo\" target=\"_blank\" rel=\"external\">Ros-indigo</a>也刚好有基于该平台的安装包。</p>\n<h1 id=\"镜像安装\"><a href=\"#镜像安装\" class=\"headerlink\" title=\"镜像安装\"></a>镜像安装</h1><p>参考官网<a href=\"https://www.raspberrypi.org/documentation/installation/installing-images/\" target=\"_blank\" rel=\"external\">Install-Images</a>。我安装的版本为<em>2017-03-02-raspbian-jessie.img</em><br></p>","more":"<p></p>\n<h1 id=\"开启SSH和串口\"><a href=\"#开启SSH和串口\" class=\"headerlink\" title=\"开启SSH和串口\"></a>开启SSH和串口</h1><p>该版本默认不开启SSH以及串口功能，需要手动开启。树莓派板子需要连接显示器、键盘、鼠标。在终端中输入:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> raspi-config</span></div></pre></td></tr></table></figure></p>\n<p>进行配置。树莓派默认的用户名为<em>pi</em>密码为<em>raspberry</em>。<br><img src=\"/2017/05/15/raspberryPi/config.jpg\" alt=\"\"><br>进入第5项开启SSH以及GPIO14 GPIO15对应的串口控制台功能。串口功能开启后就可以抛弃鼠标、键盘、显示器直接在控制台访问树莓派。</p>\n<h1 id=\"开启VNC远程桌面\"><a href=\"#开启VNC远程桌面\" class=\"headerlink\" title=\"开启VNC远程桌面\"></a>开启VNC远程桌面</h1><p>同样在配置菜单的第5项开启:<img src=\"/2017/05/15/raspberryPi/portconfig.jpg\" alt=\"\"><br>在windows上安装<a href=\"https://www.realvnc.com/\" target=\"_blank\" rel=\"external\">VNC Viewer</a>并且输入树莓派的IP地址就可以远程访问树莓派。<img src=\"/2017/05/15/raspberryPi/vnc.jpg\" alt=\"\"><br>如果不知道IP地址，可以使用工具<a href=\"http://www.eusing.com/ipscan/free_ip_scanner.htm\" target=\"_blank\" rel=\"external\">freeIpScanner</a>获取IP地址。或者使用linux下的nmap命令,nmap命令说明：<br>　　<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$namp <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.1</span>/<span class=\"number\">24</span> //扫描整个子网</div><div class=\"line\">$namp <span class=\"number\">192.168</span><span class=\"meta\">.1</span>.x (x:<span class=\"number\">0</span>-<span class=\"number\">255</span>) //扫描单个主机</div><div class=\"line\">$namp <span class=\"number\">192.168</span><span class=\"meta\">.1</span>.x <span class=\"number\">192.168</span><span class=\"meta\">.1</span>.y //扫描多个目标</div><div class=\"line\">$namp <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.100</span>-<span class=\"number\">255</span> 扫描某个范围内的目标#<span class=\"built_in\">ip</span>地址在<span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.100</span>和<span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.255</span>之间 </div><div class=\"line\">$nmap <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.1</span>/<span class=\"number\">24</span> -exclude <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.1</span> 扫描一个网段除了某个主机</div><div class=\"line\">$nmap -p80,<span class=\"number\">21</span>,<span class=\"number\">23</span> <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.1</span> 扫描某个主机下的端口（<span class=\"number\">80</span>端口 <span class=\"number\">21</span>端口 <span class=\"number\">23</span> 端口）</div></pre></td></tr></table></figure></p>\n<h1 id=\"手动配置wifi\"><a href=\"#手动配置wifi\" class=\"headerlink\" title=\"手动配置wifi\"></a>手动配置wifi</h1><p>命令行下启动 <em>wpa_cli</em> 参考 <a href=\"http://w1.fi/wpa_supplicant/\" target=\"_blank\" rel=\"external\">WPA_supplicant</a>：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> wpa_cli</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/15/raspberryPi/wpacli.jpg\" alt=\"\"><br>　 <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">status <span class=\"string\">//</span>列出目前的联网状态</div><div class=\"line\">list_networks <span class=\"string\">//</span>记住网络ID</div><div class=\"line\"><span class=\"keyword\">set</span>_network <span class=\"string\">\"ID\"</span> key_mgmt WPA-PSK  <span class=\"string\">//</span>设置无线网络加密方式</div><div class=\"line\"><span class=\"keyword\">set</span>_network <span class=\"string\">\"ID\"</span> psk <span class=\"string\">\"yourpassword\"</span>   <span class=\"string\">//</span>设置密码</div><div class=\"line\">enable_network <span class=\"string\">\"ID\"</span>   <span class=\"string\">//</span>使能该网络</div><div class=\"line\">save_config <span class=\"string\">//</span>保存配置</div></pre></td></tr></table></figure></p>\n<p>完成之后会在文件/etc/wpa_supplicant/wpa_supplicant.conf看到配置信息已经写入到文件,此时可以查看网络是否连接:<br>  　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$ifconfig</span></span></div></pre></td></tr></table></figure></p>"},{"title":"超经典 ROS 学习电子书","date":"2017-06-12T08:55:48.000Z","comments":1,"_content":"收藏了几本 ROS 学习的超级经典教材，都是高清晰电子版，在这里和大家分享一下。\n\n![](ros-books/book.jpg)\n\n\n下载地址：[ROS-Books](https://github.com/StevenShiChina/books)","source":"_posts/ros-books.md","raw":"---\ntitle: 超经典 ROS 学习电子书\ndate: 2017-06-12 16:55:48\ncategories: ROS\ntags: ROS Books\ncomments: true\n---\n收藏了几本 ROS 学习的超级经典教材，都是高清晰电子版，在这里和大家分享一下。\n\n![](ros-books/book.jpg)\n\n\n下载地址：[ROS-Books](https://github.com/StevenShiChina/books)","slug":"ros-books","published":1,"updated":"2017-06-22T05:11:46.929Z","layout":"post","photos":[],"link":"","_id":"cj4hne52r000zw8intlpgxx2o","content":"<p>收藏了几本 ROS 学习的超级经典教材，都是高清晰电子版，在这里和大家分享一下。</p>\n<p><img src=\"/2017/06/12/ros-books/book.jpg\" alt=\"\"></p>\n<p>下载地址：<a href=\"https://github.com/StevenShiChina/books\" target=\"_blank\" rel=\"external\">ROS-Books</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>收藏了几本 ROS 学习的超级经典教材，都是高清晰电子版，在这里和大家分享一下。</p>\n<p><img src=\"/2017/06/12/ros-books/book.jpg\" alt=\"\"></p>\n<p>下载地址：<a href=\"https://github.com/StevenShiChina/books\" target=\"_blank\" rel=\"external\">ROS-Books</a></p>\n"},{"title":"ROS多机通信","date":"2017-05-22T12:43:31.000Z","comments":1,"_content":"# 前言\nROS移动平台使用的是树莓派3B，资源有限，只能运行一些低级任务，又不具备显示器，想实时的看到ROS的运行情况只能依靠远程登录的方式。可以让PC负责运行界面，树莓派负责底层的传感器数据采集，比如激光雷达的数据采集，通过网络传给PC，PC上运行界面程序，将树莓派传过来的数据进行处理，并生成地图。要实现类似功能，需要进行多个运行ROS的设备间的通讯。\n<!--more-->\n# 配置\n首先保证 *raspberryPi* 与 *PC*在一个局域网内，并获取各自的 *IP* 地址。假设 *PC* 的 *IP*：192.168.2.102；*raspberryPi* 的 *IP*：192.168.2.105；之后查看各自的主机名,使用命令：\n　　```\n $hostname\n　　```\n假设 *PC* 的主机名为： *steven-laptop*,而 *raspberryPi* 的主机名为 *raspberry*。我们需要将各自的主机名通知对方。在 *raspberryPi* 中打开 */etc/hosts*文件加入 *PC* 的主机名以及IP地址：\n　　```\n 192.168.2.102 steven-laptop\n　　```\n同样在 *PC* 中告知 *raspberryPi* 的主机名和 *IP* 地址,修改*/etc/hosts*：\n　　```\n 192.168.2.105 raspberry\n　　```\n此时，可以使用:\n　　```\n $ping 对方主机名\n　　```\n进行连接测试。完成之后在 *PC* 中指定ROS通讯的主机名以及ROS服务器的地,让 *PC* 作为ROS服务器：\n　　```\nexport ROS_HOSTNAME=steven-laptop\nexport ROS_MASTER_URI=http://steven-laptop:11311\n　　```\n在 *raspberryPi* 中指定 *PC* 作为 *ROS Master*:\n　　```\nexport ROS_MASTER_URI=http://steven-laptop:11311\n　　```\n# 跨机运行talker/listenner\n做完以上配置，即可进行多机通信的测试。先在 *PC* 上开一个 *terminal* 运行 *roscore*:\n　　```\n $roscore & //'&'指后台运行\n　　```\n然后运行 *beginner_tutorials*(参考 [ROS tutorial](http://wiki.ros.org/cn/ROS/Tutorials)) 中的节点 *talker*;在  *raspberryPi* 中运行 *beginner_tutorials* 中的 *listenner* 节点。保证两个节点中发布的主题和订阅的主题名字一样。\n此时可以在 *raspberryPi* 中收到 *PC* 传过来的信息：\n![](ros-communication/talker.jpg)\n# 跨机运行turtlesim\n在PC上运行：\n　　```\n$roscore & \n$rosrun turtlesim turtlesim_node\n　　```\n在 *raspberryPi* 上使用键盘进行控制：\n　　```\n$rosrun turtlesim turtle_teleop_key\n　　```\n效果图：![](ros-communication/turtle.jpg)\n","source":"_posts/ros-communication.md","raw":"---\ntitle: ROS多机通信\ndate: 2017-05-22 20:43:31\ncategories: ROS\ntags: Communication\ncomments: true\n---\n# 前言\nROS移动平台使用的是树莓派3B，资源有限，只能运行一些低级任务，又不具备显示器，想实时的看到ROS的运行情况只能依靠远程登录的方式。可以让PC负责运行界面，树莓派负责底层的传感器数据采集，比如激光雷达的数据采集，通过网络传给PC，PC上运行界面程序，将树莓派传过来的数据进行处理，并生成地图。要实现类似功能，需要进行多个运行ROS的设备间的通讯。\n<!--more-->\n# 配置\n首先保证 *raspberryPi* 与 *PC*在一个局域网内，并获取各自的 *IP* 地址。假设 *PC* 的 *IP*：192.168.2.102；*raspberryPi* 的 *IP*：192.168.2.105；之后查看各自的主机名,使用命令：\n　　```\n $hostname\n　　```\n假设 *PC* 的主机名为： *steven-laptop*,而 *raspberryPi* 的主机名为 *raspberry*。我们需要将各自的主机名通知对方。在 *raspberryPi* 中打开 */etc/hosts*文件加入 *PC* 的主机名以及IP地址：\n　　```\n 192.168.2.102 steven-laptop\n　　```\n同样在 *PC* 中告知 *raspberryPi* 的主机名和 *IP* 地址,修改*/etc/hosts*：\n　　```\n 192.168.2.105 raspberry\n　　```\n此时，可以使用:\n　　```\n $ping 对方主机名\n　　```\n进行连接测试。完成之后在 *PC* 中指定ROS通讯的主机名以及ROS服务器的地,让 *PC* 作为ROS服务器：\n　　```\nexport ROS_HOSTNAME=steven-laptop\nexport ROS_MASTER_URI=http://steven-laptop:11311\n　　```\n在 *raspberryPi* 中指定 *PC* 作为 *ROS Master*:\n　　```\nexport ROS_MASTER_URI=http://steven-laptop:11311\n　　```\n# 跨机运行talker/listenner\n做完以上配置，即可进行多机通信的测试。先在 *PC* 上开一个 *terminal* 运行 *roscore*:\n　　```\n $roscore & //'&'指后台运行\n　　```\n然后运行 *beginner_tutorials*(参考 [ROS tutorial](http://wiki.ros.org/cn/ROS/Tutorials)) 中的节点 *talker*;在  *raspberryPi* 中运行 *beginner_tutorials* 中的 *listenner* 节点。保证两个节点中发布的主题和订阅的主题名字一样。\n此时可以在 *raspberryPi* 中收到 *PC* 传过来的信息：\n![](ros-communication/talker.jpg)\n# 跨机运行turtlesim\n在PC上运行：\n　　```\n$roscore & \n$rosrun turtlesim turtlesim_node\n　　```\n在 *raspberryPi* 上使用键盘进行控制：\n　　```\n$rosrun turtlesim turtle_teleop_key\n　　```\n效果图：![](ros-communication/turtle.jpg)\n","slug":"ros-communication","published":1,"updated":"2017-05-23T00:23:33.109Z","layout":"post","photos":[],"link":"","_id":"cj4hne52u0013w8ing48j69g2","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>ROS移动平台使用的是树莓派3B，资源有限，只能运行一些低级任务，又不具备显示器，想实时的看到ROS的运行情况只能依靠远程登录的方式。可以让PC负责运行界面，树莓派负责底层的传感器数据采集，比如激光雷达的数据采集，通过网络传给PC，PC上运行界面程序，将树莓派传过来的数据进行处理，并生成地图。要实现类似功能，需要进行多个运行ROS的设备间的通讯。<br><a id=\"more\"></a></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>首先保证 <em>raspberryPi</em> 与 <em>PC</em>在一个局域网内，并获取各自的 <em>IP</em> 地址。假设 <em>PC</em> 的 <em>IP</em>：192.168.2.102；<em>raspberryPi</em> 的 <em>IP</em>：192.168.2.105；之后查看各自的主机名,使用命令：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$hostname</span></span></div></pre></td></tr></table></figure></p>\n<p>假设 <em>PC</em> 的主机名为： <em>steven-laptop</em>,而 <em>raspberryPi</em> 的主机名为 <em>raspberry</em>。我们需要将各自的主机名通知对方。在 <em>raspberryPi</em> 中打开 <em>/etc/hosts</em>文件加入 <em>PC</em> 的主机名以及IP地址：<br>　　<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.2</span><span class=\"selector-class\">.102</span> <span class=\"selector-tag\">steven-laptop</span></div></pre></td></tr></table></figure></p>\n<p>同样在 <em>PC</em> 中告知 <em>raspberryPi</em> 的主机名和 <em>IP</em> 地址,修改<em>/etc/hosts</em>：<br>　　<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.2</span><span class=\"selector-class\">.105</span> <span class=\"selector-tag\">raspberry</span></div></pre></td></tr></table></figure></p>\n<p>此时，可以使用:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$ping</span> 对方主机名</span></div></pre></td></tr></table></figure></p>\n<p>进行连接测试。完成之后在 <em>PC</em> 中指定ROS通讯的主机名以及ROS服务器的地,让 <em>PC</em> 作为ROS服务器：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> ROS_HOSTNAME=steven-laptop</div><div class=\"line\"><span class=\"keyword\">export</span> ROS_MASTER_URI=http:<span class=\"comment\">//steven-laptop:11311</span></div></pre></td></tr></table></figure></p>\n<p>在 <em>raspberryPi</em> 中指定 <em>PC</em> 作为 <em>ROS Master</em>:<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> ROS_MASTER_URI=http:<span class=\"comment\">//steven-laptop:11311</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"跨机运行talker-listenner\"><a href=\"#跨机运行talker-listenner\" class=\"headerlink\" title=\"跨机运行talker/listenner\"></a>跨机运行talker/listenner</h1><p>做完以上配置，即可进行多机通信的测试。先在 <em>PC</em> 上开一个 <em>terminal</em> 运行 <em>roscore</em>:<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$roscore</span> &amp; <span class=\"regexp\">//</span><span class=\"string\">'&amp;'</span>指后台运行</div></pre></td></tr></table></figure></p>\n<p>然后运行 <em>beginner_tutorials</em>(参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials\" target=\"_blank\" rel=\"external\">ROS tutorial</a>) 中的节点 <em>talker</em>;在  <em>raspberryPi</em> 中运行 <em>beginner_tutorials</em> 中的 <em>listenner</em> 节点。保证两个节点中发布的主题和订阅的主题名字一样。<br>此时可以在 <em>raspberryPi</em> 中收到 <em>PC</em> 传过来的信息：<br><img src=\"/2017/05/22/ros-communication/talker.jpg\" alt=\"\"></p>\n<h1 id=\"跨机运行turtlesim\"><a href=\"#跨机运行turtlesim\" class=\"headerlink\" title=\"跨机运行turtlesim\"></a>跨机运行turtlesim</h1><p>在PC上运行：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscore</span> &amp; </span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>\n<p>在 <em>raspberryPi</em> 上使用键盘进行控制：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> turtlesim turtle_teleop_key</span></div></pre></td></tr></table></figure></p>\n<p>效果图：<img src=\"/2017/05/22/ros-communication/turtle.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>ROS移动平台使用的是树莓派3B，资源有限，只能运行一些低级任务，又不具备显示器，想实时的看到ROS的运行情况只能依靠远程登录的方式。可以让PC负责运行界面，树莓派负责底层的传感器数据采集，比如激光雷达的数据采集，通过网络传给PC，PC上运行界面程序，将树莓派传过来的数据进行处理，并生成地图。要实现类似功能，需要进行多个运行ROS的设备间的通讯。<br></p>","more":"<p></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>首先保证 <em>raspberryPi</em> 与 <em>PC</em>在一个局域网内，并获取各自的 <em>IP</em> 地址。假设 <em>PC</em> 的 <em>IP</em>：192.168.2.102；<em>raspberryPi</em> 的 <em>IP</em>：192.168.2.105；之后查看各自的主机名,使用命令：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$hostname</span></span></div></pre></td></tr></table></figure></p>\n<p>假设 <em>PC</em> 的主机名为： <em>steven-laptop</em>,而 <em>raspberryPi</em> 的主机名为 <em>raspberry</em>。我们需要将各自的主机名通知对方。在 <em>raspberryPi</em> 中打开 <em>/etc/hosts</em>文件加入 <em>PC</em> 的主机名以及IP地址：<br>　　<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.2</span><span class=\"selector-class\">.102</span> <span class=\"selector-tag\">steven-laptop</span></div></pre></td></tr></table></figure></p>\n<p>同样在 <em>PC</em> 中告知 <em>raspberryPi</em> 的主机名和 <em>IP</em> 地址,修改<em>/etc/hosts</em>：<br>　　<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.2</span><span class=\"selector-class\">.105</span> <span class=\"selector-tag\">raspberry</span></div></pre></td></tr></table></figure></p>\n<p>此时，可以使用:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$ping</span> 对方主机名</span></div></pre></td></tr></table></figure></p>\n<p>进行连接测试。完成之后在 <em>PC</em> 中指定ROS通讯的主机名以及ROS服务器的地,让 <em>PC</em> 作为ROS服务器：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> ROS_HOSTNAME=steven-laptop</div><div class=\"line\"><span class=\"keyword\">export</span> ROS_MASTER_URI=http:<span class=\"comment\">//steven-laptop:11311</span></div></pre></td></tr></table></figure></p>\n<p>在 <em>raspberryPi</em> 中指定 <em>PC</em> 作为 <em>ROS Master</em>:<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> ROS_MASTER_URI=http:<span class=\"comment\">//steven-laptop:11311</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"跨机运行talker-listenner\"><a href=\"#跨机运行talker-listenner\" class=\"headerlink\" title=\"跨机运行talker/listenner\"></a>跨机运行talker/listenner</h1><p>做完以上配置，即可进行多机通信的测试。先在 <em>PC</em> 上开一个 <em>terminal</em> 运行 <em>roscore</em>:<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$roscore</span> &amp; <span class=\"regexp\">//</span><span class=\"string\">'&amp;'</span>指后台运行</div></pre></td></tr></table></figure></p>\n<p>然后运行 <em>beginner_tutorials</em>(参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials\" target=\"_blank\" rel=\"external\">ROS tutorial</a>) 中的节点 <em>talker</em>;在  <em>raspberryPi</em> 中运行 <em>beginner_tutorials</em> 中的 <em>listenner</em> 节点。保证两个节点中发布的主题和订阅的主题名字一样。<br>此时可以在 <em>raspberryPi</em> 中收到 <em>PC</em> 传过来的信息：<br><img src=\"/2017/05/22/ros-communication/talker.jpg\" alt=\"\"></p>\n<h1 id=\"跨机运行turtlesim\"><a href=\"#跨机运行turtlesim\" class=\"headerlink\" title=\"跨机运行turtlesim\"></a>跨机运行turtlesim</h1><p>在PC上运行：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscore</span> &amp; </span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>\n<p>在 <em>raspberryPi</em> 上使用键盘进行控制：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> turtlesim turtle_teleop_key</span></div></pre></td></tr></table></figure></p>\n<p>效果图：<img src=\"/2017/05/22/ros-communication/turtle.jpg\" alt=\"\"></p>"},{"title":"树莓派3b安装ROS-Indigo","date":"2017-05-15T03:24:49.000Z","comments":1,"_content":"# 前言\n目前对于基于[ROS](http://www.ros.org/)的可移动平台，有两种方案较为流行，用户较多，可参考的资料也多。一种是使用英伟达的[TK1](http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html)，另外一种是使用[raspberryPi](https://www.raspberrypi.org/)。相对于[TK1](http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html)，树莓派在价格上更亲民，虽然性能上差一些，在计算[SLAM](https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%97%B6%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%9C%B0%E5%9B%BE%E6%9E%84%E5%BB%BA)时会有卡顿现象，但对于入门级用户来说，也是个不错的选择。\n<!--more-->\n# 树莓派3B上安装ROS-Indigo\n *环境*： *Raspbian OS Jessie*\n *硬件*： *raspberryPi 3B*以及一张*16G SD 卡*\n *参考*： [InstallROSIndigoOnRaspberryPi](http://wiki.ros.org/ROSberryPi/Installing%20ROS%20Indigo%20on%20Raspberry%20Pi)\n## 添加ROS代码仓\n添加ROS源以及key\n　　```\n $sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu jessie main\" > /etc/apt/sources.list.d/ros-latest.list'\n $wget https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -O - | sudo apt-key add -\n　　```\n## 更新\n　　```\n $sudo apt-get update\n $sudo apt-get upgrade\n　　```\n## 安装引导程序依赖项\n　　```\n $sudo apt-get install python-pip python-setuptools python-yaml python-distribute python-docutils python-dateutil python-six\n $sudo pip install rosdep rosinstall_generator wstool rosinstall\n　　```\n## 安装vim\n　　```\n $sudo apt-get install vim\n　　```\n## 增大swap空间\n修改/etc/dphys-swapfile文件，增大交换空间，以免编译ROS源码时出现内存不足现象。将CONF_SWAPSIZE 修改为 2048\n　　```\nCONF_SWAPSIZE=2048\n　　```\n## 初始化rosdep\n　　```\n $sudo rosdep init\n $rosdep update\n　　```\n## 创建workspace\n创建一个workspace用于存储和编译ROS源码\n　　```\n $mkdir ~/ros_catkin_ws\n $cd ~/ros_catkin_ws/\n\n　　```\n## 下载源码\n选择desktop完全版本\n　　```\n $rosinstall_generator desktop --rosdistro indigo --deps --wet-only --exclude roslisp --tar > indigo-desktop-wet.rosinstall\n $wstool init -j4 src indigo-desktop-wet.rosinstall\n　　```\n源代码将会保存在目录 *~/ros_catkin_ws/src* 下，*-j4*意思是开启4个线程同时下载。如果下载异常中断，可以尝试使用下面命令恢复：\n　　```\n $wstool update -j4 -t src\n　　```\n下载时间很漫长。\n## 解决ROS依赖\n在正式编译ROS之前，我们还需要手动安装以下几个依赖包：\n *libconsole-bridge-dev*\n *liblz4-dev*\n *liburdfdom-headers-dev* \n *liburdfdom-dev* \n *collada-dom-dev*\n为这些依赖包建立单独的用于编译安装的文件夹，同时安装checkinstall和cmake：\n　　```\n $mkdir ~/ros_catkin_ws/external_src\n $sudo apt-get install checkinstall cmake\n　　```\n如果无法安装，更新一下再安装：\n　　```\n $sudo apt-get update && sudo apt-get upgrade\n　　```\n然后添加：\n　　```\n $sudo sh -c 'echo \"deb-src http://mirrordirector.raspbian.org/raspbian/ testing main contrib non-free rpi\" >> /etc/apt/sources.list'\n　　```\n更新：\n　　```\n $sudo apt-get update\n　　```\n## 安装libconsole-bridge-dev\n　　```\n $cd ~/ros_catkin_ws/external_src\n $sudo apt-get build-dep console-bridge\n $apt-get source -b console-bridge\n $sudo dpkg -i libconsole-bridge0.2*.deb libconsole-bridge-dev_*.deb\n　　```\n## 安装liblz4-dev\n　　```\n $cd ~/ros_catkin_ws/external_src\n $apt-get source -b lz4 //获取，该步骤耗时很长\n $sudo dpkg -i liblz4-*.deb //安装\n　　```\n## 安装liburdfdom-headers-dev\n　　```　　\n $cd ~/ros_catkin_ws/external_src\n $git clone https://github.com/ros/urdfdom_headers.git\n $git reset --hard 9aed725\n $cd urdfdom_headers\n $cmake .\n $sudo checkinstall make installl\n　　```\n最后一步提示：\n　　```\nThe package documentation directory ./doc-pak does not exist.\nShould I create a default set of package docs?  [y]: y\nThis package will be built according to these values:\n\n0 -  Maintainer: [ root@raspberrypi ]\n1 -  Summary: [ Package created with checkinstall 1.6.2 ]\n2 -  Name:    [ urdfdom-headers ]\n3 -  Version: [ 20170318 ]\n4 -  Release: [ 1 ]\n5 -  License: [ GPL ]\n6 -  Group:   [ checkinstall ]\n7 -  Architecture: [ armhf ]\n8 -  Source location: [ urdfdom_headers ]\n9 -  Alternate source location: [  ]\n10 - Requires: [  ]\n11 - Provides: [ urdfdom-headers ]\n12 - Conflicts: [  ]\n13 - Replaces: [  ]\n　　```\n这里的'9aed725'就是将\"liburdfdom-headers-dev\"的安装版本变成我们需要的1.0.0版本。check-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从\"urdfdom-headers\" 改为 \"liburdfdom-headers-dev\"，其余有[y]或[n]的问题都输入'n'按回车， 否则会编译出错\n完成后检查安装的包是否正确:\n　　```\n $dpkg -l | grep urdf\n　　```\n如果正确会输出：\n　　```\nii  liburdfdom-headers-dev       20170318-1     armhf        Package created with checkinstall 1.6.2\n　　```\n## 安装liburdfdom-dev\n　　```\n $cd ~/ros_catkin_ws/external_src\n $sudo apt-get install libboost-test-dev libtinyxml-dev\n $git clone https://github.com/ros/urdfdom.git\n $cd urdfdom\n $cmake .\n $sudo checkinstall make install\n　　```\ncheck-install开始会让提示输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 \"urdfdom\"改为\"liburdfdom-dev\" ，其余有[y]或[n]的问题都输入'n'按回车， 否则会编译出错。\n编译出错提示找不到文件：utils.h\n添加一个文件(utils.h)到/usr/local/include/urdf_model目录下：\n　　```\n $cd /usr/local/include/urdf_model\n $sudo wget https://raw.githubusercontent.com/ros/urdfdom_headers/master/urdf_model/include/urdf_model/utils.h\n　　```\n重新编译\n## 安装collada-dom-dev\n　　```\n $cd ~/ros_catkin_ws/external_src\n $sudo apt-get install libboost-filesystem-dev libxml2-dev\n $wget http://downloads.sourceforge.net/project/collada-dom/Collada%20DOM/Collada%20DOM%202.4/collada-dom-2.4.0.tgz\n $tar -xzf collada-dom-2.4.0.tgz\n $cd collada-dom-2.4.0\n $cmake .\n $sudo checkinstall make install\n　　```\ncheck-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 \"collada-dom\"改为 \"collada-dom-dev\" ，其余有[y]或[n]的问题都输入'n'按回车， 否则会编译出错。\n## rosdep依赖\n　　```\n $cd ~/ros_catkin_ws\n $sudo rosdep init\n $rosdep update\n $rosdep install --from-paths src --ignore-src --rosdistro indigo -y -r --os=debian:Jessie\n\n　　```\n*rosdep install*命令会寻找所有src目录的package并递归安装依赖，要安装的依赖包有点多，耐心等待。rosdep会检查src文件夹，安装其他的依赖包。\n## 编译catkin工作空间\n在开始编译之前，先打两个补丁\n打开文件: \n　　```\n $vim ~/ros_catkin_ws/src/robot_model/collada_urdf/src/collada_urdf.cpp\n　　```\n在最后一个#include后添加\n　　```\n #ifdef __arm__  \n #include <strings.h>\n bool Assimp::IOSystem::ComparePaths(const char *p1, const char *p2) const  \n {  \n return !::strcasecmp(p1,p2);  \n } \n #endif\n　　```\n修改~/ros_catkin_ws/src/rviz/src/rviz/mesh_loader.cpp文件，在最后一个#include（如果#include的下一行是#endif则放到#endif后）行后加入以下代码\n　　```\n #ifdef __arm__                 // fix for ARM build\n #include <strings.h>\n bool Assimp::IOSystem::ComparePaths(const char *p1, const char *p2) const\n {\n    return !::strcasecmp(p1, p2);\n }\n #endif\n　　```\n编译：\n　　```\n $cd ~/ros_catkin_ws\n $sudo ./src/catkin/bin/catkin_make_isolated --install -DCMAKE_BUILD_TYPE=Release --install-space /opt/ros/indigo -j4\n\n　　```\n上面命令将编译文件安装到/opt/ros/indigo –j4是使用4个线程编译.\n## 出现的错误\n###error: ‘shared_ptr’ in namespace ‘std’ does not name a template type\n执行上面的编译命令提示错误：\n　　```\nin file included from /home/pi/ros_catkin_ws/src/robot_model/urdf/include/urdf/model.h:43:0, \n                 from /home/pi/ros_catkin_ws/src/robot_model/urdf/src/model.cpp:37: \n/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h:78:14: error: ‘shared_ptr’ in namespace ‘std’ does not name a template type \n typedef std::shared_ptr<ModelInterface> ModelInterfaceSharedPtr; \n              ^ \n/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h:79:14: error: ‘shared_ptr’ in namespace ‘std’ does not name a template type \n typedef std::shared_ptr<const ModelInterface> ModelInterfaceConstSharedPtr; \n              ^ \n/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h:80:14: error: ‘weak_ptr’ in namespace ‘std’ does not name a template type \n typedef std::weak_ptr<ModelInterface> ModelInterfaceWeakPtr; \n              ^ \nCMakeFiles/urdf.dir/build.make:62: recipe for target 'CMakeFiles/urdf.dir/src/model.cpp.o' failed\n\n　　```\n修改文件：\n/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h\n从78行开始到80行都屏蔽掉\n　　```\n /*\n typedef std::shared_ptr<ModelInterface> ModelInterfaceSharedPtr;\n typedef std::shared_ptr<const ModelInterface> ModelInterfaceConstSharedPtr;\n typedef std::weak_ptr<ModelInterface> ModelInterfaceWeakPtr;\n*/\n　　```\n再次编译成功。这个过程非常漫长。![](ros-indigo-raspberry/catkin.jpg)\n## 测试\n完成之后设置环境变量：\n　　```\n $source /opt/ros/indigo/setup.bash\n　　```\n设置ROS环境变量在每次启动shell时自动添加到bash会话\n　　```\n $echo \"source /opt/ros/indigo/setup.bash\" >> ~/.bashrc\n　　```\n到这里我们的ROS完整版就已经成功安装好了，不妨运行roscore试一下\n　　```\n $roscore\n　　```\n![](ros-indigo-raspberry/roscore.jpg)\n\n\n\n\n\n\n\n\n","source":"_posts/ros-indigo-raspberry.md","raw":"---\ntitle: 树莓派3b安装ROS-Indigo\ndate: 2017-05-15 11:24:49\ntags: raspberryPi ros-indigo jessie\ncategories: ROS\ncomments: true\n---\n# 前言\n目前对于基于[ROS](http://www.ros.org/)的可移动平台，有两种方案较为流行，用户较多，可参考的资料也多。一种是使用英伟达的[TK1](http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html)，另外一种是使用[raspberryPi](https://www.raspberrypi.org/)。相对于[TK1](http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html)，树莓派在价格上更亲民，虽然性能上差一些，在计算[SLAM](https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%97%B6%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%9C%B0%E5%9B%BE%E6%9E%84%E5%BB%BA)时会有卡顿现象，但对于入门级用户来说，也是个不错的选择。\n<!--more-->\n# 树莓派3B上安装ROS-Indigo\n *环境*： *Raspbian OS Jessie*\n *硬件*： *raspberryPi 3B*以及一张*16G SD 卡*\n *参考*： [InstallROSIndigoOnRaspberryPi](http://wiki.ros.org/ROSberryPi/Installing%20ROS%20Indigo%20on%20Raspberry%20Pi)\n## 添加ROS代码仓\n添加ROS源以及key\n　　```\n $sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu jessie main\" > /etc/apt/sources.list.d/ros-latest.list'\n $wget https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -O - | sudo apt-key add -\n　　```\n## 更新\n　　```\n $sudo apt-get update\n $sudo apt-get upgrade\n　　```\n## 安装引导程序依赖项\n　　```\n $sudo apt-get install python-pip python-setuptools python-yaml python-distribute python-docutils python-dateutil python-six\n $sudo pip install rosdep rosinstall_generator wstool rosinstall\n　　```\n## 安装vim\n　　```\n $sudo apt-get install vim\n　　```\n## 增大swap空间\n修改/etc/dphys-swapfile文件，增大交换空间，以免编译ROS源码时出现内存不足现象。将CONF_SWAPSIZE 修改为 2048\n　　```\nCONF_SWAPSIZE=2048\n　　```\n## 初始化rosdep\n　　```\n $sudo rosdep init\n $rosdep update\n　　```\n## 创建workspace\n创建一个workspace用于存储和编译ROS源码\n　　```\n $mkdir ~/ros_catkin_ws\n $cd ~/ros_catkin_ws/\n\n　　```\n## 下载源码\n选择desktop完全版本\n　　```\n $rosinstall_generator desktop --rosdistro indigo --deps --wet-only --exclude roslisp --tar > indigo-desktop-wet.rosinstall\n $wstool init -j4 src indigo-desktop-wet.rosinstall\n　　```\n源代码将会保存在目录 *~/ros_catkin_ws/src* 下，*-j4*意思是开启4个线程同时下载。如果下载异常中断，可以尝试使用下面命令恢复：\n　　```\n $wstool update -j4 -t src\n　　```\n下载时间很漫长。\n## 解决ROS依赖\n在正式编译ROS之前，我们还需要手动安装以下几个依赖包：\n *libconsole-bridge-dev*\n *liblz4-dev*\n *liburdfdom-headers-dev* \n *liburdfdom-dev* \n *collada-dom-dev*\n为这些依赖包建立单独的用于编译安装的文件夹，同时安装checkinstall和cmake：\n　　```\n $mkdir ~/ros_catkin_ws/external_src\n $sudo apt-get install checkinstall cmake\n　　```\n如果无法安装，更新一下再安装：\n　　```\n $sudo apt-get update && sudo apt-get upgrade\n　　```\n然后添加：\n　　```\n $sudo sh -c 'echo \"deb-src http://mirrordirector.raspbian.org/raspbian/ testing main contrib non-free rpi\" >> /etc/apt/sources.list'\n　　```\n更新：\n　　```\n $sudo apt-get update\n　　```\n## 安装libconsole-bridge-dev\n　　```\n $cd ~/ros_catkin_ws/external_src\n $sudo apt-get build-dep console-bridge\n $apt-get source -b console-bridge\n $sudo dpkg -i libconsole-bridge0.2*.deb libconsole-bridge-dev_*.deb\n　　```\n## 安装liblz4-dev\n　　```\n $cd ~/ros_catkin_ws/external_src\n $apt-get source -b lz4 //获取，该步骤耗时很长\n $sudo dpkg -i liblz4-*.deb //安装\n　　```\n## 安装liburdfdom-headers-dev\n　　```　　\n $cd ~/ros_catkin_ws/external_src\n $git clone https://github.com/ros/urdfdom_headers.git\n $git reset --hard 9aed725\n $cd urdfdom_headers\n $cmake .\n $sudo checkinstall make installl\n　　```\n最后一步提示：\n　　```\nThe package documentation directory ./doc-pak does not exist.\nShould I create a default set of package docs?  [y]: y\nThis package will be built according to these values:\n\n0 -  Maintainer: [ root@raspberrypi ]\n1 -  Summary: [ Package created with checkinstall 1.6.2 ]\n2 -  Name:    [ urdfdom-headers ]\n3 -  Version: [ 20170318 ]\n4 -  Release: [ 1 ]\n5 -  License: [ GPL ]\n6 -  Group:   [ checkinstall ]\n7 -  Architecture: [ armhf ]\n8 -  Source location: [ urdfdom_headers ]\n9 -  Alternate source location: [  ]\n10 - Requires: [  ]\n11 - Provides: [ urdfdom-headers ]\n12 - Conflicts: [  ]\n13 - Replaces: [  ]\n　　```\n这里的'9aed725'就是将\"liburdfdom-headers-dev\"的安装版本变成我们需要的1.0.0版本。check-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从\"urdfdom-headers\" 改为 \"liburdfdom-headers-dev\"，其余有[y]或[n]的问题都输入'n'按回车， 否则会编译出错\n完成后检查安装的包是否正确:\n　　```\n $dpkg -l | grep urdf\n　　```\n如果正确会输出：\n　　```\nii  liburdfdom-headers-dev       20170318-1     armhf        Package created with checkinstall 1.6.2\n　　```\n## 安装liburdfdom-dev\n　　```\n $cd ~/ros_catkin_ws/external_src\n $sudo apt-get install libboost-test-dev libtinyxml-dev\n $git clone https://github.com/ros/urdfdom.git\n $cd urdfdom\n $cmake .\n $sudo checkinstall make install\n　　```\ncheck-install开始会让提示输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 \"urdfdom\"改为\"liburdfdom-dev\" ，其余有[y]或[n]的问题都输入'n'按回车， 否则会编译出错。\n编译出错提示找不到文件：utils.h\n添加一个文件(utils.h)到/usr/local/include/urdf_model目录下：\n　　```\n $cd /usr/local/include/urdf_model\n $sudo wget https://raw.githubusercontent.com/ros/urdfdom_headers/master/urdf_model/include/urdf_model/utils.h\n　　```\n重新编译\n## 安装collada-dom-dev\n　　```\n $cd ~/ros_catkin_ws/external_src\n $sudo apt-get install libboost-filesystem-dev libxml2-dev\n $wget http://downloads.sourceforge.net/project/collada-dom/Collada%20DOM/Collada%20DOM%202.4/collada-dom-2.4.0.tgz\n $tar -xzf collada-dom-2.4.0.tgz\n $cd collada-dom-2.4.0\n $cmake .\n $sudo checkinstall make install\n　　```\ncheck-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 \"collada-dom\"改为 \"collada-dom-dev\" ，其余有[y]或[n]的问题都输入'n'按回车， 否则会编译出错。\n## rosdep依赖\n　　```\n $cd ~/ros_catkin_ws\n $sudo rosdep init\n $rosdep update\n $rosdep install --from-paths src --ignore-src --rosdistro indigo -y -r --os=debian:Jessie\n\n　　```\n*rosdep install*命令会寻找所有src目录的package并递归安装依赖，要安装的依赖包有点多，耐心等待。rosdep会检查src文件夹，安装其他的依赖包。\n## 编译catkin工作空间\n在开始编译之前，先打两个补丁\n打开文件: \n　　```\n $vim ~/ros_catkin_ws/src/robot_model/collada_urdf/src/collada_urdf.cpp\n　　```\n在最后一个#include后添加\n　　```\n #ifdef __arm__  \n #include <strings.h>\n bool Assimp::IOSystem::ComparePaths(const char *p1, const char *p2) const  \n {  \n return !::strcasecmp(p1,p2);  \n } \n #endif\n　　```\n修改~/ros_catkin_ws/src/rviz/src/rviz/mesh_loader.cpp文件，在最后一个#include（如果#include的下一行是#endif则放到#endif后）行后加入以下代码\n　　```\n #ifdef __arm__                 // fix for ARM build\n #include <strings.h>\n bool Assimp::IOSystem::ComparePaths(const char *p1, const char *p2) const\n {\n    return !::strcasecmp(p1, p2);\n }\n #endif\n　　```\n编译：\n　　```\n $cd ~/ros_catkin_ws\n $sudo ./src/catkin/bin/catkin_make_isolated --install -DCMAKE_BUILD_TYPE=Release --install-space /opt/ros/indigo -j4\n\n　　```\n上面命令将编译文件安装到/opt/ros/indigo –j4是使用4个线程编译.\n## 出现的错误\n###error: ‘shared_ptr’ in namespace ‘std’ does not name a template type\n执行上面的编译命令提示错误：\n　　```\nin file included from /home/pi/ros_catkin_ws/src/robot_model/urdf/include/urdf/model.h:43:0, \n                 from /home/pi/ros_catkin_ws/src/robot_model/urdf/src/model.cpp:37: \n/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h:78:14: error: ‘shared_ptr’ in namespace ‘std’ does not name a template type \n typedef std::shared_ptr<ModelInterface> ModelInterfaceSharedPtr; \n              ^ \n/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h:79:14: error: ‘shared_ptr’ in namespace ‘std’ does not name a template type \n typedef std::shared_ptr<const ModelInterface> ModelInterfaceConstSharedPtr; \n              ^ \n/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h:80:14: error: ‘weak_ptr’ in namespace ‘std’ does not name a template type \n typedef std::weak_ptr<ModelInterface> ModelInterfaceWeakPtr; \n              ^ \nCMakeFiles/urdf.dir/build.make:62: recipe for target 'CMakeFiles/urdf.dir/src/model.cpp.o' failed\n\n　　```\n修改文件：\n/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h\n从78行开始到80行都屏蔽掉\n　　```\n /*\n typedef std::shared_ptr<ModelInterface> ModelInterfaceSharedPtr;\n typedef std::shared_ptr<const ModelInterface> ModelInterfaceConstSharedPtr;\n typedef std::weak_ptr<ModelInterface> ModelInterfaceWeakPtr;\n*/\n　　```\n再次编译成功。这个过程非常漫长。![](ros-indigo-raspberry/catkin.jpg)\n## 测试\n完成之后设置环境变量：\n　　```\n $source /opt/ros/indigo/setup.bash\n　　```\n设置ROS环境变量在每次启动shell时自动添加到bash会话\n　　```\n $echo \"source /opt/ros/indigo/setup.bash\" >> ~/.bashrc\n　　```\n到这里我们的ROS完整版就已经成功安装好了，不妨运行roscore试一下\n　　```\n $roscore\n　　```\n![](ros-indigo-raspberry/roscore.jpg)\n\n\n\n\n\n\n\n\n","slug":"ros-indigo-raspberry","published":1,"updated":"2017-05-15T08:12:20.396Z","layout":"post","photos":[],"link":"","_id":"cj4hne52y0016w8inom70754m","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>目前对于基于<a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a>的可移动平台，有两种方案较为流行，用户较多，可参考的资料也多。一种是使用英伟达的<a href=\"http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html\" target=\"_blank\" rel=\"external\">TK1</a>，另外一种是使用<a href=\"https://www.raspberrypi.org/\" target=\"_blank\" rel=\"external\">raspberryPi</a>。相对于<a href=\"http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html\" target=\"_blank\" rel=\"external\">TK1</a>，树莓派在价格上更亲民，虽然性能上差一些，在计算<a href=\"https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%97%B6%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%9C%B0%E5%9B%BE%E6%9E%84%E5%BB%BA\" target=\"_blank\" rel=\"external\">SLAM</a>时会有卡顿现象，但对于入门级用户来说，也是个不错的选择。<br><a id=\"more\"></a></p>\n<h1 id=\"树莓派3B上安装ROS-Indigo\"><a href=\"#树莓派3B上安装ROS-Indigo\" class=\"headerlink\" title=\"树莓派3B上安装ROS-Indigo\"></a>树莓派3B上安装ROS-Indigo</h1><p> <em>环境</em>： <em>Raspbian OS Jessie</em><br> <em>硬件</em>： <em>raspberryPi 3B</em>以及一张<em>16G SD 卡</em><br> <em>参考</em>： <a href=\"http://wiki.ros.org/ROSberryPi/Installing%20ROS%20Indigo%20on%20Raspberry%20Pi\" target=\"_blank\" rel=\"external\">InstallROSIndigoOnRaspberryPi</a></p>\n<h2 id=\"添加ROS代码仓\"><a href=\"#添加ROS代码仓\" class=\"headerlink\" title=\"添加ROS代码仓\"></a>添加ROS代码仓</h2><p>添加ROS源以及key<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> <span class=\"keyword\">sh</span> -c 'echo <span class=\"string\">\"deb http://packages.ros.org/ros/ubuntu jessie main\"</span> &gt; /etc/apt/sources.<span class=\"keyword\">list</span>.<span class=\"keyword\">d</span>/ros-latest.<span class=\"keyword\">list</span>'</div><div class=\"line\"><span class=\"variable\">$wget</span> https:<span class=\"comment\">//raw.githubusercontent.com/ros/rosdistro/master/ros.key -O - | sudo apt-key add -</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get update</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get upgrade</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装引导程序依赖项\"><a href=\"#安装引导程序依赖项\" class=\"headerlink\" title=\"安装引导程序依赖项\"></a>安装引导程序依赖项</h2><p>　　<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-get install <span class=\"keyword\">python</span>-pip <span class=\"keyword\">python</span>-setuptools <span class=\"keyword\">python</span>-yaml <span class=\"keyword\">python</span>-distribute <span class=\"keyword\">python</span>-docutils <span class=\"keyword\">python</span>-dateutil <span class=\"keyword\">python</span>-six</div><div class=\"line\">$sudo pip install rosdep rosinstall_generator wstool rosinstall</div></pre></td></tr></table></figure></p>\n<h2 id=\"安装vim\"><a href=\"#安装vim\" class=\"headerlink\" title=\"安装vim\"></a>安装vim</h2><p>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install vim</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"增大swap空间\"><a href=\"#增大swap空间\" class=\"headerlink\" title=\"增大swap空间\"></a>增大swap空间</h2><p>修改/etc/dphys-swapfile文件，增大交换空间，以免编译ROS源码时出现内存不足现象。将CONF_SWAPSIZE 修改为 2048<br>　　<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">CONF_SWAPSIZE</span>=<span class=\"number\">2048</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"初始化rosdep\"><a href=\"#初始化rosdep\" class=\"headerlink\" title=\"初始化rosdep\"></a>初始化rosdep</h2><p>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> rosdep init</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosdep</span> update</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"创建workspace\"><a href=\"#创建workspace\" class=\"headerlink\" title=\"创建workspace\"></a>创建workspace</h2><p>创建一个workspace用于存储和编译ROS源码<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">mkdir ~/ros_catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h2><p>选择desktop完全版本<br>　　<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">$rosinstall_generator</span> <span class=\"comment\">desktop</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">rosdistro</span> <span class=\"comment\">indigo</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">deps</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">wet</span><span class=\"literal\">-</span><span class=\"comment\">only</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">exclude</span> <span class=\"comment\">roslisp</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">tar</span> &gt; <span class=\"comment\">indigo</span><span class=\"literal\">-</span><span class=\"comment\">desktop</span><span class=\"literal\">-</span><span class=\"comment\">wet</span><span class=\"string\">.</span><span class=\"comment\">rosinstall</span></div><div class=\"line\"><span class=\"comment\">$wstool</span> <span class=\"comment\">init</span> <span class=\"literal\">-</span><span class=\"comment\">j4</span> <span class=\"comment\">src</span> <span class=\"comment\">indigo</span><span class=\"literal\">-</span><span class=\"comment\">desktop</span><span class=\"literal\">-</span><span class=\"comment\">wet</span><span class=\"string\">.</span><span class=\"comment\">rosinstall</span></div></pre></td></tr></table></figure></p>\n<p>源代码将会保存在目录 <em>~/ros_catkin_ws/src</em> 下，<em>-j4</em>意思是开启4个线程同时下载。如果下载异常中断，可以尝试使用下面命令恢复：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$wstool</span> update -j4 -t src</span></div></pre></td></tr></table></figure></p>\n<p>下载时间很漫长。</p>\n<h2 id=\"解决ROS依赖\"><a href=\"#解决ROS依赖\" class=\"headerlink\" title=\"解决ROS依赖\"></a>解决ROS依赖</h2><p>在正式编译ROS之前，我们还需要手动安装以下几个依赖包：<br> <em>libconsole-bridge-dev</em><br> <em>liblz4-dev</em><br> <em>liburdfdom-headers-dev</em><br> <em>liburdfdom-dev</em><br> <em>collada-dom-dev</em><br>为这些依赖包建立单独的用于编译安装的文件夹，同时安装checkinstall和cmake：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$mkdir</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install checkinstall cmake</span></div></pre></td></tr></table></figure></p>\n<p>如果无法安装，更新一下再安装：<br>　　<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span> &amp;&amp; sudo apt-<span class=\"built_in\">get</span> upgrade</div></pre></td></tr></table></figure></p>\n<p>然后添加：<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> <span class=\"keyword\">sh</span> -c 'echo <span class=\"string\">\"deb-src http://mirrordirector.raspbian.org/raspbian/ testing main contrib non-free rpi\"</span> &gt;&gt; /etc/apt/sources.<span class=\"keyword\">list</span>'</div></pre></td></tr></table></figure></p>\n<p>更新：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get update</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装libconsole-bridge-dev\"><a href=\"#安装libconsole-bridge-dev\" class=\"headerlink\" title=\"安装libconsole-bridge-dev\"></a>安装libconsole-bridge-dev</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo apt-get build-dep console-bridge</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">apt-get <span class=\"built_in\">source</span> -b console-bridge</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo dpkg -i libconsole-bridge0.2*.deb libconsole-bridge-dev_*.deb</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装liblz4-dev\"><a href=\"#安装liblz4-dev\" class=\"headerlink\" title=\"安装liblz4-dev\"></a>安装liblz4-dev</h2><p>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> ~/ros_catkin_ws/external_src</div><div class=\"line\"><span class=\"variable\">$apt</span>-get source -<span class=\"selector-tag\">b</span> lz4 <span class=\"comment\">//获取，该步骤耗时很长</span></div><div class=\"line\"><span class=\"variable\">$sudo</span> dpkg -<span class=\"selector-tag\">i</span> liblz4-*<span class=\"selector-class\">.deb</span> <span class=\"comment\">//安装</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装liburdfdom-headers-dev\"><a href=\"#安装liburdfdom-headers-dev\" class=\"headerlink\" title=\"安装liburdfdom-headers-dev\"></a>安装liburdfdom-headers-dev</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git <span class=\"built_in\">clone</span> https://github.com/ros/urdfdom_headers.git</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git reset --hard 9aed725</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> urdfdom_headers</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo checkinstall make installl</span></div></pre></td></tr></table></figure></p>\n<p>最后一步提示：<br>　　<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">The <span class=\"keyword\">package</span> documentation directory ./doc-pak does not exist.</div><div class=\"line\">Should I create a <span class=\"keyword\">default</span> set of <span class=\"keyword\">package</span> docs?  [y]: y</div><div class=\"line\">This <span class=\"keyword\">package</span> will be built according to these <span class=\"string\">values:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">0</span> -  <span class=\"string\">Maintainer:</span> [ root<span class=\"meta\">@raspberrypi</span> ]</div><div class=\"line\"><span class=\"number\">1</span> -  <span class=\"string\">Summary:</span> [ Package created with checkinstall <span class=\"number\">1.6</span><span class=\"number\">.2</span> ]</div><div class=\"line\"><span class=\"number\">2</span> -  <span class=\"string\">Name:</span>    [ urdfdom-headers ]</div><div class=\"line\"><span class=\"number\">3</span> -  <span class=\"string\">Version:</span> [ <span class=\"number\">20170318</span> ]</div><div class=\"line\"><span class=\"number\">4</span> -  <span class=\"string\">Release:</span> [ <span class=\"number\">1</span> ]</div><div class=\"line\"><span class=\"number\">5</span> -  <span class=\"string\">License:</span> [ GPL ]</div><div class=\"line\"><span class=\"number\">6</span> -  <span class=\"string\">Group:</span>   [ checkinstall ]</div><div class=\"line\"><span class=\"number\">7</span> -  <span class=\"string\">Architecture:</span> [ armhf ]</div><div class=\"line\"><span class=\"number\">8</span> -  Source <span class=\"string\">location:</span> [ urdfdom_headers ]</div><div class=\"line\"><span class=\"number\">9</span> -  Alternate source <span class=\"string\">location:</span> [  ]</div><div class=\"line\"><span class=\"number\">10</span> - <span class=\"string\">Requires:</span> [  ]</div><div class=\"line\"><span class=\"number\">11</span> - <span class=\"string\">Provides:</span> [ urdfdom-headers ]</div><div class=\"line\"><span class=\"number\">12</span> - <span class=\"string\">Conflicts:</span> [  ]</div><div class=\"line\"><span class=\"number\">13</span> - <span class=\"string\">Replaces:</span> [  ]</div></pre></td></tr></table></figure></p>\n<p>这里的’9aed725’就是将”liburdfdom-headers-dev”的安装版本变成我们需要的1.0.0版本。check-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从”urdfdom-headers” 改为 “liburdfdom-headers-dev”，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错<br>完成后检查安装的包是否正确:<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">dpkg <span class=\"_\">-l</span> | grep urdf</span></div></pre></td></tr></table></figure></p>\n<p>如果正确会输出：<br>　　<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ii  liburdfdom-headers-dev       <span class=\"number\">20170318</span><span class=\"number\">-1</span>     armhf        Package created with checkinstall <span class=\"number\">1.6</span><span class=\"number\">.2</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装liburdfdom-dev\"><a href=\"#安装liburdfdom-dev\" class=\"headerlink\" title=\"安装liburdfdom-dev\"></a>安装liburdfdom-dev</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo apt-get install libboost-test-dev libtinyxml-dev</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git <span class=\"built_in\">clone</span> https://github.com/ros/urdfdom.git</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> urdfdom</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo checkinstall make install</span></div></pre></td></tr></table></figure></p>\n<p>check-install开始会让提示输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 “urdfdom”改为”liburdfdom-dev” ，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错。<br>编译出错提示找不到文件：utils.h<br>添加一个文件(utils.h)到/usr/local/include/urdf_model目录下：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/include/u</span>rdf_model</div><div class=\"line\"><span class=\"variable\">$sudo</span> wget https:<span class=\"regexp\">//</span>raw.githubusercontent.com<span class=\"regexp\">/ros/u</span>rdfdom_headers<span class=\"regexp\">/master/u</span>rdf_model<span class=\"regexp\">/include/u</span>rdf_model<span class=\"regexp\">/utils.h</span></div></pre></td></tr></table></figure></p>\n<p>重新编译</p>\n<h2 id=\"安装collada-dom-dev\"><a href=\"#安装collada-dom-dev\" class=\"headerlink\" title=\"安装collada-dom-dev\"></a>安装collada-dom-dev</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo apt-get install libboost-filesystem-dev libxml2-dev</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">wget http://downloads.sourceforge.net/project/collada-dom/Collada%20DOM/Collada%20DOM%202.4/collada-dom-2.4.0.tgz</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">tar -xzf collada-dom-2.4.0.tgz</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> collada-dom-2.4.0</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo checkinstall make install</span></div></pre></td></tr></table></figure></p>\n<p>check-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 “collada-dom”改为 “collada-dom-dev” ，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错。</p>\n<h2 id=\"rosdep依赖\"><a href=\"#rosdep依赖\" class=\"headerlink\" title=\"rosdep依赖\"></a>rosdep依赖</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo rosdep init</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">rosdep update</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">rosdep install --from-paths src --ignore-src --rosdistro indigo -y -r --os=debian:Jessie</span></div></pre></td></tr></table></figure></p>\n<p><em>rosdep install</em>命令会寻找所有src目录的package并递归安装依赖，要安装的依赖包有点多，耐心等待。rosdep会检查src文件夹，安装其他的依赖包。</p>\n<h2 id=\"编译catkin工作空间\"><a href=\"#编译catkin工作空间\" class=\"headerlink\" title=\"编译catkin工作空间\"></a>编译catkin工作空间</h2><p>在开始编译之前，先打两个补丁<br>打开文件:<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$vim</span> ~<span class=\"regexp\">/ros_catkin_ws/</span>src<span class=\"regexp\">/robot_model/</span>collada_urdf<span class=\"regexp\">/src/</span>collada_urdf.cpp</div></pre></td></tr></table></figure></p>\n<p>在最后一个#include后添加<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __arm__  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;strings.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">bool</span> Assimp::IOSystem::ComparePaths(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p1, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p2) <span class=\"keyword\">const</span>  </div><div class=\"line\">&#123;  </div><div class=\"line\"><span class=\"keyword\">return</span> !::strcasecmp(p1,p2);  </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<p>修改~/ros_catkin_ws/src/rviz/src/rviz/mesh_loader.cpp文件，在最后一个#include（如果#include的下一行是#endif则放到#endif后）行后加入以下代码<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __arm__                 <span class=\"comment\">// fix for ARM build</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;strings.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">bool</span> Assimp::IOSystem::ComparePaths(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p1, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p2) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> !::strcasecmp(p1, p2);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<p>编译：<br>　　<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$<span class=\"keyword\">cd</span> ~<span class=\"string\">/ros_catkin_ws</span></div><div class=\"line\">$sudo <span class=\"string\">./src/catkin/bin/catkin_make_isolated</span> <span class=\"params\">--install</span> -DCMAKE_BUILD_TYPE=Release <span class=\"params\">--install-space</span> <span class=\"string\">/opt/ros/indigo</span> -j4</div></pre></td></tr></table></figure></p>\n<p>上面命令将编译文件安装到/opt/ros/indigo –j4是使用4个线程编译.</p>\n<h2 id=\"出现的错误\"><a href=\"#出现的错误\" class=\"headerlink\" title=\"出现的错误\"></a>出现的错误</h2><p>###error: ‘shared_ptr’ in namespace ‘std’ does not name a template type<br>执行上面的编译命令提示错误：<br>　　<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">in</span> file included from <span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>src<span class=\"regexp\">/robot_model/</span>urdf<span class=\"regexp\">/include/</span>urdf/model.<span class=\"string\">h:</span><span class=\"number\">43</span>:<span class=\"number\">0</span>, </div><div class=\"line\">                 from <span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>src<span class=\"regexp\">/robot_model/</span>urdf<span class=\"regexp\">/src/</span>model.<span class=\"string\">cpp:</span><span class=\"number\">37</span>: </div><div class=\"line\"><span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>devel_isolated<span class=\"regexp\">/urdf/</span>include<span class=\"regexp\">/urdf/</span>urdfdom_compatibility.<span class=\"string\">h:</span><span class=\"number\">78</span>:<span class=\"number\">14</span>: <span class=\"string\">error:</span> ‘shared_ptr’ <span class=\"keyword\">in</span> namespace ‘std’ does not name a template type </div><div class=\"line\"> typedef <span class=\"string\">std:</span>:shared_ptr&lt;ModelInterface&gt; ModelInterfaceSharedPtr; </div><div class=\"line\">              ^ </div><div class=\"line\"><span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>devel_isolated<span class=\"regexp\">/urdf/</span>include<span class=\"regexp\">/urdf/</span>urdfdom_compatibility.<span class=\"string\">h:</span><span class=\"number\">79</span>:<span class=\"number\">14</span>: <span class=\"string\">error:</span> ‘shared_ptr’ <span class=\"keyword\">in</span> namespace ‘std’ does not name a template type </div><div class=\"line\"> typedef <span class=\"string\">std:</span>:shared_ptr&lt;const ModelInterface&gt; ModelInterfaceConstSharedPtr; </div><div class=\"line\">              ^ </div><div class=\"line\"><span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>devel_isolated<span class=\"regexp\">/urdf/</span>include<span class=\"regexp\">/urdf/</span>urdfdom_compatibility.<span class=\"string\">h:</span><span class=\"number\">80</span>:<span class=\"number\">14</span>: <span class=\"string\">error:</span> ‘weak_ptr’ <span class=\"keyword\">in</span> namespace ‘std’ does not name a template type </div><div class=\"line\"> typedef <span class=\"string\">std:</span>:weak_ptr&lt;ModelInterface&gt; ModelInterfaceWeakPtr; </div><div class=\"line\">              ^ </div><div class=\"line\">CMakeFiles<span class=\"regexp\">/urdf.dir/</span>build.<span class=\"string\">make:</span><span class=\"number\">62</span>: recipe <span class=\"keyword\">for</span> target <span class=\"string\">'CMakeFiles/urdf.dir/src/model.cpp.o'</span> failed</div></pre></td></tr></table></figure></p>\n<p>修改文件：<br>/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h<br>从78行开始到80行都屏蔽掉<br>　　<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> /*</div><div class=\"line\"> typedef <span class=\"symbol\">std:</span><span class=\"symbol\">:shared_ptr&lt;ModelInterface&gt;</span> ModelInterfaceSharedPtr;</div><div class=\"line\"> typedef <span class=\"symbol\">std:</span><span class=\"symbol\">:shared_ptr&lt;const</span> ModelInterface&gt; ModelInterfaceConstSharedPtr;</div><div class=\"line\"> typedef <span class=\"symbol\">std:</span><span class=\"symbol\">:weak_ptr&lt;ModelInterface&gt;</span> ModelInterfaceWeakPtr;</div><div class=\"line\">*<span class=\"regexp\">/</span></div></pre></td></tr></table></figure></p>\n<p>再次编译成功。这个过程非常漫长。<img src=\"/2017/05/15/ros-indigo-raspberry/catkin.jpg\" alt=\"\"></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>完成之后设置环境变量：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$source</span> <span class=\"regexp\">/opt/</span>ros<span class=\"regexp\">/indigo/</span>setup.bash</div></pre></td></tr></table></figure></p>\n<p>设置ROS环境变量在每次启动shell时自动添加到bash会话<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">echo</span> <span class=\"string\">\"source /opt/ros/indigo/setup.bash\"</span> &gt;&gt; ~/.bashrc</span></div></pre></td></tr></table></figure></p>\n<p>到这里我们的ROS完整版就已经成功安装好了，不妨运行roscore试一下<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscore</span></span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/15/ros-indigo-raspberry/roscore.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>目前对于基于<a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a>的可移动平台，有两种方案较为流行，用户较多，可参考的资料也多。一种是使用英伟达的<a href=\"http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html\" target=\"_blank\" rel=\"external\">TK1</a>，另外一种是使用<a href=\"https://www.raspberrypi.org/\" target=\"_blank\" rel=\"external\">raspberryPi</a>。相对于<a href=\"http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html\" target=\"_blank\" rel=\"external\">TK1</a>，树莓派在价格上更亲民，虽然性能上差一些，在计算<a href=\"https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%97%B6%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%9C%B0%E5%9B%BE%E6%9E%84%E5%BB%BA\" target=\"_blank\" rel=\"external\">SLAM</a>时会有卡顿现象，但对于入门级用户来说，也是个不错的选择。<br></p>","more":"<p></p>\n<h1 id=\"树莓派3B上安装ROS-Indigo\"><a href=\"#树莓派3B上安装ROS-Indigo\" class=\"headerlink\" title=\"树莓派3B上安装ROS-Indigo\"></a>树莓派3B上安装ROS-Indigo</h1><p> <em>环境</em>： <em>Raspbian OS Jessie</em><br> <em>硬件</em>： <em>raspberryPi 3B</em>以及一张<em>16G SD 卡</em><br> <em>参考</em>： <a href=\"http://wiki.ros.org/ROSberryPi/Installing%20ROS%20Indigo%20on%20Raspberry%20Pi\" target=\"_blank\" rel=\"external\">InstallROSIndigoOnRaspberryPi</a></p>\n<h2 id=\"添加ROS代码仓\"><a href=\"#添加ROS代码仓\" class=\"headerlink\" title=\"添加ROS代码仓\"></a>添加ROS代码仓</h2><p>添加ROS源以及key<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> <span class=\"keyword\">sh</span> -c 'echo <span class=\"string\">\"deb http://packages.ros.org/ros/ubuntu jessie main\"</span> &gt; /etc/apt/sources.<span class=\"keyword\">list</span>.<span class=\"keyword\">d</span>/ros-latest.<span class=\"keyword\">list</span>'</div><div class=\"line\"><span class=\"variable\">$wget</span> https:<span class=\"comment\">//raw.githubusercontent.com/ros/rosdistro/master/ros.key -O - | sudo apt-key add -</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get update</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get upgrade</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装引导程序依赖项\"><a href=\"#安装引导程序依赖项\" class=\"headerlink\" title=\"安装引导程序依赖项\"></a>安装引导程序依赖项</h2><p>　　<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-get install <span class=\"keyword\">python</span>-pip <span class=\"keyword\">python</span>-setuptools <span class=\"keyword\">python</span>-yaml <span class=\"keyword\">python</span>-distribute <span class=\"keyword\">python</span>-docutils <span class=\"keyword\">python</span>-dateutil <span class=\"keyword\">python</span>-six</div><div class=\"line\">$sudo pip install rosdep rosinstall_generator wstool rosinstall</div></pre></td></tr></table></figure></p>\n<h2 id=\"安装vim\"><a href=\"#安装vim\" class=\"headerlink\" title=\"安装vim\"></a>安装vim</h2><p>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install vim</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"增大swap空间\"><a href=\"#增大swap空间\" class=\"headerlink\" title=\"增大swap空间\"></a>增大swap空间</h2><p>修改/etc/dphys-swapfile文件，增大交换空间，以免编译ROS源码时出现内存不足现象。将CONF_SWAPSIZE 修改为 2048<br>　　<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">CONF_SWAPSIZE</span>=<span class=\"number\">2048</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"初始化rosdep\"><a href=\"#初始化rosdep\" class=\"headerlink\" title=\"初始化rosdep\"></a>初始化rosdep</h2><p>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> rosdep init</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosdep</span> update</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"创建workspace\"><a href=\"#创建workspace\" class=\"headerlink\" title=\"创建workspace\"></a>创建workspace</h2><p>创建一个workspace用于存储和编译ROS源码<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">mkdir ~/ros_catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h2><p>选择desktop完全版本<br>　　<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">$rosinstall_generator</span> <span class=\"comment\">desktop</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">rosdistro</span> <span class=\"comment\">indigo</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">deps</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">wet</span><span class=\"literal\">-</span><span class=\"comment\">only</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">exclude</span> <span class=\"comment\">roslisp</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">tar</span> &gt; <span class=\"comment\">indigo</span><span class=\"literal\">-</span><span class=\"comment\">desktop</span><span class=\"literal\">-</span><span class=\"comment\">wet</span><span class=\"string\">.</span><span class=\"comment\">rosinstall</span></div><div class=\"line\"><span class=\"comment\">$wstool</span> <span class=\"comment\">init</span> <span class=\"literal\">-</span><span class=\"comment\">j4</span> <span class=\"comment\">src</span> <span class=\"comment\">indigo</span><span class=\"literal\">-</span><span class=\"comment\">desktop</span><span class=\"literal\">-</span><span class=\"comment\">wet</span><span class=\"string\">.</span><span class=\"comment\">rosinstall</span></div></pre></td></tr></table></figure></p>\n<p>源代码将会保存在目录 <em>~/ros_catkin_ws/src</em> 下，<em>-j4</em>意思是开启4个线程同时下载。如果下载异常中断，可以尝试使用下面命令恢复：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$wstool</span> update -j4 -t src</span></div></pre></td></tr></table></figure></p>\n<p>下载时间很漫长。</p>\n<h2 id=\"解决ROS依赖\"><a href=\"#解决ROS依赖\" class=\"headerlink\" title=\"解决ROS依赖\"></a>解决ROS依赖</h2><p>在正式编译ROS之前，我们还需要手动安装以下几个依赖包：<br> <em>libconsole-bridge-dev</em><br> <em>liblz4-dev</em><br> <em>liburdfdom-headers-dev</em><br> <em>liburdfdom-dev</em><br> <em>collada-dom-dev</em><br>为这些依赖包建立单独的用于编译安装的文件夹，同时安装checkinstall和cmake：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$mkdir</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install checkinstall cmake</span></div></pre></td></tr></table></figure></p>\n<p>如果无法安装，更新一下再安装：<br>　　<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span> &amp;&amp; sudo apt-<span class=\"built_in\">get</span> upgrade</div></pre></td></tr></table></figure></p>\n<p>然后添加：<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> <span class=\"keyword\">sh</span> -c 'echo <span class=\"string\">\"deb-src http://mirrordirector.raspbian.org/raspbian/ testing main contrib non-free rpi\"</span> &gt;&gt; /etc/apt/sources.<span class=\"keyword\">list</span>'</div></pre></td></tr></table></figure></p>\n<p>更新：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get update</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装libconsole-bridge-dev\"><a href=\"#安装libconsole-bridge-dev\" class=\"headerlink\" title=\"安装libconsole-bridge-dev\"></a>安装libconsole-bridge-dev</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo apt-get build-dep console-bridge</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">apt-get <span class=\"built_in\">source</span> -b console-bridge</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo dpkg -i libconsole-bridge0.2*.deb libconsole-bridge-dev_*.deb</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装liblz4-dev\"><a href=\"#安装liblz4-dev\" class=\"headerlink\" title=\"安装liblz4-dev\"></a>安装liblz4-dev</h2><p>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> ~/ros_catkin_ws/external_src</div><div class=\"line\"><span class=\"variable\">$apt</span>-get source -<span class=\"selector-tag\">b</span> lz4 <span class=\"comment\">//获取，该步骤耗时很长</span></div><div class=\"line\"><span class=\"variable\">$sudo</span> dpkg -<span class=\"selector-tag\">i</span> liblz4-*<span class=\"selector-class\">.deb</span> <span class=\"comment\">//安装</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装liburdfdom-headers-dev\"><a href=\"#安装liburdfdom-headers-dev\" class=\"headerlink\" title=\"安装liburdfdom-headers-dev\"></a>安装liburdfdom-headers-dev</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git <span class=\"built_in\">clone</span> https://github.com/ros/urdfdom_headers.git</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git reset --hard 9aed725</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> urdfdom_headers</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo checkinstall make installl</span></div></pre></td></tr></table></figure></p>\n<p>最后一步提示：<br>　　<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">The <span class=\"keyword\">package</span> documentation directory ./doc-pak does not exist.</div><div class=\"line\">Should I create a <span class=\"keyword\">default</span> set of <span class=\"keyword\">package</span> docs?  [y]: y</div><div class=\"line\">This <span class=\"keyword\">package</span> will be built according to these <span class=\"string\">values:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">0</span> -  <span class=\"string\">Maintainer:</span> [ root<span class=\"meta\">@raspberrypi</span> ]</div><div class=\"line\"><span class=\"number\">1</span> -  <span class=\"string\">Summary:</span> [ Package created with checkinstall <span class=\"number\">1.6</span><span class=\"number\">.2</span> ]</div><div class=\"line\"><span class=\"number\">2</span> -  <span class=\"string\">Name:</span>    [ urdfdom-headers ]</div><div class=\"line\"><span class=\"number\">3</span> -  <span class=\"string\">Version:</span> [ <span class=\"number\">20170318</span> ]</div><div class=\"line\"><span class=\"number\">4</span> -  <span class=\"string\">Release:</span> [ <span class=\"number\">1</span> ]</div><div class=\"line\"><span class=\"number\">5</span> -  <span class=\"string\">License:</span> [ GPL ]</div><div class=\"line\"><span class=\"number\">6</span> -  <span class=\"string\">Group:</span>   [ checkinstall ]</div><div class=\"line\"><span class=\"number\">7</span> -  <span class=\"string\">Architecture:</span> [ armhf ]</div><div class=\"line\"><span class=\"number\">8</span> -  Source <span class=\"string\">location:</span> [ urdfdom_headers ]</div><div class=\"line\"><span class=\"number\">9</span> -  Alternate source <span class=\"string\">location:</span> [  ]</div><div class=\"line\"><span class=\"number\">10</span> - <span class=\"string\">Requires:</span> [  ]</div><div class=\"line\"><span class=\"number\">11</span> - <span class=\"string\">Provides:</span> [ urdfdom-headers ]</div><div class=\"line\"><span class=\"number\">12</span> - <span class=\"string\">Conflicts:</span> [  ]</div><div class=\"line\"><span class=\"number\">13</span> - <span class=\"string\">Replaces:</span> [  ]</div></pre></td></tr></table></figure></p>\n<p>这里的’9aed725’就是将”liburdfdom-headers-dev”的安装版本变成我们需要的1.0.0版本。check-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从”urdfdom-headers” 改为 “liburdfdom-headers-dev”，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错<br>完成后检查安装的包是否正确:<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">dpkg <span class=\"_\">-l</span> | grep urdf</span></div></pre></td></tr></table></figure></p>\n<p>如果正确会输出：<br>　　<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ii  liburdfdom-headers-dev       <span class=\"number\">20170318</span><span class=\"number\">-1</span>     armhf        Package created with checkinstall <span class=\"number\">1.6</span><span class=\"number\">.2</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装liburdfdom-dev\"><a href=\"#安装liburdfdom-dev\" class=\"headerlink\" title=\"安装liburdfdom-dev\"></a>安装liburdfdom-dev</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo apt-get install libboost-test-dev libtinyxml-dev</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git <span class=\"built_in\">clone</span> https://github.com/ros/urdfdom.git</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> urdfdom</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo checkinstall make install</span></div></pre></td></tr></table></figure></p>\n<p>check-install开始会让提示输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 “urdfdom”改为”liburdfdom-dev” ，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错。<br>编译出错提示找不到文件：utils.h<br>添加一个文件(utils.h)到/usr/local/include/urdf_model目录下：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/include/u</span>rdf_model</div><div class=\"line\"><span class=\"variable\">$sudo</span> wget https:<span class=\"regexp\">//</span>raw.githubusercontent.com<span class=\"regexp\">/ros/u</span>rdfdom_headers<span class=\"regexp\">/master/u</span>rdf_model<span class=\"regexp\">/include/u</span>rdf_model<span class=\"regexp\">/utils.h</span></div></pre></td></tr></table></figure></p>\n<p>重新编译</p>\n<h2 id=\"安装collada-dom-dev\"><a href=\"#安装collada-dom-dev\" class=\"headerlink\" title=\"安装collada-dom-dev\"></a>安装collada-dom-dev</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo apt-get install libboost-filesystem-dev libxml2-dev</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">wget http://downloads.sourceforge.net/project/collada-dom/Collada%20DOM/Collada%20DOM%202.4/collada-dom-2.4.0.tgz</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">tar -xzf collada-dom-2.4.0.tgz</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> collada-dom-2.4.0</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo checkinstall make install</span></div></pre></td></tr></table></figure></p>\n<p>check-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 “collada-dom”改为 “collada-dom-dev” ，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错。</p>\n<h2 id=\"rosdep依赖\"><a href=\"#rosdep依赖\" class=\"headerlink\" title=\"rosdep依赖\"></a>rosdep依赖</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo rosdep init</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">rosdep update</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">rosdep install --from-paths src --ignore-src --rosdistro indigo -y -r --os=debian:Jessie</span></div></pre></td></tr></table></figure></p>\n<p><em>rosdep install</em>命令会寻找所有src目录的package并递归安装依赖，要安装的依赖包有点多，耐心等待。rosdep会检查src文件夹，安装其他的依赖包。</p>\n<h2 id=\"编译catkin工作空间\"><a href=\"#编译catkin工作空间\" class=\"headerlink\" title=\"编译catkin工作空间\"></a>编译catkin工作空间</h2><p>在开始编译之前，先打两个补丁<br>打开文件:<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$vim</span> ~<span class=\"regexp\">/ros_catkin_ws/</span>src<span class=\"regexp\">/robot_model/</span>collada_urdf<span class=\"regexp\">/src/</span>collada_urdf.cpp</div></pre></td></tr></table></figure></p>\n<p>在最后一个#include后添加<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __arm__  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;strings.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">bool</span> Assimp::IOSystem::ComparePaths(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p1, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p2) <span class=\"keyword\">const</span>  </div><div class=\"line\">&#123;  </div><div class=\"line\"><span class=\"keyword\">return</span> !::strcasecmp(p1,p2);  </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<p>修改~/ros_catkin_ws/src/rviz/src/rviz/mesh_loader.cpp文件，在最后一个#include（如果#include的下一行是#endif则放到#endif后）行后加入以下代码<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __arm__                 <span class=\"comment\">// fix for ARM build</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;strings.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">bool</span> Assimp::IOSystem::ComparePaths(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p1, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p2) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> !::strcasecmp(p1, p2);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<p>编译：<br>　　<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$<span class=\"keyword\">cd</span> ~<span class=\"string\">/ros_catkin_ws</span></div><div class=\"line\">$sudo <span class=\"string\">./src/catkin/bin/catkin_make_isolated</span> <span class=\"params\">--install</span> -DCMAKE_BUILD_TYPE=Release <span class=\"params\">--install-space</span> <span class=\"string\">/opt/ros/indigo</span> -j4</div></pre></td></tr></table></figure></p>\n<p>上面命令将编译文件安装到/opt/ros/indigo –j4是使用4个线程编译.</p>\n<h2 id=\"出现的错误\"><a href=\"#出现的错误\" class=\"headerlink\" title=\"出现的错误\"></a>出现的错误</h2><p>###error: ‘shared_ptr’ in namespace ‘std’ does not name a template type<br>执行上面的编译命令提示错误：<br>　　<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">in</span> file included from <span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>src<span class=\"regexp\">/robot_model/</span>urdf<span class=\"regexp\">/include/</span>urdf/model.<span class=\"string\">h:</span><span class=\"number\">43</span>:<span class=\"number\">0</span>, </div><div class=\"line\">                 from <span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>src<span class=\"regexp\">/robot_model/</span>urdf<span class=\"regexp\">/src/</span>model.<span class=\"string\">cpp:</span><span class=\"number\">37</span>: </div><div class=\"line\"><span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>devel_isolated<span class=\"regexp\">/urdf/</span>include<span class=\"regexp\">/urdf/</span>urdfdom_compatibility.<span class=\"string\">h:</span><span class=\"number\">78</span>:<span class=\"number\">14</span>: <span class=\"string\">error:</span> ‘shared_ptr’ <span class=\"keyword\">in</span> namespace ‘std’ does not name a template type </div><div class=\"line\"> typedef <span class=\"string\">std:</span>:shared_ptr&lt;ModelInterface&gt; ModelInterfaceSharedPtr; </div><div class=\"line\">              ^ </div><div class=\"line\"><span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>devel_isolated<span class=\"regexp\">/urdf/</span>include<span class=\"regexp\">/urdf/</span>urdfdom_compatibility.<span class=\"string\">h:</span><span class=\"number\">79</span>:<span class=\"number\">14</span>: <span class=\"string\">error:</span> ‘shared_ptr’ <span class=\"keyword\">in</span> namespace ‘std’ does not name a template type </div><div class=\"line\"> typedef <span class=\"string\">std:</span>:shared_ptr&lt;const ModelInterface&gt; ModelInterfaceConstSharedPtr; </div><div class=\"line\">              ^ </div><div class=\"line\"><span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>devel_isolated<span class=\"regexp\">/urdf/</span>include<span class=\"regexp\">/urdf/</span>urdfdom_compatibility.<span class=\"string\">h:</span><span class=\"number\">80</span>:<span class=\"number\">14</span>: <span class=\"string\">error:</span> ‘weak_ptr’ <span class=\"keyword\">in</span> namespace ‘std’ does not name a template type </div><div class=\"line\"> typedef <span class=\"string\">std:</span>:weak_ptr&lt;ModelInterface&gt; ModelInterfaceWeakPtr; </div><div class=\"line\">              ^ </div><div class=\"line\">CMakeFiles<span class=\"regexp\">/urdf.dir/</span>build.<span class=\"string\">make:</span><span class=\"number\">62</span>: recipe <span class=\"keyword\">for</span> target <span class=\"string\">'CMakeFiles/urdf.dir/src/model.cpp.o'</span> failed</div></pre></td></tr></table></figure></p>\n<p>修改文件：<br>/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h<br>从78行开始到80行都屏蔽掉<br>　　<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> /*</div><div class=\"line\"> typedef <span class=\"symbol\">std:</span><span class=\"symbol\">:shared_ptr&lt;ModelInterface&gt;</span> ModelInterfaceSharedPtr;</div><div class=\"line\"> typedef <span class=\"symbol\">std:</span><span class=\"symbol\">:shared_ptr&lt;const</span> ModelInterface&gt; ModelInterfaceConstSharedPtr;</div><div class=\"line\"> typedef <span class=\"symbol\">std:</span><span class=\"symbol\">:weak_ptr&lt;ModelInterface&gt;</span> ModelInterfaceWeakPtr;</div><div class=\"line\">*<span class=\"regexp\">/</span></div></pre></td></tr></table></figure></p>\n<p>再次编译成功。这个过程非常漫长。<img src=\"/2017/05/15/ros-indigo-raspberry/catkin.jpg\" alt=\"\"></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>完成之后设置环境变量：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$source</span> <span class=\"regexp\">/opt/</span>ros<span class=\"regexp\">/indigo/</span>setup.bash</div></pre></td></tr></table></figure></p>\n<p>设置ROS环境变量在每次启动shell时自动添加到bash会话<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">echo</span> <span class=\"string\">\"source /opt/ros/indigo/setup.bash\"</span> &gt;&gt; ~/.bashrc</span></div></pre></td></tr></table></figure></p>\n<p>到这里我们的ROS完整版就已经成功安装好了，不妨运行roscore试一下<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscore</span></span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/15/ros-indigo-raspberry/roscore.jpg\" alt=\"\"></p>"},{"title":"ROS导航仿真","date":"2017-05-24T05:36:03.000Z","comments":1,"_content":"在进入实际的机器人运动控制之前，先使用空白地图或现有地图进行ROS导航功能的仿真,以便于更进一步了解机器人的导航控制策略。\n*环境: ubuntu 14.04 LTS 32bits *\n*ROS*: *Indigo*\n<!--more-->\n# Navigation 安装\n在进行导航仿真之前，需要先下载 *ROS* 官方提供的 [ROS-Navigation](http://wiki.ros.org/cn/navigation)，安装下载：\n　　```\n $cd ~/catkin_ws/src\n $git clone https://github.com/ros-planning/navigation.git\n $cd navigation　\n $git checkout indigo-devel\n $cd ~/catkin_ws\n $catkin_make\n $rospack profile\n   ```\n可能会报错：\n   ```\n catkin_ws/src/navigation/map_server/src/image_loader.cpp:43:27: fatal error: SDL/SDL_image.h: No such file or directory\n #include <SDL/SDL_image.h>\n   ```\n安装 [SDL](https://www.libsdl.org/),SDL（Simple DirectMedia Layer）是一套开放源代码的跨平台多媒体开发库，使用C语言写成。SDL提供了数种控制图像、声音、输出入的函数，让开发者只要用相同或是相似的代码就可以开发出跨多个平台（Linux、Windows、Mac OS X等）的应用软件。参考 [SDL](https://zh.wikipedia.org/wiki/SDL):\n   ```\n $ sudo apt-get install libsdl-image1.2-dev libsdl1.2-dev\n   ```\n# 使用 arbotix 测试 move_base\n[move_base](http://wiki.ros.org/move_base) 是导航功能里比较重要的一项，它获取传感器数据并负责路径规划、距离计算、成本计算等。\n\n![](ros-navigation-simulation/movebase.png)\n\n*move_base* 节点运行前需要四个配置文件，它们定义了路径规划需要的一些配置参数，包括越过障碍物的代价、机器人的半径、即时距离计算、机器人移动速度等参数。在 *ROS by example* 中的示例代码 *rbx1* 中有关于每个机器人的四个配置文件，它们位于 *rbx1/rbx1_nav/config* 中，每个机器人下面都有对应的四个配置文件：\n*base_local_planner_params.yaml*\n*costmap_common_params.yaml*\n*global_costmap_params.yaml*\n*local_costmap_params.yaml*\n里面的参数说明可以参考官方文档[]()\n下面的命令启动启动一个机器人，使用 *move_base*使其向前移动 2m：\n   ```\n $roslaunch rbx1_bringup fake_turtlebot.launch //启动一个机器人 使用ArbotiX模拟器\n $roslaunch rbx1_nav fake_move_base_blank_map.launch ///以空白地图启动move_base节点\n $rosrun rviz rviz -d `rospack find rbx1_nav`/nav.rviz //启动Rviz\n $ rostopic pub /move_base_simple/goal geometry_msgs/PoseStamped '{header: {frame_id: \"map\"},pose: {position: {x: 1.0,y: 0,z: 0},orientation: {x: 0,y: 0,z: 0,w: 2}}}' //向前运动2m\n\n   ```\n返回原地：\n   ```\n$ rostopic pub /move_base_simple/goal geometry_msgs/PoseStamped '{header: {frame_id: \"map\"},pose: {position: {x: 0.0,y: 0,z: 0},orientation: {x: 0,y: 0,z: 0,w: 2}}}' //返回\n   ```\n![](ros-navigation-simulation/forward.jpg)\n\n让机器人走一个正方形：\n   ```\n $rosrun rbx1_nav move_base_square.py//让机器人走正方形\n   ```\n\n![](ros-navigation-simulation/square.jpg)\n\n# 带障碍物的导航\n将空白地图换做带障碍物的地图再次使机器人运行一个正方形：\n   ```\n $roscore\n $roslaunch rbx1_bringup fake_turtlebot.launch //加载一个模拟机器人\n $roslaunch rbx1_nav fake_move_base_map_with_obstacles.launch  //加载一张带障碍物的地图\n $rosrun  rviz rviz -d `rospack find rbx1_nav`/nav_obstacles.rviz //加载rviz  带障碍物的导航\n $rosrun rbx1_nav move_base_square.py //使其自动走一个正方形\n   ```\n![](ros-navigation-simulation/obstacle.jpg)\n\n# 复杂地图导航与蒙特卡洛定位\n使用ROS导航包里现有的复杂地图结合 [ACML](http://wiki.ros.org/amcl)-(Adaptive Monte Carlo Localization) 进行导航功能的测试。[ACML](http://wiki.ros.org/amcl) 即自适应蒙特卡罗定位，关于它的原理回头再仔细分析。\n   ``` \n $roscore\n $roslaunch rbx1_bringup fake_turtlebot.launch //运行一个机器人\n $roslaunch rbx1_nav fake_amcl.launch //运行fake_amcl.launch调用已有的测试地图\n $rosrun rviz rviz -d `rospack find rbx1_nav`/amcl.rviz //启动rviz 并调用amcl配置文件\n   ```\n也可以手动指定要调用的地图：\n   ```\n $roslaunch rbx1_nav fake_amcl.launch map:=test_map.yaml\n   ```\n\n![](ros-navigation-simulation/amcl.jpg)\n\n此时点击2D New Goal按钮，让机器人运动到指定目标：\n![](ros-navigation-simulation/amcl-move.jpg)\n\n\n\n\n\n","source":"_posts/ros-navigation-simulation.md","raw":"---\ntitle: ROS导航仿真\ndate: 2017-05-24 13:36:03\ncategories: ROS\ntags: ROS Navigation\ncomments: true\n---\n在进入实际的机器人运动控制之前，先使用空白地图或现有地图进行ROS导航功能的仿真,以便于更进一步了解机器人的导航控制策略。\n*环境: ubuntu 14.04 LTS 32bits *\n*ROS*: *Indigo*\n<!--more-->\n# Navigation 安装\n在进行导航仿真之前，需要先下载 *ROS* 官方提供的 [ROS-Navigation](http://wiki.ros.org/cn/navigation)，安装下载：\n　　```\n $cd ~/catkin_ws/src\n $git clone https://github.com/ros-planning/navigation.git\n $cd navigation　\n $git checkout indigo-devel\n $cd ~/catkin_ws\n $catkin_make\n $rospack profile\n   ```\n可能会报错：\n   ```\n catkin_ws/src/navigation/map_server/src/image_loader.cpp:43:27: fatal error: SDL/SDL_image.h: No such file or directory\n #include <SDL/SDL_image.h>\n   ```\n安装 [SDL](https://www.libsdl.org/),SDL（Simple DirectMedia Layer）是一套开放源代码的跨平台多媒体开发库，使用C语言写成。SDL提供了数种控制图像、声音、输出入的函数，让开发者只要用相同或是相似的代码就可以开发出跨多个平台（Linux、Windows、Mac OS X等）的应用软件。参考 [SDL](https://zh.wikipedia.org/wiki/SDL):\n   ```\n $ sudo apt-get install libsdl-image1.2-dev libsdl1.2-dev\n   ```\n# 使用 arbotix 测试 move_base\n[move_base](http://wiki.ros.org/move_base) 是导航功能里比较重要的一项，它获取传感器数据并负责路径规划、距离计算、成本计算等。\n\n![](ros-navigation-simulation/movebase.png)\n\n*move_base* 节点运行前需要四个配置文件，它们定义了路径规划需要的一些配置参数，包括越过障碍物的代价、机器人的半径、即时距离计算、机器人移动速度等参数。在 *ROS by example* 中的示例代码 *rbx1* 中有关于每个机器人的四个配置文件，它们位于 *rbx1/rbx1_nav/config* 中，每个机器人下面都有对应的四个配置文件：\n*base_local_planner_params.yaml*\n*costmap_common_params.yaml*\n*global_costmap_params.yaml*\n*local_costmap_params.yaml*\n里面的参数说明可以参考官方文档[]()\n下面的命令启动启动一个机器人，使用 *move_base*使其向前移动 2m：\n   ```\n $roslaunch rbx1_bringup fake_turtlebot.launch //启动一个机器人 使用ArbotiX模拟器\n $roslaunch rbx1_nav fake_move_base_blank_map.launch ///以空白地图启动move_base节点\n $rosrun rviz rviz -d `rospack find rbx1_nav`/nav.rviz //启动Rviz\n $ rostopic pub /move_base_simple/goal geometry_msgs/PoseStamped '{header: {frame_id: \"map\"},pose: {position: {x: 1.0,y: 0,z: 0},orientation: {x: 0,y: 0,z: 0,w: 2}}}' //向前运动2m\n\n   ```\n返回原地：\n   ```\n$ rostopic pub /move_base_simple/goal geometry_msgs/PoseStamped '{header: {frame_id: \"map\"},pose: {position: {x: 0.0,y: 0,z: 0},orientation: {x: 0,y: 0,z: 0,w: 2}}}' //返回\n   ```\n![](ros-navigation-simulation/forward.jpg)\n\n让机器人走一个正方形：\n   ```\n $rosrun rbx1_nav move_base_square.py//让机器人走正方形\n   ```\n\n![](ros-navigation-simulation/square.jpg)\n\n# 带障碍物的导航\n将空白地图换做带障碍物的地图再次使机器人运行一个正方形：\n   ```\n $roscore\n $roslaunch rbx1_bringup fake_turtlebot.launch //加载一个模拟机器人\n $roslaunch rbx1_nav fake_move_base_map_with_obstacles.launch  //加载一张带障碍物的地图\n $rosrun  rviz rviz -d `rospack find rbx1_nav`/nav_obstacles.rviz //加载rviz  带障碍物的导航\n $rosrun rbx1_nav move_base_square.py //使其自动走一个正方形\n   ```\n![](ros-navigation-simulation/obstacle.jpg)\n\n# 复杂地图导航与蒙特卡洛定位\n使用ROS导航包里现有的复杂地图结合 [ACML](http://wiki.ros.org/amcl)-(Adaptive Monte Carlo Localization) 进行导航功能的测试。[ACML](http://wiki.ros.org/amcl) 即自适应蒙特卡罗定位，关于它的原理回头再仔细分析。\n   ``` \n $roscore\n $roslaunch rbx1_bringup fake_turtlebot.launch //运行一个机器人\n $roslaunch rbx1_nav fake_amcl.launch //运行fake_amcl.launch调用已有的测试地图\n $rosrun rviz rviz -d `rospack find rbx1_nav`/amcl.rviz //启动rviz 并调用amcl配置文件\n   ```\n也可以手动指定要调用的地图：\n   ```\n $roslaunch rbx1_nav fake_amcl.launch map:=test_map.yaml\n   ```\n\n![](ros-navigation-simulation/amcl.jpg)\n\n此时点击2D New Goal按钮，让机器人运动到指定目标：\n![](ros-navigation-simulation/amcl-move.jpg)\n\n\n\n\n\n","slug":"ros-navigation-simulation","published":1,"updated":"2017-05-24T06:54:53.570Z","layout":"post","photos":[],"link":"","_id":"cj4hne533001aw8innspteglr","content":"<p>在进入实际的机器人运动控制之前，先使用空白地图或现有地图进行ROS导航功能的仿真,以便于更进一步了解机器人的导航控制策略。<br><em>环境: ubuntu 14.04 LTS 32bits </em><br><em>ROS</em>: <em>Indigo</em><br><a id=\"more\"></a></p>\n<h1 id=\"Navigation-安装\"><a href=\"#Navigation-安装\" class=\"headerlink\" title=\"Navigation 安装\"></a>Navigation 安装</h1><p>在进行导航仿真之前，需要先下载 <em>ROS</em> 官方提供的 <a href=\"http://wiki.ros.org/cn/navigation\" target=\"_blank\" rel=\"external\">ROS-Navigation</a>，安装下载：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws/src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git <span class=\"built_in\">clone</span> https://github.com/ros-planning/navigation.git</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> navigation　</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git checkout indigo-devel</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">rospack profile</span></div></pre></td></tr></table></figure></p>\n<p>可能会报错：<br>   <figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin_ws<span class=\"meta-keyword\">/src/</span>navigation/map_server<span class=\"meta-keyword\">/src/</span>image_loader.cpp:<span class=\"number\">43</span>:<span class=\"number\">27</span>: fatal error: SDL/SDL_image.h: No such file or directory</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;SDL/SDL_image.h&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>安装 <a href=\"https://www.libsdl.org/\" target=\"_blank\" rel=\"external\">SDL</a>,SDL（Simple DirectMedia Layer）是一套开放源代码的跨平台多媒体开发库，使用C语言写成。SDL提供了数种控制图像、声音、输出入的函数，让开发者只要用相同或是相似的代码就可以开发出跨多个平台（Linux、Windows、Mac OS X等）的应用软件。参考 <a href=\"https://zh.wikipedia.org/wiki/SDL\" target=\"_blank\" rel=\"external\">SDL</a>:<br>   <figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-<span class=\"built_in\">get</span> install libsdl-image1<span class=\"number\">.2</span>-<span class=\"built_in\">dev</span> libsdl1<span class=\"number\">.2</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"使用-arbotix-测试-move-base\"><a href=\"#使用-arbotix-测试-move-base\" class=\"headerlink\" title=\"使用 arbotix 测试 move_base\"></a>使用 arbotix 测试 move_base</h1><p><a href=\"http://wiki.ros.org/move_base\" target=\"_blank\" rel=\"external\">move_base</a> 是导航功能里比较重要的一项，它获取传感器数据并负责路径规划、距离计算、成本计算等。</p>\n<p><img src=\"/2017/05/24/ros-navigation-simulation/movebase.png\" alt=\"\"></p>\n<p><em>move_base</em> 节点运行前需要四个配置文件，它们定义了路径规划需要的一些配置参数，包括越过障碍物的代价、机器人的半径、即时距离计算、机器人移动速度等参数。在 <em>ROS by example</em> 中的示例代码 <em>rbx1</em> 中有关于每个机器人的四个配置文件，它们位于 <em>rbx1/rbx1_nav/config</em> 中，每个机器人下面都有对应的四个配置文件：<br><em>base_local_planner_params.yaml</em><br><em>costmap_common_params.yaml</em><br><em>global_costmap_params.yaml</em><br><em>local_costmap_params.yaml</em><br>里面的参数说明可以参考官方文档<a href=\"\"></a><br>下面的命令启动启动一个机器人，使用 <em>move_base</em>使其向前移动 2m：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$roslaunch</span> rbx1_bringup fake_turtlebot<span class=\"selector-class\">.launch</span> <span class=\"comment\">//启动一个机器人 使用ArbotiX模拟器</span></div><div class=\"line\"><span class=\"variable\">$roslaunch</span> rbx1_nav fake_move_base_blank_map<span class=\"selector-class\">.launch</span> <span class=\"comment\">///以空白地图启动move_base节点</span></div><div class=\"line\"><span class=\"variable\">$rosrun</span> rviz rviz -d `rospack find rbx1_nav`/<span class=\"selector-tag\">nav</span><span class=\"selector-class\">.rviz</span> <span class=\"comment\">//启动Rviz</span></div><div class=\"line\">$ rostopic pub /move_base_simple/goal geometry_msgs/PoseStamped <span class=\"string\">'&#123;header: &#123;frame_id: \"map\"&#125;,pose: &#123;position: &#123;x: 1.0,y: 0,z: 0&#125;,orientation: &#123;x: 0,y: 0,z: 0,w: 2&#125;&#125;&#125;'</span> <span class=\"comment\">//向前运动2m</span></div></pre></td></tr></table></figure></p>\n<p>返回原地：<br>   <figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\">$ rostopic pub /move_base_simple/goal geometry_msgs/PoseStamped '</span><span class=\"template-variable\">&#123;header: &#123;frame_id: \"map\"&#125;</span><span class=\"xml\">,pose: </span><span class=\"template-variable\">&#123;position: &#123;x: 0.0,y: 0,z: 0&#125;</span><span class=\"xml\">,orientation: </span><span class=\"template-variable\">&#123;x: 0,y: 0,z: 0,w: 2&#125;</span><span class=\"xml\">&#125;&#125;' //返回</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/24/ros-navigation-simulation/forward.jpg\" alt=\"\"></p>\n<p>让机器人走一个正方形：<br>   <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$rosrun</span> rbx1_nav move_base_square.py<span class=\"regexp\">//</span>让机器人走正方形</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/24/ros-navigation-simulation/square.jpg\" alt=\"\"></p>\n<h1 id=\"带障碍物的导航\"><a href=\"#带障碍物的导航\" class=\"headerlink\" title=\"带障碍物的导航\"></a>带障碍物的导航</h1><p>将空白地图换做带障碍物的地图再次使机器人运行一个正方形：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$roscore</span></div><div class=\"line\"><span class=\"variable\">$roslaunch</span> rbx1_bringup fake_turtlebot<span class=\"selector-class\">.launch</span> <span class=\"comment\">//加载一个模拟机器人</span></div><div class=\"line\"><span class=\"variable\">$roslaunch</span> rbx1_nav fake_move_base_map_with_obstacles<span class=\"selector-class\">.launch</span>  <span class=\"comment\">//加载一张带障碍物的地图</span></div><div class=\"line\"><span class=\"variable\">$rosrun</span>  rviz rviz -d `rospack find rbx1_nav`/nav_obstacles<span class=\"selector-class\">.rviz</span> <span class=\"comment\">//加载rviz  带障碍物的导航</span></div><div class=\"line\"><span class=\"variable\">$rosrun</span> rbx1_nav move_base_square<span class=\"selector-class\">.py</span> <span class=\"comment\">//使其自动走一个正方形</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/24/ros-navigation-simulation/obstacle.jpg\" alt=\"\"></p>\n<h1 id=\"复杂地图导航与蒙特卡洛定位\"><a href=\"#复杂地图导航与蒙特卡洛定位\" class=\"headerlink\" title=\"复杂地图导航与蒙特卡洛定位\"></a>复杂地图导航与蒙特卡洛定位</h1><p>使用ROS导航包里现有的复杂地图结合 <a href=\"http://wiki.ros.org/amcl\" target=\"_blank\" rel=\"external\">ACML</a>-(Adaptive Monte Carlo Localization) 进行导航功能的测试。<a href=\"http://wiki.ros.org/amcl\" target=\"_blank\" rel=\"external\">ACML</a> 即自适应蒙特卡罗定位，关于它的原理回头再仔细分析。<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$roscore</span></div><div class=\"line\"><span class=\"variable\">$roslaunch</span> rbx1_bringup fake_turtlebot<span class=\"selector-class\">.launch</span> <span class=\"comment\">//运行一个机器人</span></div><div class=\"line\"><span class=\"variable\">$roslaunch</span> rbx1_nav fake_amcl<span class=\"selector-class\">.launch</span> <span class=\"comment\">//运行fake_amcl.launch调用已有的测试地图</span></div><div class=\"line\"><span class=\"variable\">$rosrun</span> rviz rviz -d `rospack find rbx1_nav`/amcl<span class=\"selector-class\">.rviz</span> <span class=\"comment\">//启动rviz 并调用amcl配置文件</span></div></pre></td></tr></table></figure></p>\n<p>也可以手动指定要调用的地图：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$roslaunch</span> rbx1_nav fake_amcl<span class=\"selector-class\">.launch</span> map:=test_map.yaml</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/24/ros-navigation-simulation/amcl.jpg\" alt=\"\"></p>\n<p>此时点击2D New Goal按钮，让机器人运动到指定目标：<br><img src=\"/2017/05/24/ros-navigation-simulation/amcl-move.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>在进入实际的机器人运动控制之前，先使用空白地图或现有地图进行ROS导航功能的仿真,以便于更进一步了解机器人的导航控制策略。<br><em>环境: ubuntu 14.04 LTS 32bits </em><br><em>ROS</em>: <em>Indigo</em><br></p>","more":"<p></p>\n<h1 id=\"Navigation-安装\"><a href=\"#Navigation-安装\" class=\"headerlink\" title=\"Navigation 安装\"></a>Navigation 安装</h1><p>在进行导航仿真之前，需要先下载 <em>ROS</em> 官方提供的 <a href=\"http://wiki.ros.org/cn/navigation\" target=\"_blank\" rel=\"external\">ROS-Navigation</a>，安装下载：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws/src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git <span class=\"built_in\">clone</span> https://github.com/ros-planning/navigation.git</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> navigation　</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git checkout indigo-devel</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">rospack profile</span></div></pre></td></tr></table></figure></p>\n<p>可能会报错：<br>   <figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin_ws<span class=\"meta-keyword\">/src/</span>navigation/map_server<span class=\"meta-keyword\">/src/</span>image_loader.cpp:<span class=\"number\">43</span>:<span class=\"number\">27</span>: fatal error: SDL/SDL_image.h: No such file or directory</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;SDL/SDL_image.h&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>安装 <a href=\"https://www.libsdl.org/\" target=\"_blank\" rel=\"external\">SDL</a>,SDL（Simple DirectMedia Layer）是一套开放源代码的跨平台多媒体开发库，使用C语言写成。SDL提供了数种控制图像、声音、输出入的函数，让开发者只要用相同或是相似的代码就可以开发出跨多个平台（Linux、Windows、Mac OS X等）的应用软件。参考 <a href=\"https://zh.wikipedia.org/wiki/SDL\" target=\"_blank\" rel=\"external\">SDL</a>:<br>   <figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-<span class=\"built_in\">get</span> install libsdl-image1<span class=\"number\">.2</span>-<span class=\"built_in\">dev</span> libsdl1<span class=\"number\">.2</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"使用-arbotix-测试-move-base\"><a href=\"#使用-arbotix-测试-move-base\" class=\"headerlink\" title=\"使用 arbotix 测试 move_base\"></a>使用 arbotix 测试 move_base</h1><p><a href=\"http://wiki.ros.org/move_base\" target=\"_blank\" rel=\"external\">move_base</a> 是导航功能里比较重要的一项，它获取传感器数据并负责路径规划、距离计算、成本计算等。</p>\n<p><img src=\"/2017/05/24/ros-navigation-simulation/movebase.png\" alt=\"\"></p>\n<p><em>move_base</em> 节点运行前需要四个配置文件，它们定义了路径规划需要的一些配置参数，包括越过障碍物的代价、机器人的半径、即时距离计算、机器人移动速度等参数。在 <em>ROS by example</em> 中的示例代码 <em>rbx1</em> 中有关于每个机器人的四个配置文件，它们位于 <em>rbx1/rbx1_nav/config</em> 中，每个机器人下面都有对应的四个配置文件：<br><em>base_local_planner_params.yaml</em><br><em>costmap_common_params.yaml</em><br><em>global_costmap_params.yaml</em><br><em>local_costmap_params.yaml</em><br>里面的参数说明可以参考官方文档<a href=\"\"></a><br>下面的命令启动启动一个机器人，使用 <em>move_base</em>使其向前移动 2m：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$roslaunch</span> rbx1_bringup fake_turtlebot<span class=\"selector-class\">.launch</span> <span class=\"comment\">//启动一个机器人 使用ArbotiX模拟器</span></div><div class=\"line\"><span class=\"variable\">$roslaunch</span> rbx1_nav fake_move_base_blank_map<span class=\"selector-class\">.launch</span> <span class=\"comment\">///以空白地图启动move_base节点</span></div><div class=\"line\"><span class=\"variable\">$rosrun</span> rviz rviz -d `rospack find rbx1_nav`/<span class=\"selector-tag\">nav</span><span class=\"selector-class\">.rviz</span> <span class=\"comment\">//启动Rviz</span></div><div class=\"line\">$ rostopic pub /move_base_simple/goal geometry_msgs/PoseStamped <span class=\"string\">'&#123;header: &#123;frame_id: \"map\"&#125;,pose: &#123;position: &#123;x: 1.0,y: 0,z: 0&#125;,orientation: &#123;x: 0,y: 0,z: 0,w: 2&#125;&#125;&#125;'</span> <span class=\"comment\">//向前运动2m</span></div></pre></td></tr></table></figure></p>\n<p>返回原地：<br>   <figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\">$ rostopic pub /move_base_simple/goal geometry_msgs/PoseStamped '</span><span class=\"template-variable\">&#123;header: &#123;frame_id: \"map\"&#125;</span><span class=\"xml\">,pose: </span><span class=\"template-variable\">&#123;position: &#123;x: 0.0,y: 0,z: 0&#125;</span><span class=\"xml\">,orientation: </span><span class=\"template-variable\">&#123;x: 0,y: 0,z: 0,w: 2&#125;</span><span class=\"xml\">&#125;&#125;' //返回</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/24/ros-navigation-simulation/forward.jpg\" alt=\"\"></p>\n<p>让机器人走一个正方形：<br>   <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$rosrun</span> rbx1_nav move_base_square.py<span class=\"regexp\">//</span>让机器人走正方形</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/24/ros-navigation-simulation/square.jpg\" alt=\"\"></p>\n<h1 id=\"带障碍物的导航\"><a href=\"#带障碍物的导航\" class=\"headerlink\" title=\"带障碍物的导航\"></a>带障碍物的导航</h1><p>将空白地图换做带障碍物的地图再次使机器人运行一个正方形：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$roscore</span></div><div class=\"line\"><span class=\"variable\">$roslaunch</span> rbx1_bringup fake_turtlebot<span class=\"selector-class\">.launch</span> <span class=\"comment\">//加载一个模拟机器人</span></div><div class=\"line\"><span class=\"variable\">$roslaunch</span> rbx1_nav fake_move_base_map_with_obstacles<span class=\"selector-class\">.launch</span>  <span class=\"comment\">//加载一张带障碍物的地图</span></div><div class=\"line\"><span class=\"variable\">$rosrun</span>  rviz rviz -d `rospack find rbx1_nav`/nav_obstacles<span class=\"selector-class\">.rviz</span> <span class=\"comment\">//加载rviz  带障碍物的导航</span></div><div class=\"line\"><span class=\"variable\">$rosrun</span> rbx1_nav move_base_square<span class=\"selector-class\">.py</span> <span class=\"comment\">//使其自动走一个正方形</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/24/ros-navigation-simulation/obstacle.jpg\" alt=\"\"></p>\n<h1 id=\"复杂地图导航与蒙特卡洛定位\"><a href=\"#复杂地图导航与蒙特卡洛定位\" class=\"headerlink\" title=\"复杂地图导航与蒙特卡洛定位\"></a>复杂地图导航与蒙特卡洛定位</h1><p>使用ROS导航包里现有的复杂地图结合 <a href=\"http://wiki.ros.org/amcl\" target=\"_blank\" rel=\"external\">ACML</a>-(Adaptive Monte Carlo Localization) 进行导航功能的测试。<a href=\"http://wiki.ros.org/amcl\" target=\"_blank\" rel=\"external\">ACML</a> 即自适应蒙特卡罗定位，关于它的原理回头再仔细分析。<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$roscore</span></div><div class=\"line\"><span class=\"variable\">$roslaunch</span> rbx1_bringup fake_turtlebot<span class=\"selector-class\">.launch</span> <span class=\"comment\">//运行一个机器人</span></div><div class=\"line\"><span class=\"variable\">$roslaunch</span> rbx1_nav fake_amcl<span class=\"selector-class\">.launch</span> <span class=\"comment\">//运行fake_amcl.launch调用已有的测试地图</span></div><div class=\"line\"><span class=\"variable\">$rosrun</span> rviz rviz -d `rospack find rbx1_nav`/amcl<span class=\"selector-class\">.rviz</span> <span class=\"comment\">//启动rviz 并调用amcl配置文件</span></div></pre></td></tr></table></figure></p>\n<p>也可以手动指定要调用的地图：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$roslaunch</span> rbx1_nav fake_amcl<span class=\"selector-class\">.launch</span> map:=test_map.yaml</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/24/ros-navigation-simulation/amcl.jpg\" alt=\"\"></p>\n<p>此时点击2D New Goal按钮，让机器人运动到指定目标：<br><img src=\"/2017/05/24/ros-navigation-simulation/amcl-move.jpg\" alt=\"\"></p>"},{"title":"贝叶斯滤波库在树莓派上的移植","date":"2017-05-23T05:05:18.000Z","comments":1,"_content":"# 前言\n计划在树莓派上仿真一下[ROS](http://www.ros.org/) 的导航功能，需要安装 [navigation](https://github.com/ros-planning/navigation)包，结果编译 [navigation](https://github.com/ros-planning/navigation)包 时提示错误：\n　　```\n – package ‘orocos-bfl’ not found \n CMake Error at /usr/share/cmake-2.8/Modules/FindPkgConfig.cmake:283 (message): \n A required package was not found \n Call Stack (most recent call first): \n /usr/share/cmake-2.8/Modules/FindPkgConfig.cmake:337 (_pkg_check_modules_internal) \n robot_pose_ekf/CMakeLists.txt:6 (pkg_check_modules)\n　　```\n于是填了后面的坑...\n<!--more-->\n# 贝叶斯滤波库\n *package ‘orocos-bfl’*是贝叶斯滤波库，参考 [BFL](http://www.orocos.org/bfl)。贝叶斯滤波库能够为动态贝叶斯网络的推理提供一个应用程序独立框架，以及递归信息处理和基于贝叶斯规则的估计算法,如卡尔曼滤波器,粒子过滤器、蒙特卡洛方法等，多应用于机器人的导航中。\n## 移植\n首先下载源码：\n　　```\n $wget http://people.mech.kuleuven.be/~tdelaet/bfl_tar/orocos-bfl-0.6.1-src.tar.bz2\n　　```\n解压并建立 *build* 目录：\n　　```\n $tar jxvf orocos-bfl-0.6.1-src.tar.bz2\n $cd  orocos-bfl-0.6.1-src\n $mkdir build\n　　```\n编译：\n　　```\n $cmake .\n　　```\n提示错误：![](ros-navigation-compile/ltierror.jpg)\n缺少 [LTI-Lib](http://ltilib.sourceforge.net/doc/homepage/index.shtml) 库, [LTI-Lib](http://ltilib.sourceforge.net/doc/homepage/index.shtml) 是一个基于 *C++* 的面向对象的图像处理和计算机视觉库。\n### LTI-Lib库的移植\n方法参考 [LTI-Install-Guide](https://people.mech.kuleuven.be/~tdelaet/bfl_doc/installation_guide/node5.html)，树莓派貌似只能源码安装。\n安装之前先安装 *libxt-dev* 和 *libboost*\n　　```\n $sudo apt-get install libxt-dev\n $sudo apt-get install libboost-dev\n　　```\n当然也可以源码安装*libxt-dev*：\n　　```\n $https://launchpad.net/ubuntu/+archive/primary/+files/libxt_1.1.4.orig.tar.gz\n $tar zxvf libxt_1.1.4.orig.tar.gz\n $cd libxt_1.1.4.orig\n $make  \n $sudo make install \n　　```\n源码安装 [libboost-dev](https://sourceforge.net/projects/boost/files/) 参考 [Boost-Install](https://people.mech.kuleuven.be/~tdelaet/bfl_doc/installation_guide/node7.html)\n　　```\n $tar -xzvf boost_1_34_0.tar.gz\n $cd boost_1_34_o\n $./configure\n $make \n $sudo make install\n　　```\n源码安装[LTI-Lib](http://ltilib.sourceforge.net/doc/homepage/index.shtml)\n下载源码[LTI-Source-Code](https://sourceforge.net/projects/ltilib/files/LTI-Lib-1/1.9.16/),并解压进入到 *linux* 目录：\n　　```\n $tar zxvf 100410_ltilib-1.9.16.tar.gz\n $tar zxvf 100410_ltilib-extras-1.9.16.tar.gz\n $cd ltilib/linux\n\n　　```\n生成Makefile：\n\n　　```\n $make -f Makefile.cvs\n $./configure --disable-debug --without-gtk --disable-gtk --prefix=~/install\n\n　　```\n编译安装,默认的安装目录是/usr/local/:\n　　```\n $make\n $sudo make install\n　　```\n## 再次回到BFL的编译\n　　```\n $tar -xjvf orocos-bfl-0.6.1-src.tar.bz2#解压\n $cd orocos-ocl-1.8.0\n $mkdir build\n $cmake .\n $make\n $make check //测试编译结果\n $sudo make install //安装\n　　```\n# 遇到的问题\n编译过程中遇到很多问题，尤其是 [LTI-Lib](http://ltilib.sourceforge.net/doc/homepage/index.shtml) 库的编译，该库貌似最近没有更新，而且不适应新的 *G++*编译器。\n## aclocal: not found\n编译 [LTI-Lib](http://ltilib.sourceforge.net/doc/homepage/index.shtml) 时在步骤 *make* 提示错误：\n　　```\n $make -f Makefile.cvs\n  Calling aclocal...\n  /bin/sh: 2: aclocal: not found\n  make: *** [aclocal.m4] Error 127\n\n　　```\n需要安装 *autoconf* \n　　```\n $sudo apt-get install autoconf\n　　```\n## cannot run /bin/bash ./config.sub\n在 [LTI-Lib](http://ltilib.sourceforge.net/doc/homepage/index.shtml) 的编译配置步骤./configure出现错误：\n　　```\n cannot run /bin/bash ./config.sub\n　　```\n确定已安装libtool libtool-ltdl libtool-ltdl-devel\n如果没安装，使用以下命令安装：\n　　```\n $sudo apt-get  install  libtool\n $sudo apt-get  install  libltdl-dev\n　　```\n如果都已安装应该是链接出了问题。\n　　```\n $ls -al config/* 查看链接路径\n $find / -name config.sub 或者locate config.sub 查找config.sub的路径\n $ln -s -f /正确路径/config.sub config.sub\n　　```\n例如我的:\n　　```\n $ln -s -f /usr/share/libtool/config/config.sub config.sub\n　　```\n同样的道理：config.guess路径不对也这样改过来,或者直接拷贝系统下的文件：\n */usr/share/libtool/config/config.sub* 和 *config.guess *到LTI源码目录。\n## configure: error: cannot compile a simple Fortran program\n 配置 [LTI-Lib](http://ltilib.sourceforge.net/doc/homepage/index.shtml) 时出现错误：\n　　```\n ./configure\n checking for Fortran 77 libraries of ...\n checking for gcc... gcc\n checking whether we are using the GNU C compiler... yes\n checking whether gcc accepts -g... yes\n checking for gcc option to accept ISO C89... none needed\n checking for dummy main to link with Fortran 77 libraries... none\n checking for Fortran 77 name-mangling scheme... configure: error: in `/home/steven/workspace/ros/ ltilib/linux':\n configure: error: cannot compile a simple Fortran program\n See `config.log' for more details\n　　```\n解决：\n　　```\n $sudo apt-get install f2c gfortran libblas-dev liblapack-dev libpcre3-dev libreadline-dev\n　　```\n## setParameters’ was not declared in this scope\n　　```\n make\n ../src/math/ltiCyclicTridiagonalEquationSystem_template.h: In instantiation of ‘lti::cyclicTridiagonalEquationSystem<T>::cyclicTridiagonalEquationSystem(const lti::cyclicTridiagonalEquationSystem<T>::parameters&) [with T = double]’:\n ../src/math/ltiCyclicTridiagonalEquationSystem.cpp:44:18:   required from here\n ../src/math/ltiCyclicTridiagonalEquationSystem_template.h:40:28: error: ‘setParameters’ was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]\n     setParameters(theParams);\n                            ^\n ../src/math/ltiCyclicTridiagonalEquationSystem_template.h:40:28: note: declarations in dependent  base ‘lti::functor’ are not found by unqualified lookup\n ../src/math/ltiCyclicTridiagonalEquationSystem_template.h:40:28: note: use ‘this->setParameters’ instead\n ../src/math/ltiCyclicTridiagonalEquationSystem_template.h: In instantiation of ‘lti::cyclicTridiagonalEquationSystem<T>::cyclicTridiagonalEquationSystem(lti::vector<T>, lti::vector<T>, lti::vector<T>, const T&, const T&) [with T = double]’:\n ../src/math/ltiCyclicTridiagonalEquationSystem.cpp:44:18:   required from here\n ../src/math/ltiCyclicTridiagonalEquationSystem_template.h:54:20: error: ‘setParameters’ was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]\n　　```\n经确认 *setParameters* 是有定义的，在文件 *src/basics/ltiFunctor.h* 中。突然想到是不是编译器的版本问题，果断降级编译器，考虑将GCC降级 目前系统的gcc版本为4.8将其降级为4.6：\n　　```\n$sudo apt-get install gcc-4.6 g++-4.6\n　　```\n如果下载deb文件，则安装使用命令：\n　　```\n $sudo dpkg –i *.deb\n $sudo apt-get -f install //然后修改系统依赖\n　　```\n设置系统使用的默认 GCC\n　　```\n $ln -f -s /usr/bin/gcc-4.6 /usr/bin/gcc\n $ln -f -s /usr/bin/gcc-ar-4.6 /usr/bin/gcc-ar\n $ln -f -s /usr/bin/gcc-nm-4.6 /usr/bin/gcc-nm\n $ln -f -s /usr/bin/gcc-ranlib-4.6 /usr/bin/gcc-ranlib\n $ln -f -s /usr/bin/g++-4.6 /usr/bin/g++\n　　```\n##  linux/videodev.h: No such file or directory\nmake 后出现的错误：\n　　```\n ../src/io/ltiJPEGLibFunctor.cpp: In member function ‘bool lti::loadJPEG::load(FILE*, lti::image&, bool&)’:\n ../src/io/ltiJPEGLibFunctor.cpp:309:35: warning: variable ‘rowCounter’ set but not used [-Wunused-but-set-variable]\n Compiling debug version of ../src/io/ltiLeutronFrameGrabber.cpp\n Compiling debug version of ../src/io/ltiLncFeatureFile.cpp\n Compiling debug version of ../src/io/ltiLoadImageList.cpp\n Compiling debug version of ../src/io/ltiLoadVectorImageList.cpp\n Compiling debug version of ../src/io/ltiLTIFunctor.cpp\n Compiling debug version of ../src/io/ltiMicroEnablePulnix.cpp\n Compiling debug version of ../src/io/ltiPanTiltUnit.cpp\n Compiling debug version of ../src/io/ltiPNGFunctor.cpp\n Compiling debug version of ../src/io/ltiPNGLibFunctor.cpp\n Compiling debug version of ../src/io/ltiQuickCam.cpp\n Compiling debug version of ../src/io/ltiRunLengthCodec.cpp\n Compiling debug version of ../src/io/ltiSonyEviD100P.cpp\n Compiling debug version of ../src/io/ltiToUCam.cpp\n ../src/io/ltiToUCam.cpp:57:28: fatal error: linux/videodev.h: No such file or directory\n compilation terminated.\n make: *** [../obj/debug/ltiToUCam.o] Error 1\n　　```\n新版内核中已经不再有 *videodev.h* 文件，而是用 *libv4l1-videodev.h* 代替。先查找系统中是否有该文件：\n　　```\n $sudo find / -name videodev.h\n　　```\n系统不存在此文件需要安装：\n　　```\n$sudo apt-get install libv4l-dev\n　　```\n指向：\n　　```\n $sudo ln -s /usr/include/libv4l1-videodev.h /usr/include/linux/videodev.h\n　　```\n## pwc-ioctl.h: No such file or directory\nlit库make 后的错误：\n　　```\n ../src/io/ltiToUCam.cpp:58:23: fatal error: pwc-ioctl.h: No such file or directory\ncompilation terminated.\n　　```\n系统提示不存在文件 [pwc-ioctl.h](https://saillard.org/linux/pwc/) 这个文件应该是webcamera的驱动文件,下载地址: https://saillard.org/linux/pwc/files/pwc-10.0.11.tar.bz2\n下载完后，解压并找到 *pwc-ioctl.h* 文件，拷贝到 *lti* 源代码 的 */src/io/* 目录下。\n\n\n\n\n\n\n\n\n","source":"_posts/ros-navigation-compile.md","raw":"---\ntitle: 贝叶斯滤波库在树莓派上的移植\ndate: 2017-05-23 13:05:18\ncategories: ROS\ntags: BayesianFiltering\ncomments: true\n---\n# 前言\n计划在树莓派上仿真一下[ROS](http://www.ros.org/) 的导航功能，需要安装 [navigation](https://github.com/ros-planning/navigation)包，结果编译 [navigation](https://github.com/ros-planning/navigation)包 时提示错误：\n　　```\n – package ‘orocos-bfl’ not found \n CMake Error at /usr/share/cmake-2.8/Modules/FindPkgConfig.cmake:283 (message): \n A required package was not found \n Call Stack (most recent call first): \n /usr/share/cmake-2.8/Modules/FindPkgConfig.cmake:337 (_pkg_check_modules_internal) \n robot_pose_ekf/CMakeLists.txt:6 (pkg_check_modules)\n　　```\n于是填了后面的坑...\n<!--more-->\n# 贝叶斯滤波库\n *package ‘orocos-bfl’*是贝叶斯滤波库，参考 [BFL](http://www.orocos.org/bfl)。贝叶斯滤波库能够为动态贝叶斯网络的推理提供一个应用程序独立框架，以及递归信息处理和基于贝叶斯规则的估计算法,如卡尔曼滤波器,粒子过滤器、蒙特卡洛方法等，多应用于机器人的导航中。\n## 移植\n首先下载源码：\n　　```\n $wget http://people.mech.kuleuven.be/~tdelaet/bfl_tar/orocos-bfl-0.6.1-src.tar.bz2\n　　```\n解压并建立 *build* 目录：\n　　```\n $tar jxvf orocos-bfl-0.6.1-src.tar.bz2\n $cd  orocos-bfl-0.6.1-src\n $mkdir build\n　　```\n编译：\n　　```\n $cmake .\n　　```\n提示错误：![](ros-navigation-compile/ltierror.jpg)\n缺少 [LTI-Lib](http://ltilib.sourceforge.net/doc/homepage/index.shtml) 库, [LTI-Lib](http://ltilib.sourceforge.net/doc/homepage/index.shtml) 是一个基于 *C++* 的面向对象的图像处理和计算机视觉库。\n### LTI-Lib库的移植\n方法参考 [LTI-Install-Guide](https://people.mech.kuleuven.be/~tdelaet/bfl_doc/installation_guide/node5.html)，树莓派貌似只能源码安装。\n安装之前先安装 *libxt-dev* 和 *libboost*\n　　```\n $sudo apt-get install libxt-dev\n $sudo apt-get install libboost-dev\n　　```\n当然也可以源码安装*libxt-dev*：\n　　```\n $https://launchpad.net/ubuntu/+archive/primary/+files/libxt_1.1.4.orig.tar.gz\n $tar zxvf libxt_1.1.4.orig.tar.gz\n $cd libxt_1.1.4.orig\n $make  \n $sudo make install \n　　```\n源码安装 [libboost-dev](https://sourceforge.net/projects/boost/files/) 参考 [Boost-Install](https://people.mech.kuleuven.be/~tdelaet/bfl_doc/installation_guide/node7.html)\n　　```\n $tar -xzvf boost_1_34_0.tar.gz\n $cd boost_1_34_o\n $./configure\n $make \n $sudo make install\n　　```\n源码安装[LTI-Lib](http://ltilib.sourceforge.net/doc/homepage/index.shtml)\n下载源码[LTI-Source-Code](https://sourceforge.net/projects/ltilib/files/LTI-Lib-1/1.9.16/),并解压进入到 *linux* 目录：\n　　```\n $tar zxvf 100410_ltilib-1.9.16.tar.gz\n $tar zxvf 100410_ltilib-extras-1.9.16.tar.gz\n $cd ltilib/linux\n\n　　```\n生成Makefile：\n\n　　```\n $make -f Makefile.cvs\n $./configure --disable-debug --without-gtk --disable-gtk --prefix=~/install\n\n　　```\n编译安装,默认的安装目录是/usr/local/:\n　　```\n $make\n $sudo make install\n　　```\n## 再次回到BFL的编译\n　　```\n $tar -xjvf orocos-bfl-0.6.1-src.tar.bz2#解压\n $cd orocos-ocl-1.8.0\n $mkdir build\n $cmake .\n $make\n $make check //测试编译结果\n $sudo make install //安装\n　　```\n# 遇到的问题\n编译过程中遇到很多问题，尤其是 [LTI-Lib](http://ltilib.sourceforge.net/doc/homepage/index.shtml) 库的编译，该库貌似最近没有更新，而且不适应新的 *G++*编译器。\n## aclocal: not found\n编译 [LTI-Lib](http://ltilib.sourceforge.net/doc/homepage/index.shtml) 时在步骤 *make* 提示错误：\n　　```\n $make -f Makefile.cvs\n  Calling aclocal...\n  /bin/sh: 2: aclocal: not found\n  make: *** [aclocal.m4] Error 127\n\n　　```\n需要安装 *autoconf* \n　　```\n $sudo apt-get install autoconf\n　　```\n## cannot run /bin/bash ./config.sub\n在 [LTI-Lib](http://ltilib.sourceforge.net/doc/homepage/index.shtml) 的编译配置步骤./configure出现错误：\n　　```\n cannot run /bin/bash ./config.sub\n　　```\n确定已安装libtool libtool-ltdl libtool-ltdl-devel\n如果没安装，使用以下命令安装：\n　　```\n $sudo apt-get  install  libtool\n $sudo apt-get  install  libltdl-dev\n　　```\n如果都已安装应该是链接出了问题。\n　　```\n $ls -al config/* 查看链接路径\n $find / -name config.sub 或者locate config.sub 查找config.sub的路径\n $ln -s -f /正确路径/config.sub config.sub\n　　```\n例如我的:\n　　```\n $ln -s -f /usr/share/libtool/config/config.sub config.sub\n　　```\n同样的道理：config.guess路径不对也这样改过来,或者直接拷贝系统下的文件：\n */usr/share/libtool/config/config.sub* 和 *config.guess *到LTI源码目录。\n## configure: error: cannot compile a simple Fortran program\n 配置 [LTI-Lib](http://ltilib.sourceforge.net/doc/homepage/index.shtml) 时出现错误：\n　　```\n ./configure\n checking for Fortran 77 libraries of ...\n checking for gcc... gcc\n checking whether we are using the GNU C compiler... yes\n checking whether gcc accepts -g... yes\n checking for gcc option to accept ISO C89... none needed\n checking for dummy main to link with Fortran 77 libraries... none\n checking for Fortran 77 name-mangling scheme... configure: error: in `/home/steven/workspace/ros/ ltilib/linux':\n configure: error: cannot compile a simple Fortran program\n See `config.log' for more details\n　　```\n解决：\n　　```\n $sudo apt-get install f2c gfortran libblas-dev liblapack-dev libpcre3-dev libreadline-dev\n　　```\n## setParameters’ was not declared in this scope\n　　```\n make\n ../src/math/ltiCyclicTridiagonalEquationSystem_template.h: In instantiation of ‘lti::cyclicTridiagonalEquationSystem<T>::cyclicTridiagonalEquationSystem(const lti::cyclicTridiagonalEquationSystem<T>::parameters&) [with T = double]’:\n ../src/math/ltiCyclicTridiagonalEquationSystem.cpp:44:18:   required from here\n ../src/math/ltiCyclicTridiagonalEquationSystem_template.h:40:28: error: ‘setParameters’ was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]\n     setParameters(theParams);\n                            ^\n ../src/math/ltiCyclicTridiagonalEquationSystem_template.h:40:28: note: declarations in dependent  base ‘lti::functor’ are not found by unqualified lookup\n ../src/math/ltiCyclicTridiagonalEquationSystem_template.h:40:28: note: use ‘this->setParameters’ instead\n ../src/math/ltiCyclicTridiagonalEquationSystem_template.h: In instantiation of ‘lti::cyclicTridiagonalEquationSystem<T>::cyclicTridiagonalEquationSystem(lti::vector<T>, lti::vector<T>, lti::vector<T>, const T&, const T&) [with T = double]’:\n ../src/math/ltiCyclicTridiagonalEquationSystem.cpp:44:18:   required from here\n ../src/math/ltiCyclicTridiagonalEquationSystem_template.h:54:20: error: ‘setParameters’ was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]\n　　```\n经确认 *setParameters* 是有定义的，在文件 *src/basics/ltiFunctor.h* 中。突然想到是不是编译器的版本问题，果断降级编译器，考虑将GCC降级 目前系统的gcc版本为4.8将其降级为4.6：\n　　```\n$sudo apt-get install gcc-4.6 g++-4.6\n　　```\n如果下载deb文件，则安装使用命令：\n　　```\n $sudo dpkg –i *.deb\n $sudo apt-get -f install //然后修改系统依赖\n　　```\n设置系统使用的默认 GCC\n　　```\n $ln -f -s /usr/bin/gcc-4.6 /usr/bin/gcc\n $ln -f -s /usr/bin/gcc-ar-4.6 /usr/bin/gcc-ar\n $ln -f -s /usr/bin/gcc-nm-4.6 /usr/bin/gcc-nm\n $ln -f -s /usr/bin/gcc-ranlib-4.6 /usr/bin/gcc-ranlib\n $ln -f -s /usr/bin/g++-4.6 /usr/bin/g++\n　　```\n##  linux/videodev.h: No such file or directory\nmake 后出现的错误：\n　　```\n ../src/io/ltiJPEGLibFunctor.cpp: In member function ‘bool lti::loadJPEG::load(FILE*, lti::image&, bool&)’:\n ../src/io/ltiJPEGLibFunctor.cpp:309:35: warning: variable ‘rowCounter’ set but not used [-Wunused-but-set-variable]\n Compiling debug version of ../src/io/ltiLeutronFrameGrabber.cpp\n Compiling debug version of ../src/io/ltiLncFeatureFile.cpp\n Compiling debug version of ../src/io/ltiLoadImageList.cpp\n Compiling debug version of ../src/io/ltiLoadVectorImageList.cpp\n Compiling debug version of ../src/io/ltiLTIFunctor.cpp\n Compiling debug version of ../src/io/ltiMicroEnablePulnix.cpp\n Compiling debug version of ../src/io/ltiPanTiltUnit.cpp\n Compiling debug version of ../src/io/ltiPNGFunctor.cpp\n Compiling debug version of ../src/io/ltiPNGLibFunctor.cpp\n Compiling debug version of ../src/io/ltiQuickCam.cpp\n Compiling debug version of ../src/io/ltiRunLengthCodec.cpp\n Compiling debug version of ../src/io/ltiSonyEviD100P.cpp\n Compiling debug version of ../src/io/ltiToUCam.cpp\n ../src/io/ltiToUCam.cpp:57:28: fatal error: linux/videodev.h: No such file or directory\n compilation terminated.\n make: *** [../obj/debug/ltiToUCam.o] Error 1\n　　```\n新版内核中已经不再有 *videodev.h* 文件，而是用 *libv4l1-videodev.h* 代替。先查找系统中是否有该文件：\n　　```\n $sudo find / -name videodev.h\n　　```\n系统不存在此文件需要安装：\n　　```\n$sudo apt-get install libv4l-dev\n　　```\n指向：\n　　```\n $sudo ln -s /usr/include/libv4l1-videodev.h /usr/include/linux/videodev.h\n　　```\n## pwc-ioctl.h: No such file or directory\nlit库make 后的错误：\n　　```\n ../src/io/ltiToUCam.cpp:58:23: fatal error: pwc-ioctl.h: No such file or directory\ncompilation terminated.\n　　```\n系统提示不存在文件 [pwc-ioctl.h](https://saillard.org/linux/pwc/) 这个文件应该是webcamera的驱动文件,下载地址: https://saillard.org/linux/pwc/files/pwc-10.0.11.tar.bz2\n下载完后，解压并找到 *pwc-ioctl.h* 文件，拷贝到 *lti* 源代码 的 */src/io/* 目录下。\n\n\n\n\n\n\n\n\n","slug":"ros-navigation-compile","published":1,"updated":"2017-05-23T23:50:31.492Z","layout":"post","photos":[],"link":"","_id":"cj4hne535001dw8inrwe8lkem","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>计划在树莓派上仿真一下<a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 的导航功能，需要安装 <a href=\"https://github.com/ros-planning/navigation\" target=\"_blank\" rel=\"external\">navigation</a>包，结果编译 <a href=\"https://github.com/ros-planning/navigation\" target=\"_blank\" rel=\"external\">navigation</a>包 时提示错误：<br>　　<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">– <span class=\"keyword\">package</span> ‘orocos-bfl’ not found </div><div class=\"line\">CMake Error at <span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/cmake-2.8/</span>Modules/FindPkgConfig.<span class=\"string\">cmake:</span><span class=\"number\">283</span> (message): </div><div class=\"line\">A required <span class=\"keyword\">package</span> was not found </div><div class=\"line\">Call Stack (most recent call first): </div><div class=\"line\"><span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/cmake-2.8/</span>Modules/FindPkgConfig.<span class=\"string\">cmake:</span><span class=\"number\">337</span> (_pkg_check_modules_internal) </div><div class=\"line\">robot_pose_ekf/CMakeLists.<span class=\"string\">txt:</span><span class=\"number\">6</span> (pkg_check_modules)</div></pre></td></tr></table></figure></p>\n<p>于是填了后面的坑…<br><a id=\"more\"></a></p>\n<h1 id=\"贝叶斯滤波库\"><a href=\"#贝叶斯滤波库\" class=\"headerlink\" title=\"贝叶斯滤波库\"></a>贝叶斯滤波库</h1><p> <em>package ‘orocos-bfl’</em>是贝叶斯滤波库，参考 <a href=\"http://www.orocos.org/bfl\" target=\"_blank\" rel=\"external\">BFL</a>。贝叶斯滤波库能够为动态贝叶斯网络的推理提供一个应用程序独立框架，以及递归信息处理和基于贝叶斯规则的估计算法,如卡尔曼滤波器,粒子过滤器、蒙特卡洛方法等，多应用于机器人的导航中。</p>\n<h2 id=\"移植\"><a href=\"#移植\" class=\"headerlink\" title=\"移植\"></a>移植</h2><p>首先下载源码：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"regexp\">//</span>people.mech.kuleuven.be<span class=\"regexp\">/~tdelaet/</span>bfl_tar<span class=\"regexp\">/orocos-bfl-0.6.1-src.tar.bz2</span></div></pre></td></tr></table></figure></p>\n<p>解压并建立 <em>build</em> 目录：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">tar jxvf orocos-bfl-0.6.1-src.tar.bz2</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span>  orocos-bfl-0.6.1-src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">mkdir build</span></div></pre></td></tr></table></figure></p>\n<p>编译：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$cmake</span> .</span></div></pre></td></tr></table></figure></p>\n<p>提示错误：<img src=\"/2017/05/23/ros-navigation-compile/ltierror.jpg\" alt=\"\"><br>缺少 <a href=\"http://ltilib.sourceforge.net/doc/homepage/index.shtml\" target=\"_blank\" rel=\"external\">LTI-Lib</a> 库, <a href=\"http://ltilib.sourceforge.net/doc/homepage/index.shtml\" target=\"_blank\" rel=\"external\">LTI-Lib</a> 是一个基于 <em>C++</em> 的面向对象的图像处理和计算机视觉库。</p>\n<h3 id=\"LTI-Lib库的移植\"><a href=\"#LTI-Lib库的移植\" class=\"headerlink\" title=\"LTI-Lib库的移植\"></a>LTI-Lib库的移植</h3><p>方法参考 <a href=\"https://people.mech.kuleuven.be/~tdelaet/bfl_doc/installation_guide/node5.html\" target=\"_blank\" rel=\"external\">LTI-Install-Guide</a>，树莓派貌似只能源码安装。<br>安装之前先安装 <em>libxt-dev</em> 和 <em>libboost</em><br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install libxt-dev</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install libboost-dev</span></div></pre></td></tr></table></figure></p>\n<p>当然也可以源码安装<em>libxt-dev</em>：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$https</span>:<span class=\"comment\">//launchpad.net/ubuntu/+archive/primary/+files/libxt_1.1.4.orig.tar.gz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> zxvf libxt_1.<span class=\"number\">1.4</span><span class=\"selector-class\">.orig</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></div><div class=\"line\"><span class=\"variable\">$cd</span> libxt_1.<span class=\"number\">1.4</span><span class=\"selector-class\">.orig</span></div><div class=\"line\"><span class=\"variable\">$make</span>  </div><div class=\"line\"><span class=\"variable\">$sudo</span> make install</div></pre></td></tr></table></figure></p>\n<p>源码安装 <a href=\"https://sourceforge.net/projects/boost/files/\" target=\"_blank\" rel=\"external\">libboost-dev</a> 参考 <a href=\"https://people.mech.kuleuven.be/~tdelaet/bfl_doc/installation_guide/node7.html\" target=\"_blank\" rel=\"external\">Boost-Install</a><br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">tar -xzvf boost_1_34_0.tar.gz</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> boost_1_34_o</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">./configure</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">make </span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo make install</span></div></pre></td></tr></table></figure></p>\n<p>源码安装<a href=\"http://ltilib.sourceforge.net/doc/homepage/index.shtml\" target=\"_blank\" rel=\"external\">LTI-Lib</a><br>下载源码<a href=\"https://sourceforge.net/projects/ltilib/files/LTI-Lib-1/1.9.16/\" target=\"_blank\" rel=\"external\">LTI-Source-Code</a>,并解压进入到 <em>linux</em> 目录：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$tar</span> zxvf <span class=\"number\">100410</span>_ltilib-<span class=\"number\">1.9</span>.<span class=\"number\">16</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> zxvf <span class=\"number\">100410</span>_ltilib-extras-<span class=\"number\">1.9</span>.<span class=\"number\">16</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></div><div class=\"line\"><span class=\"variable\">$cd</span> ltilib/linux</div></pre></td></tr></table></figure></p>\n<p>生成Makefile：</p>\n<p>　　<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$make -f Makefile.cvs</div><div class=\"line\">$<span class=\"string\">./configure</span> <span class=\"params\">--disable-debug</span> <span class=\"params\">--without-gtk</span> <span class=\"params\">--disable-gtk</span> <span class=\"params\">--prefix=</span>~<span class=\"string\">/install</span></div></pre></td></tr></table></figure></p>\n<p>编译安装,默认的安装目录是/usr/local/:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$make</span></span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> make install</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"再次回到BFL的编译\"><a href=\"#再次回到BFL的编译\" class=\"headerlink\" title=\"再次回到BFL的编译\"></a>再次回到BFL的编译</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">tar -xjvf orocos-bfl-0.6.1-src.tar.bz2<span class=\"comment\">#解压</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> orocos-ocl-1.8.0</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">mkdir build</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">make check //测试编译结果</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo make install //安装</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h1><p>编译过程中遇到很多问题，尤其是 <a href=\"http://ltilib.sourceforge.net/doc/homepage/index.shtml\" target=\"_blank\" rel=\"external\">LTI-Lib</a> 库的编译，该库貌似最近没有更新，而且不适应新的 <em>G++</em>编译器。</p>\n<h2 id=\"aclocal-not-found\"><a href=\"#aclocal-not-found\" class=\"headerlink\" title=\"aclocal: not found\"></a>aclocal: not found</h2><p>编译 <a href=\"http://ltilib.sourceforge.net/doc/homepage/index.shtml\" target=\"_blank\" rel=\"external\">LTI-Lib</a> 时在步骤 <em>make</em> 提示错误：<br>　　<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$<span class=\"built_in\">make</span> -f Makefile.cvs</div><div class=\"line\"> Calling aclocal...</div><div class=\"line\"> /bin/sh: <span class=\"number\">2</span>: aclocal: <span class=\"keyword\">not</span> found</div><div class=\"line\"> <span class=\"built_in\">make</span>: *** [aclocal.m4] <span class=\"built_in\">Error</span> <span class=\"number\">127</span></div></pre></td></tr></table></figure></p>\n<p>需要安装 <em>autoconf</em><br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install autoconf</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"cannot-run-bin-bash-config-sub\"><a href=\"#cannot-run-bin-bash-config-sub\" class=\"headerlink\" title=\"cannot run /bin/bash ./config.sub\"></a>cannot run /bin/bash ./config.sub</h2><p>在 <a href=\"http://ltilib.sourceforge.net/doc/homepage/index.shtml\" target=\"_blank\" rel=\"external\">LTI-Lib</a> 的编译配置步骤./configure出现错误：<br>　　<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cannot <span class=\"built_in\">run</span> /bin/bash ./<span class=\"built_in\">config</span>.sub</div></pre></td></tr></table></figure></p>\n<p>确定已安装libtool libtool-ltdl libtool-ltdl-devel<br>如果没安装，使用以下命令安装：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get  install  libtool</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get  install  libltdl-dev</span></div></pre></td></tr></table></figure></p>\n<p>如果都已安装应该是链接出了问题。<br>　　<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ls -al <span class=\"built_in\">config</span>/* 查看链接路径</div><div class=\"line\">$<span class=\"built_in\">find</span> / -name <span class=\"built_in\">config</span>.<span class=\"built_in\">sub</span> 或者locate <span class=\"built_in\">config</span>.<span class=\"built_in\">sub</span> 查找<span class=\"built_in\">config</span>.<span class=\"built_in\">sub</span>的路径</div><div class=\"line\">$ln -s -f /正确路径/<span class=\"built_in\">config</span>.<span class=\"built_in\">sub</span> <span class=\"built_in\">config</span>.<span class=\"built_in\">sub</span></div></pre></td></tr></table></figure></p>\n<p>例如我的:<br>　　<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ln -s -f /usr/share/libtool/<span class=\"built_in\">config</span>/<span class=\"built_in\">config</span>.<span class=\"built_in\">sub</span> <span class=\"built_in\">config</span>.<span class=\"built_in\">sub</span></div></pre></td></tr></table></figure></p>\n<p>同样的道理：config.guess路径不对也这样改过来,或者直接拷贝系统下的文件：<br> <em>/usr/share/libtool/config/config.sub</em> 和 <em>config.guess </em>到LTI源码目录。</p>\n<h2 id=\"configure-error-cannot-compile-a-simple-Fortran-program\"><a href=\"#configure-error-cannot-compile-a-simple-Fortran-program\" class=\"headerlink\" title=\"configure: error: cannot compile a simple Fortran program\"></a>configure: error: cannot compile a simple Fortran program</h2><p> 配置 <a href=\"http://ltilib.sourceforge.net/doc/homepage/index.shtml\" target=\"_blank\" rel=\"external\">LTI-Lib</a> 时出现错误：<br>　　<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure</div><div class=\"line\">checking <span class=\"keyword\">for</span> Fortran <span class=\"number\">77</span> libraries <span class=\"keyword\">of</span> ...</div><div class=\"line\">checking <span class=\"keyword\">for</span> gcc... gcc</div><div class=\"line\">checking whether we are <span class=\"keyword\">using</span> the GNU C compiler... yes</div><div class=\"line\">checking whether gcc accepts -g... yes</div><div class=\"line\">checking <span class=\"keyword\">for</span> gcc <span class=\"keyword\">option</span> <span class=\"keyword\">to</span> accept ISO C89... none needed</div><div class=\"line\">checking <span class=\"keyword\">for</span> dummy main <span class=\"keyword\">to</span> link <span class=\"keyword\">with</span> Fortran <span class=\"number\">77</span> libraries... none</div><div class=\"line\">checking <span class=\"keyword\">for</span> Fortran <span class=\"number\">77</span> name-mangling scheme... configure: <span class=\"keyword\">error</span>: <span class=\"keyword\">in</span> `/home/steven/workspace/ros/ ltilib/linux<span class=\"comment\">':</span></div><div class=\"line\">configure: <span class=\"keyword\">error</span>: cannot compile a simple Fortran program</div><div class=\"line\">See `config.log<span class=\"comment\">' for more details</span></div></pre></td></tr></table></figure></p>\n<p>解决：<br>　　<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-<span class=\"built_in\">get</span> install f2c gfortran libblas-<span class=\"built_in\">dev</span> liblapack-<span class=\"built_in\">dev</span> libpcre3-<span class=\"built_in\">dev</span> libreadline-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"setParameters’-was-not-declared-in-this-scope\"><a href=\"#setParameters’-was-not-declared-in-this-scope\" class=\"headerlink\" title=\"setParameters’ was not declared in this scope\"></a>setParameters’ was not declared in this scope</h2><p>　　<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">make</div><div class=\"line\">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class=\"symbol\">h:</span> In instantiation of ‘<span class=\"symbol\">lti:</span><span class=\"symbol\">:cyclicTridiagonalEquationSystem&lt;T&gt;</span><span class=\"symbol\">:</span><span class=\"symbol\">:cyclicTridiagonalEquationSystem</span>(const <span class=\"symbol\">lti:</span><span class=\"symbol\">:cyclicTridiagonalEquationSystem&lt;T&gt;</span><span class=\"symbol\">:</span><span class=\"symbol\">:parameters&amp;</span>) [with T = double]’:</div><div class=\"line\">../src/math/ltiCyclicTridiagonalEquationSystem.<span class=\"symbol\">cpp:</span><span class=\"number\">44</span><span class=\"symbol\">:</span><span class=\"number\">18</span>:   required from here</div><div class=\"line\">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class=\"symbol\">h:</span><span class=\"number\">40</span><span class=\"symbol\">:</span><span class=\"number\">28</span>: <span class=\"symbol\">error:</span> ‘setParameters’ was <span class=\"keyword\">not</span> declared <span class=\"keyword\">in</span> this scope, <span class=\"keyword\">and</span> no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]</div><div class=\"line\">    setParameters(theParams);</div><div class=\"line\">                           ^</div><div class=\"line\">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class=\"symbol\">h:</span><span class=\"number\">40</span><span class=\"symbol\">:</span><span class=\"number\">28</span>: <span class=\"symbol\">note:</span> declarations <span class=\"keyword\">in</span> dependent  base ‘<span class=\"symbol\">lti:</span><span class=\"symbol\">:functor</span>’ are <span class=\"keyword\">not</span> found by unqualified lookup</div><div class=\"line\">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class=\"symbol\">h:</span><span class=\"number\">40</span><span class=\"symbol\">:</span><span class=\"number\">28</span>: <span class=\"symbol\">note:</span> <span class=\"keyword\">use</span> ‘this-&gt;setParameters’ instead</div><div class=\"line\">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class=\"symbol\">h:</span> In instantiation of ‘<span class=\"symbol\">lti:</span><span class=\"symbol\">:cyclicTridiagonalEquationSystem&lt;T&gt;</span><span class=\"symbol\">:</span><span class=\"symbol\">:cyclicTridiagonalEquationSystem</span>(<span class=\"symbol\">lti:</span><span class=\"symbol\">:vector&lt;T&gt;</span>, <span class=\"symbol\">lti:</span><span class=\"symbol\">:vector&lt;T&gt;</span>, <span class=\"symbol\">lti:</span><span class=\"symbol\">:vector&lt;T&gt;</span>, const T&amp;, const T&amp;) [with T = double]’:</div><div class=\"line\">../src/math/ltiCyclicTridiagonalEquationSystem.<span class=\"symbol\">cpp:</span><span class=\"number\">44</span><span class=\"symbol\">:</span><span class=\"number\">18</span>:   required from here</div><div class=\"line\">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class=\"symbol\">h:</span><span class=\"number\">54</span><span class=\"symbol\">:</span><span class=\"number\">20</span>: <span class=\"symbol\">error:</span> ‘setParameters’ was <span class=\"keyword\">not</span> declared <span class=\"keyword\">in</span> this scope, <span class=\"keyword\">and</span> no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]</div></pre></td></tr></table></figure></p>\n<p>经确认 <em>setParameters</em> 是有定义的，在文件 <em>src/basics/ltiFunctor.h</em> 中。突然想到是不是编译器的版本问题，果断降级编译器，考虑将GCC降级 目前系统的gcc版本为4.8将其降级为4.6：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install gcc-4.6 g++-4.6</span></div></pre></td></tr></table></figure></p>\n<p>如果下载deb文件，则安装使用命令：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> dpkg –<span class=\"selector-tag\">i</span> *<span class=\"selector-class\">.deb</span></div><div class=\"line\"><span class=\"variable\">$sudo</span> apt-get -f install <span class=\"comment\">//然后修改系统依赖</span></div></pre></td></tr></table></figure></p>\n<p>设置系统使用的默认 GCC<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ln</span> -f -s <span class=\"regexp\">/usr/</span>bin<span class=\"regexp\">/gcc-4.6 /u</span>sr<span class=\"regexp\">/bin/g</span>cc</div><div class=\"line\"><span class=\"variable\">$ln</span> -f -s <span class=\"regexp\">/usr/</span>bin<span class=\"regexp\">/gcc-ar-4.6 /u</span>sr<span class=\"regexp\">/bin/g</span>cc-ar</div><div class=\"line\"><span class=\"variable\">$ln</span> -f -s <span class=\"regexp\">/usr/</span>bin<span class=\"regexp\">/gcc-nm-4.6 /u</span>sr<span class=\"regexp\">/bin/g</span>cc-nm</div><div class=\"line\"><span class=\"variable\">$ln</span> -f -s <span class=\"regexp\">/usr/</span>bin<span class=\"regexp\">/gcc-ranlib-4.6 /u</span>sr<span class=\"regexp\">/bin/g</span>cc-ranlib</div><div class=\"line\"><span class=\"variable\">$ln</span> -f -s <span class=\"regexp\">/usr/</span>bin<span class=\"regexp\">/g++-4.6 /u</span>sr<span class=\"regexp\">/bin/g</span>++</div></pre></td></tr></table></figure></p>\n<h2 id=\"linux-videodev-h-No-such-file-or-directory\"><a href=\"#linux-videodev-h-No-such-file-or-directory\" class=\"headerlink\" title=\"linux/videodev.h: No such file or directory\"></a>linux/videodev.h: No such file or directory</h2><p>make 后出现的错误：<br>　　<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">../src/io/ltiJPEGLibFunctor.cpp: In member function ‘bool lti::loadJPEG::<span class=\"keyword\">load</span>(<span class=\"keyword\">FILE</span>*, lti::image&amp;, bool&amp;)’:</div><div class=\"line\">../src/io/ltiJPEGLibFunctor.cpp:<span class=\"number\">309</span>:<span class=\"number\">35</span>: <span class=\"keyword\">warning</span>: <span class=\"keyword\">variable</span> ‘rowCounter’ <span class=\"keyword\">set</span> but <span class=\"keyword\">not</span> used [-Wunused-but-<span class=\"keyword\">set</span>-<span class=\"keyword\">variable</span>]</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiLeutronFrameGrabber.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiLncFeatureFile.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiLoadImageList.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiLoadVectorImageList.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiLTIFunctor.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiMicroEnablePulnix.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiPanTiltUnit.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiPNGFunctor.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiPNGLibFunctor.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiQuickCam.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiRunLengthCodec.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiSonyEviD100P.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiToUCam.cpp</div><div class=\"line\">../src/io/ltiToUCam.cpp:<span class=\"number\">57</span>:<span class=\"number\">28</span>: fatal <span class=\"keyword\">error</span>: linux/videodev.h: <span class=\"keyword\">No</span> such <span class=\"keyword\">file</span> <span class=\"keyword\">or</span> <span class=\"keyword\">directory</span></div><div class=\"line\">compilation terminated.</div><div class=\"line\">make: *** [../obj/debug/ltiToUCam.o] <span class=\"keyword\">Error</span> <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>新版内核中已经不再有 <em>videodev.h</em> 文件，而是用 <em>libv4l1-videodev.h</em> 代替。先查找系统中是否有该文件：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> find / -name videodev.h</span></div></pre></td></tr></table></figure></p>\n<p>系统不存在此文件需要安装：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install libv4l-dev</span></div></pre></td></tr></table></figure></p>\n<p>指向：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> ln -s <span class=\"regexp\">/usr/i</span>nclude<span class=\"regexp\">/libv4l1-videodev.h /u</span>sr<span class=\"regexp\">/include/</span>linux<span class=\"regexp\">/videodev.h</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"pwc-ioctl-h-No-such-file-or-directory\"><a href=\"#pwc-ioctl-h-No-such-file-or-directory\" class=\"headerlink\" title=\"pwc-ioctl.h: No such file or directory\"></a>pwc-ioctl.h: No such file or directory</h2><p>lit库make 后的错误：<br>　　<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ..<span class=\"regexp\">/src/</span>io/ltiToUCam.<span class=\"string\">cpp:</span><span class=\"number\">58</span>:<span class=\"number\">23</span>: fatal <span class=\"string\">error:</span> pwc-ioctl.<span class=\"string\">h:</span> No such file or directory</div><div class=\"line\">compilation terminated.</div></pre></td></tr></table></figure></p>\n<p>系统提示不存在文件 <a href=\"https://saillard.org/linux/pwc/\" target=\"_blank\" rel=\"external\">pwc-ioctl.h</a> 这个文件应该是webcamera的驱动文件,下载地址: <a href=\"https://saillard.org/linux/pwc/files/pwc-10.0.11.tar.bz2\" target=\"_blank\" rel=\"external\">https://saillard.org/linux/pwc/files/pwc-10.0.11.tar.bz2</a><br>下载完后，解压并找到 <em>pwc-ioctl.h</em> 文件，拷贝到 <em>lti</em> 源代码 的 <em>/src/io/</em> 目录下。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>计划在树莓派上仿真一下<a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 的导航功能，需要安装 <a href=\"https://github.com/ros-planning/navigation\" target=\"_blank\" rel=\"external\">navigation</a>包，结果编译 <a href=\"https://github.com/ros-planning/navigation\" target=\"_blank\" rel=\"external\">navigation</a>包 时提示错误：<br>　　<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">– <span class=\"keyword\">package</span> ‘orocos-bfl’ not found </div><div class=\"line\">CMake Error at <span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/cmake-2.8/</span>Modules/FindPkgConfig.<span class=\"string\">cmake:</span><span class=\"number\">283</span> (message): </div><div class=\"line\">A required <span class=\"keyword\">package</span> was not found </div><div class=\"line\">Call Stack (most recent call first): </div><div class=\"line\"><span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/cmake-2.8/</span>Modules/FindPkgConfig.<span class=\"string\">cmake:</span><span class=\"number\">337</span> (_pkg_check_modules_internal) </div><div class=\"line\">robot_pose_ekf/CMakeLists.<span class=\"string\">txt:</span><span class=\"number\">6</span> (pkg_check_modules)</div></pre></td></tr></table></figure></p>\n<p>于是填了后面的坑…<br></p>","more":"<p></p>\n<h1 id=\"贝叶斯滤波库\"><a href=\"#贝叶斯滤波库\" class=\"headerlink\" title=\"贝叶斯滤波库\"></a>贝叶斯滤波库</h1><p> <em>package ‘orocos-bfl’</em>是贝叶斯滤波库，参考 <a href=\"http://www.orocos.org/bfl\" target=\"_blank\" rel=\"external\">BFL</a>。贝叶斯滤波库能够为动态贝叶斯网络的推理提供一个应用程序独立框架，以及递归信息处理和基于贝叶斯规则的估计算法,如卡尔曼滤波器,粒子过滤器、蒙特卡洛方法等，多应用于机器人的导航中。</p>\n<h2 id=\"移植\"><a href=\"#移植\" class=\"headerlink\" title=\"移植\"></a>移植</h2><p>首先下载源码：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"regexp\">//</span>people.mech.kuleuven.be<span class=\"regexp\">/~tdelaet/</span>bfl_tar<span class=\"regexp\">/orocos-bfl-0.6.1-src.tar.bz2</span></div></pre></td></tr></table></figure></p>\n<p>解压并建立 <em>build</em> 目录：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">tar jxvf orocos-bfl-0.6.1-src.tar.bz2</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span>  orocos-bfl-0.6.1-src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">mkdir build</span></div></pre></td></tr></table></figure></p>\n<p>编译：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$cmake</span> .</span></div></pre></td></tr></table></figure></p>\n<p>提示错误：<img src=\"/2017/05/23/ros-navigation-compile/ltierror.jpg\" alt=\"\"><br>缺少 <a href=\"http://ltilib.sourceforge.net/doc/homepage/index.shtml\" target=\"_blank\" rel=\"external\">LTI-Lib</a> 库, <a href=\"http://ltilib.sourceforge.net/doc/homepage/index.shtml\" target=\"_blank\" rel=\"external\">LTI-Lib</a> 是一个基于 <em>C++</em> 的面向对象的图像处理和计算机视觉库。</p>\n<h3 id=\"LTI-Lib库的移植\"><a href=\"#LTI-Lib库的移植\" class=\"headerlink\" title=\"LTI-Lib库的移植\"></a>LTI-Lib库的移植</h3><p>方法参考 <a href=\"https://people.mech.kuleuven.be/~tdelaet/bfl_doc/installation_guide/node5.html\" target=\"_blank\" rel=\"external\">LTI-Install-Guide</a>，树莓派貌似只能源码安装。<br>安装之前先安装 <em>libxt-dev</em> 和 <em>libboost</em><br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install libxt-dev</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install libboost-dev</span></div></pre></td></tr></table></figure></p>\n<p>当然也可以源码安装<em>libxt-dev</em>：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$https</span>:<span class=\"comment\">//launchpad.net/ubuntu/+archive/primary/+files/libxt_1.1.4.orig.tar.gz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> zxvf libxt_1.<span class=\"number\">1.4</span><span class=\"selector-class\">.orig</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></div><div class=\"line\"><span class=\"variable\">$cd</span> libxt_1.<span class=\"number\">1.4</span><span class=\"selector-class\">.orig</span></div><div class=\"line\"><span class=\"variable\">$make</span>  </div><div class=\"line\"><span class=\"variable\">$sudo</span> make install</div></pre></td></tr></table></figure></p>\n<p>源码安装 <a href=\"https://sourceforge.net/projects/boost/files/\" target=\"_blank\" rel=\"external\">libboost-dev</a> 参考 <a href=\"https://people.mech.kuleuven.be/~tdelaet/bfl_doc/installation_guide/node7.html\" target=\"_blank\" rel=\"external\">Boost-Install</a><br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">tar -xzvf boost_1_34_0.tar.gz</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> boost_1_34_o</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">./configure</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">make </span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo make install</span></div></pre></td></tr></table></figure></p>\n<p>源码安装<a href=\"http://ltilib.sourceforge.net/doc/homepage/index.shtml\" target=\"_blank\" rel=\"external\">LTI-Lib</a><br>下载源码<a href=\"https://sourceforge.net/projects/ltilib/files/LTI-Lib-1/1.9.16/\" target=\"_blank\" rel=\"external\">LTI-Source-Code</a>,并解压进入到 <em>linux</em> 目录：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$tar</span> zxvf <span class=\"number\">100410</span>_ltilib-<span class=\"number\">1.9</span>.<span class=\"number\">16</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> zxvf <span class=\"number\">100410</span>_ltilib-extras-<span class=\"number\">1.9</span>.<span class=\"number\">16</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></div><div class=\"line\"><span class=\"variable\">$cd</span> ltilib/linux</div></pre></td></tr></table></figure></p>\n<p>生成Makefile：</p>\n<p>　　<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$make -f Makefile.cvs</div><div class=\"line\">$<span class=\"string\">./configure</span> <span class=\"params\">--disable-debug</span> <span class=\"params\">--without-gtk</span> <span class=\"params\">--disable-gtk</span> <span class=\"params\">--prefix=</span>~<span class=\"string\">/install</span></div></pre></td></tr></table></figure></p>\n<p>编译安装,默认的安装目录是/usr/local/:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$make</span></span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> make install</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"再次回到BFL的编译\"><a href=\"#再次回到BFL的编译\" class=\"headerlink\" title=\"再次回到BFL的编译\"></a>再次回到BFL的编译</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">tar -xjvf orocos-bfl-0.6.1-src.tar.bz2<span class=\"comment\">#解压</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> orocos-ocl-1.8.0</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">mkdir build</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">make check //测试编译结果</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo make install //安装</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h1><p>编译过程中遇到很多问题，尤其是 <a href=\"http://ltilib.sourceforge.net/doc/homepage/index.shtml\" target=\"_blank\" rel=\"external\">LTI-Lib</a> 库的编译，该库貌似最近没有更新，而且不适应新的 <em>G++</em>编译器。</p>\n<h2 id=\"aclocal-not-found\"><a href=\"#aclocal-not-found\" class=\"headerlink\" title=\"aclocal: not found\"></a>aclocal: not found</h2><p>编译 <a href=\"http://ltilib.sourceforge.net/doc/homepage/index.shtml\" target=\"_blank\" rel=\"external\">LTI-Lib</a> 时在步骤 <em>make</em> 提示错误：<br>　　<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$<span class=\"built_in\">make</span> -f Makefile.cvs</div><div class=\"line\"> Calling aclocal...</div><div class=\"line\"> /bin/sh: <span class=\"number\">2</span>: aclocal: <span class=\"keyword\">not</span> found</div><div class=\"line\"> <span class=\"built_in\">make</span>: *** [aclocal.m4] <span class=\"built_in\">Error</span> <span class=\"number\">127</span></div></pre></td></tr></table></figure></p>\n<p>需要安装 <em>autoconf</em><br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install autoconf</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"cannot-run-bin-bash-config-sub\"><a href=\"#cannot-run-bin-bash-config-sub\" class=\"headerlink\" title=\"cannot run /bin/bash ./config.sub\"></a>cannot run /bin/bash ./config.sub</h2><p>在 <a href=\"http://ltilib.sourceforge.net/doc/homepage/index.shtml\" target=\"_blank\" rel=\"external\">LTI-Lib</a> 的编译配置步骤./configure出现错误：<br>　　<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cannot <span class=\"built_in\">run</span> /bin/bash ./<span class=\"built_in\">config</span>.sub</div></pre></td></tr></table></figure></p>\n<p>确定已安装libtool libtool-ltdl libtool-ltdl-devel<br>如果没安装，使用以下命令安装：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get  install  libtool</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get  install  libltdl-dev</span></div></pre></td></tr></table></figure></p>\n<p>如果都已安装应该是链接出了问题。<br>　　<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ls -al <span class=\"built_in\">config</span>/* 查看链接路径</div><div class=\"line\">$<span class=\"built_in\">find</span> / -name <span class=\"built_in\">config</span>.<span class=\"built_in\">sub</span> 或者locate <span class=\"built_in\">config</span>.<span class=\"built_in\">sub</span> 查找<span class=\"built_in\">config</span>.<span class=\"built_in\">sub</span>的路径</div><div class=\"line\">$ln -s -f /正确路径/<span class=\"built_in\">config</span>.<span class=\"built_in\">sub</span> <span class=\"built_in\">config</span>.<span class=\"built_in\">sub</span></div></pre></td></tr></table></figure></p>\n<p>例如我的:<br>　　<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ln -s -f /usr/share/libtool/<span class=\"built_in\">config</span>/<span class=\"built_in\">config</span>.<span class=\"built_in\">sub</span> <span class=\"built_in\">config</span>.<span class=\"built_in\">sub</span></div></pre></td></tr></table></figure></p>\n<p>同样的道理：config.guess路径不对也这样改过来,或者直接拷贝系统下的文件：<br> <em>/usr/share/libtool/config/config.sub</em> 和 <em>config.guess </em>到LTI源码目录。</p>\n<h2 id=\"configure-error-cannot-compile-a-simple-Fortran-program\"><a href=\"#configure-error-cannot-compile-a-simple-Fortran-program\" class=\"headerlink\" title=\"configure: error: cannot compile a simple Fortran program\"></a>configure: error: cannot compile a simple Fortran program</h2><p> 配置 <a href=\"http://ltilib.sourceforge.net/doc/homepage/index.shtml\" target=\"_blank\" rel=\"external\">LTI-Lib</a> 时出现错误：<br>　　<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure</div><div class=\"line\">checking <span class=\"keyword\">for</span> Fortran <span class=\"number\">77</span> libraries <span class=\"keyword\">of</span> ...</div><div class=\"line\">checking <span class=\"keyword\">for</span> gcc... gcc</div><div class=\"line\">checking whether we are <span class=\"keyword\">using</span> the GNU C compiler... yes</div><div class=\"line\">checking whether gcc accepts -g... yes</div><div class=\"line\">checking <span class=\"keyword\">for</span> gcc <span class=\"keyword\">option</span> <span class=\"keyword\">to</span> accept ISO C89... none needed</div><div class=\"line\">checking <span class=\"keyword\">for</span> dummy main <span class=\"keyword\">to</span> link <span class=\"keyword\">with</span> Fortran <span class=\"number\">77</span> libraries... none</div><div class=\"line\">checking <span class=\"keyword\">for</span> Fortran <span class=\"number\">77</span> name-mangling scheme... configure: <span class=\"keyword\">error</span>: <span class=\"keyword\">in</span> `/home/steven/workspace/ros/ ltilib/linux<span class=\"comment\">':</span></div><div class=\"line\">configure: <span class=\"keyword\">error</span>: cannot compile a simple Fortran program</div><div class=\"line\">See `config.log<span class=\"comment\">' for more details</span></div></pre></td></tr></table></figure></p>\n<p>解决：<br>　　<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-<span class=\"built_in\">get</span> install f2c gfortran libblas-<span class=\"built_in\">dev</span> liblapack-<span class=\"built_in\">dev</span> libpcre3-<span class=\"built_in\">dev</span> libreadline-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"setParameters’-was-not-declared-in-this-scope\"><a href=\"#setParameters’-was-not-declared-in-this-scope\" class=\"headerlink\" title=\"setParameters’ was not declared in this scope\"></a>setParameters’ was not declared in this scope</h2><p>　　<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">make</div><div class=\"line\">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class=\"symbol\">h:</span> In instantiation of ‘<span class=\"symbol\">lti:</span><span class=\"symbol\">:cyclicTridiagonalEquationSystem&lt;T&gt;</span><span class=\"symbol\">:</span><span class=\"symbol\">:cyclicTridiagonalEquationSystem</span>(const <span class=\"symbol\">lti:</span><span class=\"symbol\">:cyclicTridiagonalEquationSystem&lt;T&gt;</span><span class=\"symbol\">:</span><span class=\"symbol\">:parameters&amp;</span>) [with T = double]’:</div><div class=\"line\">../src/math/ltiCyclicTridiagonalEquationSystem.<span class=\"symbol\">cpp:</span><span class=\"number\">44</span><span class=\"symbol\">:</span><span class=\"number\">18</span>:   required from here</div><div class=\"line\">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class=\"symbol\">h:</span><span class=\"number\">40</span><span class=\"symbol\">:</span><span class=\"number\">28</span>: <span class=\"symbol\">error:</span> ‘setParameters’ was <span class=\"keyword\">not</span> declared <span class=\"keyword\">in</span> this scope, <span class=\"keyword\">and</span> no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]</div><div class=\"line\">    setParameters(theParams);</div><div class=\"line\">                           ^</div><div class=\"line\">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class=\"symbol\">h:</span><span class=\"number\">40</span><span class=\"symbol\">:</span><span class=\"number\">28</span>: <span class=\"symbol\">note:</span> declarations <span class=\"keyword\">in</span> dependent  base ‘<span class=\"symbol\">lti:</span><span class=\"symbol\">:functor</span>’ are <span class=\"keyword\">not</span> found by unqualified lookup</div><div class=\"line\">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class=\"symbol\">h:</span><span class=\"number\">40</span><span class=\"symbol\">:</span><span class=\"number\">28</span>: <span class=\"symbol\">note:</span> <span class=\"keyword\">use</span> ‘this-&gt;setParameters’ instead</div><div class=\"line\">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class=\"symbol\">h:</span> In instantiation of ‘<span class=\"symbol\">lti:</span><span class=\"symbol\">:cyclicTridiagonalEquationSystem&lt;T&gt;</span><span class=\"symbol\">:</span><span class=\"symbol\">:cyclicTridiagonalEquationSystem</span>(<span class=\"symbol\">lti:</span><span class=\"symbol\">:vector&lt;T&gt;</span>, <span class=\"symbol\">lti:</span><span class=\"symbol\">:vector&lt;T&gt;</span>, <span class=\"symbol\">lti:</span><span class=\"symbol\">:vector&lt;T&gt;</span>, const T&amp;, const T&amp;) [with T = double]’:</div><div class=\"line\">../src/math/ltiCyclicTridiagonalEquationSystem.<span class=\"symbol\">cpp:</span><span class=\"number\">44</span><span class=\"symbol\">:</span><span class=\"number\">18</span>:   required from here</div><div class=\"line\">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class=\"symbol\">h:</span><span class=\"number\">54</span><span class=\"symbol\">:</span><span class=\"number\">20</span>: <span class=\"symbol\">error:</span> ‘setParameters’ was <span class=\"keyword\">not</span> declared <span class=\"keyword\">in</span> this scope, <span class=\"keyword\">and</span> no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]</div></pre></td></tr></table></figure></p>\n<p>经确认 <em>setParameters</em> 是有定义的，在文件 <em>src/basics/ltiFunctor.h</em> 中。突然想到是不是编译器的版本问题，果断降级编译器，考虑将GCC降级 目前系统的gcc版本为4.8将其降级为4.6：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install gcc-4.6 g++-4.6</span></div></pre></td></tr></table></figure></p>\n<p>如果下载deb文件，则安装使用命令：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> dpkg –<span class=\"selector-tag\">i</span> *<span class=\"selector-class\">.deb</span></div><div class=\"line\"><span class=\"variable\">$sudo</span> apt-get -f install <span class=\"comment\">//然后修改系统依赖</span></div></pre></td></tr></table></figure></p>\n<p>设置系统使用的默认 GCC<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ln</span> -f -s <span class=\"regexp\">/usr/</span>bin<span class=\"regexp\">/gcc-4.6 /u</span>sr<span class=\"regexp\">/bin/g</span>cc</div><div class=\"line\"><span class=\"variable\">$ln</span> -f -s <span class=\"regexp\">/usr/</span>bin<span class=\"regexp\">/gcc-ar-4.6 /u</span>sr<span class=\"regexp\">/bin/g</span>cc-ar</div><div class=\"line\"><span class=\"variable\">$ln</span> -f -s <span class=\"regexp\">/usr/</span>bin<span class=\"regexp\">/gcc-nm-4.6 /u</span>sr<span class=\"regexp\">/bin/g</span>cc-nm</div><div class=\"line\"><span class=\"variable\">$ln</span> -f -s <span class=\"regexp\">/usr/</span>bin<span class=\"regexp\">/gcc-ranlib-4.6 /u</span>sr<span class=\"regexp\">/bin/g</span>cc-ranlib</div><div class=\"line\"><span class=\"variable\">$ln</span> -f -s <span class=\"regexp\">/usr/</span>bin<span class=\"regexp\">/g++-4.6 /u</span>sr<span class=\"regexp\">/bin/g</span>++</div></pre></td></tr></table></figure></p>\n<h2 id=\"linux-videodev-h-No-such-file-or-directory\"><a href=\"#linux-videodev-h-No-such-file-or-directory\" class=\"headerlink\" title=\"linux/videodev.h: No such file or directory\"></a>linux/videodev.h: No such file or directory</h2><p>make 后出现的错误：<br>　　<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">../src/io/ltiJPEGLibFunctor.cpp: In member function ‘bool lti::loadJPEG::<span class=\"keyword\">load</span>(<span class=\"keyword\">FILE</span>*, lti::image&amp;, bool&amp;)’:</div><div class=\"line\">../src/io/ltiJPEGLibFunctor.cpp:<span class=\"number\">309</span>:<span class=\"number\">35</span>: <span class=\"keyword\">warning</span>: <span class=\"keyword\">variable</span> ‘rowCounter’ <span class=\"keyword\">set</span> but <span class=\"keyword\">not</span> used [-Wunused-but-<span class=\"keyword\">set</span>-<span class=\"keyword\">variable</span>]</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiLeutronFrameGrabber.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiLncFeatureFile.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiLoadImageList.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiLoadVectorImageList.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiLTIFunctor.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiMicroEnablePulnix.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiPanTiltUnit.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiPNGFunctor.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiPNGLibFunctor.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiQuickCam.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiRunLengthCodec.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiSonyEviD100P.cpp</div><div class=\"line\">Compiling debug <span class=\"keyword\">version</span> <span class=\"keyword\">of</span> ../src/io/ltiToUCam.cpp</div><div class=\"line\">../src/io/ltiToUCam.cpp:<span class=\"number\">57</span>:<span class=\"number\">28</span>: fatal <span class=\"keyword\">error</span>: linux/videodev.h: <span class=\"keyword\">No</span> such <span class=\"keyword\">file</span> <span class=\"keyword\">or</span> <span class=\"keyword\">directory</span></div><div class=\"line\">compilation terminated.</div><div class=\"line\">make: *** [../obj/debug/ltiToUCam.o] <span class=\"keyword\">Error</span> <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>新版内核中已经不再有 <em>videodev.h</em> 文件，而是用 <em>libv4l1-videodev.h</em> 代替。先查找系统中是否有该文件：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> find / -name videodev.h</span></div></pre></td></tr></table></figure></p>\n<p>系统不存在此文件需要安装：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install libv4l-dev</span></div></pre></td></tr></table></figure></p>\n<p>指向：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> ln -s <span class=\"regexp\">/usr/i</span>nclude<span class=\"regexp\">/libv4l1-videodev.h /u</span>sr<span class=\"regexp\">/include/</span>linux<span class=\"regexp\">/videodev.h</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"pwc-ioctl-h-No-such-file-or-directory\"><a href=\"#pwc-ioctl-h-No-such-file-or-directory\" class=\"headerlink\" title=\"pwc-ioctl.h: No such file or directory\"></a>pwc-ioctl.h: No such file or directory</h2><p>lit库make 后的错误：<br>　　<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ..<span class=\"regexp\">/src/</span>io/ltiToUCam.<span class=\"string\">cpp:</span><span class=\"number\">58</span>:<span class=\"number\">23</span>: fatal <span class=\"string\">error:</span> pwc-ioctl.<span class=\"string\">h:</span> No such file or directory</div><div class=\"line\">compilation terminated.</div></pre></td></tr></table></figure></p>\n<p>系统提示不存在文件 <a href=\"https://saillard.org/linux/pwc/\" target=\"_blank\" rel=\"external\">pwc-ioctl.h</a> 这个文件应该是webcamera的驱动文件,下载地址: <a href=\"https://saillard.org/linux/pwc/files/pwc-10.0.11.tar.bz2\" target=\"_blank\" rel=\"external\">https://saillard.org/linux/pwc/files/pwc-10.0.11.tar.bz2</a><br>下载完后，解压并找到 <em>pwc-ioctl.h</em> 文件，拷贝到 <em>lti</em> 源代码 的 <em>/src/io/</em> 目录下。</p>"},{"title":"ROS初级一 安装与配置","date":"2017-05-26T00:23:23.000Z","comments":1,"_content":"一直想记录一下ROS学习过程中的点滴，先从最基础的 ROS-Beginner-Tutorials开始， 以便于帮助更多的人，本篇是ROS学习的开篇。\n# ROS安装\n目前ROS官方还在维护的版本有4个(截至201705),参考 [ROS-Distributions](http://wiki.ros.org/Distributions)：![](ros-primary-tutorial-1/rosv.jpg)\n<!--more-->\n因为我的环境是ubuntu14.04,支持的 ROS 版本为 [ROS-Indigo](http://wiki.ros.org/indigo), 因此我选择安装 [ROS-Indigo](http://wiki.ros.org/indigo)。\n*环境： ubuntu 14.04 Trusty LTS 32bits*\n安装可以参考官网: [ROS-Indigo-Installation-ubuntu](http://wiki.ros.org/indigo/Installation/Ubuntu)\n添加代码仓：\n   ```\n $sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list'\n   ```\n设定key:\n   ```\n $sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116\n   ```\n更新：\n   ```\n $sudo apt-get update\n   ```\n选择桌面版完全安装：\n   ```\n $sudo apt-get install ros-indigo-desktop-full\n   ```\n初始化rosdep:\n   ```\n $sudo rosdep init\n $rosdep update\n   ```\n设定环境变量让系统能找到ROS：\n   ```\n $echo \"source /opt/ros/indigo/setup.bash\" >> ~/.bashrc\n $source ~/.bashrc\n   ```\n安装rosinstall工具，方便下载ROS：\n   ```\n $sudo apt-get install python-rosinstall\n   ```\n# 管理环境\n检查我们是否配置好了环境变量：\n   ```\n $export | grep ROS\n   ```\n检查是否有 [ROS_ROOT](http://wiki.ros.org/ROS/EnvironmentVariables#ROS_ROOT) 和 [ROS_PACKAGE_PATH](http://wiki.ros.org/ROS/EnvironmentVariables#ROS_PACKAGE_PATH) 的配置。\n# 创建ROS工作空间\n[catkin_make](http://wiki.ros.org/catkin/commands/catkin_make) 命令只适用于 ROS Groovy 及其以后的版本。\n\n   ```\n $mkdir -p ~/catkin_ws/src\n $cd ~/catkin_ws/src\n   ```\n这就创建了一个 [catkin 工作空间](http://wiki.ros.org/catkin/workspaces), 里面是空的，只有一个 [CMakeLists.txt](http://wiki.ros.org/catkin/CMakeLists.txt), 但依然可以编译它：\n   ```\n $cd ~/catkin_ws/\n $catkin_make\n   ```\n当前目录下会生成 *build* 和 *devel* 这两个文件夹。在 *devel* 文件夹里面可以看到几个 setup.*sh 文件。 source 这些文件中的任何一个都可以将当前工作空间设置在ROS工作环境的最顶层，参考 [catkin](http://wiki.ros.org/catkin)文档。接下来首先 source 一下新生成的 setup.bash 文件：\n   ```\n $source ~/catkin_ws/devel/setup.bash\n   ```\n也可以将这句命令加入到 ~/.bashrc 中，这样每次打开一个 *terminal* 会自动 *source* 。\n确保工作空间已经正确配置可以通过以下命令查看：\n   ```\n $echo $ROS_PACKAGE_PATH\n   ```\n正确的输出一般为：\n   ```\n/home/yourusername/catkin_ws/src:/opt/ros/indigo/share:/opt/ros/indigo/stacks\n   ```\n至此，ROS的安装与配置已经搭建完成。\n参考 [ROS-Beginner-Tutorials](http://wiki.ros.org/cn/ROS/Tutorials)。\n\n \n","source":"_posts/ros-primary-tutorial-1.md","raw":"---\ntitle: ROS初级一 安装与配置\ndate: 2017-05-26 08:23:23\ncategories: ROS\ntags: ROS Installation\ncomments: true\n---\n一直想记录一下ROS学习过程中的点滴，先从最基础的 ROS-Beginner-Tutorials开始， 以便于帮助更多的人，本篇是ROS学习的开篇。\n# ROS安装\n目前ROS官方还在维护的版本有4个(截至201705),参考 [ROS-Distributions](http://wiki.ros.org/Distributions)：![](ros-primary-tutorial-1/rosv.jpg)\n<!--more-->\n因为我的环境是ubuntu14.04,支持的 ROS 版本为 [ROS-Indigo](http://wiki.ros.org/indigo), 因此我选择安装 [ROS-Indigo](http://wiki.ros.org/indigo)。\n*环境： ubuntu 14.04 Trusty LTS 32bits*\n安装可以参考官网: [ROS-Indigo-Installation-ubuntu](http://wiki.ros.org/indigo/Installation/Ubuntu)\n添加代码仓：\n   ```\n $sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list'\n   ```\n设定key:\n   ```\n $sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116\n   ```\n更新：\n   ```\n $sudo apt-get update\n   ```\n选择桌面版完全安装：\n   ```\n $sudo apt-get install ros-indigo-desktop-full\n   ```\n初始化rosdep:\n   ```\n $sudo rosdep init\n $rosdep update\n   ```\n设定环境变量让系统能找到ROS：\n   ```\n $echo \"source /opt/ros/indigo/setup.bash\" >> ~/.bashrc\n $source ~/.bashrc\n   ```\n安装rosinstall工具，方便下载ROS：\n   ```\n $sudo apt-get install python-rosinstall\n   ```\n# 管理环境\n检查我们是否配置好了环境变量：\n   ```\n $export | grep ROS\n   ```\n检查是否有 [ROS_ROOT](http://wiki.ros.org/ROS/EnvironmentVariables#ROS_ROOT) 和 [ROS_PACKAGE_PATH](http://wiki.ros.org/ROS/EnvironmentVariables#ROS_PACKAGE_PATH) 的配置。\n# 创建ROS工作空间\n[catkin_make](http://wiki.ros.org/catkin/commands/catkin_make) 命令只适用于 ROS Groovy 及其以后的版本。\n\n   ```\n $mkdir -p ~/catkin_ws/src\n $cd ~/catkin_ws/src\n   ```\n这就创建了一个 [catkin 工作空间](http://wiki.ros.org/catkin/workspaces), 里面是空的，只有一个 [CMakeLists.txt](http://wiki.ros.org/catkin/CMakeLists.txt), 但依然可以编译它：\n   ```\n $cd ~/catkin_ws/\n $catkin_make\n   ```\n当前目录下会生成 *build* 和 *devel* 这两个文件夹。在 *devel* 文件夹里面可以看到几个 setup.*sh 文件。 source 这些文件中的任何一个都可以将当前工作空间设置在ROS工作环境的最顶层，参考 [catkin](http://wiki.ros.org/catkin)文档。接下来首先 source 一下新生成的 setup.bash 文件：\n   ```\n $source ~/catkin_ws/devel/setup.bash\n   ```\n也可以将这句命令加入到 ~/.bashrc 中，这样每次打开一个 *terminal* 会自动 *source* 。\n确保工作空间已经正确配置可以通过以下命令查看：\n   ```\n $echo $ROS_PACKAGE_PATH\n   ```\n正确的输出一般为：\n   ```\n/home/yourusername/catkin_ws/src:/opt/ros/indigo/share:/opt/ros/indigo/stacks\n   ```\n至此，ROS的安装与配置已经搭建完成。\n参考 [ROS-Beginner-Tutorials](http://wiki.ros.org/cn/ROS/Tutorials)。\n\n \n","slug":"ros-primary-tutorial-1","published":1,"updated":"2017-06-13T05:55:40.424Z","layout":"post","photos":[],"link":"","_id":"cj4hne536001gw8inwqg1lne9","content":"<p>一直想记录一下ROS学习过程中的点滴，先从最基础的 ROS-Beginner-Tutorials开始， 以便于帮助更多的人，本篇是ROS学习的开篇。</p>\n<h1 id=\"ROS安装\"><a href=\"#ROS安装\" class=\"headerlink\" title=\"ROS安装\"></a>ROS安装</h1><p>目前ROS官方还在维护的版本有4个(截至201705),参考 <a href=\"http://wiki.ros.org/Distributions\" target=\"_blank\" rel=\"external\">ROS-Distributions</a>：<img src=\"/2017/05/26/ros-primary-tutorial-1/rosv.jpg\" alt=\"\"><br><a id=\"more\"></a><br>因为我的环境是ubuntu14.04,支持的 ROS 版本为 <a href=\"http://wiki.ros.org/indigo\" target=\"_blank\" rel=\"external\">ROS-Indigo</a>, 因此我选择安装 <a href=\"http://wiki.ros.org/indigo\" target=\"_blank\" rel=\"external\">ROS-Indigo</a>。<br><em>环境： ubuntu 14.04 Trusty LTS 32bits</em><br>安装可以参考官网: <a href=\"http://wiki.ros.org/indigo/Installation/Ubuntu\" target=\"_blank\" rel=\"external\">ROS-Indigo-Installation-ubuntu</a><br>添加代码仓：<br>   <figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> <span class=\"keyword\">sh</span> -c 'echo <span class=\"string\">\"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\"</span> &gt; /etc/apt/sources.<span class=\"keyword\">list</span>.<span class=\"keyword\">d</span>/ros-latest.<span class=\"keyword\">list</span>'</div></pre></td></tr></table></figure></p>\n<p>设定key:<br>   <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-key adv <span class=\"params\">--keyserver</span> hkp:<span class=\"string\">//ha.pool.sks-keyservers.net</span><span class=\"function\">:80</span> <span class=\"params\">--recv-key</span> 421C365BD9FF1F717815A3895523BAEEB01FA116</div></pre></td></tr></table></figure></p>\n<p>更新：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get update</span></div></pre></td></tr></table></figure></p>\n<p>选择桌面版完全安装：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install ros-indigo-desktop-full</span></div></pre></td></tr></table></figure></p>\n<p>初始化rosdep:<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> rosdep init</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosdep</span> update</span></div></pre></td></tr></table></figure></p>\n<p>设定环境变量让系统能找到ROS：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">echo</span> <span class=\"string\">\"source /opt/ros/indigo/setup.bash\"</span> &gt;&gt; ~/.bashrc</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">source</span> ~/.bashrc</span></div></pre></td></tr></table></figure></p>\n<p>安装rosinstall工具，方便下载ROS：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install python-rosinstall</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"管理环境\"><a href=\"#管理环境\" class=\"headerlink\" title=\"管理环境\"></a>管理环境</h1><p>检查我们是否配置好了环境变量：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">export</span> | grep ROS</span></div></pre></td></tr></table></figure></p>\n<p>检查是否有 <a href=\"http://wiki.ros.org/ROS/EnvironmentVariables#ROS_ROOT\" target=\"_blank\" rel=\"external\">ROS_ROOT</a> 和 <a href=\"http://wiki.ros.org/ROS/EnvironmentVariables#ROS_PACKAGE_PATH\" target=\"_blank\" rel=\"external\">ROS_PACKAGE_PATH</a> 的配置。</p>\n<h1 id=\"创建ROS工作空间\"><a href=\"#创建ROS工作空间\" class=\"headerlink\" title=\"创建ROS工作空间\"></a>创建ROS工作空间</h1><p><a href=\"http://wiki.ros.org/catkin/commands/catkin_make\" target=\"_blank\" rel=\"external\">catkin_make</a> 命令只适用于 ROS Groovy 及其以后的版本。</p>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">mkdir -p ~/catkin_ws/src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws/src</span></div></pre></td></tr></table></figure>\n<p>这就创建了一个 <a href=\"http://wiki.ros.org/catkin/workspaces\" target=\"_blank\" rel=\"external\">catkin 工作空间</a>, 里面是空的，只有一个 <a href=\"http://wiki.ros.org/catkin/CMakeLists.txt\" target=\"_blank\" rel=\"external\">CMakeLists.txt</a>, 但依然可以编译它：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make</span></div></pre></td></tr></table></figure></p>\n<p>当前目录下会生成 <em>build</em> 和 <em>devel</em> 这两个文件夹。在 <em>devel</em> 文件夹里面可以看到几个 setup.*sh 文件。 source 这些文件中的任何一个都可以将当前工作空间设置在ROS工作环境的最顶层，参考 <a href=\"http://wiki.ros.org/catkin\" target=\"_blank\" rel=\"external\">catkin</a>文档。接下来首先 source 一下新生成的 setup.bash 文件：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">source</span> ~/catkin_ws/devel/setup.bash</span></div></pre></td></tr></table></figure></p>\n<p>也可以将这句命令加入到 ~/.bashrc 中，这样每次打开一个 <em>terminal</em> 会自动 <em>source</em> 。<br>确保工作空间已经正确配置可以通过以下命令查看：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">echo</span> <span class=\"variable\">$ROS_PACKAGE_PATH</span></span></div></pre></td></tr></table></figure></p>\n<p>正确的输出一般为：<br>   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">/home/</span>yourusername<span class=\"regexp\">/catkin_ws/</span><span class=\"string\">src:</span><span class=\"regexp\">/opt/</span>ros<span class=\"regexp\">/indigo/</span><span class=\"string\">share:</span><span class=\"regexp\">/opt/</span>ros<span class=\"regexp\">/indigo/</span>stacks</div></pre></td></tr></table></figure></p>\n<p>至此，ROS的安装与配置已经搭建完成。<br>参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials\" target=\"_blank\" rel=\"external\">ROS-Beginner-Tutorials</a>。</p>\n","site":{"data":{}},"excerpt":"<p>一直想记录一下ROS学习过程中的点滴，先从最基础的 ROS-Beginner-Tutorials开始， 以便于帮助更多的人，本篇是ROS学习的开篇。</p>\n<h1 id=\"ROS安装\"><a href=\"#ROS安装\" class=\"headerlink\" title=\"ROS安装\"></a>ROS安装</h1><p>目前ROS官方还在维护的版本有4个(截至201705),参考 <a href=\"http://wiki.ros.org/Distributions\" target=\"_blank\" rel=\"external\">ROS-Distributions</a>：<img src=\"/2017/05/26/ros-primary-tutorial-1/rosv.jpg\" alt=\"\"><br></p>","more":"<br>因为我的环境是ubuntu14.04,支持的 ROS 版本为 <a href=\"http://wiki.ros.org/indigo\" target=\"_blank\" rel=\"external\">ROS-Indigo</a>, 因此我选择安装 <a href=\"http://wiki.ros.org/indigo\" target=\"_blank\" rel=\"external\">ROS-Indigo</a>。<br><em>环境： ubuntu 14.04 Trusty LTS 32bits</em><br>安装可以参考官网: <a href=\"http://wiki.ros.org/indigo/Installation/Ubuntu\" target=\"_blank\" rel=\"external\">ROS-Indigo-Installation-ubuntu</a><br>添加代码仓：<br>   <figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> <span class=\"keyword\">sh</span> -c 'echo <span class=\"string\">\"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\"</span> &gt; /etc/apt/sources.<span class=\"keyword\">list</span>.<span class=\"keyword\">d</span>/ros-latest.<span class=\"keyword\">list</span>'</div></pre></td></tr></table></figure><p></p>\n<p>设定key:<br>   <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-key adv <span class=\"params\">--keyserver</span> hkp:<span class=\"string\">//ha.pool.sks-keyservers.net</span><span class=\"function\">:80</span> <span class=\"params\">--recv-key</span> 421C365BD9FF1F717815A3895523BAEEB01FA116</div></pre></td></tr></table></figure></p>\n<p>更新：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get update</span></div></pre></td></tr></table></figure></p>\n<p>选择桌面版完全安装：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install ros-indigo-desktop-full</span></div></pre></td></tr></table></figure></p>\n<p>初始化rosdep:<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> rosdep init</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosdep</span> update</span></div></pre></td></tr></table></figure></p>\n<p>设定环境变量让系统能找到ROS：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">echo</span> <span class=\"string\">\"source /opt/ros/indigo/setup.bash\"</span> &gt;&gt; ~/.bashrc</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">source</span> ~/.bashrc</span></div></pre></td></tr></table></figure></p>\n<p>安装rosinstall工具，方便下载ROS：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install python-rosinstall</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"管理环境\"><a href=\"#管理环境\" class=\"headerlink\" title=\"管理环境\"></a>管理环境</h1><p>检查我们是否配置好了环境变量：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">export</span> | grep ROS</span></div></pre></td></tr></table></figure></p>\n<p>检查是否有 <a href=\"http://wiki.ros.org/ROS/EnvironmentVariables#ROS_ROOT\" target=\"_blank\" rel=\"external\">ROS_ROOT</a> 和 <a href=\"http://wiki.ros.org/ROS/EnvironmentVariables#ROS_PACKAGE_PATH\" target=\"_blank\" rel=\"external\">ROS_PACKAGE_PATH</a> 的配置。</p>\n<h1 id=\"创建ROS工作空间\"><a href=\"#创建ROS工作空间\" class=\"headerlink\" title=\"创建ROS工作空间\"></a>创建ROS工作空间</h1><p><a href=\"http://wiki.ros.org/catkin/commands/catkin_make\" target=\"_blank\" rel=\"external\">catkin_make</a> 命令只适用于 ROS Groovy 及其以后的版本。</p>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">mkdir -p ~/catkin_ws/src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws/src</span></div></pre></td></tr></table></figure>\n<p>这就创建了一个 <a href=\"http://wiki.ros.org/catkin/workspaces\" target=\"_blank\" rel=\"external\">catkin 工作空间</a>, 里面是空的，只有一个 <a href=\"http://wiki.ros.org/catkin/CMakeLists.txt\" target=\"_blank\" rel=\"external\">CMakeLists.txt</a>, 但依然可以编译它：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make</span></div></pre></td></tr></table></figure></p>\n<p>当前目录下会生成 <em>build</em> 和 <em>devel</em> 这两个文件夹。在 <em>devel</em> 文件夹里面可以看到几个 setup.*sh 文件。 source 这些文件中的任何一个都可以将当前工作空间设置在ROS工作环境的最顶层，参考 <a href=\"http://wiki.ros.org/catkin\" target=\"_blank\" rel=\"external\">catkin</a>文档。接下来首先 source 一下新生成的 setup.bash 文件：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">source</span> ~/catkin_ws/devel/setup.bash</span></div></pre></td></tr></table></figure></p>\n<p>也可以将这句命令加入到 ~/.bashrc 中，这样每次打开一个 <em>terminal</em> 会自动 <em>source</em> 。<br>确保工作空间已经正确配置可以通过以下命令查看：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">echo</span> <span class=\"variable\">$ROS_PACKAGE_PATH</span></span></div></pre></td></tr></table></figure></p>\n<p>正确的输出一般为：<br>   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">/home/</span>yourusername<span class=\"regexp\">/catkin_ws/</span><span class=\"string\">src:</span><span class=\"regexp\">/opt/</span>ros<span class=\"regexp\">/indigo/</span><span class=\"string\">share:</span><span class=\"regexp\">/opt/</span>ros<span class=\"regexp\">/indigo/</span>stacks</div></pre></td></tr></table></figure></p>\n<p>至此，ROS的安装与配置已经搭建完成。<br>参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials\" target=\"_blank\" rel=\"external\">ROS-Beginner-Tutorials</a>。</p>"},{"title":"ROS初级十一 简单的ROS服务器和客户端","date":"2017-06-01T02:17:27.000Z","comments":1,"_content":"本篇学习简单的 ROS 服务器和客户端的编写，服务器和客户端也是 ROS 网络中的一个节点，服务器可以提供某些服务，客户端发出请求，服务器做出响应。本篇涉及的代码已上传到 [mygithub](https://github.com/StevenShiChina/beginner_tutorials)。\n<!--more-->\n# 服务器节点\n我们将创建一个 service 节点 (add_two_ints_server)，该节点接收两个整形数字，并返回它们的和。客户端可以给服务器发送请求。\n   ```\n $ roscd beginner_tutorials/src\n   ```\n新建 add_two_ints_server.cpp 在  beginner_tutorials/src 目录下，添加源码：\n   ```\n #include \"ros/ros.h\"\n\n /*beginner_tutorials/AddTwoInts.h由编译系统自动根据我们先前创建的srv文件\n  生成的对应该srv文件的头文件*/\n #include \"beginner_tutorials/AddTwoInts.h\"\n\n /*add函数提供两个int值求和的服务，int值从request里面获取，\n  而返回数据装入response内，这些数据类型都定义在srv文件内部，\n  函数返回一个boolean值*/\n\n bool add(beginner_tutorials::AddTwoInts::Request  &req,\n         beginner_tutorials::AddTwoInts::Response &res)\n {\n  res.sum = req.a + req.b;\n  ROS_INFO(\"request: x=%ld, y=%ld\", (long int)req.a, (long int)req.b);\n  ROS_INFO(\"sending back response: [%ld]\", (long int)res.sum);\n  return true;\n }\n\n int main(int argc, char **argv)\n {\n  ros::init(argc, argv, \"add_two_ints_server\");\n  ros::NodeHandle n;\n \n /*service 服务建立*/\n  ros::ServiceServer service = n.advertiseService(\"add_two_ints\", add);\n  ROS_INFO(\"Ready to add two ints.\");\n  ros::spin();\n\n  return 0;\n }\n   ```\n# 客户端节点\n在目录 beginner_tutorials/src 下，新建 add_two_ints_client.cpp 文件添加如下源码：\n   ```\n #include \"ros/ros.h\"\n #include \"beginner_tutorials/AddTwoInts.h\"\n #include <cstdlib>\n\n int main(int argc, char **argv)\n {\n   ros::init(argc, argv, \"add_two_ints_client\");\n   if (argc != 3)\n   {\n     ROS_INFO(\"usage: add_two_ints_client X Y\");\n     return 1;\n   }\n\n   ros::NodeHandle n;\n   \n   /*为add_two_ints service创建一个client。ros::ServiceClient 对象待会用来调用service*/\n\n   ros::ServiceClient client = n.serviceClient<beginner_tutorials::AddTwoInts>(\"add_two_ints\");\n\n  /*实例化一个由ROS编译系统自动生成的service类，并给其request成员赋值。\n   一个service类包含两个成员request和response。同时也包括两个类定义Request和Response*/\n\n   beginner_tutorials::AddTwoInts srv;\n   srv.request.a = atoll(argv[1]);\n   srv.request.b = atoll(argv[2]);\n\n   /*调用service。由于service的调用是模态过程（调用的时候占用进程阻止其他代码的执行），\n   一旦调用完成，将返回调用结果。如果service调用成功，call()函数将返回true，\n   srv.response里面的值将是合法的值。如果调用失败，call()函数将返回false，\n   srv.response里面的值将是非法的*/\n \n   if (client.call(srv))\n   {\n     ROS_INFO(\"Sum: %ld\", (long int)srv.response.sum);\n   }\n   else\n   {\n     ROS_ERROR(\"Failed to call service add_two_ints\");\n     return 1;\n   }\n\n   return 0;\n }\n   ```\n# 编译测试\n编译之前先修改下 CMakeLists.txt ,文件位于:\n ~/catkin_ws/src/beginner_tutorials/CMakeLists.txt，参考 [CMakeLists.txt](https://raw.github.com/ros/catkin_tutorials/master/create_package_srvclient/catkin_ws/src/beginner_tutorials/CMakeLists.txt):\n   ```\n add_executable(add_two_ints_server src/add_two_ints_server.cpp)\n target_link_libraries(add_two_ints_server ${catkin_LIBRARIES})\n add_dependencies(add_two_ints_server beginner_tutorials_gencpp)\n add_executable(add_two_ints_client src/add_two_ints_client.cpp)\n target_link_libraries(add_two_ints_client ${catkin_LIBRARIES})\n add_dependencies(add_two_ints_client beginner_tutorials_gencpp)\n   ```\n生成两个可执行程序 add_two_ints_server 和 add_two_ints_client ，这两个可执行程序默认被放在的 devel space 下的包目录下。可以直接调用可执行程序，或者使用 rosrun 命令去调用它们。它们不会被装在usr/bin目录下，如果希望在安装的时候可执行程序在PATH变量里面，需要设置一下install target，请参考：[catkin/CMakeLists.txt](http://wiki.ros.org/catkin/CMakeLists.txt)\n编译：\n   ```\n $ cd ~/catkin_ws/\n $ catkin_make\n   ```\n编译完成后会在目录 ~/catkin_ws/devel/lib/beginner_tutorials 下生成两个可执行文件 add_two_ints_client  和 add_two_ints_server 现在可以运行并测试它们：\n   ```\n $ roscore &\n $ rosrun beginner_tutorials add_two_ints_server\n   ```\n如果运行时找不到程序包，运行一下 *rospack profile* 另外开启一个terminal 运行客户端:\n   ```\n$ rosrun beginner_tutorials add_two_ints_client  188 102\n   ```\n输出结果看图：![](ros-primary-tutorial-11/service.jpg)\n参考 [WritingServiceClient](http://wiki.ros.org/cn/ROS/Tutorials/WritingServiceClient%28c%2B%2B%29)。\n\n\n\n\n","source":"_posts/ros-primary-tutorial-11.md","raw":"---\ntitle: ROS初级十一 简单的ROS服务器和客户端\ndate: 2017-06-01 10:17:27\ncategories: ROS\ntags: ServiceClient\ncomments: true\n---\n本篇学习简单的 ROS 服务器和客户端的编写，服务器和客户端也是 ROS 网络中的一个节点，服务器可以提供某些服务，客户端发出请求，服务器做出响应。本篇涉及的代码已上传到 [mygithub](https://github.com/StevenShiChina/beginner_tutorials)。\n<!--more-->\n# 服务器节点\n我们将创建一个 service 节点 (add_two_ints_server)，该节点接收两个整形数字，并返回它们的和。客户端可以给服务器发送请求。\n   ```\n $ roscd beginner_tutorials/src\n   ```\n新建 add_two_ints_server.cpp 在  beginner_tutorials/src 目录下，添加源码：\n   ```\n #include \"ros/ros.h\"\n\n /*beginner_tutorials/AddTwoInts.h由编译系统自动根据我们先前创建的srv文件\n  生成的对应该srv文件的头文件*/\n #include \"beginner_tutorials/AddTwoInts.h\"\n\n /*add函数提供两个int值求和的服务，int值从request里面获取，\n  而返回数据装入response内，这些数据类型都定义在srv文件内部，\n  函数返回一个boolean值*/\n\n bool add(beginner_tutorials::AddTwoInts::Request  &req,\n         beginner_tutorials::AddTwoInts::Response &res)\n {\n  res.sum = req.a + req.b;\n  ROS_INFO(\"request: x=%ld, y=%ld\", (long int)req.a, (long int)req.b);\n  ROS_INFO(\"sending back response: [%ld]\", (long int)res.sum);\n  return true;\n }\n\n int main(int argc, char **argv)\n {\n  ros::init(argc, argv, \"add_two_ints_server\");\n  ros::NodeHandle n;\n \n /*service 服务建立*/\n  ros::ServiceServer service = n.advertiseService(\"add_two_ints\", add);\n  ROS_INFO(\"Ready to add two ints.\");\n  ros::spin();\n\n  return 0;\n }\n   ```\n# 客户端节点\n在目录 beginner_tutorials/src 下，新建 add_two_ints_client.cpp 文件添加如下源码：\n   ```\n #include \"ros/ros.h\"\n #include \"beginner_tutorials/AddTwoInts.h\"\n #include <cstdlib>\n\n int main(int argc, char **argv)\n {\n   ros::init(argc, argv, \"add_two_ints_client\");\n   if (argc != 3)\n   {\n     ROS_INFO(\"usage: add_two_ints_client X Y\");\n     return 1;\n   }\n\n   ros::NodeHandle n;\n   \n   /*为add_two_ints service创建一个client。ros::ServiceClient 对象待会用来调用service*/\n\n   ros::ServiceClient client = n.serviceClient<beginner_tutorials::AddTwoInts>(\"add_two_ints\");\n\n  /*实例化一个由ROS编译系统自动生成的service类，并给其request成员赋值。\n   一个service类包含两个成员request和response。同时也包括两个类定义Request和Response*/\n\n   beginner_tutorials::AddTwoInts srv;\n   srv.request.a = atoll(argv[1]);\n   srv.request.b = atoll(argv[2]);\n\n   /*调用service。由于service的调用是模态过程（调用的时候占用进程阻止其他代码的执行），\n   一旦调用完成，将返回调用结果。如果service调用成功，call()函数将返回true，\n   srv.response里面的值将是合法的值。如果调用失败，call()函数将返回false，\n   srv.response里面的值将是非法的*/\n \n   if (client.call(srv))\n   {\n     ROS_INFO(\"Sum: %ld\", (long int)srv.response.sum);\n   }\n   else\n   {\n     ROS_ERROR(\"Failed to call service add_two_ints\");\n     return 1;\n   }\n\n   return 0;\n }\n   ```\n# 编译测试\n编译之前先修改下 CMakeLists.txt ,文件位于:\n ~/catkin_ws/src/beginner_tutorials/CMakeLists.txt，参考 [CMakeLists.txt](https://raw.github.com/ros/catkin_tutorials/master/create_package_srvclient/catkin_ws/src/beginner_tutorials/CMakeLists.txt):\n   ```\n add_executable(add_two_ints_server src/add_two_ints_server.cpp)\n target_link_libraries(add_two_ints_server ${catkin_LIBRARIES})\n add_dependencies(add_two_ints_server beginner_tutorials_gencpp)\n add_executable(add_two_ints_client src/add_two_ints_client.cpp)\n target_link_libraries(add_two_ints_client ${catkin_LIBRARIES})\n add_dependencies(add_two_ints_client beginner_tutorials_gencpp)\n   ```\n生成两个可执行程序 add_two_ints_server 和 add_two_ints_client ，这两个可执行程序默认被放在的 devel space 下的包目录下。可以直接调用可执行程序，或者使用 rosrun 命令去调用它们。它们不会被装在usr/bin目录下，如果希望在安装的时候可执行程序在PATH变量里面，需要设置一下install target，请参考：[catkin/CMakeLists.txt](http://wiki.ros.org/catkin/CMakeLists.txt)\n编译：\n   ```\n $ cd ~/catkin_ws/\n $ catkin_make\n   ```\n编译完成后会在目录 ~/catkin_ws/devel/lib/beginner_tutorials 下生成两个可执行文件 add_two_ints_client  和 add_two_ints_server 现在可以运行并测试它们：\n   ```\n $ roscore &\n $ rosrun beginner_tutorials add_two_ints_server\n   ```\n如果运行时找不到程序包，运行一下 *rospack profile* 另外开启一个terminal 运行客户端:\n   ```\n$ rosrun beginner_tutorials add_two_ints_client  188 102\n   ```\n输出结果看图：![](ros-primary-tutorial-11/service.jpg)\n参考 [WritingServiceClient](http://wiki.ros.org/cn/ROS/Tutorials/WritingServiceClient%28c%2B%2B%29)。\n\n\n\n\n","slug":"ros-primary-tutorial-11","published":1,"updated":"2017-06-13T05:53:48.462Z","layout":"post","photos":[],"link":"","_id":"cj4hne538001kw8ina2fd57kz","content":"<p>本篇学习简单的 ROS 服务器和客户端的编写，服务器和客户端也是 ROS 网络中的一个节点，服务器可以提供某些服务，客户端发出请求，服务器做出响应。本篇涉及的代码已上传到 <a href=\"https://github.com/StevenShiChina/beginner_tutorials\" target=\"_blank\" rel=\"external\">mygithub</a>。<br><a id=\"more\"></a></p>\n<h1 id=\"服务器节点\"><a href=\"#服务器节点\" class=\"headerlink\" title=\"服务器节点\"></a>服务器节点</h1><p>我们将创建一个 service 节点 (add_two_ints_server)，该节点接收两个整形数字，并返回它们的和。客户端可以给服务器发送请求。<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscd beginner_tutorials/src</span></div></pre></td></tr></table></figure></p>\n<p>新建 add_two_ints_server.cpp 在  beginner_tutorials/src 目录下，添加源码：<br>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*beginner_tutorials/AddTwoInts.h由编译系统自动根据我们先前创建的srv文件</span></div><div class=\"line\"> 生成的对应该srv文件的头文件*/</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"beginner_tutorials/AddTwoInts.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*add函数提供两个int值求和的服务，int值从request里面获取，</span></div><div class=\"line\"> 而返回数据装入response内，这些数据类型都定义在srv文件内部，</div><div class=\"line\"> 函数返回一个boolean值*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">add</span><span class=\"params\">(beginner_tutorials::AddTwoInts::Request  &amp;req,</span></span></div><div class=\"line\">        beginner_tutorials::AddTwoInts::Response &amp;res)</div><div class=\"line\">&#123;</div><div class=\"line\"> res.sum = req.a + req.b;</div><div class=\"line\"> ROS_INFO(<span class=\"string\">\"request: x=%ld, y=%ld\"</span>, (<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)req.a, (<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)req.b);</div><div class=\"line\"> ROS_INFO(<span class=\"string\">\"sending back response: [%ld]\"</span>, (<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)res.sum);</div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> ros::init(argc, argv, <span class=\"string\">\"add_two_ints_server\"</span>);</div><div class=\"line\"> ros::NodeHandle n;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*service 服务建立*/</span></div><div class=\"line\"> ros::ServiceServer service = n.advertiseService(<span class=\"string\">\"add_two_ints\"</span>, add);</div><div class=\"line\"> ROS_INFO(<span class=\"string\">\"Ready to add two ints.\"</span>);</div><div class=\"line\"> ros::spin();</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"客户端节点\"><a href=\"#客户端节点\" class=\"headerlink\" title=\"客户端节点\"></a>客户端节点</h1><p>在目录 beginner_tutorials/src 下，新建 add_two_ints_client.cpp 文件添加如下源码：<br>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"beginner_tutorials/AddTwoInts.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  ros::init(argc, argv, <span class=\"string\">\"add_two_ints_client\"</span>);</div><div class=\"line\">  <span class=\"keyword\">if</span> (argc != <span class=\"number\">3</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">    ROS_INFO(<span class=\"string\">\"usage: add_two_ints_client X Y\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ros::NodeHandle n;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">/*为add_two_ints service创建一个client。ros::ServiceClient 对象待会用来调用service*/</span></div><div class=\"line\"></div><div class=\"line\">  ros::ServiceClient client = n.serviceClient&lt;beginner_tutorials::AddTwoInts&gt;(<span class=\"string\">\"add_two_ints\"</span>);</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">/*实例化一个由ROS编译系统自动生成的service类，并给其request成员赋值。</span></div><div class=\"line\">  一个service类包含两个成员request和response。同时也包括两个类定义Request和Response*/</div><div class=\"line\"></div><div class=\"line\">  beginner_tutorials::AddTwoInts srv;</div><div class=\"line\">  srv.request.a = atoll(argv[<span class=\"number\">1</span>]);</div><div class=\"line\">  srv.request.b = atoll(argv[<span class=\"number\">2</span>]);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*调用service。由于service的调用是模态过程（调用的时候占用进程阻止其他代码的执行），</span></div><div class=\"line\">  一旦调用完成，将返回调用结果。如果service调用成功，call()函数将返回true，</div><div class=\"line\">  srv.response里面的值将是合法的值。如果调用失败，call()函数将返回false，</div><div class=\"line\">  srv.response里面的值将是非法的*/</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (client.call(srv))</div><div class=\"line\">  &#123;</div><div class=\"line\">    ROS_INFO(<span class=\"string\">\"Sum: %ld\"</span>, (<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)srv.response.sum);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    ROS_ERROR(<span class=\"string\">\"Failed to call service add_two_ints\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"编译测试\"><a href=\"#编译测试\" class=\"headerlink\" title=\"编译测试\"></a>编译测试</h1><p>编译之前先修改下 CMakeLists.txt ,文件位于:<br> ~/catkin_ws/src/beginner_tutorials/CMakeLists.txt，参考 <a href=\"https://raw.github.com/ros/catkin_tutorials/master/create_package_srvclient/catkin_ws/src/beginner_tutorials/CMakeLists.txt\" target=\"_blank\" rel=\"external\">CMakeLists.txt</a>:<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(add_two_ints_server src/add_two_ints_server.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(add_two_ints_server $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">add_dependencies</span><span class=\"params\">(add_two_ints_server beginner_tutorials_gencpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(add_two_ints_client src/add_two_ints_client.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(add_two_ints_client $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">add_dependencies</span><span class=\"params\">(add_two_ints_client beginner_tutorials_gencpp)</span></span></div></pre></td></tr></table></figure></p>\n<p>生成两个可执行程序 add_two_ints_server 和 add_two_ints_client ，这两个可执行程序默认被放在的 devel space 下的包目录下。可以直接调用可执行程序，或者使用 rosrun 命令去调用它们。它们不会被装在usr/bin目录下，如果希望在安装的时候可执行程序在PATH变量里面，需要设置一下install target，请参考：<a href=\"http://wiki.ros.org/catkin/CMakeLists.txt\" target=\"_blank\" rel=\"external\">catkin/CMakeLists.txt</a><br>编译：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_make</span></div></pre></td></tr></table></figure></p>\n<p>编译完成后会在目录 ~/catkin_ws/devel/lib/beginner_tutorials 下生成两个可执行文件 add_two_ints_client  和 add_two_ints_server 现在可以运行并测试它们：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscore &amp;</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun beginner_tutorials add_two_ints_server</span></div></pre></td></tr></table></figure></p>\n<p>如果运行时找不到程序包，运行一下 <em>rospack profile</em> 另外开启一个terminal 运行客户端:<br>   <figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosrun <span class=\"keyword\">beginner_tutorials </span><span class=\"keyword\">add_two_ints_client </span> <span class=\"number\">188</span> <span class=\"number\">102</span></div></pre></td></tr></table></figure></p>\n<p>输出结果看图：<img src=\"/2017/06/01/ros-primary-tutorial-11/service.jpg\" alt=\"\"><br>参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials/WritingServiceClient%28c%2B%2B%29\" target=\"_blank\" rel=\"external\">WritingServiceClient</a>。</p>\n","site":{"data":{}},"excerpt":"<p>本篇学习简单的 ROS 服务器和客户端的编写，服务器和客户端也是 ROS 网络中的一个节点，服务器可以提供某些服务，客户端发出请求，服务器做出响应。本篇涉及的代码已上传到 <a href=\"https://github.com/StevenShiChina/beginner_tutorials\" target=\"_blank\" rel=\"external\">mygithub</a>。<br></p>","more":"<p></p>\n<h1 id=\"服务器节点\"><a href=\"#服务器节点\" class=\"headerlink\" title=\"服务器节点\"></a>服务器节点</h1><p>我们将创建一个 service 节点 (add_two_ints_server)，该节点接收两个整形数字，并返回它们的和。客户端可以给服务器发送请求。<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscd beginner_tutorials/src</span></div></pre></td></tr></table></figure></p>\n<p>新建 add_two_ints_server.cpp 在  beginner_tutorials/src 目录下，添加源码：<br>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*beginner_tutorials/AddTwoInts.h由编译系统自动根据我们先前创建的srv文件</span></div><div class=\"line\"> 生成的对应该srv文件的头文件*/</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"beginner_tutorials/AddTwoInts.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*add函数提供两个int值求和的服务，int值从request里面获取，</span></div><div class=\"line\"> 而返回数据装入response内，这些数据类型都定义在srv文件内部，</div><div class=\"line\"> 函数返回一个boolean值*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">add</span><span class=\"params\">(beginner_tutorials::AddTwoInts::Request  &amp;req,</span></span></div><div class=\"line\">        beginner_tutorials::AddTwoInts::Response &amp;res)</div><div class=\"line\">&#123;</div><div class=\"line\"> res.sum = req.a + req.b;</div><div class=\"line\"> ROS_INFO(<span class=\"string\">\"request: x=%ld, y=%ld\"</span>, (<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)req.a, (<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)req.b);</div><div class=\"line\"> ROS_INFO(<span class=\"string\">\"sending back response: [%ld]\"</span>, (<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)res.sum);</div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> ros::init(argc, argv, <span class=\"string\">\"add_two_ints_server\"</span>);</div><div class=\"line\"> ros::NodeHandle n;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*service 服务建立*/</span></div><div class=\"line\"> ros::ServiceServer service = n.advertiseService(<span class=\"string\">\"add_two_ints\"</span>, add);</div><div class=\"line\"> ROS_INFO(<span class=\"string\">\"Ready to add two ints.\"</span>);</div><div class=\"line\"> ros::spin();</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"客户端节点\"><a href=\"#客户端节点\" class=\"headerlink\" title=\"客户端节点\"></a>客户端节点</h1><p>在目录 beginner_tutorials/src 下，新建 add_two_ints_client.cpp 文件添加如下源码：<br>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"beginner_tutorials/AddTwoInts.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  ros::init(argc, argv, <span class=\"string\">\"add_two_ints_client\"</span>);</div><div class=\"line\">  <span class=\"keyword\">if</span> (argc != <span class=\"number\">3</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">    ROS_INFO(<span class=\"string\">\"usage: add_two_ints_client X Y\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ros::NodeHandle n;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">/*为add_two_ints service创建一个client。ros::ServiceClient 对象待会用来调用service*/</span></div><div class=\"line\"></div><div class=\"line\">  ros::ServiceClient client = n.serviceClient&lt;beginner_tutorials::AddTwoInts&gt;(<span class=\"string\">\"add_two_ints\"</span>);</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">/*实例化一个由ROS编译系统自动生成的service类，并给其request成员赋值。</span></div><div class=\"line\">  一个service类包含两个成员request和response。同时也包括两个类定义Request和Response*/</div><div class=\"line\"></div><div class=\"line\">  beginner_tutorials::AddTwoInts srv;</div><div class=\"line\">  srv.request.a = atoll(argv[<span class=\"number\">1</span>]);</div><div class=\"line\">  srv.request.b = atoll(argv[<span class=\"number\">2</span>]);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*调用service。由于service的调用是模态过程（调用的时候占用进程阻止其他代码的执行），</span></div><div class=\"line\">  一旦调用完成，将返回调用结果。如果service调用成功，call()函数将返回true，</div><div class=\"line\">  srv.response里面的值将是合法的值。如果调用失败，call()函数将返回false，</div><div class=\"line\">  srv.response里面的值将是非法的*/</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (client.call(srv))</div><div class=\"line\">  &#123;</div><div class=\"line\">    ROS_INFO(<span class=\"string\">\"Sum: %ld\"</span>, (<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)srv.response.sum);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    ROS_ERROR(<span class=\"string\">\"Failed to call service add_two_ints\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"编译测试\"><a href=\"#编译测试\" class=\"headerlink\" title=\"编译测试\"></a>编译测试</h1><p>编译之前先修改下 CMakeLists.txt ,文件位于:<br> ~/catkin_ws/src/beginner_tutorials/CMakeLists.txt，参考 <a href=\"https://raw.github.com/ros/catkin_tutorials/master/create_package_srvclient/catkin_ws/src/beginner_tutorials/CMakeLists.txt\" target=\"_blank\" rel=\"external\">CMakeLists.txt</a>:<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(add_two_ints_server src/add_two_ints_server.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(add_two_ints_server $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">add_dependencies</span><span class=\"params\">(add_two_ints_server beginner_tutorials_gencpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(add_two_ints_client src/add_two_ints_client.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(add_two_ints_client $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">add_dependencies</span><span class=\"params\">(add_two_ints_client beginner_tutorials_gencpp)</span></span></div></pre></td></tr></table></figure></p>\n<p>生成两个可执行程序 add_two_ints_server 和 add_two_ints_client ，这两个可执行程序默认被放在的 devel space 下的包目录下。可以直接调用可执行程序，或者使用 rosrun 命令去调用它们。它们不会被装在usr/bin目录下，如果希望在安装的时候可执行程序在PATH变量里面，需要设置一下install target，请参考：<a href=\"http://wiki.ros.org/catkin/CMakeLists.txt\" target=\"_blank\" rel=\"external\">catkin/CMakeLists.txt</a><br>编译：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_make</span></div></pre></td></tr></table></figure></p>\n<p>编译完成后会在目录 ~/catkin_ws/devel/lib/beginner_tutorials 下生成两个可执行文件 add_two_ints_client  和 add_two_ints_server 现在可以运行并测试它们：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscore &amp;</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun beginner_tutorials add_two_ints_server</span></div></pre></td></tr></table></figure></p>\n<p>如果运行时找不到程序包，运行一下 <em>rospack profile</em> 另外开启一个terminal 运行客户端:<br>   <figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosrun <span class=\"keyword\">beginner_tutorials </span><span class=\"keyword\">add_two_ints_client </span> <span class=\"number\">188</span> <span class=\"number\">102</span></div></pre></td></tr></table></figure></p>\n<p>输出结果看图：<img src=\"/2017/06/01/ros-primary-tutorial-11/service.jpg\" alt=\"\"><br>参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials/WritingServiceClient%28c%2B%2B%29\" target=\"_blank\" rel=\"external\">WritingServiceClient</a>。</p>"},{"title":"ROS初级十 简单的ROS发布器和订阅器","date":"2017-05-31T07:27:20.000Z","comments":1,"_content":"本篇学习 ROS 中简单的发布器和订阅器节点的编写。节点就是 ROS 网络中的一个可执行文件，它既可以订阅消息也可以发布消息。本篇涉及的代码已上传至 [mygithub](https://github.com/StevenShiChina/beginner_tutorials)。\n<!--more-->\n# 发布器\n我们将创建一个发布器节点 talker，它将不断的在 ROS 网络中广播消息。在 beginner_tutorials 目录下新建一个 src 目录\n   ```\n $ mkdir -p ~/catkin_ws/src/beginner_tutorials/src\n $ roscd beginner_tutorials/src/ \n   ```\nsrc 文件夹用于放置 beginner_tutorials 包的所有源代码，新建 talker.cpp 在 beginner_tutorials/src/ 目录下添加如下代码：\n   ```\n #include \"ros/ros.h\" /*引用ROS系统头文件*/\n\n #include \"std_msgs/String.h\" /*消息类型定义*/\n\n #include <sstream>\n\n int main(int argc, char **argv)\n {\n   /*初始化ROS talker节点名*\n   ros::init(argc, argv, \"talker\");\n\n   /*为该进程创建一个节点句柄 第一个创建的 NodeHandle 会为节点进行初始化，\n   最后一个销毁的 NodeHandle 则会释放该节点所占用的所有资源*/\n   \n   ros::NodeHandle n;\n\n   /*告诉 master 我们将要在 command（话题名） 上发布 std_msgs/String 类型的消息。\n   这样 master 就会告诉所有订阅了 command 话题的节点，将要有数据发布。第二个参数是发布序列的大小。\n   如果我们发布的消息的频率太高，缓冲区中的消息在大于 1000 个的时候就会开始丢弃先前发布的消息。 \n   NodeHandle::advertise() 返回一个 ros::Publisher 对象,它有两个作用：\n   1) 它有一个 publish() 成员函数可以让你在topic上发布消息； \n   2) 如果消息类型不对,它会拒绝发布*/\n   \n   ros::Publisher chatter_pub = n.advertise<std_msgs::String>(\"command\", 1000);\n   \n   /*ros::Rate 对象可以允许指定自循环的频率。它会追踪记录自上一次调用 Rate::sleep() \n   后时间的流逝，并休眠直到一个频率周期的时间,本例指定循环频率为10HZ */\n  \n   ros::Rate loop_rate(10);\n\n   int count = 0;\n\n  /*roscpp 会默认生成一个 SIGINT 句柄，它负责处理 Ctrl-C 键盘操作——使得 ros::ok() 返回 false。 \n    如果下列条件之一发生，ros::ok() 返回false： \n    1  SIGINT 被触发 (Ctrl-C) \n    2  被另一同名节点踢出 ROS 网络 \n    3  ros::shutdown() 被程序的另一部分调用 \n    4 节点中的所有 ros::NodeHandles 都已经被销毁 \n    一旦 ros::ok() 返回 false, 所有的 ROS 调用都会失效*/\n   \n   while (ros::ok())\n   {\n     /*我们使用一个由 msg file 文件产生的『消息自适应』类在 \n     ROS 网络中广播消息。现在我们使用标准的String消息，它只有一个数据成员 \"data\"。\n     当然，你也可以发布更复杂的消息类型。 */\n     \n     std_msgs::String msg;\n     \n     std::stringstream ss;\n     \n     ss << \"talker publish command \" << count;\n     \n     msg.data = ss.str();\n     \n     /*ROS_INFO 和其他类似的函数可以用来代替 printf/cout 等函数。\n     具体可以参考 http://wiki.ros.org/rosconsole，以获得更多信息*/\n     \n     ROS_INFO(\"%s\", msg.data.c_str()); \n     \n    /*广播消息*/\n     \n     chatter_pub.publish(msg);\n     \n     /*在这个例子中并不是一定要调用 ros::spinOnce()，因为我们不接受回调。\n      如果你的程序里包含其他回调函数，最好在这里加上 ros::spinOnce()这一语句，\n     否则你的回调函数就永远也不会被调用了*/\n    \n     ros::spinOnce();\n     \n     /*休眠一段时间，使得发布频率为10HZ*/\n     loop_rate.sleep();\n    \n     ++count;\n    }\n  return 0;\n }\n   ```\n上面的内容可以总结为：\n 1 初始化 ROS 系统 \n 2 在 ROS 网络内广播我们将要在 command 话题上发布 std_msgs/String 类型的消息 \n 3 以每秒 10 次的频率在 chatter 上发布消息 \n接下来编写一个订阅器用于接收该节点发布的消息。\n# 订阅器\n新建 listener.cpp 放置于 beginner_tutorials 的 src 目录下：\n   ```\n $ roscd beginner_tutorials/src/\n $ vim listener.cpp\n   ```\n添加如下代码：\n   ```\n #include \"ros/ros.h\"\n #include \"std_msgs/String.h\"\n /*定义回调函数*/\n void chatterCallback(const std_msgs::String::ConstPtr& msg)\n {\n   /*打印收到的信息，消息是以 boost shared_ptr 指针的形式传输，这就意味着你可以存储它而又不需要复制数据。 */\n   ROS_INFO(\"listener got: [%s]\", msg->data.c_str());\n }\n\n int main(int argc, char **argv)\n {\n  /*初始化节点，命名为listener*/\n  \n  ros::init(argc, argv, \"listener\");\n\n  /*创建节点句柄*/\n \n   ros::NodeHandle n;\n  \n  /*订阅主题,并注册回调函数，当有消息发布到这个话题时，ROS 就会调用 chatterCallback() 函数。\n   第二个参数是队列大小，以防我们处理消息的速度不够快，当缓存达到 1000 条消息后，再有新的消息到来就将开始丢弃先前接收的消息。 */\n  \n  ros::Subscriber sub = n.subscribe(\"command\", 1000, chatterCallback);\n  \n  /*进入自循环，可以尽可能快的调用消息回调函数。如果没有消息到达，它不会占用很多 CPU，所以不用担心。一旦 ros::ok() 返回 false，\n   ros::spin() 就会立刻跳出自循环。这有可能是 ros::shutdown() 被调用，或者是用户按下了 Ctrl-C，\n   使得 master 告诉节点要终止运行。也有可能是节点被人为关闭的。 \n   还有其他的方法进行回调，但在这里我们不涉及。想要了解，可以参考 http://wiki.ros.org/roscpp_tutorials package\n   里的一些 demo 应用。需要更为详尽的信息，可以参考 http://wiki.ros.org/roscpp/Overview。 */\n   \n   ros::spin();\n   return 0;\n }\n   ```\n上面的代码可以总结为：\n 1 初始化ROS系统 \n 2 订阅 chatter 话题 \n 3 进入自循环，等待消息的到达 \n 4 当消息到达，调用 chatterCallback() 函数 \n# 编译测试\n编译测试之前需要修改 beginner_tutorials 中的 CMakeLists.txt 文件，添加以下内容：\n   ```\ninclude_directories(include ${catkin_INCLUDE_DIRS})\n\nadd_executable(talker src/talker.cpp)\ntarget_link_libraries(talker ${catkin_LIBRARIES})\n\nadd_executable(listener src/listener.cpp)\ntarget_link_libraries(listener ${catkin_LIBRARIES})\n   ```\n这会生成两个可执行文件, talker 和 listener, 默认存储到 [devel space](http://wiki.ros.org/catkin/workspaces#Development_.28Devel.29_Space) 目录下,具体是在 ~/catkin_ws/devel/lib/beginner_tutorials 中。\n为可执行文件添加对生成的消息文件的依赖：\n   ```\nadd_dependencies(talker beginner_tutorials_generate_messages_cpp)\nadd_dependencies(listener beginner_tutorials_generate_messages_cpp)\n   ```\n这样就可以确保自定义消息的头文件在被使用之前已经被生成。因为 catkin 把所有的 package 并行的编译，所以如果你要使用其他 catkin 工作空间中其他 package 的消息，同样也需要添加对他们各自生成的消息文件的依赖。\n编译：\n   ```\n $ cd ~/catkin_ws/\n $ catkin_make\n $ source ./devel/setup.bash \n   ```\n测试时打开两个 terminal,一个运行 talker 节点，一个运行 listener 节点：\n   ```\n $ roscore &\n $ rosrun beginner_tutorials talker // 启动 talker节点\n $ rosrun beginner_tutorials listener // 启动 listener 节点\n   ```\n效果：\n![](ros-primary-tutorial-10/test.jpg)\n参考 [WritingPublisherSubscriber](http://wiki.ros.org/cn/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29)\n\n","source":"_posts/ros-primary-tutorial-10.md","raw":"---\ntitle: ROS初级十 简单的ROS发布器和订阅器\ndate: 2017-05-31 15:27:20\ncategories: ROS\ntags: Publisher\ncomments: true\n---\n本篇学习 ROS 中简单的发布器和订阅器节点的编写。节点就是 ROS 网络中的一个可执行文件，它既可以订阅消息也可以发布消息。本篇涉及的代码已上传至 [mygithub](https://github.com/StevenShiChina/beginner_tutorials)。\n<!--more-->\n# 发布器\n我们将创建一个发布器节点 talker，它将不断的在 ROS 网络中广播消息。在 beginner_tutorials 目录下新建一个 src 目录\n   ```\n $ mkdir -p ~/catkin_ws/src/beginner_tutorials/src\n $ roscd beginner_tutorials/src/ \n   ```\nsrc 文件夹用于放置 beginner_tutorials 包的所有源代码，新建 talker.cpp 在 beginner_tutorials/src/ 目录下添加如下代码：\n   ```\n #include \"ros/ros.h\" /*引用ROS系统头文件*/\n\n #include \"std_msgs/String.h\" /*消息类型定义*/\n\n #include <sstream>\n\n int main(int argc, char **argv)\n {\n   /*初始化ROS talker节点名*\n   ros::init(argc, argv, \"talker\");\n\n   /*为该进程创建一个节点句柄 第一个创建的 NodeHandle 会为节点进行初始化，\n   最后一个销毁的 NodeHandle 则会释放该节点所占用的所有资源*/\n   \n   ros::NodeHandle n;\n\n   /*告诉 master 我们将要在 command（话题名） 上发布 std_msgs/String 类型的消息。\n   这样 master 就会告诉所有订阅了 command 话题的节点，将要有数据发布。第二个参数是发布序列的大小。\n   如果我们发布的消息的频率太高，缓冲区中的消息在大于 1000 个的时候就会开始丢弃先前发布的消息。 \n   NodeHandle::advertise() 返回一个 ros::Publisher 对象,它有两个作用：\n   1) 它有一个 publish() 成员函数可以让你在topic上发布消息； \n   2) 如果消息类型不对,它会拒绝发布*/\n   \n   ros::Publisher chatter_pub = n.advertise<std_msgs::String>(\"command\", 1000);\n   \n   /*ros::Rate 对象可以允许指定自循环的频率。它会追踪记录自上一次调用 Rate::sleep() \n   后时间的流逝，并休眠直到一个频率周期的时间,本例指定循环频率为10HZ */\n  \n   ros::Rate loop_rate(10);\n\n   int count = 0;\n\n  /*roscpp 会默认生成一个 SIGINT 句柄，它负责处理 Ctrl-C 键盘操作——使得 ros::ok() 返回 false。 \n    如果下列条件之一发生，ros::ok() 返回false： \n    1  SIGINT 被触发 (Ctrl-C) \n    2  被另一同名节点踢出 ROS 网络 \n    3  ros::shutdown() 被程序的另一部分调用 \n    4 节点中的所有 ros::NodeHandles 都已经被销毁 \n    一旦 ros::ok() 返回 false, 所有的 ROS 调用都会失效*/\n   \n   while (ros::ok())\n   {\n     /*我们使用一个由 msg file 文件产生的『消息自适应』类在 \n     ROS 网络中广播消息。现在我们使用标准的String消息，它只有一个数据成员 \"data\"。\n     当然，你也可以发布更复杂的消息类型。 */\n     \n     std_msgs::String msg;\n     \n     std::stringstream ss;\n     \n     ss << \"talker publish command \" << count;\n     \n     msg.data = ss.str();\n     \n     /*ROS_INFO 和其他类似的函数可以用来代替 printf/cout 等函数。\n     具体可以参考 http://wiki.ros.org/rosconsole，以获得更多信息*/\n     \n     ROS_INFO(\"%s\", msg.data.c_str()); \n     \n    /*广播消息*/\n     \n     chatter_pub.publish(msg);\n     \n     /*在这个例子中并不是一定要调用 ros::spinOnce()，因为我们不接受回调。\n      如果你的程序里包含其他回调函数，最好在这里加上 ros::spinOnce()这一语句，\n     否则你的回调函数就永远也不会被调用了*/\n    \n     ros::spinOnce();\n     \n     /*休眠一段时间，使得发布频率为10HZ*/\n     loop_rate.sleep();\n    \n     ++count;\n    }\n  return 0;\n }\n   ```\n上面的内容可以总结为：\n 1 初始化 ROS 系统 \n 2 在 ROS 网络内广播我们将要在 command 话题上发布 std_msgs/String 类型的消息 \n 3 以每秒 10 次的频率在 chatter 上发布消息 \n接下来编写一个订阅器用于接收该节点发布的消息。\n# 订阅器\n新建 listener.cpp 放置于 beginner_tutorials 的 src 目录下：\n   ```\n $ roscd beginner_tutorials/src/\n $ vim listener.cpp\n   ```\n添加如下代码：\n   ```\n #include \"ros/ros.h\"\n #include \"std_msgs/String.h\"\n /*定义回调函数*/\n void chatterCallback(const std_msgs::String::ConstPtr& msg)\n {\n   /*打印收到的信息，消息是以 boost shared_ptr 指针的形式传输，这就意味着你可以存储它而又不需要复制数据。 */\n   ROS_INFO(\"listener got: [%s]\", msg->data.c_str());\n }\n\n int main(int argc, char **argv)\n {\n  /*初始化节点，命名为listener*/\n  \n  ros::init(argc, argv, \"listener\");\n\n  /*创建节点句柄*/\n \n   ros::NodeHandle n;\n  \n  /*订阅主题,并注册回调函数，当有消息发布到这个话题时，ROS 就会调用 chatterCallback() 函数。\n   第二个参数是队列大小，以防我们处理消息的速度不够快，当缓存达到 1000 条消息后，再有新的消息到来就将开始丢弃先前接收的消息。 */\n  \n  ros::Subscriber sub = n.subscribe(\"command\", 1000, chatterCallback);\n  \n  /*进入自循环，可以尽可能快的调用消息回调函数。如果没有消息到达，它不会占用很多 CPU，所以不用担心。一旦 ros::ok() 返回 false，\n   ros::spin() 就会立刻跳出自循环。这有可能是 ros::shutdown() 被调用，或者是用户按下了 Ctrl-C，\n   使得 master 告诉节点要终止运行。也有可能是节点被人为关闭的。 \n   还有其他的方法进行回调，但在这里我们不涉及。想要了解，可以参考 http://wiki.ros.org/roscpp_tutorials package\n   里的一些 demo 应用。需要更为详尽的信息，可以参考 http://wiki.ros.org/roscpp/Overview。 */\n   \n   ros::spin();\n   return 0;\n }\n   ```\n上面的代码可以总结为：\n 1 初始化ROS系统 \n 2 订阅 chatter 话题 \n 3 进入自循环，等待消息的到达 \n 4 当消息到达，调用 chatterCallback() 函数 \n# 编译测试\n编译测试之前需要修改 beginner_tutorials 中的 CMakeLists.txt 文件，添加以下内容：\n   ```\ninclude_directories(include ${catkin_INCLUDE_DIRS})\n\nadd_executable(talker src/talker.cpp)\ntarget_link_libraries(talker ${catkin_LIBRARIES})\n\nadd_executable(listener src/listener.cpp)\ntarget_link_libraries(listener ${catkin_LIBRARIES})\n   ```\n这会生成两个可执行文件, talker 和 listener, 默认存储到 [devel space](http://wiki.ros.org/catkin/workspaces#Development_.28Devel.29_Space) 目录下,具体是在 ~/catkin_ws/devel/lib/beginner_tutorials 中。\n为可执行文件添加对生成的消息文件的依赖：\n   ```\nadd_dependencies(talker beginner_tutorials_generate_messages_cpp)\nadd_dependencies(listener beginner_tutorials_generate_messages_cpp)\n   ```\n这样就可以确保自定义消息的头文件在被使用之前已经被生成。因为 catkin 把所有的 package 并行的编译，所以如果你要使用其他 catkin 工作空间中其他 package 的消息，同样也需要添加对他们各自生成的消息文件的依赖。\n编译：\n   ```\n $ cd ~/catkin_ws/\n $ catkin_make\n $ source ./devel/setup.bash \n   ```\n测试时打开两个 terminal,一个运行 talker 节点，一个运行 listener 节点：\n   ```\n $ roscore &\n $ rosrun beginner_tutorials talker // 启动 talker节点\n $ rosrun beginner_tutorials listener // 启动 listener 节点\n   ```\n效果：\n![](ros-primary-tutorial-10/test.jpg)\n参考 [WritingPublisherSubscriber](http://wiki.ros.org/cn/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29)\n\n","slug":"ros-primary-tutorial-10","published":1,"updated":"2017-06-13T09:06:24.771Z","layout":"post","photos":[],"link":"","_id":"cj4hne539001mw8insbaq8pnn","content":"<p>本篇学习 ROS 中简单的发布器和订阅器节点的编写。节点就是 ROS 网络中的一个可执行文件，它既可以订阅消息也可以发布消息。本篇涉及的代码已上传至 <a href=\"https://github.com/StevenShiChina/beginner_tutorials\" target=\"_blank\" rel=\"external\">mygithub</a>。<br><a id=\"more\"></a></p>\n<h1 id=\"发布器\"><a href=\"#发布器\" class=\"headerlink\" title=\"发布器\"></a>发布器</h1><p>我们将创建一个发布器节点 talker，它将不断的在 ROS 网络中广播消息。在 beginner_tutorials 目录下新建一个 src 目录<br>   <figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>mkdir -p ~<span class=\"regexp\">/catkin_ws/src</span><span class=\"regexp\">/beginner_tutorials/src</span></div><div class=\"line\"><span class=\"variable\">$ </span>roscd beginner_tutorials/src/</div></pre></td></tr></table></figure></p>\n<p>src 文件夹用于放置 beginner_tutorials 包的所有源代码，新建 talker.cpp 在 beginner_tutorials/src/ 目录下添加如下代码：<br>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span> <span class=\"comment\">/*引用ROS系统头文件*/</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"std_msgs/String.h\"</span> <span class=\"comment\">/*消息类型定义*/</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">/*初始化ROS talker节点名*</span></div><div class=\"line\">  ros::init(argc, argv, \"talker\");</div><div class=\"line\"></div><div class=\"line\">  /*为该进程创建一个节点句柄 第一个创建的 NodeHandle 会为节点进行初始化，</div><div class=\"line\">  最后一个销毁的 NodeHandle 则会释放该节点所占用的所有资源*/</div><div class=\"line\">  </div><div class=\"line\">  ros::NodeHandle n;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*告诉 master 我们将要在 command（话题名） 上发布 std_msgs/String 类型的消息。</span></div><div class=\"line\">  这样 master 就会告诉所有订阅了 command 话题的节点，将要有数据发布。第二个参数是发布序列的大小。</div><div class=\"line\">  如果我们发布的消息的频率太高，缓冲区中的消息在大于 1000 个的时候就会开始丢弃先前发布的消息。 </div><div class=\"line\">  NodeHandle::advertise() 返回一个 ros::Publisher 对象,它有两个作用：</div><div class=\"line\">  1) 它有一个 publish() 成员函数可以让你在topic上发布消息； </div><div class=\"line\">  2) 如果消息类型不对,它会拒绝发布*/</div><div class=\"line\">  </div><div class=\"line\">  ros::Publisher chatter_pub = n.advertise&lt;std_msgs::String&gt;(<span class=\"string\">\"command\"</span>, <span class=\"number\">1000</span>);</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">/*ros::Rate 对象可以允许指定自循环的频率。它会追踪记录自上一次调用 Rate::sleep() </span></div><div class=\"line\">  后时间的流逝，并休眠直到一个频率周期的时间,本例指定循环频率为10HZ */</div><div class=\"line\"> </div><div class=\"line\">  ros::<span class=\"function\">Rate <span class=\"title\">loop_rate</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">/*roscpp 会默认生成一个 SIGINT 句柄，它负责处理 Ctrl-C 键盘操作——使得 ros::ok() 返回 false。 </span></div><div class=\"line\">   如果下列条件之一发生，ros::ok() 返回false： </div><div class=\"line\">   1  SIGINT 被触发 (Ctrl-C) </div><div class=\"line\">   2  被另一同名节点踢出 ROS 网络 </div><div class=\"line\">   3  ros::shutdown() 被程序的另一部分调用 </div><div class=\"line\">   4 节点中的所有 ros::NodeHandles 都已经被销毁 </div><div class=\"line\">   一旦 ros::ok() 返回 false, 所有的 ROS 调用都会失效*/</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">while</span> (ros::ok())</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">/*我们使用一个由 msg file 文件产生的『消息自适应』类在 </span></div><div class=\"line\">    ROS 网络中广播消息。现在我们使用标准的String消息，它只有一个数据成员 \"data\"。</div><div class=\"line\">    当然，你也可以发布更复杂的消息类型。 */</div><div class=\"line\">    </div><div class=\"line\">    std_msgs::String msg;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">stringstream</span> ss;</div><div class=\"line\">    </div><div class=\"line\">    ss &lt;&lt; <span class=\"string\">\"talker publish command \"</span> &lt;&lt; count;</div><div class=\"line\">    </div><div class=\"line\">    msg.data = ss.str();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/*ROS_INFO 和其他类似的函数可以用来代替 printf/cout 等函数。</span></div><div class=\"line\">    具体可以参考 http://wiki.ros.org/rosconsole，以获得更多信息*/</div><div class=\"line\">    </div><div class=\"line\">    ROS_INFO(<span class=\"string\">\"%s\"</span>, msg.data.c_str()); </div><div class=\"line\">    </div><div class=\"line\">   <span class=\"comment\">/*广播消息*/</span></div><div class=\"line\">    </div><div class=\"line\">    chatter_pub.publish(msg);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/*在这个例子中并不是一定要调用 ros::spinOnce()，因为我们不接受回调。</span></div><div class=\"line\">     如果你的程序里包含其他回调函数，最好在这里加上 ros::spinOnce()这一语句，</div><div class=\"line\">    否则你的回调函数就永远也不会被调用了*/</div><div class=\"line\">   </div><div class=\"line\">    ros::spinOnce();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/*休眠一段时间，使得发布频率为10HZ*/</span></div><div class=\"line\">    loop_rate.sleep();</div><div class=\"line\">   </div><div class=\"line\">    ++count;</div><div class=\"line\">   &#125;</div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的内容可以总结为：<br> 1 初始化 ROS 系统<br> 2 在 ROS 网络内广播我们将要在 command 话题上发布 std_msgs/String 类型的消息<br> 3 以每秒 10 次的频率在 chatter 上发布消息<br>接下来编写一个订阅器用于接收该节点发布的消息。</p>\n<h1 id=\"订阅器\"><a href=\"#订阅器\" class=\"headerlink\" title=\"订阅器\"></a>订阅器</h1><p>新建 listener.cpp 放置于 beginner_tutorials 的 src 目录下：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscd beginner_tutorials/src/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vim listener.cpp</span></div></pre></td></tr></table></figure></p>\n<p>添加如下代码：<br>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"std_msgs/String.h\"</span></span></div><div class=\"line\"><span class=\"comment\">/*定义回调函数*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">chatterCallback</span><span class=\"params\">(<span class=\"keyword\">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">/*打印收到的信息，消息是以 boost shared_ptr 指针的形式传输，这就意味着你可以存储它而又不需要复制数据。 */</span></div><div class=\"line\">  ROS_INFO(<span class=\"string\">\"listener got: [%s]\"</span>, msg-&gt;data.c_str());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"comment\">/*初始化节点，命名为listener*/</span></div><div class=\"line\"> </div><div class=\"line\"> ros::init(argc, argv, <span class=\"string\">\"listener\"</span>);</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">/*创建节点句柄*/</span></div><div class=\"line\"></div><div class=\"line\">  ros::NodeHandle n;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">/*订阅主题,并注册回调函数，当有消息发布到这个话题时，ROS 就会调用 chatterCallback() 函数。</span></div><div class=\"line\">  第二个参数是队列大小，以防我们处理消息的速度不够快，当缓存达到 1000 条消息后，再有新的消息到来就将开始丢弃先前接收的消息。 */</div><div class=\"line\"> </div><div class=\"line\"> ros::Subscriber sub = n.subscribe(<span class=\"string\">\"command\"</span>, <span class=\"number\">1000</span>, chatterCallback);</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">/*进入自循环，可以尽可能快的调用消息回调函数。如果没有消息到达，它不会占用很多 CPU，所以不用担心。一旦 ros::ok() 返回 false，</span></div><div class=\"line\">  ros::spin() 就会立刻跳出自循环。这有可能是 ros::shutdown() 被调用，或者是用户按下了 Ctrl-C，</div><div class=\"line\">  使得 master 告诉节点要终止运行。也有可能是节点被人为关闭的。 </div><div class=\"line\">  还有其他的方法进行回调，但在这里我们不涉及。想要了解，可以参考 http://wiki.ros.org/roscpp_tutorials package</div><div class=\"line\">  里的一些 demo 应用。需要更为详尽的信息，可以参考 http://wiki.ros.org/roscpp/Overview。 */</div><div class=\"line\">  </div><div class=\"line\">  ros::spin();</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的代码可以总结为：<br> 1 初始化ROS系统<br> 2 订阅 chatter 话题<br> 3 进入自循环，等待消息的到达<br> 4 当消息到达，调用 chatterCallback() 函数 </p>\n<h1 id=\"编译测试\"><a href=\"#编译测试\" class=\"headerlink\" title=\"编译测试\"></a>编译测试</h1><p>编译测试之前需要修改 beginner_tutorials 中的 CMakeLists.txt 文件，添加以下内容：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">include_directories</span><span class=\"params\">(include $&#123;catkin_INCLUDE_DIRS&#125;)</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(talker src/talker.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(talker $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(listener src/listener.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(listener $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>\n<p>这会生成两个可执行文件, talker 和 listener, 默认存储到 <a href=\"http://wiki.ros.org/catkin/workspaces#Development_.28Devel.29_Space\" target=\"_blank\" rel=\"external\">devel space</a> 目录下,具体是在 ~/catkin_ws/devel/lib/beginner_tutorials 中。<br>为可执行文件添加对生成的消息文件的依赖：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">add_dependencies</span><span class=\"params\">(talker beginner_tutorials_generate_messages_cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">add_dependencies</span><span class=\"params\">(listener beginner_tutorials_generate_messages_cpp)</span></span></div></pre></td></tr></table></figure></p>\n<p>这样就可以确保自定义消息的头文件在被使用之前已经被生成。因为 catkin 把所有的 package 并行的编译，所以如果你要使用其他 catkin 工作空间中其他 package 的消息，同样也需要添加对他们各自生成的消息文件的依赖。<br>编译：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">source</span> ./devel/setup.bash</span></div></pre></td></tr></table></figure></p>\n<p>测试时打开两个 terminal,一个运行 talker 节点，一个运行 listener 节点：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscore &amp;</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun beginner_tutorials talker // 启动 talker节点</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun beginner_tutorials listener // 启动 listener 节点</span></div></pre></td></tr></table></figure></p>\n<p>效果：<br><img src=\"/2017/05/31/ros-primary-tutorial-10/test.jpg\" alt=\"\"><br>参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29\" target=\"_blank\" rel=\"external\">WritingPublisherSubscriber</a></p>\n","site":{"data":{}},"excerpt":"<p>本篇学习 ROS 中简单的发布器和订阅器节点的编写。节点就是 ROS 网络中的一个可执行文件，它既可以订阅消息也可以发布消息。本篇涉及的代码已上传至 <a href=\"https://github.com/StevenShiChina/beginner_tutorials\" target=\"_blank\" rel=\"external\">mygithub</a>。<br></p>","more":"<p></p>\n<h1 id=\"发布器\"><a href=\"#发布器\" class=\"headerlink\" title=\"发布器\"></a>发布器</h1><p>我们将创建一个发布器节点 talker，它将不断的在 ROS 网络中广播消息。在 beginner_tutorials 目录下新建一个 src 目录<br>   <figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>mkdir -p ~<span class=\"regexp\">/catkin_ws/src</span><span class=\"regexp\">/beginner_tutorials/src</span></div><div class=\"line\"><span class=\"variable\">$ </span>roscd beginner_tutorials/src/</div></pre></td></tr></table></figure></p>\n<p>src 文件夹用于放置 beginner_tutorials 包的所有源代码，新建 talker.cpp 在 beginner_tutorials/src/ 目录下添加如下代码：<br>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span> <span class=\"comment\">/*引用ROS系统头文件*/</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"std_msgs/String.h\"</span> <span class=\"comment\">/*消息类型定义*/</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">/*初始化ROS talker节点名*</span></div><div class=\"line\">  ros::init(argc, argv, \"talker\");</div><div class=\"line\"></div><div class=\"line\">  /*为该进程创建一个节点句柄 第一个创建的 NodeHandle 会为节点进行初始化，</div><div class=\"line\">  最后一个销毁的 NodeHandle 则会释放该节点所占用的所有资源*/</div><div class=\"line\">  </div><div class=\"line\">  ros::NodeHandle n;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*告诉 master 我们将要在 command（话题名） 上发布 std_msgs/String 类型的消息。</span></div><div class=\"line\">  这样 master 就会告诉所有订阅了 command 话题的节点，将要有数据发布。第二个参数是发布序列的大小。</div><div class=\"line\">  如果我们发布的消息的频率太高，缓冲区中的消息在大于 1000 个的时候就会开始丢弃先前发布的消息。 </div><div class=\"line\">  NodeHandle::advertise() 返回一个 ros::Publisher 对象,它有两个作用：</div><div class=\"line\">  1) 它有一个 publish() 成员函数可以让你在topic上发布消息； </div><div class=\"line\">  2) 如果消息类型不对,它会拒绝发布*/</div><div class=\"line\">  </div><div class=\"line\">  ros::Publisher chatter_pub = n.advertise&lt;std_msgs::String&gt;(<span class=\"string\">\"command\"</span>, <span class=\"number\">1000</span>);</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">/*ros::Rate 对象可以允许指定自循环的频率。它会追踪记录自上一次调用 Rate::sleep() </span></div><div class=\"line\">  后时间的流逝，并休眠直到一个频率周期的时间,本例指定循环频率为10HZ */</div><div class=\"line\"> </div><div class=\"line\">  ros::<span class=\"function\">Rate <span class=\"title\">loop_rate</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">/*roscpp 会默认生成一个 SIGINT 句柄，它负责处理 Ctrl-C 键盘操作——使得 ros::ok() 返回 false。 </span></div><div class=\"line\">   如果下列条件之一发生，ros::ok() 返回false： </div><div class=\"line\">   1  SIGINT 被触发 (Ctrl-C) </div><div class=\"line\">   2  被另一同名节点踢出 ROS 网络 </div><div class=\"line\">   3  ros::shutdown() 被程序的另一部分调用 </div><div class=\"line\">   4 节点中的所有 ros::NodeHandles 都已经被销毁 </div><div class=\"line\">   一旦 ros::ok() 返回 false, 所有的 ROS 调用都会失效*/</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">while</span> (ros::ok())</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">/*我们使用一个由 msg file 文件产生的『消息自适应』类在 </span></div><div class=\"line\">    ROS 网络中广播消息。现在我们使用标准的String消息，它只有一个数据成员 \"data\"。</div><div class=\"line\">    当然，你也可以发布更复杂的消息类型。 */</div><div class=\"line\">    </div><div class=\"line\">    std_msgs::String msg;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">stringstream</span> ss;</div><div class=\"line\">    </div><div class=\"line\">    ss &lt;&lt; <span class=\"string\">\"talker publish command \"</span> &lt;&lt; count;</div><div class=\"line\">    </div><div class=\"line\">    msg.data = ss.str();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/*ROS_INFO 和其他类似的函数可以用来代替 printf/cout 等函数。</span></div><div class=\"line\">    具体可以参考 http://wiki.ros.org/rosconsole，以获得更多信息*/</div><div class=\"line\">    </div><div class=\"line\">    ROS_INFO(<span class=\"string\">\"%s\"</span>, msg.data.c_str()); </div><div class=\"line\">    </div><div class=\"line\">   <span class=\"comment\">/*广播消息*/</span></div><div class=\"line\">    </div><div class=\"line\">    chatter_pub.publish(msg);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/*在这个例子中并不是一定要调用 ros::spinOnce()，因为我们不接受回调。</span></div><div class=\"line\">     如果你的程序里包含其他回调函数，最好在这里加上 ros::spinOnce()这一语句，</div><div class=\"line\">    否则你的回调函数就永远也不会被调用了*/</div><div class=\"line\">   </div><div class=\"line\">    ros::spinOnce();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/*休眠一段时间，使得发布频率为10HZ*/</span></div><div class=\"line\">    loop_rate.sleep();</div><div class=\"line\">   </div><div class=\"line\">    ++count;</div><div class=\"line\">   &#125;</div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的内容可以总结为：<br> 1 初始化 ROS 系统<br> 2 在 ROS 网络内广播我们将要在 command 话题上发布 std_msgs/String 类型的消息<br> 3 以每秒 10 次的频率在 chatter 上发布消息<br>接下来编写一个订阅器用于接收该节点发布的消息。</p>\n<h1 id=\"订阅器\"><a href=\"#订阅器\" class=\"headerlink\" title=\"订阅器\"></a>订阅器</h1><p>新建 listener.cpp 放置于 beginner_tutorials 的 src 目录下：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscd beginner_tutorials/src/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vim listener.cpp</span></div></pre></td></tr></table></figure></p>\n<p>添加如下代码：<br>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"std_msgs/String.h\"</span></span></div><div class=\"line\"><span class=\"comment\">/*定义回调函数*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">chatterCallback</span><span class=\"params\">(<span class=\"keyword\">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">/*打印收到的信息，消息是以 boost shared_ptr 指针的形式传输，这就意味着你可以存储它而又不需要复制数据。 */</span></div><div class=\"line\">  ROS_INFO(<span class=\"string\">\"listener got: [%s]\"</span>, msg-&gt;data.c_str());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"comment\">/*初始化节点，命名为listener*/</span></div><div class=\"line\"> </div><div class=\"line\"> ros::init(argc, argv, <span class=\"string\">\"listener\"</span>);</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">/*创建节点句柄*/</span></div><div class=\"line\"></div><div class=\"line\">  ros::NodeHandle n;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">/*订阅主题,并注册回调函数，当有消息发布到这个话题时，ROS 就会调用 chatterCallback() 函数。</span></div><div class=\"line\">  第二个参数是队列大小，以防我们处理消息的速度不够快，当缓存达到 1000 条消息后，再有新的消息到来就将开始丢弃先前接收的消息。 */</div><div class=\"line\"> </div><div class=\"line\"> ros::Subscriber sub = n.subscribe(<span class=\"string\">\"command\"</span>, <span class=\"number\">1000</span>, chatterCallback);</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">/*进入自循环，可以尽可能快的调用消息回调函数。如果没有消息到达，它不会占用很多 CPU，所以不用担心。一旦 ros::ok() 返回 false，</span></div><div class=\"line\">  ros::spin() 就会立刻跳出自循环。这有可能是 ros::shutdown() 被调用，或者是用户按下了 Ctrl-C，</div><div class=\"line\">  使得 master 告诉节点要终止运行。也有可能是节点被人为关闭的。 </div><div class=\"line\">  还有其他的方法进行回调，但在这里我们不涉及。想要了解，可以参考 http://wiki.ros.org/roscpp_tutorials package</div><div class=\"line\">  里的一些 demo 应用。需要更为详尽的信息，可以参考 http://wiki.ros.org/roscpp/Overview。 */</div><div class=\"line\">  </div><div class=\"line\">  ros::spin();</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的代码可以总结为：<br> 1 初始化ROS系统<br> 2 订阅 chatter 话题<br> 3 进入自循环，等待消息的到达<br> 4 当消息到达，调用 chatterCallback() 函数 </p>\n<h1 id=\"编译测试\"><a href=\"#编译测试\" class=\"headerlink\" title=\"编译测试\"></a>编译测试</h1><p>编译测试之前需要修改 beginner_tutorials 中的 CMakeLists.txt 文件，添加以下内容：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">include_directories</span><span class=\"params\">(include $&#123;catkin_INCLUDE_DIRS&#125;)</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(talker src/talker.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(talker $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(listener src/listener.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(listener $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>\n<p>这会生成两个可执行文件, talker 和 listener, 默认存储到 <a href=\"http://wiki.ros.org/catkin/workspaces#Development_.28Devel.29_Space\" target=\"_blank\" rel=\"external\">devel space</a> 目录下,具体是在 ~/catkin_ws/devel/lib/beginner_tutorials 中。<br>为可执行文件添加对生成的消息文件的依赖：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">add_dependencies</span><span class=\"params\">(talker beginner_tutorials_generate_messages_cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">add_dependencies</span><span class=\"params\">(listener beginner_tutorials_generate_messages_cpp)</span></span></div></pre></td></tr></table></figure></p>\n<p>这样就可以确保自定义消息的头文件在被使用之前已经被生成。因为 catkin 把所有的 package 并行的编译，所以如果你要使用其他 catkin 工作空间中其他 package 的消息，同样也需要添加对他们各自生成的消息文件的依赖。<br>编译：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">source</span> ./devel/setup.bash</span></div></pre></td></tr></table></figure></p>\n<p>测试时打开两个 terminal,一个运行 talker 节点，一个运行 listener 节点：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscore &amp;</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun beginner_tutorials talker // 启动 talker节点</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun beginner_tutorials listener // 启动 listener 节点</span></div></pre></td></tr></table></figure></p>\n<p>效果：<br><img src=\"/2017/05/31/ros-primary-tutorial-10/test.jpg\" alt=\"\"><br>参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29\" target=\"_blank\" rel=\"external\">WritingPublisherSubscriber</a></p>"},{"title":"ROS初级十二 理解ROS坐标转换上","date":"2017-06-07T02:30:19.000Z","comments":1,"_content":"一个完整的机器人有腿(或轮子)、有眼睛、有手、有大脑，大脑控制机器人去协调的动作。问题来了，大脑是如何知道腿在哪儿？眼睛在哪儿？手臂在哪儿？要帮主人把房门打开，如何控制手臂去开门？这些都涉及到一个关键的问题-机器人的坐标变换。本篇学习 ROS 中的 [tf](http://wiki.ros.org/tf) 。\n<!--more-->\n# tf 初理解\n![](ros-primary-tutorial-12/tf.png)\ntf 是 ROS 中的坐标变换系统，它可以跟踪多个参考坐标系的坐标，使用树形数据结构根据时间缓冲来维护这些坐标及其坐标关系，帮助我们在任意时间完成两个或多个参考系中的坐标变换。 tf 以分布式形式存在，所有节点都可以使用这些变换数据，节点可以监听 tf 变换，接收系统中发布的所有参考坐标系，并查询需要的参考坐标系；节点可以广播 tf 变换，向系统中广播参考系坐标关系，每个节点的参考坐标广播可以直接插入 tf 树中告知系统。\n# 实例\n通过一个实例来更好的理解  [tf](http://wiki.ros.org/tf)，参考 [官网](http://wiki.ros.org/tf)。\n启动一个demo:\n   ```\n $ roslaunch turtle_tf turtle_tf_demo.launch\n   ```\n此时会看到有两个 turtle 同时出现，将光标移动到 terminal 以便于用键盘的方向键来控制其中一个 turtle 的移动，可以看到当一个移动时另外一个一直做跟随运动：\n![](ros-primary-tutorial-12/follow.jpg)\n\n该例子使用 tf 库创建的三个坐标系，一个是全局坐标系，一个是 turtle1 坐标系，另一个是 turtle2 坐标系。它使用 tf 广播发布 turtle 的坐标，另外一个去监听这个坐标，并计算它们之间的位置差，从而移动一个去跟随另一个的位置。\n# tf 工具使用\n[view_frames](http://wiki.ros.org/tf#view_frames)：\n\n   ```\n $ rosrun tf view_frames\n   ```\n[view_frames](http://wiki.ros.org/tf#view_frames) 可以以PDF的形式创建当前坐标广播系统树，命令输出如下：\n   ```\nListening to /tf for 5.000000 seconds\nDone Listening\ndot - graphviz version 2.36.0 (20140111.2315)\n\nDetected dot version 2.36\nframes.pdf generated\n   ```\n它会在当前目录下生成 frames.pdf 文件，可以使用如下命令查看：\n   ```\n$ evince frames.pdf\n   ```\n![](ros-primary-tutorial-12/pdf.jpg)\n从图中可以看出，系统存在三个参考坐标系，world 为父坐标系即全局坐标系，另外两个也都有自己的坐标系，信息中还包括发送频率、缓存长度等信息。\n\n[rqt_tf_tree](http://wiki.ros.org/rqt_tf_tree):\n\n   ```\n$ rosrun rqt_tf_tree rqt_tf_tree\n   ```\n[rqt_tf_tree](http://wiki.ros.org/rqt_tf_tree) 是一个可视化的实时坐标树查看工具，可以随时点击刷新按钮来实时的查看坐标广播树。![](ros-primary-tutorial-12/runtime.jpg)\n\n[tf_echo](http://wiki.ros.org/tf):\n使用：\n   ```\nrosrun tf tf_echo [reference_frame] [target_frame]\n   ```\n如何从 turtle1 得到 turtle2 的坐标:\n![](ros-primary-tutorial-12/matrix.png)\n\n该命令输出指定的坐标变换关系，如：\n   ```\n$ rosrun tf tf_echo turtle1 turtle2\n   ```\n输出一般为：\n   ```\nAt time 1496812263.516\n- Translation: [0.000, 0.000, 0.000]\n- Rotation: in Quaternion [0.000, 0.000, 0.707, 0.707]\n            in RPY (radian) [0.000, -0.000, 1.571]\n            in RPY (degree) [0.000, -0.000, 90.000]\nAt time 1496812264.205\n- Translation: [0.000, 0.000, 0.000]\n- Rotation: in Quaternion [0.000, 0.000, 0.707, 0.707]\n            in RPY (radian) [0.000, -0.000, 1.571]\n            in RPY (degree) [0.000, -0.000, 90.000]\nAt time 1496812265.213\n- Translation: [0.000, 0.000, 0.000]\n- Rotation: in Quaternion [0.000, 0.000, 0.707, 0.707]\n            in RPY (radian) [0.000, -0.000, 1.571]\n            in RPY (degree) [0.000, -0.000, 90.000]\nAt time 1496812266.205\n- Translation: [0.000, 0.000, 0.000]\n- Rotation: in Quaternion [0.000, 0.000, 0.707, 0.707]\n            in RPY (radian) [0.000, -0.000, 1.571]\n            in RPY (degree) [0.000, -0.000, 90.000]\n   ```\n它是一直输出的，当控制移动 turtle1 时可以看到 turtle2 的坐标是怎么变化的，也就是 turtle2 的坐标是怎么根据 turtle1 的出来的。\n# rviz\n使用 [rviz]() 可视化工具查看坐标系之间的坐标关系\n   ```\n$ rosrun rviz rviz -d `rospack find turtle_tf`/rviz/turtle_rviz.rviz\n   ```\n当通过键盘控制 turtle 运动时，可以在 rviz 中观察到两个 turtle 的位置关系及坐标的变换：\n![](ros-primary-tutorial-12/rviz.jpg)\n远处两个小的坐标系分别为 turtle1 和 turtle2 的坐标系，左下角为系统全局坐标系。本篇先到这里，下一篇进一步学习 tf 坐标变换。\n参考 [Introduction tf](http://wiki.ros.org/tf/Tutorials/Introduction%20to%20tf)。","source":"_posts/ros-primary-tutorial-12.md","raw":"---\ntitle: ROS初级十二 理解ROS坐标转换上\ndate: 2017-06-07 10:30:19\ncategories: ROS\ntags: ROStf\ncomments: true\n---\n一个完整的机器人有腿(或轮子)、有眼睛、有手、有大脑，大脑控制机器人去协调的动作。问题来了，大脑是如何知道腿在哪儿？眼睛在哪儿？手臂在哪儿？要帮主人把房门打开，如何控制手臂去开门？这些都涉及到一个关键的问题-机器人的坐标变换。本篇学习 ROS 中的 [tf](http://wiki.ros.org/tf) 。\n<!--more-->\n# tf 初理解\n![](ros-primary-tutorial-12/tf.png)\ntf 是 ROS 中的坐标变换系统，它可以跟踪多个参考坐标系的坐标，使用树形数据结构根据时间缓冲来维护这些坐标及其坐标关系，帮助我们在任意时间完成两个或多个参考系中的坐标变换。 tf 以分布式形式存在，所有节点都可以使用这些变换数据，节点可以监听 tf 变换，接收系统中发布的所有参考坐标系，并查询需要的参考坐标系；节点可以广播 tf 变换，向系统中广播参考系坐标关系，每个节点的参考坐标广播可以直接插入 tf 树中告知系统。\n# 实例\n通过一个实例来更好的理解  [tf](http://wiki.ros.org/tf)，参考 [官网](http://wiki.ros.org/tf)。\n启动一个demo:\n   ```\n $ roslaunch turtle_tf turtle_tf_demo.launch\n   ```\n此时会看到有两个 turtle 同时出现，将光标移动到 terminal 以便于用键盘的方向键来控制其中一个 turtle 的移动，可以看到当一个移动时另外一个一直做跟随运动：\n![](ros-primary-tutorial-12/follow.jpg)\n\n该例子使用 tf 库创建的三个坐标系，一个是全局坐标系，一个是 turtle1 坐标系，另一个是 turtle2 坐标系。它使用 tf 广播发布 turtle 的坐标，另外一个去监听这个坐标，并计算它们之间的位置差，从而移动一个去跟随另一个的位置。\n# tf 工具使用\n[view_frames](http://wiki.ros.org/tf#view_frames)：\n\n   ```\n $ rosrun tf view_frames\n   ```\n[view_frames](http://wiki.ros.org/tf#view_frames) 可以以PDF的形式创建当前坐标广播系统树，命令输出如下：\n   ```\nListening to /tf for 5.000000 seconds\nDone Listening\ndot - graphviz version 2.36.0 (20140111.2315)\n\nDetected dot version 2.36\nframes.pdf generated\n   ```\n它会在当前目录下生成 frames.pdf 文件，可以使用如下命令查看：\n   ```\n$ evince frames.pdf\n   ```\n![](ros-primary-tutorial-12/pdf.jpg)\n从图中可以看出，系统存在三个参考坐标系，world 为父坐标系即全局坐标系，另外两个也都有自己的坐标系，信息中还包括发送频率、缓存长度等信息。\n\n[rqt_tf_tree](http://wiki.ros.org/rqt_tf_tree):\n\n   ```\n$ rosrun rqt_tf_tree rqt_tf_tree\n   ```\n[rqt_tf_tree](http://wiki.ros.org/rqt_tf_tree) 是一个可视化的实时坐标树查看工具，可以随时点击刷新按钮来实时的查看坐标广播树。![](ros-primary-tutorial-12/runtime.jpg)\n\n[tf_echo](http://wiki.ros.org/tf):\n使用：\n   ```\nrosrun tf tf_echo [reference_frame] [target_frame]\n   ```\n如何从 turtle1 得到 turtle2 的坐标:\n![](ros-primary-tutorial-12/matrix.png)\n\n该命令输出指定的坐标变换关系，如：\n   ```\n$ rosrun tf tf_echo turtle1 turtle2\n   ```\n输出一般为：\n   ```\nAt time 1496812263.516\n- Translation: [0.000, 0.000, 0.000]\n- Rotation: in Quaternion [0.000, 0.000, 0.707, 0.707]\n            in RPY (radian) [0.000, -0.000, 1.571]\n            in RPY (degree) [0.000, -0.000, 90.000]\nAt time 1496812264.205\n- Translation: [0.000, 0.000, 0.000]\n- Rotation: in Quaternion [0.000, 0.000, 0.707, 0.707]\n            in RPY (radian) [0.000, -0.000, 1.571]\n            in RPY (degree) [0.000, -0.000, 90.000]\nAt time 1496812265.213\n- Translation: [0.000, 0.000, 0.000]\n- Rotation: in Quaternion [0.000, 0.000, 0.707, 0.707]\n            in RPY (radian) [0.000, -0.000, 1.571]\n            in RPY (degree) [0.000, -0.000, 90.000]\nAt time 1496812266.205\n- Translation: [0.000, 0.000, 0.000]\n- Rotation: in Quaternion [0.000, 0.000, 0.707, 0.707]\n            in RPY (radian) [0.000, -0.000, 1.571]\n            in RPY (degree) [0.000, -0.000, 90.000]\n   ```\n它是一直输出的，当控制移动 turtle1 时可以看到 turtle2 的坐标是怎么变化的，也就是 turtle2 的坐标是怎么根据 turtle1 的出来的。\n# rviz\n使用 [rviz]() 可视化工具查看坐标系之间的坐标关系\n   ```\n$ rosrun rviz rviz -d `rospack find turtle_tf`/rviz/turtle_rviz.rviz\n   ```\n当通过键盘控制 turtle 运动时，可以在 rviz 中观察到两个 turtle 的位置关系及坐标的变换：\n![](ros-primary-tutorial-12/rviz.jpg)\n远处两个小的坐标系分别为 turtle1 和 turtle2 的坐标系，左下角为系统全局坐标系。本篇先到这里，下一篇进一步学习 tf 坐标变换。\n参考 [Introduction tf](http://wiki.ros.org/tf/Tutorials/Introduction%20to%20tf)。","slug":"ros-primary-tutorial-12","published":1,"updated":"2017-06-13T09:01:20.229Z","layout":"post","photos":[],"link":"","_id":"cj4hne53b001pw8injkxajhf8","content":"<p>一个完整的机器人有腿(或轮子)、有眼睛、有手、有大脑，大脑控制机器人去协调的动作。问题来了，大脑是如何知道腿在哪儿？眼睛在哪儿？手臂在哪儿？要帮主人把房门打开，如何控制手臂去开门？这些都涉及到一个关键的问题-机器人的坐标变换。本篇学习 ROS 中的 <a href=\"http://wiki.ros.org/tf\" target=\"_blank\" rel=\"external\">tf</a> 。<br><a id=\"more\"></a></p>\n<h1 id=\"tf-初理解\"><a href=\"#tf-初理解\" class=\"headerlink\" title=\"tf 初理解\"></a>tf 初理解</h1><p><img src=\"/2017/06/07/ros-primary-tutorial-12/tf.png\" alt=\"\"><br>tf 是 ROS 中的坐标变换系统，它可以跟踪多个参考坐标系的坐标，使用树形数据结构根据时间缓冲来维护这些坐标及其坐标关系，帮助我们在任意时间完成两个或多个参考系中的坐标变换。 tf 以分布式形式存在，所有节点都可以使用这些变换数据，节点可以监听 tf 变换，接收系统中发布的所有参考坐标系，并查询需要的参考坐标系；节点可以广播 tf 变换，向系统中广播参考系坐标关系，每个节点的参考坐标广播可以直接插入 tf 树中告知系统。</p>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><p>通过一个实例来更好的理解  <a href=\"http://wiki.ros.org/tf\" target=\"_blank\" rel=\"external\">tf</a>，参考 <a href=\"http://wiki.ros.org/tf\" target=\"_blank\" rel=\"external\">官网</a>。<br>启动一个demo:<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roslaunch turtle_tf turtle_tf_demo.launch</span></div></pre></td></tr></table></figure></p>\n<p>此时会看到有两个 turtle 同时出现，将光标移动到 terminal 以便于用键盘的方向键来控制其中一个 turtle 的移动，可以看到当一个移动时另外一个一直做跟随运动：<br><img src=\"/2017/06/07/ros-primary-tutorial-12/follow.jpg\" alt=\"\"></p>\n<p>该例子使用 tf 库创建的三个坐标系，一个是全局坐标系，一个是 turtle1 坐标系，另一个是 turtle2 坐标系。它使用 tf 广播发布 turtle 的坐标，另外一个去监听这个坐标，并计算它们之间的位置差，从而移动一个去跟随另一个的位置。</p>\n<h1 id=\"tf-工具使用\"><a href=\"#tf-工具使用\" class=\"headerlink\" title=\"tf 工具使用\"></a>tf 工具使用</h1><p><a href=\"http://wiki.ros.org/tf#view_frames\" target=\"_blank\" rel=\"external\">view_frames</a>：</p>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun tf view_frames</span></div></pre></td></tr></table></figure>\n<p><a href=\"http://wiki.ros.org/tf#view_frames\" target=\"_blank\" rel=\"external\">view_frames</a> 可以以PDF的形式创建当前坐标广播系统树，命令输出如下：<br>   <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Listening <span class=\"built_in\">to</span> /tf <span class=\"keyword\">for</span> <span class=\"number\">5.000000</span> <span class=\"built_in\">seconds</span></div><div class=\"line\">Done Listening</div><div class=\"line\">dot - graphviz <span class=\"built_in\">version</span> <span class=\"number\">2.36</span><span class=\"number\">.0</span> (<span class=\"number\">20140111.2315</span>)</div><div class=\"line\"></div><div class=\"line\">Detected dot <span class=\"built_in\">version</span> <span class=\"number\">2.36</span></div><div class=\"line\">frames.pdf generated</div></pre></td></tr></table></figure></p>\n<p>它会在当前目录下生成 frames.pdf 文件，可以使用如下命令查看：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> evince frames.pdf</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/06/07/ros-primary-tutorial-12/pdf.jpg\" alt=\"\"><br>从图中可以看出，系统存在三个参考坐标系，world 为父坐标系即全局坐标系，另外两个也都有自己的坐标系，信息中还包括发送频率、缓存长度等信息。</p>\n<p><a href=\"http://wiki.ros.org/rqt_tf_tree\" target=\"_blank\" rel=\"external\">rqt_tf_tree</a>:</p>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun rqt_tf_tree rqt_tf_tree</span></div></pre></td></tr></table></figure>\n<p><a href=\"http://wiki.ros.org/rqt_tf_tree\" target=\"_blank\" rel=\"external\">rqt_tf_tree</a> 是一个可视化的实时坐标树查看工具，可以随时点击刷新按钮来实时的查看坐标广播树。<img src=\"/2017/06/07/ros-primary-tutorial-12/runtime.jpg\" alt=\"\"></p>\n<p><a href=\"http://wiki.ros.org/tf\" target=\"_blank\" rel=\"external\">tf_echo</a>:<br>使用：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosrun tf tf_echo <span class=\"string\">[reference_frame]</span> <span class=\"string\">[target_frame]</span></div></pre></td></tr></table></figure></p>\n<p>如何从 turtle1 得到 turtle2 的坐标:<br><img src=\"/2017/06/07/ros-primary-tutorial-12/matrix.png\" alt=\"\"></p>\n<p>该命令输出指定的坐标变换关系，如：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun tf tf_echo turtle1 turtle2</span></div></pre></td></tr></table></figure></p>\n<p>输出一般为：<br>   <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">At</span> <span class=\"selector-tag\">time</span> <span class=\"selector-tag\">1496812263</span><span class=\"selector-class\">.516</span></div><div class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Translation</span>: <span class=\"selector-attr\">[0.000, 0.000, 0.000]</span></div><div class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Rotation</span>: <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">Quaternion</span> <span class=\"selector-attr\">[0.000, 0.000, 0.707, 0.707]</span></div><div class=\"line\">            <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">RPY</span> (radian) <span class=\"selector-attr\">[0.000, -0.000, 1.571]</span></div><div class=\"line\">            <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">RPY</span> (degree) <span class=\"selector-attr\">[0.000, -0.000, 90.000]</span></div><div class=\"line\"><span class=\"selector-tag\">At</span> <span class=\"selector-tag\">time</span> <span class=\"selector-tag\">1496812264</span><span class=\"selector-class\">.205</span></div><div class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Translation</span>: <span class=\"selector-attr\">[0.000, 0.000, 0.000]</span></div><div class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Rotation</span>: <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">Quaternion</span> <span class=\"selector-attr\">[0.000, 0.000, 0.707, 0.707]</span></div><div class=\"line\">            <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">RPY</span> (radian) <span class=\"selector-attr\">[0.000, -0.000, 1.571]</span></div><div class=\"line\">            <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">RPY</span> (degree) <span class=\"selector-attr\">[0.000, -0.000, 90.000]</span></div><div class=\"line\"><span class=\"selector-tag\">At</span> <span class=\"selector-tag\">time</span> <span class=\"selector-tag\">1496812265</span><span class=\"selector-class\">.213</span></div><div class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Translation</span>: <span class=\"selector-attr\">[0.000, 0.000, 0.000]</span></div><div class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Rotation</span>: <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">Quaternion</span> <span class=\"selector-attr\">[0.000, 0.000, 0.707, 0.707]</span></div><div class=\"line\">            <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">RPY</span> (radian) <span class=\"selector-attr\">[0.000, -0.000, 1.571]</span></div><div class=\"line\">            <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">RPY</span> (degree) <span class=\"selector-attr\">[0.000, -0.000, 90.000]</span></div><div class=\"line\"><span class=\"selector-tag\">At</span> <span class=\"selector-tag\">time</span> <span class=\"selector-tag\">1496812266</span><span class=\"selector-class\">.205</span></div><div class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Translation</span>: <span class=\"selector-attr\">[0.000, 0.000, 0.000]</span></div><div class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Rotation</span>: <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">Quaternion</span> <span class=\"selector-attr\">[0.000, 0.000, 0.707, 0.707]</span></div><div class=\"line\">            <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">RPY</span> (radian) <span class=\"selector-attr\">[0.000, -0.000, 1.571]</span></div><div class=\"line\">            <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">RPY</span> (degree) <span class=\"selector-attr\">[0.000, -0.000, 90.000]</span></div></pre></td></tr></table></figure></p>\n<p>它是一直输出的，当控制移动 turtle1 时可以看到 turtle2 的坐标是怎么变化的，也就是 turtle2 的坐标是怎么根据 turtle1 的出来的。</p>\n<h1 id=\"rviz\"><a href=\"#rviz\" class=\"headerlink\" title=\"rviz\"></a>rviz</h1><p>使用 <a href=\"\">rviz</a> 可视化工具查看坐标系之间的坐标关系<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun rviz rviz <span class=\"_\">-d</span> `rospack find turtle_tf`/rviz/turtle_rviz.rviz</span></div></pre></td></tr></table></figure></p>\n<p>当通过键盘控制 turtle 运动时，可以在 rviz 中观察到两个 turtle 的位置关系及坐标的变换：<br><img src=\"/2017/06/07/ros-primary-tutorial-12/rviz.jpg\" alt=\"\"><br>远处两个小的坐标系分别为 turtle1 和 turtle2 的坐标系，左下角为系统全局坐标系。本篇先到这里，下一篇进一步学习 tf 坐标变换。<br>参考 <a href=\"http://wiki.ros.org/tf/Tutorials/Introduction%20to%20tf\" target=\"_blank\" rel=\"external\">Introduction tf</a>。</p>\n","site":{"data":{}},"excerpt":"<p>一个完整的机器人有腿(或轮子)、有眼睛、有手、有大脑，大脑控制机器人去协调的动作。问题来了，大脑是如何知道腿在哪儿？眼睛在哪儿？手臂在哪儿？要帮主人把房门打开，如何控制手臂去开门？这些都涉及到一个关键的问题-机器人的坐标变换。本篇学习 ROS 中的 <a href=\"http://wiki.ros.org/tf\" target=\"_blank\" rel=\"external\">tf</a> 。<br></p>","more":"<p></p>\n<h1 id=\"tf-初理解\"><a href=\"#tf-初理解\" class=\"headerlink\" title=\"tf 初理解\"></a>tf 初理解</h1><p><img src=\"/2017/06/07/ros-primary-tutorial-12/tf.png\" alt=\"\"><br>tf 是 ROS 中的坐标变换系统，它可以跟踪多个参考坐标系的坐标，使用树形数据结构根据时间缓冲来维护这些坐标及其坐标关系，帮助我们在任意时间完成两个或多个参考系中的坐标变换。 tf 以分布式形式存在，所有节点都可以使用这些变换数据，节点可以监听 tf 变换，接收系统中发布的所有参考坐标系，并查询需要的参考坐标系；节点可以广播 tf 变换，向系统中广播参考系坐标关系，每个节点的参考坐标广播可以直接插入 tf 树中告知系统。</p>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><p>通过一个实例来更好的理解  <a href=\"http://wiki.ros.org/tf\" target=\"_blank\" rel=\"external\">tf</a>，参考 <a href=\"http://wiki.ros.org/tf\" target=\"_blank\" rel=\"external\">官网</a>。<br>启动一个demo:<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roslaunch turtle_tf turtle_tf_demo.launch</span></div></pre></td></tr></table></figure></p>\n<p>此时会看到有两个 turtle 同时出现，将光标移动到 terminal 以便于用键盘的方向键来控制其中一个 turtle 的移动，可以看到当一个移动时另外一个一直做跟随运动：<br><img src=\"/2017/06/07/ros-primary-tutorial-12/follow.jpg\" alt=\"\"></p>\n<p>该例子使用 tf 库创建的三个坐标系，一个是全局坐标系，一个是 turtle1 坐标系，另一个是 turtle2 坐标系。它使用 tf 广播发布 turtle 的坐标，另外一个去监听这个坐标，并计算它们之间的位置差，从而移动一个去跟随另一个的位置。</p>\n<h1 id=\"tf-工具使用\"><a href=\"#tf-工具使用\" class=\"headerlink\" title=\"tf 工具使用\"></a>tf 工具使用</h1><p><a href=\"http://wiki.ros.org/tf#view_frames\" target=\"_blank\" rel=\"external\">view_frames</a>：</p>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun tf view_frames</span></div></pre></td></tr></table></figure>\n<p><a href=\"http://wiki.ros.org/tf#view_frames\" target=\"_blank\" rel=\"external\">view_frames</a> 可以以PDF的形式创建当前坐标广播系统树，命令输出如下：<br>   <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Listening <span class=\"built_in\">to</span> /tf <span class=\"keyword\">for</span> <span class=\"number\">5.000000</span> <span class=\"built_in\">seconds</span></div><div class=\"line\">Done Listening</div><div class=\"line\">dot - graphviz <span class=\"built_in\">version</span> <span class=\"number\">2.36</span><span class=\"number\">.0</span> (<span class=\"number\">20140111.2315</span>)</div><div class=\"line\"></div><div class=\"line\">Detected dot <span class=\"built_in\">version</span> <span class=\"number\">2.36</span></div><div class=\"line\">frames.pdf generated</div></pre></td></tr></table></figure></p>\n<p>它会在当前目录下生成 frames.pdf 文件，可以使用如下命令查看：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> evince frames.pdf</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/06/07/ros-primary-tutorial-12/pdf.jpg\" alt=\"\"><br>从图中可以看出，系统存在三个参考坐标系，world 为父坐标系即全局坐标系，另外两个也都有自己的坐标系，信息中还包括发送频率、缓存长度等信息。</p>\n<p><a href=\"http://wiki.ros.org/rqt_tf_tree\" target=\"_blank\" rel=\"external\">rqt_tf_tree</a>:</p>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun rqt_tf_tree rqt_tf_tree</span></div></pre></td></tr></table></figure>\n<p><a href=\"http://wiki.ros.org/rqt_tf_tree\" target=\"_blank\" rel=\"external\">rqt_tf_tree</a> 是一个可视化的实时坐标树查看工具，可以随时点击刷新按钮来实时的查看坐标广播树。<img src=\"/2017/06/07/ros-primary-tutorial-12/runtime.jpg\" alt=\"\"></p>\n<p><a href=\"http://wiki.ros.org/tf\" target=\"_blank\" rel=\"external\">tf_echo</a>:<br>使用：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosrun tf tf_echo <span class=\"string\">[reference_frame]</span> <span class=\"string\">[target_frame]</span></div></pre></td></tr></table></figure></p>\n<p>如何从 turtle1 得到 turtle2 的坐标:<br><img src=\"/2017/06/07/ros-primary-tutorial-12/matrix.png\" alt=\"\"></p>\n<p>该命令输出指定的坐标变换关系，如：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun tf tf_echo turtle1 turtle2</span></div></pre></td></tr></table></figure></p>\n<p>输出一般为：<br>   <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">At</span> <span class=\"selector-tag\">time</span> <span class=\"selector-tag\">1496812263</span><span class=\"selector-class\">.516</span></div><div class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Translation</span>: <span class=\"selector-attr\">[0.000, 0.000, 0.000]</span></div><div class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Rotation</span>: <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">Quaternion</span> <span class=\"selector-attr\">[0.000, 0.000, 0.707, 0.707]</span></div><div class=\"line\">            <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">RPY</span> (radian) <span class=\"selector-attr\">[0.000, -0.000, 1.571]</span></div><div class=\"line\">            <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">RPY</span> (degree) <span class=\"selector-attr\">[0.000, -0.000, 90.000]</span></div><div class=\"line\"><span class=\"selector-tag\">At</span> <span class=\"selector-tag\">time</span> <span class=\"selector-tag\">1496812264</span><span class=\"selector-class\">.205</span></div><div class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Translation</span>: <span class=\"selector-attr\">[0.000, 0.000, 0.000]</span></div><div class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Rotation</span>: <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">Quaternion</span> <span class=\"selector-attr\">[0.000, 0.000, 0.707, 0.707]</span></div><div class=\"line\">            <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">RPY</span> (radian) <span class=\"selector-attr\">[0.000, -0.000, 1.571]</span></div><div class=\"line\">            <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">RPY</span> (degree) <span class=\"selector-attr\">[0.000, -0.000, 90.000]</span></div><div class=\"line\"><span class=\"selector-tag\">At</span> <span class=\"selector-tag\">time</span> <span class=\"selector-tag\">1496812265</span><span class=\"selector-class\">.213</span></div><div class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Translation</span>: <span class=\"selector-attr\">[0.000, 0.000, 0.000]</span></div><div class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Rotation</span>: <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">Quaternion</span> <span class=\"selector-attr\">[0.000, 0.000, 0.707, 0.707]</span></div><div class=\"line\">            <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">RPY</span> (radian) <span class=\"selector-attr\">[0.000, -0.000, 1.571]</span></div><div class=\"line\">            <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">RPY</span> (degree) <span class=\"selector-attr\">[0.000, -0.000, 90.000]</span></div><div class=\"line\"><span class=\"selector-tag\">At</span> <span class=\"selector-tag\">time</span> <span class=\"selector-tag\">1496812266</span><span class=\"selector-class\">.205</span></div><div class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Translation</span>: <span class=\"selector-attr\">[0.000, 0.000, 0.000]</span></div><div class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-tag\">Rotation</span>: <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">Quaternion</span> <span class=\"selector-attr\">[0.000, 0.000, 0.707, 0.707]</span></div><div class=\"line\">            <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">RPY</span> (radian) <span class=\"selector-attr\">[0.000, -0.000, 1.571]</span></div><div class=\"line\">            <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">RPY</span> (degree) <span class=\"selector-attr\">[0.000, -0.000, 90.000]</span></div></pre></td></tr></table></figure></p>\n<p>它是一直输出的，当控制移动 turtle1 时可以看到 turtle2 的坐标是怎么变化的，也就是 turtle2 的坐标是怎么根据 turtle1 的出来的。</p>\n<h1 id=\"rviz\"><a href=\"#rviz\" class=\"headerlink\" title=\"rviz\"></a>rviz</h1><p>使用 <a href=\"\">rviz</a> 可视化工具查看坐标系之间的坐标关系<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun rviz rviz <span class=\"_\">-d</span> `rospack find turtle_tf`/rviz/turtle_rviz.rviz</span></div></pre></td></tr></table></figure></p>\n<p>当通过键盘控制 turtle 运动时，可以在 rviz 中观察到两个 turtle 的位置关系及坐标的变换：<br><img src=\"/2017/06/07/ros-primary-tutorial-12/rviz.jpg\" alt=\"\"><br>远处两个小的坐标系分别为 turtle1 和 turtle2 的坐标系，左下角为系统全局坐标系。本篇先到这里，下一篇进一步学习 tf 坐标变换。<br>参考 <a href=\"http://wiki.ros.org/tf/Tutorials/Introduction%20to%20tf\" target=\"_blank\" rel=\"external\">Introduction tf</a>。</p>"},{"title":"ROS初级十四 tf 配置","date":"2017-06-08T03:15:29.000Z","comments":1,"_content":"# Transform Configuration 变换配置\n变换树是一种偏移，体现了不同坐标系之间的变换和旋转。假设有一个简单的机器人，只有移动底座以及一个位于底座上方的激光扫描仪。因此定义两个坐标系，一个对应激光扫描仪的中心点的坐标系，一个对应于移动底座中心点的坐标系，两个坐标系分别取名为 *base_laser* 和 *base_link* 。\n\n![](ros-primary-tutorial-14/simple_robot.png)\n<!--more-->\n假设我们已经从激光扫描仪获取了一些数据，但这些数据都是以物体到激光扫描仪的距离给出的，即坐标系是 *base_laser*。 现在通过这些数据让机器人避开一些障碍物，如果不将这些激光扫描仪获取的数据从 *base_laser* 转换到 *base_link* 那么机器人在避开障碍物的过程中有可能失败，因此需要将激光扫描仪获取的数据从 *base_laser* 坐标系转换到 *base_link* 坐标系。因此需要知道两个坐标系的关系。看上图，*base_laser* 中心点位于 *base_link* 中心点上方 20cm 处，并向右偏移 10cm 。因此从激光扫描仪到移动底座的转换关系为(x:-0.1m,y:0.0m,z:-0.2m),反过来从移动底座到激光扫描仪的转换关系为(x:0.1m,y:0.0m,z:0.2m)。\n当然这种变换关系我们可以手动去计算保存，需要的时候再调用，但是如果坐标系统增加，变换关系复杂，那么就需要利用 tf 来实现了。使用 tf 来管理坐标转关系，需要将转换关系添加到转换树中，转换树中的每一个节点都对应着一种坐标系，节点之间的连线即是两个坐标相互转换的一种表示，从当前节点到子节点的表示。 tf 利用树结构保证了两个坐标系之间只存在唯一的转换关系，我们假定节点的连线方向从父节点指向子节点。\n\n![](ros-primary-tutorial-14/tf_robot.png)\n\n基于以上描述，我们需要创建两个节点，分别命名为 *base_laser* 以及 *base_link*。为了明确两者之间的关系，需要指定谁是父节点 parent，谁是子节点 child。因为 tf 假设所有的转换都是从 parent 到 child。这里我们选择 *base_link* 为 parent 父节点，*base_laser* 为 child 子节点，将来如果有其他传感器也将作为子节点添加到移动底座。因此转换关系的数学关系为(x:0.1m,y:0.0m,z:0.2m)。知道这个转换关系 *base_link* 就可以推理出 *base_laser* 扫描出的数据跟自己的位置关系，因此可以安全的避开障碍物并规划合理的路径。这个转换实质是将 *base_laser* 坐标系的点转换到 *base_link* 坐标系中去。本篇涉及的代码已上传至 [mygithub](https://github.com/StevenShiChina/robot_setup_tf)。\n# Broadcasting a Transform 广播变换\n创建源码包，添加依赖项：\n   ```\n $ cd ~/catkin_ws/src/\n $ catkin_create_pkg robot_setup_tf roscpp tf geometry_msgs\n   ```\n创建一个节点用于广播变换，我们将节点命名为 tf_broadcaster，在 robot_setup_tf/src 目录下建立文件 tf_broadcaster.cpp，添加以下内容：\n   ```\n #include <ros/ros.h>\n #include <tf/transform_broadcaster.h>\n  \n   int main(int argc, char** argv)\n   {\n       ros::init(argc, argv, \"robot_tf_publisher\");\n       ros::NodeHandle n;\n  \n       ros::Rate r(100);\n      //创建TransformBroadcaster对象，用于发布变换关系\n      tf::TransformBroadcaster broadcaster;\n      //通过TransformBroadcaster来发送转换关系，需要附带5个参数。\n      //第1个参数，我们传递了旋转变换，在两个坐标系的发送的任意旋转，\n      //都必须通过调用btQuaternion.现在情况下，我们不想旋转，\n      //所以我们在调用btQauternion的时候，将pitch,roll,yaw的参数都置0.\n      //第2个参数，btVector3，任何变换过程都需要调用它。\n      //相应的传感器的x方向距离机体基准偏移10cm，z方向20cm。\n      //第3个参数，我们需要给定转换关系携带一个时间戳，我们标记为ros::Time::now()。\n      //第4个参数，我们需要传递parent节点的名字。\n      //第5个参数，传递的是child节点的名字。\n      while(n.ok()){\n          broadcaster.sendTransform(\n              tf::StampedTransform(\n                  tf::Transform(tf::Quaternion(0, 0, 0, 1), tf::Vector3(0.1, 0.0, 0.2)),\n              ros::Time::now(),\"base_link\", \"base_laser\"));\n          r.sleep();\n \n      }\n \n  }\n\n   ```\n通过TransformBroadcaster来发送转换关系，需要附带5个参数。第1个参数，我们传递了旋转变换，在两个坐标系的发送的任意旋转，都必须通过调用 btQuaternion。现在我们不想旋转，所以我们在调用 btQauternion 的时候，将 pitch,roll,yaw 的参数都置0。第2个参数 btVector3，任何变换过程都需要调用它。相应的传感器的 x 方向距离机体基准偏移 10cm，z 方向 20cm。第3个参数，我们需要给定转换关系携带一个时间戳，我们标记为 ros::Time::now()。第4个参数，我们需要传递 parent 节点的名字。第5个参数，传递的是 child 节点的名字。 \n\n# Using a Transform 调用变换 \n上面的节点用于发布转换关系，即将 *base_laser* 的坐标转换为 *base_link* 的坐标，现在我们利用这个转换关系，将从激光扫描仪获取的数据转换到移动底座对应的坐标系中来，即 *base_laser* 到 *base_link* 的转换。需要建立一个节点用于监听这种变换，在 robot_setup_tf/src 目录下新建文件 tf_listener.cpp 并添加以下代码：\n   ```\n #include <ros/ros.h>\n #include <geometry_msgs/PointStamped.h>\n #include <tf/transform_listener.h>\n  \n//创建一个函数，参数为TransformListener,作用为将“base_laser”坐标系的点，变换到“base_link”坐标系中。\n//这个函数将会以ros::Timer定义的周期，作为一个回调函数周期调用,目前周期是1s\n void transformPoint(const tf::TransformListener& listener){\n       \n     \n      //此处，我们创建一个虚拟点，作为geometry_msgs::PointStamped。\n      //消息名字最后的“Stamped”的意义是，它包含了一个头部，\n      //允许我们去把时间戳和消息的frame_id相关联起来。\n      //我们将会设置laser_point的时间戳为ros::time(),\n      //即是允许我们请求TransformListener取得最新的变换数据。\n      //对于header里的frame_id，我们设置为“base_laser”,\n      //因为我们是创建的是扫描仪坐标系里的虚拟点。\n      //最后，我们将会设置具体的虚拟点，比如x:1.0,y:0.2,z:0.0 \n      //we'll create a point in the base_laser frame that we'd like to transform to the base_link frame\n       geometry_msgs::PointStamped laser_point;\n       laser_point.header.frame_id = \"base_laser\";\n  \n      //we'll just use the most recent transform available for our simple example\n      laser_point.header.stamp = ros::Time();\n \n      //just an arbitrary point in space\n      //这里我们给定一个固定点\n      laser_point.point.x = 1.0;\n      laser_point.point.y = 0.2;\n      laser_point.point.z = 0.0;\n \n      //我们已经有了从“base_laser”到“base_link”变换的点数据。\n      //进一步，我们通过TransformListener对象，\n      //调用transformPoint(),填充三个参数来进行数据变换。\n      //第1个参数，代表我们想要变换的目标坐标系的名字。\n      //第2个参数填充需要变换的原始坐标系的点对象，\n      //第3个参数填充，目标坐标系的点对象。\n      //所以，在函数调用后，base_point里存储的信息就是变换后的点坐标。 \n      try{\n          geometry_msgs::PointStamped base_point;\n          listener.transformPoint(\"base_link\", laser_point, base_point);\n \n          ROS_INFO(\"base_laser: (%.2f, %.2f. %.2f) -----> base_link: (%.2f, %.2f, %.2f) at time %.2f\",\n          laser_point.point.x, laser_point.point.y, laser_point.point.z,\n          base_point.point.x, base_point.point.y, base_point.point.z, base_point.header.stamp.toSec());\n      }\n     //显示异常信息\n      catch(tf::TransformException& ex){\n          ROS_ERROR(\"Received an exception trying to transform a point from \\\"base_laser\\\" to \\\"base_link\\\": %s\", ex.what());\n      }\n  }\n \n int main(int argc, char** argv){\n      ros::init(argc, argv, \"robot_tf_listener\");\n      ros::NodeHandle n;\n      //一个TransformListener目标会自动的订阅ROS系统中的变换消息主题，\n      //同时管理所有的该通道上的变换数据\n      tf::TransformListener listener(ros::Duration(10));\n \n      //we'll transform a point once every second\n      ros::Timer timer = n.createTimer(ros::Duration(1.0), boost::bind(&transformPoint, boost::ref(listener)));\n \n      ros::spin();\n \n }\n   ```\n# 编译测试\n在编译之前需要修改 CMakeLists.txt 文件，添加构建依赖项\n   ```\nadd_executable(tf_broadcaster src/tf_broadcaster.cpp)\nadd_executable(tf_listener src/tf_listener.cpp)\ntarget_link_libraries(tf_broadcaster ${catkin_LIBRARIES})\ntarget_link_libraries(tf_listener ${catkin_LIBRARIES})\n   ```\n编译:\n   ```\n $ cd ~/catkin_ws/\n $ catkin_make\n $ rospack profile\n   ```\n开启三个 terminal 分别运行：\n   ```\n $ roscore\n $ rosrun robot_setup_tf tf_broadcaster\n $ rosrun robot_setup_tf tf_listener\n   ```\n在 tf_listener 运行后可以看到如下输出，每隔1秒发布一次：\n\n![](ros-primary-tutorial-14/tf.png)\n\n参考 [RobotSetup/TF](http://wiki.ros.org/cn/navigation/Tutorials/RobotSetup/TF)\n","source":"_posts/ros-primary-tutorial-14.md","raw":"---\ntitle: ROS初级十四 tf 配置\ndate: 2017-06-08 11:15:29\ncategories: ROS\ntags: ROS tf\ncomments: true\n---\n# Transform Configuration 变换配置\n变换树是一种偏移，体现了不同坐标系之间的变换和旋转。假设有一个简单的机器人，只有移动底座以及一个位于底座上方的激光扫描仪。因此定义两个坐标系，一个对应激光扫描仪的中心点的坐标系，一个对应于移动底座中心点的坐标系，两个坐标系分别取名为 *base_laser* 和 *base_link* 。\n\n![](ros-primary-tutorial-14/simple_robot.png)\n<!--more-->\n假设我们已经从激光扫描仪获取了一些数据，但这些数据都是以物体到激光扫描仪的距离给出的，即坐标系是 *base_laser*。 现在通过这些数据让机器人避开一些障碍物，如果不将这些激光扫描仪获取的数据从 *base_laser* 转换到 *base_link* 那么机器人在避开障碍物的过程中有可能失败，因此需要将激光扫描仪获取的数据从 *base_laser* 坐标系转换到 *base_link* 坐标系。因此需要知道两个坐标系的关系。看上图，*base_laser* 中心点位于 *base_link* 中心点上方 20cm 处，并向右偏移 10cm 。因此从激光扫描仪到移动底座的转换关系为(x:-0.1m,y:0.0m,z:-0.2m),反过来从移动底座到激光扫描仪的转换关系为(x:0.1m,y:0.0m,z:0.2m)。\n当然这种变换关系我们可以手动去计算保存，需要的时候再调用，但是如果坐标系统增加，变换关系复杂，那么就需要利用 tf 来实现了。使用 tf 来管理坐标转关系，需要将转换关系添加到转换树中，转换树中的每一个节点都对应着一种坐标系，节点之间的连线即是两个坐标相互转换的一种表示，从当前节点到子节点的表示。 tf 利用树结构保证了两个坐标系之间只存在唯一的转换关系，我们假定节点的连线方向从父节点指向子节点。\n\n![](ros-primary-tutorial-14/tf_robot.png)\n\n基于以上描述，我们需要创建两个节点，分别命名为 *base_laser* 以及 *base_link*。为了明确两者之间的关系，需要指定谁是父节点 parent，谁是子节点 child。因为 tf 假设所有的转换都是从 parent 到 child。这里我们选择 *base_link* 为 parent 父节点，*base_laser* 为 child 子节点，将来如果有其他传感器也将作为子节点添加到移动底座。因此转换关系的数学关系为(x:0.1m,y:0.0m,z:0.2m)。知道这个转换关系 *base_link* 就可以推理出 *base_laser* 扫描出的数据跟自己的位置关系，因此可以安全的避开障碍物并规划合理的路径。这个转换实质是将 *base_laser* 坐标系的点转换到 *base_link* 坐标系中去。本篇涉及的代码已上传至 [mygithub](https://github.com/StevenShiChina/robot_setup_tf)。\n# Broadcasting a Transform 广播变换\n创建源码包，添加依赖项：\n   ```\n $ cd ~/catkin_ws/src/\n $ catkin_create_pkg robot_setup_tf roscpp tf geometry_msgs\n   ```\n创建一个节点用于广播变换，我们将节点命名为 tf_broadcaster，在 robot_setup_tf/src 目录下建立文件 tf_broadcaster.cpp，添加以下内容：\n   ```\n #include <ros/ros.h>\n #include <tf/transform_broadcaster.h>\n  \n   int main(int argc, char** argv)\n   {\n       ros::init(argc, argv, \"robot_tf_publisher\");\n       ros::NodeHandle n;\n  \n       ros::Rate r(100);\n      //创建TransformBroadcaster对象，用于发布变换关系\n      tf::TransformBroadcaster broadcaster;\n      //通过TransformBroadcaster来发送转换关系，需要附带5个参数。\n      //第1个参数，我们传递了旋转变换，在两个坐标系的发送的任意旋转，\n      //都必须通过调用btQuaternion.现在情况下，我们不想旋转，\n      //所以我们在调用btQauternion的时候，将pitch,roll,yaw的参数都置0.\n      //第2个参数，btVector3，任何变换过程都需要调用它。\n      //相应的传感器的x方向距离机体基准偏移10cm，z方向20cm。\n      //第3个参数，我们需要给定转换关系携带一个时间戳，我们标记为ros::Time::now()。\n      //第4个参数，我们需要传递parent节点的名字。\n      //第5个参数，传递的是child节点的名字。\n      while(n.ok()){\n          broadcaster.sendTransform(\n              tf::StampedTransform(\n                  tf::Transform(tf::Quaternion(0, 0, 0, 1), tf::Vector3(0.1, 0.0, 0.2)),\n              ros::Time::now(),\"base_link\", \"base_laser\"));\n          r.sleep();\n \n      }\n \n  }\n\n   ```\n通过TransformBroadcaster来发送转换关系，需要附带5个参数。第1个参数，我们传递了旋转变换，在两个坐标系的发送的任意旋转，都必须通过调用 btQuaternion。现在我们不想旋转，所以我们在调用 btQauternion 的时候，将 pitch,roll,yaw 的参数都置0。第2个参数 btVector3，任何变换过程都需要调用它。相应的传感器的 x 方向距离机体基准偏移 10cm，z 方向 20cm。第3个参数，我们需要给定转换关系携带一个时间戳，我们标记为 ros::Time::now()。第4个参数，我们需要传递 parent 节点的名字。第5个参数，传递的是 child 节点的名字。 \n\n# Using a Transform 调用变换 \n上面的节点用于发布转换关系，即将 *base_laser* 的坐标转换为 *base_link* 的坐标，现在我们利用这个转换关系，将从激光扫描仪获取的数据转换到移动底座对应的坐标系中来，即 *base_laser* 到 *base_link* 的转换。需要建立一个节点用于监听这种变换，在 robot_setup_tf/src 目录下新建文件 tf_listener.cpp 并添加以下代码：\n   ```\n #include <ros/ros.h>\n #include <geometry_msgs/PointStamped.h>\n #include <tf/transform_listener.h>\n  \n//创建一个函数，参数为TransformListener,作用为将“base_laser”坐标系的点，变换到“base_link”坐标系中。\n//这个函数将会以ros::Timer定义的周期，作为一个回调函数周期调用,目前周期是1s\n void transformPoint(const tf::TransformListener& listener){\n       \n     \n      //此处，我们创建一个虚拟点，作为geometry_msgs::PointStamped。\n      //消息名字最后的“Stamped”的意义是，它包含了一个头部，\n      //允许我们去把时间戳和消息的frame_id相关联起来。\n      //我们将会设置laser_point的时间戳为ros::time(),\n      //即是允许我们请求TransformListener取得最新的变换数据。\n      //对于header里的frame_id，我们设置为“base_laser”,\n      //因为我们是创建的是扫描仪坐标系里的虚拟点。\n      //最后，我们将会设置具体的虚拟点，比如x:1.0,y:0.2,z:0.0 \n      //we'll create a point in the base_laser frame that we'd like to transform to the base_link frame\n       geometry_msgs::PointStamped laser_point;\n       laser_point.header.frame_id = \"base_laser\";\n  \n      //we'll just use the most recent transform available for our simple example\n      laser_point.header.stamp = ros::Time();\n \n      //just an arbitrary point in space\n      //这里我们给定一个固定点\n      laser_point.point.x = 1.0;\n      laser_point.point.y = 0.2;\n      laser_point.point.z = 0.0;\n \n      //我们已经有了从“base_laser”到“base_link”变换的点数据。\n      //进一步，我们通过TransformListener对象，\n      //调用transformPoint(),填充三个参数来进行数据变换。\n      //第1个参数，代表我们想要变换的目标坐标系的名字。\n      //第2个参数填充需要变换的原始坐标系的点对象，\n      //第3个参数填充，目标坐标系的点对象。\n      //所以，在函数调用后，base_point里存储的信息就是变换后的点坐标。 \n      try{\n          geometry_msgs::PointStamped base_point;\n          listener.transformPoint(\"base_link\", laser_point, base_point);\n \n          ROS_INFO(\"base_laser: (%.2f, %.2f. %.2f) -----> base_link: (%.2f, %.2f, %.2f) at time %.2f\",\n          laser_point.point.x, laser_point.point.y, laser_point.point.z,\n          base_point.point.x, base_point.point.y, base_point.point.z, base_point.header.stamp.toSec());\n      }\n     //显示异常信息\n      catch(tf::TransformException& ex){\n          ROS_ERROR(\"Received an exception trying to transform a point from \\\"base_laser\\\" to \\\"base_link\\\": %s\", ex.what());\n      }\n  }\n \n int main(int argc, char** argv){\n      ros::init(argc, argv, \"robot_tf_listener\");\n      ros::NodeHandle n;\n      //一个TransformListener目标会自动的订阅ROS系统中的变换消息主题，\n      //同时管理所有的该通道上的变换数据\n      tf::TransformListener listener(ros::Duration(10));\n \n      //we'll transform a point once every second\n      ros::Timer timer = n.createTimer(ros::Duration(1.0), boost::bind(&transformPoint, boost::ref(listener)));\n \n      ros::spin();\n \n }\n   ```\n# 编译测试\n在编译之前需要修改 CMakeLists.txt 文件，添加构建依赖项\n   ```\nadd_executable(tf_broadcaster src/tf_broadcaster.cpp)\nadd_executable(tf_listener src/tf_listener.cpp)\ntarget_link_libraries(tf_broadcaster ${catkin_LIBRARIES})\ntarget_link_libraries(tf_listener ${catkin_LIBRARIES})\n   ```\n编译:\n   ```\n $ cd ~/catkin_ws/\n $ catkin_make\n $ rospack profile\n   ```\n开启三个 terminal 分别运行：\n   ```\n $ roscore\n $ rosrun robot_setup_tf tf_broadcaster\n $ rosrun robot_setup_tf tf_listener\n   ```\n在 tf_listener 运行后可以看到如下输出，每隔1秒发布一次：\n\n![](ros-primary-tutorial-14/tf.png)\n\n参考 [RobotSetup/TF](http://wiki.ros.org/cn/navigation/Tutorials/RobotSetup/TF)\n","slug":"ros-primary-tutorial-14","published":1,"updated":"2017-06-13T05:58:03.472Z","layout":"post","photos":[],"link":"","_id":"cj4hne53d001sw8inqrqx61bu","content":"<h1 id=\"Transform-Configuration-变换配置\"><a href=\"#Transform-Configuration-变换配置\" class=\"headerlink\" title=\"Transform Configuration 变换配置\"></a>Transform Configuration 变换配置</h1><p>变换树是一种偏移，体现了不同坐标系之间的变换和旋转。假设有一个简单的机器人，只有移动底座以及一个位于底座上方的激光扫描仪。因此定义两个坐标系，一个对应激光扫描仪的中心点的坐标系，一个对应于移动底座中心点的坐标系，两个坐标系分别取名为 <em>base_laser</em> 和 <em>base_link</em> 。</p>\n<p><img src=\"/2017/06/08/ros-primary-tutorial-14/simple_robot.png\" alt=\"\"><br><a id=\"more\"></a><br>假设我们已经从激光扫描仪获取了一些数据，但这些数据都是以物体到激光扫描仪的距离给出的，即坐标系是 <em>base_laser</em>。 现在通过这些数据让机器人避开一些障碍物，如果不将这些激光扫描仪获取的数据从 <em>base_laser</em> 转换到 <em>base_link</em> 那么机器人在避开障碍物的过程中有可能失败，因此需要将激光扫描仪获取的数据从 <em>base_laser</em> 坐标系转换到 <em>base_link</em> 坐标系。因此需要知道两个坐标系的关系。看上图，<em>base_laser</em> 中心点位于 <em>base_link</em> 中心点上方 20cm 处，并向右偏移 10cm 。因此从激光扫描仪到移动底座的转换关系为(x:-0.1m,y:0.0m,z:-0.2m),反过来从移动底座到激光扫描仪的转换关系为(x:0.1m,y:0.0m,z:0.2m)。<br>当然这种变换关系我们可以手动去计算保存，需要的时候再调用，但是如果坐标系统增加，变换关系复杂，那么就需要利用 tf 来实现了。使用 tf 来管理坐标转关系，需要将转换关系添加到转换树中，转换树中的每一个节点都对应着一种坐标系，节点之间的连线即是两个坐标相互转换的一种表示，从当前节点到子节点的表示。 tf 利用树结构保证了两个坐标系之间只存在唯一的转换关系，我们假定节点的连线方向从父节点指向子节点。</p>\n<p><img src=\"/2017/06/08/ros-primary-tutorial-14/tf_robot.png\" alt=\"\"></p>\n<p>基于以上描述，我们需要创建两个节点，分别命名为 <em>base_laser</em> 以及 <em>base_link</em>。为了明确两者之间的关系，需要指定谁是父节点 parent，谁是子节点 child。因为 tf 假设所有的转换都是从 parent 到 child。这里我们选择 <em>base_link</em> 为 parent 父节点，<em>base_laser</em> 为 child 子节点，将来如果有其他传感器也将作为子节点添加到移动底座。因此转换关系的数学关系为(x:0.1m,y:0.0m,z:0.2m)。知道这个转换关系 <em>base_link</em> 就可以推理出 <em>base_laser</em> 扫描出的数据跟自己的位置关系，因此可以安全的避开障碍物并规划合理的路径。这个转换实质是将 <em>base_laser</em> 坐标系的点转换到 <em>base_link</em> 坐标系中去。本篇涉及的代码已上传至 <a href=\"https://github.com/StevenShiChina/robot_setup_tf\" target=\"_blank\" rel=\"external\">mygithub</a>。</p>\n<h1 id=\"Broadcasting-a-Transform-广播变换\"><a href=\"#Broadcasting-a-Transform-广播变换\" class=\"headerlink\" title=\"Broadcasting a Transform 广播变换\"></a>Broadcasting a Transform 广播变换</h1><p>创建源码包，添加依赖项：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/src/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_create_pkg robot_setup_tf roscpp tf geometry_msgs</span></div></pre></td></tr></table></figure></p>\n<p>创建一个节点用于广播变换，我们将节点命名为 tf_broadcaster，在 robot_setup_tf/src 目录下建立文件 tf_broadcaster.cpp，添加以下内容：<br>   <figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ros/ros.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tf/transform_broadcaster.h&gt;</span></span></div><div class=\"line\"> </div><div class=\"line\">  int main(int argc, char** argv)</div><div class=\"line\">  &#123;</div><div class=\"line\"><span class=\"symbol\">      ros:</span>:init(argc, argv, <span class=\"string\">\"robot_tf_publisher\"</span>);</div><div class=\"line\"><span class=\"symbol\">      ros:</span>:NodeHandle n;</div><div class=\"line\"><span class=\"symbol\"> </span></div><div class=\"line\">      ros::Rate r(<span class=\"number\">100</span>);</div><div class=\"line\">     <span class=\"comment\">//创建TransformBroadcaster对象，用于发布变换关系</span></div><div class=\"line\"><span class=\"symbol\">     tf:</span>:TransformBroadcaster broadcaster;</div><div class=\"line\">     <span class=\"comment\">//通过TransformBroadcaster来发送转换关系，需要附带5个参数。</span></div><div class=\"line\">     <span class=\"comment\">//第1个参数，我们传递了旋转变换，在两个坐标系的发送的任意旋转，</span></div><div class=\"line\">     <span class=\"comment\">//都必须通过调用btQuaternion.现在情况下，我们不想旋转，</span></div><div class=\"line\">     <span class=\"comment\">//所以我们在调用btQauternion的时候，将pitch,roll,yaw的参数都置0.</span></div><div class=\"line\">     <span class=\"comment\">//第2个参数，btVector3，任何变换过程都需要调用它。</span></div><div class=\"line\">     <span class=\"comment\">//相应的传感器的x方向距离机体基准偏移10cm，z方向20cm。</span></div><div class=\"line\">     <span class=\"comment\">//第3个参数，我们需要给定转换关系携带一个时间戳，我们标记为ros::Time::now()。</span></div><div class=\"line\">     <span class=\"comment\">//第4个参数，我们需要传递parent节点的名字。</span></div><div class=\"line\">     <span class=\"comment\">//第5个参数，传递的是child节点的名字。</span></div><div class=\"line\">     while(n.ok())&#123;</div><div class=\"line\">         broadcaster.sendTransform(</div><div class=\"line\"><span class=\"symbol\">             tf:</span>:StampedTransform(</div><div class=\"line\"><span class=\"symbol\">                 tf:</span>:Transform(<span class=\"symbol\">tf::</span>Quaternion(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>), <span class=\"symbol\">tf::</span>Vector3(<span class=\"number\">0.1</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.2</span>)),</div><div class=\"line\"><span class=\"symbol\">             ros:</span>:<span class=\"symbol\">Time::</span>now(),<span class=\"string\">\"base_link\"</span>, <span class=\"string\">\"base_laser\"</span>));</div><div class=\"line\">         r.sleep();</div><div class=\"line\"></div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>通过TransformBroadcaster来发送转换关系，需要附带5个参数。第1个参数，我们传递了旋转变换，在两个坐标系的发送的任意旋转，都必须通过调用 btQuaternion。现在我们不想旋转，所以我们在调用 btQauternion 的时候，将 pitch,roll,yaw 的参数都置0。第2个参数 btVector3，任何变换过程都需要调用它。相应的传感器的 x 方向距离机体基准偏移 10cm，z 方向 20cm。第3个参数，我们需要给定转换关系携带一个时间戳，我们标记为 ros::Time::now()。第4个参数，我们需要传递 parent 节点的名字。第5个参数，传递的是 child 节点的名字。 </p>\n<h1 id=\"Using-a-Transform-调用变换\"><a href=\"#Using-a-Transform-调用变换\" class=\"headerlink\" title=\"Using a Transform 调用变换\"></a>Using a Transform 调用变换</h1><p>上面的节点用于发布转换关系，即将 <em>base_laser</em> 的坐标转换为 <em>base_link</em> 的坐标，现在我们利用这个转换关系，将从激光扫描仪获取的数据转换到移动底座对应的坐标系中来，即 <em>base_laser</em> 到 <em>base_link</em> 的转换。需要建立一个节点用于监听这种变换，在 robot_setup_tf/src 目录下新建文件 tf_listener.cpp 并添加以下代码：<br>   <figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ros/ros.h&gt;</span></span></div><div class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;geometry_msgs/PointStamped.h&gt;</span></span></div><div class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tf/transform_listener.h&gt;</span></span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//创建一个函数，参数为TransformListener,作用为将“base_laser”坐标系的点，变换到“base_link”坐标系中。</span></div><div class=\"line\"><span class=\"comment\">//这个函数将会以ros::Timer定义的周期，作为一个回调函数周期调用,目前周期是1s</span></div><div class=\"line\"> void transformPoint(const <span class=\"symbol\">tf::</span>TransformListener&amp; listener)&#123;</div><div class=\"line\">       </div><div class=\"line\">     </div><div class=\"line\">      <span class=\"comment\">//此处，我们创建一个虚拟点，作为geometry_msgs::PointStamped。</span></div><div class=\"line\">      <span class=\"comment\">//消息名字最后的“Stamped”的意义是，它包含了一个头部，</span></div><div class=\"line\">      <span class=\"comment\">//允许我们去把时间戳和消息的frame_id相关联起来。</span></div><div class=\"line\">      <span class=\"comment\">//我们将会设置laser_point的时间戳为ros::time(),</span></div><div class=\"line\">      <span class=\"comment\">//即是允许我们请求TransformListener取得最新的变换数据。</span></div><div class=\"line\">      <span class=\"comment\">//对于header里的frame_id，我们设置为“base_laser”,</span></div><div class=\"line\">      <span class=\"comment\">//因为我们是创建的是扫描仪坐标系里的虚拟点。</span></div><div class=\"line\">      <span class=\"comment\">//最后，我们将会设置具体的虚拟点，比如x:1.0,y:0.2,z:0.0 </span></div><div class=\"line\">      <span class=\"comment\">//we'll create a point in the base_laser frame that we'd like to transform to the base_link frame</span></div><div class=\"line\"><span class=\"symbol\">       geometry_msgs:</span>:PointStamped laser_point;</div><div class=\"line\">       laser_point.header.frame_id = <span class=\"string\">\"base_laser\"</span>;</div><div class=\"line\">  </div><div class=\"line\">      <span class=\"comment\">//we'll just use the most recent transform available for our simple example</span></div><div class=\"line\">      laser_point.header.stamp = <span class=\"symbol\">ros::</span>Time();</div><div class=\"line\"> </div><div class=\"line\">      <span class=\"comment\">//just an arbitrary point in space</span></div><div class=\"line\">      <span class=\"comment\">//这里我们给定一个固定点</span></div><div class=\"line\">      laser_point.point.x = <span class=\"number\">1.0</span>;</div><div class=\"line\">      laser_point.point.y = <span class=\"number\">0.2</span>;</div><div class=\"line\">      laser_point.point.z = <span class=\"number\">0.0</span>;</div><div class=\"line\"> </div><div class=\"line\">      <span class=\"comment\">//我们已经有了从“base_laser”到“base_link”变换的点数据。</span></div><div class=\"line\">      <span class=\"comment\">//进一步，我们通过TransformListener对象，</span></div><div class=\"line\">      <span class=\"comment\">//调用transformPoint(),填充三个参数来进行数据变换。</span></div><div class=\"line\">      <span class=\"comment\">//第1个参数，代表我们想要变换的目标坐标系的名字。</span></div><div class=\"line\">      <span class=\"comment\">//第2个参数填充需要变换的原始坐标系的点对象，</span></div><div class=\"line\">      <span class=\"comment\">//第3个参数填充，目标坐标系的点对象。</span></div><div class=\"line\">      <span class=\"comment\">//所以，在函数调用后，base_point里存储的信息就是变换后的点坐标。 </span></div><div class=\"line\">      try&#123;</div><div class=\"line\"><span class=\"symbol\">          geometry_msgs:</span>:PointStamped base_point;</div><div class=\"line\">          listener.transformPoint(<span class=\"string\">\"base_link\"</span>, laser_point, base_point);</div><div class=\"line\"> </div><div class=\"line\">          ROS_INFO(<span class=\"string\">\"base_laser: (%.2f, %.2f. %.2f) -----&gt; base_link: (%.2f, %.2f, %.2f) at time %.2f\"</span>,</div><div class=\"line\">          laser_point.point.x, laser_point.point.y, laser_point.point.z,</div><div class=\"line\">          base_point.point.x, base_point.point.y, base_point.point.z, base_point.header.stamp.toSec());</div><div class=\"line\">      &#125;</div><div class=\"line\">     <span class=\"comment\">//显示异常信息</span></div><div class=\"line\">      catch(<span class=\"symbol\">tf::</span>TransformException&amp; ex)&#123;</div><div class=\"line\">          ROS_ERROR(<span class=\"string\">\"Received an exception trying to transform a point from \\\"base_laser\\\" to \\\"base_link\\\": %s\"</span>, ex.what());</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\"> int main(int argc, char** argv)&#123;</div><div class=\"line\"><span class=\"symbol\">      ros:</span>:init(argc, argv, <span class=\"string\">\"robot_tf_listener\"</span>);</div><div class=\"line\"><span class=\"symbol\">      ros:</span>:NodeHandle n;</div><div class=\"line\">      <span class=\"comment\">//一个TransformListener目标会自动的订阅ROS系统中的变换消息主题，</span></div><div class=\"line\">      <span class=\"comment\">//同时管理所有的该通道上的变换数据</span></div><div class=\"line\"><span class=\"symbol\">      tf:</span>:TransformListener listener(<span class=\"symbol\">ros::</span>Duration(<span class=\"number\">10</span>));</div><div class=\"line\"> </div><div class=\"line\">      <span class=\"comment\">//we'll transform a point once every second</span></div><div class=\"line\"><span class=\"symbol\">      ros:</span>:Timer timer = n.createTimer(<span class=\"symbol\">ros::</span>Duration(<span class=\"number\">1.0</span>), <span class=\"symbol\">boost::</span>bind(&amp;transformPoint, <span class=\"symbol\">boost::</span>ref(listener)));</div><div class=\"line\"><span class=\"symbol\"> </span></div><div class=\"line\">      ros::spin();</div><div class=\"line\"> </div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"编译测试\"><a href=\"#编译测试\" class=\"headerlink\" title=\"编译测试\"></a>编译测试</h1><p>在编译之前需要修改 CMakeLists.txt 文件，添加构建依赖项<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(tf_broadcaster src/tf_broadcaster.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(tf_listener src/tf_listener.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(tf_listener $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>\n<p>编译:<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rospack profile</span></div></pre></td></tr></table></figure></p>\n<p>开启三个 terminal 分别运行：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscore</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun robot_setup_tf tf_broadcaster</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun robot_setup_tf tf_listener</span></div></pre></td></tr></table></figure></p>\n<p>在 tf_listener 运行后可以看到如下输出，每隔1秒发布一次：</p>\n<p><img src=\"/2017/06/08/ros-primary-tutorial-14/tf.png\" alt=\"\"></p>\n<p>参考 <a href=\"http://wiki.ros.org/cn/navigation/Tutorials/RobotSetup/TF\" target=\"_blank\" rel=\"external\">RobotSetup/TF</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Transform-Configuration-变换配置\"><a href=\"#Transform-Configuration-变换配置\" class=\"headerlink\" title=\"Transform Configuration 变换配置\"></a>Transform Configuration 变换配置</h1><p>变换树是一种偏移，体现了不同坐标系之间的变换和旋转。假设有一个简单的机器人，只有移动底座以及一个位于底座上方的激光扫描仪。因此定义两个坐标系，一个对应激光扫描仪的中心点的坐标系，一个对应于移动底座中心点的坐标系，两个坐标系分别取名为 <em>base_laser</em> 和 <em>base_link</em> 。</p>\n<p><img src=\"/2017/06/08/ros-primary-tutorial-14/simple_robot.png\" alt=\"\"><br></p>","more":"<br>假设我们已经从激光扫描仪获取了一些数据，但这些数据都是以物体到激光扫描仪的距离给出的，即坐标系是 <em>base_laser</em>。 现在通过这些数据让机器人避开一些障碍物，如果不将这些激光扫描仪获取的数据从 <em>base_laser</em> 转换到 <em>base_link</em> 那么机器人在避开障碍物的过程中有可能失败，因此需要将激光扫描仪获取的数据从 <em>base_laser</em> 坐标系转换到 <em>base_link</em> 坐标系。因此需要知道两个坐标系的关系。看上图，<em>base_laser</em> 中心点位于 <em>base_link</em> 中心点上方 20cm 处，并向右偏移 10cm 。因此从激光扫描仪到移动底座的转换关系为(x:-0.1m,y:0.0m,z:-0.2m),反过来从移动底座到激光扫描仪的转换关系为(x:0.1m,y:0.0m,z:0.2m)。<br>当然这种变换关系我们可以手动去计算保存，需要的时候再调用，但是如果坐标系统增加，变换关系复杂，那么就需要利用 tf 来实现了。使用 tf 来管理坐标转关系，需要将转换关系添加到转换树中，转换树中的每一个节点都对应着一种坐标系，节点之间的连线即是两个坐标相互转换的一种表示，从当前节点到子节点的表示。 tf 利用树结构保证了两个坐标系之间只存在唯一的转换关系，我们假定节点的连线方向从父节点指向子节点。<p></p>\n<p><img src=\"/2017/06/08/ros-primary-tutorial-14/tf_robot.png\" alt=\"\"></p>\n<p>基于以上描述，我们需要创建两个节点，分别命名为 <em>base_laser</em> 以及 <em>base_link</em>。为了明确两者之间的关系，需要指定谁是父节点 parent，谁是子节点 child。因为 tf 假设所有的转换都是从 parent 到 child。这里我们选择 <em>base_link</em> 为 parent 父节点，<em>base_laser</em> 为 child 子节点，将来如果有其他传感器也将作为子节点添加到移动底座。因此转换关系的数学关系为(x:0.1m,y:0.0m,z:0.2m)。知道这个转换关系 <em>base_link</em> 就可以推理出 <em>base_laser</em> 扫描出的数据跟自己的位置关系，因此可以安全的避开障碍物并规划合理的路径。这个转换实质是将 <em>base_laser</em> 坐标系的点转换到 <em>base_link</em> 坐标系中去。本篇涉及的代码已上传至 <a href=\"https://github.com/StevenShiChina/robot_setup_tf\" target=\"_blank\" rel=\"external\">mygithub</a>。</p>\n<h1 id=\"Broadcasting-a-Transform-广播变换\"><a href=\"#Broadcasting-a-Transform-广播变换\" class=\"headerlink\" title=\"Broadcasting a Transform 广播变换\"></a>Broadcasting a Transform 广播变换</h1><p>创建源码包，添加依赖项：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/src/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_create_pkg robot_setup_tf roscpp tf geometry_msgs</span></div></pre></td></tr></table></figure></p>\n<p>创建一个节点用于广播变换，我们将节点命名为 tf_broadcaster，在 robot_setup_tf/src 目录下建立文件 tf_broadcaster.cpp，添加以下内容：<br>   <figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ros/ros.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tf/transform_broadcaster.h&gt;</span></span></div><div class=\"line\"> </div><div class=\"line\">  int main(int argc, char** argv)</div><div class=\"line\">  &#123;</div><div class=\"line\"><span class=\"symbol\">      ros:</span>:init(argc, argv, <span class=\"string\">\"robot_tf_publisher\"</span>);</div><div class=\"line\"><span class=\"symbol\">      ros:</span>:NodeHandle n;</div><div class=\"line\"><span class=\"symbol\"> </span></div><div class=\"line\">      ros::Rate r(<span class=\"number\">100</span>);</div><div class=\"line\">     <span class=\"comment\">//创建TransformBroadcaster对象，用于发布变换关系</span></div><div class=\"line\"><span class=\"symbol\">     tf:</span>:TransformBroadcaster broadcaster;</div><div class=\"line\">     <span class=\"comment\">//通过TransformBroadcaster来发送转换关系，需要附带5个参数。</span></div><div class=\"line\">     <span class=\"comment\">//第1个参数，我们传递了旋转变换，在两个坐标系的发送的任意旋转，</span></div><div class=\"line\">     <span class=\"comment\">//都必须通过调用btQuaternion.现在情况下，我们不想旋转，</span></div><div class=\"line\">     <span class=\"comment\">//所以我们在调用btQauternion的时候，将pitch,roll,yaw的参数都置0.</span></div><div class=\"line\">     <span class=\"comment\">//第2个参数，btVector3，任何变换过程都需要调用它。</span></div><div class=\"line\">     <span class=\"comment\">//相应的传感器的x方向距离机体基准偏移10cm，z方向20cm。</span></div><div class=\"line\">     <span class=\"comment\">//第3个参数，我们需要给定转换关系携带一个时间戳，我们标记为ros::Time::now()。</span></div><div class=\"line\">     <span class=\"comment\">//第4个参数，我们需要传递parent节点的名字。</span></div><div class=\"line\">     <span class=\"comment\">//第5个参数，传递的是child节点的名字。</span></div><div class=\"line\">     while(n.ok())&#123;</div><div class=\"line\">         broadcaster.sendTransform(</div><div class=\"line\"><span class=\"symbol\">             tf:</span>:StampedTransform(</div><div class=\"line\"><span class=\"symbol\">                 tf:</span>:Transform(<span class=\"symbol\">tf::</span>Quaternion(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>), <span class=\"symbol\">tf::</span>Vector3(<span class=\"number\">0.1</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.2</span>)),</div><div class=\"line\"><span class=\"symbol\">             ros:</span>:<span class=\"symbol\">Time::</span>now(),<span class=\"string\">\"base_link\"</span>, <span class=\"string\">\"base_laser\"</span>));</div><div class=\"line\">         r.sleep();</div><div class=\"line\"></div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>通过TransformBroadcaster来发送转换关系，需要附带5个参数。第1个参数，我们传递了旋转变换，在两个坐标系的发送的任意旋转，都必须通过调用 btQuaternion。现在我们不想旋转，所以我们在调用 btQauternion 的时候，将 pitch,roll,yaw 的参数都置0。第2个参数 btVector3，任何变换过程都需要调用它。相应的传感器的 x 方向距离机体基准偏移 10cm，z 方向 20cm。第3个参数，我们需要给定转换关系携带一个时间戳，我们标记为 ros::Time::now()。第4个参数，我们需要传递 parent 节点的名字。第5个参数，传递的是 child 节点的名字。 </p>\n<h1 id=\"Using-a-Transform-调用变换\"><a href=\"#Using-a-Transform-调用变换\" class=\"headerlink\" title=\"Using a Transform 调用变换\"></a>Using a Transform 调用变换</h1><p>上面的节点用于发布转换关系，即将 <em>base_laser</em> 的坐标转换为 <em>base_link</em> 的坐标，现在我们利用这个转换关系，将从激光扫描仪获取的数据转换到移动底座对应的坐标系中来，即 <em>base_laser</em> 到 <em>base_link</em> 的转换。需要建立一个节点用于监听这种变换，在 robot_setup_tf/src 目录下新建文件 tf_listener.cpp 并添加以下代码：<br>   <figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ros/ros.h&gt;</span></span></div><div class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;geometry_msgs/PointStamped.h&gt;</span></span></div><div class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tf/transform_listener.h&gt;</span></span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//创建一个函数，参数为TransformListener,作用为将“base_laser”坐标系的点，变换到“base_link”坐标系中。</span></div><div class=\"line\"><span class=\"comment\">//这个函数将会以ros::Timer定义的周期，作为一个回调函数周期调用,目前周期是1s</span></div><div class=\"line\"> void transformPoint(const <span class=\"symbol\">tf::</span>TransformListener&amp; listener)&#123;</div><div class=\"line\">       </div><div class=\"line\">     </div><div class=\"line\">      <span class=\"comment\">//此处，我们创建一个虚拟点，作为geometry_msgs::PointStamped。</span></div><div class=\"line\">      <span class=\"comment\">//消息名字最后的“Stamped”的意义是，它包含了一个头部，</span></div><div class=\"line\">      <span class=\"comment\">//允许我们去把时间戳和消息的frame_id相关联起来。</span></div><div class=\"line\">      <span class=\"comment\">//我们将会设置laser_point的时间戳为ros::time(),</span></div><div class=\"line\">      <span class=\"comment\">//即是允许我们请求TransformListener取得最新的变换数据。</span></div><div class=\"line\">      <span class=\"comment\">//对于header里的frame_id，我们设置为“base_laser”,</span></div><div class=\"line\">      <span class=\"comment\">//因为我们是创建的是扫描仪坐标系里的虚拟点。</span></div><div class=\"line\">      <span class=\"comment\">//最后，我们将会设置具体的虚拟点，比如x:1.0,y:0.2,z:0.0 </span></div><div class=\"line\">      <span class=\"comment\">//we'll create a point in the base_laser frame that we'd like to transform to the base_link frame</span></div><div class=\"line\"><span class=\"symbol\">       geometry_msgs:</span>:PointStamped laser_point;</div><div class=\"line\">       laser_point.header.frame_id = <span class=\"string\">\"base_laser\"</span>;</div><div class=\"line\">  </div><div class=\"line\">      <span class=\"comment\">//we'll just use the most recent transform available for our simple example</span></div><div class=\"line\">      laser_point.header.stamp = <span class=\"symbol\">ros::</span>Time();</div><div class=\"line\"> </div><div class=\"line\">      <span class=\"comment\">//just an arbitrary point in space</span></div><div class=\"line\">      <span class=\"comment\">//这里我们给定一个固定点</span></div><div class=\"line\">      laser_point.point.x = <span class=\"number\">1.0</span>;</div><div class=\"line\">      laser_point.point.y = <span class=\"number\">0.2</span>;</div><div class=\"line\">      laser_point.point.z = <span class=\"number\">0.0</span>;</div><div class=\"line\"> </div><div class=\"line\">      <span class=\"comment\">//我们已经有了从“base_laser”到“base_link”变换的点数据。</span></div><div class=\"line\">      <span class=\"comment\">//进一步，我们通过TransformListener对象，</span></div><div class=\"line\">      <span class=\"comment\">//调用transformPoint(),填充三个参数来进行数据变换。</span></div><div class=\"line\">      <span class=\"comment\">//第1个参数，代表我们想要变换的目标坐标系的名字。</span></div><div class=\"line\">      <span class=\"comment\">//第2个参数填充需要变换的原始坐标系的点对象，</span></div><div class=\"line\">      <span class=\"comment\">//第3个参数填充，目标坐标系的点对象。</span></div><div class=\"line\">      <span class=\"comment\">//所以，在函数调用后，base_point里存储的信息就是变换后的点坐标。 </span></div><div class=\"line\">      try&#123;</div><div class=\"line\"><span class=\"symbol\">          geometry_msgs:</span>:PointStamped base_point;</div><div class=\"line\">          listener.transformPoint(<span class=\"string\">\"base_link\"</span>, laser_point, base_point);</div><div class=\"line\"> </div><div class=\"line\">          ROS_INFO(<span class=\"string\">\"base_laser: (%.2f, %.2f. %.2f) -----&gt; base_link: (%.2f, %.2f, %.2f) at time %.2f\"</span>,</div><div class=\"line\">          laser_point.point.x, laser_point.point.y, laser_point.point.z,</div><div class=\"line\">          base_point.point.x, base_point.point.y, base_point.point.z, base_point.header.stamp.toSec());</div><div class=\"line\">      &#125;</div><div class=\"line\">     <span class=\"comment\">//显示异常信息</span></div><div class=\"line\">      catch(<span class=\"symbol\">tf::</span>TransformException&amp; ex)&#123;</div><div class=\"line\">          ROS_ERROR(<span class=\"string\">\"Received an exception trying to transform a point from \\\"base_laser\\\" to \\\"base_link\\\": %s\"</span>, ex.what());</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\"> int main(int argc, char** argv)&#123;</div><div class=\"line\"><span class=\"symbol\">      ros:</span>:init(argc, argv, <span class=\"string\">\"robot_tf_listener\"</span>);</div><div class=\"line\"><span class=\"symbol\">      ros:</span>:NodeHandle n;</div><div class=\"line\">      <span class=\"comment\">//一个TransformListener目标会自动的订阅ROS系统中的变换消息主题，</span></div><div class=\"line\">      <span class=\"comment\">//同时管理所有的该通道上的变换数据</span></div><div class=\"line\"><span class=\"symbol\">      tf:</span>:TransformListener listener(<span class=\"symbol\">ros::</span>Duration(<span class=\"number\">10</span>));</div><div class=\"line\"> </div><div class=\"line\">      <span class=\"comment\">//we'll transform a point once every second</span></div><div class=\"line\"><span class=\"symbol\">      ros:</span>:Timer timer = n.createTimer(<span class=\"symbol\">ros::</span>Duration(<span class=\"number\">1.0</span>), <span class=\"symbol\">boost::</span>bind(&amp;transformPoint, <span class=\"symbol\">boost::</span>ref(listener)));</div><div class=\"line\"><span class=\"symbol\"> </span></div><div class=\"line\">      ros::spin();</div><div class=\"line\"> </div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"编译测试\"><a href=\"#编译测试\" class=\"headerlink\" title=\"编译测试\"></a>编译测试</h1><p>在编译之前需要修改 CMakeLists.txt 文件，添加构建依赖项<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(tf_broadcaster src/tf_broadcaster.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(tf_listener src/tf_listener.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(tf_listener $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>\n<p>编译:<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rospack profile</span></div></pre></td></tr></table></figure></p>\n<p>开启三个 terminal 分别运行：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscore</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun robot_setup_tf tf_broadcaster</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun robot_setup_tf tf_listener</span></div></pre></td></tr></table></figure></p>\n<p>在 tf_listener 运行后可以看到如下输出，每隔1秒发布一次：</p>\n<p><img src=\"/2017/06/08/ros-primary-tutorial-14/tf.png\" alt=\"\"></p>\n<p>参考 <a href=\"http://wiki.ros.org/cn/navigation/Tutorials/RobotSetup/TF\" target=\"_blank\" rel=\"external\">RobotSetup/TF</a></p>"},{"title":"ROS初级十三 理解ROS坐标转换下","date":"2017-06-07T05:44:30.000Z","comments":1,"_content":"本篇继续学习 [tf](http://wiki.ros.org/tf)。通过编写一个简单的 tf broadcaster 以及 tf listener 来更进一步的理解坐标变换。本篇涉及到的代码已上传到 [mygithub](https://github.com/StevenShiChina/learning_tf)。\n# tf broadcaster\ntf broadcaster 用于广播坐标变换，任何节点都可以监听该变换。先创建一个程序包，名字随心，这里我们命名为 *learning_tf*,包的依赖项为 *roscpp rospy turtlesim*\n<!--more-->\n   ```\n $ cd ~/catkin_ws/src/\n $ catkin_create_pkg learning_tf roscpp rospy turtlesim\n   ```\n\n为了便于使用 *roscd* 我们先编译一下这个程序包:\n\n   ```\n $ cd ~/catkin_ws/\n $ catkin_make\n $ rospack profile\n   ```\n\n此时使用 roscd 输入lear 再按 TAB 即可出现 *learning_tf/*。进入 *learning_tf/src* 目录下，新建文件 *turtle_tf_broadcaster.cpp* 添加如下代码：\n\n   ```\n #include <ros/ros.h>\n #include <tf/transform_broadcaster.h> \n #include <turtlesim/Pose.h>\n \n std::string turtle_name;\n \n \n \n void poseCallback(const turtlesim::PoseConstPtr& msg)\n {\n   //创建一个 TransformBroadcaster 对象用于发布坐标变换\n   static tf::TransformBroadcaster br;\n   \n   //创建Transform 对象并将2D的坐标转换为3D坐标系\n   tf::Transform transform;\n   transform.setOrigin( tf::Vector3(msg->x, msg->y, 0.0) );//获取 x y 坐标，不需要Z坐标 \n  \n   tf::Quaternion q;\n   q.setRPY(0, 0, msg->theta);// x y轴旋转为0因为在地面运动只能绕Z轴的旋转\n   transform.setRotation(q);//\n   //发布坐标变换 ros::Time::now()为转换携带的时间戳 传递父节点的名字 world 子节点为turtle_name\n   br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), \"world\", turtle_name));\n }\n \n int main(int argc, char** argv)\n {\n   ros::init(argc, argv, \"my_tf_broadcaster\");\n\n   if (argc != 2){ROS_ERROR(\"need turtle name as argument\"); return -1;};\n  \n   turtle_name = argv[1];\n \n   ros::NodeHandle node;\n  //订阅 turtle_name 的 turtleX/pose 话题，当turtle位置改变时调用回调函数 poseCallback\n   ros::Subscriber sub = node.subscribe(turtle_name+\"/pose\", 10, &poseCallback);\n \n   ros::spin();\n   return 0;\n  };\n\n   ```\n代码的整个流程为：\n1 订阅 turtleX/pose 位置话题\n2 发布坐标变换到tf树\n修改CMakeLists.txt:\n\n   ```\n add_executable(turtle_tf_broadcaster src/turtle_tf_broadcaster.cpp)\n target_link_libraries(turtle_tf_broadcaster ${catkin_LIBRARIES})\n   ```\n\n编译：\n\n   ```\n $ cd ~/catkin_ws/\n $ catkin_make\n   ```\n\n编译报错：\n\n   ```\nLinking CXX executable /home/steven/catkin_ws/devel/lib/learning_tf/turtle_tf_broadcaster\nCMakeFiles/turtle_tf_broadcaster.dir/src/turtle_tf_broadcaster.cpp.o: In function `poseCallback(boost::shared_ptr<turtlesim::Pose_<std::allocator<void> > const> const&)':\nturtle_tf_broadcaster.cpp:(.text+0x39): undefined reference to `tf::TransformBroadcaster::TransformBroadcaster()'\nturtle_tf_broadcaster.cpp:(.text+0x1a3): undefined reference to `tf::TransformBroadcaster::sendTransform(tf::StampedTransform const&)'\ncollect2: ld returned 1 exit status\nmake[2]: *** [/home/steven/catkin_ws/devel/lib/learning_tf/turtle_tf_broadcaster] Error 1\nmake[1]: *** [learning_tf/CMakeFiles/turtle_tf_broadcaster.dir/all] Error 2\nmake: *** [all] Error 2\nInvoking \"make -j1 -l1\" failed\n   ```\n\n忘记了在 CMakeLists.txt 文件需要添加 tf 包的依赖：\n\n   ```\nfind_package(catkin REQUIRED COMPONENTS\n    roscpp\n    rospy\n    turtlesim\n    tf\n  )\n   ```\n\n编译完成后在 ~/catkin_ws/devel/lib/learning_tf/ 目录下会看到编译好的可执行文件 turtle_tf_broadcaster\n接下来创建一个 launch 文件：\n\n   ```\n$ mkdir -p ~/catkin_ws/src/learning_tf/launch\n$ roscd learning_tf/launch/\n$ touch start_demo.launch\n   ```\n\n输入以下内容：\n\n   ```\n<launch>\n    <!-- Turtlesim Node-->\n    <node pkg=\"turtlesim\" type=\"turtlesim_node\" name=\"sim\"/>\n\n    <node pkg=\"turtlesim\" type=\"turtle_teleop_key\" name=\"teleop\" output=\"screen\"/>\n    <!-- Axes -->\n    <param name=\"scale_linear\" value=\"2\" type=\"double\"/>\n    <param name=\"scale_angular\" value=\"2\" type=\"double\"/>\n\n    <node pkg=\"learning_tf\" type=\"turtle_tf_broadcaster\"\n          args=\"/turtle1\" name=\"turtle1_tf_broadcaster\" />\n    <node pkg=\"learning_tf\" type=\"turtle_tf_broadcaster\"\n          args=\"/turtle2\" name=\"turtle2_tf_broadcaster\" />\n\n  </launch>\n   ```\n\nlaunch文件启动了4个节点，分别是：\n 1 turtlesim 包中的类型为 turtlesim_node 名称为 sim 的节点；\n 2 turtlesim 包中的类型为 turtle_teleop_key 名称为 teleop 的节点；\n 3 learning_tf 包中类型为 turtle_tf_broadcaster 名称为 turtle1_tf_broadcaster 的节点；\n 4 learning_tf 包中类型为 turtle_tf_broadcaster 名称为 turtle2_tf_broadcaster 的节点。\n\n# tf listener\n前面编写了broadcaster 用于发布 turtle 的坐标变换到 tf树，下面来编写 listener 来监听坐标的变换。在 learning_tf/src 目录下新建文件 turtle_tf_listener.cpp 添加如下代码:\n\n   ```\n #include <ros/ros.h>\n #include <tf/transform_listener.h> //接收转换\n #include <geometry_msgs/Twist.h> //消息\n #include <turtlesim/Spawn.h> //再生\n  \n int main(int argc, char** argv){\n\n     ros::init(argc, argv, \"my_tf_listener\");//节点名称\n  \n     ros::NodeHandle node;//节点\n \n     //再生服务\n     ros::service::waitForService(\"spawn\");\n     ros::ServiceClient add_turtle =\n      node.serviceClient<turtlesim::Spawn>(\"spawn\");\n     turtlesim::Spawn srv;\n     add_turtle.call(srv);\n \n     //通过话题 turtle2/cmd_vel 发布 geometry_msgs::Twist 类型消息\n     ros::Publisher turtle_vel = \n     node.advertise<geometry_msgs::Twist>(\"turtle2/cmd_vel\", 10);\n     \n     //创建接收对象，一旦TransformListener创建，就开始接收tf转换消息\n     tf::TransformListener listener; \n \n     ros::Rate rate(10.0);\n     while (node.ok()){\n       tf::StampedTransform transform;\n       //from turtle2 到 trutle1 即当 turtle2移动时,turtle1跟随 turtle2 运动\n       try{\n         listener.lookupTransform(\"/turtle2\", \"/turtle1\",\n                                  ros::Time(0), transform);\n       }\n       catch (tf::TransformException &ex) {\n         ROS_ERROR(\"%s\",ex.what());\n         ros::Duration(1.0).sleep();\n         continue;\n       }\n       // 计算新的角速度和线速度\n       geometry_msgs::Twist vel_msg;\n       vel_msg.angular.z = 4.0 * atan2(transform.getOrigin().y(),\n                                       transform.getOrigin().x());\n       vel_msg.linear.x = 0.5 * sqrt(pow(transform.getOrigin().x(), 2) +\n                                     pow(transform.getOrigin().y(), 2));\n       turtle_vel.publish(vel_msg);\n  \n       rate.sleep();\n     }\n     return 0;\n   };\n\n\n   ```\n在CMakeLists.txt中添加依赖项：\n   ```\nadd_executable(turtle_tf_listener src/turtle_tf_listener.cpp)\ntarget_link_libraries(turtle_tf_listener ${catkin_LIBRARIES})\n   ```\n编译如果提示错误：\n   ```\nturtle_tf_listener.cpp:3:32: fatal error: \nturtlesim/Velocity.h: No such file or directory compilation terminated.\n   ```\n则文件使用的为之前版本，应该选择下载 hydro 版本的 参考 [Writing listener C++](http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20listener%20%28C%2B%2B%29)\n之后修改start_demo.launch 将listener节点添加进去：\n   ```\n<node pkg=\"learning_tf\" type=\"turtle_tf_listener\" name=\"listener\" />\n   ```\n# 测试\n停止之前的launch 文件，然后启动 start_demo.launch：\n   ```\n$ roslaunch learning_tf start_demo.launch\n   ```\n可以通过以下命令查看坐标广播信息：\n   ```\n$ rosrun tf tf_echo /world /turtle1\n   ```\n\n错误\n\n运行 start_demo.launch 时提示错误* [ERROR] [1496887441.589043649]: \"turtle2\" passed to lookupTransform argument target_frame does not exist. *  但是当控制一个 turtle 移动时另外一个也可以跟随移动，参照 http://answers.ros.org/question/148121/something-wrong-with-tf-tutorial/ 的修改，在函数 listener.lookupTransform 的前面添加 listener.waitForTransform(\"/turtle2\", \"/turtle1\", ros::Time(0), ros::Duration(3.0));然后重新编译，再次运行错误消失。运行 rviz 可以看到两个 turtle 之间的运动坐标变换\n   ```\n $ rosrun rviz rviz -d `rospack find turtle_tf`/rviz/turtle_rviz.rviz\n   ```\n![](ros-primary-tutorial-13/startdemo.jpg)\n\n# adding a frame\n通常情况下，系统中有一个全局坐标系 world ，当添加一个激光扫描仪，或者再添加一个双目摄像头，那么此时就需要在系统中添加两个坐标参考系，利用 tf 让系统帮我们将激光扫描仪的数据或双目摄像头的数据转换到全局坐标系中去，因此添加一个坐标系是非常必要的。\ntf 以树形结构维护和保存多个参考系坐标，在这个结构中不能有闭环产生，这就意味着，坐标参考系树形结构中只能有一个父参考系 parent,它可以有多个子参考坐标系 child。下面图中 tf 树形结构中有三个参考坐标系，world，turtle1 和 turtle2。 并且 turtle1 和 trutle2 都是 world 的子参考坐标系，如果再添加一个新的坐标参考系 carrot1 它必须是以上三个参考坐标系的子参考系。\n\n![](ros-primary-tutorial-13/tree.png)\n\n接着前面，我们在 turtle1 基础上添加一个参考坐标系 carrot1, 它的父参考系是 turtle1。在 learning_tf/src 目录下建立文件 frame_tf_broadcaster.cpp，添加以下代码：\n   ```\n#include <ros/ros.h>\n#include <tf/transform_broadcaster.h>\n\nint main(int argc, char** argv)\n{\n\tros::init(argc, argv, \"my_tf_broadcaster\");\n\tros::NodeHandle node;\n\n\ttf::TransformBroadcaster br;\n\ttf::Transform transform;\n  \n\tros::Rate rate(10.0);\n\twhile (node.ok()){\n\t\ttransform.setOrigin( tf::Vector3(0.0, 2.0, 0.0) );\n\t\ttransform.setRotation( tf::Quaternion(0, 0, 0, 1) );\n\t\tbr.sendTransform(tf::StampedTransform(transform, ros::Time::now(), \"turtle1\", \"carrot1\"));\n\t\trate.sleep();\n     }\n\treturn 0;\n}\n   ```\n父参考系 turtle1 ，子参考系 carrot1 ，carrot1 在 x y z 方向上与 turtle1 的偏移为 (x:0.0,y:2.0,z:0.0)。修改 CMakeLists.txt 文件添加依赖：\n   ```\nadd_executable(frame_tf_broadcaster src/frame_tf_broadcaster.cpp)\ntarget_link_libraries(frame_tf_broadcaster ${catkin_LIBRARIES})\n   ```\n编译：\n   ```\n $ cd ~/catkin_ws/\n $ catkin_make\n   ```\n在 ~/catkin_ws/devel/lib/learning_tf/ 文件夹下会生成可执行的节点文件 frame_tf_broadcaster ，我们将它的启动放到 start_demo.launch 文件中，添加以下内容：\n   ```\n <node pkg=\"learning_tf\" type=\"frame_tf_broadcaster\" \n\t name=\"broadcaster_frame\" />\n   ```\n运行测试看下效果，roslaunch 会一并执行 roscore 所以不用再提前运行 roscore:\n   ```\n $ roslaunch learning_tf start_demo.launch\n   ```\n我们发现添加了这个坐标系，并没有对之前的 turtle 产生影响，这就恰恰说明了添加一个新的参考坐标系不会影响以前固有的参考坐标系。我们的监听节点依然使用的是之前定义的参考坐标系。现在，我们打开前面编写的监听节点源码 learning_tf/src/turtle_tf_listener.cpp, 我们将 /turtle1 替换成 /carrot1 ：\n   ```\n listener.waitForTransform(\"/turtle2\", \"/carrot1\",ros::Time(0), ros::Duration(3.0));\n listener.lookupTransform(\"/turtle2\", \"/carrot1\",ros::Time(0), transform);\n   ```\n再次编译并执行 start_demo.launch，我们发现，当移动 turtle1 时， turtle2 在跟随 turtle1 的同时总是保持一定的距离，这个距离就是 carrot1 参考系相对于 turtle1 的偏移，因此 turtle2 跟随的是 carrot1 虽然我们没有定义这个模型，但依然能感觉到这个随动关系:\n\n![](ros-primary-tutorial-13/carrot1.jpg)\n\n# moving frame \n建立移动参考系，让两个参考系的关系不再是固定的而是随着时间变化的，因此可以简单的将固定参考系的关系修改成随着时间而变化的，修改 frame_tf_broadcaster.cpp 文件：\n   ```\n transform.setOrigin( tf::Vector3(2.0*sin(ros::Time::now().toSec()), 2.0*cos(ros::Time::now().toSec()), 0.0) );\n transform.setRotation( tf::Quaternion(0, 0, 0, 1) )\n   ```\n以上变换将 carrot1 相对于父参考系 turtle1 的坐标变换修改成时间的正余弦函数，我们再次编译并重新运行一下看效果：\n![](ros-primary-tutorial-13/moving.jpg)\nturtle2 一直绕着 turtle1 做画圆运动，因为上面的函数是三角函数 且符合 x2 + y2 = r2 关系。\n参考:[Writing a tf broadcaster C++](http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20broadcaster%20%28C%2B%2B%29)   /  [Writing a tf listener C++](http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20listener%20%28C%2B%2B%29) / [Adding a frame](http://wiki.ros.org/tf/Tutorials/Adding%20a%20frame%20%28C%2B%2B%29)\n","source":"_posts/ros-primary-tutorial-13.md","raw":"---\ntitle: ROS初级十三 理解ROS坐标转换下\ndate: 2017-06-07 13:44:30\ncategories: ROS\ntags: ROStf\ncomments: true\n---\n本篇继续学习 [tf](http://wiki.ros.org/tf)。通过编写一个简单的 tf broadcaster 以及 tf listener 来更进一步的理解坐标变换。本篇涉及到的代码已上传到 [mygithub](https://github.com/StevenShiChina/learning_tf)。\n# tf broadcaster\ntf broadcaster 用于广播坐标变换，任何节点都可以监听该变换。先创建一个程序包，名字随心，这里我们命名为 *learning_tf*,包的依赖项为 *roscpp rospy turtlesim*\n<!--more-->\n   ```\n $ cd ~/catkin_ws/src/\n $ catkin_create_pkg learning_tf roscpp rospy turtlesim\n   ```\n\n为了便于使用 *roscd* 我们先编译一下这个程序包:\n\n   ```\n $ cd ~/catkin_ws/\n $ catkin_make\n $ rospack profile\n   ```\n\n此时使用 roscd 输入lear 再按 TAB 即可出现 *learning_tf/*。进入 *learning_tf/src* 目录下，新建文件 *turtle_tf_broadcaster.cpp* 添加如下代码：\n\n   ```\n #include <ros/ros.h>\n #include <tf/transform_broadcaster.h> \n #include <turtlesim/Pose.h>\n \n std::string turtle_name;\n \n \n \n void poseCallback(const turtlesim::PoseConstPtr& msg)\n {\n   //创建一个 TransformBroadcaster 对象用于发布坐标变换\n   static tf::TransformBroadcaster br;\n   \n   //创建Transform 对象并将2D的坐标转换为3D坐标系\n   tf::Transform transform;\n   transform.setOrigin( tf::Vector3(msg->x, msg->y, 0.0) );//获取 x y 坐标，不需要Z坐标 \n  \n   tf::Quaternion q;\n   q.setRPY(0, 0, msg->theta);// x y轴旋转为0因为在地面运动只能绕Z轴的旋转\n   transform.setRotation(q);//\n   //发布坐标变换 ros::Time::now()为转换携带的时间戳 传递父节点的名字 world 子节点为turtle_name\n   br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), \"world\", turtle_name));\n }\n \n int main(int argc, char** argv)\n {\n   ros::init(argc, argv, \"my_tf_broadcaster\");\n\n   if (argc != 2){ROS_ERROR(\"need turtle name as argument\"); return -1;};\n  \n   turtle_name = argv[1];\n \n   ros::NodeHandle node;\n  //订阅 turtle_name 的 turtleX/pose 话题，当turtle位置改变时调用回调函数 poseCallback\n   ros::Subscriber sub = node.subscribe(turtle_name+\"/pose\", 10, &poseCallback);\n \n   ros::spin();\n   return 0;\n  };\n\n   ```\n代码的整个流程为：\n1 订阅 turtleX/pose 位置话题\n2 发布坐标变换到tf树\n修改CMakeLists.txt:\n\n   ```\n add_executable(turtle_tf_broadcaster src/turtle_tf_broadcaster.cpp)\n target_link_libraries(turtle_tf_broadcaster ${catkin_LIBRARIES})\n   ```\n\n编译：\n\n   ```\n $ cd ~/catkin_ws/\n $ catkin_make\n   ```\n\n编译报错：\n\n   ```\nLinking CXX executable /home/steven/catkin_ws/devel/lib/learning_tf/turtle_tf_broadcaster\nCMakeFiles/turtle_tf_broadcaster.dir/src/turtle_tf_broadcaster.cpp.o: In function `poseCallback(boost::shared_ptr<turtlesim::Pose_<std::allocator<void> > const> const&)':\nturtle_tf_broadcaster.cpp:(.text+0x39): undefined reference to `tf::TransformBroadcaster::TransformBroadcaster()'\nturtle_tf_broadcaster.cpp:(.text+0x1a3): undefined reference to `tf::TransformBroadcaster::sendTransform(tf::StampedTransform const&)'\ncollect2: ld returned 1 exit status\nmake[2]: *** [/home/steven/catkin_ws/devel/lib/learning_tf/turtle_tf_broadcaster] Error 1\nmake[1]: *** [learning_tf/CMakeFiles/turtle_tf_broadcaster.dir/all] Error 2\nmake: *** [all] Error 2\nInvoking \"make -j1 -l1\" failed\n   ```\n\n忘记了在 CMakeLists.txt 文件需要添加 tf 包的依赖：\n\n   ```\nfind_package(catkin REQUIRED COMPONENTS\n    roscpp\n    rospy\n    turtlesim\n    tf\n  )\n   ```\n\n编译完成后在 ~/catkin_ws/devel/lib/learning_tf/ 目录下会看到编译好的可执行文件 turtle_tf_broadcaster\n接下来创建一个 launch 文件：\n\n   ```\n$ mkdir -p ~/catkin_ws/src/learning_tf/launch\n$ roscd learning_tf/launch/\n$ touch start_demo.launch\n   ```\n\n输入以下内容：\n\n   ```\n<launch>\n    <!-- Turtlesim Node-->\n    <node pkg=\"turtlesim\" type=\"turtlesim_node\" name=\"sim\"/>\n\n    <node pkg=\"turtlesim\" type=\"turtle_teleop_key\" name=\"teleop\" output=\"screen\"/>\n    <!-- Axes -->\n    <param name=\"scale_linear\" value=\"2\" type=\"double\"/>\n    <param name=\"scale_angular\" value=\"2\" type=\"double\"/>\n\n    <node pkg=\"learning_tf\" type=\"turtle_tf_broadcaster\"\n          args=\"/turtle1\" name=\"turtle1_tf_broadcaster\" />\n    <node pkg=\"learning_tf\" type=\"turtle_tf_broadcaster\"\n          args=\"/turtle2\" name=\"turtle2_tf_broadcaster\" />\n\n  </launch>\n   ```\n\nlaunch文件启动了4个节点，分别是：\n 1 turtlesim 包中的类型为 turtlesim_node 名称为 sim 的节点；\n 2 turtlesim 包中的类型为 turtle_teleop_key 名称为 teleop 的节点；\n 3 learning_tf 包中类型为 turtle_tf_broadcaster 名称为 turtle1_tf_broadcaster 的节点；\n 4 learning_tf 包中类型为 turtle_tf_broadcaster 名称为 turtle2_tf_broadcaster 的节点。\n\n# tf listener\n前面编写了broadcaster 用于发布 turtle 的坐标变换到 tf树，下面来编写 listener 来监听坐标的变换。在 learning_tf/src 目录下新建文件 turtle_tf_listener.cpp 添加如下代码:\n\n   ```\n #include <ros/ros.h>\n #include <tf/transform_listener.h> //接收转换\n #include <geometry_msgs/Twist.h> //消息\n #include <turtlesim/Spawn.h> //再生\n  \n int main(int argc, char** argv){\n\n     ros::init(argc, argv, \"my_tf_listener\");//节点名称\n  \n     ros::NodeHandle node;//节点\n \n     //再生服务\n     ros::service::waitForService(\"spawn\");\n     ros::ServiceClient add_turtle =\n      node.serviceClient<turtlesim::Spawn>(\"spawn\");\n     turtlesim::Spawn srv;\n     add_turtle.call(srv);\n \n     //通过话题 turtle2/cmd_vel 发布 geometry_msgs::Twist 类型消息\n     ros::Publisher turtle_vel = \n     node.advertise<geometry_msgs::Twist>(\"turtle2/cmd_vel\", 10);\n     \n     //创建接收对象，一旦TransformListener创建，就开始接收tf转换消息\n     tf::TransformListener listener; \n \n     ros::Rate rate(10.0);\n     while (node.ok()){\n       tf::StampedTransform transform;\n       //from turtle2 到 trutle1 即当 turtle2移动时,turtle1跟随 turtle2 运动\n       try{\n         listener.lookupTransform(\"/turtle2\", \"/turtle1\",\n                                  ros::Time(0), transform);\n       }\n       catch (tf::TransformException &ex) {\n         ROS_ERROR(\"%s\",ex.what());\n         ros::Duration(1.0).sleep();\n         continue;\n       }\n       // 计算新的角速度和线速度\n       geometry_msgs::Twist vel_msg;\n       vel_msg.angular.z = 4.0 * atan2(transform.getOrigin().y(),\n                                       transform.getOrigin().x());\n       vel_msg.linear.x = 0.5 * sqrt(pow(transform.getOrigin().x(), 2) +\n                                     pow(transform.getOrigin().y(), 2));\n       turtle_vel.publish(vel_msg);\n  \n       rate.sleep();\n     }\n     return 0;\n   };\n\n\n   ```\n在CMakeLists.txt中添加依赖项：\n   ```\nadd_executable(turtle_tf_listener src/turtle_tf_listener.cpp)\ntarget_link_libraries(turtle_tf_listener ${catkin_LIBRARIES})\n   ```\n编译如果提示错误：\n   ```\nturtle_tf_listener.cpp:3:32: fatal error: \nturtlesim/Velocity.h: No such file or directory compilation terminated.\n   ```\n则文件使用的为之前版本，应该选择下载 hydro 版本的 参考 [Writing listener C++](http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20listener%20%28C%2B%2B%29)\n之后修改start_demo.launch 将listener节点添加进去：\n   ```\n<node pkg=\"learning_tf\" type=\"turtle_tf_listener\" name=\"listener\" />\n   ```\n# 测试\n停止之前的launch 文件，然后启动 start_demo.launch：\n   ```\n$ roslaunch learning_tf start_demo.launch\n   ```\n可以通过以下命令查看坐标广播信息：\n   ```\n$ rosrun tf tf_echo /world /turtle1\n   ```\n\n错误\n\n运行 start_demo.launch 时提示错误* [ERROR] [1496887441.589043649]: \"turtle2\" passed to lookupTransform argument target_frame does not exist. *  但是当控制一个 turtle 移动时另外一个也可以跟随移动，参照 http://answers.ros.org/question/148121/something-wrong-with-tf-tutorial/ 的修改，在函数 listener.lookupTransform 的前面添加 listener.waitForTransform(\"/turtle2\", \"/turtle1\", ros::Time(0), ros::Duration(3.0));然后重新编译，再次运行错误消失。运行 rviz 可以看到两个 turtle 之间的运动坐标变换\n   ```\n $ rosrun rviz rviz -d `rospack find turtle_tf`/rviz/turtle_rviz.rviz\n   ```\n![](ros-primary-tutorial-13/startdemo.jpg)\n\n# adding a frame\n通常情况下，系统中有一个全局坐标系 world ，当添加一个激光扫描仪，或者再添加一个双目摄像头，那么此时就需要在系统中添加两个坐标参考系，利用 tf 让系统帮我们将激光扫描仪的数据或双目摄像头的数据转换到全局坐标系中去，因此添加一个坐标系是非常必要的。\ntf 以树形结构维护和保存多个参考系坐标，在这个结构中不能有闭环产生，这就意味着，坐标参考系树形结构中只能有一个父参考系 parent,它可以有多个子参考坐标系 child。下面图中 tf 树形结构中有三个参考坐标系，world，turtle1 和 turtle2。 并且 turtle1 和 trutle2 都是 world 的子参考坐标系，如果再添加一个新的坐标参考系 carrot1 它必须是以上三个参考坐标系的子参考系。\n\n![](ros-primary-tutorial-13/tree.png)\n\n接着前面，我们在 turtle1 基础上添加一个参考坐标系 carrot1, 它的父参考系是 turtle1。在 learning_tf/src 目录下建立文件 frame_tf_broadcaster.cpp，添加以下代码：\n   ```\n#include <ros/ros.h>\n#include <tf/transform_broadcaster.h>\n\nint main(int argc, char** argv)\n{\n\tros::init(argc, argv, \"my_tf_broadcaster\");\n\tros::NodeHandle node;\n\n\ttf::TransformBroadcaster br;\n\ttf::Transform transform;\n  \n\tros::Rate rate(10.0);\n\twhile (node.ok()){\n\t\ttransform.setOrigin( tf::Vector3(0.0, 2.0, 0.0) );\n\t\ttransform.setRotation( tf::Quaternion(0, 0, 0, 1) );\n\t\tbr.sendTransform(tf::StampedTransform(transform, ros::Time::now(), \"turtle1\", \"carrot1\"));\n\t\trate.sleep();\n     }\n\treturn 0;\n}\n   ```\n父参考系 turtle1 ，子参考系 carrot1 ，carrot1 在 x y z 方向上与 turtle1 的偏移为 (x:0.0,y:2.0,z:0.0)。修改 CMakeLists.txt 文件添加依赖：\n   ```\nadd_executable(frame_tf_broadcaster src/frame_tf_broadcaster.cpp)\ntarget_link_libraries(frame_tf_broadcaster ${catkin_LIBRARIES})\n   ```\n编译：\n   ```\n $ cd ~/catkin_ws/\n $ catkin_make\n   ```\n在 ~/catkin_ws/devel/lib/learning_tf/ 文件夹下会生成可执行的节点文件 frame_tf_broadcaster ，我们将它的启动放到 start_demo.launch 文件中，添加以下内容：\n   ```\n <node pkg=\"learning_tf\" type=\"frame_tf_broadcaster\" \n\t name=\"broadcaster_frame\" />\n   ```\n运行测试看下效果，roslaunch 会一并执行 roscore 所以不用再提前运行 roscore:\n   ```\n $ roslaunch learning_tf start_demo.launch\n   ```\n我们发现添加了这个坐标系，并没有对之前的 turtle 产生影响，这就恰恰说明了添加一个新的参考坐标系不会影响以前固有的参考坐标系。我们的监听节点依然使用的是之前定义的参考坐标系。现在，我们打开前面编写的监听节点源码 learning_tf/src/turtle_tf_listener.cpp, 我们将 /turtle1 替换成 /carrot1 ：\n   ```\n listener.waitForTransform(\"/turtle2\", \"/carrot1\",ros::Time(0), ros::Duration(3.0));\n listener.lookupTransform(\"/turtle2\", \"/carrot1\",ros::Time(0), transform);\n   ```\n再次编译并执行 start_demo.launch，我们发现，当移动 turtle1 时， turtle2 在跟随 turtle1 的同时总是保持一定的距离，这个距离就是 carrot1 参考系相对于 turtle1 的偏移，因此 turtle2 跟随的是 carrot1 虽然我们没有定义这个模型，但依然能感觉到这个随动关系:\n\n![](ros-primary-tutorial-13/carrot1.jpg)\n\n# moving frame \n建立移动参考系，让两个参考系的关系不再是固定的而是随着时间变化的，因此可以简单的将固定参考系的关系修改成随着时间而变化的，修改 frame_tf_broadcaster.cpp 文件：\n   ```\n transform.setOrigin( tf::Vector3(2.0*sin(ros::Time::now().toSec()), 2.0*cos(ros::Time::now().toSec()), 0.0) );\n transform.setRotation( tf::Quaternion(0, 0, 0, 1) )\n   ```\n以上变换将 carrot1 相对于父参考系 turtle1 的坐标变换修改成时间的正余弦函数，我们再次编译并重新运行一下看效果：\n![](ros-primary-tutorial-13/moving.jpg)\nturtle2 一直绕着 turtle1 做画圆运动，因为上面的函数是三角函数 且符合 x2 + y2 = r2 关系。\n参考:[Writing a tf broadcaster C++](http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20broadcaster%20%28C%2B%2B%29)   /  [Writing a tf listener C++](http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20listener%20%28C%2B%2B%29) / [Adding a frame](http://wiki.ros.org/tf/Tutorials/Adding%20a%20frame%20%28C%2B%2B%29)\n","slug":"ros-primary-tutorial-13","published":1,"updated":"2017-06-13T05:52:15.456Z","layout":"post","photos":[],"link":"","_id":"cj4hne53f001vw8in6wq5ip6e","content":"<p>本篇继续学习 <a href=\"http://wiki.ros.org/tf\" target=\"_blank\" rel=\"external\">tf</a>。通过编写一个简单的 tf broadcaster 以及 tf listener 来更进一步的理解坐标变换。本篇涉及到的代码已上传到 <a href=\"https://github.com/StevenShiChina/learning_tf\" target=\"_blank\" rel=\"external\">mygithub</a>。</p>\n<h1 id=\"tf-broadcaster\"><a href=\"#tf-broadcaster\" class=\"headerlink\" title=\"tf broadcaster\"></a>tf broadcaster</h1><p>tf broadcaster 用于广播坐标变换，任何节点都可以监听该变换。先创建一个程序包，名字随心，这里我们命名为 <em>learning_tf</em>,包的依赖项为 <em>roscpp rospy turtlesim</em><br><a id=\"more\"></a><br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/src/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_create_pkg learning_tf roscpp rospy turtlesim</span></div></pre></td></tr></table></figure></p>\n<p>为了便于使用 <em>roscd</em> 我们先编译一下这个程序包:</p>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rospack profile</span></div></pre></td></tr></table></figure>\n<p>此时使用 roscd 输入lear 再按 TAB 即可出现 <em>learning_tf/</em>。进入 <em>learning_tf/src</em> 目录下，新建文件 <em>turtle_tf_broadcaster.cpp</em> 添加如下代码：</p>\n   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ros/ros.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tf/transform_broadcaster.h&gt; </span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;turtlesim/Pose.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> turtle_name;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">poseCallback</span><span class=\"params\">(<span class=\"keyword\">const</span> turtlesim::PoseConstPtr&amp; msg)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">//创建一个 TransformBroadcaster 对象用于发布坐标变换</span></div><div class=\"line\">  <span class=\"keyword\">static</span> tf::TransformBroadcaster br;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//创建Transform 对象并将2D的坐标转换为3D坐标系</span></div><div class=\"line\">  tf::Transform transform;</div><div class=\"line\">  transform.setOrigin( tf::Vector3(msg-&gt;x, msg-&gt;y, <span class=\"number\">0.0</span>) );<span class=\"comment\">//获取 x y 坐标，不需要Z坐标 </span></div><div class=\"line\"> </div><div class=\"line\">  tf::Quaternion q;</div><div class=\"line\">  q.setRPY(<span class=\"number\">0</span>, <span class=\"number\">0</span>, msg-&gt;theta);<span class=\"comment\">// x y轴旋转为0因为在地面运动只能绕Z轴的旋转</span></div><div class=\"line\">  transform.setRotation(q);<span class=\"comment\">//</span></div><div class=\"line\">  <span class=\"comment\">//发布坐标变换 ros::Time::now()为转换携带的时间戳 传递父节点的名字 world 子节点为turtle_name</span></div><div class=\"line\">  br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), <span class=\"string\">\"world\"</span>, turtle_name));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  ros::init(argc, argv, <span class=\"string\">\"my_tf_broadcaster\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>)&#123;ROS_ERROR(<span class=\"string\">\"need turtle name as argument\"</span>); <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;&#125;;</div><div class=\"line\"> </div><div class=\"line\">  turtle_name = argv[<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">  ros::NodeHandle node;</div><div class=\"line\"> <span class=\"comment\">//订阅 turtle_name 的 turtleX/pose 话题，当turtle位置改变时调用回调函数 poseCallback</span></div><div class=\"line\">  ros::Subscriber sub = node.subscribe(turtle_name+<span class=\"string\">\"/pose\"</span>, <span class=\"number\">10</span>, &amp;poseCallback);</div><div class=\"line\"></div><div class=\"line\">  ros::spin();</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"> &#125;;</div></pre></td></tr></table></figure>\n<p>代码的整个流程为：<br>1 订阅 turtleX/pose 位置话题<br>2 发布坐标变换到tf树<br>修改CMakeLists.txt:</p>\n   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(turtle_tf_broadcaster src/turtle_tf_broadcaster.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(turtle_tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure>\n<p>编译：</p>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_make</span></div></pre></td></tr></table></figure>\n<p>编译报错：</p>\n   <figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Linking CXX executable /home/steven/catkin_ws/devel/<span class=\"keyword\">lib</span>/learning_tf/turtle_tf_broadcaster</div><div class=\"line\">CMakeFiles/turtle_tf_broadcaster.dir/src/turtle_tf_broadcaster.cpp.o: <span class=\"keyword\">In</span> <span class=\"keyword\">function</span> `poseCallback(boost::shared_ptr&lt;turtlesim::Pose_&lt;std::allocator&lt;void&gt; &gt; <span class=\"keyword\">const</span>&gt; <span class=\"keyword\">const</span>&amp;)<span class=\"comment\">':</span></div><div class=\"line\">turtle_tf_broadcaster.cpp:(.<span class=\"keyword\">text</span>+<span class=\"number\">0x39</span>): undefined reference <span class=\"keyword\">to</span> `tf::TransformBroadcaster::TransformBroadcaster()<span class=\"comment\">'</span></div><div class=\"line\">turtle_tf_broadcaster.cpp:(.<span class=\"keyword\">text</span>+<span class=\"number\">0x1a3</span>): undefined reference <span class=\"keyword\">to</span> `tf::TransformBroadcaster::sendTransform(tf::StampedTransform <span class=\"keyword\">const</span>&amp;)<span class=\"comment\">'</span></div><div class=\"line\">collect2: ld returned <span class=\"number\">1</span> <span class=\"keyword\">exit</span> status</div><div class=\"line\">make[<span class=\"number\">2</span>]: *** [/home/steven/catkin_ws/devel/<span class=\"keyword\">lib</span>/learning_tf/turtle_tf_broadcaster] <span class=\"keyword\">Error</span> <span class=\"number\">1</span></div><div class=\"line\">make[<span class=\"number\">1</span>]: *** [learning_tf/CMakeFiles/turtle_tf_broadcaster.dir/all] <span class=\"keyword\">Error</span> <span class=\"number\">2</span></div><div class=\"line\">make: *** [all] <span class=\"keyword\">Error</span> <span class=\"number\">2</span></div><div class=\"line\">Invoking <span class=\"string\">\"make -j1 -l1\"</span> failed</div></pre></td></tr></table></figure>\n<p>忘记了在 CMakeLists.txt 文件需要添加 tf 包的依赖：</p>\n   <figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">find_package(<span class=\"name\">catkin</span> REQUIRED COMPONENTS</div><div class=\"line\">    roscpp</div><div class=\"line\">    rospy</div><div class=\"line\">    turtlesim</div><div class=\"line\">    tf</div><div class=\"line\">  )</div></pre></td></tr></table></figure>\n<p>编译完成后在 ~/catkin_ws/devel/lib/learning_tf/ 目录下会看到编译好的可执行文件 turtle_tf_broadcaster<br>接下来创建一个 launch 文件：</p>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir -p ~/catkin_ws/src/learning_tf/launch</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscd learning_tf/launch/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> touch start_demo.launch</span></div></pre></td></tr></table></figure>\n<p>输入以下内容：</p>\n   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">launch</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Turtlesim Node--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">pkg</span>=<span class=\"string\">\"turtlesim\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"turtlesim_node\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sim\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">pkg</span>=<span class=\"string\">\"turtlesim\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"turtle_teleop_key\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"teleop\"</span> <span class=\"attr\">output</span>=<span class=\"string\">\"screen\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Axes --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"scale_linear\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"double\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"scale_angular\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"double\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">pkg</span>=<span class=\"string\">\"learning_tf\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"turtle_tf_broadcaster\"</span></span></div><div class=\"line\">          <span class=\"attr\">args</span>=<span class=\"string\">\"/turtle1\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"turtle1_tf_broadcaster\"</span> /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">pkg</span>=<span class=\"string\">\"learning_tf\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"turtle_tf_broadcaster\"</span></span></div><div class=\"line\">          <span class=\"attr\">args</span>=<span class=\"string\">\"/turtle2\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"turtle2_tf_broadcaster\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">launch</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>launch文件启动了4个节点，分别是：<br> 1 turtlesim 包中的类型为 turtlesim_node 名称为 sim 的节点；<br> 2 turtlesim 包中的类型为 turtle_teleop_key 名称为 teleop 的节点；<br> 3 learning_tf 包中类型为 turtle_tf_broadcaster 名称为 turtle1_tf_broadcaster 的节点；<br> 4 learning_tf 包中类型为 turtle_tf_broadcaster 名称为 turtle2_tf_broadcaster 的节点。</p>\n<h1 id=\"tf-listener\"><a href=\"#tf-listener\" class=\"headerlink\" title=\"tf listener\"></a>tf listener</h1><p>前面编写了broadcaster 用于发布 turtle 的坐标变换到 tf树，下面来编写 listener 来监听坐标的变换。在 learning_tf/src 目录下新建文件 turtle_tf_listener.cpp 添加如下代码:</p>\n   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ros/ros.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tf/transform_listener.h&gt; //接收转换</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;geometry_msgs/Twist.h&gt; //消息</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;turtlesim/Spawn.h&gt; //再生</span></span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ros::init(argc, argv, <span class=\"string\">\"my_tf_listener\"</span>);<span class=\"comment\">//节点名称</span></div><div class=\"line\"> </div><div class=\"line\">    ros::NodeHandle node;<span class=\"comment\">//节点</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//再生服务</span></div><div class=\"line\">    ros::service::waitForService(<span class=\"string\">\"spawn\"</span>);</div><div class=\"line\">    ros::ServiceClient add_turtle =</div><div class=\"line\">     node.serviceClient&lt;turtlesim::Spawn&gt;(<span class=\"string\">\"spawn\"</span>);</div><div class=\"line\">    turtlesim::Spawn srv;</div><div class=\"line\">    add_turtle.call(srv);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//通过话题 turtle2/cmd_vel 发布 geometry_msgs::Twist 类型消息</span></div><div class=\"line\">    ros::Publisher turtle_vel = </div><div class=\"line\">    node.advertise&lt;geometry_msgs::Twist&gt;(<span class=\"string\">\"turtle2/cmd_vel\"</span>, <span class=\"number\">10</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//创建接收对象，一旦TransformListener创建，就开始接收tf转换消息</span></div><div class=\"line\">    tf::TransformListener listener; </div><div class=\"line\"></div><div class=\"line\">    ros::<span class=\"function\">Rate <span class=\"title\">rate</span><span class=\"params\">(<span class=\"number\">10.0</span>)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (node.ok())&#123;</div><div class=\"line\">      tf::StampedTransform transform;</div><div class=\"line\">      <span class=\"comment\">//from turtle2 到 trutle1 即当 turtle2移动时,turtle1跟随 turtle2 运动</span></div><div class=\"line\">      <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">        listener.lookupTransform(<span class=\"string\">\"/turtle2\"</span>, <span class=\"string\">\"/turtle1\"</span>,</div><div class=\"line\">                                 ros::Time(<span class=\"number\">0</span>), transform);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">catch</span> (tf::TransformException &amp;ex) &#123;</div><div class=\"line\">        ROS_ERROR(<span class=\"string\">\"%s\"</span>,ex.what());</div><div class=\"line\">        ros::Duration(<span class=\"number\">1.0</span>).sleep();</div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 计算新的角速度和线速度</span></div><div class=\"line\">      geometry_msgs::Twist vel_msg;</div><div class=\"line\">      vel_msg.angular.z = <span class=\"number\">4.0</span> * <span class=\"built_in\">atan2</span>(transform.getOrigin().y(),</div><div class=\"line\">                                      transform.getOrigin().x());</div><div class=\"line\">      vel_msg.linear.x = <span class=\"number\">0.5</span> * <span class=\"built_in\">sqrt</span>(<span class=\"built_in\">pow</span>(transform.getOrigin().x(), <span class=\"number\">2</span>) +</div><div class=\"line\">                                    <span class=\"built_in\">pow</span>(transform.getOrigin().y(), <span class=\"number\">2</span>));</div><div class=\"line\">      turtle_vel.publish(vel_msg);</div><div class=\"line\"> </div><div class=\"line\">      rate.sleep();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n<p>在CMakeLists.txt中添加依赖项：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(turtle_tf_listener src/turtle_tf_listener.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(turtle_tf_listener $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>\n<p>编译如果提示错误：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">turtle_tf_listener<span class=\"selector-class\">.cpp</span>:<span class=\"number\">3</span>:<span class=\"number\">32</span>: fatal error: </div><div class=\"line\">turtlesim/Velocity<span class=\"selector-class\">.h</span>: No such file or directory compilation terminated.</div></pre></td></tr></table></figure></p>\n<p>则文件使用的为之前版本，应该选择下载 hydro 版本的 参考 <a href=\"http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20listener%20%28C%2B%2B%29\" target=\"_blank\" rel=\"external\">Writing listener C++</a><br>之后修改start_demo.launch 将listener节点添加进去：<br>   <figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;node pkg=<span class=\"string\">\"learning_tf\"</span> <span class=\"class\"><span class=\"keyword\">type</span></span>=<span class=\"string\">\"turtle_tf_listener\"</span> name=<span class=\"string\">\"listener\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>停止之前的launch 文件，然后启动 start_demo.launch：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roslaunch learning_tf start_demo.launch</span></div></pre></td></tr></table></figure></p>\n<p>可以通过以下命令查看坐标广播信息：<br>   <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosrun tf tf_<span class=\"keyword\">echo</span> <span class=\"string\">/world</span> <span class=\"string\">/turtle1</span></div></pre></td></tr></table></figure></p>\n<p>错误</p>\n<p>运行 start_demo.launch 时提示错误<em> [ERROR] [1496887441.589043649]: “turtle2” passed to lookupTransform argument target_frame does not exist. </em>  但是当控制一个 turtle 移动时另外一个也可以跟随移动，参照 <a href=\"http://answers.ros.org/question/148121/something-wrong-with-tf-tutorial/\" target=\"_blank\" rel=\"external\">http://answers.ros.org/question/148121/something-wrong-with-tf-tutorial/</a> 的修改，在函数 listener.lookupTransform 的前面添加 listener.waitForTransform(“/turtle2”, “/turtle1”, ros::Time(0), ros::Duration(3.0));然后重新编译，再次运行错误消失。运行 rviz 可以看到两个 turtle 之间的运动坐标变换<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun rviz rviz <span class=\"_\">-d</span> `rospack find turtle_tf`/rviz/turtle_rviz.rviz</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/06/07/ros-primary-tutorial-13/startdemo.jpg\" alt=\"\"></p>\n<h1 id=\"adding-a-frame\"><a href=\"#adding-a-frame\" class=\"headerlink\" title=\"adding a frame\"></a>adding a frame</h1><p>通常情况下，系统中有一个全局坐标系 world ，当添加一个激光扫描仪，或者再添加一个双目摄像头，那么此时就需要在系统中添加两个坐标参考系，利用 tf 让系统帮我们将激光扫描仪的数据或双目摄像头的数据转换到全局坐标系中去，因此添加一个坐标系是非常必要的。<br>tf 以树形结构维护和保存多个参考系坐标，在这个结构中不能有闭环产生，这就意味着，坐标参考系树形结构中只能有一个父参考系 parent,它可以有多个子参考坐标系 child。下面图中 tf 树形结构中有三个参考坐标系，world，turtle1 和 turtle2。 并且 turtle1 和 trutle2 都是 world 的子参考坐标系，如果再添加一个新的坐标参考系 carrot1 它必须是以上三个参考坐标系的子参考系。</p>\n<p><img src=\"/2017/06/07/ros-primary-tutorial-13/tree.png\" alt=\"\"></p>\n<p>接着前面，我们在 turtle1 基础上添加一个参考坐标系 carrot1, 它的父参考系是 turtle1。在 learning_tf/src 目录下建立文件 frame_tf_broadcaster.cpp，添加以下代码：<br>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ros/ros.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tf/transform_broadcaster.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tros::init(argc, argv, <span class=\"string\">\"my_tf_broadcaster\"</span>);</div><div class=\"line\">\tros::NodeHandle node;</div><div class=\"line\"></div><div class=\"line\">\ttf::TransformBroadcaster br;</div><div class=\"line\">\ttf::Transform transform;</div><div class=\"line\">  </div><div class=\"line\">\tros::<span class=\"function\">Rate <span class=\"title\">rate</span><span class=\"params\">(<span class=\"number\">10.0</span>)</span></span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (node.ok())&#123;</div><div class=\"line\">\t\ttransform.setOrigin( tf::Vector3(<span class=\"number\">0.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">0.0</span>) );</div><div class=\"line\">\t\ttransform.setRotation( tf::Quaternion(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>) );</div><div class=\"line\">\t\tbr.sendTransform(tf::StampedTransform(transform, ros::Time::now(), <span class=\"string\">\"turtle1\"</span>, <span class=\"string\">\"carrot1\"</span>));</div><div class=\"line\">\t\trate.sleep();</div><div class=\"line\">     &#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>父参考系 turtle1 ，子参考系 carrot1 ，carrot1 在 x y z 方向上与 turtle1 的偏移为 (x:0.0,y:2.0,z:0.0)。修改 CMakeLists.txt 文件添加依赖：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(frame_tf_broadcaster src/frame_tf_broadcaster.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(frame_tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>\n<p>编译：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_make</span></div></pre></td></tr></table></figure></p>\n<p>在 ~/catkin_ws/devel/lib/learning_tf/ 文件夹下会生成可执行的节点文件 frame_tf_broadcaster ，我们将它的启动放到 start_demo.launch 文件中，添加以下内容：<br>   <figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;node pkg=<span class=\"string\">\"learning_tf\"</span> <span class=\"class\"><span class=\"keyword\">type</span></span>=<span class=\"string\">\"frame_tf_broadcaster\"</span> </div><div class=\"line\"> name=<span class=\"string\">\"broadcaster_frame\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>运行测试看下效果，roslaunch 会一并执行 roscore 所以不用再提前运行 roscore:<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roslaunch learning_tf start_demo.launch</span></div></pre></td></tr></table></figure></p>\n<p>我们发现添加了这个坐标系，并没有对之前的 turtle 产生影响，这就恰恰说明了添加一个新的参考坐标系不会影响以前固有的参考坐标系。我们的监听节点依然使用的是之前定义的参考坐标系。现在，我们打开前面编写的监听节点源码 learning_tf/src/turtle_tf_listener.cpp, 我们将 /turtle1 替换成 /carrot1 ：<br>   <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">listener</span><span class=\"selector-class\">.waitForTransform</span>(<span class=\"string\">\"/turtle2\"</span>, <span class=\"string\">\"/carrot1\"</span>,<span class=\"attribute\">ros</span>::Time(<span class=\"number\">0</span>), <span class=\"attribute\">ros</span>::Duration(<span class=\"number\">3.0</span>));</div><div class=\"line\"><span class=\"selector-tag\">listener</span><span class=\"selector-class\">.lookupTransform</span>(<span class=\"string\">\"/turtle2\"</span>, <span class=\"string\">\"/carrot1\"</span>,<span class=\"attribute\">ros</span>::Time(<span class=\"number\">0</span>), transform);</div></pre></td></tr></table></figure></p>\n<p>再次编译并执行 start_demo.launch，我们发现，当移动 turtle1 时， turtle2 在跟随 turtle1 的同时总是保持一定的距离，这个距离就是 carrot1 参考系相对于 turtle1 的偏移，因此 turtle2 跟随的是 carrot1 虽然我们没有定义这个模型，但依然能感觉到这个随动关系:</p>\n<p><img src=\"/2017/06/07/ros-primary-tutorial-13/carrot1.jpg\" alt=\"\"></p>\n<h1 id=\"moving-frame\"><a href=\"#moving-frame\" class=\"headerlink\" title=\"moving frame\"></a>moving frame</h1><p>建立移动参考系，让两个参考系的关系不再是固定的而是随着时间变化的，因此可以简单的将固定参考系的关系修改成随着时间而变化的，修改 frame_tf_broadcaster.cpp 文件：<br>   <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-class\">.setOrigin</span>( <span class=\"selector-tag\">tf</span><span class=\"selector-pseudo\">::Vector3(2.0</span>*<span class=\"selector-tag\">sin</span>(<span class=\"selector-tag\">ros</span><span class=\"selector-pseudo\">::Time</span><span class=\"selector-pseudo\">::now().toSec())</span>, 2<span class=\"selector-class\">.0</span>*<span class=\"selector-tag\">cos</span>(<span class=\"selector-tag\">ros</span><span class=\"selector-pseudo\">::Time</span><span class=\"selector-pseudo\">::now().toSec())</span>, 0<span class=\"selector-class\">.0</span>) );</div><div class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-class\">.setRotation</span>( <span class=\"selector-tag\">tf</span><span class=\"selector-pseudo\">::Quaternion(0</span>, 0, 0, 1) )</div></pre></td></tr></table></figure></p>\n<p>以上变换将 carrot1 相对于父参考系 turtle1 的坐标变换修改成时间的正余弦函数，我们再次编译并重新运行一下看效果：<br><img src=\"/2017/06/07/ros-primary-tutorial-13/moving.jpg\" alt=\"\"><br>turtle2 一直绕着 turtle1 做画圆运动，因为上面的函数是三角函数 且符合 x2 + y2 = r2 关系。<br>参考:<a href=\"http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20broadcaster%20%28C%2B%2B%29\" target=\"_blank\" rel=\"external\">Writing a tf broadcaster C++</a>   /  <a href=\"http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20listener%20%28C%2B%2B%29\" target=\"_blank\" rel=\"external\">Writing a tf listener C++</a> / <a href=\"http://wiki.ros.org/tf/Tutorials/Adding%20a%20frame%20%28C%2B%2B%29\" target=\"_blank\" rel=\"external\">Adding a frame</a></p>\n","site":{"data":{}},"excerpt":"<p>本篇继续学习 <a href=\"http://wiki.ros.org/tf\" target=\"_blank\" rel=\"external\">tf</a>。通过编写一个简单的 tf broadcaster 以及 tf listener 来更进一步的理解坐标变换。本篇涉及到的代码已上传到 <a href=\"https://github.com/StevenShiChina/learning_tf\" target=\"_blank\" rel=\"external\">mygithub</a>。</p>\n<h1 id=\"tf-broadcaster\"><a href=\"#tf-broadcaster\" class=\"headerlink\" title=\"tf broadcaster\"></a>tf broadcaster</h1><p>tf broadcaster 用于广播坐标变换，任何节点都可以监听该变换。先创建一个程序包，名字随心，这里我们命名为 <em>learning_tf</em>,包的依赖项为 <em>roscpp rospy turtlesim</em><br></p>","more":"<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/src/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_create_pkg learning_tf roscpp rospy turtlesim</span></div></pre></td></tr></table></figure><p></p>\n<p>为了便于使用 <em>roscd</em> 我们先编译一下这个程序包:</p>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rospack profile</span></div></pre></td></tr></table></figure>\n<p>此时使用 roscd 输入lear 再按 TAB 即可出现 <em>learning_tf/</em>。进入 <em>learning_tf/src</em> 目录下，新建文件 <em>turtle_tf_broadcaster.cpp</em> 添加如下代码：</p>\n   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ros/ros.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tf/transform_broadcaster.h&gt; </span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;turtlesim/Pose.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> turtle_name;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">poseCallback</span><span class=\"params\">(<span class=\"keyword\">const</span> turtlesim::PoseConstPtr&amp; msg)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">//创建一个 TransformBroadcaster 对象用于发布坐标变换</span></div><div class=\"line\">  <span class=\"keyword\">static</span> tf::TransformBroadcaster br;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//创建Transform 对象并将2D的坐标转换为3D坐标系</span></div><div class=\"line\">  tf::Transform transform;</div><div class=\"line\">  transform.setOrigin( tf::Vector3(msg-&gt;x, msg-&gt;y, <span class=\"number\">0.0</span>) );<span class=\"comment\">//获取 x y 坐标，不需要Z坐标 </span></div><div class=\"line\"> </div><div class=\"line\">  tf::Quaternion q;</div><div class=\"line\">  q.setRPY(<span class=\"number\">0</span>, <span class=\"number\">0</span>, msg-&gt;theta);<span class=\"comment\">// x y轴旋转为0因为在地面运动只能绕Z轴的旋转</span></div><div class=\"line\">  transform.setRotation(q);<span class=\"comment\">//</span></div><div class=\"line\">  <span class=\"comment\">//发布坐标变换 ros::Time::now()为转换携带的时间戳 传递父节点的名字 world 子节点为turtle_name</span></div><div class=\"line\">  br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), <span class=\"string\">\"world\"</span>, turtle_name));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  ros::init(argc, argv, <span class=\"string\">\"my_tf_broadcaster\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>)&#123;ROS_ERROR(<span class=\"string\">\"need turtle name as argument\"</span>); <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;&#125;;</div><div class=\"line\"> </div><div class=\"line\">  turtle_name = argv[<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">  ros::NodeHandle node;</div><div class=\"line\"> <span class=\"comment\">//订阅 turtle_name 的 turtleX/pose 话题，当turtle位置改变时调用回调函数 poseCallback</span></div><div class=\"line\">  ros::Subscriber sub = node.subscribe(turtle_name+<span class=\"string\">\"/pose\"</span>, <span class=\"number\">10</span>, &amp;poseCallback);</div><div class=\"line\"></div><div class=\"line\">  ros::spin();</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"> &#125;;</div></pre></td></tr></table></figure>\n<p>代码的整个流程为：<br>1 订阅 turtleX/pose 位置话题<br>2 发布坐标变换到tf树<br>修改CMakeLists.txt:</p>\n   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(turtle_tf_broadcaster src/turtle_tf_broadcaster.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(turtle_tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure>\n<p>编译：</p>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_make</span></div></pre></td></tr></table></figure>\n<p>编译报错：</p>\n   <figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Linking CXX executable /home/steven/catkin_ws/devel/<span class=\"keyword\">lib</span>/learning_tf/turtle_tf_broadcaster</div><div class=\"line\">CMakeFiles/turtle_tf_broadcaster.dir/src/turtle_tf_broadcaster.cpp.o: <span class=\"keyword\">In</span> <span class=\"keyword\">function</span> `poseCallback(boost::shared_ptr&lt;turtlesim::Pose_&lt;std::allocator&lt;void&gt; &gt; <span class=\"keyword\">const</span>&gt; <span class=\"keyword\">const</span>&amp;)<span class=\"comment\">':</span></div><div class=\"line\">turtle_tf_broadcaster.cpp:(.<span class=\"keyword\">text</span>+<span class=\"number\">0x39</span>): undefined reference <span class=\"keyword\">to</span> `tf::TransformBroadcaster::TransformBroadcaster()<span class=\"comment\">'</span></div><div class=\"line\">turtle_tf_broadcaster.cpp:(.<span class=\"keyword\">text</span>+<span class=\"number\">0x1a3</span>): undefined reference <span class=\"keyword\">to</span> `tf::TransformBroadcaster::sendTransform(tf::StampedTransform <span class=\"keyword\">const</span>&amp;)<span class=\"comment\">'</span></div><div class=\"line\">collect2: ld returned <span class=\"number\">1</span> <span class=\"keyword\">exit</span> status</div><div class=\"line\">make[<span class=\"number\">2</span>]: *** [/home/steven/catkin_ws/devel/<span class=\"keyword\">lib</span>/learning_tf/turtle_tf_broadcaster] <span class=\"keyword\">Error</span> <span class=\"number\">1</span></div><div class=\"line\">make[<span class=\"number\">1</span>]: *** [learning_tf/CMakeFiles/turtle_tf_broadcaster.dir/all] <span class=\"keyword\">Error</span> <span class=\"number\">2</span></div><div class=\"line\">make: *** [all] <span class=\"keyword\">Error</span> <span class=\"number\">2</span></div><div class=\"line\">Invoking <span class=\"string\">\"make -j1 -l1\"</span> failed</div></pre></td></tr></table></figure>\n<p>忘记了在 CMakeLists.txt 文件需要添加 tf 包的依赖：</p>\n   <figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">find_package(<span class=\"name\">catkin</span> REQUIRED COMPONENTS</div><div class=\"line\">    roscpp</div><div class=\"line\">    rospy</div><div class=\"line\">    turtlesim</div><div class=\"line\">    tf</div><div class=\"line\">  )</div></pre></td></tr></table></figure>\n<p>编译完成后在 ~/catkin_ws/devel/lib/learning_tf/ 目录下会看到编译好的可执行文件 turtle_tf_broadcaster<br>接下来创建一个 launch 文件：</p>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir -p ~/catkin_ws/src/learning_tf/launch</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscd learning_tf/launch/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> touch start_demo.launch</span></div></pre></td></tr></table></figure>\n<p>输入以下内容：</p>\n   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">launch</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Turtlesim Node--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">pkg</span>=<span class=\"string\">\"turtlesim\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"turtlesim_node\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sim\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">pkg</span>=<span class=\"string\">\"turtlesim\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"turtle_teleop_key\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"teleop\"</span> <span class=\"attr\">output</span>=<span class=\"string\">\"screen\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Axes --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"scale_linear\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"double\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"scale_angular\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"double\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">pkg</span>=<span class=\"string\">\"learning_tf\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"turtle_tf_broadcaster\"</span></span></div><div class=\"line\">          <span class=\"attr\">args</span>=<span class=\"string\">\"/turtle1\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"turtle1_tf_broadcaster\"</span> /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">pkg</span>=<span class=\"string\">\"learning_tf\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"turtle_tf_broadcaster\"</span></span></div><div class=\"line\">          <span class=\"attr\">args</span>=<span class=\"string\">\"/turtle2\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"turtle2_tf_broadcaster\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">launch</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>launch文件启动了4个节点，分别是：<br> 1 turtlesim 包中的类型为 turtlesim_node 名称为 sim 的节点；<br> 2 turtlesim 包中的类型为 turtle_teleop_key 名称为 teleop 的节点；<br> 3 learning_tf 包中类型为 turtle_tf_broadcaster 名称为 turtle1_tf_broadcaster 的节点；<br> 4 learning_tf 包中类型为 turtle_tf_broadcaster 名称为 turtle2_tf_broadcaster 的节点。</p>\n<h1 id=\"tf-listener\"><a href=\"#tf-listener\" class=\"headerlink\" title=\"tf listener\"></a>tf listener</h1><p>前面编写了broadcaster 用于发布 turtle 的坐标变换到 tf树，下面来编写 listener 来监听坐标的变换。在 learning_tf/src 目录下新建文件 turtle_tf_listener.cpp 添加如下代码:</p>\n   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ros/ros.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tf/transform_listener.h&gt; //接收转换</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;geometry_msgs/Twist.h&gt; //消息</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;turtlesim/Spawn.h&gt; //再生</span></span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ros::init(argc, argv, <span class=\"string\">\"my_tf_listener\"</span>);<span class=\"comment\">//节点名称</span></div><div class=\"line\"> </div><div class=\"line\">    ros::NodeHandle node;<span class=\"comment\">//节点</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//再生服务</span></div><div class=\"line\">    ros::service::waitForService(<span class=\"string\">\"spawn\"</span>);</div><div class=\"line\">    ros::ServiceClient add_turtle =</div><div class=\"line\">     node.serviceClient&lt;turtlesim::Spawn&gt;(<span class=\"string\">\"spawn\"</span>);</div><div class=\"line\">    turtlesim::Spawn srv;</div><div class=\"line\">    add_turtle.call(srv);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//通过话题 turtle2/cmd_vel 发布 geometry_msgs::Twist 类型消息</span></div><div class=\"line\">    ros::Publisher turtle_vel = </div><div class=\"line\">    node.advertise&lt;geometry_msgs::Twist&gt;(<span class=\"string\">\"turtle2/cmd_vel\"</span>, <span class=\"number\">10</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//创建接收对象，一旦TransformListener创建，就开始接收tf转换消息</span></div><div class=\"line\">    tf::TransformListener listener; </div><div class=\"line\"></div><div class=\"line\">    ros::<span class=\"function\">Rate <span class=\"title\">rate</span><span class=\"params\">(<span class=\"number\">10.0</span>)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (node.ok())&#123;</div><div class=\"line\">      tf::StampedTransform transform;</div><div class=\"line\">      <span class=\"comment\">//from turtle2 到 trutle1 即当 turtle2移动时,turtle1跟随 turtle2 运动</span></div><div class=\"line\">      <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">        listener.lookupTransform(<span class=\"string\">\"/turtle2\"</span>, <span class=\"string\">\"/turtle1\"</span>,</div><div class=\"line\">                                 ros::Time(<span class=\"number\">0</span>), transform);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">catch</span> (tf::TransformException &amp;ex) &#123;</div><div class=\"line\">        ROS_ERROR(<span class=\"string\">\"%s\"</span>,ex.what());</div><div class=\"line\">        ros::Duration(<span class=\"number\">1.0</span>).sleep();</div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 计算新的角速度和线速度</span></div><div class=\"line\">      geometry_msgs::Twist vel_msg;</div><div class=\"line\">      vel_msg.angular.z = <span class=\"number\">4.0</span> * <span class=\"built_in\">atan2</span>(transform.getOrigin().y(),</div><div class=\"line\">                                      transform.getOrigin().x());</div><div class=\"line\">      vel_msg.linear.x = <span class=\"number\">0.5</span> * <span class=\"built_in\">sqrt</span>(<span class=\"built_in\">pow</span>(transform.getOrigin().x(), <span class=\"number\">2</span>) +</div><div class=\"line\">                                    <span class=\"built_in\">pow</span>(transform.getOrigin().y(), <span class=\"number\">2</span>));</div><div class=\"line\">      turtle_vel.publish(vel_msg);</div><div class=\"line\"> </div><div class=\"line\">      rate.sleep();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n<p>在CMakeLists.txt中添加依赖项：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(turtle_tf_listener src/turtle_tf_listener.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(turtle_tf_listener $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>\n<p>编译如果提示错误：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">turtle_tf_listener<span class=\"selector-class\">.cpp</span>:<span class=\"number\">3</span>:<span class=\"number\">32</span>: fatal error: </div><div class=\"line\">turtlesim/Velocity<span class=\"selector-class\">.h</span>: No such file or directory compilation terminated.</div></pre></td></tr></table></figure></p>\n<p>则文件使用的为之前版本，应该选择下载 hydro 版本的 参考 <a href=\"http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20listener%20%28C%2B%2B%29\" target=\"_blank\" rel=\"external\">Writing listener C++</a><br>之后修改start_demo.launch 将listener节点添加进去：<br>   <figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;node pkg=<span class=\"string\">\"learning_tf\"</span> <span class=\"class\"><span class=\"keyword\">type</span></span>=<span class=\"string\">\"turtle_tf_listener\"</span> name=<span class=\"string\">\"listener\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>停止之前的launch 文件，然后启动 start_demo.launch：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roslaunch learning_tf start_demo.launch</span></div></pre></td></tr></table></figure></p>\n<p>可以通过以下命令查看坐标广播信息：<br>   <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosrun tf tf_<span class=\"keyword\">echo</span> <span class=\"string\">/world</span> <span class=\"string\">/turtle1</span></div></pre></td></tr></table></figure></p>\n<p>错误</p>\n<p>运行 start_demo.launch 时提示错误<em> [ERROR] [1496887441.589043649]: “turtle2” passed to lookupTransform argument target_frame does not exist. </em>  但是当控制一个 turtle 移动时另外一个也可以跟随移动，参照 <a href=\"http://answers.ros.org/question/148121/something-wrong-with-tf-tutorial/\" target=\"_blank\" rel=\"external\">http://answers.ros.org/question/148121/something-wrong-with-tf-tutorial/</a> 的修改，在函数 listener.lookupTransform 的前面添加 listener.waitForTransform(“/turtle2”, “/turtle1”, ros::Time(0), ros::Duration(3.0));然后重新编译，再次运行错误消失。运行 rviz 可以看到两个 turtle 之间的运动坐标变换<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun rviz rviz <span class=\"_\">-d</span> `rospack find turtle_tf`/rviz/turtle_rviz.rviz</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/06/07/ros-primary-tutorial-13/startdemo.jpg\" alt=\"\"></p>\n<h1 id=\"adding-a-frame\"><a href=\"#adding-a-frame\" class=\"headerlink\" title=\"adding a frame\"></a>adding a frame</h1><p>通常情况下，系统中有一个全局坐标系 world ，当添加一个激光扫描仪，或者再添加一个双目摄像头，那么此时就需要在系统中添加两个坐标参考系，利用 tf 让系统帮我们将激光扫描仪的数据或双目摄像头的数据转换到全局坐标系中去，因此添加一个坐标系是非常必要的。<br>tf 以树形结构维护和保存多个参考系坐标，在这个结构中不能有闭环产生，这就意味着，坐标参考系树形结构中只能有一个父参考系 parent,它可以有多个子参考坐标系 child。下面图中 tf 树形结构中有三个参考坐标系，world，turtle1 和 turtle2。 并且 turtle1 和 trutle2 都是 world 的子参考坐标系，如果再添加一个新的坐标参考系 carrot1 它必须是以上三个参考坐标系的子参考系。</p>\n<p><img src=\"/2017/06/07/ros-primary-tutorial-13/tree.png\" alt=\"\"></p>\n<p>接着前面，我们在 turtle1 基础上添加一个参考坐标系 carrot1, 它的父参考系是 turtle1。在 learning_tf/src 目录下建立文件 frame_tf_broadcaster.cpp，添加以下代码：<br>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ros/ros.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tf/transform_broadcaster.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tros::init(argc, argv, <span class=\"string\">\"my_tf_broadcaster\"</span>);</div><div class=\"line\">\tros::NodeHandle node;</div><div class=\"line\"></div><div class=\"line\">\ttf::TransformBroadcaster br;</div><div class=\"line\">\ttf::Transform transform;</div><div class=\"line\">  </div><div class=\"line\">\tros::<span class=\"function\">Rate <span class=\"title\">rate</span><span class=\"params\">(<span class=\"number\">10.0</span>)</span></span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (node.ok())&#123;</div><div class=\"line\">\t\ttransform.setOrigin( tf::Vector3(<span class=\"number\">0.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">0.0</span>) );</div><div class=\"line\">\t\ttransform.setRotation( tf::Quaternion(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>) );</div><div class=\"line\">\t\tbr.sendTransform(tf::StampedTransform(transform, ros::Time::now(), <span class=\"string\">\"turtle1\"</span>, <span class=\"string\">\"carrot1\"</span>));</div><div class=\"line\">\t\trate.sleep();</div><div class=\"line\">     &#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>父参考系 turtle1 ，子参考系 carrot1 ，carrot1 在 x y z 方向上与 turtle1 的偏移为 (x:0.0,y:2.0,z:0.0)。修改 CMakeLists.txt 文件添加依赖：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(frame_tf_broadcaster src/frame_tf_broadcaster.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(frame_tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>\n<p>编译：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_make</span></div></pre></td></tr></table></figure></p>\n<p>在 ~/catkin_ws/devel/lib/learning_tf/ 文件夹下会生成可执行的节点文件 frame_tf_broadcaster ，我们将它的启动放到 start_demo.launch 文件中，添加以下内容：<br>   <figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;node pkg=<span class=\"string\">\"learning_tf\"</span> <span class=\"class\"><span class=\"keyword\">type</span></span>=<span class=\"string\">\"frame_tf_broadcaster\"</span> </div><div class=\"line\"> name=<span class=\"string\">\"broadcaster_frame\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>运行测试看下效果，roslaunch 会一并执行 roscore 所以不用再提前运行 roscore:<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roslaunch learning_tf start_demo.launch</span></div></pre></td></tr></table></figure></p>\n<p>我们发现添加了这个坐标系，并没有对之前的 turtle 产生影响，这就恰恰说明了添加一个新的参考坐标系不会影响以前固有的参考坐标系。我们的监听节点依然使用的是之前定义的参考坐标系。现在，我们打开前面编写的监听节点源码 learning_tf/src/turtle_tf_listener.cpp, 我们将 /turtle1 替换成 /carrot1 ：<br>   <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">listener</span><span class=\"selector-class\">.waitForTransform</span>(<span class=\"string\">\"/turtle2\"</span>, <span class=\"string\">\"/carrot1\"</span>,<span class=\"attribute\">ros</span>::Time(<span class=\"number\">0</span>), <span class=\"attribute\">ros</span>::Duration(<span class=\"number\">3.0</span>));</div><div class=\"line\"><span class=\"selector-tag\">listener</span><span class=\"selector-class\">.lookupTransform</span>(<span class=\"string\">\"/turtle2\"</span>, <span class=\"string\">\"/carrot1\"</span>,<span class=\"attribute\">ros</span>::Time(<span class=\"number\">0</span>), transform);</div></pre></td></tr></table></figure></p>\n<p>再次编译并执行 start_demo.launch，我们发现，当移动 turtle1 时， turtle2 在跟随 turtle1 的同时总是保持一定的距离，这个距离就是 carrot1 参考系相对于 turtle1 的偏移，因此 turtle2 跟随的是 carrot1 虽然我们没有定义这个模型，但依然能感觉到这个随动关系:</p>\n<p><img src=\"/2017/06/07/ros-primary-tutorial-13/carrot1.jpg\" alt=\"\"></p>\n<h1 id=\"moving-frame\"><a href=\"#moving-frame\" class=\"headerlink\" title=\"moving frame\"></a>moving frame</h1><p>建立移动参考系，让两个参考系的关系不再是固定的而是随着时间变化的，因此可以简单的将固定参考系的关系修改成随着时间而变化的，修改 frame_tf_broadcaster.cpp 文件：<br>   <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-class\">.setOrigin</span>( <span class=\"selector-tag\">tf</span><span class=\"selector-pseudo\">::Vector3(2.0</span>*<span class=\"selector-tag\">sin</span>(<span class=\"selector-tag\">ros</span><span class=\"selector-pseudo\">::Time</span><span class=\"selector-pseudo\">::now().toSec())</span>, 2<span class=\"selector-class\">.0</span>*<span class=\"selector-tag\">cos</span>(<span class=\"selector-tag\">ros</span><span class=\"selector-pseudo\">::Time</span><span class=\"selector-pseudo\">::now().toSec())</span>, 0<span class=\"selector-class\">.0</span>) );</div><div class=\"line\"><span class=\"selector-tag\">transform</span><span class=\"selector-class\">.setRotation</span>( <span class=\"selector-tag\">tf</span><span class=\"selector-pseudo\">::Quaternion(0</span>, 0, 0, 1) )</div></pre></td></tr></table></figure></p>\n<p>以上变换将 carrot1 相对于父参考系 turtle1 的坐标变换修改成时间的正余弦函数，我们再次编译并重新运行一下看效果：<br><img src=\"/2017/06/07/ros-primary-tutorial-13/moving.jpg\" alt=\"\"><br>turtle2 一直绕着 turtle1 做画圆运动，因为上面的函数是三角函数 且符合 x2 + y2 = r2 关系。<br>参考:<a href=\"http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20broadcaster%20%28C%2B%2B%29\" target=\"_blank\" rel=\"external\">Writing a tf broadcaster C++</a>   /  <a href=\"http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20listener%20%28C%2B%2B%29\" target=\"_blank\" rel=\"external\">Writing a tf listener C++</a> / <a href=\"http://wiki.ros.org/tf/Tutorials/Adding%20a%20frame%20%28C%2B%2B%29\" target=\"_blank\" rel=\"external\">Adding a frame</a></p>"},{"title":"ROS初级二 文件系统介绍","date":"2017-05-26T01:54:15.000Z","comments":1,"_content":"本篇学习 ROS 的文件系统，包括一些命令行工具 [roscd](http://wiki.ros.org/rosbash#roscd)、 [rosls](http://wiki.ros.org/rosbash#rosls)、 [rospack](http://wiki.ros.org/rospack) 等的使用。\n# 安装 tutorial 程序包：\n   ```\n $sudo apt-get install ros-indigo-ros-tutorials\n   ```\n源码位于: [ros_tutorials](https://github.com/ros/ros_tutorials.git)。\n 一般一个 ROS 软件包中包括 *CMakeLists.txt*、  *include*、   *package.xml*、  *src* 等几个文件及文件目录。Packages 软件包是ROS 应用程序代码的组织单元，每个软件包都可以包含程序库、可执行文件、脚本或者其它手动创建的东西。 Manifest (package.xml): 清单，是对于软件包相关信息的描述,用于定义软件包相关元信息之间的依赖关系，这些信息包括版本、维护者和许可协议等。 \n<!--more-->\n# 文件系统工具\n## [rospack](http://wiki.ros.org/rospack)\n [rospack](http://wiki.ros.org/rospack) 命令允许获取 ROS 软件包的信息，可以通过 *rospack help* 查看它的使用方法：\n   ```\n $rospack help\n USAGE: rospack <command> [options] [package]\n  Allowed commands:\n    help\n    cflags-only-I     [--deps-only] [package]\n    cflags-only-other [--deps-only] [package]\n    depends           [package] (alias: deps)\n    depends-indent    [package] (alias: deps-indent)\n    depends-manifests [package] (alias: deps-manifests)\n    depends-msgsrv    [package] (alias: deps-msgsrv)\n    depends-on        [package]\n    depends-on1       [package]\n    depends-why --target=<target> [package] (alias: deps-why)\n    depends1          [package] (alias: deps1)\n    export [--deps-only] --lang=<lang> --attrib=<attrib> [package]\n    find [package]\n    langs\n    libs-only-L     [--deps-only] [package]\n    libs-only-l     [--deps-only] [package]\n    libs-only-other [--deps-only] [package]\n    list\n    list-duplicates\n    list-names\n    plugins --attrib=<attrib> [--top=<toppkg>] [package]\n    profile [--length=<length>] [--zombie-only]\n    rosdep  [package] (alias: rosdeps)\n    rosdep0 [package] (alias: rosdeps0)\n    vcs  [package]\n    vcs0 [package]\n  Extra options:\n    -q     Quiets error reports.\n\n If [package] is omitted, the current working directory\n is used (if it contains a package.xml or manifest.xml).\n   ```\n 一般我们常用的 *rospack find xxx* 命令查找某个包位于何处，比如我们想知道 *turtlesim* 包位于哪里：\n   ```\n $rospack find turtlesim\n   ```\n 系统会输出turtlesim 的路径 */opt/ros/indigo/share/turtlesim*\n## [roscd](http://wiki.ros.org/rosbash#roscd) \n [roscd](http://wiki.ros.org/rosbash#roscd) 是 [rosbash](http://wiki.ros.org/rosbash) 命令集中的一部分，它可以直接切换(cd)工作目录到某个软件包或者软件包集当中。 \n 使用方法：\n   ```\n $roscd [本地包名称[/子目录]]\n   ```\n 比如：\n   ```\n $roscd beginner_tutorials/src\n   ```\n 直接进入到 *beginner_tutorials/src* 目录下，此时查看当前目录\n   ```\n $pwd\n /home/yourusername/catkin_ws/src/beginner_tutorials/src\n   ```\n值得注意的是 [roscd](http://wiki.ros.org/rosbash#roscd) 只能切换到那些路径已经包含在 ROS_PACKAGE_PATH 环境变量中的软件包。\n   ```\n $roscd log\n   ```\nroscd log可以切换到ROS保存日记文件的目录下,如果你没有执行过任何ROS程序，系统会报错说该目录不存在。 此时查看当前目录：\n   ```\n $pwd\n /home/yourusername/.ros/log\n   ```\n## [rosls](http://wiki.ros.org/rosbash#rosls)\n[rosls](http://wiki.ros.org/rosbash#rosls) 是 [rosbash](http://wiki.ros.org/rosbash) 命令集中的一部分,允许直接按软件包的名称而不是绝对路径执行ls命令,使用方法：\n   ```\n $rosls [本地包名称[/子目录]]\n   ```\n比如在任意目录下执行，而不需要进入到 beginner_tutorials 所在目录：\n   ```\n $rosls beginner_tutorials/\n   ```\n应输出：\n   ```\nCMakeLists.txt  include  msg  package.xml  src  srv\n   ```\n# TAB补全\nROS 命令同样支持TAB补全，这里不再细讲。","source":"_posts/ros-primary-tutorial-2.md","raw":"---\ntitle: ROS初级二 文件系统介绍\ndate: 2017-05-26 09:54:15\ncategories: ROS\ntags: ROS File's System\ncomments: true\n---\n本篇学习 ROS 的文件系统，包括一些命令行工具 [roscd](http://wiki.ros.org/rosbash#roscd)、 [rosls](http://wiki.ros.org/rosbash#rosls)、 [rospack](http://wiki.ros.org/rospack) 等的使用。\n# 安装 tutorial 程序包：\n   ```\n $sudo apt-get install ros-indigo-ros-tutorials\n   ```\n源码位于: [ros_tutorials](https://github.com/ros/ros_tutorials.git)。\n 一般一个 ROS 软件包中包括 *CMakeLists.txt*、  *include*、   *package.xml*、  *src* 等几个文件及文件目录。Packages 软件包是ROS 应用程序代码的组织单元，每个软件包都可以包含程序库、可执行文件、脚本或者其它手动创建的东西。 Manifest (package.xml): 清单，是对于软件包相关信息的描述,用于定义软件包相关元信息之间的依赖关系，这些信息包括版本、维护者和许可协议等。 \n<!--more-->\n# 文件系统工具\n## [rospack](http://wiki.ros.org/rospack)\n [rospack](http://wiki.ros.org/rospack) 命令允许获取 ROS 软件包的信息，可以通过 *rospack help* 查看它的使用方法：\n   ```\n $rospack help\n USAGE: rospack <command> [options] [package]\n  Allowed commands:\n    help\n    cflags-only-I     [--deps-only] [package]\n    cflags-only-other [--deps-only] [package]\n    depends           [package] (alias: deps)\n    depends-indent    [package] (alias: deps-indent)\n    depends-manifests [package] (alias: deps-manifests)\n    depends-msgsrv    [package] (alias: deps-msgsrv)\n    depends-on        [package]\n    depends-on1       [package]\n    depends-why --target=<target> [package] (alias: deps-why)\n    depends1          [package] (alias: deps1)\n    export [--deps-only] --lang=<lang> --attrib=<attrib> [package]\n    find [package]\n    langs\n    libs-only-L     [--deps-only] [package]\n    libs-only-l     [--deps-only] [package]\n    libs-only-other [--deps-only] [package]\n    list\n    list-duplicates\n    list-names\n    plugins --attrib=<attrib> [--top=<toppkg>] [package]\n    profile [--length=<length>] [--zombie-only]\n    rosdep  [package] (alias: rosdeps)\n    rosdep0 [package] (alias: rosdeps0)\n    vcs  [package]\n    vcs0 [package]\n  Extra options:\n    -q     Quiets error reports.\n\n If [package] is omitted, the current working directory\n is used (if it contains a package.xml or manifest.xml).\n   ```\n 一般我们常用的 *rospack find xxx* 命令查找某个包位于何处，比如我们想知道 *turtlesim* 包位于哪里：\n   ```\n $rospack find turtlesim\n   ```\n 系统会输出turtlesim 的路径 */opt/ros/indigo/share/turtlesim*\n## [roscd](http://wiki.ros.org/rosbash#roscd) \n [roscd](http://wiki.ros.org/rosbash#roscd) 是 [rosbash](http://wiki.ros.org/rosbash) 命令集中的一部分，它可以直接切换(cd)工作目录到某个软件包或者软件包集当中。 \n 使用方法：\n   ```\n $roscd [本地包名称[/子目录]]\n   ```\n 比如：\n   ```\n $roscd beginner_tutorials/src\n   ```\n 直接进入到 *beginner_tutorials/src* 目录下，此时查看当前目录\n   ```\n $pwd\n /home/yourusername/catkin_ws/src/beginner_tutorials/src\n   ```\n值得注意的是 [roscd](http://wiki.ros.org/rosbash#roscd) 只能切换到那些路径已经包含在 ROS_PACKAGE_PATH 环境变量中的软件包。\n   ```\n $roscd log\n   ```\nroscd log可以切换到ROS保存日记文件的目录下,如果你没有执行过任何ROS程序，系统会报错说该目录不存在。 此时查看当前目录：\n   ```\n $pwd\n /home/yourusername/.ros/log\n   ```\n## [rosls](http://wiki.ros.org/rosbash#rosls)\n[rosls](http://wiki.ros.org/rosbash#rosls) 是 [rosbash](http://wiki.ros.org/rosbash) 命令集中的一部分,允许直接按软件包的名称而不是绝对路径执行ls命令,使用方法：\n   ```\n $rosls [本地包名称[/子目录]]\n   ```\n比如在任意目录下执行，而不需要进入到 beginner_tutorials 所在目录：\n   ```\n $rosls beginner_tutorials/\n   ```\n应输出：\n   ```\nCMakeLists.txt  include  msg  package.xml  src  srv\n   ```\n# TAB补全\nROS 命令同样支持TAB补全，这里不再细讲。","slug":"ros-primary-tutorial-2","published":1,"updated":"2017-06-13T05:55:32.095Z","layout":"post","photos":[],"link":"","_id":"cj4hne53g001yw8inpdh1e6kd","content":"<p>本篇学习 ROS 的文件系统，包括一些命令行工具 <a href=\"http://wiki.ros.org/rosbash#roscd\" target=\"_blank\" rel=\"external\">roscd</a>、 <a href=\"http://wiki.ros.org/rosbash#rosls\" target=\"_blank\" rel=\"external\">rosls</a>、 <a href=\"http://wiki.ros.org/rospack\" target=\"_blank\" rel=\"external\">rospack</a> 等的使用。</p>\n<h1 id=\"安装-tutorial-程序包：\"><a href=\"#安装-tutorial-程序包：\" class=\"headerlink\" title=\"安装 tutorial 程序包：\"></a>安装 tutorial 程序包：</h1>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install ros-indigo-ros-tutorials</span></div></pre></td></tr></table></figure>\n<p>源码位于: <a href=\"https://github.com/ros/ros_tutorials.git\" target=\"_blank\" rel=\"external\">ros_tutorials</a>。<br> 一般一个 ROS 软件包中包括 <em>CMakeLists.txt</em>、  <em>include</em>、   <em>package.xml</em>、  <em>src</em> 等几个文件及文件目录。Packages 软件包是ROS 应用程序代码的组织单元，每个软件包都可以包含程序库、可执行文件、脚本或者其它手动创建的东西。 Manifest (package.xml): 清单，是对于软件包相关信息的描述,用于定义软件包相关元信息之间的依赖关系，这些信息包括版本、维护者和许可协议等。<br><a id=\"more\"></a></p>\n<h1 id=\"文件系统工具\"><a href=\"#文件系统工具\" class=\"headerlink\" title=\"文件系统工具\"></a>文件系统工具</h1><h2 id=\"rospack\"><a href=\"#rospack\" class=\"headerlink\" title=\"rospack\"></a><a href=\"http://wiki.ros.org/rospack\" target=\"_blank\" rel=\"external\">rospack</a></h2><p> <a href=\"http://wiki.ros.org/rospack\" target=\"_blank\" rel=\"external\">rospack</a> 命令允许获取 ROS 软件包的信息，可以通过 <em>rospack help</em> 查看它的使用方法：<br>   <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">$rospack <span class=\"keyword\">help</span></div><div class=\"line\"><span class=\"keyword\">USAGE</span>: rospack &lt;command&gt; [options] [<span class=\"keyword\">package</span>]</div><div class=\"line\"> Allowed commands:</div><div class=\"line\">   <span class=\"keyword\">help</span></div><div class=\"line\">   cflags-<span class=\"keyword\">only</span>-I     [<span class=\"comment\">--deps-only] [package]</span></div><div class=\"line\">   cflags-<span class=\"keyword\">only</span>-other [<span class=\"comment\">--deps-only] [package]</span></div><div class=\"line\">   depends           [<span class=\"keyword\">package</span>] (<span class=\"keyword\">alias</span>: deps)</div><div class=\"line\">   depends-indent    [<span class=\"keyword\">package</span>] (<span class=\"keyword\">alias</span>: deps-indent)</div><div class=\"line\">   depends-manifests [<span class=\"keyword\">package</span>] (<span class=\"keyword\">alias</span>: deps-manifests)</div><div class=\"line\">   depends-msgsrv    [<span class=\"keyword\">package</span>] (<span class=\"keyword\">alias</span>: deps-msgsrv)</div><div class=\"line\">   depends-<span class=\"keyword\">on</span>        [<span class=\"keyword\">package</span>]</div><div class=\"line\">   depends-on1       [<span class=\"keyword\">package</span>]</div><div class=\"line\">   depends-why <span class=\"comment\">--target=&lt;target&gt; [package] (alias: deps-why)</span></div><div class=\"line\">   depends1          [<span class=\"keyword\">package</span>] (<span class=\"keyword\">alias</span>: deps1)</div><div class=\"line\">   <span class=\"keyword\">export</span> [<span class=\"comment\">--deps-only] --lang=&lt;lang&gt; --attrib=&lt;attrib&gt; [package]</span></div><div class=\"line\">   find [<span class=\"keyword\">package</span>]</div><div class=\"line\">   langs</div><div class=\"line\">   libs-<span class=\"keyword\">only</span>-L     [<span class=\"comment\">--deps-only] [package]</span></div><div class=\"line\">   libs-<span class=\"keyword\">only</span>-l     [<span class=\"comment\">--deps-only] [package]</span></div><div class=\"line\">   libs-<span class=\"keyword\">only</span>-other [<span class=\"comment\">--deps-only] [package]</span></div><div class=\"line\">   <span class=\"keyword\">list</span></div><div class=\"line\">   <span class=\"keyword\">list</span>-duplicates</div><div class=\"line\">   <span class=\"keyword\">list</span>-<span class=\"keyword\">names</span></div><div class=\"line\">   plugins <span class=\"comment\">--attrib=&lt;attrib&gt; [--top=&lt;toppkg&gt;] [package]</span></div><div class=\"line\">   profile [<span class=\"comment\">--length=&lt;length&gt;] [--zombie-only]</span></div><div class=\"line\">   rosdep  [<span class=\"keyword\">package</span>] (<span class=\"keyword\">alias</span>: rosdeps)</div><div class=\"line\">   rosdep0 [<span class=\"keyword\">package</span>] (<span class=\"keyword\">alias</span>: rosdeps0)</div><div class=\"line\">   vcs  [<span class=\"keyword\">package</span>]</div><div class=\"line\">   vcs0 [<span class=\"keyword\">package</span>]</div><div class=\"line\"> Extra options:</div><div class=\"line\">   -q     Quiets <span class=\"keyword\">error</span> reports.</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">If</span> [<span class=\"keyword\">package</span>] <span class=\"keyword\">is</span> omitted, the <span class=\"keyword\">current</span> working <span class=\"keyword\">directory</span></div><div class=\"line\"><span class=\"keyword\">is</span> used (<span class=\"keyword\">if</span> it contains a package.xml <span class=\"keyword\">or</span> manifest.xml).</div></pre></td></tr></table></figure></p>\n<p> 一般我们常用的 <em>rospack find xxx</em> 命令查找某个包位于何处，比如我们想知道 <em>turtlesim</em> 包位于哪里：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rospack</span> find turtlesim</span></div></pre></td></tr></table></figure></p>\n<p> 系统会输出turtlesim 的路径 <em>/opt/ros/indigo/share/turtlesim</em></p>\n<h2 id=\"roscd\"><a href=\"#roscd\" class=\"headerlink\" title=\"roscd\"></a><a href=\"http://wiki.ros.org/rosbash#roscd\" target=\"_blank\" rel=\"external\">roscd</a></h2><p> <a href=\"http://wiki.ros.org/rosbash#roscd\" target=\"_blank\" rel=\"external\">roscd</a> 是 <a href=\"http://wiki.ros.org/rosbash\" target=\"_blank\" rel=\"external\">rosbash</a> 命令集中的一部分，它可以直接切换(cd)工作目录到某个软件包或者软件包集当中。<br> 使用方法：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscd</span> [本地包名称[/子目录]]</span></div></pre></td></tr></table></figure></p>\n<p> 比如：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscd</span> beginner_tutorials/src</span></div></pre></td></tr></table></figure></p>\n<p> 直接进入到 <em>beginner_tutorials/src</em> 目录下，此时查看当前目录<br>   <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$pwd</span></div><div class=\"line\"><span class=\"regexp\">/home/y</span>ourusername<span class=\"regexp\">/catkin_ws/</span>src<span class=\"regexp\">/beginner_tutorials/</span>src</div></pre></td></tr></table></figure></p>\n<p>值得注意的是 <a href=\"http://wiki.ros.org/rosbash#roscd\" target=\"_blank\" rel=\"external\">roscd</a> 只能切换到那些路径已经包含在 ROS_PACKAGE_PATH 环境变量中的软件包。<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">roscd <span class=\"built_in\">log</span></span></div></pre></td></tr></table></figure></p>\n<p>roscd log可以切换到ROS保存日记文件的目录下,如果你没有执行过任何ROS程序，系统会报错说该目录不存在。 此时查看当前目录：<br>   <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$pwd</span></div><div class=\"line\"><span class=\"regexp\">/home/y</span>ourusername<span class=\"regexp\">/.ros/</span>log</div></pre></td></tr></table></figure></p>\n<h2 id=\"rosls\"><a href=\"#rosls\" class=\"headerlink\" title=\"rosls\"></a><a href=\"http://wiki.ros.org/rosbash#rosls\" target=\"_blank\" rel=\"external\">rosls</a></h2><p><a href=\"http://wiki.ros.org/rosbash#rosls\" target=\"_blank\" rel=\"external\">rosls</a> 是 <a href=\"http://wiki.ros.org/rosbash\" target=\"_blank\" rel=\"external\">rosbash</a> 命令集中的一部分,允许直接按软件包的名称而不是绝对路径执行ls命令,使用方法：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosls</span> [本地包名称[/子目录]]</span></div></pre></td></tr></table></figure></p>\n<p>比如在任意目录下执行，而不需要进入到 beginner_tutorials 所在目录：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosls</span> beginner_tutorials/</span></div></pre></td></tr></table></figure></p>\n<p>应输出：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CMakeLists<span class=\"selector-class\">.txt</span>  include  msg  package<span class=\"selector-class\">.xml</span>  src  srv</div></pre></td></tr></table></figure></p>\n<h1 id=\"TAB补全\"><a href=\"#TAB补全\" class=\"headerlink\" title=\"TAB补全\"></a>TAB补全</h1><p>ROS 命令同样支持TAB补全，这里不再细讲。</p>\n","site":{"data":{}},"excerpt":"<p>本篇学习 ROS 的文件系统，包括一些命令行工具 <a href=\"http://wiki.ros.org/rosbash#roscd\" target=\"_blank\" rel=\"external\">roscd</a>、 <a href=\"http://wiki.ros.org/rosbash#rosls\" target=\"_blank\" rel=\"external\">rosls</a>、 <a href=\"http://wiki.ros.org/rospack\" target=\"_blank\" rel=\"external\">rospack</a> 等的使用。</p>\n<h1 id=\"安装-tutorial-程序包：\"><a href=\"#安装-tutorial-程序包：\" class=\"headerlink\" title=\"安装 tutorial 程序包：\"></a>安装 tutorial 程序包：</h1>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install ros-indigo-ros-tutorials</span></div></pre></td></tr></table></figure>\n<p>源码位于: <a href=\"https://github.com/ros/ros_tutorials.git\" target=\"_blank\" rel=\"external\">ros_tutorials</a>。<br> 一般一个 ROS 软件包中包括 <em>CMakeLists.txt</em>、  <em>include</em>、   <em>package.xml</em>、  <em>src</em> 等几个文件及文件目录。Packages 软件包是ROS 应用程序代码的组织单元，每个软件包都可以包含程序库、可执行文件、脚本或者其它手动创建的东西。 Manifest (package.xml): 清单，是对于软件包相关信息的描述,用于定义软件包相关元信息之间的依赖关系，这些信息包括版本、维护者和许可协议等。<br></p>","more":"<p></p>\n<h1 id=\"文件系统工具\"><a href=\"#文件系统工具\" class=\"headerlink\" title=\"文件系统工具\"></a>文件系统工具</h1><h2 id=\"rospack\"><a href=\"#rospack\" class=\"headerlink\" title=\"rospack\"></a><a href=\"http://wiki.ros.org/rospack\" target=\"_blank\" rel=\"external\">rospack</a></h2><p> <a href=\"http://wiki.ros.org/rospack\" target=\"_blank\" rel=\"external\">rospack</a> 命令允许获取 ROS 软件包的信息，可以通过 <em>rospack help</em> 查看它的使用方法：<br>   <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">$rospack <span class=\"keyword\">help</span></div><div class=\"line\"><span class=\"keyword\">USAGE</span>: rospack &lt;command&gt; [options] [<span class=\"keyword\">package</span>]</div><div class=\"line\"> Allowed commands:</div><div class=\"line\">   <span class=\"keyword\">help</span></div><div class=\"line\">   cflags-<span class=\"keyword\">only</span>-I     [<span class=\"comment\">--deps-only] [package]</span></div><div class=\"line\">   cflags-<span class=\"keyword\">only</span>-other [<span class=\"comment\">--deps-only] [package]</span></div><div class=\"line\">   depends           [<span class=\"keyword\">package</span>] (<span class=\"keyword\">alias</span>: deps)</div><div class=\"line\">   depends-indent    [<span class=\"keyword\">package</span>] (<span class=\"keyword\">alias</span>: deps-indent)</div><div class=\"line\">   depends-manifests [<span class=\"keyword\">package</span>] (<span class=\"keyword\">alias</span>: deps-manifests)</div><div class=\"line\">   depends-msgsrv    [<span class=\"keyword\">package</span>] (<span class=\"keyword\">alias</span>: deps-msgsrv)</div><div class=\"line\">   depends-<span class=\"keyword\">on</span>        [<span class=\"keyword\">package</span>]</div><div class=\"line\">   depends-on1       [<span class=\"keyword\">package</span>]</div><div class=\"line\">   depends-why <span class=\"comment\">--target=&lt;target&gt; [package] (alias: deps-why)</span></div><div class=\"line\">   depends1          [<span class=\"keyword\">package</span>] (<span class=\"keyword\">alias</span>: deps1)</div><div class=\"line\">   <span class=\"keyword\">export</span> [<span class=\"comment\">--deps-only] --lang=&lt;lang&gt; --attrib=&lt;attrib&gt; [package]</span></div><div class=\"line\">   find [<span class=\"keyword\">package</span>]</div><div class=\"line\">   langs</div><div class=\"line\">   libs-<span class=\"keyword\">only</span>-L     [<span class=\"comment\">--deps-only] [package]</span></div><div class=\"line\">   libs-<span class=\"keyword\">only</span>-l     [<span class=\"comment\">--deps-only] [package]</span></div><div class=\"line\">   libs-<span class=\"keyword\">only</span>-other [<span class=\"comment\">--deps-only] [package]</span></div><div class=\"line\">   <span class=\"keyword\">list</span></div><div class=\"line\">   <span class=\"keyword\">list</span>-duplicates</div><div class=\"line\">   <span class=\"keyword\">list</span>-<span class=\"keyword\">names</span></div><div class=\"line\">   plugins <span class=\"comment\">--attrib=&lt;attrib&gt; [--top=&lt;toppkg&gt;] [package]</span></div><div class=\"line\">   profile [<span class=\"comment\">--length=&lt;length&gt;] [--zombie-only]</span></div><div class=\"line\">   rosdep  [<span class=\"keyword\">package</span>] (<span class=\"keyword\">alias</span>: rosdeps)</div><div class=\"line\">   rosdep0 [<span class=\"keyword\">package</span>] (<span class=\"keyword\">alias</span>: rosdeps0)</div><div class=\"line\">   vcs  [<span class=\"keyword\">package</span>]</div><div class=\"line\">   vcs0 [<span class=\"keyword\">package</span>]</div><div class=\"line\"> Extra options:</div><div class=\"line\">   -q     Quiets <span class=\"keyword\">error</span> reports.</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">If</span> [<span class=\"keyword\">package</span>] <span class=\"keyword\">is</span> omitted, the <span class=\"keyword\">current</span> working <span class=\"keyword\">directory</span></div><div class=\"line\"><span class=\"keyword\">is</span> used (<span class=\"keyword\">if</span> it contains a package.xml <span class=\"keyword\">or</span> manifest.xml).</div></pre></td></tr></table></figure></p>\n<p> 一般我们常用的 <em>rospack find xxx</em> 命令查找某个包位于何处，比如我们想知道 <em>turtlesim</em> 包位于哪里：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rospack</span> find turtlesim</span></div></pre></td></tr></table></figure></p>\n<p> 系统会输出turtlesim 的路径 <em>/opt/ros/indigo/share/turtlesim</em></p>\n<h2 id=\"roscd\"><a href=\"#roscd\" class=\"headerlink\" title=\"roscd\"></a><a href=\"http://wiki.ros.org/rosbash#roscd\" target=\"_blank\" rel=\"external\">roscd</a></h2><p> <a href=\"http://wiki.ros.org/rosbash#roscd\" target=\"_blank\" rel=\"external\">roscd</a> 是 <a href=\"http://wiki.ros.org/rosbash\" target=\"_blank\" rel=\"external\">rosbash</a> 命令集中的一部分，它可以直接切换(cd)工作目录到某个软件包或者软件包集当中。<br> 使用方法：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscd</span> [本地包名称[/子目录]]</span></div></pre></td></tr></table></figure></p>\n<p> 比如：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscd</span> beginner_tutorials/src</span></div></pre></td></tr></table></figure></p>\n<p> 直接进入到 <em>beginner_tutorials/src</em> 目录下，此时查看当前目录<br>   <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$pwd</span></div><div class=\"line\"><span class=\"regexp\">/home/y</span>ourusername<span class=\"regexp\">/catkin_ws/</span>src<span class=\"regexp\">/beginner_tutorials/</span>src</div></pre></td></tr></table></figure></p>\n<p>值得注意的是 <a href=\"http://wiki.ros.org/rosbash#roscd\" target=\"_blank\" rel=\"external\">roscd</a> 只能切换到那些路径已经包含在 ROS_PACKAGE_PATH 环境变量中的软件包。<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">roscd <span class=\"built_in\">log</span></span></div></pre></td></tr></table></figure></p>\n<p>roscd log可以切换到ROS保存日记文件的目录下,如果你没有执行过任何ROS程序，系统会报错说该目录不存在。 此时查看当前目录：<br>   <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$pwd</span></div><div class=\"line\"><span class=\"regexp\">/home/y</span>ourusername<span class=\"regexp\">/.ros/</span>log</div></pre></td></tr></table></figure></p>\n<h2 id=\"rosls\"><a href=\"#rosls\" class=\"headerlink\" title=\"rosls\"></a><a href=\"http://wiki.ros.org/rosbash#rosls\" target=\"_blank\" rel=\"external\">rosls</a></h2><p><a href=\"http://wiki.ros.org/rosbash#rosls\" target=\"_blank\" rel=\"external\">rosls</a> 是 <a href=\"http://wiki.ros.org/rosbash\" target=\"_blank\" rel=\"external\">rosbash</a> 命令集中的一部分,允许直接按软件包的名称而不是绝对路径执行ls命令,使用方法：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosls</span> [本地包名称[/子目录]]</span></div></pre></td></tr></table></figure></p>\n<p>比如在任意目录下执行，而不需要进入到 beginner_tutorials 所在目录：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosls</span> beginner_tutorials/</span></div></pre></td></tr></table></figure></p>\n<p>应输出：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CMakeLists<span class=\"selector-class\">.txt</span>  include  msg  package<span class=\"selector-class\">.xml</span>  src  srv</div></pre></td></tr></table></figure></p>\n<h1 id=\"TAB补全\"><a href=\"#TAB补全\" class=\"headerlink\" title=\"TAB补全\"></a>TAB补全</h1><p>ROS 命令同样支持TAB补全，这里不再细讲。</p>"},{"title":"ROS初级四 编译ROS程序包","date":"2017-05-26T07:10:04.000Z","comments":1,"_content":"# 编译\nROS 程序包的编译使用命令 [catkin_make](http://wiki.ros.org/catkin/commands/catkin_make)。在 catkin 工作空间的根目录下 *~/catkin_ws* 执行该命令即可编译 catkin 程序包：\n   ```\n $cd ~/catkin_ws\n $catkin_make\n   ```\n<!--more-->\n该命令会在 *~/catkin_ws* 目录下生成 *build * 和 *devel* 文件夹，*build *是 *cmake* 和 *make* 命令执行的地方，*devel* 文件夹内部用于保存编译生成文件，目标文件以及配置文件 setup.*sh等。该命令等价于：\n  ```\n $ cd ~/catkin_ws\n $ cd src\n $ catkin_init_workspace\n $ cd ..\n $ mkdir build\n $ cd build\n $ cmake ../src -DCMAKE_INSTALL_PREFIX=../install -DCATKIN_DEVEL_PREFIX=../devel\n $ make\n  ```\n如果只想编译指定的某个包或几个包可以使用以下命令：\n  ```\n $catkin_make -DCATKIN_WHITELIST_PACKAGES=\"package1;package2\"\n  ```\n比如我只想编译 mypackage 和 beginner_tutorial这两个包，那么命令可写成：\n  ```\n$catkin_make -DCATKIN_WHITELIST_PACKAGES=\"mypackage,beginner_tutorial\"\n  ```\n注意命令中的 = 前后不能有空格。\n输出：\n  ```\nBase path: /home/steven/catkin_ws\nSource space: /home/steven/catkin_ws/src\nBuild space: /home/steven/catkin_ws/build\nDevel space: /home/steven/catkin_ws/devel\nInstall space: /home/steven/catkin_ws/install\n\n Running command: \"cmake /home/steven/catkin_ws/src -DCATKIN_WHITELIST_PACKAGES=mypackage,beginner_tutorial -DCATKIN_DEVEL_PREFIX=/home/steven/catkin_ws/devel -DCMAKE_INSTALL_PREFIX=/home/steven/catkin_ws/install -G Unix Makefiles\" in \"/home/steven/catkin_ws/build\"\n\n-- Using CATKIN_DEVEL_PREFIX: /home/steven/catkin_ws/devel\n-- Using CMAKE_PREFIX_PATH: /home/steven/catkin_ws/devel;/opt/ros/indigo\n-- This workspace overlays: /home/steven/catkin_ws/devel;/opt/ros/indigo\n-- Using PYTHON_EXECUTABLE: /usr/bin/python\n-- Using Debian Python package layout\n-- Using empy: /usr/bin/empy\n-- Using CATKIN_ENABLE_TESTING: ON\n-- Call enable_testing()\n-- Using CATKIN_TEST_RESULTS_DIR: /home/steven/catkin_ws/build/test_results\n-- Found gtest: gtests will be built\n-- Using Python nosetests: /usr/bin/nosetests-2.7\n-- catkin 0.6.18\n-- BUILD_SHARED_LIBS is on\n-- Using CATKIN_WHITELIST_PACKAGES: mypackage,beginner_tutorial\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/steven/catkin_ws/build\n\n Running command: \"make -j1 -l1\" in \"/home/steven/catkin_ws/build\"\n\n  ```\n如果想恢复编译所有包使用命令：\n  ```\n $catkin_make -DCATKIN_WHITELIST_PACKAGES=\"\"\n  ```\n# 安装\n编译完成后生成的文件位于 *devel* 目录下，可以使用以下命令进行安装：\n  ```\n $cd ~/catkin_ws\n $catkin_make install\n  ```\n以上命令等价于：\n  ```\n $ cd ~/catkin_ws/build\n //If cmake hasn't already been called\n $ cmake ../src -DCMAKE_INSTALL_PREFIX=../install -DCATKIN_DEVEL_PREFIX=../devel\n $ make\n $ make install\n  ```\n执行完以上命令后会在 *~/catkin_ws* 目录下生成 *install* 文件夹，所有编译完成的包都安装到了 *install* 下。里面包含 *setup.bash* 配置文件，可以使用 *source* 让系统可以找到这些编译完后的可执行包。\n可以通过以下命令改变安装位置：\n  ```\n $cd ~/catkin_ws\n $catkin_make -DCMAKE_INSTALL_PREFIX=/opt/ros/indigo install\n  ```\n位置 */opt/ros/indigo* 为系统目录，一般不建议将自己的包安装于此。安装完后记得 *source* 一下才能使用：\n  ```\n $source /opt/ros/indigo/setup.bash\n  ```\n或者：\n ```\n $source ~/catkin_ws/devel/setup.bash\n  ```\n可以将这句话添加到自己的 *~/.bashrc* 中：\n  ```\n source ~/catkin_ws/devel/setup.bash\n  ```\n参考 [catkin_make](http://wiki.ros.org/catkin/commands/catkin_make)。","source":"_posts/ros-primary-tutorial-4.md","raw":"---\ntitle: ROS初级四 编译ROS程序包\ndate: 2017-05-26 15:10:04\ncategories: ROS\ntags: Catkin_make\ncomments: true\n---\n# 编译\nROS 程序包的编译使用命令 [catkin_make](http://wiki.ros.org/catkin/commands/catkin_make)。在 catkin 工作空间的根目录下 *~/catkin_ws* 执行该命令即可编译 catkin 程序包：\n   ```\n $cd ~/catkin_ws\n $catkin_make\n   ```\n<!--more-->\n该命令会在 *~/catkin_ws* 目录下生成 *build * 和 *devel* 文件夹，*build *是 *cmake* 和 *make* 命令执行的地方，*devel* 文件夹内部用于保存编译生成文件，目标文件以及配置文件 setup.*sh等。该命令等价于：\n  ```\n $ cd ~/catkin_ws\n $ cd src\n $ catkin_init_workspace\n $ cd ..\n $ mkdir build\n $ cd build\n $ cmake ../src -DCMAKE_INSTALL_PREFIX=../install -DCATKIN_DEVEL_PREFIX=../devel\n $ make\n  ```\n如果只想编译指定的某个包或几个包可以使用以下命令：\n  ```\n $catkin_make -DCATKIN_WHITELIST_PACKAGES=\"package1;package2\"\n  ```\n比如我只想编译 mypackage 和 beginner_tutorial这两个包，那么命令可写成：\n  ```\n$catkin_make -DCATKIN_WHITELIST_PACKAGES=\"mypackage,beginner_tutorial\"\n  ```\n注意命令中的 = 前后不能有空格。\n输出：\n  ```\nBase path: /home/steven/catkin_ws\nSource space: /home/steven/catkin_ws/src\nBuild space: /home/steven/catkin_ws/build\nDevel space: /home/steven/catkin_ws/devel\nInstall space: /home/steven/catkin_ws/install\n\n Running command: \"cmake /home/steven/catkin_ws/src -DCATKIN_WHITELIST_PACKAGES=mypackage,beginner_tutorial -DCATKIN_DEVEL_PREFIX=/home/steven/catkin_ws/devel -DCMAKE_INSTALL_PREFIX=/home/steven/catkin_ws/install -G Unix Makefiles\" in \"/home/steven/catkin_ws/build\"\n\n-- Using CATKIN_DEVEL_PREFIX: /home/steven/catkin_ws/devel\n-- Using CMAKE_PREFIX_PATH: /home/steven/catkin_ws/devel;/opt/ros/indigo\n-- This workspace overlays: /home/steven/catkin_ws/devel;/opt/ros/indigo\n-- Using PYTHON_EXECUTABLE: /usr/bin/python\n-- Using Debian Python package layout\n-- Using empy: /usr/bin/empy\n-- Using CATKIN_ENABLE_TESTING: ON\n-- Call enable_testing()\n-- Using CATKIN_TEST_RESULTS_DIR: /home/steven/catkin_ws/build/test_results\n-- Found gtest: gtests will be built\n-- Using Python nosetests: /usr/bin/nosetests-2.7\n-- catkin 0.6.18\n-- BUILD_SHARED_LIBS is on\n-- Using CATKIN_WHITELIST_PACKAGES: mypackage,beginner_tutorial\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/steven/catkin_ws/build\n\n Running command: \"make -j1 -l1\" in \"/home/steven/catkin_ws/build\"\n\n  ```\n如果想恢复编译所有包使用命令：\n  ```\n $catkin_make -DCATKIN_WHITELIST_PACKAGES=\"\"\n  ```\n# 安装\n编译完成后生成的文件位于 *devel* 目录下，可以使用以下命令进行安装：\n  ```\n $cd ~/catkin_ws\n $catkin_make install\n  ```\n以上命令等价于：\n  ```\n $ cd ~/catkin_ws/build\n //If cmake hasn't already been called\n $ cmake ../src -DCMAKE_INSTALL_PREFIX=../install -DCATKIN_DEVEL_PREFIX=../devel\n $ make\n $ make install\n  ```\n执行完以上命令后会在 *~/catkin_ws* 目录下生成 *install* 文件夹，所有编译完成的包都安装到了 *install* 下。里面包含 *setup.bash* 配置文件，可以使用 *source* 让系统可以找到这些编译完后的可执行包。\n可以通过以下命令改变安装位置：\n  ```\n $cd ~/catkin_ws\n $catkin_make -DCMAKE_INSTALL_PREFIX=/opt/ros/indigo install\n  ```\n位置 */opt/ros/indigo* 为系统目录，一般不建议将自己的包安装于此。安装完后记得 *source* 一下才能使用：\n  ```\n $source /opt/ros/indigo/setup.bash\n  ```\n或者：\n ```\n $source ~/catkin_ws/devel/setup.bash\n  ```\n可以将这句话添加到自己的 *~/.bashrc* 中：\n  ```\n source ~/catkin_ws/devel/setup.bash\n  ```\n参考 [catkin_make](http://wiki.ros.org/catkin/commands/catkin_make)。","slug":"ros-primary-tutorial-4","published":1,"updated":"2017-06-13T05:55:14.257Z","layout":"post","photos":[],"link":"","_id":"cj4hne53i0021w8infzzkobck","content":"<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><p>ROS 程序包的编译使用命令 <a href=\"http://wiki.ros.org/catkin/commands/catkin_make\" target=\"_blank\" rel=\"external\">catkin_make</a>。在 catkin 工作空间的根目录下 <em>~/catkin_ws</em> 执行该命令即可编译 catkin 程序包：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>该命令会在 <em>~/catkin_ws</em> 目录下生成 <em>build </em> 和 <em>devel</em> 文件夹，<em>build </em>是 <em>cmake</em> 和 <em>make</em> 命令执行的地方，<em>devel</em> 文件夹内部用于保存编译生成文件，目标文件以及配置文件 setup.*sh等。该命令等价于：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_init_workspace</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ..</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir build</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> build</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cmake ../src -DCMAKE_INSTALL_PREFIX=../install -DCATKIN_DEVEL_PREFIX=../devel</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> make</span></div></pre></td></tr></table></figure></p>\n<p>如果只想编译指定的某个包或几个包可以使用以下命令：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class=\"string\">\"package1;package2\"</span></span></div></pre></td></tr></table></figure></p>\n<p>比如我只想编译 mypackage 和 beginner_tutorial这两个包，那么命令可写成：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class=\"string\">\"mypackage,beginner_tutorial\"</span></span></div></pre></td></tr></table></figure></p>\n<p>注意命令中的 = 前后不能有空格。<br>输出：<br>  <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">Base <span class=\"string\">path:</span> <span class=\"regexp\">/home/</span>steven/catkin_ws</div><div class=\"line\">Source <span class=\"string\">space:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>src</div><div class=\"line\">Build <span class=\"string\">space:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>build</div><div class=\"line\">Devel <span class=\"string\">space:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>devel</div><div class=\"line\">Install <span class=\"string\">space:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>install</div><div class=\"line\"></div><div class=\"line\"> Running <span class=\"string\">command:</span> <span class=\"string\">\"cmake /home/steven/catkin_ws/src -DCATKIN_WHITELIST_PACKAGES=mypackage,beginner_tutorial -DCATKIN_DEVEL_PREFIX=/home/steven/catkin_ws/devel -DCMAKE_INSTALL_PREFIX=/home/steven/catkin_ws/install -G Unix Makefiles\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"/home/steven/catkin_ws/build\"</span></div><div class=\"line\"></div><div class=\"line\">-- Using <span class=\"string\">CATKIN_DEVEL_PREFIX:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>devel</div><div class=\"line\">-- Using <span class=\"string\">CMAKE_PREFIX_PATH:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>devel;<span class=\"regexp\">/opt/</span>ros/indigo</div><div class=\"line\">-- This workspace <span class=\"string\">overlays:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>devel;<span class=\"regexp\">/opt/</span>ros/indigo</div><div class=\"line\">-- Using <span class=\"string\">PYTHON_EXECUTABLE:</span> <span class=\"regexp\">/usr/</span>bin/python</div><div class=\"line\">-- Using Debian Python <span class=\"keyword\">package</span> layout</div><div class=\"line\">-- Using <span class=\"string\">empy:</span> <span class=\"regexp\">/usr/</span>bin/empy</div><div class=\"line\">-- Using <span class=\"string\">CATKIN_ENABLE_TESTING:</span> ON</div><div class=\"line\">-- Call enable_testing()</div><div class=\"line\">-- Using <span class=\"string\">CATKIN_TEST_RESULTS_DIR:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>build/test_results</div><div class=\"line\">-- Found <span class=\"string\">gtest:</span> gtests will be built</div><div class=\"line\">-- Using Python <span class=\"string\">nosetests:</span> <span class=\"regexp\">/usr/</span>bin/nosetests<span class=\"number\">-2.7</span></div><div class=\"line\">-- catkin <span class=\"number\">0.6</span><span class=\"number\">.18</span></div><div class=\"line\">-- BUILD_SHARED_LIBS is on</div><div class=\"line\">-- Using <span class=\"string\">CATKIN_WHITELIST_PACKAGES:</span> mypackage,beginner_tutorial</div><div class=\"line\">-- Configuring done</div><div class=\"line\">-- Generating done</div><div class=\"line\">-- Build files have been written <span class=\"string\">to:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>build</div><div class=\"line\"></div><div class=\"line\"> Running <span class=\"string\">command:</span> <span class=\"string\">\"make -j1 -l1\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"/home/steven/catkin_ws/build\"</span></div></pre></td></tr></table></figure></p>\n<p>如果想恢复编译所有包使用命令：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class=\"string\">\"\"</span></span></div></pre></td></tr></table></figure></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>编译完成后生成的文件位于 <em>devel</em> 目录下，可以使用以下命令进行安装：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make install</span></div></pre></td></tr></table></figure></p>\n<p>以上命令等价于：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/build</span></div><div class=\"line\">//If cmake hasn't already been called</div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cmake ../src -DCMAKE_INSTALL_PREFIX=../install -DCATKIN_DEVEL_PREFIX=../devel</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> make install</span></div></pre></td></tr></table></figure></p>\n<p>执行完以上命令后会在 <em>~/catkin_ws</em> 目录下生成 <em>install</em> 文件夹，所有编译完成的包都安装到了 <em>install</em> 下。里面包含 <em>setup.bash</em> 配置文件，可以使用 <em>source</em> 让系统可以找到这些编译完后的可执行包。<br>可以通过以下命令改变安装位置：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make -DCMAKE_INSTALL_PREFIX=/opt/ros/indigo install</span></div></pre></td></tr></table></figure></p>\n<p>位置 <em>/opt/ros/indigo</em> 为系统目录，一般不建议将自己的包安装于此。安装完后记得 <em>source</em> 一下才能使用：<br>  <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$source</span> <span class=\"regexp\">/opt/</span>ros<span class=\"regexp\">/indigo/</span>setup.bash</div></pre></td></tr></table></figure></p>\n<p>或者：<br> <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">source</span> ~/catkin_ws/devel/setup.bash</span></div></pre></td></tr></table></figure></p>\n<p>可以将这句话添加到自己的 <em>~/.bashrc</em> 中：<br>  <figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">source</span> ~<span class=\"regexp\">/catkin_ws/</span>devel<span class=\"regexp\">/setup.bash</span></div></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"http://wiki.ros.org/catkin/commands/catkin_make\" target=\"_blank\" rel=\"external\">catkin_make</a>。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><p>ROS 程序包的编译使用命令 <a href=\"http://wiki.ros.org/catkin/commands/catkin_make\" target=\"_blank\" rel=\"external\">catkin_make</a>。在 catkin 工作空间的根目录下 <em>~/catkin_ws</em> 执行该命令即可编译 catkin 程序包：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make</span></div></pre></td></tr></table></figure></p>","more":"<p>该命令会在 <em>~/catkin_ws</em> 目录下生成 <em>build </em> 和 <em>devel</em> 文件夹，<em>build </em>是 <em>cmake</em> 和 <em>make</em> 命令执行的地方，<em>devel</em> 文件夹内部用于保存编译生成文件，目标文件以及配置文件 setup.*sh等。该命令等价于：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_init_workspace</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ..</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir build</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> build</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cmake ../src -DCMAKE_INSTALL_PREFIX=../install -DCATKIN_DEVEL_PREFIX=../devel</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> make</span></div></pre></td></tr></table></figure></p>\n<p>如果只想编译指定的某个包或几个包可以使用以下命令：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class=\"string\">\"package1;package2\"</span></span></div></pre></td></tr></table></figure></p>\n<p>比如我只想编译 mypackage 和 beginner_tutorial这两个包，那么命令可写成：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class=\"string\">\"mypackage,beginner_tutorial\"</span></span></div></pre></td></tr></table></figure></p>\n<p>注意命令中的 = 前后不能有空格。<br>输出：<br>  <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">Base <span class=\"string\">path:</span> <span class=\"regexp\">/home/</span>steven/catkin_ws</div><div class=\"line\">Source <span class=\"string\">space:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>src</div><div class=\"line\">Build <span class=\"string\">space:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>build</div><div class=\"line\">Devel <span class=\"string\">space:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>devel</div><div class=\"line\">Install <span class=\"string\">space:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>install</div><div class=\"line\"></div><div class=\"line\"> Running <span class=\"string\">command:</span> <span class=\"string\">\"cmake /home/steven/catkin_ws/src -DCATKIN_WHITELIST_PACKAGES=mypackage,beginner_tutorial -DCATKIN_DEVEL_PREFIX=/home/steven/catkin_ws/devel -DCMAKE_INSTALL_PREFIX=/home/steven/catkin_ws/install -G Unix Makefiles\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"/home/steven/catkin_ws/build\"</span></div><div class=\"line\"></div><div class=\"line\">-- Using <span class=\"string\">CATKIN_DEVEL_PREFIX:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>devel</div><div class=\"line\">-- Using <span class=\"string\">CMAKE_PREFIX_PATH:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>devel;<span class=\"regexp\">/opt/</span>ros/indigo</div><div class=\"line\">-- This workspace <span class=\"string\">overlays:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>devel;<span class=\"regexp\">/opt/</span>ros/indigo</div><div class=\"line\">-- Using <span class=\"string\">PYTHON_EXECUTABLE:</span> <span class=\"regexp\">/usr/</span>bin/python</div><div class=\"line\">-- Using Debian Python <span class=\"keyword\">package</span> layout</div><div class=\"line\">-- Using <span class=\"string\">empy:</span> <span class=\"regexp\">/usr/</span>bin/empy</div><div class=\"line\">-- Using <span class=\"string\">CATKIN_ENABLE_TESTING:</span> ON</div><div class=\"line\">-- Call enable_testing()</div><div class=\"line\">-- Using <span class=\"string\">CATKIN_TEST_RESULTS_DIR:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>build/test_results</div><div class=\"line\">-- Found <span class=\"string\">gtest:</span> gtests will be built</div><div class=\"line\">-- Using Python <span class=\"string\">nosetests:</span> <span class=\"regexp\">/usr/</span>bin/nosetests<span class=\"number\">-2.7</span></div><div class=\"line\">-- catkin <span class=\"number\">0.6</span><span class=\"number\">.18</span></div><div class=\"line\">-- BUILD_SHARED_LIBS is on</div><div class=\"line\">-- Using <span class=\"string\">CATKIN_WHITELIST_PACKAGES:</span> mypackage,beginner_tutorial</div><div class=\"line\">-- Configuring done</div><div class=\"line\">-- Generating done</div><div class=\"line\">-- Build files have been written <span class=\"string\">to:</span> <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/catkin_ws/</span>build</div><div class=\"line\"></div><div class=\"line\"> Running <span class=\"string\">command:</span> <span class=\"string\">\"make -j1 -l1\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"/home/steven/catkin_ws/build\"</span></div></pre></td></tr></table></figure></p>\n<p>如果想恢复编译所有包使用命令：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class=\"string\">\"\"</span></span></div></pre></td></tr></table></figure></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>编译完成后生成的文件位于 <em>devel</em> 目录下，可以使用以下命令进行安装：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make install</span></div></pre></td></tr></table></figure></p>\n<p>以上命令等价于：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/build</span></div><div class=\"line\">//If cmake hasn't already been called</div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cmake ../src -DCMAKE_INSTALL_PREFIX=../install -DCATKIN_DEVEL_PREFIX=../devel</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> make install</span></div></pre></td></tr></table></figure></p>\n<p>执行完以上命令后会在 <em>~/catkin_ws</em> 目录下生成 <em>install</em> 文件夹，所有编译完成的包都安装到了 <em>install</em> 下。里面包含 <em>setup.bash</em> 配置文件，可以使用 <em>source</em> 让系统可以找到这些编译完后的可执行包。<br>可以通过以下命令改变安装位置：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make -DCMAKE_INSTALL_PREFIX=/opt/ros/indigo install</span></div></pre></td></tr></table></figure></p>\n<p>位置 <em>/opt/ros/indigo</em> 为系统目录，一般不建议将自己的包安装于此。安装完后记得 <em>source</em> 一下才能使用：<br>  <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$source</span> <span class=\"regexp\">/opt/</span>ros<span class=\"regexp\">/indigo/</span>setup.bash</div></pre></td></tr></table></figure></p>\n<p>或者：<br> <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">source</span> ~/catkin_ws/devel/setup.bash</span></div></pre></td></tr></table></figure></p>\n<p>可以将这句话添加到自己的 <em>~/.bashrc</em> 中：<br>  <figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">source</span> ~<span class=\"regexp\">/catkin_ws/</span>devel<span class=\"regexp\">/setup.bash</span></div></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"http://wiki.ros.org/catkin/commands/catkin_make\" target=\"_blank\" rel=\"external\">catkin_make</a>。</p>"},{"title":"ROS初级三 创建ROS程序包","date":"2017-05-26T03:23:13.000Z","comments":1,"_content":"本篇学习 ROS 程序包的创建，使用工具 [catkin_create_pkg](http://wiki.ros.org/catkin/commands/catkin_create_pkg) 创建新程序包。\n# ROS程序包的组成\n ROS 程序包必须包含 [package.xml](http://wiki.ros.org/catkin/package.xml) 文件和 [CMakeLists.txt](http://wiki.ros.org/catkin/CMakeLists.txt) 文件。*package.xml* 提供有关程序包的元信息，每个目录下只能有一个程序包：\n   ```\n beginner_tutorials/     \n  include/                   \n  msg/                       \n  src/                        \n  srv/                       \n  CMakeLists.txt              \n  package.xml \n   ```\n<!--more-->\n# catkin工作空间\n一个简单的 [catkin workspace](http://wiki.ros.org/catkin/workspaces) 结构如下：\n   ```\nworkspace_folder/        -- WORKSPACE\n  src/                   -- SOURCE SPACE\n    CMakeLists.txt       -- 'Toplevel' CMake file, provided by catkin\n    package_1/\n      CMakeLists.txt     -- CMakeLists.txt file for package_1\n      package.xml        -- Package manifest for package_1\n    ...\n    package_n/\n      CMakeLists.txt     -- CMakeLists.txt file for package_n\n      package.xml        -- Package manifest for package_n\n   ```\n# 创建catkin程序包\n使用 [catkin_create_pkg](http://wiki.ros.org/catkin/commands/catkin_create_pkg) 创建自己的 catkin 程序包，格式：\n   ```\n $catkin_create_pkg <package_name> [depend1] [depend2] [depend3]\n   ```\n实例：\n   ```\n $cd ~/catkin_ws/src \n $catkin_create_pkg beginner_tutorials std_msgs rospy roscpp\n   ```\n上面命令创建了一个名为 *beginner_tutorials* 的 catkin 程序包，这个程序包依赖于 std_msgs、roscpp 和 rospy。执行这个命令后在 *~/catkin_ws/src* 目录下将会创建一个名为 *beginner_tutorials* 的文件夹，这个文件夹里面包含一个 *package.xml* 文件和一个 *CMakeLists.txt* 文件，这两个文件都已经自动包含了部分在执行 [catkin_create_pkg](http://wiki.ros.org/catkin/commands/catkin_create_pkg) 命令时提供的信息。 \n# 程序包依赖关系\n可以使用 *rospack* 命令来查看某个程序包的依赖包：\n   ```\n $rospack depends1 beginner_tutorials //查看一级依赖\n   ```\n输出：\n   ```\n roscpp\n rospy\n std_msgs\n   ```\n列出的依赖包正是我们在用 [catkin_create_pkg](http://wiki.ros.org/catkin/commands/catkin_create_pkg) 创建 beginner_tutorials 程序包时指定的依赖包。而这些依赖已经自动添加到 *package.xml* 文件中：\n   ```\n $roscd beginner_tutorials\n $cat package.xml\n   ```\npackage.xml内容：\n   ```\n <package>\n ...\n  <buildtool_depend>catkin</buildtool_depend>\n  <build_depend>roscpp</build_depend>\n  <build_depend>rospy</build_depend>\n  <build_depend>std_msgs</build_depend>\n ...\n </package>\n   ```\n列出所有的间接依赖包：\n   ```\n $rospack depends beginner_tutorials\n cpp_common\n rostime\n roscpp_traits\n roscpp_serialization\n genmsg\n genpy\n message_runtime\n rosconsole\n std_msgs\n rosgraph_msgs\n xmlrpcpp\n roscpp\n rosgraph\n catkin\n rospack\n roslib\n rospy\n   ```\n# 自定义程序包\n修改 *package.xml*, 更新必要的信息。\n描述标签：\n   ```\n<description>The beginner_tutorials package</description>\n   ```\n将描述信息修改为任何喜欢的内容，但是按照约定第一句话应该简短一些，因为它覆盖了程序包的范围。如果用一句话难以描述完全那就需要换行了。\n维护者标签：\n   ```\n\n  <!-- One maintainer tag required, multiple allowed, one person per tag --> \n  <!-- Example:  -->\n  <!-- <maintainer email=\"jane.doe@example.com\">Jane Doe</maintainer> -->\n  <maintainer email=\"user@todo.todo\">user</maintainer> \n   ```\n这是 *package.xml* 中要求填写的一个重要标签，因为它能够让其他人联系到程序包的相关人员。至少需要填写一个维护者名称，但如果有需要的话你可以添加多个。除了在标签里面填写维护者的名称外，还应该在标签的 *email* 属性中填写邮箱地址。\n许可标签：\n   ```\n <!-- One license tag required, multiple allowed, one license per tag -->\n <!-- Commonly used license strings: -->\n <!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 -->\n <license>TODO</license>\n   ```\n选择一种许可协议并将它填写到这里。一些常见的开源许可协议有BSD、MIT、Boost Software License、GPLv2、GPLv3、LGPLv2.1和LGPLv3。可以在 [Open Source Initiative](https://opensource.org/licenses/alphabetical) 中获取许可协议的相关信息。我们使用BSD协议，因为ROS核心组件的剩余部分已经使用了该协议。\n   ``` \n <license>BSD</license>\n   ```\n依赖项标签：\n依赖项标签用来描述程序包的各种依赖项，包括 build_depend、buildtool_depend、run_depend、test_depend。\n关于这些标签的更详细介绍请参考 [Catkin Dependencies](http://wiki.ros.org/catkin/package.xml#Build.2C_Run.2C_and_Test_Dependencies) 相关的文档。在之前的操作中，因为我们将 std_msgs、 roscpp、 和 rospy 作为 catkin_create_pkg 命令的参数，所以生成的依赖项看起来如下:\n   ```\n <!-- The *_depend tags are used to specify dependencies -->\n <!-- Dependencies can be catkin packages or system dependencies -->\n <!-- Examples: -->\n <!-- Use build_depend for packages you need at compile time: -->\n <!--   <build_depend>genmsg</build_depend> -->\n <!-- Use buildtool_depend for build tool packages: -->\n <!--   <buildtool_depend>catkin</buildtool_depend> -->\n <!-- Use run_depend for packages you need at runtime: -->\n <!--   <run_depend>python-yaml</run_depend> -->\n <!-- Use test_depend for packages you need only for testing: -->\n <!--   <test_depend>gtest</test_depend> -->\n <buildtool_depend>catkin</buildtool_depend>\n <build_depend>roscpp</build_depend>\n <build_depend>rospy</build_depend>\n <build_depend>std_msgs</build_depend>\n   ```\n除了 *catkin* 中默认提供的 *buildtool_depend*，所有我们列出的依赖包都已经被添加到 *build_depend* 标签中。因为在编译和运行时我们需要用到所有指定的依赖包，因此还需要将每一个依赖包分别添加到 *run_depend* 标签中:\n   ```\n <buildtool_depend>catkin</buildtool_depend>\n \n <build_depend>roscpp</build_depend>\n <build_depend>rospy</build_depend>\n <build_depend>std_msgs</build_depend>\n  \n <run_depend>roscpp</run_depend>\n <run_depend>rospy</run_depend>\n <run_depend>std_msgs</run_depend>\n   ```\n完整的 [package.xml](http://wiki.ros.org/catkin/package.xml) :\n   ```\n <?xml version=\"1.0\"?>\n    <package>\n      <name>beginner_tutorials</name>\n      <version>0.1.0</version>\n      <description>The beginner_tutorials package</description>\n    \n      <maintainer email=\"you@yourdomain.tld\">Your Name</maintainer>\n      <license>BSD</license>\n      <url type=\"website\">http://wiki.ros.org/beginner_tutorials</url>\n     <author email=\"you@yourdomain.tld\">Jane Doe</author>\n   \n     <buildtool_depend>catkin</buildtool_depend>\n   \n     <build_depend>roscpp</build_depend>\n     <build_depend>rospy</build_depend>\n     <build_depend>std_msgs</build_depend>\n   \n     <run_depend>roscpp</run_depend>\n     <run_depend>rospy</run_depend>\n     <run_depend>std_msgs</run_depend>\n   \n   </package>\n   ```\n","source":"_posts/ros-primary-tutorial-3.md","raw":"---\ntitle: ROS初级三 创建ROS程序包\ndate: 2017-05-26 11:23:13\ncategories: ROS\ntags: catkin_create_pkg\ncomments: true\n---\n本篇学习 ROS 程序包的创建，使用工具 [catkin_create_pkg](http://wiki.ros.org/catkin/commands/catkin_create_pkg) 创建新程序包。\n# ROS程序包的组成\n ROS 程序包必须包含 [package.xml](http://wiki.ros.org/catkin/package.xml) 文件和 [CMakeLists.txt](http://wiki.ros.org/catkin/CMakeLists.txt) 文件。*package.xml* 提供有关程序包的元信息，每个目录下只能有一个程序包：\n   ```\n beginner_tutorials/     \n  include/                   \n  msg/                       \n  src/                        \n  srv/                       \n  CMakeLists.txt              \n  package.xml \n   ```\n<!--more-->\n# catkin工作空间\n一个简单的 [catkin workspace](http://wiki.ros.org/catkin/workspaces) 结构如下：\n   ```\nworkspace_folder/        -- WORKSPACE\n  src/                   -- SOURCE SPACE\n    CMakeLists.txt       -- 'Toplevel' CMake file, provided by catkin\n    package_1/\n      CMakeLists.txt     -- CMakeLists.txt file for package_1\n      package.xml        -- Package manifest for package_1\n    ...\n    package_n/\n      CMakeLists.txt     -- CMakeLists.txt file for package_n\n      package.xml        -- Package manifest for package_n\n   ```\n# 创建catkin程序包\n使用 [catkin_create_pkg](http://wiki.ros.org/catkin/commands/catkin_create_pkg) 创建自己的 catkin 程序包，格式：\n   ```\n $catkin_create_pkg <package_name> [depend1] [depend2] [depend3]\n   ```\n实例：\n   ```\n $cd ~/catkin_ws/src \n $catkin_create_pkg beginner_tutorials std_msgs rospy roscpp\n   ```\n上面命令创建了一个名为 *beginner_tutorials* 的 catkin 程序包，这个程序包依赖于 std_msgs、roscpp 和 rospy。执行这个命令后在 *~/catkin_ws/src* 目录下将会创建一个名为 *beginner_tutorials* 的文件夹，这个文件夹里面包含一个 *package.xml* 文件和一个 *CMakeLists.txt* 文件，这两个文件都已经自动包含了部分在执行 [catkin_create_pkg](http://wiki.ros.org/catkin/commands/catkin_create_pkg) 命令时提供的信息。 \n# 程序包依赖关系\n可以使用 *rospack* 命令来查看某个程序包的依赖包：\n   ```\n $rospack depends1 beginner_tutorials //查看一级依赖\n   ```\n输出：\n   ```\n roscpp\n rospy\n std_msgs\n   ```\n列出的依赖包正是我们在用 [catkin_create_pkg](http://wiki.ros.org/catkin/commands/catkin_create_pkg) 创建 beginner_tutorials 程序包时指定的依赖包。而这些依赖已经自动添加到 *package.xml* 文件中：\n   ```\n $roscd beginner_tutorials\n $cat package.xml\n   ```\npackage.xml内容：\n   ```\n <package>\n ...\n  <buildtool_depend>catkin</buildtool_depend>\n  <build_depend>roscpp</build_depend>\n  <build_depend>rospy</build_depend>\n  <build_depend>std_msgs</build_depend>\n ...\n </package>\n   ```\n列出所有的间接依赖包：\n   ```\n $rospack depends beginner_tutorials\n cpp_common\n rostime\n roscpp_traits\n roscpp_serialization\n genmsg\n genpy\n message_runtime\n rosconsole\n std_msgs\n rosgraph_msgs\n xmlrpcpp\n roscpp\n rosgraph\n catkin\n rospack\n roslib\n rospy\n   ```\n# 自定义程序包\n修改 *package.xml*, 更新必要的信息。\n描述标签：\n   ```\n<description>The beginner_tutorials package</description>\n   ```\n将描述信息修改为任何喜欢的内容，但是按照约定第一句话应该简短一些，因为它覆盖了程序包的范围。如果用一句话难以描述完全那就需要换行了。\n维护者标签：\n   ```\n\n  <!-- One maintainer tag required, multiple allowed, one person per tag --> \n  <!-- Example:  -->\n  <!-- <maintainer email=\"jane.doe@example.com\">Jane Doe</maintainer> -->\n  <maintainer email=\"user@todo.todo\">user</maintainer> \n   ```\n这是 *package.xml* 中要求填写的一个重要标签，因为它能够让其他人联系到程序包的相关人员。至少需要填写一个维护者名称，但如果有需要的话你可以添加多个。除了在标签里面填写维护者的名称外，还应该在标签的 *email* 属性中填写邮箱地址。\n许可标签：\n   ```\n <!-- One license tag required, multiple allowed, one license per tag -->\n <!-- Commonly used license strings: -->\n <!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 -->\n <license>TODO</license>\n   ```\n选择一种许可协议并将它填写到这里。一些常见的开源许可协议有BSD、MIT、Boost Software License、GPLv2、GPLv3、LGPLv2.1和LGPLv3。可以在 [Open Source Initiative](https://opensource.org/licenses/alphabetical) 中获取许可协议的相关信息。我们使用BSD协议，因为ROS核心组件的剩余部分已经使用了该协议。\n   ``` \n <license>BSD</license>\n   ```\n依赖项标签：\n依赖项标签用来描述程序包的各种依赖项，包括 build_depend、buildtool_depend、run_depend、test_depend。\n关于这些标签的更详细介绍请参考 [Catkin Dependencies](http://wiki.ros.org/catkin/package.xml#Build.2C_Run.2C_and_Test_Dependencies) 相关的文档。在之前的操作中，因为我们将 std_msgs、 roscpp、 和 rospy 作为 catkin_create_pkg 命令的参数，所以生成的依赖项看起来如下:\n   ```\n <!-- The *_depend tags are used to specify dependencies -->\n <!-- Dependencies can be catkin packages or system dependencies -->\n <!-- Examples: -->\n <!-- Use build_depend for packages you need at compile time: -->\n <!--   <build_depend>genmsg</build_depend> -->\n <!-- Use buildtool_depend for build tool packages: -->\n <!--   <buildtool_depend>catkin</buildtool_depend> -->\n <!-- Use run_depend for packages you need at runtime: -->\n <!--   <run_depend>python-yaml</run_depend> -->\n <!-- Use test_depend for packages you need only for testing: -->\n <!--   <test_depend>gtest</test_depend> -->\n <buildtool_depend>catkin</buildtool_depend>\n <build_depend>roscpp</build_depend>\n <build_depend>rospy</build_depend>\n <build_depend>std_msgs</build_depend>\n   ```\n除了 *catkin* 中默认提供的 *buildtool_depend*，所有我们列出的依赖包都已经被添加到 *build_depend* 标签中。因为在编译和运行时我们需要用到所有指定的依赖包，因此还需要将每一个依赖包分别添加到 *run_depend* 标签中:\n   ```\n <buildtool_depend>catkin</buildtool_depend>\n \n <build_depend>roscpp</build_depend>\n <build_depend>rospy</build_depend>\n <build_depend>std_msgs</build_depend>\n  \n <run_depend>roscpp</run_depend>\n <run_depend>rospy</run_depend>\n <run_depend>std_msgs</run_depend>\n   ```\n完整的 [package.xml](http://wiki.ros.org/catkin/package.xml) :\n   ```\n <?xml version=\"1.0\"?>\n    <package>\n      <name>beginner_tutorials</name>\n      <version>0.1.0</version>\n      <description>The beginner_tutorials package</description>\n    \n      <maintainer email=\"you@yourdomain.tld\">Your Name</maintainer>\n      <license>BSD</license>\n      <url type=\"website\">http://wiki.ros.org/beginner_tutorials</url>\n     <author email=\"you@yourdomain.tld\">Jane Doe</author>\n   \n     <buildtool_depend>catkin</buildtool_depend>\n   \n     <build_depend>roscpp</build_depend>\n     <build_depend>rospy</build_depend>\n     <build_depend>std_msgs</build_depend>\n   \n     <run_depend>roscpp</run_depend>\n     <run_depend>rospy</run_depend>\n     <run_depend>std_msgs</run_depend>\n   \n   </package>\n   ```\n","slug":"ros-primary-tutorial-3","published":1,"updated":"2017-06-13T05:55:22.440Z","layout":"post","photos":[],"link":"","_id":"cj4hne53j0024w8inokpt837e","content":"<p>本篇学习 ROS 程序包的创建，使用工具 <a href=\"http://wiki.ros.org/catkin/commands/catkin_create_pkg\" target=\"_blank\" rel=\"external\">catkin_create_pkg</a> 创建新程序包。</p>\n<h1 id=\"ROS程序包的组成\"><a href=\"#ROS程序包的组成\" class=\"headerlink\" title=\"ROS程序包的组成\"></a>ROS程序包的组成</h1><p> ROS 程序包必须包含 <a href=\"http://wiki.ros.org/catkin/package.xml\" target=\"_blank\" rel=\"external\">package.xml</a> 文件和 <a href=\"http://wiki.ros.org/catkin/CMakeLists.txt\" target=\"_blank\" rel=\"external\">CMakeLists.txt</a> 文件。<em>package.xml</em> 提供有关程序包的元信息，每个目录下只能有一个程序包：<br>   <figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">beginner_tutorials/ </span>    </div><div class=\"line\"> <span class=\"meta\">include</span>/                   </div><div class=\"line\"> msg/                       </div><div class=\"line\"> src/                        </div><div class=\"line\"> srv/                       </div><div class=\"line\"> CMakeLists.txt              </div><div class=\"line\"> package.xml</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h1 id=\"catkin工作空间\"><a href=\"#catkin工作空间\" class=\"headerlink\" title=\"catkin工作空间\"></a>catkin工作空间</h1><p>一个简单的 <a href=\"http://wiki.ros.org/catkin/workspaces\" target=\"_blank\" rel=\"external\">catkin workspace</a> 结构如下：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">workspace_folder/        -- WORKSPACE</div><div class=\"line\">  src/                   -- SOURCE SPACE</div><div class=\"line\">    CMakeLists<span class=\"selector-class\">.txt</span>       -- <span class=\"string\">'Toplevel'</span> CMake file, provided by catkin</div><div class=\"line\">    package_1/</div><div class=\"line\">      CMakeLists<span class=\"selector-class\">.txt</span>     -- CMakeLists<span class=\"selector-class\">.txt</span> file <span class=\"keyword\">for</span> package_1</div><div class=\"line\">      package<span class=\"selector-class\">.xml</span>        -- Package manifest <span class=\"keyword\">for</span> package_1</div><div class=\"line\">    ...</div><div class=\"line\">    package_n/</div><div class=\"line\">      CMakeLists<span class=\"selector-class\">.txt</span>     -- CMakeLists<span class=\"selector-class\">.txt</span> file <span class=\"keyword\">for</span> package_n</div><div class=\"line\">      package<span class=\"selector-class\">.xml</span>        -- Package manifest <span class=\"keyword\">for</span> package_n</div></pre></td></tr></table></figure></p>\n<h1 id=\"创建catkin程序包\"><a href=\"#创建catkin程序包\" class=\"headerlink\" title=\"创建catkin程序包\"></a>创建catkin程序包</h1><p>使用 <a href=\"http://wiki.ros.org/catkin/commands/catkin_create_pkg\" target=\"_blank\" rel=\"external\">catkin_create_pkg</a> 创建自己的 catkin 程序包，格式：<br>   <figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$catkin_create_pkg</span> &lt;package_name&gt; <span class=\"selector-attr\">[depend1]</span> <span class=\"selector-attr\">[depend2]</span> <span class=\"selector-attr\">[depend3]</span></div></pre></td></tr></table></figure></p>\n<p>实例：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws/src </span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_create_pkg beginner_tutorials std_msgs rospy roscpp</span></div></pre></td></tr></table></figure></p>\n<p>上面命令创建了一个名为 <em>beginner_tutorials</em> 的 catkin 程序包，这个程序包依赖于 std_msgs、roscpp 和 rospy。执行这个命令后在 <em>~/catkin_ws/src</em> 目录下将会创建一个名为 <em>beginner_tutorials</em> 的文件夹，这个文件夹里面包含一个 <em>package.xml</em> 文件和一个 <em>CMakeLists.txt</em> 文件，这两个文件都已经自动包含了部分在执行 <a href=\"http://wiki.ros.org/catkin/commands/catkin_create_pkg\" target=\"_blank\" rel=\"external\">catkin_create_pkg</a> 命令时提供的信息。 </p>\n<h1 id=\"程序包依赖关系\"><a href=\"#程序包依赖关系\" class=\"headerlink\" title=\"程序包依赖关系\"></a>程序包依赖关系</h1><p>可以使用 <em>rospack</em> 命令来查看某个程序包的依赖包：<br>   <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$rospack</span> depends1 beginner_tutorials <span class=\"regexp\">//</span>查看一级依赖</div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">roscpp</span></div><div class=\"line\">rospy</div><div class=\"line\">std_msgs</div></pre></td></tr></table></figure></p>\n<p>列出的依赖包正是我们在用 <a href=\"http://wiki.ros.org/catkin/commands/catkin_create_pkg\" target=\"_blank\" rel=\"external\">catkin_create_pkg</a> 创建 beginner_tutorials 程序包时指定的依赖包。而这些依赖已经自动添加到 <em>package.xml</em> 文件中：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscd</span> beginner_tutorials</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$cat</span> package.xml</span></div></pre></td></tr></table></figure></p>\n<p>package.xml内容：<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">buildtool_depend</span>&gt;</span>catkin<span class=\"tag\">&lt;/<span class=\"name\">buildtool_depend</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>roscpp<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>rospy<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>列出所有的间接依赖包：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rospack</span> depends beginner_tutorials</span></div><div class=\"line\">cpp_common</div><div class=\"line\">rostime</div><div class=\"line\">roscpp_traits</div><div class=\"line\">roscpp_serialization</div><div class=\"line\">genmsg</div><div class=\"line\">genpy</div><div class=\"line\">message_runtime</div><div class=\"line\">rosconsole</div><div class=\"line\">std_msgs</div><div class=\"line\">rosgraph_msgs</div><div class=\"line\">xmlrpcpp</div><div class=\"line\">roscpp</div><div class=\"line\">rosgraph</div><div class=\"line\">catkin</div><div class=\"line\">rospack</div><div class=\"line\">roslib</div><div class=\"line\">rospy</div></pre></td></tr></table></figure></p>\n<h1 id=\"自定义程序包\"><a href=\"#自定义程序包\" class=\"headerlink\" title=\"自定义程序包\"></a>自定义程序包</h1><p>修改 <em>package.xml</em>, 更新必要的信息。<br>描述标签：<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>The beginner_tutorials package<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>将描述信息修改为任何喜欢的内容，但是按照约定第一句话应该简短一些，因为它覆盖了程序包的范围。如果用一句话难以描述完全那就需要换行了。<br>维护者标签：<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- One maintainer tag required, multiple allowed, one person per tag --&gt;</span> </div><div class=\"line\"><span class=\"comment\">&lt;!-- Example:  --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- &lt;maintainer email=\"jane.doe@example.com\"&gt;Jane Doe&lt;/maintainer&gt; --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">maintainer</span> <span class=\"attr\">email</span>=<span class=\"string\">\"user@todo.todo\"</span>&gt;</span>user<span class=\"tag\">&lt;/<span class=\"name\">maintainer</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这是 <em>package.xml</em> 中要求填写的一个重要标签，因为它能够让其他人联系到程序包的相关人员。至少需要填写一个维护者名称，但如果有需要的话你可以添加多个。除了在标签里面填写维护者的名称外，还应该在标签的 <em>email</em> 属性中填写邮箱地址。<br>许可标签：<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- One license tag required, multiple allowed, one license per tag --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Commonly used license strings: --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">license</span>&gt;</span>TODO<span class=\"tag\">&lt;/<span class=\"name\">license</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>选择一种许可协议并将它填写到这里。一些常见的开源许可协议有BSD、MIT、Boost Software License、GPLv2、GPLv3、LGPLv2.1和LGPLv3。可以在 <a href=\"https://opensource.org/licenses/alphabetical\" target=\"_blank\" rel=\"external\">Open Source Initiative</a> 中获取许可协议的相关信息。我们使用BSD协议，因为ROS核心组件的剩余部分已经使用了该协议。<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">license</span>&gt;</span>BSD<span class=\"tag\">&lt;/<span class=\"name\">license</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>依赖项标签：<br>依赖项标签用来描述程序包的各种依赖项，包括 build_depend、buildtool_depend、run_depend、test_depend。<br>关于这些标签的更详细介绍请参考 <a href=\"http://wiki.ros.org/catkin/package.xml#Build.2C_Run.2C_and_Test_Dependencies\" target=\"_blank\" rel=\"external\">Catkin Dependencies</a> 相关的文档。在之前的操作中，因为我们将 std_msgs、 roscpp、 和 rospy 作为 catkin_create_pkg 命令的参数，所以生成的依赖项看起来如下:<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- The *_depend tags are used to specify dependencies --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Dependencies can be catkin packages or system dependencies --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Examples: --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Use build_depend for packages you need at compile time: --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--   &lt;build_depend&gt;genmsg&lt;/build_depend&gt; --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Use buildtool_depend for build tool packages: --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--   &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt; --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Use run_depend for packages you need at runtime: --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--   &lt;run_depend&gt;python-yaml&lt;/run_depend&gt; --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Use test_depend for packages you need only for testing: --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--   &lt;test_depend&gt;gtest&lt;/test_depend&gt; --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">buildtool_depend</span>&gt;</span>catkin<span class=\"tag\">&lt;/<span class=\"name\">buildtool_depend</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>roscpp<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>rospy<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>除了 <em>catkin</em> 中默认提供的 <em>buildtool_depend</em>，所有我们列出的依赖包都已经被添加到 <em>build_depend</em> 标签中。因为在编译和运行时我们需要用到所有指定的依赖包，因此还需要将每一个依赖包分别添加到 <em>run_depend</em> 标签中:<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">buildtool_depend</span>&gt;</span>catkin<span class=\"tag\">&lt;/<span class=\"name\">buildtool_depend</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>roscpp<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>rospy<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>roscpp<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>rospy<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>完整的 <a href=\"http://wiki.ros.org/catkin/package.xml\" target=\"_blank\" rel=\"external\">package.xml</a> :<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">package</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>beginner_tutorials<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>The beginner_tutorials package<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\">   </div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">maintainer</span> <span class=\"attr\">email</span>=<span class=\"string\">\"you@yourdomain.tld\"</span>&gt;</span>Your Name<span class=\"tag\">&lt;/<span class=\"name\">maintainer</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">license</span>&gt;</span>BSD<span class=\"tag\">&lt;/<span class=\"name\">license</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">url</span> <span class=\"attr\">type</span>=<span class=\"string\">\"website\"</span>&gt;</span>http://wiki.ros.org/beginner_tutorials<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">author</span> <span class=\"attr\">email</span>=<span class=\"string\">\"you@yourdomain.tld\"</span>&gt;</span>Jane Doe<span class=\"tag\">&lt;/<span class=\"name\">author</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">buildtool_depend</span>&gt;</span>catkin<span class=\"tag\">&lt;/<span class=\"name\">buildtool_depend</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>roscpp<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>rospy<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>roscpp<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>rospy<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>本篇学习 ROS 程序包的创建，使用工具 <a href=\"http://wiki.ros.org/catkin/commands/catkin_create_pkg\" target=\"_blank\" rel=\"external\">catkin_create_pkg</a> 创建新程序包。</p>\n<h1 id=\"ROS程序包的组成\"><a href=\"#ROS程序包的组成\" class=\"headerlink\" title=\"ROS程序包的组成\"></a>ROS程序包的组成</h1><p> ROS 程序包必须包含 <a href=\"http://wiki.ros.org/catkin/package.xml\" target=\"_blank\" rel=\"external\">package.xml</a> 文件和 <a href=\"http://wiki.ros.org/catkin/CMakeLists.txt\" target=\"_blank\" rel=\"external\">CMakeLists.txt</a> 文件。<em>package.xml</em> 提供有关程序包的元信息，每个目录下只能有一个程序包：<br>   <figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">beginner_tutorials/ </span>    </div><div class=\"line\"> <span class=\"meta\">include</span>/                   </div><div class=\"line\"> msg/                       </div><div class=\"line\"> src/                        </div><div class=\"line\"> srv/                       </div><div class=\"line\"> CMakeLists.txt              </div><div class=\"line\"> package.xml</div></pre></td></tr></table></figure></p>","more":"<h1 id=\"catkin工作空间\"><a href=\"#catkin工作空间\" class=\"headerlink\" title=\"catkin工作空间\"></a>catkin工作空间</h1><p>一个简单的 <a href=\"http://wiki.ros.org/catkin/workspaces\" target=\"_blank\" rel=\"external\">catkin workspace</a> 结构如下：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">workspace_folder/        -- WORKSPACE</div><div class=\"line\">  src/                   -- SOURCE SPACE</div><div class=\"line\">    CMakeLists<span class=\"selector-class\">.txt</span>       -- <span class=\"string\">'Toplevel'</span> CMake file, provided by catkin</div><div class=\"line\">    package_1/</div><div class=\"line\">      CMakeLists<span class=\"selector-class\">.txt</span>     -- CMakeLists<span class=\"selector-class\">.txt</span> file <span class=\"keyword\">for</span> package_1</div><div class=\"line\">      package<span class=\"selector-class\">.xml</span>        -- Package manifest <span class=\"keyword\">for</span> package_1</div><div class=\"line\">    ...</div><div class=\"line\">    package_n/</div><div class=\"line\">      CMakeLists<span class=\"selector-class\">.txt</span>     -- CMakeLists<span class=\"selector-class\">.txt</span> file <span class=\"keyword\">for</span> package_n</div><div class=\"line\">      package<span class=\"selector-class\">.xml</span>        -- Package manifest <span class=\"keyword\">for</span> package_n</div></pre></td></tr></table></figure></p>\n<h1 id=\"创建catkin程序包\"><a href=\"#创建catkin程序包\" class=\"headerlink\" title=\"创建catkin程序包\"></a>创建catkin程序包</h1><p>使用 <a href=\"http://wiki.ros.org/catkin/commands/catkin_create_pkg\" target=\"_blank\" rel=\"external\">catkin_create_pkg</a> 创建自己的 catkin 程序包，格式：<br>   <figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$catkin_create_pkg</span> &lt;package_name&gt; <span class=\"selector-attr\">[depend1]</span> <span class=\"selector-attr\">[depend2]</span> <span class=\"selector-attr\">[depend3]</span></div></pre></td></tr></table></figure></p>\n<p>实例：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws/src </span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_create_pkg beginner_tutorials std_msgs rospy roscpp</span></div></pre></td></tr></table></figure></p>\n<p>上面命令创建了一个名为 <em>beginner_tutorials</em> 的 catkin 程序包，这个程序包依赖于 std_msgs、roscpp 和 rospy。执行这个命令后在 <em>~/catkin_ws/src</em> 目录下将会创建一个名为 <em>beginner_tutorials</em> 的文件夹，这个文件夹里面包含一个 <em>package.xml</em> 文件和一个 <em>CMakeLists.txt</em> 文件，这两个文件都已经自动包含了部分在执行 <a href=\"http://wiki.ros.org/catkin/commands/catkin_create_pkg\" target=\"_blank\" rel=\"external\">catkin_create_pkg</a> 命令时提供的信息。 </p>\n<h1 id=\"程序包依赖关系\"><a href=\"#程序包依赖关系\" class=\"headerlink\" title=\"程序包依赖关系\"></a>程序包依赖关系</h1><p>可以使用 <em>rospack</em> 命令来查看某个程序包的依赖包：<br>   <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$rospack</span> depends1 beginner_tutorials <span class=\"regexp\">//</span>查看一级依赖</div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">roscpp</span></div><div class=\"line\">rospy</div><div class=\"line\">std_msgs</div></pre></td></tr></table></figure></p>\n<p>列出的依赖包正是我们在用 <a href=\"http://wiki.ros.org/catkin/commands/catkin_create_pkg\" target=\"_blank\" rel=\"external\">catkin_create_pkg</a> 创建 beginner_tutorials 程序包时指定的依赖包。而这些依赖已经自动添加到 <em>package.xml</em> 文件中：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscd</span> beginner_tutorials</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$cat</span> package.xml</span></div></pre></td></tr></table></figure></p>\n<p>package.xml内容：<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">buildtool_depend</span>&gt;</span>catkin<span class=\"tag\">&lt;/<span class=\"name\">buildtool_depend</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>roscpp<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>rospy<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>列出所有的间接依赖包：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rospack</span> depends beginner_tutorials</span></div><div class=\"line\">cpp_common</div><div class=\"line\">rostime</div><div class=\"line\">roscpp_traits</div><div class=\"line\">roscpp_serialization</div><div class=\"line\">genmsg</div><div class=\"line\">genpy</div><div class=\"line\">message_runtime</div><div class=\"line\">rosconsole</div><div class=\"line\">std_msgs</div><div class=\"line\">rosgraph_msgs</div><div class=\"line\">xmlrpcpp</div><div class=\"line\">roscpp</div><div class=\"line\">rosgraph</div><div class=\"line\">catkin</div><div class=\"line\">rospack</div><div class=\"line\">roslib</div><div class=\"line\">rospy</div></pre></td></tr></table></figure></p>\n<h1 id=\"自定义程序包\"><a href=\"#自定义程序包\" class=\"headerlink\" title=\"自定义程序包\"></a>自定义程序包</h1><p>修改 <em>package.xml</em>, 更新必要的信息。<br>描述标签：<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>The beginner_tutorials package<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>将描述信息修改为任何喜欢的内容，但是按照约定第一句话应该简短一些，因为它覆盖了程序包的范围。如果用一句话难以描述完全那就需要换行了。<br>维护者标签：<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- One maintainer tag required, multiple allowed, one person per tag --&gt;</span> </div><div class=\"line\"><span class=\"comment\">&lt;!-- Example:  --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- &lt;maintainer email=\"jane.doe@example.com\"&gt;Jane Doe&lt;/maintainer&gt; --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">maintainer</span> <span class=\"attr\">email</span>=<span class=\"string\">\"user@todo.todo\"</span>&gt;</span>user<span class=\"tag\">&lt;/<span class=\"name\">maintainer</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这是 <em>package.xml</em> 中要求填写的一个重要标签，因为它能够让其他人联系到程序包的相关人员。至少需要填写一个维护者名称，但如果有需要的话你可以添加多个。除了在标签里面填写维护者的名称外，还应该在标签的 <em>email</em> 属性中填写邮箱地址。<br>许可标签：<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- One license tag required, multiple allowed, one license per tag --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Commonly used license strings: --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">license</span>&gt;</span>TODO<span class=\"tag\">&lt;/<span class=\"name\">license</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>选择一种许可协议并将它填写到这里。一些常见的开源许可协议有BSD、MIT、Boost Software License、GPLv2、GPLv3、LGPLv2.1和LGPLv3。可以在 <a href=\"https://opensource.org/licenses/alphabetical\" target=\"_blank\" rel=\"external\">Open Source Initiative</a> 中获取许可协议的相关信息。我们使用BSD协议，因为ROS核心组件的剩余部分已经使用了该协议。<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">license</span>&gt;</span>BSD<span class=\"tag\">&lt;/<span class=\"name\">license</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>依赖项标签：<br>依赖项标签用来描述程序包的各种依赖项，包括 build_depend、buildtool_depend、run_depend、test_depend。<br>关于这些标签的更详细介绍请参考 <a href=\"http://wiki.ros.org/catkin/package.xml#Build.2C_Run.2C_and_Test_Dependencies\" target=\"_blank\" rel=\"external\">Catkin Dependencies</a> 相关的文档。在之前的操作中，因为我们将 std_msgs、 roscpp、 和 rospy 作为 catkin_create_pkg 命令的参数，所以生成的依赖项看起来如下:<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- The *_depend tags are used to specify dependencies --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Dependencies can be catkin packages or system dependencies --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Examples: --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Use build_depend for packages you need at compile time: --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--   &lt;build_depend&gt;genmsg&lt;/build_depend&gt; --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Use buildtool_depend for build tool packages: --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--   &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt; --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Use run_depend for packages you need at runtime: --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--   &lt;run_depend&gt;python-yaml&lt;/run_depend&gt; --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Use test_depend for packages you need only for testing: --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--   &lt;test_depend&gt;gtest&lt;/test_depend&gt; --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">buildtool_depend</span>&gt;</span>catkin<span class=\"tag\">&lt;/<span class=\"name\">buildtool_depend</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>roscpp<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>rospy<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>除了 <em>catkin</em> 中默认提供的 <em>buildtool_depend</em>，所有我们列出的依赖包都已经被添加到 <em>build_depend</em> 标签中。因为在编译和运行时我们需要用到所有指定的依赖包，因此还需要将每一个依赖包分别添加到 <em>run_depend</em> 标签中:<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">buildtool_depend</span>&gt;</span>catkin<span class=\"tag\">&lt;/<span class=\"name\">buildtool_depend</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>roscpp<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>rospy<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>roscpp<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>rospy<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>完整的 <a href=\"http://wiki.ros.org/catkin/package.xml\" target=\"_blank\" rel=\"external\">package.xml</a> :<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">package</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>beginner_tutorials<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>The beginner_tutorials package<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\">   </div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">maintainer</span> <span class=\"attr\">email</span>=<span class=\"string\">\"you@yourdomain.tld\"</span>&gt;</span>Your Name<span class=\"tag\">&lt;/<span class=\"name\">maintainer</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">license</span>&gt;</span>BSD<span class=\"tag\">&lt;/<span class=\"name\">license</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">url</span> <span class=\"attr\">type</span>=<span class=\"string\">\"website\"</span>&gt;</span>http://wiki.ros.org/beginner_tutorials<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">author</span> <span class=\"attr\">email</span>=<span class=\"string\">\"you@yourdomain.tld\"</span>&gt;</span>Jane Doe<span class=\"tag\">&lt;/<span class=\"name\">author</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">buildtool_depend</span>&gt;</span>catkin<span class=\"tag\">&lt;/<span class=\"name\">buildtool_depend</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>roscpp<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>rospy<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>roscpp<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>rospy<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure></p>"},{"title":"ROS初级六 理解ROS话题","date":"2017-05-27T05:13:54.000Z","comments":1,"_content":"本篇学习 ROS 中的话题 [Topics](http://wiki.ros.org/rostopic) 以及 [Topics](http://wiki.ros.org/rostopic) 的使用。源码位于 [ROS-communications](https://github.com/ros/ros_comm)。开始之前我们先运行 turtlesim 节点，并用键盘来控制它的移动。开一个 terminal 运行：\n   ```\n $ roscore &\n $ rosrun turtlesim turtlesim_node\n   ```\n开启另外一个 terminal 运行键盘控制节点：\n   ```\n $rosrun turtlesim turtle_teleop_key\n   ```\n<!--more-->\n现在随便移动键盘的方向键，看看 图画里的 turtle 是否在跟随你的指令移动:\n\n![](ros-primary-tutorial-6/turtlesim.jpg)\n在此期间键盘是如何控制它移动的，期间到底发生了什么，下面我们来进一步分析。\n\n# 理解话题\n为了更形象的理解话题，我们使用工具 [rqt_graph](http://wiki.ros.org/rqt_graph)，如果没有安装则通过以下命令安装：\n   ```\n $ sudo apt-get install ros-indigo-rqt //如果使用的其他发行版替换indigo即可\n $ sudo apt-get install ros-indigo-rqt-common-plugins\n   ```\n保持前面的 turtlesim 节点在运行状态，新开一个 terminal 运行 [rqt_graph](http://wiki.ros.org/rqt_graph):\n   ```\n $ rosrun rqt_graph rqt_graph\n   ```\n我们会看到下图：\n![](ros-primary-tutorial-6/rqtgraph.jpg)\n将鼠标放置于/turtle1/cmd_vel 上，相应的ROS节点和话题就会高亮显示，turtlesim 和 teleop_turtle 两个节点通过话题 /turtle1/cmd_vel 进行通信。我们可以使用 rostopic 工具查看话题的相关信息。\n用法：\n   ```\nrostopic echo [topic]\n   ```\n示例：\n   ```\n$ rostopic echo /turtle1/cmd_vel\n   ```\n这个时候按键盘的向下方向键会看到如下信息：\n   ```\n linear:\n   x: -2.0\n   y: 0.0\n   z: 0.0\n angular:\n   x: 0.0\n   y: 0.0\n   z: 0.0\n\n   ```\n此时刷新一下 rqt_graph 就会看到又多了一个订阅话题 /turtle1/cmd_vel 的节点，红色部分就是。\n\n![](ros-primary-tutorial-6/topic.jpg)\n\n# 查看话题\nrostopic list 能够列出所有当前订阅和发布的话题，保持前面的各个节点处于运行状态：\n   ```\n$ rostopic list -v\n   ```\n此时会输出：\n   ```\nPublished topics:\n * /turtle1/color_sensor [turtlesim/Color] 1 publisher\n * /turtle1/cmd_vel [geometry_msgs/Twist] 1 publisher\n * /rosout [rosgraph_msgs/Log] 4 publishers\n * /rosout_agg [rosgraph_msgs/Log] 1 publisher\n * /turtle1/pose [turtlesim/Pose] 1 publisher\n\nSubscribed topics:\n * /turtle1/cmd_vel [geometry_msgs/Twist] 2 subscribers\n * /rosout [rosgraph_msgs/Log] 1 subscriber\n * /statistics [rosgraph_msgs/TopicStatistics] 1 subscriber\n   ```\n上面列出了所有的订阅和发布的话题及其类型。关于 rostopic list 的其他使用方法可通过帮助命令查看：\n   ```\n $rostopic list -h\n   ```\n# 理解消息\n话题之间的通信是通过在节点之间发送消息 [Ros Messages](http://wiki.ros.org/Messages) 实现的。发布器 teleop_turtle 和订阅器 turtlesim 之间必须发送和接收相同类型的消息才能通信。也就是说话题的类型是由发布在它上面的消息类型决定的。使用 rostopic type 命令可以查看发布在某个话题上的消息类型：\n用法：  \n   ```\nrostopic type [topic]\n   ```\n示例：\n   ```\n$ rostopic type turtle1/cmd_vel //查看话题 turtle1/cmd_vel 上的消息类型\n   ```\n一般会输出：\n   ```\ngeometry_msgs/Twist\n   ```\n可以使用 [rosmsg](http://wiki.ros.org/rosmsg) 命令查看消息的详细类型：\n   ```\n$ rosmsg show geometry_msgs/Twist\n   ```\n输出：\n   ```\ngeometry_msgs/Vector3 linear\n  float64 x\n  float64 y\n  float64 z\ngeometry_msgs/Vector3 angular\n  float64 x\n  float64 y\n  float64 z\n   ```\n上面可以看到消息  geometry_msgs/Twist 的类型 一个是 x y z 三轴的线速度，另外一个是 x y z 三轴的角速度。\n\n# 使用话题\nrostopic pub 可以把消息发布到某个正在广播的话题上。\n用法：\n   ```\nrostopic pub [topic] [msg_type] [args]\n   ```\n示例：\n   ```\n$ rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'\n   ```\n该命令会发送一条消息到话题 /turtle1/cmd_vel 上，并使得 turtlesim 以2.0大小的线速度和1.8大小的角速度开始移动。 -1 的意思是发布一条消息后马上退出，geometry_msgs/Twist 为消息类型，后面是 x y z 的数值，前面一组代表线速度，后面一组代表角速度。geometry_msgs/Twist 消息里包含两组浮点类型元素 linear 和 angular 。参数格式遵循 [YAML](http://wiki.ros.org/ROS/YAMLCommandLine) 语法。\n上面的命令并没有让 turtle 保持一直运动，因为我们的命令只发布了一次就退出了，而要使其一直运动需要控制命令的发布频率：\n   ```\n$ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'\n   ```\n这条命令以 1hz 的频率发布消息到话题 /turtle1/cmd_vel 上，参数 -r 表示频率,后面的 1 为 1hz,此时会看到 turtle 沿着圆形轨迹不停的转动。\n使用 rostopic hz 命令可以查看消息发布的频率\n用法：\n   ```\n rostopic hz [topic]\n   ```\n示例：\n   ```\n $ rostopic hz /turtle1/cmd_vel\n   ```\n输出：\n   ```\nsubscribed to [/turtle1/cmd_vel]\naverage rate: 1.000\n        min: 1.000s max: 1.000s std dev: 0.00000s window: 2\n   ```\n可见消息发布的频率正如我们前面的设置1 hz。我们也可以查看话题 /turtle1/pose 的发布频率：\n   ```\n $ rostopic hz /turtle1/pose\n   ```\n输出：\n   ```\nsubscribed to [/turtle1/pose]\naverage rate: 62.534\n        min: 0.015s max: 0.017s std dev: 0.00052s window: 61\n   ```\n可见 turtlesim 正以大约62hz 的频率发布数据给 turtle ，这个应该是位置数据。我们也可以结合 rostopic type 和 rosmsg show 命令来获取关于某个话题的更深层次的信息。\n   ```\n $rostopic type /turtle1/cmd_vel | rosmsg show\n   ```\n# 使用rqt_plot\n\n[rqt_plot](http://wiki.ros.org/rqt_plot) 是 [Qt](https://www.qt.io/) 开发的图形用户界面，可以将某个话题上的数据以图形的方式实时的绘制出来，如果没有安装首先通过以下命令安装，参考[rqt_plot](http://wiki.ros.org/rqt_plot):\n\n   ```\n $ sudo apt-get install ros-indigo-rqt\n $ sudo apt-get install ros-indigo-rqt-common-plugins\n   ```\n使用：\n   ```\n $ rosrun rqt_plot rqt_plot\n   ```\n窗口左上角可以添加需要的话题，右边的减号可以删除不需要的话题。点击那个绿色的对号按钮可以调节时间和坐标等信息：\n![](ros-primary-tutorial-6/rqtplot.jpg)\n\n更多 rqt_plot 的使用请参阅官方文档 [rqt_plot](http://wiki.ros.org/rqt_plot) 或 [rosindex-rqt_plot](http://rosindex.github.io/p/rqt_plot/#indigo) \n\n参考 [UnderstandingTopics](http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingTopics)\n\n","source":"_posts/ros-primary-tutorial-6.md","raw":"---\ntitle: ROS初级六 理解ROS话题\ndate: 2017-05-27 13:13:54\ncategories: ROS\ntags: ROS Topics\ncomments: true\n---\n本篇学习 ROS 中的话题 [Topics](http://wiki.ros.org/rostopic) 以及 [Topics](http://wiki.ros.org/rostopic) 的使用。源码位于 [ROS-communications](https://github.com/ros/ros_comm)。开始之前我们先运行 turtlesim 节点，并用键盘来控制它的移动。开一个 terminal 运行：\n   ```\n $ roscore &\n $ rosrun turtlesim turtlesim_node\n   ```\n开启另外一个 terminal 运行键盘控制节点：\n   ```\n $rosrun turtlesim turtle_teleop_key\n   ```\n<!--more-->\n现在随便移动键盘的方向键，看看 图画里的 turtle 是否在跟随你的指令移动:\n\n![](ros-primary-tutorial-6/turtlesim.jpg)\n在此期间键盘是如何控制它移动的，期间到底发生了什么，下面我们来进一步分析。\n\n# 理解话题\n为了更形象的理解话题，我们使用工具 [rqt_graph](http://wiki.ros.org/rqt_graph)，如果没有安装则通过以下命令安装：\n   ```\n $ sudo apt-get install ros-indigo-rqt //如果使用的其他发行版替换indigo即可\n $ sudo apt-get install ros-indigo-rqt-common-plugins\n   ```\n保持前面的 turtlesim 节点在运行状态，新开一个 terminal 运行 [rqt_graph](http://wiki.ros.org/rqt_graph):\n   ```\n $ rosrun rqt_graph rqt_graph\n   ```\n我们会看到下图：\n![](ros-primary-tutorial-6/rqtgraph.jpg)\n将鼠标放置于/turtle1/cmd_vel 上，相应的ROS节点和话题就会高亮显示，turtlesim 和 teleop_turtle 两个节点通过话题 /turtle1/cmd_vel 进行通信。我们可以使用 rostopic 工具查看话题的相关信息。\n用法：\n   ```\nrostopic echo [topic]\n   ```\n示例：\n   ```\n$ rostopic echo /turtle1/cmd_vel\n   ```\n这个时候按键盘的向下方向键会看到如下信息：\n   ```\n linear:\n   x: -2.0\n   y: 0.0\n   z: 0.0\n angular:\n   x: 0.0\n   y: 0.0\n   z: 0.0\n\n   ```\n此时刷新一下 rqt_graph 就会看到又多了一个订阅话题 /turtle1/cmd_vel 的节点，红色部分就是。\n\n![](ros-primary-tutorial-6/topic.jpg)\n\n# 查看话题\nrostopic list 能够列出所有当前订阅和发布的话题，保持前面的各个节点处于运行状态：\n   ```\n$ rostopic list -v\n   ```\n此时会输出：\n   ```\nPublished topics:\n * /turtle1/color_sensor [turtlesim/Color] 1 publisher\n * /turtle1/cmd_vel [geometry_msgs/Twist] 1 publisher\n * /rosout [rosgraph_msgs/Log] 4 publishers\n * /rosout_agg [rosgraph_msgs/Log] 1 publisher\n * /turtle1/pose [turtlesim/Pose] 1 publisher\n\nSubscribed topics:\n * /turtle1/cmd_vel [geometry_msgs/Twist] 2 subscribers\n * /rosout [rosgraph_msgs/Log] 1 subscriber\n * /statistics [rosgraph_msgs/TopicStatistics] 1 subscriber\n   ```\n上面列出了所有的订阅和发布的话题及其类型。关于 rostopic list 的其他使用方法可通过帮助命令查看：\n   ```\n $rostopic list -h\n   ```\n# 理解消息\n话题之间的通信是通过在节点之间发送消息 [Ros Messages](http://wiki.ros.org/Messages) 实现的。发布器 teleop_turtle 和订阅器 turtlesim 之间必须发送和接收相同类型的消息才能通信。也就是说话题的类型是由发布在它上面的消息类型决定的。使用 rostopic type 命令可以查看发布在某个话题上的消息类型：\n用法：  \n   ```\nrostopic type [topic]\n   ```\n示例：\n   ```\n$ rostopic type turtle1/cmd_vel //查看话题 turtle1/cmd_vel 上的消息类型\n   ```\n一般会输出：\n   ```\ngeometry_msgs/Twist\n   ```\n可以使用 [rosmsg](http://wiki.ros.org/rosmsg) 命令查看消息的详细类型：\n   ```\n$ rosmsg show geometry_msgs/Twist\n   ```\n输出：\n   ```\ngeometry_msgs/Vector3 linear\n  float64 x\n  float64 y\n  float64 z\ngeometry_msgs/Vector3 angular\n  float64 x\n  float64 y\n  float64 z\n   ```\n上面可以看到消息  geometry_msgs/Twist 的类型 一个是 x y z 三轴的线速度，另外一个是 x y z 三轴的角速度。\n\n# 使用话题\nrostopic pub 可以把消息发布到某个正在广播的话题上。\n用法：\n   ```\nrostopic pub [topic] [msg_type] [args]\n   ```\n示例：\n   ```\n$ rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'\n   ```\n该命令会发送一条消息到话题 /turtle1/cmd_vel 上，并使得 turtlesim 以2.0大小的线速度和1.8大小的角速度开始移动。 -1 的意思是发布一条消息后马上退出，geometry_msgs/Twist 为消息类型，后面是 x y z 的数值，前面一组代表线速度，后面一组代表角速度。geometry_msgs/Twist 消息里包含两组浮点类型元素 linear 和 angular 。参数格式遵循 [YAML](http://wiki.ros.org/ROS/YAMLCommandLine) 语法。\n上面的命令并没有让 turtle 保持一直运动，因为我们的命令只发布了一次就退出了，而要使其一直运动需要控制命令的发布频率：\n   ```\n$ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'\n   ```\n这条命令以 1hz 的频率发布消息到话题 /turtle1/cmd_vel 上，参数 -r 表示频率,后面的 1 为 1hz,此时会看到 turtle 沿着圆形轨迹不停的转动。\n使用 rostopic hz 命令可以查看消息发布的频率\n用法：\n   ```\n rostopic hz [topic]\n   ```\n示例：\n   ```\n $ rostopic hz /turtle1/cmd_vel\n   ```\n输出：\n   ```\nsubscribed to [/turtle1/cmd_vel]\naverage rate: 1.000\n        min: 1.000s max: 1.000s std dev: 0.00000s window: 2\n   ```\n可见消息发布的频率正如我们前面的设置1 hz。我们也可以查看话题 /turtle1/pose 的发布频率：\n   ```\n $ rostopic hz /turtle1/pose\n   ```\n输出：\n   ```\nsubscribed to [/turtle1/pose]\naverage rate: 62.534\n        min: 0.015s max: 0.017s std dev: 0.00052s window: 61\n   ```\n可见 turtlesim 正以大约62hz 的频率发布数据给 turtle ，这个应该是位置数据。我们也可以结合 rostopic type 和 rosmsg show 命令来获取关于某个话题的更深层次的信息。\n   ```\n $rostopic type /turtle1/cmd_vel | rosmsg show\n   ```\n# 使用rqt_plot\n\n[rqt_plot](http://wiki.ros.org/rqt_plot) 是 [Qt](https://www.qt.io/) 开发的图形用户界面，可以将某个话题上的数据以图形的方式实时的绘制出来，如果没有安装首先通过以下命令安装，参考[rqt_plot](http://wiki.ros.org/rqt_plot):\n\n   ```\n $ sudo apt-get install ros-indigo-rqt\n $ sudo apt-get install ros-indigo-rqt-common-plugins\n   ```\n使用：\n   ```\n $ rosrun rqt_plot rqt_plot\n   ```\n窗口左上角可以添加需要的话题，右边的减号可以删除不需要的话题。点击那个绿色的对号按钮可以调节时间和坐标等信息：\n![](ros-primary-tutorial-6/rqtplot.jpg)\n\n更多 rqt_plot 的使用请参阅官方文档 [rqt_plot](http://wiki.ros.org/rqt_plot) 或 [rosindex-rqt_plot](http://rosindex.github.io/p/rqt_plot/#indigo) \n\n参考 [UnderstandingTopics](http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingTopics)\n\n","slug":"ros-primary-tutorial-6","published":1,"updated":"2017-06-13T05:54:56.873Z","layout":"post","photos":[],"link":"","_id":"cj4hne53k0027w8inw4bfs2sr","content":"<p>本篇学习 ROS 中的话题 <a href=\"http://wiki.ros.org/rostopic\" target=\"_blank\" rel=\"external\">Topics</a> 以及 <a href=\"http://wiki.ros.org/rostopic\" target=\"_blank\" rel=\"external\">Topics</a> 的使用。源码位于 <a href=\"https://github.com/ros/ros_comm\" target=\"_blank\" rel=\"external\">ROS-communications</a>。开始之前我们先运行 turtlesim 节点，并用键盘来控制它的移动。开一个 terminal 运行：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscore &amp;</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>\n<p>开启另外一个 terminal 运行键盘控制节点：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> turtlesim turtle_teleop_key</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>现在随便移动键盘的方向键，看看 图画里的 turtle 是否在跟随你的指令移动:</p>\n<p><img src=\"/2017/05/27/ros-primary-tutorial-6/turtlesim.jpg\" alt=\"\"><br>在此期间键盘是如何控制它移动的，期间到底发生了什么，下面我们来进一步分析。</p>\n<h1 id=\"理解话题\"><a href=\"#理解话题\" class=\"headerlink\" title=\"理解话题\"></a>理解话题</h1><p>为了更形象的理解话题，我们使用工具 <a href=\"http://wiki.ros.org/rqt_graph\" target=\"_blank\" rel=\"external\">rqt_graph</a>，如果没有安装则通过以下命令安装：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install ros-indigo-rqt //如果使用的其他发行版替换indigo即可</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install ros-indigo-rqt-common-plugins</span></div></pre></td></tr></table></figure></p>\n<p>保持前面的 turtlesim 节点在运行状态，新开一个 terminal 运行 <a href=\"http://wiki.ros.org/rqt_graph\" target=\"_blank\" rel=\"external\">rqt_graph</a>:<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun rqt_graph rqt_graph</span></div></pre></td></tr></table></figure></p>\n<p>我们会看到下图：<br><img src=\"/2017/05/27/ros-primary-tutorial-6/rqtgraph.jpg\" alt=\"\"><br>将鼠标放置于/turtle1/cmd_vel 上，相应的ROS节点和话题就会高亮显示，turtlesim 和 teleop_turtle 两个节点通过话题 /turtle1/cmd_vel 进行通信。我们可以使用 rostopic 工具查看话题的相关信息。<br>用法：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rostopic echo <span class=\"string\">[topic]</span></div></pre></td></tr></table></figure></p>\n<p>示例：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rostopic <span class=\"built_in\">echo</span> /turtle1/cmd_vel</span></div></pre></td></tr></table></figure></p>\n<p>这个时候按键盘的向下方向键会看到如下信息：<br>   <figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">linear:</span></div><div class=\"line\"><span class=\"symbol\">  x:</span> <span class=\"number\">-2.0</span></div><div class=\"line\"><span class=\"symbol\">  y:</span> <span class=\"number\">0.0</span></div><div class=\"line\"><span class=\"symbol\">  z:</span> <span class=\"number\">0.0</span></div><div class=\"line\"><span class=\"symbol\">angular:</span></div><div class=\"line\"><span class=\"symbol\">  x:</span> <span class=\"number\">0.0</span></div><div class=\"line\"><span class=\"symbol\">  y:</span> <span class=\"number\">0.0</span></div><div class=\"line\"><span class=\"symbol\">  z:</span> <span class=\"number\">0.0</span></div></pre></td></tr></table></figure></p>\n<p>此时刷新一下 rqt_graph 就会看到又多了一个订阅话题 /turtle1/cmd_vel 的节点，红色部分就是。</p>\n<p><img src=\"/2017/05/27/ros-primary-tutorial-6/topic.jpg\" alt=\"\"></p>\n<h1 id=\"查看话题\"><a href=\"#查看话题\" class=\"headerlink\" title=\"查看话题\"></a>查看话题</h1><p>rostopic list 能够列出所有当前订阅和发布的话题，保持前面的各个节点处于运行状态：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rostopic list -v</span></div></pre></td></tr></table></figure></p>\n<p>此时会输出：<br>   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Published <span class=\"string\">topics:</span></div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>color_sensor [turtlesim/Color] <span class=\"number\">1</span> publisher</div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>cmd_vel [geometry_msgs/Twist] <span class=\"number\">1</span> publisher</div><div class=\"line\"> * <span class=\"regexp\">/rosout [rosgraph_msgs/</span>Log] <span class=\"number\">4</span> publishers</div><div class=\"line\"> * <span class=\"regexp\">/rosout_agg [rosgraph_msgs/</span>Log] <span class=\"number\">1</span> publisher</div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>pose [turtlesim/Pose] <span class=\"number\">1</span> publisher</div><div class=\"line\"></div><div class=\"line\">Subscribed <span class=\"string\">topics:</span></div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>cmd_vel [geometry_msgs/Twist] <span class=\"number\">2</span> subscribers</div><div class=\"line\"> * <span class=\"regexp\">/rosout [rosgraph_msgs/</span>Log] <span class=\"number\">1</span> subscriber</div><div class=\"line\"> * <span class=\"regexp\">/statistics [rosgraph_msgs/</span>TopicStatistics] <span class=\"number\">1</span> subscriber</div></pre></td></tr></table></figure></p>\n<p>上面列出了所有的订阅和发布的话题及其类型。关于 rostopic list 的其他使用方法可通过帮助命令查看：<br>   <figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$rostopic</span> <span class=\"keyword\">list</span> -<span class=\"built_in\">h</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"理解消息\"><a href=\"#理解消息\" class=\"headerlink\" title=\"理解消息\"></a>理解消息</h1><p>话题之间的通信是通过在节点之间发送消息 <a href=\"http://wiki.ros.org/Messages\" target=\"_blank\" rel=\"external\">Ros Messages</a> 实现的。发布器 teleop_turtle 和订阅器 turtlesim 之间必须发送和接收相同类型的消息才能通信。也就是说话题的类型是由发布在它上面的消息类型决定的。使用 rostopic type 命令可以查看发布在某个话题上的消息类型：<br>用法：<br>   <figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">rostopic</span> <span class=\"keyword\">type</span> [topic]</div></pre></td></tr></table></figure></p>\n<p>示例：<br>   <figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rostopic <span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">turtle1</span></span>/cmd_vel <span class=\"comment\">//查看话题 turtle1/cmd_vel 上的消息类型</span></div></pre></td></tr></table></figure></p>\n<p>一般会输出：<br>   <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">geometry_msgs/Twist</div></pre></td></tr></table></figure></p>\n<p>可以使用 <a href=\"http://wiki.ros.org/rosmsg\" target=\"_blank\" rel=\"external\">rosmsg</a> 命令查看消息的详细类型：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosmsg show geometry_msgs/Twist</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">geometry_msgs/Vector3 linear</div><div class=\"line\">  <span class=\"built_in\">float</span>64 x</div><div class=\"line\">  <span class=\"built_in\">float</span>64 y</div><div class=\"line\">  <span class=\"built_in\">float</span>64 z</div><div class=\"line\">geometry_msgs/Vector3 angular</div><div class=\"line\">  <span class=\"built_in\">float</span>64 x</div><div class=\"line\">  <span class=\"built_in\">float</span>64 y</div><div class=\"line\">  <span class=\"built_in\">float</span>64 z</div></pre></td></tr></table></figure></p>\n<p>上面可以看到消息  geometry_msgs/Twist 的类型 一个是 x y z 三轴的线速度，另外一个是 x y z 三轴的角速度。</p>\n<h1 id=\"使用话题\"><a href=\"#使用话题\" class=\"headerlink\" title=\"使用话题\"></a>使用话题</h1><p>rostopic pub 可以把消息发布到某个正在广播的话题上。<br>用法：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rostopic pub <span class=\"string\">[topic]</span> <span class=\"string\">[msg_type]</span> <span class=\"string\">[args]</span></div></pre></td></tr></table></figure></p>\n<p>示例：<br>   <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rostopic pub <span class=\"number\">-1</span> /turtle1/cmd_vel geometry_msgs/Twist -- '[<span class=\"number\">2.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>]' '[<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.8</span>]'</div></pre></td></tr></table></figure></p>\n<p>该命令会发送一条消息到话题 /turtle1/cmd_vel 上，并使得 turtlesim 以2.0大小的线速度和1.8大小的角速度开始移动。 -1 的意思是发布一条消息后马上退出，geometry_msgs/Twist 为消息类型，后面是 x y z 的数值，前面一组代表线速度，后面一组代表角速度。geometry_msgs/Twist 消息里包含两组浮点类型元素 linear 和 angular 。参数格式遵循 <a href=\"http://wiki.ros.org/ROS/YAMLCommandLine\" target=\"_blank\" rel=\"external\">YAML</a> 语法。<br>上面的命令并没有让 turtle 保持一直运动，因为我们的命令只发布了一次就退出了，而要使其一直运动需要控制命令的发布频率：<br>   <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r <span class=\"number\">1</span> -- '[<span class=\"number\">2.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>]' '[<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.8</span>]'</div></pre></td></tr></table></figure></p>\n<p>这条命令以 1hz 的频率发布消息到话题 /turtle1/cmd_vel 上，参数 -r 表示频率,后面的 1 为 1hz,此时会看到 turtle 沿着圆形轨迹不停的转动。<br>使用 rostopic hz 命令可以查看消息发布的频率<br>用法：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rostopic hz <span class=\"string\">[topic]</span></div></pre></td></tr></table></figure></p>\n<p>示例：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rostopic hz /turtle1/cmd_vel</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">subscribed <span class=\"keyword\">to</span> [/turtle1/cmd_vel]</div><div class=\"line\">average rate: <span class=\"number\">1.000</span></div><div class=\"line\">        <span class=\"built_in\">min</span>: <span class=\"number\">1.000</span>s <span class=\"built_in\">max</span>: <span class=\"number\">1.000</span>s std de<span class=\"variable\">v:</span> <span class=\"number\">0.00000</span>s <span class=\"keyword\">windo</span><span class=\"variable\">w:</span> <span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<p>可见消息发布的频率正如我们前面的设置1 hz。我们也可以查看话题 /turtle1/pose 的发布频率：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rostopic hz /turtle1/pose</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">subscribed <span class=\"keyword\">to</span> [/turtle1/pose]</div><div class=\"line\">average rate: <span class=\"number\">62.534</span></div><div class=\"line\">        <span class=\"built_in\">min</span>: <span class=\"number\">0.015</span>s <span class=\"built_in\">max</span>: <span class=\"number\">0.017</span>s std de<span class=\"variable\">v:</span> <span class=\"number\">0.00052</span>s <span class=\"keyword\">windo</span><span class=\"variable\">w:</span> <span class=\"number\">61</span></div></pre></td></tr></table></figure></p>\n<p>可见 turtlesim 正以大约62hz 的频率发布数据给 turtle ，这个应该是位置数据。我们也可以结合 rostopic type 和 rosmsg show 命令来获取关于某个话题的更深层次的信息。<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">rostopic <span class=\"built_in\">type</span> /turtle1/cmd_vel | rosmsg show</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"使用rqt-plot\"><a href=\"#使用rqt-plot\" class=\"headerlink\" title=\"使用rqt_plot\"></a>使用rqt_plot</h1><p><a href=\"http://wiki.ros.org/rqt_plot\" target=\"_blank\" rel=\"external\">rqt_plot</a> 是 <a href=\"https://www.qt.io/\" target=\"_blank\" rel=\"external\">Qt</a> 开发的图形用户界面，可以将某个话题上的数据以图形的方式实时的绘制出来，如果没有安装首先通过以下命令安装，参考<a href=\"http://wiki.ros.org/rqt_plot\" target=\"_blank\" rel=\"external\">rqt_plot</a>:</p>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install ros-indigo-rqt</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install ros-indigo-rqt-common-plugins</span></div></pre></td></tr></table></figure>\n<p>使用：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun rqt_plot rqt_plot</span></div></pre></td></tr></table></figure></p>\n<p>窗口左上角可以添加需要的话题，右边的减号可以删除不需要的话题。点击那个绿色的对号按钮可以调节时间和坐标等信息：<br><img src=\"/2017/05/27/ros-primary-tutorial-6/rqtplot.jpg\" alt=\"\"></p>\n<p>更多 rqt_plot 的使用请参阅官方文档 <a href=\"http://wiki.ros.org/rqt_plot\" target=\"_blank\" rel=\"external\">rqt_plot</a> 或 <a href=\"http://rosindex.github.io/p/rqt_plot/#indigo\" target=\"_blank\" rel=\"external\">rosindex-rqt_plot</a> </p>\n<p>参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingTopics\" target=\"_blank\" rel=\"external\">UnderstandingTopics</a></p>\n","site":{"data":{}},"excerpt":"<p>本篇学习 ROS 中的话题 <a href=\"http://wiki.ros.org/rostopic\" target=\"_blank\" rel=\"external\">Topics</a> 以及 <a href=\"http://wiki.ros.org/rostopic\" target=\"_blank\" rel=\"external\">Topics</a> 的使用。源码位于 <a href=\"https://github.com/ros/ros_comm\" target=\"_blank\" rel=\"external\">ROS-communications</a>。开始之前我们先运行 turtlesim 节点，并用键盘来控制它的移动。开一个 terminal 运行：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscore &amp;</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>\n<p>开启另外一个 terminal 运行键盘控制节点：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> turtlesim turtle_teleop_key</span></div></pre></td></tr></table></figure></p>","more":"<p>现在随便移动键盘的方向键，看看 图画里的 turtle 是否在跟随你的指令移动:</p>\n<p><img src=\"/2017/05/27/ros-primary-tutorial-6/turtlesim.jpg\" alt=\"\"><br>在此期间键盘是如何控制它移动的，期间到底发生了什么，下面我们来进一步分析。</p>\n<h1 id=\"理解话题\"><a href=\"#理解话题\" class=\"headerlink\" title=\"理解话题\"></a>理解话题</h1><p>为了更形象的理解话题，我们使用工具 <a href=\"http://wiki.ros.org/rqt_graph\" target=\"_blank\" rel=\"external\">rqt_graph</a>，如果没有安装则通过以下命令安装：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install ros-indigo-rqt //如果使用的其他发行版替换indigo即可</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install ros-indigo-rqt-common-plugins</span></div></pre></td></tr></table></figure></p>\n<p>保持前面的 turtlesim 节点在运行状态，新开一个 terminal 运行 <a href=\"http://wiki.ros.org/rqt_graph\" target=\"_blank\" rel=\"external\">rqt_graph</a>:<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun rqt_graph rqt_graph</span></div></pre></td></tr></table></figure></p>\n<p>我们会看到下图：<br><img src=\"/2017/05/27/ros-primary-tutorial-6/rqtgraph.jpg\" alt=\"\"><br>将鼠标放置于/turtle1/cmd_vel 上，相应的ROS节点和话题就会高亮显示，turtlesim 和 teleop_turtle 两个节点通过话题 /turtle1/cmd_vel 进行通信。我们可以使用 rostopic 工具查看话题的相关信息。<br>用法：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rostopic echo <span class=\"string\">[topic]</span></div></pre></td></tr></table></figure></p>\n<p>示例：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rostopic <span class=\"built_in\">echo</span> /turtle1/cmd_vel</span></div></pre></td></tr></table></figure></p>\n<p>这个时候按键盘的向下方向键会看到如下信息：<br>   <figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">linear:</span></div><div class=\"line\"><span class=\"symbol\">  x:</span> <span class=\"number\">-2.0</span></div><div class=\"line\"><span class=\"symbol\">  y:</span> <span class=\"number\">0.0</span></div><div class=\"line\"><span class=\"symbol\">  z:</span> <span class=\"number\">0.0</span></div><div class=\"line\"><span class=\"symbol\">angular:</span></div><div class=\"line\"><span class=\"symbol\">  x:</span> <span class=\"number\">0.0</span></div><div class=\"line\"><span class=\"symbol\">  y:</span> <span class=\"number\">0.0</span></div><div class=\"line\"><span class=\"symbol\">  z:</span> <span class=\"number\">0.0</span></div></pre></td></tr></table></figure></p>\n<p>此时刷新一下 rqt_graph 就会看到又多了一个订阅话题 /turtle1/cmd_vel 的节点，红色部分就是。</p>\n<p><img src=\"/2017/05/27/ros-primary-tutorial-6/topic.jpg\" alt=\"\"></p>\n<h1 id=\"查看话题\"><a href=\"#查看话题\" class=\"headerlink\" title=\"查看话题\"></a>查看话题</h1><p>rostopic list 能够列出所有当前订阅和发布的话题，保持前面的各个节点处于运行状态：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rostopic list -v</span></div></pre></td></tr></table></figure></p>\n<p>此时会输出：<br>   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Published <span class=\"string\">topics:</span></div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>color_sensor [turtlesim/Color] <span class=\"number\">1</span> publisher</div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>cmd_vel [geometry_msgs/Twist] <span class=\"number\">1</span> publisher</div><div class=\"line\"> * <span class=\"regexp\">/rosout [rosgraph_msgs/</span>Log] <span class=\"number\">4</span> publishers</div><div class=\"line\"> * <span class=\"regexp\">/rosout_agg [rosgraph_msgs/</span>Log] <span class=\"number\">1</span> publisher</div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>pose [turtlesim/Pose] <span class=\"number\">1</span> publisher</div><div class=\"line\"></div><div class=\"line\">Subscribed <span class=\"string\">topics:</span></div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>cmd_vel [geometry_msgs/Twist] <span class=\"number\">2</span> subscribers</div><div class=\"line\"> * <span class=\"regexp\">/rosout [rosgraph_msgs/</span>Log] <span class=\"number\">1</span> subscriber</div><div class=\"line\"> * <span class=\"regexp\">/statistics [rosgraph_msgs/</span>TopicStatistics] <span class=\"number\">1</span> subscriber</div></pre></td></tr></table></figure></p>\n<p>上面列出了所有的订阅和发布的话题及其类型。关于 rostopic list 的其他使用方法可通过帮助命令查看：<br>   <figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$rostopic</span> <span class=\"keyword\">list</span> -<span class=\"built_in\">h</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"理解消息\"><a href=\"#理解消息\" class=\"headerlink\" title=\"理解消息\"></a>理解消息</h1><p>话题之间的通信是通过在节点之间发送消息 <a href=\"http://wiki.ros.org/Messages\" target=\"_blank\" rel=\"external\">Ros Messages</a> 实现的。发布器 teleop_turtle 和订阅器 turtlesim 之间必须发送和接收相同类型的消息才能通信。也就是说话题的类型是由发布在它上面的消息类型决定的。使用 rostopic type 命令可以查看发布在某个话题上的消息类型：<br>用法：<br>   <figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">rostopic</span> <span class=\"keyword\">type</span> [topic]</div></pre></td></tr></table></figure></p>\n<p>示例：<br>   <figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rostopic <span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">turtle1</span></span>/cmd_vel <span class=\"comment\">//查看话题 turtle1/cmd_vel 上的消息类型</span></div></pre></td></tr></table></figure></p>\n<p>一般会输出：<br>   <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">geometry_msgs/Twist</div></pre></td></tr></table></figure></p>\n<p>可以使用 <a href=\"http://wiki.ros.org/rosmsg\" target=\"_blank\" rel=\"external\">rosmsg</a> 命令查看消息的详细类型：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosmsg show geometry_msgs/Twist</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">geometry_msgs/Vector3 linear</div><div class=\"line\">  <span class=\"built_in\">float</span>64 x</div><div class=\"line\">  <span class=\"built_in\">float</span>64 y</div><div class=\"line\">  <span class=\"built_in\">float</span>64 z</div><div class=\"line\">geometry_msgs/Vector3 angular</div><div class=\"line\">  <span class=\"built_in\">float</span>64 x</div><div class=\"line\">  <span class=\"built_in\">float</span>64 y</div><div class=\"line\">  <span class=\"built_in\">float</span>64 z</div></pre></td></tr></table></figure></p>\n<p>上面可以看到消息  geometry_msgs/Twist 的类型 一个是 x y z 三轴的线速度，另外一个是 x y z 三轴的角速度。</p>\n<h1 id=\"使用话题\"><a href=\"#使用话题\" class=\"headerlink\" title=\"使用话题\"></a>使用话题</h1><p>rostopic pub 可以把消息发布到某个正在广播的话题上。<br>用法：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rostopic pub <span class=\"string\">[topic]</span> <span class=\"string\">[msg_type]</span> <span class=\"string\">[args]</span></div></pre></td></tr></table></figure></p>\n<p>示例：<br>   <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rostopic pub <span class=\"number\">-1</span> /turtle1/cmd_vel geometry_msgs/Twist -- '[<span class=\"number\">2.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>]' '[<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.8</span>]'</div></pre></td></tr></table></figure></p>\n<p>该命令会发送一条消息到话题 /turtle1/cmd_vel 上，并使得 turtlesim 以2.0大小的线速度和1.8大小的角速度开始移动。 -1 的意思是发布一条消息后马上退出，geometry_msgs/Twist 为消息类型，后面是 x y z 的数值，前面一组代表线速度，后面一组代表角速度。geometry_msgs/Twist 消息里包含两组浮点类型元素 linear 和 angular 。参数格式遵循 <a href=\"http://wiki.ros.org/ROS/YAMLCommandLine\" target=\"_blank\" rel=\"external\">YAML</a> 语法。<br>上面的命令并没有让 turtle 保持一直运动，因为我们的命令只发布了一次就退出了，而要使其一直运动需要控制命令的发布频率：<br>   <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r <span class=\"number\">1</span> -- '[<span class=\"number\">2.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>]' '[<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.8</span>]'</div></pre></td></tr></table></figure></p>\n<p>这条命令以 1hz 的频率发布消息到话题 /turtle1/cmd_vel 上，参数 -r 表示频率,后面的 1 为 1hz,此时会看到 turtle 沿着圆形轨迹不停的转动。<br>使用 rostopic hz 命令可以查看消息发布的频率<br>用法：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rostopic hz <span class=\"string\">[topic]</span></div></pre></td></tr></table></figure></p>\n<p>示例：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rostopic hz /turtle1/cmd_vel</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">subscribed <span class=\"keyword\">to</span> [/turtle1/cmd_vel]</div><div class=\"line\">average rate: <span class=\"number\">1.000</span></div><div class=\"line\">        <span class=\"built_in\">min</span>: <span class=\"number\">1.000</span>s <span class=\"built_in\">max</span>: <span class=\"number\">1.000</span>s std de<span class=\"variable\">v:</span> <span class=\"number\">0.00000</span>s <span class=\"keyword\">windo</span><span class=\"variable\">w:</span> <span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<p>可见消息发布的频率正如我们前面的设置1 hz。我们也可以查看话题 /turtle1/pose 的发布频率：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rostopic hz /turtle1/pose</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">subscribed <span class=\"keyword\">to</span> [/turtle1/pose]</div><div class=\"line\">average rate: <span class=\"number\">62.534</span></div><div class=\"line\">        <span class=\"built_in\">min</span>: <span class=\"number\">0.015</span>s <span class=\"built_in\">max</span>: <span class=\"number\">0.017</span>s std de<span class=\"variable\">v:</span> <span class=\"number\">0.00052</span>s <span class=\"keyword\">windo</span><span class=\"variable\">w:</span> <span class=\"number\">61</span></div></pre></td></tr></table></figure></p>\n<p>可见 turtlesim 正以大约62hz 的频率发布数据给 turtle ，这个应该是位置数据。我们也可以结合 rostopic type 和 rosmsg show 命令来获取关于某个话题的更深层次的信息。<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">rostopic <span class=\"built_in\">type</span> /turtle1/cmd_vel | rosmsg show</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"使用rqt-plot\"><a href=\"#使用rqt-plot\" class=\"headerlink\" title=\"使用rqt_plot\"></a>使用rqt_plot</h1><p><a href=\"http://wiki.ros.org/rqt_plot\" target=\"_blank\" rel=\"external\">rqt_plot</a> 是 <a href=\"https://www.qt.io/\" target=\"_blank\" rel=\"external\">Qt</a> 开发的图形用户界面，可以将某个话题上的数据以图形的方式实时的绘制出来，如果没有安装首先通过以下命令安装，参考<a href=\"http://wiki.ros.org/rqt_plot\" target=\"_blank\" rel=\"external\">rqt_plot</a>:</p>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install ros-indigo-rqt</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install ros-indigo-rqt-common-plugins</span></div></pre></td></tr></table></figure>\n<p>使用：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun rqt_plot rqt_plot</span></div></pre></td></tr></table></figure></p>\n<p>窗口左上角可以添加需要的话题，右边的减号可以删除不需要的话题。点击那个绿色的对号按钮可以调节时间和坐标等信息：<br><img src=\"/2017/05/27/ros-primary-tutorial-6/rqtplot.jpg\" alt=\"\"></p>\n<p>更多 rqt_plot 的使用请参阅官方文档 <a href=\"http://wiki.ros.org/rqt_plot\" target=\"_blank\" rel=\"external\">rqt_plot</a> 或 <a href=\"http://rosindex.github.io/p/rqt_plot/#indigo\" target=\"_blank\" rel=\"external\">rosindex-rqt_plot</a> </p>\n<p>参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingTopics\" target=\"_blank\" rel=\"external\">UnderstandingTopics</a></p>"},{"title":"ROS初级五 理解ROS节点","date":"2017-05-27T01:34:16.000Z","comments":1,"_content":"本篇学习 ROS 节点相关知识。节点是 ROS 程序包中的一个可执行文件，它可以与其他节点进行通信，节点可以发布或订阅话题，也可以提供或使用某种服务 。\n<!--more-->\n# 相关介绍\n[Nodes](http://wiki.ros.org/Nodes): 表示 ROS 中的节点，它表现形式为一个可执行文件，它可以通过 ROS 与其它节点进行通信。\n[Messages](http://wiki.ros.org/Messages): 表示消息，它是一种 ROS 数据类型，用于订阅或发布到一个话题。\n[Topics](http://wiki.ros.org/Topics): 表示话题，节点可以发布消息到话题，也可以订阅话题以接收消息。\n[Master](http://wiki.ros.org/Master): 表示节点管理器，它提供 ROS 名称服务，帮助 ROS 节点找到彼此。\n[rosout](http://wiki.ros.org/rosout): 类似标准输出 stdout。\n[roscore](http://wiki.ros.org/roscore): 相当于 ROS 中的服务器，运行所有节点前必须先运行 roscore。\n# 使用\n先运行 roscore:\n   ```\n $ roscore & //后台运行\n   ```\n可以使用 rosnode 查看节点信息：\n   ```\n $ rosnode list //列出活跃的节点\n   ```\n此时输出一般为：\n   ```\n /rosout\n   ```\n表示当前只有一个 rosout 节点在运行，这个节点用于收集和记录调试输出信息，它必须先于其它节点运行，并且总是一直在运行。\n返回特定节点的信息：\n   ```\n $ rosnode info /rosout\n   ```\n此时输出一般为：\n   ```\n Node [/rosout]\n Publications:\n  * /rosout_agg [rosgraph_msgs/Log]\n\n Subscriptions:\n  * /rosout [unknown type]\n\n Services:\n  * /rosout/set_logger_level\n  * /rosout/get_loggers\n\n\n contacting node http://ubuntu:56062/ ...\n Pid: 2811\n   ```\n可以看出，rosout 既发布主题也订阅主题并且提供 log 日志服务。\n# 运行节点\n[rosrun](http://wiki.ros.org/rosrun) 用于运行某个 ROS 程序包内的节点，而不需要知道这个包的路径，当然前提是这个包已经加入到 ROS 的环境变量中，即 ROS 可以找到它。\n用法：\n   ```\n$ rosrun [package_name] [node_name]\n   ```\n示例：\n   ```\n$ rosrun turtlesim turtlesim_node\n   ```\n运行程序包 turtlesim 中的 turtlesim_node 节点。要使用 [turtlesim](http://wiki.ros.org/turtlesim) 需要事先安装这个包：\n   ```\n$ sudo apt-get install ros-indigo-ros-tutorials\n   ```\n或者通过源码下载后自行编译 参考[ros_tutorials](https://github.com/ros/ros_tutorials) 。运行效果![](ros-primary-tutorial-5/turtlesim.jpg)\n如果此时打开另一个 terminal 并使用前面的命令查看节点信息：\n   ```\n $ rosnode list\n   ```\n此时的输出一般为：\n   ```\n /rosout\n /turtlesim\n   ```\n也可以查看 /turtlesim 节点的具体信息：\n   ```\n $ rosnode info /turtlesim\n   ```\n输出一般为：\n   ```\nNode [/turtlesim]\nPublications:\n * /turtle1/color_sensor [turtlesim/Color]\n * /rosout [rosgraph_msgs/Log]\n * /turtle1/pose [turtlesim/Pose]\n\nSubscriptions:\n * /turtle1/cmd_vel [unknown type]\n\nServices:\n * /turtle1/teleport_absolute\n * /turtlesim/get_loggers\n * /turtlesim/set_logger_level\n * /reset\n * /spawn\n * /clear\n * /turtle1/set_pen\n * /turtle1/teleport_relative\n * /kill\n\n\ncontacting node http://ubuntu:53732/ ...\nPid: 3904\nConnections:\n * topic: /rosout\n    * to: /rosout\n    * direction: outbound\n    * transport: TCPROS\n   ```\n我们也可以通过命令行修改节点名字，使用 ROS 的 [RemappingArguments](http://wiki.ros.org/Remapping%20Arguments) 改变节点名称：\n   ```\n$ rosrun turtlesim turtlesim_node __name:=my_turtle\n   ```\n改变节点名称前，先 kill 掉之前运行的节点 turtlesim_node。此时再输入命令查看节点信息，名字已经改变了：\n   ```\n /my_turtle\n /rosout\n   ```\n我们可以使用 ping 命令查看节点通讯是否可达：\n   ```\n $ rosnode ping my_turtle\n   ```\n输出：\n   ```\n rosnode: node is [/my_turtle]\n pinging /my_turtle with a timeout of 3.0s\n xmlrpc reply from http://ubuntu:40832/  time=1.326084ms\n xmlrpc reply from http://ubuntu:40832/  time=0.391006ms\n xmlrpc reply from http://ubuntu:40832/  time=0.315189ms\n xmlrpc reply from http://ubuntu:40832/  time=0.321150ms\n xmlrpc reply from http://ubuntu:40832/  time=0.367880ms\n xmlrpc reply from http://ubuntu:40832/  time=0.342846ms\n   ```\n至此，关于 ROS 节点的学习告一段落。\n参考 [Understanding-Nodes](http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingNodes)","source":"_posts/ros-primary-tutorial-5.md","raw":"---\ntitle: ROS初级五 理解ROS节点\ndate: 2017-05-27 09:34:16\ncategories: ROS\ntags: ROS Node\ncomments: true\n---\n本篇学习 ROS 节点相关知识。节点是 ROS 程序包中的一个可执行文件，它可以与其他节点进行通信，节点可以发布或订阅话题，也可以提供或使用某种服务 。\n<!--more-->\n# 相关介绍\n[Nodes](http://wiki.ros.org/Nodes): 表示 ROS 中的节点，它表现形式为一个可执行文件，它可以通过 ROS 与其它节点进行通信。\n[Messages](http://wiki.ros.org/Messages): 表示消息，它是一种 ROS 数据类型，用于订阅或发布到一个话题。\n[Topics](http://wiki.ros.org/Topics): 表示话题，节点可以发布消息到话题，也可以订阅话题以接收消息。\n[Master](http://wiki.ros.org/Master): 表示节点管理器，它提供 ROS 名称服务，帮助 ROS 节点找到彼此。\n[rosout](http://wiki.ros.org/rosout): 类似标准输出 stdout。\n[roscore](http://wiki.ros.org/roscore): 相当于 ROS 中的服务器，运行所有节点前必须先运行 roscore。\n# 使用\n先运行 roscore:\n   ```\n $ roscore & //后台运行\n   ```\n可以使用 rosnode 查看节点信息：\n   ```\n $ rosnode list //列出活跃的节点\n   ```\n此时输出一般为：\n   ```\n /rosout\n   ```\n表示当前只有一个 rosout 节点在运行，这个节点用于收集和记录调试输出信息，它必须先于其它节点运行，并且总是一直在运行。\n返回特定节点的信息：\n   ```\n $ rosnode info /rosout\n   ```\n此时输出一般为：\n   ```\n Node [/rosout]\n Publications:\n  * /rosout_agg [rosgraph_msgs/Log]\n\n Subscriptions:\n  * /rosout [unknown type]\n\n Services:\n  * /rosout/set_logger_level\n  * /rosout/get_loggers\n\n\n contacting node http://ubuntu:56062/ ...\n Pid: 2811\n   ```\n可以看出，rosout 既发布主题也订阅主题并且提供 log 日志服务。\n# 运行节点\n[rosrun](http://wiki.ros.org/rosrun) 用于运行某个 ROS 程序包内的节点，而不需要知道这个包的路径，当然前提是这个包已经加入到 ROS 的环境变量中，即 ROS 可以找到它。\n用法：\n   ```\n$ rosrun [package_name] [node_name]\n   ```\n示例：\n   ```\n$ rosrun turtlesim turtlesim_node\n   ```\n运行程序包 turtlesim 中的 turtlesim_node 节点。要使用 [turtlesim](http://wiki.ros.org/turtlesim) 需要事先安装这个包：\n   ```\n$ sudo apt-get install ros-indigo-ros-tutorials\n   ```\n或者通过源码下载后自行编译 参考[ros_tutorials](https://github.com/ros/ros_tutorials) 。运行效果![](ros-primary-tutorial-5/turtlesim.jpg)\n如果此时打开另一个 terminal 并使用前面的命令查看节点信息：\n   ```\n $ rosnode list\n   ```\n此时的输出一般为：\n   ```\n /rosout\n /turtlesim\n   ```\n也可以查看 /turtlesim 节点的具体信息：\n   ```\n $ rosnode info /turtlesim\n   ```\n输出一般为：\n   ```\nNode [/turtlesim]\nPublications:\n * /turtle1/color_sensor [turtlesim/Color]\n * /rosout [rosgraph_msgs/Log]\n * /turtle1/pose [turtlesim/Pose]\n\nSubscriptions:\n * /turtle1/cmd_vel [unknown type]\n\nServices:\n * /turtle1/teleport_absolute\n * /turtlesim/get_loggers\n * /turtlesim/set_logger_level\n * /reset\n * /spawn\n * /clear\n * /turtle1/set_pen\n * /turtle1/teleport_relative\n * /kill\n\n\ncontacting node http://ubuntu:53732/ ...\nPid: 3904\nConnections:\n * topic: /rosout\n    * to: /rosout\n    * direction: outbound\n    * transport: TCPROS\n   ```\n我们也可以通过命令行修改节点名字，使用 ROS 的 [RemappingArguments](http://wiki.ros.org/Remapping%20Arguments) 改变节点名称：\n   ```\n$ rosrun turtlesim turtlesim_node __name:=my_turtle\n   ```\n改变节点名称前，先 kill 掉之前运行的节点 turtlesim_node。此时再输入命令查看节点信息，名字已经改变了：\n   ```\n /my_turtle\n /rosout\n   ```\n我们可以使用 ping 命令查看节点通讯是否可达：\n   ```\n $ rosnode ping my_turtle\n   ```\n输出：\n   ```\n rosnode: node is [/my_turtle]\n pinging /my_turtle with a timeout of 3.0s\n xmlrpc reply from http://ubuntu:40832/  time=1.326084ms\n xmlrpc reply from http://ubuntu:40832/  time=0.391006ms\n xmlrpc reply from http://ubuntu:40832/  time=0.315189ms\n xmlrpc reply from http://ubuntu:40832/  time=0.321150ms\n xmlrpc reply from http://ubuntu:40832/  time=0.367880ms\n xmlrpc reply from http://ubuntu:40832/  time=0.342846ms\n   ```\n至此，关于 ROS 节点的学习告一段落。\n参考 [Understanding-Nodes](http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingNodes)","slug":"ros-primary-tutorial-5","published":1,"updated":"2017-06-14T08:00:18.888Z","layout":"post","photos":[],"link":"","_id":"cj4hne53l002aw8inqhp674e4","content":"<p>本篇学习 ROS 节点相关知识。节点是 ROS 程序包中的一个可执行文件，它可以与其他节点进行通信，节点可以发布或订阅话题，也可以提供或使用某种服务 。<br><a id=\"more\"></a></p>\n<h1 id=\"相关介绍\"><a href=\"#相关介绍\" class=\"headerlink\" title=\"相关介绍\"></a>相关介绍</h1><p><a href=\"http://wiki.ros.org/Nodes\" target=\"_blank\" rel=\"external\">Nodes</a>: 表示 ROS 中的节点，它表现形式为一个可执行文件，它可以通过 ROS 与其它节点进行通信。<br><a href=\"http://wiki.ros.org/Messages\" target=\"_blank\" rel=\"external\">Messages</a>: 表示消息，它是一种 ROS 数据类型，用于订阅或发布到一个话题。<br><a href=\"http://wiki.ros.org/Topics\" target=\"_blank\" rel=\"external\">Topics</a>: 表示话题，节点可以发布消息到话题，也可以订阅话题以接收消息。<br><a href=\"http://wiki.ros.org/Master\" target=\"_blank\" rel=\"external\">Master</a>: 表示节点管理器，它提供 ROS 名称服务，帮助 ROS 节点找到彼此。<br><a href=\"http://wiki.ros.org/rosout\" target=\"_blank\" rel=\"external\">rosout</a>: 类似标准输出 stdout。<br><a href=\"http://wiki.ros.org/roscore\" target=\"_blank\" rel=\"external\">roscore</a>: 相当于 ROS 中的服务器，运行所有节点前必须先运行 roscore。</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>先运行 roscore:<br>   <figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>roscore &amp; <span class=\"regexp\">//</span>后台运行</div></pre></td></tr></table></figure></p>\n<p>可以使用 rosnode 查看节点信息：<br>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosnode <span class=\"built_in\">list</span> <span class=\"comment\">//列出活跃的节点</span></div></pre></td></tr></table></figure></p>\n<p>此时输出一般为：<br>   <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">/rosout</span></div></pre></td></tr></table></figure></p>\n<p>表示当前只有一个 rosout 节点在运行，这个节点用于收集和记录调试输出信息，它必须先于其它节点运行，并且总是一直在运行。<br>返回特定节点的信息：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosnode info /rosout</span></div></pre></td></tr></table></figure></p>\n<p>此时输出一般为：<br>   <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Node</span> <span class=\"title\">[/rosout</span>]</div><div class=\"line\">Publications:</div><div class=\"line\"> * /rosout_agg [rosgraph_msgs/Log]</div><div class=\"line\"></div><div class=\"line\">Subscriptions:</div><div class=\"line\"> * /rosout [unknown <span class=\"keyword\">type</span>]</div><div class=\"line\"></div><div class=\"line\">Services:</div><div class=\"line\"> * /rosout/set_logger_level</div><div class=\"line\"> * /rosout/get_loggers</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">contacting <span class=\"keyword\">node</span> http:<span class=\"title\">//ubuntu</span>:<span class=\"number\">56062</span>/ ...</div><div class=\"line\">Pid: <span class=\"number\">2811</span></div></pre></td></tr></table></figure></p>\n<p>可以看出，rosout 既发布主题也订阅主题并且提供 log 日志服务。</p>\n<h1 id=\"运行节点\"><a href=\"#运行节点\" class=\"headerlink\" title=\"运行节点\"></a>运行节点</h1><p><a href=\"http://wiki.ros.org/rosrun\" target=\"_blank\" rel=\"external\">rosrun</a> 用于运行某个 ROS 程序包内的节点，而不需要知道这个包的路径，当然前提是这个包已经加入到 ROS 的环境变量中，即 ROS 可以找到它。<br>用法：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosrun <span class=\"string\">[package_name]</span> <span class=\"string\">[node_name]</span></div></pre></td></tr></table></figure></p>\n<p>示例：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>\n<p>运行程序包 turtlesim 中的 turtlesim_node 节点。要使用 <a href=\"http://wiki.ros.org/turtlesim\" target=\"_blank\" rel=\"external\">turtlesim</a> 需要事先安装这个包：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install ros-indigo-ros-tutorials</span></div></pre></td></tr></table></figure></p>\n<p>或者通过源码下载后自行编译 参考<a href=\"https://github.com/ros/ros_tutorials\" target=\"_blank\" rel=\"external\">ros_tutorials</a> 。运行效果<img src=\"/2017/05/27/ros-primary-tutorial-5/turtlesim.jpg\" alt=\"\"><br>如果此时打开另一个 terminal 并使用前面的命令查看节点信息：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosnode list</span></div></pre></td></tr></table></figure></p>\n<p>此时的输出一般为：<br>   <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">/rosout</span></div><div class=\"line\"><span class=\"string\">/turtlesim</span></div></pre></td></tr></table></figure></p>\n<p>也可以查看 /turtlesim 节点的具体信息：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosnode info /turtlesim</span></div></pre></td></tr></table></figure></p>\n<p>输出一般为：<br>   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">Node [/turtlesim]</div><div class=\"line\"><span class=\"string\">Publications:</span></div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>color_sensor [turtlesim/Color]</div><div class=\"line\"> * <span class=\"regexp\">/rosout [rosgraph_msgs/</span>Log]</div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>pose [turtlesim/Pose]</div><div class=\"line\"><span class=\"symbol\"></span></div><div class=\"line\">Subscriptions:</div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>cmd_vel [unknown type]</div><div class=\"line\"><span class=\"symbol\"></span></div><div class=\"line\">Services:</div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>teleport_absolute</div><div class=\"line\"> * <span class=\"regexp\">/turtlesim/</span>get_loggers</div><div class=\"line\"> * <span class=\"regexp\">/turtlesim/</span>set_logger_level</div><div class=\"line\"> * /reset</div><div class=\"line\"> * /spawn</div><div class=\"line\"> * /clear</div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>set_pen</div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>teleport_relative</div><div class=\"line\"> * /kill</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">contacting node <span class=\"string\">http:</span><span class=\"comment\">//ubuntu:53732/ ...</span></div><div class=\"line\"><span class=\"string\">Pid:</span> <span class=\"number\">3904</span></div><div class=\"line\"><span class=\"string\">Connections:</span></div><div class=\"line\"> * <span class=\"string\">topic:</span> /rosout</div><div class=\"line\">    * <span class=\"string\">to:</span> /rosout</div><div class=\"line\">    * <span class=\"string\">direction:</span> outbound</div><div class=\"line\">    * <span class=\"string\">transport:</span> TCPROS</div></pre></td></tr></table></figure></p>\n<p>我们也可以通过命令行修改节点名字，使用 ROS 的 <a href=\"http://wiki.ros.org/Remapping%20Arguments\" target=\"_blank\" rel=\"external\">RemappingArguments</a> 改变节点名称：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun turtlesim turtlesim_node __name:=my_turtle</span></div></pre></td></tr></table></figure></p>\n<p>改变节点名称前，先 kill 掉之前运行的节点 turtlesim_node。此时再输入命令查看节点信息，名字已经改变了：<br>   <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">/my_turtle</span></div><div class=\"line\"><span class=\"string\">/rosout</span></div></pre></td></tr></table></figure></p>\n<p>我们可以使用 ping 命令查看节点通讯是否可达：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosnode ping my_turtle</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosnode: node is [/my_turtle]</div><div class=\"line\">pinging /my_turtle <span class=\"keyword\">with</span> <span class=\"keyword\">a</span> timeout <span class=\"keyword\">of</span> <span class=\"number\">3.0</span>s</div><div class=\"line\">xmlrpc reply <span class=\"built_in\">from</span> <span class=\"keyword\">http</span>://ubuntu:<span class=\"number\">40832</span>/  <span class=\"built_in\">time</span>=<span class=\"number\">1.326084</span>ms</div><div class=\"line\">xmlrpc reply <span class=\"built_in\">from</span> <span class=\"keyword\">http</span>://ubuntu:<span class=\"number\">40832</span>/  <span class=\"built_in\">time</span>=<span class=\"number\">0.391006</span>ms</div><div class=\"line\">xmlrpc reply <span class=\"built_in\">from</span> <span class=\"keyword\">http</span>://ubuntu:<span class=\"number\">40832</span>/  <span class=\"built_in\">time</span>=<span class=\"number\">0.315189</span>ms</div><div class=\"line\">xmlrpc reply <span class=\"built_in\">from</span> <span class=\"keyword\">http</span>://ubuntu:<span class=\"number\">40832</span>/  <span class=\"built_in\">time</span>=<span class=\"number\">0.321150</span>ms</div><div class=\"line\">xmlrpc reply <span class=\"built_in\">from</span> <span class=\"keyword\">http</span>://ubuntu:<span class=\"number\">40832</span>/  <span class=\"built_in\">time</span>=<span class=\"number\">0.367880</span>ms</div><div class=\"line\">xmlrpc reply <span class=\"built_in\">from</span> <span class=\"keyword\">http</span>://ubuntu:<span class=\"number\">40832</span>/  <span class=\"built_in\">time</span>=<span class=\"number\">0.342846</span>ms</div></pre></td></tr></table></figure></p>\n<p>至此，关于 ROS 节点的学习告一段落。<br>参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingNodes\" target=\"_blank\" rel=\"external\">Understanding-Nodes</a></p>\n","site":{"data":{}},"excerpt":"<p>本篇学习 ROS 节点相关知识。节点是 ROS 程序包中的一个可执行文件，它可以与其他节点进行通信，节点可以发布或订阅话题，也可以提供或使用某种服务 。<br></p>","more":"<p></p>\n<h1 id=\"相关介绍\"><a href=\"#相关介绍\" class=\"headerlink\" title=\"相关介绍\"></a>相关介绍</h1><p><a href=\"http://wiki.ros.org/Nodes\" target=\"_blank\" rel=\"external\">Nodes</a>: 表示 ROS 中的节点，它表现形式为一个可执行文件，它可以通过 ROS 与其它节点进行通信。<br><a href=\"http://wiki.ros.org/Messages\" target=\"_blank\" rel=\"external\">Messages</a>: 表示消息，它是一种 ROS 数据类型，用于订阅或发布到一个话题。<br><a href=\"http://wiki.ros.org/Topics\" target=\"_blank\" rel=\"external\">Topics</a>: 表示话题，节点可以发布消息到话题，也可以订阅话题以接收消息。<br><a href=\"http://wiki.ros.org/Master\" target=\"_blank\" rel=\"external\">Master</a>: 表示节点管理器，它提供 ROS 名称服务，帮助 ROS 节点找到彼此。<br><a href=\"http://wiki.ros.org/rosout\" target=\"_blank\" rel=\"external\">rosout</a>: 类似标准输出 stdout。<br><a href=\"http://wiki.ros.org/roscore\" target=\"_blank\" rel=\"external\">roscore</a>: 相当于 ROS 中的服务器，运行所有节点前必须先运行 roscore。</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>先运行 roscore:<br>   <figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>roscore &amp; <span class=\"regexp\">//</span>后台运行</div></pre></td></tr></table></figure></p>\n<p>可以使用 rosnode 查看节点信息：<br>   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosnode <span class=\"built_in\">list</span> <span class=\"comment\">//列出活跃的节点</span></div></pre></td></tr></table></figure></p>\n<p>此时输出一般为：<br>   <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">/rosout</span></div></pre></td></tr></table></figure></p>\n<p>表示当前只有一个 rosout 节点在运行，这个节点用于收集和记录调试输出信息，它必须先于其它节点运行，并且总是一直在运行。<br>返回特定节点的信息：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosnode info /rosout</span></div></pre></td></tr></table></figure></p>\n<p>此时输出一般为：<br>   <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Node</span> <span class=\"title\">[/rosout</span>]</div><div class=\"line\">Publications:</div><div class=\"line\"> * /rosout_agg [rosgraph_msgs/Log]</div><div class=\"line\"></div><div class=\"line\">Subscriptions:</div><div class=\"line\"> * /rosout [unknown <span class=\"keyword\">type</span>]</div><div class=\"line\"></div><div class=\"line\">Services:</div><div class=\"line\"> * /rosout/set_logger_level</div><div class=\"line\"> * /rosout/get_loggers</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">contacting <span class=\"keyword\">node</span> http:<span class=\"title\">//ubuntu</span>:<span class=\"number\">56062</span>/ ...</div><div class=\"line\">Pid: <span class=\"number\">2811</span></div></pre></td></tr></table></figure></p>\n<p>可以看出，rosout 既发布主题也订阅主题并且提供 log 日志服务。</p>\n<h1 id=\"运行节点\"><a href=\"#运行节点\" class=\"headerlink\" title=\"运行节点\"></a>运行节点</h1><p><a href=\"http://wiki.ros.org/rosrun\" target=\"_blank\" rel=\"external\">rosrun</a> 用于运行某个 ROS 程序包内的节点，而不需要知道这个包的路径，当然前提是这个包已经加入到 ROS 的环境变量中，即 ROS 可以找到它。<br>用法：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosrun <span class=\"string\">[package_name]</span> <span class=\"string\">[node_name]</span></div></pre></td></tr></table></figure></p>\n<p>示例：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>\n<p>运行程序包 turtlesim 中的 turtlesim_node 节点。要使用 <a href=\"http://wiki.ros.org/turtlesim\" target=\"_blank\" rel=\"external\">turtlesim</a> 需要事先安装这个包：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install ros-indigo-ros-tutorials</span></div></pre></td></tr></table></figure></p>\n<p>或者通过源码下载后自行编译 参考<a href=\"https://github.com/ros/ros_tutorials\" target=\"_blank\" rel=\"external\">ros_tutorials</a> 。运行效果<img src=\"/2017/05/27/ros-primary-tutorial-5/turtlesim.jpg\" alt=\"\"><br>如果此时打开另一个 terminal 并使用前面的命令查看节点信息：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosnode list</span></div></pre></td></tr></table></figure></p>\n<p>此时的输出一般为：<br>   <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">/rosout</span></div><div class=\"line\"><span class=\"string\">/turtlesim</span></div></pre></td></tr></table></figure></p>\n<p>也可以查看 /turtlesim 节点的具体信息：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosnode info /turtlesim</span></div></pre></td></tr></table></figure></p>\n<p>输出一般为：<br>   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">Node [/turtlesim]</div><div class=\"line\"><span class=\"string\">Publications:</span></div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>color_sensor [turtlesim/Color]</div><div class=\"line\"> * <span class=\"regexp\">/rosout [rosgraph_msgs/</span>Log]</div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>pose [turtlesim/Pose]</div><div class=\"line\"><span class=\"symbol\"></span></div><div class=\"line\">Subscriptions:</div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>cmd_vel [unknown type]</div><div class=\"line\"><span class=\"symbol\"></span></div><div class=\"line\">Services:</div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>teleport_absolute</div><div class=\"line\"> * <span class=\"regexp\">/turtlesim/</span>get_loggers</div><div class=\"line\"> * <span class=\"regexp\">/turtlesim/</span>set_logger_level</div><div class=\"line\"> * /reset</div><div class=\"line\"> * /spawn</div><div class=\"line\"> * /clear</div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>set_pen</div><div class=\"line\"> * <span class=\"regexp\">/turtle1/</span>teleport_relative</div><div class=\"line\"> * /kill</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">contacting node <span class=\"string\">http:</span><span class=\"comment\">//ubuntu:53732/ ...</span></div><div class=\"line\"><span class=\"string\">Pid:</span> <span class=\"number\">3904</span></div><div class=\"line\"><span class=\"string\">Connections:</span></div><div class=\"line\"> * <span class=\"string\">topic:</span> /rosout</div><div class=\"line\">    * <span class=\"string\">to:</span> /rosout</div><div class=\"line\">    * <span class=\"string\">direction:</span> outbound</div><div class=\"line\">    * <span class=\"string\">transport:</span> TCPROS</div></pre></td></tr></table></figure></p>\n<p>我们也可以通过命令行修改节点名字，使用 ROS 的 <a href=\"http://wiki.ros.org/Remapping%20Arguments\" target=\"_blank\" rel=\"external\">RemappingArguments</a> 改变节点名称：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun turtlesim turtlesim_node __name:=my_turtle</span></div></pre></td></tr></table></figure></p>\n<p>改变节点名称前，先 kill 掉之前运行的节点 turtlesim_node。此时再输入命令查看节点信息，名字已经改变了：<br>   <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">/my_turtle</span></div><div class=\"line\"><span class=\"string\">/rosout</span></div></pre></td></tr></table></figure></p>\n<p>我们可以使用 ping 命令查看节点通讯是否可达：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosnode ping my_turtle</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosnode: node is [/my_turtle]</div><div class=\"line\">pinging /my_turtle <span class=\"keyword\">with</span> <span class=\"keyword\">a</span> timeout <span class=\"keyword\">of</span> <span class=\"number\">3.0</span>s</div><div class=\"line\">xmlrpc reply <span class=\"built_in\">from</span> <span class=\"keyword\">http</span>://ubuntu:<span class=\"number\">40832</span>/  <span class=\"built_in\">time</span>=<span class=\"number\">1.326084</span>ms</div><div class=\"line\">xmlrpc reply <span class=\"built_in\">from</span> <span class=\"keyword\">http</span>://ubuntu:<span class=\"number\">40832</span>/  <span class=\"built_in\">time</span>=<span class=\"number\">0.391006</span>ms</div><div class=\"line\">xmlrpc reply <span class=\"built_in\">from</span> <span class=\"keyword\">http</span>://ubuntu:<span class=\"number\">40832</span>/  <span class=\"built_in\">time</span>=<span class=\"number\">0.315189</span>ms</div><div class=\"line\">xmlrpc reply <span class=\"built_in\">from</span> <span class=\"keyword\">http</span>://ubuntu:<span class=\"number\">40832</span>/  <span class=\"built_in\">time</span>=<span class=\"number\">0.321150</span>ms</div><div class=\"line\">xmlrpc reply <span class=\"built_in\">from</span> <span class=\"keyword\">http</span>://ubuntu:<span class=\"number\">40832</span>/  <span class=\"built_in\">time</span>=<span class=\"number\">0.367880</span>ms</div><div class=\"line\">xmlrpc reply <span class=\"built_in\">from</span> <span class=\"keyword\">http</span>://ubuntu:<span class=\"number\">40832</span>/  <span class=\"built_in\">time</span>=<span class=\"number\">0.342846</span>ms</div></pre></td></tr></table></figure></p>\n<p>至此，关于 ROS 节点的学习告一段落。<br>参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingNodes\" target=\"_blank\" rel=\"external\">Understanding-Nodes</a></p>"},{"title":"ROS初级八 使用rqt_console和roslaunch","date":"2017-05-31T02:26:43.000Z","comments":1,"_content":"本篇学习 [rqt_console](http://wiki.ros.org/rqt_console) 与 [roslaunch](http://wiki.ros.org/roslaunch) 的使用。[rqt_console](http://wiki.ros.org/rqt_console) 属于 ROS 日志框架的一部分，用来显示节点的输出信息。[roslaunch](http://wiki.ros.org/roslaunch) 用于节点的运行，可以同时运行多个节点。\n使用之前先安装以下程序包:\n   ```\n $ sudo apt-get install ros-indigo-rqt\n $ sudo apt-get install ros-indigo-rqt-common-plugins\n   ```\n<!--more-->\n如果之前已安装，也可忽略。\n# rqt_console 与 rqt_logger_level\n[rqt_console](http://wiki.ros.org/rqt_console) 显示节点信息， [rqt_logger_level](http://wiki.ros.org/rqt_logger_level) 用于修改节点运行时输出信息的日志等级。\n开启 rqt_console 窗口与 rqt_logger_level 窗口：\n   ```\n $ rosrun rqt_console rqt_console\n $ rosrun rqt_logger_level rqt_logger_level\n   ```\n![](ros-primary-tutorial-8/rqtconsole.jpg)\n![](ros-primary-tutorial-8/rqtloglevel.jpg)\n\n开启一个新的 terminal 然后启动 turtlesim 节点：\n   ```\n $ rosrun turtlesim turtlesim_node\n   ```\n因为默认的日志等级为 info 所以 [rqt_console](http://wiki.ros.org/rqt_console) 的输出为：\n![](ros-primary-tutorial-8/info.jpg)\n\n现在刷新一下 [rqt_logger_level](http://wiki.ros.org/rqt_logger_level) 窗口，并将日志等级修改为 Warn 并且让 turtle 做旋转动作：\n   ```\n $ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'\n   ```\n 这里我的日志等级并没有修改过来，原因未知，待查。\n日志等级按以下优先顺序排列：\n   ```\n Fatal\n Error\n Warn\n Info\n Debug\n   ```\nFatal是最高优先级，Debug是最低优先级。通过设置日志等级可以获取该等级及其以上优先等级的所有日志消息。比如，将日志等级设为Warn时，会得到Warn、Error和Fatal这三个等级的所有日志消息。\n# roslaunch\n[roslaunch](http://wiki.ros.org/roslaunch) 可以用来启动定义在 launch 文件中的多个节点，用法：\n   ```\n $ roslaunch [package] [filename.launch]\n   ```\n进入 beginner_tutorials 目录,建立一个 launch 文件，\n   ```\n $ roscd beginner_tutorials\n $ mkdir launch\n $ cd launch/\n $ vim turtlemimic.launch\n   ```\n在 turtlemimic.launch 文件中输入以下内容：\n   ```\n   <launch>\n  \n      <group ns=\"turtlesim1\">\n        <node pkg=\"turtlesim\" name=\"sim\" type=\"turtlesim_node\"/>\n     </group>\n  \n      <group ns=\"turtlesim2\">\n        <node pkg=\"turtlesim\" name=\"sim\" type=\"turtlesim_node\"/>\n      </group>\n \n     <node pkg=\"turtlesim\" name=\"mimic\" type=\"mimic\">\n       <remap from=\"input\" to=\"turtlesim1/turtle1\"/>\n       <remap from=\"output\" to=\"turtlesim2/turtle1\"/>\n     </node>\n \n  </launch>\n   ```\n创建了两个节点分组，一个名字为 turtlesim1 ，一个名字为 turtlesim2 ，两个组里都是用相同的  turtlesim节点并命名为 sim，在同时启动两个 turtlesim 模拟器时避免冲突。将所有话题的输入重命名为 turtlesim1 输出重命名为 turtlesim2，这样可以使 turtlesim2 模仿 turtlesim1。\n启动：\n   ```\n $ roslaunch beginner_tutorials turtlemimic.launch\n   ```\n 并在另一个 terminal 下发布运动指令：\n   ```\n $ rostopic pub /turtlesim1/turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, -1.8]'\n   ```\n可以看到两个 turtle 在做同样的圆周运动![](ros-primary-tutorial-8/two.jpg)\n\n也可以通过 [rqt_graph]() 来更好的理解 launch文件中所做的事情：\n   ```\n$ rqt_graph\n   ```\n![](ros-primary-tutorial-8/rqtgraph.jpg)\n参考 [UsingRqtconsoleRoslaunch](http://wiki.ros.org/cn/ROS/Tutorials/UsingRqtconsoleRoslaunch) \n\n","source":"_posts/ros-primary-tutorial-8.md","raw":"---\ntitle: ROS初级八 使用rqt_console和roslaunch\ndate: 2017-05-31 10:26:43\ncategories: ROS\ntags: rqt_console \ncomments: true\n---\n本篇学习 [rqt_console](http://wiki.ros.org/rqt_console) 与 [roslaunch](http://wiki.ros.org/roslaunch) 的使用。[rqt_console](http://wiki.ros.org/rqt_console) 属于 ROS 日志框架的一部分，用来显示节点的输出信息。[roslaunch](http://wiki.ros.org/roslaunch) 用于节点的运行，可以同时运行多个节点。\n使用之前先安装以下程序包:\n   ```\n $ sudo apt-get install ros-indigo-rqt\n $ sudo apt-get install ros-indigo-rqt-common-plugins\n   ```\n<!--more-->\n如果之前已安装，也可忽略。\n# rqt_console 与 rqt_logger_level\n[rqt_console](http://wiki.ros.org/rqt_console) 显示节点信息， [rqt_logger_level](http://wiki.ros.org/rqt_logger_level) 用于修改节点运行时输出信息的日志等级。\n开启 rqt_console 窗口与 rqt_logger_level 窗口：\n   ```\n $ rosrun rqt_console rqt_console\n $ rosrun rqt_logger_level rqt_logger_level\n   ```\n![](ros-primary-tutorial-8/rqtconsole.jpg)\n![](ros-primary-tutorial-8/rqtloglevel.jpg)\n\n开启一个新的 terminal 然后启动 turtlesim 节点：\n   ```\n $ rosrun turtlesim turtlesim_node\n   ```\n因为默认的日志等级为 info 所以 [rqt_console](http://wiki.ros.org/rqt_console) 的输出为：\n![](ros-primary-tutorial-8/info.jpg)\n\n现在刷新一下 [rqt_logger_level](http://wiki.ros.org/rqt_logger_level) 窗口，并将日志等级修改为 Warn 并且让 turtle 做旋转动作：\n   ```\n $ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'\n   ```\n 这里我的日志等级并没有修改过来，原因未知，待查。\n日志等级按以下优先顺序排列：\n   ```\n Fatal\n Error\n Warn\n Info\n Debug\n   ```\nFatal是最高优先级，Debug是最低优先级。通过设置日志等级可以获取该等级及其以上优先等级的所有日志消息。比如，将日志等级设为Warn时，会得到Warn、Error和Fatal这三个等级的所有日志消息。\n# roslaunch\n[roslaunch](http://wiki.ros.org/roslaunch) 可以用来启动定义在 launch 文件中的多个节点，用法：\n   ```\n $ roslaunch [package] [filename.launch]\n   ```\n进入 beginner_tutorials 目录,建立一个 launch 文件，\n   ```\n $ roscd beginner_tutorials\n $ mkdir launch\n $ cd launch/\n $ vim turtlemimic.launch\n   ```\n在 turtlemimic.launch 文件中输入以下内容：\n   ```\n   <launch>\n  \n      <group ns=\"turtlesim1\">\n        <node pkg=\"turtlesim\" name=\"sim\" type=\"turtlesim_node\"/>\n     </group>\n  \n      <group ns=\"turtlesim2\">\n        <node pkg=\"turtlesim\" name=\"sim\" type=\"turtlesim_node\"/>\n      </group>\n \n     <node pkg=\"turtlesim\" name=\"mimic\" type=\"mimic\">\n       <remap from=\"input\" to=\"turtlesim1/turtle1\"/>\n       <remap from=\"output\" to=\"turtlesim2/turtle1\"/>\n     </node>\n \n  </launch>\n   ```\n创建了两个节点分组，一个名字为 turtlesim1 ，一个名字为 turtlesim2 ，两个组里都是用相同的  turtlesim节点并命名为 sim，在同时启动两个 turtlesim 模拟器时避免冲突。将所有话题的输入重命名为 turtlesim1 输出重命名为 turtlesim2，这样可以使 turtlesim2 模仿 turtlesim1。\n启动：\n   ```\n $ roslaunch beginner_tutorials turtlemimic.launch\n   ```\n 并在另一个 terminal 下发布运动指令：\n   ```\n $ rostopic pub /turtlesim1/turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, -1.8]'\n   ```\n可以看到两个 turtle 在做同样的圆周运动![](ros-primary-tutorial-8/two.jpg)\n\n也可以通过 [rqt_graph]() 来更好的理解 launch文件中所做的事情：\n   ```\n$ rqt_graph\n   ```\n![](ros-primary-tutorial-8/rqtgraph.jpg)\n参考 [UsingRqtconsoleRoslaunch](http://wiki.ros.org/cn/ROS/Tutorials/UsingRqtconsoleRoslaunch) \n\n","slug":"ros-primary-tutorial-8","published":1,"updated":"2017-06-13T05:54:37.258Z","layout":"post","photos":[],"link":"","_id":"cj4hne53n002cw8ink4mv2cj6","content":"<p>本篇学习 <a href=\"http://wiki.ros.org/rqt_console\" target=\"_blank\" rel=\"external\">rqt_console</a> 与 <a href=\"http://wiki.ros.org/roslaunch\" target=\"_blank\" rel=\"external\">roslaunch</a> 的使用。<a href=\"http://wiki.ros.org/rqt_console\" target=\"_blank\" rel=\"external\">rqt_console</a> 属于 ROS 日志框架的一部分，用来显示节点的输出信息。<a href=\"http://wiki.ros.org/roslaunch\" target=\"_blank\" rel=\"external\">roslaunch</a> 用于节点的运行，可以同时运行多个节点。<br>使用之前先安装以下程序包:<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install ros-indigo-rqt</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install ros-indigo-rqt-common-plugins</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>如果之前已安装，也可忽略。</p>\n<h1 id=\"rqt-console-与-rqt-logger-level\"><a href=\"#rqt-console-与-rqt-logger-level\" class=\"headerlink\" title=\"rqt_console 与 rqt_logger_level\"></a>rqt_console 与 rqt_logger_level</h1><p><a href=\"http://wiki.ros.org/rqt_console\" target=\"_blank\" rel=\"external\">rqt_console</a> 显示节点信息， <a href=\"http://wiki.ros.org/rqt_logger_level\" target=\"_blank\" rel=\"external\">rqt_logger_level</a> 用于修改节点运行时输出信息的日志等级。<br>开启 rqt_console 窗口与 rqt_logger_level 窗口：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun rqt_console rqt_console</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun rqt_logger_level rqt_logger_level</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/31/ros-primary-tutorial-8/rqtconsole.jpg\" alt=\"\"><br><img src=\"/2017/05/31/ros-primary-tutorial-8/rqtloglevel.jpg\" alt=\"\"></p>\n<p>开启一个新的 terminal 然后启动 turtlesim 节点：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>\n<p>因为默认的日志等级为 info 所以 <a href=\"http://wiki.ros.org/rqt_console\" target=\"_blank\" rel=\"external\">rqt_console</a> 的输出为：<br><img src=\"/2017/05/31/ros-primary-tutorial-8/info.jpg\" alt=\"\"></p>\n<p>现在刷新一下 <a href=\"http://wiki.ros.org/rqt_logger_level\" target=\"_blank\" rel=\"external\">rqt_logger_level</a> 窗口，并将日志等级修改为 Warn 并且让 turtle 做旋转动作：<br>   <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r <span class=\"number\">1</span> -- '[<span class=\"number\">2.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>]' '[<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.8</span>]'</div></pre></td></tr></table></figure></p>\n<p> 这里我的日志等级并没有修改过来，原因未知，待查。<br>日志等级按以下优先顺序排列：<br>   <figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Fatal</div><div class=\"line\"><span class=\"keyword\">Error</span></div><div class=\"line\">Warn</div><div class=\"line\">Info</div><div class=\"line\">Debug</div></pre></td></tr></table></figure></p>\n<p>Fatal是最高优先级，Debug是最低优先级。通过设置日志等级可以获取该等级及其以上优先等级的所有日志消息。比如，将日志等级设为Warn时，会得到Warn、Error和Fatal这三个等级的所有日志消息。</p>\n<h1 id=\"roslaunch\"><a href=\"#roslaunch\" class=\"headerlink\" title=\"roslaunch\"></a>roslaunch</h1><p><a href=\"http://wiki.ros.org/roslaunch\" target=\"_blank\" rel=\"external\">roslaunch</a> 可以用来启动定义在 launch 文件中的多个节点，用法：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ roslaunch <span class=\"string\">[package]</span> <span class=\"string\">[filename.launch]</span></div></pre></td></tr></table></figure></p>\n<p>进入 beginner_tutorials 目录,建立一个 launch 文件，<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscd beginner_tutorials</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir launch</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> launch/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vim turtlemimic.launch</span></div></pre></td></tr></table></figure></p>\n<p>在 turtlemimic.launch 文件中输入以下内容：<br>   <figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;launch&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;<span class=\"built_in\">group</span> ns=<span class=\"string\">\"turtlesim1\"</span>&gt;</div><div class=\"line\">      &lt;node pkg=<span class=\"string\">\"turtlesim\"</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"sim\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"turtlesim_node\"</span>/&gt;</div><div class=\"line\">   &lt;/<span class=\"built_in\">group</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;<span class=\"built_in\">group</span> ns=<span class=\"string\">\"turtlesim2\"</span>&gt;</div><div class=\"line\">      &lt;node pkg=<span class=\"string\">\"turtlesim\"</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"sim\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"turtlesim_node\"</span>/&gt;</div><div class=\"line\">    &lt;/<span class=\"built_in\">group</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">   &lt;node pkg=<span class=\"string\">\"turtlesim\"</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mimic\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"mimic\"</span>&gt;</div><div class=\"line\">     &lt;remap <span class=\"keyword\">from</span>=<span class=\"string\">\"input\"</span> <span class=\"keyword\">to</span>=<span class=\"string\">\"turtlesim1/turtle1\"</span>/&gt;</div><div class=\"line\">     &lt;remap <span class=\"keyword\">from</span>=<span class=\"string\">\"output\"</span> <span class=\"keyword\">to</span>=<span class=\"string\">\"turtlesim2/turtle1\"</span>/&gt;</div><div class=\"line\">   &lt;/node&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/launch&gt;</div></pre></td></tr></table></figure></p>\n<p>创建了两个节点分组，一个名字为 turtlesim1 ，一个名字为 turtlesim2 ，两个组里都是用相同的  turtlesim节点并命名为 sim，在同时启动两个 turtlesim 模拟器时避免冲突。将所有话题的输入重命名为 turtlesim1 输出重命名为 turtlesim2，这样可以使 turtlesim2 模仿 turtlesim1。<br>启动：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roslaunch beginner_tutorials turtlemimic.launch</span></div></pre></td></tr></table></figure></p>\n<p> 并在另一个 terminal 下发布运动指令：<br>   <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rostopic pub /turtlesim1/turtle1/cmd_vel geometry_msgs/Twist -r <span class=\"number\">1</span> -- '[<span class=\"number\">2.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>]' '[<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">-1.8</span>]'</div></pre></td></tr></table></figure></p>\n<p>可以看到两个 turtle 在做同样的圆周运动<img src=\"/2017/05/31/ros-primary-tutorial-8/two.jpg\" alt=\"\"></p>\n<p>也可以通过 <a href=\"\">rqt_graph</a> 来更好的理解 launch文件中所做的事情：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rqt_graph</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/31/ros-primary-tutorial-8/rqtgraph.jpg\" alt=\"\"><br>参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials/UsingRqtconsoleRoslaunch\" target=\"_blank\" rel=\"external\">UsingRqtconsoleRoslaunch</a> </p>\n","site":{"data":{}},"excerpt":"<p>本篇学习 <a href=\"http://wiki.ros.org/rqt_console\" target=\"_blank\" rel=\"external\">rqt_console</a> 与 <a href=\"http://wiki.ros.org/roslaunch\" target=\"_blank\" rel=\"external\">roslaunch</a> 的使用。<a href=\"http://wiki.ros.org/rqt_console\" target=\"_blank\" rel=\"external\">rqt_console</a> 属于 ROS 日志框架的一部分，用来显示节点的输出信息。<a href=\"http://wiki.ros.org/roslaunch\" target=\"_blank\" rel=\"external\">roslaunch</a> 用于节点的运行，可以同时运行多个节点。<br>使用之前先安装以下程序包:<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install ros-indigo-rqt</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install ros-indigo-rqt-common-plugins</span></div></pre></td></tr></table></figure></p>","more":"<p>如果之前已安装，也可忽略。</p>\n<h1 id=\"rqt-console-与-rqt-logger-level\"><a href=\"#rqt-console-与-rqt-logger-level\" class=\"headerlink\" title=\"rqt_console 与 rqt_logger_level\"></a>rqt_console 与 rqt_logger_level</h1><p><a href=\"http://wiki.ros.org/rqt_console\" target=\"_blank\" rel=\"external\">rqt_console</a> 显示节点信息， <a href=\"http://wiki.ros.org/rqt_logger_level\" target=\"_blank\" rel=\"external\">rqt_logger_level</a> 用于修改节点运行时输出信息的日志等级。<br>开启 rqt_console 窗口与 rqt_logger_level 窗口：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun rqt_console rqt_console</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun rqt_logger_level rqt_logger_level</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/31/ros-primary-tutorial-8/rqtconsole.jpg\" alt=\"\"><br><img src=\"/2017/05/31/ros-primary-tutorial-8/rqtloglevel.jpg\" alt=\"\"></p>\n<p>开启一个新的 terminal 然后启动 turtlesim 节点：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>\n<p>因为默认的日志等级为 info 所以 <a href=\"http://wiki.ros.org/rqt_console\" target=\"_blank\" rel=\"external\">rqt_console</a> 的输出为：<br><img src=\"/2017/05/31/ros-primary-tutorial-8/info.jpg\" alt=\"\"></p>\n<p>现在刷新一下 <a href=\"http://wiki.ros.org/rqt_logger_level\" target=\"_blank\" rel=\"external\">rqt_logger_level</a> 窗口，并将日志等级修改为 Warn 并且让 turtle 做旋转动作：<br>   <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r <span class=\"number\">1</span> -- '[<span class=\"number\">2.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>]' '[<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.8</span>]'</div></pre></td></tr></table></figure></p>\n<p> 这里我的日志等级并没有修改过来，原因未知，待查。<br>日志等级按以下优先顺序排列：<br>   <figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Fatal</div><div class=\"line\"><span class=\"keyword\">Error</span></div><div class=\"line\">Warn</div><div class=\"line\">Info</div><div class=\"line\">Debug</div></pre></td></tr></table></figure></p>\n<p>Fatal是最高优先级，Debug是最低优先级。通过设置日志等级可以获取该等级及其以上优先等级的所有日志消息。比如，将日志等级设为Warn时，会得到Warn、Error和Fatal这三个等级的所有日志消息。</p>\n<h1 id=\"roslaunch\"><a href=\"#roslaunch\" class=\"headerlink\" title=\"roslaunch\"></a>roslaunch</h1><p><a href=\"http://wiki.ros.org/roslaunch\" target=\"_blank\" rel=\"external\">roslaunch</a> 可以用来启动定义在 launch 文件中的多个节点，用法：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ roslaunch <span class=\"string\">[package]</span> <span class=\"string\">[filename.launch]</span></div></pre></td></tr></table></figure></p>\n<p>进入 beginner_tutorials 目录,建立一个 launch 文件，<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscd beginner_tutorials</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir launch</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> launch/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vim turtlemimic.launch</span></div></pre></td></tr></table></figure></p>\n<p>在 turtlemimic.launch 文件中输入以下内容：<br>   <figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;launch&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;<span class=\"built_in\">group</span> ns=<span class=\"string\">\"turtlesim1\"</span>&gt;</div><div class=\"line\">      &lt;node pkg=<span class=\"string\">\"turtlesim\"</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"sim\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"turtlesim_node\"</span>/&gt;</div><div class=\"line\">   &lt;/<span class=\"built_in\">group</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;<span class=\"built_in\">group</span> ns=<span class=\"string\">\"turtlesim2\"</span>&gt;</div><div class=\"line\">      &lt;node pkg=<span class=\"string\">\"turtlesim\"</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"sim\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"turtlesim_node\"</span>/&gt;</div><div class=\"line\">    &lt;/<span class=\"built_in\">group</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">   &lt;node pkg=<span class=\"string\">\"turtlesim\"</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mimic\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"mimic\"</span>&gt;</div><div class=\"line\">     &lt;remap <span class=\"keyword\">from</span>=<span class=\"string\">\"input\"</span> <span class=\"keyword\">to</span>=<span class=\"string\">\"turtlesim1/turtle1\"</span>/&gt;</div><div class=\"line\">     &lt;remap <span class=\"keyword\">from</span>=<span class=\"string\">\"output\"</span> <span class=\"keyword\">to</span>=<span class=\"string\">\"turtlesim2/turtle1\"</span>/&gt;</div><div class=\"line\">   &lt;/node&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/launch&gt;</div></pre></td></tr></table></figure></p>\n<p>创建了两个节点分组，一个名字为 turtlesim1 ，一个名字为 turtlesim2 ，两个组里都是用相同的  turtlesim节点并命名为 sim，在同时启动两个 turtlesim 模拟器时避免冲突。将所有话题的输入重命名为 turtlesim1 输出重命名为 turtlesim2，这样可以使 turtlesim2 模仿 turtlesim1。<br>启动：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roslaunch beginner_tutorials turtlemimic.launch</span></div></pre></td></tr></table></figure></p>\n<p> 并在另一个 terminal 下发布运动指令：<br>   <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rostopic pub /turtlesim1/turtle1/cmd_vel geometry_msgs/Twist -r <span class=\"number\">1</span> -- '[<span class=\"number\">2.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>]' '[<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">-1.8</span>]'</div></pre></td></tr></table></figure></p>\n<p>可以看到两个 turtle 在做同样的圆周运动<img src=\"/2017/05/31/ros-primary-tutorial-8/two.jpg\" alt=\"\"></p>\n<p>也可以通过 <a href=\"\">rqt_graph</a> 来更好的理解 launch文件中所做的事情：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rqt_graph</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/31/ros-primary-tutorial-8/rqtgraph.jpg\" alt=\"\"><br>参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials/UsingRqtconsoleRoslaunch\" target=\"_blank\" rel=\"external\">UsingRqtconsoleRoslaunch</a> </p>"},{"title":"ROS初级七 理解ROS服务和参数","date":"2017-05-31T00:23:36.000Z","comments":1,"_content":"本篇学习 ROS 的服务和参数。\n# ROS 服务\nServices 是 ROS 节点之间通信的另一种方式，服务允许节点发送请求(request)，并获得响应(response)。[rosservice](http://wiki.ros.org/rosservice) 命令可以使用 ROS 客户端/服务器框架提供的服务，[rosservice](http://wiki.ros.org/rosservice) 提供了很多可以在 topic 上使用的命令：\n   ```\n rosservice list         输出可用服务的信息\n rosservice call         调用带参数的服务\n rosservice type         输出服务类型\n rosservice find         依据类型寻找服务find services by service type\n rosservice uri          输出服务的ROSRPC uri\n   ```\n测试上述命令之前先运行 turtlesim 节点:\n   ```\n $ roscore &\n $ rosrun turtlesim turtlesim_node\n   ```\n并用键盘进行控制，显示出运动轨迹。\n<!--more-->\n## rosserice list\n   ```\n $ rosservice  list\n   ```\nrosservice list 命令显示出 turtlesim 节点提供的一些服务，其中 rosout 为 roscore 提供的服务：\n   ```\n /clear //清除\n /kill  //终止\n /reset //重置\n /rosout/get_loggers\n /rosout/set_logger_level\n /spawn //再生\n /turtle1/set_pen //设定画笔包括颜色、线条宽度、开关等\n /turtle1/teleport_absolute //绝对参数\n /turtle1/teleport_relative //相对参数\n /turtlesim/get_loggers //日志\n /turtlesim/set_logger_level //日志等级\n   ```\n参数的详细说明参阅 [turtlesim](http://wiki.ros.org/turtlesim)。\n## rosservice type\nrosservice type 用于显示某个服务的类型，使用方法：\n   ```\nrosservice type [service]\n   ```\n比如我们想查看 turtlesim 节点提供的 clear 服务：\n   ```\n $ rosservice type clear\n   ```\n输出：\n   ```\n std_srvs/Empty\n   ```\n服务的类型为空Empty,这表明在调用这个服务时不需要参数。那我们调用一次这个参数看下效果，使用方法：\n   ```\n rosservice call [service] [args]\n   ```\n测试：\n   ```\n $ rosservice call clear\n   ```\n之前 turtule 运行的轨迹被清除。上面是不带参数的服务，我们查看一下带参数的服务 spwan:\n   ```\n $ rosservice type spawn| rossrv show\n   ```\n输出：\n   ```\n float32 x\n float32 y\n float32 theta\n string name\n ---\n string name\n   ```\n以上可以看出 spawn 服务需要的参数有 x y 坐标值、角度以及名字等参数。我们使用 spawn 服务在指定位置再生成一个 turtle :\n   ```\n$ rosservice call spawn 3 3 1.8 \"another turtle\"\n   ```\n上面命令在坐标(3,3) 方位角为 1.8 生成一个名字为 \"anotherturtle\" 的 turtle,注意名字之间不能有空格。\n![](ros-primary-tutorial-7/spawn.jpg)\n\n# ROS 参数\n[rosparam](http://wiki.ros.org/rosparam) 使得我们能够存储并操作 ROS 参数服务器 [Parameter Server](http://wiki.ros.org/Parameter%20Server) 上的数据。参数服务器能够存储整型、浮点、布尔、字符串、字典和列表等数据类型。[rosparam](http://wiki.ros.org/rosparam) 使用 [YAML](https://zh.wikipedia.org/wiki/YAML) 标记语言的语法。一般而言，[YAML](https://zh.wikipedia.org/wiki/YAML) 的表述很自然：1 是整型, 1.0 是浮点型, one 是字符串, true 是布尔, [1, 2, 3]是整型列表, {a: b, c: d}是字典。 [rosparam](http://wiki.ros.org/rosparam) 有很多指令可以用来操作参数:\n   ```\nrosparam set            设置参数\nrosparam get            获取参数\nrosparam load           从文件读取参数\nrosparam dump           向文件中写入参数\nrosparam delete         删除参数\nrosparam list           列出参数名\n   ```\nrosparam list 命令可列出某个节点在参数服务器上的各种参数：\n   ```\n$ rosparam list\n   ```\n输出：\n   ```\n/background_b //背景颜色 \n/background_g //背景颜色\n/background_r //背景颜色\n/rosdistro\n/roslaunch/uris/host_ubuntu__39737\n/rosversion\n/run_id\n   ```\n设置背景颜色通过命令 rosparam set 获取背景颜色使用命令 rosparam get\n   ```\n rosparam set [param_name]\n rosparam get [param_name]\n   ```\n我们修改一下红色值：\n   ```\n $ rosparam set background_r 200\n   ```\n调用清除命令参数才能生效：\n   ```\n $ rosservice call clear\n   ```\n![](ros-primary-tutorial-7/rosparam.jpg)\n获取参数值：\n   ```\n $ rosparam get /  //显示服务器上所有参数内容\n   ```\n输出：\n   ```\n background_b: 255\n background_g: 10\n background_r: 200\n rosdistro: 'indigo\n\n  '\n roslaunch:\n  uris: {host_ubuntu__39737: 'http://ubuntu:39737/'}\n rosversion: '1.11.20\n\n  '\n run_id: 0efaaffc-4599-11e7-a400-000c2915ac77\n   ```\n获取某个参数值，比如获取红色通道的值：\n   ```\n$ rosparam get background_r\n   ```\n可以使用 rosparam dump 命令将所有参数进行存储，使用 rosparam load 命令读取所有参数：\n使用方法：\n   ```\nrosparam dump [file_name]\nrosparam load [file_name] [namespace]\n   ```\n将所有参数写入文件 myparams.yaml 中：\n   ```\n $ rosparam dump myparams.yaml\n   ```\n载入参数：\n   ```\n $ rosparam load params.yaml copy  //将参数载入 copy 空间\n $ rosparam get copy/background_r\n   ```\n参考 [UnderstandingServicesParams](http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingServicesParams)\n\n\n\n\n","source":"_posts/ros-primary-tutorial-7.md","raw":"---\ntitle: ROS初级七 理解ROS服务和参数\ndate: 2017-05-31 08:23:36\ncategories: ROS\ntags: ROS Services\ncomments: true\n---\n本篇学习 ROS 的服务和参数。\n# ROS 服务\nServices 是 ROS 节点之间通信的另一种方式，服务允许节点发送请求(request)，并获得响应(response)。[rosservice](http://wiki.ros.org/rosservice) 命令可以使用 ROS 客户端/服务器框架提供的服务，[rosservice](http://wiki.ros.org/rosservice) 提供了很多可以在 topic 上使用的命令：\n   ```\n rosservice list         输出可用服务的信息\n rosservice call         调用带参数的服务\n rosservice type         输出服务类型\n rosservice find         依据类型寻找服务find services by service type\n rosservice uri          输出服务的ROSRPC uri\n   ```\n测试上述命令之前先运行 turtlesim 节点:\n   ```\n $ roscore &\n $ rosrun turtlesim turtlesim_node\n   ```\n并用键盘进行控制，显示出运动轨迹。\n<!--more-->\n## rosserice list\n   ```\n $ rosservice  list\n   ```\nrosservice list 命令显示出 turtlesim 节点提供的一些服务，其中 rosout 为 roscore 提供的服务：\n   ```\n /clear //清除\n /kill  //终止\n /reset //重置\n /rosout/get_loggers\n /rosout/set_logger_level\n /spawn //再生\n /turtle1/set_pen //设定画笔包括颜色、线条宽度、开关等\n /turtle1/teleport_absolute //绝对参数\n /turtle1/teleport_relative //相对参数\n /turtlesim/get_loggers //日志\n /turtlesim/set_logger_level //日志等级\n   ```\n参数的详细说明参阅 [turtlesim](http://wiki.ros.org/turtlesim)。\n## rosservice type\nrosservice type 用于显示某个服务的类型，使用方法：\n   ```\nrosservice type [service]\n   ```\n比如我们想查看 turtlesim 节点提供的 clear 服务：\n   ```\n $ rosservice type clear\n   ```\n输出：\n   ```\n std_srvs/Empty\n   ```\n服务的类型为空Empty,这表明在调用这个服务时不需要参数。那我们调用一次这个参数看下效果，使用方法：\n   ```\n rosservice call [service] [args]\n   ```\n测试：\n   ```\n $ rosservice call clear\n   ```\n之前 turtule 运行的轨迹被清除。上面是不带参数的服务，我们查看一下带参数的服务 spwan:\n   ```\n $ rosservice type spawn| rossrv show\n   ```\n输出：\n   ```\n float32 x\n float32 y\n float32 theta\n string name\n ---\n string name\n   ```\n以上可以看出 spawn 服务需要的参数有 x y 坐标值、角度以及名字等参数。我们使用 spawn 服务在指定位置再生成一个 turtle :\n   ```\n$ rosservice call spawn 3 3 1.8 \"another turtle\"\n   ```\n上面命令在坐标(3,3) 方位角为 1.8 生成一个名字为 \"anotherturtle\" 的 turtle,注意名字之间不能有空格。\n![](ros-primary-tutorial-7/spawn.jpg)\n\n# ROS 参数\n[rosparam](http://wiki.ros.org/rosparam) 使得我们能够存储并操作 ROS 参数服务器 [Parameter Server](http://wiki.ros.org/Parameter%20Server) 上的数据。参数服务器能够存储整型、浮点、布尔、字符串、字典和列表等数据类型。[rosparam](http://wiki.ros.org/rosparam) 使用 [YAML](https://zh.wikipedia.org/wiki/YAML) 标记语言的语法。一般而言，[YAML](https://zh.wikipedia.org/wiki/YAML) 的表述很自然：1 是整型, 1.0 是浮点型, one 是字符串, true 是布尔, [1, 2, 3]是整型列表, {a: b, c: d}是字典。 [rosparam](http://wiki.ros.org/rosparam) 有很多指令可以用来操作参数:\n   ```\nrosparam set            设置参数\nrosparam get            获取参数\nrosparam load           从文件读取参数\nrosparam dump           向文件中写入参数\nrosparam delete         删除参数\nrosparam list           列出参数名\n   ```\nrosparam list 命令可列出某个节点在参数服务器上的各种参数：\n   ```\n$ rosparam list\n   ```\n输出：\n   ```\n/background_b //背景颜色 \n/background_g //背景颜色\n/background_r //背景颜色\n/rosdistro\n/roslaunch/uris/host_ubuntu__39737\n/rosversion\n/run_id\n   ```\n设置背景颜色通过命令 rosparam set 获取背景颜色使用命令 rosparam get\n   ```\n rosparam set [param_name]\n rosparam get [param_name]\n   ```\n我们修改一下红色值：\n   ```\n $ rosparam set background_r 200\n   ```\n调用清除命令参数才能生效：\n   ```\n $ rosservice call clear\n   ```\n![](ros-primary-tutorial-7/rosparam.jpg)\n获取参数值：\n   ```\n $ rosparam get /  //显示服务器上所有参数内容\n   ```\n输出：\n   ```\n background_b: 255\n background_g: 10\n background_r: 200\n rosdistro: 'indigo\n\n  '\n roslaunch:\n  uris: {host_ubuntu__39737: 'http://ubuntu:39737/'}\n rosversion: '1.11.20\n\n  '\n run_id: 0efaaffc-4599-11e7-a400-000c2915ac77\n   ```\n获取某个参数值，比如获取红色通道的值：\n   ```\n$ rosparam get background_r\n   ```\n可以使用 rosparam dump 命令将所有参数进行存储，使用 rosparam load 命令读取所有参数：\n使用方法：\n   ```\nrosparam dump [file_name]\nrosparam load [file_name] [namespace]\n   ```\n将所有参数写入文件 myparams.yaml 中：\n   ```\n $ rosparam dump myparams.yaml\n   ```\n载入参数：\n   ```\n $ rosparam load params.yaml copy  //将参数载入 copy 空间\n $ rosparam get copy/background_r\n   ```\n参考 [UnderstandingServicesParams](http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingServicesParams)\n\n\n\n\n","slug":"ros-primary-tutorial-7","published":1,"updated":"2017-06-13T05:54:47.881Z","layout":"post","photos":[],"link":"","_id":"cj4hne53n002gw8inzw97z8yo","content":"<p>本篇学习 ROS 的服务和参数。</p>\n<h1 id=\"ROS-服务\"><a href=\"#ROS-服务\" class=\"headerlink\" title=\"ROS 服务\"></a>ROS 服务</h1><p>Services 是 ROS 节点之间通信的另一种方式，服务允许节点发送请求(request)，并获得响应(response)。<a href=\"http://wiki.ros.org/rosservice\" target=\"_blank\" rel=\"external\">rosservice</a> 命令可以使用 ROS 客户端/服务器框架提供的服务，<a href=\"http://wiki.ros.org/rosservice\" target=\"_blank\" rel=\"external\">rosservice</a> 提供了很多可以在 topic 上使用的命令：<br>   <figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosservice <span class=\"built_in\">list</span>         输出可用服务的信息</div><div class=\"line\">rosservice <span class=\"built_in\">call</span>         调用带参数的服务</div><div class=\"line\">rosservice <span class=\"built_in\">type</span>         输出服务类型</div><div class=\"line\">rosservice <span class=\"built_in\">find</span>         依据类型寻找服务<span class=\"built_in\">find</span> services by service <span class=\"built_in\">type</span></div><div class=\"line\">rosservice uri          输出服务的ROSRPC uri</div></pre></td></tr></table></figure></p>\n<p>测试上述命令之前先运行 turtlesim 节点:<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscore &amp;</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>\n<p>并用键盘进行控制，显示出运动轨迹。<br><a id=\"more\"></a></p>\n<h2 id=\"rosserice-list\"><a href=\"#rosserice-list\" class=\"headerlink\" title=\"rosserice list\"></a>rosserice list</h2>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosservice  list</span></div></pre></td></tr></table></figure>\n<p>rosservice list 命令显示出 turtlesim 节点提供的一些服务，其中 rosout 为 roscore 提供的服务：<br>   <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">/clear</span> <span class=\"string\">//</span>清除</div><div class=\"line\"><span class=\"string\">/kill</span>  <span class=\"string\">//</span>终止</div><div class=\"line\"><span class=\"string\">/reset</span> <span class=\"string\">//</span>重置</div><div class=\"line\"><span class=\"string\">/rosout/get_loggers</span></div><div class=\"line\"><span class=\"string\">/rosout/set_logger_level</span></div><div class=\"line\"><span class=\"string\">/spawn</span> <span class=\"string\">//</span>再生</div><div class=\"line\"><span class=\"string\">/turtle1/set_pen</span> <span class=\"string\">//</span>设定画笔包括颜色、线条宽度、开关等</div><div class=\"line\"><span class=\"string\">/turtle1/teleport_absolute</span> <span class=\"string\">//</span>绝对参数</div><div class=\"line\"><span class=\"string\">/turtle1/teleport_relative</span> <span class=\"string\">//</span>相对参数</div><div class=\"line\"><span class=\"string\">/turtlesim/get_loggers</span> <span class=\"string\">//</span>日志</div><div class=\"line\"><span class=\"string\">/turtlesim/set_logger_level</span> <span class=\"string\">//</span>日志等级</div></pre></td></tr></table></figure></p>\n<p>参数的详细说明参阅 <a href=\"http://wiki.ros.org/turtlesim\" target=\"_blank\" rel=\"external\">turtlesim</a>。</p>\n<h2 id=\"rosservice-type\"><a href=\"#rosservice-type\" class=\"headerlink\" title=\"rosservice type\"></a>rosservice type</h2><p>rosservice type 用于显示某个服务的类型，使用方法：<br>   <figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">rosservice</span> <span class=\"keyword\">type</span> [service]</div></pre></td></tr></table></figure></p>\n<p>比如我们想查看 turtlesim 节点提供的 clear 服务：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosservice <span class=\"built_in\">type</span> clear</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">std_srvs/<span class=\"keyword\">Empty</span></div></pre></td></tr></table></figure></p>\n<p>服务的类型为空Empty,这表明在调用这个服务时不需要参数。那我们调用一次这个参数看下效果，使用方法：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosservice call <span class=\"string\">[service]</span> <span class=\"string\">[args]</span></div></pre></td></tr></table></figure></p>\n<p>测试：<br>   <figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosservice <span class=\"keyword\">call</span> <span class=\"keyword\">clear</span></div></pre></td></tr></table></figure></p>\n<p>之前 turtule 运行的轨迹被清除。上面是不带参数的服务，我们查看一下带参数的服务 spwan:<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosservice <span class=\"built_in\">type</span> spawn| rossrv show</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">float32 x</div><div class=\"line\">float32 y</div><div class=\"line\">float32 theta</div><div class=\"line\"><span class=\"section\">string name</span></div><div class=\"line\">---</div><div class=\"line\">string name</div></pre></td></tr></table></figure></p>\n<p>以上可以看出 spawn 服务需要的参数有 x y 坐标值、角度以及名字等参数。我们使用 spawn 服务在指定位置再生成一个 turtle :<br>   <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosservice call spawn <span class=\"number\">3</span> <span class=\"number\">3</span> <span class=\"number\">1.8</span> <span class=\"string\">\"another turtle\"</span></div></pre></td></tr></table></figure></p>\n<p>上面命令在坐标(3,3) 方位角为 1.8 生成一个名字为 “anotherturtle” 的 turtle,注意名字之间不能有空格。<br><img src=\"/2017/05/31/ros-primary-tutorial-7/spawn.jpg\" alt=\"\"></p>\n<h1 id=\"ROS-参数\"><a href=\"#ROS-参数\" class=\"headerlink\" title=\"ROS 参数\"></a>ROS 参数</h1><p><a href=\"http://wiki.ros.org/rosparam\" target=\"_blank\" rel=\"external\">rosparam</a> 使得我们能够存储并操作 ROS 参数服务器 <a href=\"http://wiki.ros.org/Parameter%20Server\" target=\"_blank\" rel=\"external\">Parameter Server</a> 上的数据。参数服务器能够存储整型、浮点、布尔、字符串、字典和列表等数据类型。<a href=\"http://wiki.ros.org/rosparam\" target=\"_blank\" rel=\"external\">rosparam</a> 使用 <a href=\"https://zh.wikipedia.org/wiki/YAML\" target=\"_blank\" rel=\"external\">YAML</a> 标记语言的语法。一般而言，<a href=\"https://zh.wikipedia.org/wiki/YAML\" target=\"_blank\" rel=\"external\">YAML</a> 的表述很自然：1 是整型, 1.0 是浮点型, one 是字符串, true 是布尔, [1, 2, 3]是整型列表, {a: b, c: d}是字典。 <a href=\"http://wiki.ros.org/rosparam\" target=\"_blank\" rel=\"external\">rosparam</a> 有很多指令可以用来操作参数:<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosparam <span class=\"keyword\">set</span>            设置参数</div><div class=\"line\">rosparam <span class=\"comment\">get</span>            获取参数</div><div class=\"line\">rosparam <span class=\"comment\">load</span>           从文件读取参数</div><div class=\"line\">rosparam <span class=\"comment\">dump</span>           向文件中写入参数</div><div class=\"line\">rosparam <span class=\"comment\">delete</span>         删除参数</div><div class=\"line\">rosparam <span class=\"comment\">list</span>           列出参数名</div></pre></td></tr></table></figure></p>\n<p>rosparam list 命令可列出某个节点在参数服务器上的各种参数：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosparam list</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">/background_b</span> <span class=\"string\">//</span>背景颜色 </div><div class=\"line\"><span class=\"string\">/background_g</span> <span class=\"string\">//</span>背景颜色</div><div class=\"line\"><span class=\"string\">/background_r</span> <span class=\"string\">//</span>背景颜色</div><div class=\"line\"><span class=\"string\">/rosdistro</span></div><div class=\"line\"><span class=\"string\">/roslaunch/uris/host_ubuntu__39737</span></div><div class=\"line\"><span class=\"string\">/rosversion</span></div><div class=\"line\"><span class=\"string\">/run_id</span></div></pre></td></tr></table></figure></p>\n<p>设置背景颜色通过命令 rosparam set 获取背景颜色使用命令 rosparam get<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosparam set <span class=\"string\">[param_name]</span></div><div class=\"line\">rosparam get <span class=\"string\">[param_name]</span></div></pre></td></tr></table></figure></p>\n<p>我们修改一下红色值：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">$</span> rosparam <span class=\"keyword\">set</span> background_r <span class=\"comment\">200</span></div></pre></td></tr></table></figure></p>\n<p>调用清除命令参数才能生效：<br>   <figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosservice <span class=\"keyword\">call</span> <span class=\"keyword\">clear</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/31/ros-primary-tutorial-7/rosparam.jpg\" alt=\"\"><br>获取参数值：<br>   <figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosparam <span class=\"keyword\">get</span> /  <span class=\"comment\">//显示服务器上所有参数内容</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">background_b</span>: <span class=\"number\">255</span></div><div class=\"line\"><span class=\"attribute\">background_g</span>: <span class=\"number\">10</span></div><div class=\"line\"><span class=\"attribute\">background_r</span>: <span class=\"number\">200</span></div><div class=\"line\"><span class=\"attribute\">rosdistro</span>: 'indigo</div><div class=\"line\"></div><div class=\"line\"> '</div><div class=\"line\"><span class=\"attribute\">roslaunch</span>:</div><div class=\"line\"> <span class=\"attribute\">uris</span>: &#123;<span class=\"attribute\">host_ubuntu__39737</span>: <span class=\"string\">'http://ubuntu:39737/'</span>&#125;</div><div class=\"line\"><span class=\"attribute\">rosversion</span>: '<span class=\"number\">1.11</span>.<span class=\"number\">20</span></div><div class=\"line\"></div><div class=\"line\"> '</div><div class=\"line\"><span class=\"attribute\">run_id</span>: <span class=\"number\">0</span>efaaffc-<span class=\"number\">4599</span>-<span class=\"number\">11</span>e7-a400-<span class=\"number\">000</span>c2915ac77</div></pre></td></tr></table></figure></p>\n<p>获取某个参数值，比如获取红色通道的值：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosparam get background_r</span></div></pre></td></tr></table></figure></p>\n<p>可以使用 rosparam dump 命令将所有参数进行存储，使用 rosparam load 命令读取所有参数：<br>使用方法：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosparam dump <span class=\"string\">[file_name]</span></div><div class=\"line\">rosparam load <span class=\"string\">[file_name]</span> <span class=\"string\">[namespace]</span></div></pre></td></tr></table></figure></p>\n<p>将所有参数写入文件 myparams.yaml 中：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosparam dump myparams.yaml</span></div></pre></td></tr></table></figure></p>\n<p>载入参数：<br>   <figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosparam load params.yaml <span class=\"keyword\">copy</span><span class=\"bash\">  //将参数载入 copy 空间</span></div><div class=\"line\">$ rosparam get <span class=\"keyword\">copy</span><span class=\"bash\">/background_r</span></div></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingServicesParams\" target=\"_blank\" rel=\"external\">UnderstandingServicesParams</a></p>\n","site":{"data":{}},"excerpt":"<p>本篇学习 ROS 的服务和参数。</p>\n<h1 id=\"ROS-服务\"><a href=\"#ROS-服务\" class=\"headerlink\" title=\"ROS 服务\"></a>ROS 服务</h1><p>Services 是 ROS 节点之间通信的另一种方式，服务允许节点发送请求(request)，并获得响应(response)。<a href=\"http://wiki.ros.org/rosservice\" target=\"_blank\" rel=\"external\">rosservice</a> 命令可以使用 ROS 客户端/服务器框架提供的服务，<a href=\"http://wiki.ros.org/rosservice\" target=\"_blank\" rel=\"external\">rosservice</a> 提供了很多可以在 topic 上使用的命令：<br>   <figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosservice <span class=\"built_in\">list</span>         输出可用服务的信息</div><div class=\"line\">rosservice <span class=\"built_in\">call</span>         调用带参数的服务</div><div class=\"line\">rosservice <span class=\"built_in\">type</span>         输出服务类型</div><div class=\"line\">rosservice <span class=\"built_in\">find</span>         依据类型寻找服务<span class=\"built_in\">find</span> services by service <span class=\"built_in\">type</span></div><div class=\"line\">rosservice uri          输出服务的ROSRPC uri</div></pre></td></tr></table></figure></p>\n<p>测试上述命令之前先运行 turtlesim 节点:<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscore &amp;</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>\n<p>并用键盘进行控制，显示出运动轨迹。<br></p>","more":"<p></p>\n<h2 id=\"rosserice-list\"><a href=\"#rosserice-list\" class=\"headerlink\" title=\"rosserice list\"></a>rosserice list</h2>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosservice  list</span></div></pre></td></tr></table></figure>\n<p>rosservice list 命令显示出 turtlesim 节点提供的一些服务，其中 rosout 为 roscore 提供的服务：<br>   <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">/clear</span> <span class=\"string\">//</span>清除</div><div class=\"line\"><span class=\"string\">/kill</span>  <span class=\"string\">//</span>终止</div><div class=\"line\"><span class=\"string\">/reset</span> <span class=\"string\">//</span>重置</div><div class=\"line\"><span class=\"string\">/rosout/get_loggers</span></div><div class=\"line\"><span class=\"string\">/rosout/set_logger_level</span></div><div class=\"line\"><span class=\"string\">/spawn</span> <span class=\"string\">//</span>再生</div><div class=\"line\"><span class=\"string\">/turtle1/set_pen</span> <span class=\"string\">//</span>设定画笔包括颜色、线条宽度、开关等</div><div class=\"line\"><span class=\"string\">/turtle1/teleport_absolute</span> <span class=\"string\">//</span>绝对参数</div><div class=\"line\"><span class=\"string\">/turtle1/teleport_relative</span> <span class=\"string\">//</span>相对参数</div><div class=\"line\"><span class=\"string\">/turtlesim/get_loggers</span> <span class=\"string\">//</span>日志</div><div class=\"line\"><span class=\"string\">/turtlesim/set_logger_level</span> <span class=\"string\">//</span>日志等级</div></pre></td></tr></table></figure></p>\n<p>参数的详细说明参阅 <a href=\"http://wiki.ros.org/turtlesim\" target=\"_blank\" rel=\"external\">turtlesim</a>。</p>\n<h2 id=\"rosservice-type\"><a href=\"#rosservice-type\" class=\"headerlink\" title=\"rosservice type\"></a>rosservice type</h2><p>rosservice type 用于显示某个服务的类型，使用方法：<br>   <figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">rosservice</span> <span class=\"keyword\">type</span> [service]</div></pre></td></tr></table></figure></p>\n<p>比如我们想查看 turtlesim 节点提供的 clear 服务：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosservice <span class=\"built_in\">type</span> clear</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">std_srvs/<span class=\"keyword\">Empty</span></div></pre></td></tr></table></figure></p>\n<p>服务的类型为空Empty,这表明在调用这个服务时不需要参数。那我们调用一次这个参数看下效果，使用方法：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosservice call <span class=\"string\">[service]</span> <span class=\"string\">[args]</span></div></pre></td></tr></table></figure></p>\n<p>测试：<br>   <figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosservice <span class=\"keyword\">call</span> <span class=\"keyword\">clear</span></div></pre></td></tr></table></figure></p>\n<p>之前 turtule 运行的轨迹被清除。上面是不带参数的服务，我们查看一下带参数的服务 spwan:<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosservice <span class=\"built_in\">type</span> spawn| rossrv show</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">float32 x</div><div class=\"line\">float32 y</div><div class=\"line\">float32 theta</div><div class=\"line\"><span class=\"section\">string name</span></div><div class=\"line\">---</div><div class=\"line\">string name</div></pre></td></tr></table></figure></p>\n<p>以上可以看出 spawn 服务需要的参数有 x y 坐标值、角度以及名字等参数。我们使用 spawn 服务在指定位置再生成一个 turtle :<br>   <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosservice call spawn <span class=\"number\">3</span> <span class=\"number\">3</span> <span class=\"number\">1.8</span> <span class=\"string\">\"another turtle\"</span></div></pre></td></tr></table></figure></p>\n<p>上面命令在坐标(3,3) 方位角为 1.8 生成一个名字为 “anotherturtle” 的 turtle,注意名字之间不能有空格。<br><img src=\"/2017/05/31/ros-primary-tutorial-7/spawn.jpg\" alt=\"\"></p>\n<h1 id=\"ROS-参数\"><a href=\"#ROS-参数\" class=\"headerlink\" title=\"ROS 参数\"></a>ROS 参数</h1><p><a href=\"http://wiki.ros.org/rosparam\" target=\"_blank\" rel=\"external\">rosparam</a> 使得我们能够存储并操作 ROS 参数服务器 <a href=\"http://wiki.ros.org/Parameter%20Server\" target=\"_blank\" rel=\"external\">Parameter Server</a> 上的数据。参数服务器能够存储整型、浮点、布尔、字符串、字典和列表等数据类型。<a href=\"http://wiki.ros.org/rosparam\" target=\"_blank\" rel=\"external\">rosparam</a> 使用 <a href=\"https://zh.wikipedia.org/wiki/YAML\" target=\"_blank\" rel=\"external\">YAML</a> 标记语言的语法。一般而言，<a href=\"https://zh.wikipedia.org/wiki/YAML\" target=\"_blank\" rel=\"external\">YAML</a> 的表述很自然：1 是整型, 1.0 是浮点型, one 是字符串, true 是布尔, [1, 2, 3]是整型列表, {a: b, c: d}是字典。 <a href=\"http://wiki.ros.org/rosparam\" target=\"_blank\" rel=\"external\">rosparam</a> 有很多指令可以用来操作参数:<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosparam <span class=\"keyword\">set</span>            设置参数</div><div class=\"line\">rosparam <span class=\"comment\">get</span>            获取参数</div><div class=\"line\">rosparam <span class=\"comment\">load</span>           从文件读取参数</div><div class=\"line\">rosparam <span class=\"comment\">dump</span>           向文件中写入参数</div><div class=\"line\">rosparam <span class=\"comment\">delete</span>         删除参数</div><div class=\"line\">rosparam <span class=\"comment\">list</span>           列出参数名</div></pre></td></tr></table></figure></p>\n<p>rosparam list 命令可列出某个节点在参数服务器上的各种参数：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosparam list</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">/background_b</span> <span class=\"string\">//</span>背景颜色 </div><div class=\"line\"><span class=\"string\">/background_g</span> <span class=\"string\">//</span>背景颜色</div><div class=\"line\"><span class=\"string\">/background_r</span> <span class=\"string\">//</span>背景颜色</div><div class=\"line\"><span class=\"string\">/rosdistro</span></div><div class=\"line\"><span class=\"string\">/roslaunch/uris/host_ubuntu__39737</span></div><div class=\"line\"><span class=\"string\">/rosversion</span></div><div class=\"line\"><span class=\"string\">/run_id</span></div></pre></td></tr></table></figure></p>\n<p>设置背景颜色通过命令 rosparam set 获取背景颜色使用命令 rosparam get<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosparam set <span class=\"string\">[param_name]</span></div><div class=\"line\">rosparam get <span class=\"string\">[param_name]</span></div></pre></td></tr></table></figure></p>\n<p>我们修改一下红色值：<br>   <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">$</span> rosparam <span class=\"keyword\">set</span> background_r <span class=\"comment\">200</span></div></pre></td></tr></table></figure></p>\n<p>调用清除命令参数才能生效：<br>   <figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosservice <span class=\"keyword\">call</span> <span class=\"keyword\">clear</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/31/ros-primary-tutorial-7/rosparam.jpg\" alt=\"\"><br>获取参数值：<br>   <figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosparam <span class=\"keyword\">get</span> /  <span class=\"comment\">//显示服务器上所有参数内容</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">background_b</span>: <span class=\"number\">255</span></div><div class=\"line\"><span class=\"attribute\">background_g</span>: <span class=\"number\">10</span></div><div class=\"line\"><span class=\"attribute\">background_r</span>: <span class=\"number\">200</span></div><div class=\"line\"><span class=\"attribute\">rosdistro</span>: 'indigo</div><div class=\"line\"></div><div class=\"line\"> '</div><div class=\"line\"><span class=\"attribute\">roslaunch</span>:</div><div class=\"line\"> <span class=\"attribute\">uris</span>: &#123;<span class=\"attribute\">host_ubuntu__39737</span>: <span class=\"string\">'http://ubuntu:39737/'</span>&#125;</div><div class=\"line\"><span class=\"attribute\">rosversion</span>: '<span class=\"number\">1.11</span>.<span class=\"number\">20</span></div><div class=\"line\"></div><div class=\"line\"> '</div><div class=\"line\"><span class=\"attribute\">run_id</span>: <span class=\"number\">0</span>efaaffc-<span class=\"number\">4599</span>-<span class=\"number\">11</span>e7-a400-<span class=\"number\">000</span>c2915ac77</div></pre></td></tr></table></figure></p>\n<p>获取某个参数值，比如获取红色通道的值：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosparam get background_r</span></div></pre></td></tr></table></figure></p>\n<p>可以使用 rosparam dump 命令将所有参数进行存储，使用 rosparam load 命令读取所有参数：<br>使用方法：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosparam dump <span class=\"string\">[file_name]</span></div><div class=\"line\">rosparam load <span class=\"string\">[file_name]</span> <span class=\"string\">[namespace]</span></div></pre></td></tr></table></figure></p>\n<p>将所有参数写入文件 myparams.yaml 中：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosparam dump myparams.yaml</span></div></pre></td></tr></table></figure></p>\n<p>载入参数：<br>   <figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosparam load params.yaml <span class=\"keyword\">copy</span><span class=\"bash\">  //将参数载入 copy 空间</span></div><div class=\"line\">$ rosparam get <span class=\"keyword\">copy</span><span class=\"bash\">/background_r</span></div></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingServicesParams\" target=\"_blank\" rel=\"external\">UnderstandingServicesParams</a></p>"},{"title":"ROS初级九 创建ROS消息和ROS服务","date":"2017-05-31T05:31:50.000Z","comments":1,"_content":"本篇学习如何创建并编译 ROS 消息和服务，以及 [rosmsg](http://wiki.ros.org/rosmsg) [rossrv](http://wiki.ros.org/srv) [roscp](http://wiki.ros.org/rosbash#roscp) [rosed](http://wiki.ros.org/rosbash#rosed) 等命令的使用。\n<!--more-->\n# rosed\n[rosed](http://wiki.ros.org/rosbash#rosed) 是 [rosbash](http://wiki.ros.org/rosbash) 的一部分，相当于 ros + edit。利用 [rosed](http://wiki.ros.org/rosbash#rosed) 可以直接通过 package 名称来获取到待编辑的文件而无需指定该文件的存储路径，使用方法：\n   ```\n rosed [package_name] [filename]\n   ```\n示例直接打开 beginner_tutorials 中的 talker.cpp文件：\n   ```\n $ rosed beginner_tutoris talker.cpp\n   ```\n[rosed](http://wiki.ros.org/rosbash#rosed) 默认的编辑器是 [vim](http://www.vim.org/) ，可以将以下命令添加到 ~/.bashrc 文件中来修改默认的编辑器：\n   ```\n export EDITOR=/usr/local/bin/vim\n   ```\n或者修改为使用 [emacs](https://www.gnu.org/software/emacs/) 为默认编辑器：\n   ```\n export EDITOR='emacs -nw'\n   ```\n打开一个新的终端，看看定义的 EDITOR 是否正确:\n   ```\n $ echo $EDITOR\n   ```\n# 消息和服务介绍\n消息 msg 文件是一个描述 ROS 中所使用的消息类型的一个简单文本，它们会被用来生成不同语言的源代码。服务 srv 文件用于描述一项服务，它包含两部分，请求和响应。\nmsg 文件存放在 package 的 msg 目录下，srv 文件存放于package 的 srv 目录下。msg 文件每行声明一个数据类型和变量名，目前支持的数据类型有：\n   ```\n int8, int16, int32, int64 (plus uint*) \n float32, float64 \n string \n time, duration \n other msg files \n variable-length array[] and fixed-length array[C] \n   ```\n在 ROS 中有一个特殊的数据类型：Header，它含有时间戳和坐标系信息。在 msg 文件的第一行经常可以看到 Header header的声明。\nmsg 文件样例：\n   ```\n Header header\n string child_frame_id\n geometry_msgs/PoseWithCovariance pose\n geometry_msgs/TwistWithCovariance twist\n   ```\nsrv 文件分为请求和响应两部分，由'---'分隔。样例：\n   ```\n int64 A\n int64 B\n ---\n int64 Sum\n   ```\nA 和 B 是请求，sum 是响应。\n# msg 的使用\n在之前创建的 beginner_tutorial 里定义新的消息：\n   ```\n $ roscd beginner_tutorials/\n $ mkdir msg\n $ echo \"int64 num\" > msg/Num.msg\n   ```\n上面是最简单的例子在.msg文件中只有一行数据。当然，也可以仿造上面的形式多增加几行以得到更为复杂的消息：\n   ```\n string first_name\n string last_name\n uint8 age\n uint32 score\n   ```\n接下来需要确保 msg 文件被转换成 C++,Python和其他语言的源代码，查看 package.xml：\n   ```\n $ rosed beginner_tutorials  package.xml\n   ```\n确保它包含以下两条语句：\n   ```\n <build_depend>message_generation</build_depend>\n <run_depend>message_runtime</run_depend>\n   ```\n在构建的时候，我们只需要\"message_generation\"。然而，在运行的时候，我们只需要\"message_runtime\"。 打开 CMakeLists.txt 文件，利用 find_packag 函数，增加对 message_generation 的依赖，这样就可以生成消息了。 可以直接在 COMPONENTS 的列表里增加 message_generation ：\n   ```\n $ rosed beginner_tutorials CMakeLists.txt\n   ```\n   ```\n// Do not just add this line to your CMakeLists.txt,  modify the existing line\n find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs message_generation)\n   ```\n即使没有调用 find_package, 也可以编译通过。这是因为 catkin 把所有的 package 都整合在一起，因此，如果其他的 package 调用了 find_package，你的 package 的依赖就会是同样的配置。但是，在单独编译这个 package 时，忘记调用 find_package 会很容易出错。确保设置了运行依赖项：\n   ```\ncatkin_package(\n  ...\n  CATKIN_DEPENDS message_runtime ...\n  ...)\n   ```\n找到如下代码块: \n   ```\n// add_message_files(\n//  FILES\n//  Message1.msg\n//   Message2.msg\n// )\n   ```\n去掉注释符号，用前面定义的.msg文件替代Message*.msg\n   ```\n add_message_files(\n  FILES\n  Num.msg\n )\n   ```\n手动添加.msg文件后，我们要确保CMake知道在什么时候重新配置我们的project。 确保添加了如下代码：\n   ```\n generate_messages()\n   ```\n查看自定义的消息文件能否被 ROS 识别，使用方法：\n   ```\n rosmsg show [message type]\n   ```\n示例：\n   ```\n $ rosmsg show beginner_tutorials/Num \n $ rosmsg show Num // 也可以省略掉 package 名\n   ```\n输出：\n   ```\n int64 num\n string first_name\n string last_name\n uint8 age\n uint8 score\n   ```\n# srv 的使用\n在 beginner_tutorials 中创建服务，我们从其他 ROS 包中拷贝一个 srv 文件：\n   ```\n $ roscd beginner_tutorials\n $ mkdir srv\n $ roscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv\n   ```\n确保 srv 文件被转换成C++ Python 和其他语言的源代码。CMakeLists.txt 文件中关于 message_generation 的配置对 msg 和 srv 都起作用：\n   ```\n //Do not just add this line to your CMakeLists.txt, modify the existing line\n find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs message_generation)\n   ```\n修改 CMakeLists.txt 文件增加 srv 依赖项：\n   ```\n add_service_files(\n  FILES\n  AddTwoInts.srv\n )\n   ```\n查看服务能否被 ROS 识别，使用方法：\n   ```\n rossrv show <service type>\n   ```\n示例：\n   ```\n $ rossrv show beginner_tutorials/AddTwoInts\n $ rossrv show AddTwoInts //也可以不指定 package 名字\n   ```\n输出：\n   ```\n int64 a\n int64 b\n ---\n int64 sum\n\n   ```\n# 编译\n通过上面为 beginner_tutorials 包添加的 msg 文件和 srv 文件，接下来就可以编译了。编译之前先在 CMakeLists.txt 文件中添加所有消息文件所依赖的那些含有 .msg 文件的 package ：\n   ```\n generate_messages(\n  DEPENDENCIES\n  std_msgs\n )\n   ```\n编译：\n   ```\n $ cd ~/catkin_ws/\n $ catkin_make\n   ```\n编译完成后，所有在 msg 路径下的 .msg 文件都将转换为 ROS 所支持语言的源代码。生成的 C++ 头文件将会放置在 ~/catkin_ws/devel/include/beginner_tutorials/目录下；Python脚本语言会在~/catkin_ws/devel/lib/python2.7/dist-packages/beginner_tutorials/msg 目录下创建。 lisp 文件会出现在 ~/catkin_ws/devel/share/common-lisp/ros/beginner_tutorials/msg/ 路径下。详细格式参考 [Message_Description_Language](http://wiki.ros.org/ROS/Message_Description_Language) 。\n\n参考 [CreatingMsgAndSrv](http://wiki.ros.org/cn/ROS/Tutorials/CreatingMsgAndSrv) ","source":"_posts/ros-primary-tutorial-9.md","raw":"---\ntitle: ROS初级九 创建ROS消息和ROS服务\ndate: 2017-05-31 13:31:50\ncategories: ROS\ntags: ROS Messages\ncomments: true\n---\n本篇学习如何创建并编译 ROS 消息和服务，以及 [rosmsg](http://wiki.ros.org/rosmsg) [rossrv](http://wiki.ros.org/srv) [roscp](http://wiki.ros.org/rosbash#roscp) [rosed](http://wiki.ros.org/rosbash#rosed) 等命令的使用。\n<!--more-->\n# rosed\n[rosed](http://wiki.ros.org/rosbash#rosed) 是 [rosbash](http://wiki.ros.org/rosbash) 的一部分，相当于 ros + edit。利用 [rosed](http://wiki.ros.org/rosbash#rosed) 可以直接通过 package 名称来获取到待编辑的文件而无需指定该文件的存储路径，使用方法：\n   ```\n rosed [package_name] [filename]\n   ```\n示例直接打开 beginner_tutorials 中的 talker.cpp文件：\n   ```\n $ rosed beginner_tutoris talker.cpp\n   ```\n[rosed](http://wiki.ros.org/rosbash#rosed) 默认的编辑器是 [vim](http://www.vim.org/) ，可以将以下命令添加到 ~/.bashrc 文件中来修改默认的编辑器：\n   ```\n export EDITOR=/usr/local/bin/vim\n   ```\n或者修改为使用 [emacs](https://www.gnu.org/software/emacs/) 为默认编辑器：\n   ```\n export EDITOR='emacs -nw'\n   ```\n打开一个新的终端，看看定义的 EDITOR 是否正确:\n   ```\n $ echo $EDITOR\n   ```\n# 消息和服务介绍\n消息 msg 文件是一个描述 ROS 中所使用的消息类型的一个简单文本，它们会被用来生成不同语言的源代码。服务 srv 文件用于描述一项服务，它包含两部分，请求和响应。\nmsg 文件存放在 package 的 msg 目录下，srv 文件存放于package 的 srv 目录下。msg 文件每行声明一个数据类型和变量名，目前支持的数据类型有：\n   ```\n int8, int16, int32, int64 (plus uint*) \n float32, float64 \n string \n time, duration \n other msg files \n variable-length array[] and fixed-length array[C] \n   ```\n在 ROS 中有一个特殊的数据类型：Header，它含有时间戳和坐标系信息。在 msg 文件的第一行经常可以看到 Header header的声明。\nmsg 文件样例：\n   ```\n Header header\n string child_frame_id\n geometry_msgs/PoseWithCovariance pose\n geometry_msgs/TwistWithCovariance twist\n   ```\nsrv 文件分为请求和响应两部分，由'---'分隔。样例：\n   ```\n int64 A\n int64 B\n ---\n int64 Sum\n   ```\nA 和 B 是请求，sum 是响应。\n# msg 的使用\n在之前创建的 beginner_tutorial 里定义新的消息：\n   ```\n $ roscd beginner_tutorials/\n $ mkdir msg\n $ echo \"int64 num\" > msg/Num.msg\n   ```\n上面是最简单的例子在.msg文件中只有一行数据。当然，也可以仿造上面的形式多增加几行以得到更为复杂的消息：\n   ```\n string first_name\n string last_name\n uint8 age\n uint32 score\n   ```\n接下来需要确保 msg 文件被转换成 C++,Python和其他语言的源代码，查看 package.xml：\n   ```\n $ rosed beginner_tutorials  package.xml\n   ```\n确保它包含以下两条语句：\n   ```\n <build_depend>message_generation</build_depend>\n <run_depend>message_runtime</run_depend>\n   ```\n在构建的时候，我们只需要\"message_generation\"。然而，在运行的时候，我们只需要\"message_runtime\"。 打开 CMakeLists.txt 文件，利用 find_packag 函数，增加对 message_generation 的依赖，这样就可以生成消息了。 可以直接在 COMPONENTS 的列表里增加 message_generation ：\n   ```\n $ rosed beginner_tutorials CMakeLists.txt\n   ```\n   ```\n// Do not just add this line to your CMakeLists.txt,  modify the existing line\n find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs message_generation)\n   ```\n即使没有调用 find_package, 也可以编译通过。这是因为 catkin 把所有的 package 都整合在一起，因此，如果其他的 package 调用了 find_package，你的 package 的依赖就会是同样的配置。但是，在单独编译这个 package 时，忘记调用 find_package 会很容易出错。确保设置了运行依赖项：\n   ```\ncatkin_package(\n  ...\n  CATKIN_DEPENDS message_runtime ...\n  ...)\n   ```\n找到如下代码块: \n   ```\n// add_message_files(\n//  FILES\n//  Message1.msg\n//   Message2.msg\n// )\n   ```\n去掉注释符号，用前面定义的.msg文件替代Message*.msg\n   ```\n add_message_files(\n  FILES\n  Num.msg\n )\n   ```\n手动添加.msg文件后，我们要确保CMake知道在什么时候重新配置我们的project。 确保添加了如下代码：\n   ```\n generate_messages()\n   ```\n查看自定义的消息文件能否被 ROS 识别，使用方法：\n   ```\n rosmsg show [message type]\n   ```\n示例：\n   ```\n $ rosmsg show beginner_tutorials/Num \n $ rosmsg show Num // 也可以省略掉 package 名\n   ```\n输出：\n   ```\n int64 num\n string first_name\n string last_name\n uint8 age\n uint8 score\n   ```\n# srv 的使用\n在 beginner_tutorials 中创建服务，我们从其他 ROS 包中拷贝一个 srv 文件：\n   ```\n $ roscd beginner_tutorials\n $ mkdir srv\n $ roscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv\n   ```\n确保 srv 文件被转换成C++ Python 和其他语言的源代码。CMakeLists.txt 文件中关于 message_generation 的配置对 msg 和 srv 都起作用：\n   ```\n //Do not just add this line to your CMakeLists.txt, modify the existing line\n find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs message_generation)\n   ```\n修改 CMakeLists.txt 文件增加 srv 依赖项：\n   ```\n add_service_files(\n  FILES\n  AddTwoInts.srv\n )\n   ```\n查看服务能否被 ROS 识别，使用方法：\n   ```\n rossrv show <service type>\n   ```\n示例：\n   ```\n $ rossrv show beginner_tutorials/AddTwoInts\n $ rossrv show AddTwoInts //也可以不指定 package 名字\n   ```\n输出：\n   ```\n int64 a\n int64 b\n ---\n int64 sum\n\n   ```\n# 编译\n通过上面为 beginner_tutorials 包添加的 msg 文件和 srv 文件，接下来就可以编译了。编译之前先在 CMakeLists.txt 文件中添加所有消息文件所依赖的那些含有 .msg 文件的 package ：\n   ```\n generate_messages(\n  DEPENDENCIES\n  std_msgs\n )\n   ```\n编译：\n   ```\n $ cd ~/catkin_ws/\n $ catkin_make\n   ```\n编译完成后，所有在 msg 路径下的 .msg 文件都将转换为 ROS 所支持语言的源代码。生成的 C++ 头文件将会放置在 ~/catkin_ws/devel/include/beginner_tutorials/目录下；Python脚本语言会在~/catkin_ws/devel/lib/python2.7/dist-packages/beginner_tutorials/msg 目录下创建。 lisp 文件会出现在 ~/catkin_ws/devel/share/common-lisp/ros/beginner_tutorials/msg/ 路径下。详细格式参考 [Message_Description_Language](http://wiki.ros.org/ROS/Message_Description_Language) 。\n\n参考 [CreatingMsgAndSrv](http://wiki.ros.org/cn/ROS/Tutorials/CreatingMsgAndSrv) ","slug":"ros-primary-tutorial-9","published":1,"updated":"2017-06-13T05:54:21.768Z","layout":"post","photos":[],"link":"","_id":"cj4hne53o002iw8inw9yasxk4","content":"<p>本篇学习如何创建并编译 ROS 消息和服务，以及 <a href=\"http://wiki.ros.org/rosmsg\" target=\"_blank\" rel=\"external\">rosmsg</a> <a href=\"http://wiki.ros.org/srv\" target=\"_blank\" rel=\"external\">rossrv</a> <a href=\"http://wiki.ros.org/rosbash#roscp\" target=\"_blank\" rel=\"external\">roscp</a> <a href=\"http://wiki.ros.org/rosbash#rosed\" target=\"_blank\" rel=\"external\">rosed</a> 等命令的使用。<br><a id=\"more\"></a></p>\n<h1 id=\"rosed\"><a href=\"#rosed\" class=\"headerlink\" title=\"rosed\"></a>rosed</h1><p><a href=\"http://wiki.ros.org/rosbash#rosed\" target=\"_blank\" rel=\"external\">rosed</a> 是 <a href=\"http://wiki.ros.org/rosbash\" target=\"_blank\" rel=\"external\">rosbash</a> 的一部分，相当于 ros + edit。利用 <a href=\"http://wiki.ros.org/rosbash#rosed\" target=\"_blank\" rel=\"external\">rosed</a> 可以直接通过 package 名称来获取到待编辑的文件而无需指定该文件的存储路径，使用方法：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosed <span class=\"string\">[package_name]</span> <span class=\"string\">[filename]</span></div></pre></td></tr></table></figure></p>\n<p>示例直接打开 beginner_tutorials 中的 talker.cpp文件：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosed beginner_tutoris talker.cpp</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"http://wiki.ros.org/rosbash#rosed\" target=\"_blank\" rel=\"external\">rosed</a> 默认的编辑器是 <a href=\"http://www.vim.org/\" target=\"_blank\" rel=\"external\">vim</a> ，可以将以下命令添加到 ~/.bashrc 文件中来修改默认的编辑器：<br>   <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export EDITOR=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/bin/</span>vim</div></pre></td></tr></table></figure></p>\n<p>或者修改为使用 <a href=\"https://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">emacs</a> 为默认编辑器：<br>   <figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> EDITOR=<span class=\"string\">'emacs -nw'</span></div></pre></td></tr></table></figure></p>\n<p>打开一个新的终端，看看定义的 EDITOR 是否正确:<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$EDITOR</span></span></div></pre></td></tr></table></figure></p>\n<h1 id=\"消息和服务介绍\"><a href=\"#消息和服务介绍\" class=\"headerlink\" title=\"消息和服务介绍\"></a>消息和服务介绍</h1><p>消息 msg 文件是一个描述 ROS 中所使用的消息类型的一个简单文本，它们会被用来生成不同语言的源代码。服务 srv 文件用于描述一项服务，它包含两部分，请求和响应。<br>msg 文件存放在 package 的 msg 目录下，srv 文件存放于package 的 srv 目录下。msg 文件每行声明一个数据类型和变量名，目前支持的数据类型有：<br>   <figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">int8</span>, <span class=\"built_in\">int16</span>, <span class=\"built_in\">int32</span>, <span class=\"built_in\">int64</span> (plus <span class=\"built_in\">uint</span>*) </div><div class=\"line\"><span class=\"built_in\">float32</span>, <span class=\"built_in\">float64</span> </div><div class=\"line\"><span class=\"built_in\">string</span> </div><div class=\"line\">time, duration </div><div class=\"line\">other msg files </div><div class=\"line\">variable-length <span class=\"built_in\">array</span>[] <span class=\"keyword\">and</span> fixed-length <span class=\"built_in\">array</span>[C]</div></pre></td></tr></table></figure></p>\n<p>在 ROS 中有一个特殊的数据类型：Header，它含有时间戳和坐标系信息。在 msg 文件的第一行经常可以看到 Header header的声明。<br>msg 文件样例：<br>   <figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Header</span> <span class=\"built_in\">header</span></div><div class=\"line\"><span class=\"keyword\">string</span> child_frame_id</div><div class=\"line\">geometry_msgs/PoseWithCovariance pose</div><div class=\"line\">geometry_msgs/TwistWithCovariance twist</div></pre></td></tr></table></figure></p>\n<p>srv 文件分为请求和响应两部分，由’—‘分隔。样例：<br>   <figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">int64 A</div><div class=\"line\"><span class=\"section\">int64 B</span></div><div class=\"line\">---</div><div class=\"line\">int64 Sum</div></pre></td></tr></table></figure></p>\n<p>A 和 B 是请求，sum 是响应。</p>\n<h1 id=\"msg-的使用\"><a href=\"#msg-的使用\" class=\"headerlink\" title=\"msg 的使用\"></a>msg 的使用</h1><p>在之前创建的 beginner_tutorial 里定义新的消息：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscd beginner_tutorials/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir msg</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">\"int64 num\"</span> &gt; msg/Num.msg</span></div></pre></td></tr></table></figure></p>\n<p>上面是最简单的例子在.msg文件中只有一行数据。当然，也可以仿造上面的形式多增加几行以得到更为复杂的消息：<br>   <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">string</span> first_name</div><div class=\"line\"><span class=\"keyword\">string</span> last_name</div><div class=\"line\"><span class=\"keyword\">uint8</span> age</div><div class=\"line\"><span class=\"keyword\">uint32</span> score</div></pre></td></tr></table></figure></p>\n<p>接下来需要确保 msg 文件被转换成 C++,Python和其他语言的源代码，查看 package.xml：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosed beginner_tutorials  package.xml</span></div></pre></td></tr></table></figure></p>\n<p>确保它包含以下两条语句：<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>message_generation<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>message_runtime<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在构建的时候，我们只需要”message_generation”。然而，在运行的时候，我们只需要”message_runtime”。 打开 CMakeLists.txt 文件，利用 find_packag 函数，增加对 message_generation 的依赖，这样就可以生成消息了。 可以直接在 COMPONENTS 的列表里增加 message_generation ：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosed beginner_tutorials CMakeLists.txt</span></div></pre></td></tr></table></figure></p>\n   <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Do <span class=\"keyword\">not</span> just <span class=\"built_in\">add</span> this <span class=\"built_in\">line</span> <span class=\"built_in\">to</span> your CMakeLists.txt,  modify <span class=\"keyword\">the</span> existing <span class=\"built_in\">line</span></div><div class=\"line\"> find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs message_generation)</div></pre></td></tr></table></figure>\n<p>即使没有调用 find_package, 也可以编译通过。这是因为 catkin 把所有的 package 都整合在一起，因此，如果其他的 package 调用了 find_package，你的 package 的依赖就会是同样的配置。但是，在单独编译这个 package 时，忘记调用 find_package 会很容易出错。确保设置了运行依赖项：<br>   <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin_package(</div><div class=\"line\">  ...</div><div class=\"line\">  CATKIN_DEPENDS message_runtime ...</div><div class=\"line\">  ...)</div></pre></td></tr></table></figure></p>\n<p>找到如下代码块:<br>   <figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// add_message_files(</span></div><div class=\"line\"><span class=\"comment\">//  FILES</span></div><div class=\"line\"><span class=\"comment\">//  Message1.msg</span></div><div class=\"line\"><span class=\"comment\">//   Message2.msg</span></div><div class=\"line\"><span class=\"comment\">// )</span></div></pre></td></tr></table></figure></p>\n<p>去掉注释符号，用前面定义的.msg文件替代Message*.msg<br>   <figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">add_message_files(</div><div class=\"line\"> <span class=\"name\">FILES</span></div><div class=\"line\"> Num.msg</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>手动添加.msg文件后，我们要确保CMake知道在什么时候重新配置我们的project。 确保添加了如下代码：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">generate_messages</span><span class=\"params\">()</span></span></div></pre></td></tr></table></figure></p>\n<p>查看自定义的消息文件能否被 ROS 识别，使用方法：<br>   <figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosmsg show [<span class=\"keyword\">message</span> <span class=\"keyword\">type</span>]</div></pre></td></tr></table></figure></p>\n<p>示例：<br>   <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosmsg <span class=\"keyword\">show</span> beginner_tutorials/<span class=\"keyword\">Num</span> </div><div class=\"line\">$ rosmsg <span class=\"keyword\">show</span> <span class=\"keyword\">Num</span> // 也可以省略掉 <span class=\"keyword\">package</span> 名</div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int64</span> num</div><div class=\"line\"><span class=\"keyword\">string</span> first_name</div><div class=\"line\"><span class=\"keyword\">string</span> last_name</div><div class=\"line\"><span class=\"keyword\">uint8</span> age</div><div class=\"line\"><span class=\"keyword\">uint8</span> score</div></pre></td></tr></table></figure></p>\n<h1 id=\"srv-的使用\"><a href=\"#srv-的使用\" class=\"headerlink\" title=\"srv 的使用\"></a>srv 的使用</h1><p>在 beginner_tutorials 中创建服务，我们从其他 ROS 包中拷贝一个 srv 文件：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscd beginner_tutorials</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir srv</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv</span></div></pre></td></tr></table></figure></p>\n<p>确保 srv 文件被转换成C++ Python 和其他语言的源代码。CMakeLists.txt 文件中关于 message_generation 的配置对 msg 和 srv 都起作用：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Do not just add this line to your CMakeLists.txt, modify the existing line</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">find_package</span><span class=\"params\">(catkin REQUIRED COMPONENTS roscpp rospy std_msgs message_generation)</span></span></div></pre></td></tr></table></figure></p>\n<p>修改 CMakeLists.txt 文件增加 srv 依赖项：<br>   <figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">add_service_files(</span></div><div class=\"line\"> FILES</div><div class=\"line\"> <span class=\"keyword\">AddTwoInts.srv</span></div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>查看服务能否被 ROS 识别，使用方法：<br>   <figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">rossrv</span> show &lt;service <span class=\"keyword\">type</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>示例：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rossrv show beginner_tutorials/AddTwoInts</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rossrv show AddTwoInts //也可以不指定 package 名字</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">int64 a</div><div class=\"line\"><span class=\"section\">int64 b</span></div><div class=\"line\">---</div><div class=\"line\">int64 sum</div></pre></td></tr></table></figure></p>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><p>通过上面为 beginner_tutorials 包添加的 msg 文件和 srv 文件，接下来就可以编译了。编译之前先在 CMakeLists.txt 文件中添加所有消息文件所依赖的那些含有 .msg 文件的 package ：<br>   <figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">generate_messages(</div><div class=\"line\"> <span class=\"name\">DEPENDENCIES</span></div><div class=\"line\"> std_msgs</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>编译：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_make</span></div></pre></td></tr></table></figure></p>\n<p>编译完成后，所有在 msg 路径下的 .msg 文件都将转换为 ROS 所支持语言的源代码。生成的 C++ 头文件将会放置在 ~/catkin_ws/devel/include/beginner_tutorials/目录下；Python脚本语言会在~/catkin_ws/devel/lib/python2.7/dist-packages/beginner_tutorials/msg 目录下创建。 lisp 文件会出现在 ~/catkin_ws/devel/share/common-lisp/ros/beginner_tutorials/msg/ 路径下。详细格式参考 <a href=\"http://wiki.ros.org/ROS/Message_Description_Language\" target=\"_blank\" rel=\"external\">Message_Description_Language</a> 。</p>\n<p>参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials/CreatingMsgAndSrv\" target=\"_blank\" rel=\"external\">CreatingMsgAndSrv</a> </p>\n","site":{"data":{}},"excerpt":"<p>本篇学习如何创建并编译 ROS 消息和服务，以及 <a href=\"http://wiki.ros.org/rosmsg\" target=\"_blank\" rel=\"external\">rosmsg</a> <a href=\"http://wiki.ros.org/srv\" target=\"_blank\" rel=\"external\">rossrv</a> <a href=\"http://wiki.ros.org/rosbash#roscp\" target=\"_blank\" rel=\"external\">roscp</a> <a href=\"http://wiki.ros.org/rosbash#rosed\" target=\"_blank\" rel=\"external\">rosed</a> 等命令的使用。<br></p>","more":"<p></p>\n<h1 id=\"rosed\"><a href=\"#rosed\" class=\"headerlink\" title=\"rosed\"></a>rosed</h1><p><a href=\"http://wiki.ros.org/rosbash#rosed\" target=\"_blank\" rel=\"external\">rosed</a> 是 <a href=\"http://wiki.ros.org/rosbash\" target=\"_blank\" rel=\"external\">rosbash</a> 的一部分，相当于 ros + edit。利用 <a href=\"http://wiki.ros.org/rosbash#rosed\" target=\"_blank\" rel=\"external\">rosed</a> 可以直接通过 package 名称来获取到待编辑的文件而无需指定该文件的存储路径，使用方法：<br>   <figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosed <span class=\"string\">[package_name]</span> <span class=\"string\">[filename]</span></div></pre></td></tr></table></figure></p>\n<p>示例直接打开 beginner_tutorials 中的 talker.cpp文件：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosed beginner_tutoris talker.cpp</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"http://wiki.ros.org/rosbash#rosed\" target=\"_blank\" rel=\"external\">rosed</a> 默认的编辑器是 <a href=\"http://www.vim.org/\" target=\"_blank\" rel=\"external\">vim</a> ，可以将以下命令添加到 ~/.bashrc 文件中来修改默认的编辑器：<br>   <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export EDITOR=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/bin/</span>vim</div></pre></td></tr></table></figure></p>\n<p>或者修改为使用 <a href=\"https://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">emacs</a> 为默认编辑器：<br>   <figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> EDITOR=<span class=\"string\">'emacs -nw'</span></div></pre></td></tr></table></figure></p>\n<p>打开一个新的终端，看看定义的 EDITOR 是否正确:<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$EDITOR</span></span></div></pre></td></tr></table></figure></p>\n<h1 id=\"消息和服务介绍\"><a href=\"#消息和服务介绍\" class=\"headerlink\" title=\"消息和服务介绍\"></a>消息和服务介绍</h1><p>消息 msg 文件是一个描述 ROS 中所使用的消息类型的一个简单文本，它们会被用来生成不同语言的源代码。服务 srv 文件用于描述一项服务，它包含两部分，请求和响应。<br>msg 文件存放在 package 的 msg 目录下，srv 文件存放于package 的 srv 目录下。msg 文件每行声明一个数据类型和变量名，目前支持的数据类型有：<br>   <figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">int8</span>, <span class=\"built_in\">int16</span>, <span class=\"built_in\">int32</span>, <span class=\"built_in\">int64</span> (plus <span class=\"built_in\">uint</span>*) </div><div class=\"line\"><span class=\"built_in\">float32</span>, <span class=\"built_in\">float64</span> </div><div class=\"line\"><span class=\"built_in\">string</span> </div><div class=\"line\">time, duration </div><div class=\"line\">other msg files </div><div class=\"line\">variable-length <span class=\"built_in\">array</span>[] <span class=\"keyword\">and</span> fixed-length <span class=\"built_in\">array</span>[C]</div></pre></td></tr></table></figure></p>\n<p>在 ROS 中有一个特殊的数据类型：Header，它含有时间戳和坐标系信息。在 msg 文件的第一行经常可以看到 Header header的声明。<br>msg 文件样例：<br>   <figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Header</span> <span class=\"built_in\">header</span></div><div class=\"line\"><span class=\"keyword\">string</span> child_frame_id</div><div class=\"line\">geometry_msgs/PoseWithCovariance pose</div><div class=\"line\">geometry_msgs/TwistWithCovariance twist</div></pre></td></tr></table></figure></p>\n<p>srv 文件分为请求和响应两部分，由’—‘分隔。样例：<br>   <figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">int64 A</div><div class=\"line\"><span class=\"section\">int64 B</span></div><div class=\"line\">---</div><div class=\"line\">int64 Sum</div></pre></td></tr></table></figure></p>\n<p>A 和 B 是请求，sum 是响应。</p>\n<h1 id=\"msg-的使用\"><a href=\"#msg-的使用\" class=\"headerlink\" title=\"msg 的使用\"></a>msg 的使用</h1><p>在之前创建的 beginner_tutorial 里定义新的消息：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscd beginner_tutorials/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir msg</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">\"int64 num\"</span> &gt; msg/Num.msg</span></div></pre></td></tr></table></figure></p>\n<p>上面是最简单的例子在.msg文件中只有一行数据。当然，也可以仿造上面的形式多增加几行以得到更为复杂的消息：<br>   <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">string</span> first_name</div><div class=\"line\"><span class=\"keyword\">string</span> last_name</div><div class=\"line\"><span class=\"keyword\">uint8</span> age</div><div class=\"line\"><span class=\"keyword\">uint32</span> score</div></pre></td></tr></table></figure></p>\n<p>接下来需要确保 msg 文件被转换成 C++,Python和其他语言的源代码，查看 package.xml：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosed beginner_tutorials  package.xml</span></div></pre></td></tr></table></figure></p>\n<p>确保它包含以下两条语句：<br>   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>message_generation<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>message_runtime<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在构建的时候，我们只需要”message_generation”。然而，在运行的时候，我们只需要”message_runtime”。 打开 CMakeLists.txt 文件，利用 find_packag 函数，增加对 message_generation 的依赖，这样就可以生成消息了。 可以直接在 COMPONENTS 的列表里增加 message_generation ：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rosed beginner_tutorials CMakeLists.txt</span></div></pre></td></tr></table></figure></p>\n   <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Do <span class=\"keyword\">not</span> just <span class=\"built_in\">add</span> this <span class=\"built_in\">line</span> <span class=\"built_in\">to</span> your CMakeLists.txt,  modify <span class=\"keyword\">the</span> existing <span class=\"built_in\">line</span></div><div class=\"line\"> find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs message_generation)</div></pre></td></tr></table></figure>\n<p>即使没有调用 find_package, 也可以编译通过。这是因为 catkin 把所有的 package 都整合在一起，因此，如果其他的 package 调用了 find_package，你的 package 的依赖就会是同样的配置。但是，在单独编译这个 package 时，忘记调用 find_package 会很容易出错。确保设置了运行依赖项：<br>   <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin_package(</div><div class=\"line\">  ...</div><div class=\"line\">  CATKIN_DEPENDS message_runtime ...</div><div class=\"line\">  ...)</div></pre></td></tr></table></figure></p>\n<p>找到如下代码块:<br>   <figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// add_message_files(</span></div><div class=\"line\"><span class=\"comment\">//  FILES</span></div><div class=\"line\"><span class=\"comment\">//  Message1.msg</span></div><div class=\"line\"><span class=\"comment\">//   Message2.msg</span></div><div class=\"line\"><span class=\"comment\">// )</span></div></pre></td></tr></table></figure></p>\n<p>去掉注释符号，用前面定义的.msg文件替代Message*.msg<br>   <figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">add_message_files(</div><div class=\"line\"> <span class=\"name\">FILES</span></div><div class=\"line\"> Num.msg</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>手动添加.msg文件后，我们要确保CMake知道在什么时候重新配置我们的project。 确保添加了如下代码：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">generate_messages</span><span class=\"params\">()</span></span></div></pre></td></tr></table></figure></p>\n<p>查看自定义的消息文件能否被 ROS 识别，使用方法：<br>   <figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rosmsg show [<span class=\"keyword\">message</span> <span class=\"keyword\">type</span>]</div></pre></td></tr></table></figure></p>\n<p>示例：<br>   <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rosmsg <span class=\"keyword\">show</span> beginner_tutorials/<span class=\"keyword\">Num</span> </div><div class=\"line\">$ rosmsg <span class=\"keyword\">show</span> <span class=\"keyword\">Num</span> // 也可以省略掉 <span class=\"keyword\">package</span> 名</div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int64</span> num</div><div class=\"line\"><span class=\"keyword\">string</span> first_name</div><div class=\"line\"><span class=\"keyword\">string</span> last_name</div><div class=\"line\"><span class=\"keyword\">uint8</span> age</div><div class=\"line\"><span class=\"keyword\">uint8</span> score</div></pre></td></tr></table></figure></p>\n<h1 id=\"srv-的使用\"><a href=\"#srv-的使用\" class=\"headerlink\" title=\"srv 的使用\"></a>srv 的使用</h1><p>在 beginner_tutorials 中创建服务，我们从其他 ROS 包中拷贝一个 srv 文件：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscd beginner_tutorials</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir srv</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> roscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv</span></div></pre></td></tr></table></figure></p>\n<p>确保 srv 文件被转换成C++ Python 和其他语言的源代码。CMakeLists.txt 文件中关于 message_generation 的配置对 msg 和 srv 都起作用：<br>   <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Do not just add this line to your CMakeLists.txt, modify the existing line</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">find_package</span><span class=\"params\">(catkin REQUIRED COMPONENTS roscpp rospy std_msgs message_generation)</span></span></div></pre></td></tr></table></figure></p>\n<p>修改 CMakeLists.txt 文件增加 srv 依赖项：<br>   <figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">add_service_files(</span></div><div class=\"line\"> FILES</div><div class=\"line\"> <span class=\"keyword\">AddTwoInts.srv</span></div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>查看服务能否被 ROS 识别，使用方法：<br>   <figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">rossrv</span> show &lt;service <span class=\"keyword\">type</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>示例：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rossrv show beginner_tutorials/AddTwoInts</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rossrv show AddTwoInts //也可以不指定 package 名字</span></div></pre></td></tr></table></figure></p>\n<p>输出：<br>   <figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">int64 a</div><div class=\"line\"><span class=\"section\">int64 b</span></div><div class=\"line\">---</div><div class=\"line\">int64 sum</div></pre></td></tr></table></figure></p>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><p>通过上面为 beginner_tutorials 包添加的 msg 文件和 srv 文件，接下来就可以编译了。编译之前先在 CMakeLists.txt 文件中添加所有消息文件所依赖的那些含有 .msg 文件的 package ：<br>   <figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">generate_messages(</div><div class=\"line\"> <span class=\"name\">DEPENDENCIES</span></div><div class=\"line\"> std_msgs</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>编译：<br>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> catkin_make</span></div></pre></td></tr></table></figure></p>\n<p>编译完成后，所有在 msg 路径下的 .msg 文件都将转换为 ROS 所支持语言的源代码。生成的 C++ 头文件将会放置在 ~/catkin_ws/devel/include/beginner_tutorials/目录下；Python脚本语言会在~/catkin_ws/devel/lib/python2.7/dist-packages/beginner_tutorials/msg 目录下创建。 lisp 文件会出现在 ~/catkin_ws/devel/share/common-lisp/ros/beginner_tutorials/msg/ 路径下。详细格式参考 <a href=\"http://wiki.ros.org/ROS/Message_Description_Language\" target=\"_blank\" rel=\"external\">Message_Description_Language</a> 。</p>\n<p>参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials/CreatingMsgAndSrv\" target=\"_blank\" rel=\"external\">CreatingMsgAndSrv</a> </p>"},{"title":"ROS串口通信","date":"2017-05-17T02:03:49.000Z","comments":1,"_content":"# 前言\n移植 [ROS](http://www.ros.org/) 的目的是控制机器人移动或者控制飞行器按既定轨道飞行，那么如何实现 [ROS](http://www.ros.org/) 与底层的移动控制设备通信呢？底层设备一般都是ARM架构实现，资源有限，不可能跑个ubuntu，当然也可以移植 [ROS](http://www.ros.org/) 的框架，但这个要对底层设备进行 [ROS](http://www.ros.org/) 框架的封装，实现起来麻烦一些。普遍来讲，底层设备一般都具备串口，通过串口与底层设备通讯，也许是一种高效便捷的方法。\n<!--more-->\n# 架构\n在 [ROS](http://www.ros.org/) 平台下，设计一个串口节点，该节点订阅talker控制节点发来的命令主题，将命令通过串口设备发送到移动底座也可以是飞控设备；同时串口节点实时接收移动底座通过串口发送过来的传感器实时数据，并将该数据封装后以 *sensor* 主题的模式进行发布， *listenner* 节点可以实现订阅该主题。这样就实现了 [ROS](http://www.ros.org/) 与移动底座的串口通信过程。![](ros-serial/arch.jpg)\n# 串口节点\n*linux* 下的串口有很多现成的实现例子，比如 [libcssl](https://github.com/mwheels/libcssl) ,当然也可以自己编程实现。对于 [ROS](http://www.ros.org/) 架构的串口也有现成的例子 [serial](http://wiki.ros.org/serial) ,源代码 [serial code](https://github.com/wjwwood/serial.git) 。也有基于 [stm32](https://github.com/spiralray/stm32f1_rosserial) 的 [ROS](http://www.ros.org/) 串口代码框架。也可以参考 [uROSnode](https://github.com/openrobots-dev/uROSnode) 避免重复造轮子，这里使用 [ROS](http://www.ros.org/) 现有的串口源码。\n## 建立工作目录\n　　```\n $mkdir -p ~/catkin_ws/src/mypackage/\n　　```\n## 下载源代码\n　　```\n $cd ~/catkin_ws/src/mypackage/\n $git clone https://github.com/wjwwood/serial.git\n　　```\n## 建立串口节点\n　　在 *mypackage* 目录下建立自己的节点程序包：\n　　```\n $catkin_create_pkg my_serial_node std_msgs rospy roscpp\n　　```\n此时会在 *mypackage/my_serial_node *目录下生成两个文件 *CMakeLists.txt* 和 *package.xml* 以及两个文件夹 *include/* 和 *src/*。修改 *CMakeLists.txt* 的内容：\n　　```\n cmake_minimum_required(VERSION 2.8.3)\n project( my_serial_node )\n \n  find_package(catkin REQUIRED COMPONENTS\n     roscpp\n     serial\n     std_msgs\n   )\n  \n  catkin_package(\n    CATKIN_DEPENDS\n      serial\n      std_msgs\n  )\n \n  include_directories(\n    ${catkin_INCLUDE_DIRS}\n  )\n \n  add_executable( my_serial_node src/my_serial_node.cpp)\n \n  target_link_libraries( my_serial_node\n    ${catkin_LIBRARIES}\n  )\n\n　　```\n修改 *package.xml* 内容添加刚刚下载的 *serial* 依赖：\n　　```\n <?xml version=\"1.0\"?>\n   <package>\n     <name> my_serial_node</name>\n     <version>0.0.0</version>\n     <description>my serial node </description>\n  \n     <license>BSD</license>\n \n    <buildtool_depend>catkin</buildtool_depend>\n    <build_depend>serial</build_depend>\n    <build_depend>std_msgs</build_depend>\n    <run_depend>serial</run_depend>\n    <run_depend>std_msgs</run_depend>\n \n  </package>\n　　```\n在 *src* 目录下建立 *my_serial_node.cpp* 文件：\n　　```\n #include <serial/serial.h>\n #include <std_msgs/String.h>\n #include <std_msgs/Empty.h>\n \n serial::Serial ros_ser;\n //回调函数\n void callback(const std_msgs::String::ConstPtr& msg){\n      ROS_INFO_STREAM(\"Write to serial port\" << msg->data);\n      ros_ser.write(msg->data);\n  }\n \n int main (int argc, char** argv){\n      ros::init(argc, argv, \"my_serial_node\");\n      ros::NodeHandle n;\n      //订阅主题command\n      ros::Subscriber command_sub = n.subscribe(\"command\", 1000, callback);\n      //发布主题sensor\n      ros::Publisher sensor_pub = n.advertise<std_msgs::String>(\"sensor\", 1000);\n \n      try\n      {\n          ros_ser.setPort(\"/dev/ttyUSB0\");\n          ros_ser.setBaudrate(115200);\n          ros_serial::Timeout to = serial::Timeout::simpleTimeout(1000);\n          ros_ser.setTimeout(to);\n          ros_ser.open();\n      }\n      catch (serial::IOException& e)\n      {\n          ROS_ERROR_STREAM(\"Unable to open port \");\n          return -1;\n      }\n \n      if(ros_ser.isOpen()){\n          ROS_INFO_STREAM(\"Serial Port opened\");\n      }else{\n          return -1;\n      }\n \n      ros::Rate loop_rate(10);\n      while(ros::ok()){\n \n          ros::spinOnce();\n \n          if(ros_ser.available()){\n              ROS_INFO_STREAM(\"Reading from serial port\");\n              std_msgs::String serial_data;\n              //获取串口数据\n              serial_data.data = ros_ser.read(ros_ser.available());\n              ROS_INFO_STREAM(\"Read: \" << serial_data.data);\n              //将串口数据发布到主题sensor\n              sensor_pub.publish(serial_data);\n          }\n          loop_rate.sleep();\n \n      }\n  }\n\n　　```\n## 建立talker节点\n同样在 *src* 目录下新建文件 *talker.cpp* ,并在 *CMakeLists.txt* 中添加以下内容：\n　　```\n add_executable(talker src/talker.cpp)\n target_link_libraries(talker ${catkin_LIBRARIES})\n　　```\n*talker.cpp*内容：\n　　```\n#include \"ros/ros.h\"\n#include \"std_msgs/String.h\"\n#include <sstream>\nint main(int argc, char **argv)\n{\n ros::init(argc, argv, \"talker\");\n ros::NodeHandle n;\n //发布主题command\n ros::Publisher command_pub = n.advertise<std_msgs::String>(\"command\", 1000);\n ros::Rate loop_rate(10);\n int count = 0;\n while (ros::ok())\n {\n   std_msgs::String msg;\n   std::stringstream ss_data;\n   ss_data << \"talker publish command \" << count;\n   msg.data = ss_data.str();\n   ROS_INFO(\"%s\", msg.data.c_str());\n   command_pub.publish(msg);\n   ros::spinOnce();\n   loop_rate.sleep();\n   ++count;\n  }\n  return 0;\n}\n　　```\n## 建立listenner节点\n方式同 *talker* 节点。代码如下：\n　　```\n#include \"ros/ros.h\"\n#include \"std_msgs/String.h\"\n//回调函数\nvoid callback(const std_msgs::String::ConstPtr& msg)\n{\n ROS_INFO(\"listener got: [%s]\", msg->data.c_str());\n}\nint main(int argc, char **argv)\n{\n ros::init(argc, argv, \"listener\");\n ros::NodeHandle n;\n //订阅主题\n ros::Subscriber sub = n.subscribe(\"sensor\", 1000, callback);\n ros::spin();\n return 0;\n\n}\n　　```\n# 测试\n回到目录 *catkin_ws* 进行编译：\n　　```\n $cd ~/catkin_ws/\n $catkin_make\n　　```\n测试时将底层设备通过串口与运行 [ROS](http://www.ros.org/) 系统设备的串口连接，并写好底层设备的串口驱动程序。在 [ROS](http://www.ros.org/) 平台上开三个终端运行三个节点：\n　　```\n $roscore //必须先运行\n $rosrun my_serial_node my_serial_node\n $rosrun my_serial_node talker\n $rosrun my_serial_node listenner\n　　```\n\n效果如下：\n![](ros-serial/serial.jpg)\n\n","source":"_posts/ros-serial.md","raw":"---\ntitle: ROS串口通信\ndate: 2017-05-17 10:03:49\ncategories: ROS\ntags: ROS serial\ncomments: true\n---\n# 前言\n移植 [ROS](http://www.ros.org/) 的目的是控制机器人移动或者控制飞行器按既定轨道飞行，那么如何实现 [ROS](http://www.ros.org/) 与底层的移动控制设备通信呢？底层设备一般都是ARM架构实现，资源有限，不可能跑个ubuntu，当然也可以移植 [ROS](http://www.ros.org/) 的框架，但这个要对底层设备进行 [ROS](http://www.ros.org/) 框架的封装，实现起来麻烦一些。普遍来讲，底层设备一般都具备串口，通过串口与底层设备通讯，也许是一种高效便捷的方法。\n<!--more-->\n# 架构\n在 [ROS](http://www.ros.org/) 平台下，设计一个串口节点，该节点订阅talker控制节点发来的命令主题，将命令通过串口设备发送到移动底座也可以是飞控设备；同时串口节点实时接收移动底座通过串口发送过来的传感器实时数据，并将该数据封装后以 *sensor* 主题的模式进行发布， *listenner* 节点可以实现订阅该主题。这样就实现了 [ROS](http://www.ros.org/) 与移动底座的串口通信过程。![](ros-serial/arch.jpg)\n# 串口节点\n*linux* 下的串口有很多现成的实现例子，比如 [libcssl](https://github.com/mwheels/libcssl) ,当然也可以自己编程实现。对于 [ROS](http://www.ros.org/) 架构的串口也有现成的例子 [serial](http://wiki.ros.org/serial) ,源代码 [serial code](https://github.com/wjwwood/serial.git) 。也有基于 [stm32](https://github.com/spiralray/stm32f1_rosserial) 的 [ROS](http://www.ros.org/) 串口代码框架。也可以参考 [uROSnode](https://github.com/openrobots-dev/uROSnode) 避免重复造轮子，这里使用 [ROS](http://www.ros.org/) 现有的串口源码。\n## 建立工作目录\n　　```\n $mkdir -p ~/catkin_ws/src/mypackage/\n　　```\n## 下载源代码\n　　```\n $cd ~/catkin_ws/src/mypackage/\n $git clone https://github.com/wjwwood/serial.git\n　　```\n## 建立串口节点\n　　在 *mypackage* 目录下建立自己的节点程序包：\n　　```\n $catkin_create_pkg my_serial_node std_msgs rospy roscpp\n　　```\n此时会在 *mypackage/my_serial_node *目录下生成两个文件 *CMakeLists.txt* 和 *package.xml* 以及两个文件夹 *include/* 和 *src/*。修改 *CMakeLists.txt* 的内容：\n　　```\n cmake_minimum_required(VERSION 2.8.3)\n project( my_serial_node )\n \n  find_package(catkin REQUIRED COMPONENTS\n     roscpp\n     serial\n     std_msgs\n   )\n  \n  catkin_package(\n    CATKIN_DEPENDS\n      serial\n      std_msgs\n  )\n \n  include_directories(\n    ${catkin_INCLUDE_DIRS}\n  )\n \n  add_executable( my_serial_node src/my_serial_node.cpp)\n \n  target_link_libraries( my_serial_node\n    ${catkin_LIBRARIES}\n  )\n\n　　```\n修改 *package.xml* 内容添加刚刚下载的 *serial* 依赖：\n　　```\n <?xml version=\"1.0\"?>\n   <package>\n     <name> my_serial_node</name>\n     <version>0.0.0</version>\n     <description>my serial node </description>\n  \n     <license>BSD</license>\n \n    <buildtool_depend>catkin</buildtool_depend>\n    <build_depend>serial</build_depend>\n    <build_depend>std_msgs</build_depend>\n    <run_depend>serial</run_depend>\n    <run_depend>std_msgs</run_depend>\n \n  </package>\n　　```\n在 *src* 目录下建立 *my_serial_node.cpp* 文件：\n　　```\n #include <serial/serial.h>\n #include <std_msgs/String.h>\n #include <std_msgs/Empty.h>\n \n serial::Serial ros_ser;\n //回调函数\n void callback(const std_msgs::String::ConstPtr& msg){\n      ROS_INFO_STREAM(\"Write to serial port\" << msg->data);\n      ros_ser.write(msg->data);\n  }\n \n int main (int argc, char** argv){\n      ros::init(argc, argv, \"my_serial_node\");\n      ros::NodeHandle n;\n      //订阅主题command\n      ros::Subscriber command_sub = n.subscribe(\"command\", 1000, callback);\n      //发布主题sensor\n      ros::Publisher sensor_pub = n.advertise<std_msgs::String>(\"sensor\", 1000);\n \n      try\n      {\n          ros_ser.setPort(\"/dev/ttyUSB0\");\n          ros_ser.setBaudrate(115200);\n          ros_serial::Timeout to = serial::Timeout::simpleTimeout(1000);\n          ros_ser.setTimeout(to);\n          ros_ser.open();\n      }\n      catch (serial::IOException& e)\n      {\n          ROS_ERROR_STREAM(\"Unable to open port \");\n          return -1;\n      }\n \n      if(ros_ser.isOpen()){\n          ROS_INFO_STREAM(\"Serial Port opened\");\n      }else{\n          return -1;\n      }\n \n      ros::Rate loop_rate(10);\n      while(ros::ok()){\n \n          ros::spinOnce();\n \n          if(ros_ser.available()){\n              ROS_INFO_STREAM(\"Reading from serial port\");\n              std_msgs::String serial_data;\n              //获取串口数据\n              serial_data.data = ros_ser.read(ros_ser.available());\n              ROS_INFO_STREAM(\"Read: \" << serial_data.data);\n              //将串口数据发布到主题sensor\n              sensor_pub.publish(serial_data);\n          }\n          loop_rate.sleep();\n \n      }\n  }\n\n　　```\n## 建立talker节点\n同样在 *src* 目录下新建文件 *talker.cpp* ,并在 *CMakeLists.txt* 中添加以下内容：\n　　```\n add_executable(talker src/talker.cpp)\n target_link_libraries(talker ${catkin_LIBRARIES})\n　　```\n*talker.cpp*内容：\n　　```\n#include \"ros/ros.h\"\n#include \"std_msgs/String.h\"\n#include <sstream>\nint main(int argc, char **argv)\n{\n ros::init(argc, argv, \"talker\");\n ros::NodeHandle n;\n //发布主题command\n ros::Publisher command_pub = n.advertise<std_msgs::String>(\"command\", 1000);\n ros::Rate loop_rate(10);\n int count = 0;\n while (ros::ok())\n {\n   std_msgs::String msg;\n   std::stringstream ss_data;\n   ss_data << \"talker publish command \" << count;\n   msg.data = ss_data.str();\n   ROS_INFO(\"%s\", msg.data.c_str());\n   command_pub.publish(msg);\n   ros::spinOnce();\n   loop_rate.sleep();\n   ++count;\n  }\n  return 0;\n}\n　　```\n## 建立listenner节点\n方式同 *talker* 节点。代码如下：\n　　```\n#include \"ros/ros.h\"\n#include \"std_msgs/String.h\"\n//回调函数\nvoid callback(const std_msgs::String::ConstPtr& msg)\n{\n ROS_INFO(\"listener got: [%s]\", msg->data.c_str());\n}\nint main(int argc, char **argv)\n{\n ros::init(argc, argv, \"listener\");\n ros::NodeHandle n;\n //订阅主题\n ros::Subscriber sub = n.subscribe(\"sensor\", 1000, callback);\n ros::spin();\n return 0;\n\n}\n　　```\n# 测试\n回到目录 *catkin_ws* 进行编译：\n　　```\n $cd ~/catkin_ws/\n $catkin_make\n　　```\n测试时将底层设备通过串口与运行 [ROS](http://www.ros.org/) 系统设备的串口连接，并写好底层设备的串口驱动程序。在 [ROS](http://www.ros.org/) 平台上开三个终端运行三个节点：\n　　```\n $roscore //必须先运行\n $rosrun my_serial_node my_serial_node\n $rosrun my_serial_node talker\n $rosrun my_serial_node listenner\n　　```\n\n效果如下：\n![](ros-serial/serial.jpg)\n\n","slug":"ros-serial","published":1,"updated":"2017-05-17T05:52:53.457Z","layout":"post","photos":[],"link":"","_id":"cj4hne53p002lw8ins8a3iohb","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>移植 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 的目的是控制机器人移动或者控制飞行器按既定轨道飞行，那么如何实现 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 与底层的移动控制设备通信呢？底层设备一般都是ARM架构实现，资源有限，不可能跑个ubuntu，当然也可以移植 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 的框架，但这个要对底层设备进行 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 框架的封装，实现起来麻烦一些。普遍来讲，底层设备一般都具备串口，通过串口与底层设备通讯，也许是一种高效便捷的方法。<br><a id=\"more\"></a></p>\n<h1 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h1><p>在 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 平台下，设计一个串口节点，该节点订阅talker控制节点发来的命令主题，将命令通过串口设备发送到移动底座也可以是飞控设备；同时串口节点实时接收移动底座通过串口发送过来的传感器实时数据，并将该数据封装后以 <em>sensor</em> 主题的模式进行发布， <em>listenner</em> 节点可以实现订阅该主题。这样就实现了 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 与移动底座的串口通信过程。<img src=\"/2017/05/17/ros-serial/arch.jpg\" alt=\"\"></p>\n<h1 id=\"串口节点\"><a href=\"#串口节点\" class=\"headerlink\" title=\"串口节点\"></a>串口节点</h1><p><em>linux</em> 下的串口有很多现成的实现例子，比如 <a href=\"https://github.com/mwheels/libcssl\" target=\"_blank\" rel=\"external\">libcssl</a> ,当然也可以自己编程实现。对于 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 架构的串口也有现成的例子 <a href=\"http://wiki.ros.org/serial\" target=\"_blank\" rel=\"external\">serial</a> ,源代码 <a href=\"https://github.com/wjwwood/serial.git\" target=\"_blank\" rel=\"external\">serial code</a> 。也有基于 <a href=\"https://github.com/spiralray/stm32f1_rosserial\" target=\"_blank\" rel=\"external\">stm32</a> 的 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 串口代码框架。也可以参考 <a href=\"https://github.com/openrobots-dev/uROSnode\" target=\"_blank\" rel=\"external\">uROSnode</a> 避免重复造轮子，这里使用 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 现有的串口源码。</p>\n<h2 id=\"建立工作目录\"><a href=\"#建立工作目录\" class=\"headerlink\" title=\"建立工作目录\"></a>建立工作目录</h2><p>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$mkdir</span> -p ~<span class=\"regexp\">/catkin_ws/</span>src<span class=\"regexp\">/mypackage/</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"下载源代码\"><a href=\"#下载源代码\" class=\"headerlink\" title=\"下载源代码\"></a>下载源代码</h2><p>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> ~<span class=\"regexp\">/catkin_ws/</span>src<span class=\"regexp\">/mypackage/</span></div><div class=\"line\"><span class=\"variable\">$git</span> clone https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/wjwwood/</span>serial.git</div></pre></td></tr></table></figure></p>\n<h2 id=\"建立串口节点\"><a href=\"#建立串口节点\" class=\"headerlink\" title=\"建立串口节点\"></a>建立串口节点</h2><p>　　在 <em>mypackage</em> 目录下建立自己的节点程序包：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$catkin</span>_create_pkg my_serial_node std_msgs rospy roscpp</span></div></pre></td></tr></table></figure></p>\n<p>此时会在 <em>mypackage/my_serial_node </em>目录下生成两个文件 <em>CMakeLists.txt</em> 和 <em>package.xml</em> 以及两个文件夹 <em>include/</em> 和 <em>src/</em>。修改 <em>CMakeLists.txt</em> 的内容：<br>　　<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">cmake_minimum_required(<span class=\"name\">VERSION</span> <span class=\"number\">2.8</span>.<span class=\"number\">3</span>)</div><div class=\"line\">project( <span class=\"name\">my_serial_node</span> )</div><div class=\"line\"></div><div class=\"line\"> find_package(<span class=\"name\">catkin</span> REQUIRED COMPONENTS</div><div class=\"line\">    roscpp</div><div class=\"line\">    serial</div><div class=\"line\">    std_msgs</div><div class=\"line\">  )</div><div class=\"line\"> </div><div class=\"line\"> catkin_package(</div><div class=\"line\">   <span class=\"name\">CATKIN_DEPENDS</span></div><div class=\"line\">     serial</div><div class=\"line\">     std_msgs</div><div class=\"line\"> )</div><div class=\"line\"></div><div class=\"line\"> include_directories(</div><div class=\"line\">   $&#123;catkin_INCLUDE_DIRS&#125;</div><div class=\"line\"> )</div><div class=\"line\"></div><div class=\"line\"> add_executable( <span class=\"name\">my_serial_node</span> src/my_serial_node.cpp)</div><div class=\"line\"></div><div class=\"line\"> target_link_libraries( <span class=\"name\">my_serial_node</span></div><div class=\"line\">   $&#123;catkin_LIBRARIES&#125;</div><div class=\"line\"> )</div></pre></td></tr></table></figure></p>\n<p>修改 <em>package.xml</em> 内容添加刚刚下载的 <em>serial</em> 依赖：<br>　　<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">package</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span> my_serial_node<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>my serial node <span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">license</span>&gt;</span>BSD<span class=\"tag\">&lt;/<span class=\"name\">license</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">buildtool_depend</span>&gt;</span>catkin<span class=\"tag\">&lt;/<span class=\"name\">buildtool_depend</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>serial<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>serial<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在 <em>src</em> 目录下建立 <em>my_serial_node.cpp</em> 文件：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;serial/serial.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;std_msgs/String.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;std_msgs/Empty.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">serial::Serial ros_ser;</div><div class=\"line\"><span class=\"comment\">//回调函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">callback</span><span class=\"params\">(<span class=\"keyword\">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span>&#123;</div><div class=\"line\">     ROS_INFO_STREAM(<span class=\"string\">\"Write to serial port\"</span> &lt;&lt; msg-&gt;data);</div><div class=\"line\">     ros_ser.write(msg-&gt;data);</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span>&#123;</div><div class=\"line\">     ros::init(argc, argv, <span class=\"string\">\"my_serial_node\"</span>);</div><div class=\"line\">     ros::NodeHandle n;</div><div class=\"line\">     <span class=\"comment\">//订阅主题command</span></div><div class=\"line\">     ros::Subscriber command_sub = n.subscribe(<span class=\"string\">\"command\"</span>, <span class=\"number\">1000</span>, callback);</div><div class=\"line\">     <span class=\"comment\">//发布主题sensor</span></div><div class=\"line\">     ros::Publisher sensor_pub = n.advertise&lt;std_msgs::String&gt;(<span class=\"string\">\"sensor\"</span>, <span class=\"number\">1000</span>);</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">try</span></div><div class=\"line\">     &#123;</div><div class=\"line\">         ros_ser.setPort(<span class=\"string\">\"/dev/ttyUSB0\"</span>);</div><div class=\"line\">         ros_ser.setBaudrate(<span class=\"number\">115200</span>);</div><div class=\"line\">         ros_serial::Timeout to = serial::Timeout::simpleTimeout(<span class=\"number\">1000</span>);</div><div class=\"line\">         ros_ser.setTimeout(to);</div><div class=\"line\">         ros_ser.open();</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">catch</span> (serial::IOException&amp; e)</div><div class=\"line\">     &#123;</div><div class=\"line\">         ROS_ERROR_STREAM(<span class=\"string\">\"Unable to open port \"</span>);</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">if</span>(ros_ser.isOpen())&#123;</div><div class=\"line\">         ROS_INFO_STREAM(<span class=\"string\">\"Serial Port opened\"</span>);</div><div class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     ros::<span class=\"function\">Rate <span class=\"title\">loop_rate</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</div><div class=\"line\">     <span class=\"keyword\">while</span>(ros::ok())&#123;</div><div class=\"line\"></div><div class=\"line\">         ros::spinOnce();</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">if</span>(ros_ser.available())&#123;</div><div class=\"line\">             ROS_INFO_STREAM(<span class=\"string\">\"Reading from serial port\"</span>);</div><div class=\"line\">             std_msgs::String serial_data;</div><div class=\"line\">             <span class=\"comment\">//获取串口数据</span></div><div class=\"line\">             serial_data.data = ros_ser.read(ros_ser.available());</div><div class=\"line\">             ROS_INFO_STREAM(<span class=\"string\">\"Read: \"</span> &lt;&lt; serial_data.data);</div><div class=\"line\">             <span class=\"comment\">//将串口数据发布到主题sensor</span></div><div class=\"line\">             sensor_pub.publish(serial_data);</div><div class=\"line\">         &#125;</div><div class=\"line\">         loop_rate.sleep();</div><div class=\"line\"></div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"建立talker节点\"><a href=\"#建立talker节点\" class=\"headerlink\" title=\"建立talker节点\"></a>建立talker节点</h2><p>同样在 <em>src</em> 目录下新建文件 <em>talker.cpp</em> ,并在 <em>CMakeLists.txt</em> 中添加以下内容：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(talker src/talker.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(talker $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>\n<p><em>talker.cpp</em>内容：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"std_msgs/String.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> ros::init(argc, argv, <span class=\"string\">\"talker\"</span>);</div><div class=\"line\"> ros::NodeHandle n;</div><div class=\"line\"> <span class=\"comment\">//发布主题command</span></div><div class=\"line\"> ros::Publisher command_pub = n.advertise&lt;std_msgs::String&gt;(<span class=\"string\">\"command\"</span>, <span class=\"number\">1000</span>);</div><div class=\"line\"> ros::<span class=\"function\">Rate <span class=\"title\">loop_rate</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</div><div class=\"line\"> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"> <span class=\"keyword\">while</span> (ros::ok())</div><div class=\"line\"> &#123;</div><div class=\"line\">   std_msgs::String msg;</div><div class=\"line\">   <span class=\"built_in\">std</span>::<span class=\"built_in\">stringstream</span> ss_data;</div><div class=\"line\">   ss_data &lt;&lt; <span class=\"string\">\"talker publish command \"</span> &lt;&lt; count;</div><div class=\"line\">   msg.data = ss_data.str();</div><div class=\"line\">   ROS_INFO(<span class=\"string\">\"%s\"</span>, msg.data.c_str());</div><div class=\"line\">   command_pub.publish(msg);</div><div class=\"line\">   ros::spinOnce();</div><div class=\"line\">   loop_rate.sleep();</div><div class=\"line\">   ++count;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"建立listenner节点\"><a href=\"#建立listenner节点\" class=\"headerlink\" title=\"建立listenner节点\"></a>建立listenner节点</h2><p>方式同 <em>talker</em> 节点。代码如下：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"std_msgs/String.h\"</span></span></div><div class=\"line\"><span class=\"comment\">//回调函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">callback</span><span class=\"params\">(<span class=\"keyword\">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> ROS_INFO(<span class=\"string\">\"listener got: [%s]\"</span>, msg-&gt;data.c_str());</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> ros::init(argc, argv, <span class=\"string\">\"listener\"</span>);</div><div class=\"line\"> ros::NodeHandle n;</div><div class=\"line\"> <span class=\"comment\">//订阅主题</span></div><div class=\"line\"> ros::Subscriber sub = n.subscribe(<span class=\"string\">\"sensor\"</span>, <span class=\"number\">1000</span>, callback);</div><div class=\"line\"> ros::spin();</div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>回到目录 <em>catkin_ws</em> 进行编译：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make</span></div></pre></td></tr></table></figure></p>\n<p>测试时将底层设备通过串口与运行 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 系统设备的串口连接，并写好底层设备的串口驱动程序。在 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 平台上开三个终端运行三个节点：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscore</span> //必须先运行</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> my_serial_node my_serial_node</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> my_serial_node talker</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> my_serial_node listenner</span></div></pre></td></tr></table></figure></p>\n<p>效果如下：<br><img src=\"/2017/05/17/ros-serial/serial.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>移植 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 的目的是控制机器人移动或者控制飞行器按既定轨道飞行，那么如何实现 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 与底层的移动控制设备通信呢？底层设备一般都是ARM架构实现，资源有限，不可能跑个ubuntu，当然也可以移植 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 的框架，但这个要对底层设备进行 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 框架的封装，实现起来麻烦一些。普遍来讲，底层设备一般都具备串口，通过串口与底层设备通讯，也许是一种高效便捷的方法。<br></p>","more":"<p></p>\n<h1 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h1><p>在 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 平台下，设计一个串口节点，该节点订阅talker控制节点发来的命令主题，将命令通过串口设备发送到移动底座也可以是飞控设备；同时串口节点实时接收移动底座通过串口发送过来的传感器实时数据，并将该数据封装后以 <em>sensor</em> 主题的模式进行发布， <em>listenner</em> 节点可以实现订阅该主题。这样就实现了 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 与移动底座的串口通信过程。<img src=\"/2017/05/17/ros-serial/arch.jpg\" alt=\"\"></p>\n<h1 id=\"串口节点\"><a href=\"#串口节点\" class=\"headerlink\" title=\"串口节点\"></a>串口节点</h1><p><em>linux</em> 下的串口有很多现成的实现例子，比如 <a href=\"https://github.com/mwheels/libcssl\" target=\"_blank\" rel=\"external\">libcssl</a> ,当然也可以自己编程实现。对于 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 架构的串口也有现成的例子 <a href=\"http://wiki.ros.org/serial\" target=\"_blank\" rel=\"external\">serial</a> ,源代码 <a href=\"https://github.com/wjwwood/serial.git\" target=\"_blank\" rel=\"external\">serial code</a> 。也有基于 <a href=\"https://github.com/spiralray/stm32f1_rosserial\" target=\"_blank\" rel=\"external\">stm32</a> 的 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 串口代码框架。也可以参考 <a href=\"https://github.com/openrobots-dev/uROSnode\" target=\"_blank\" rel=\"external\">uROSnode</a> 避免重复造轮子，这里使用 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 现有的串口源码。</p>\n<h2 id=\"建立工作目录\"><a href=\"#建立工作目录\" class=\"headerlink\" title=\"建立工作目录\"></a>建立工作目录</h2><p>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$mkdir</span> -p ~<span class=\"regexp\">/catkin_ws/</span>src<span class=\"regexp\">/mypackage/</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"下载源代码\"><a href=\"#下载源代码\" class=\"headerlink\" title=\"下载源代码\"></a>下载源代码</h2><p>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> ~<span class=\"regexp\">/catkin_ws/</span>src<span class=\"regexp\">/mypackage/</span></div><div class=\"line\"><span class=\"variable\">$git</span> clone https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/wjwwood/</span>serial.git</div></pre></td></tr></table></figure></p>\n<h2 id=\"建立串口节点\"><a href=\"#建立串口节点\" class=\"headerlink\" title=\"建立串口节点\"></a>建立串口节点</h2><p>　　在 <em>mypackage</em> 目录下建立自己的节点程序包：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$catkin</span>_create_pkg my_serial_node std_msgs rospy roscpp</span></div></pre></td></tr></table></figure></p>\n<p>此时会在 <em>mypackage/my_serial_node </em>目录下生成两个文件 <em>CMakeLists.txt</em> 和 <em>package.xml</em> 以及两个文件夹 <em>include/</em> 和 <em>src/</em>。修改 <em>CMakeLists.txt</em> 的内容：<br>　　<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">cmake_minimum_required(<span class=\"name\">VERSION</span> <span class=\"number\">2.8</span>.<span class=\"number\">3</span>)</div><div class=\"line\">project( <span class=\"name\">my_serial_node</span> )</div><div class=\"line\"></div><div class=\"line\"> find_package(<span class=\"name\">catkin</span> REQUIRED COMPONENTS</div><div class=\"line\">    roscpp</div><div class=\"line\">    serial</div><div class=\"line\">    std_msgs</div><div class=\"line\">  )</div><div class=\"line\"> </div><div class=\"line\"> catkin_package(</div><div class=\"line\">   <span class=\"name\">CATKIN_DEPENDS</span></div><div class=\"line\">     serial</div><div class=\"line\">     std_msgs</div><div class=\"line\"> )</div><div class=\"line\"></div><div class=\"line\"> include_directories(</div><div class=\"line\">   $&#123;catkin_INCLUDE_DIRS&#125;</div><div class=\"line\"> )</div><div class=\"line\"></div><div class=\"line\"> add_executable( <span class=\"name\">my_serial_node</span> src/my_serial_node.cpp)</div><div class=\"line\"></div><div class=\"line\"> target_link_libraries( <span class=\"name\">my_serial_node</span></div><div class=\"line\">   $&#123;catkin_LIBRARIES&#125;</div><div class=\"line\"> )</div></pre></td></tr></table></figure></p>\n<p>修改 <em>package.xml</em> 内容添加刚刚下载的 <em>serial</em> 依赖：<br>　　<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">package</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span> my_serial_node<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>my serial node <span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">license</span>&gt;</span>BSD<span class=\"tag\">&lt;/<span class=\"name\">license</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">buildtool_depend</span>&gt;</span>catkin<span class=\"tag\">&lt;/<span class=\"name\">buildtool_depend</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>serial<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>serial<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在 <em>src</em> 目录下建立 <em>my_serial_node.cpp</em> 文件：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;serial/serial.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;std_msgs/String.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;std_msgs/Empty.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">serial::Serial ros_ser;</div><div class=\"line\"><span class=\"comment\">//回调函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">callback</span><span class=\"params\">(<span class=\"keyword\">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span>&#123;</div><div class=\"line\">     ROS_INFO_STREAM(<span class=\"string\">\"Write to serial port\"</span> &lt;&lt; msg-&gt;data);</div><div class=\"line\">     ros_ser.write(msg-&gt;data);</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span>&#123;</div><div class=\"line\">     ros::init(argc, argv, <span class=\"string\">\"my_serial_node\"</span>);</div><div class=\"line\">     ros::NodeHandle n;</div><div class=\"line\">     <span class=\"comment\">//订阅主题command</span></div><div class=\"line\">     ros::Subscriber command_sub = n.subscribe(<span class=\"string\">\"command\"</span>, <span class=\"number\">1000</span>, callback);</div><div class=\"line\">     <span class=\"comment\">//发布主题sensor</span></div><div class=\"line\">     ros::Publisher sensor_pub = n.advertise&lt;std_msgs::String&gt;(<span class=\"string\">\"sensor\"</span>, <span class=\"number\">1000</span>);</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">try</span></div><div class=\"line\">     &#123;</div><div class=\"line\">         ros_ser.setPort(<span class=\"string\">\"/dev/ttyUSB0\"</span>);</div><div class=\"line\">         ros_ser.setBaudrate(<span class=\"number\">115200</span>);</div><div class=\"line\">         ros_serial::Timeout to = serial::Timeout::simpleTimeout(<span class=\"number\">1000</span>);</div><div class=\"line\">         ros_ser.setTimeout(to);</div><div class=\"line\">         ros_ser.open();</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">catch</span> (serial::IOException&amp; e)</div><div class=\"line\">     &#123;</div><div class=\"line\">         ROS_ERROR_STREAM(<span class=\"string\">\"Unable to open port \"</span>);</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">if</span>(ros_ser.isOpen())&#123;</div><div class=\"line\">         ROS_INFO_STREAM(<span class=\"string\">\"Serial Port opened\"</span>);</div><div class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     ros::<span class=\"function\">Rate <span class=\"title\">loop_rate</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</div><div class=\"line\">     <span class=\"keyword\">while</span>(ros::ok())&#123;</div><div class=\"line\"></div><div class=\"line\">         ros::spinOnce();</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">if</span>(ros_ser.available())&#123;</div><div class=\"line\">             ROS_INFO_STREAM(<span class=\"string\">\"Reading from serial port\"</span>);</div><div class=\"line\">             std_msgs::String serial_data;</div><div class=\"line\">             <span class=\"comment\">//获取串口数据</span></div><div class=\"line\">             serial_data.data = ros_ser.read(ros_ser.available());</div><div class=\"line\">             ROS_INFO_STREAM(<span class=\"string\">\"Read: \"</span> &lt;&lt; serial_data.data);</div><div class=\"line\">             <span class=\"comment\">//将串口数据发布到主题sensor</span></div><div class=\"line\">             sensor_pub.publish(serial_data);</div><div class=\"line\">         &#125;</div><div class=\"line\">         loop_rate.sleep();</div><div class=\"line\"></div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"建立talker节点\"><a href=\"#建立talker节点\" class=\"headerlink\" title=\"建立talker节点\"></a>建立talker节点</h2><p>同样在 <em>src</em> 目录下新建文件 <em>talker.cpp</em> ,并在 <em>CMakeLists.txt</em> 中添加以下内容：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(talker src/talker.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(talker $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>\n<p><em>talker.cpp</em>内容：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"std_msgs/String.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> ros::init(argc, argv, <span class=\"string\">\"talker\"</span>);</div><div class=\"line\"> ros::NodeHandle n;</div><div class=\"line\"> <span class=\"comment\">//发布主题command</span></div><div class=\"line\"> ros::Publisher command_pub = n.advertise&lt;std_msgs::String&gt;(<span class=\"string\">\"command\"</span>, <span class=\"number\">1000</span>);</div><div class=\"line\"> ros::<span class=\"function\">Rate <span class=\"title\">loop_rate</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</div><div class=\"line\"> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"> <span class=\"keyword\">while</span> (ros::ok())</div><div class=\"line\"> &#123;</div><div class=\"line\">   std_msgs::String msg;</div><div class=\"line\">   <span class=\"built_in\">std</span>::<span class=\"built_in\">stringstream</span> ss_data;</div><div class=\"line\">   ss_data &lt;&lt; <span class=\"string\">\"talker publish command \"</span> &lt;&lt; count;</div><div class=\"line\">   msg.data = ss_data.str();</div><div class=\"line\">   ROS_INFO(<span class=\"string\">\"%s\"</span>, msg.data.c_str());</div><div class=\"line\">   command_pub.publish(msg);</div><div class=\"line\">   ros::spinOnce();</div><div class=\"line\">   loop_rate.sleep();</div><div class=\"line\">   ++count;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"建立listenner节点\"><a href=\"#建立listenner节点\" class=\"headerlink\" title=\"建立listenner节点\"></a>建立listenner节点</h2><p>方式同 <em>talker</em> 节点。代码如下：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"std_msgs/String.h\"</span></span></div><div class=\"line\"><span class=\"comment\">//回调函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">callback</span><span class=\"params\">(<span class=\"keyword\">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> ROS_INFO(<span class=\"string\">\"listener got: [%s]\"</span>, msg-&gt;data.c_str());</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> ros::init(argc, argv, <span class=\"string\">\"listener\"</span>);</div><div class=\"line\"> ros::NodeHandle n;</div><div class=\"line\"> <span class=\"comment\">//订阅主题</span></div><div class=\"line\"> ros::Subscriber sub = n.subscribe(<span class=\"string\">\"sensor\"</span>, <span class=\"number\">1000</span>, callback);</div><div class=\"line\"> ros::spin();</div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>回到目录 <em>catkin_ws</em> 进行编译：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make</span></div></pre></td></tr></table></figure></p>\n<p>测试时将底层设备通过串口与运行 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 系统设备的串口连接，并写好底层设备的串口驱动程序。在 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 平台上开三个终端运行三个节点：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscore</span> //必须先运行</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> my_serial_node my_serial_node</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> my_serial_node talker</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> my_serial_node listenner</span></div></pre></td></tr></table></figure></p>\n<p>效果如下：<br><img src=\"/2017/05/17/ros-serial/serial.jpg\" alt=\"\"></p>"},{"title":"ROS机器人仿真","date":"2017-05-24T02:07:50.000Z","comments":1,"_content":"# 前言\n在 *PC* 环境下进行机器人的运动仿真是 *ROS* 开发者必经的一个环节，*ROS* 官方提供了好用且强大的3D可视化工具 [rviz](http://wiki.ros.org/rviz)-3D visualization tool for ROS。\n*环境: ubuntu 14.04 LTS 32bits *\n*ROS*: *Indigo*\n开启仿真之旅。\n<!--more-->\n# 安装 [rviz](http://wiki.ros.org/rviz)\n安装之前首先确保在 *ubuntu* 系统下配置安装好了 *ROS* 环境，如果没有请参考官网安装，点击 [ROS-Install-on-Ubuntu](http://wiki.ros.org/indigo/Installation/Ubuntu)。安装3D可视化工具 [rviz](http://wiki.ros.org/rviz) 参考 [Rviz-Installation](http://wiki.ros.org/rviz/UserGuide)\n　　```\n $sudo apt-get install ros-indigo-rviz\n　　```\n[rviz](http://wiki.ros.org/rviz) 只是一个3D可视化工具，需要安装一个模拟器 [Arbotix](http://wiki.ros.org/arbotix) 才能进行机器人的仿真，安装模拟器 [Arbotix](http://wiki.ros.org/arbotix)：\n　　```\n $sudo apt-get install ros-indigo-arbotix*\n $rospack profile //更新ros软件包\n　　```\n# 开始仿真\n仿真之前下载 [ros-by-example](https://github.com/pirobot/rbx1) 自带的例程代码：\n　　```\n $cd ~/catkin_ws/src\n $git clone https://github.com/pirobot/rbx1.git\n $cd rbx1\n $git checkout indigo-devel\n $cd ~/catkin_ws\n $catkin_make\n $source ~/catkin_ws/devel/setup.bash\n $rospack profile \n　　```\n使用 *rbx1* 包之前运行包里自带的 *rbx1-prereq.sh* 文件，安装一下依赖项，如果安装了可以略过：\n　　```\n $sh rbx1-prereq.sh　\n $rospack profile\n　　```\n运行 *roscore* 先：\n　　```\n $roscore &\n　　```\n开启一个机器人模型,模型位于*/rbx1/rbx1_bringup/launch*目录下：\n　　```\n $roslaunch rbx1_bringup fake_pi_robot.launch\n　　```\n也可以选择其他的模型。之后开启 *Rviz* 可视化工具：\n　　```\n $rosrun rviz rviz -d `rospack find rbx1_nav`/sim.rviz\n　　```\n一定要注意反单引号的使用，否则系统会报错。（ESC下面那个键）\n此时就可以看到机器人模型：![](ros-simulation/rviz.jpg)\n参数 *sim.rviz* 是 *rviz* 的配置文件。机器人目前处于静止状态，我们发布一个命令，让它动起来，命令冒号后的空格必须有：\n　　```\n $rostopic pub -r 10 /cmd_vel geometry_msgs/Twist '{linear: {x: 0.2, y: 0, z: 0}, angular: {x: 0, y: 0, z: 0.5}}'\n　　```\n效果：![](ros-simulation/rviz-move.jpg)\n需要停止机器人，可以在同一个窗口按下 *ctrl-c* 或者发布一个空的指令：\n　```\n $rostopic pub -1 /cmd_vel geometry_msgs/Twist '{}'\n　```\n# 过程分析\n*fake_pi_robot.launch* 文件是机器人的模型描述文件，功能是生成一个pi类型的机器人模型；\n　```\n <launch>\n     <param name=\"/use_sim_time\" value=\"false\" />\n  \n     <!-- Load the URDF/Xacro model of our robot -->\n     <arg name=\"urdf_file\" default=\"$(find xacro)/xacro.py '$(find rbx1_description)/urdf/pi_robot.xacro'\" />\n  \n     <param name=\"robot_description\" command=\"$(arg urdf_file)\" />\n  \n     <node name=\"arbotix\" pkg=\"arbotix_python\" type=\"arbotix_driver\" output=\"screen\" clear_params=\"true\">\n        <rosparam file=\"$(find rbx1_bringup)/config/fake_pi_arbotix.yaml\" command=\"load\" />\n        <param name=\"sim\" value=\"true\"/>\n    </node>\n \n    <node name=\"move_fake_pi_arm_start\" pkg=\"rbx1_bringup\" type=\"move_fake_pi_arm_start.py\" output=\"screen\" />\n \n    <node name=\"robot_state_publisher\" pkg=\"robot_state_publisher\" type=\"state_publisher\">\n        <param name=\"publish_frequency\" type=\"double\" value=\"20.0\" />\n    </node>\n \n    <!-- Run a static transform between /base_link and /base_footprint needed for SLAM -->\n    <node pkg=\"tf\" type=\"static_transform_publisher\" name=\"base_footprint_broadcaster\" args=\"0 0 0 0 0 0 /base_link /base_footprint 100\" />\n \n \n  </launch>\n\n　```\n大致过程先加载一个 *urdf*文件，这个文件用于描述机器人的样子，然后启动 *arbotix* 仿真，启动仿真节点，发布状态，最后是 *tf* 坐标变换。*sim.rviz*配置文件描述了 *rviz* 的配置，位于目录 *rbx1/rbx1_nav* 中，它的配置代码很长，大致描述的是一些显示配置，即 *rviz* 左侧那部分：![](ros-simulation/rviz-left.jpg)\n\n速度发布命令一个是角速度，一个是线速度，参考 [ROStopic](http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingTopics)。\nx y z 的方向遵循右手坐标系，机器人正前方为x轴，自地面向上为z轴，y轴垂直于其他两轴位于左方:\n\n![](ros-simulation/axis.jpg)![](ros-simulation/screw-rule.jpg)\n\n机器人只能贴着地面运动，只能绕Z轴做旋转运动，不可能沿Z轴做直线运动；也不可能绕着x轴或者绕着y轴做旋转运动。机器人只能向前运动或向后运动，即x方向；做旋转运动可以绕z轴顺时针或者逆时针，逆时针为正方向。旋转方向遵循右手螺旋法则，逆时针为正，顺时针为负。\n\n*linear: {x: 0.2, y: 0, z: 0}*的意思就是机器人沿着x轴正方向，即向前运动，速度为 *0.2m/s* ;\n*angular: {x: 0, y: 0, z: 0.5}* 的意思是机器人沿着z轴做逆时针旋转的角速度为 *0.5rad/s*;因此会得出以上机器人运动轨迹。\n关于速度发布的语法遵循 [YAML](http://wiki.ros.org/ROS/YAMLCommandLine) 。\n速度单位 *m/s*-米/秒 \n角速度单位 *rad/s*-弧度/秒\n\n\n\n\n\n\n\n\n","source":"_posts/ros-simulation.md","raw":"---\ntitle: ROS机器人仿真\ndate: 2017-05-24 10:07:50\ncategories: ROS\ntags: ROS Simulation\ncomments: true\n---\n# 前言\n在 *PC* 环境下进行机器人的运动仿真是 *ROS* 开发者必经的一个环节，*ROS* 官方提供了好用且强大的3D可视化工具 [rviz](http://wiki.ros.org/rviz)-3D visualization tool for ROS。\n*环境: ubuntu 14.04 LTS 32bits *\n*ROS*: *Indigo*\n开启仿真之旅。\n<!--more-->\n# 安装 [rviz](http://wiki.ros.org/rviz)\n安装之前首先确保在 *ubuntu* 系统下配置安装好了 *ROS* 环境，如果没有请参考官网安装，点击 [ROS-Install-on-Ubuntu](http://wiki.ros.org/indigo/Installation/Ubuntu)。安装3D可视化工具 [rviz](http://wiki.ros.org/rviz) 参考 [Rviz-Installation](http://wiki.ros.org/rviz/UserGuide)\n　　```\n $sudo apt-get install ros-indigo-rviz\n　　```\n[rviz](http://wiki.ros.org/rviz) 只是一个3D可视化工具，需要安装一个模拟器 [Arbotix](http://wiki.ros.org/arbotix) 才能进行机器人的仿真，安装模拟器 [Arbotix](http://wiki.ros.org/arbotix)：\n　　```\n $sudo apt-get install ros-indigo-arbotix*\n $rospack profile //更新ros软件包\n　　```\n# 开始仿真\n仿真之前下载 [ros-by-example](https://github.com/pirobot/rbx1) 自带的例程代码：\n　　```\n $cd ~/catkin_ws/src\n $git clone https://github.com/pirobot/rbx1.git\n $cd rbx1\n $git checkout indigo-devel\n $cd ~/catkin_ws\n $catkin_make\n $source ~/catkin_ws/devel/setup.bash\n $rospack profile \n　　```\n使用 *rbx1* 包之前运行包里自带的 *rbx1-prereq.sh* 文件，安装一下依赖项，如果安装了可以略过：\n　　```\n $sh rbx1-prereq.sh　\n $rospack profile\n　　```\n运行 *roscore* 先：\n　　```\n $roscore &\n　　```\n开启一个机器人模型,模型位于*/rbx1/rbx1_bringup/launch*目录下：\n　　```\n $roslaunch rbx1_bringup fake_pi_robot.launch\n　　```\n也可以选择其他的模型。之后开启 *Rviz* 可视化工具：\n　　```\n $rosrun rviz rviz -d `rospack find rbx1_nav`/sim.rviz\n　　```\n一定要注意反单引号的使用，否则系统会报错。（ESC下面那个键）\n此时就可以看到机器人模型：![](ros-simulation/rviz.jpg)\n参数 *sim.rviz* 是 *rviz* 的配置文件。机器人目前处于静止状态，我们发布一个命令，让它动起来，命令冒号后的空格必须有：\n　　```\n $rostopic pub -r 10 /cmd_vel geometry_msgs/Twist '{linear: {x: 0.2, y: 0, z: 0}, angular: {x: 0, y: 0, z: 0.5}}'\n　　```\n效果：![](ros-simulation/rviz-move.jpg)\n需要停止机器人，可以在同一个窗口按下 *ctrl-c* 或者发布一个空的指令：\n　```\n $rostopic pub -1 /cmd_vel geometry_msgs/Twist '{}'\n　```\n# 过程分析\n*fake_pi_robot.launch* 文件是机器人的模型描述文件，功能是生成一个pi类型的机器人模型；\n　```\n <launch>\n     <param name=\"/use_sim_time\" value=\"false\" />\n  \n     <!-- Load the URDF/Xacro model of our robot -->\n     <arg name=\"urdf_file\" default=\"$(find xacro)/xacro.py '$(find rbx1_description)/urdf/pi_robot.xacro'\" />\n  \n     <param name=\"robot_description\" command=\"$(arg urdf_file)\" />\n  \n     <node name=\"arbotix\" pkg=\"arbotix_python\" type=\"arbotix_driver\" output=\"screen\" clear_params=\"true\">\n        <rosparam file=\"$(find rbx1_bringup)/config/fake_pi_arbotix.yaml\" command=\"load\" />\n        <param name=\"sim\" value=\"true\"/>\n    </node>\n \n    <node name=\"move_fake_pi_arm_start\" pkg=\"rbx1_bringup\" type=\"move_fake_pi_arm_start.py\" output=\"screen\" />\n \n    <node name=\"robot_state_publisher\" pkg=\"robot_state_publisher\" type=\"state_publisher\">\n        <param name=\"publish_frequency\" type=\"double\" value=\"20.0\" />\n    </node>\n \n    <!-- Run a static transform between /base_link and /base_footprint needed for SLAM -->\n    <node pkg=\"tf\" type=\"static_transform_publisher\" name=\"base_footprint_broadcaster\" args=\"0 0 0 0 0 0 /base_link /base_footprint 100\" />\n \n \n  </launch>\n\n　```\n大致过程先加载一个 *urdf*文件，这个文件用于描述机器人的样子，然后启动 *arbotix* 仿真，启动仿真节点，发布状态，最后是 *tf* 坐标变换。*sim.rviz*配置文件描述了 *rviz* 的配置，位于目录 *rbx1/rbx1_nav* 中，它的配置代码很长，大致描述的是一些显示配置，即 *rviz* 左侧那部分：![](ros-simulation/rviz-left.jpg)\n\n速度发布命令一个是角速度，一个是线速度，参考 [ROStopic](http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingTopics)。\nx y z 的方向遵循右手坐标系，机器人正前方为x轴，自地面向上为z轴，y轴垂直于其他两轴位于左方:\n\n![](ros-simulation/axis.jpg)![](ros-simulation/screw-rule.jpg)\n\n机器人只能贴着地面运动，只能绕Z轴做旋转运动，不可能沿Z轴做直线运动；也不可能绕着x轴或者绕着y轴做旋转运动。机器人只能向前运动或向后运动，即x方向；做旋转运动可以绕z轴顺时针或者逆时针，逆时针为正方向。旋转方向遵循右手螺旋法则，逆时针为正，顺时针为负。\n\n*linear: {x: 0.2, y: 0, z: 0}*的意思就是机器人沿着x轴正方向，即向前运动，速度为 *0.2m/s* ;\n*angular: {x: 0, y: 0, z: 0.5}* 的意思是机器人沿着z轴做逆时针旋转的角速度为 *0.5rad/s*;因此会得出以上机器人运动轨迹。\n关于速度发布的语法遵循 [YAML](http://wiki.ros.org/ROS/YAMLCommandLine) 。\n速度单位 *m/s*-米/秒 \n角速度单位 *rad/s*-弧度/秒\n\n\n\n\n\n\n\n\n","slug":"ros-simulation","published":1,"updated":"2017-05-24T05:33:51.089Z","layout":"post","photos":[],"link":"","_id":"cj4hne53r002ow8in8yo2to36","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在 <em>PC</em> 环境下进行机器人的运动仿真是 <em>ROS</em> 开发者必经的一个环节，<em>ROS</em> 官方提供了好用且强大的3D可视化工具 <a href=\"http://wiki.ros.org/rviz\" target=\"_blank\" rel=\"external\">rviz</a>-3D visualization tool for ROS。<br><em>环境: ubuntu 14.04 LTS 32bits </em><br><em>ROS</em>: <em>Indigo</em><br>开启仿真之旅。<br><a id=\"more\"></a></p>\n<h1 id=\"安装-rviz\"><a href=\"#安装-rviz\" class=\"headerlink\" title=\"安装 rviz\"></a>安装 <a href=\"http://wiki.ros.org/rviz\" target=\"_blank\" rel=\"external\">rviz</a></h1><p>安装之前首先确保在 <em>ubuntu</em> 系统下配置安装好了 <em>ROS</em> 环境，如果没有请参考官网安装，点击 <a href=\"http://wiki.ros.org/indigo/Installation/Ubuntu\" target=\"_blank\" rel=\"external\">ROS-Install-on-Ubuntu</a>。安装3D可视化工具 <a href=\"http://wiki.ros.org/rviz\" target=\"_blank\" rel=\"external\">rviz</a> 参考 <a href=\"http://wiki.ros.org/rviz/UserGuide\" target=\"_blank\" rel=\"external\">Rviz-Installation</a><br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install ros-indigo-rviz</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"http://wiki.ros.org/rviz\" target=\"_blank\" rel=\"external\">rviz</a> 只是一个3D可视化工具，需要安装一个模拟器 <a href=\"http://wiki.ros.org/arbotix\" target=\"_blank\" rel=\"external\">Arbotix</a> 才能进行机器人的仿真，安装模拟器 <a href=\"http://wiki.ros.org/arbotix\" target=\"_blank\" rel=\"external\">Arbotix</a>：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install ros-indigo-arbotix*</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rospack</span> profile //更新ros软件包</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"开始仿真\"><a href=\"#开始仿真\" class=\"headerlink\" title=\"开始仿真\"></a>开始仿真</h1><p>仿真之前下载 <a href=\"https://github.com/pirobot/rbx1\" target=\"_blank\" rel=\"external\">ros-by-example</a> 自带的例程代码：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws/src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git <span class=\"built_in\">clone</span> https://github.com/pirobot/rbx1.git</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> rbx1</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git checkout indigo-devel</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">source</span> ~/catkin_ws/devel/setup.bash</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">rospack profile</span></div></pre></td></tr></table></figure></p>\n<p>使用 <em>rbx1</em> 包之前运行包里自带的 <em>rbx1-prereq.sh</em> 文件，安装一下依赖项，如果安装了可以略过：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sh</span> rbx1-prereq.sh　</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rospack</span> profile</span></div></pre></td></tr></table></figure></p>\n<p>运行 <em>roscore</em> 先：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscore</span> &amp;</span></div></pre></td></tr></table></figure></p>\n<p>开启一个机器人模型,模型位于<em>/rbx1/rbx1_bringup/launch</em>目录下：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roslaunch</span> rbx1_bringup fake_pi_robot.launch</span></div></pre></td></tr></table></figure></p>\n<p>也可以选择其他的模型。之后开启 <em>Rviz</em> 可视化工具：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">rosrun rviz rviz <span class=\"_\">-d</span> `rospack find rbx1_nav`/sim.rviz</span></div></pre></td></tr></table></figure></p>\n<p>一定要注意反单引号的使用，否则系统会报错。（ESC下面那个键）<br>此时就可以看到机器人模型：<img src=\"/2017/05/24/ros-simulation/rviz.jpg\" alt=\"\"><br>参数 <em>sim.rviz</em> 是 <em>rviz</em> 的配置文件。机器人目前处于静止状态，我们发布一个命令，让它动起来，命令冒号后的空格必须有：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$rostopic</span> pub -r <span class=\"number\">10</span> <span class=\"regexp\">/cmd_vel geometry_msgs/</span>Twist <span class=\"string\">'&#123;linear: &#123;x: 0.2, y: 0, z: 0&#125;, angular: &#123;x: 0, y: 0, z: 0.5&#125;&#125;'</span></div></pre></td></tr></table></figure></p>\n<p>效果：<img src=\"/2017/05/24/ros-simulation/rviz-move.jpg\" alt=\"\"><br>需要停止机器人，可以在同一个窗口按下 <em>ctrl-c</em> 或者发布一个空的指令：<br>　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$rostopic</span> pub -<span class=\"number\">1</span> <span class=\"regexp\">/cmd_vel geometry_msgs/</span>Twist <span class=\"string\">'&#123;&#125;'</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"过程分析\"><a href=\"#过程分析\" class=\"headerlink\" title=\"过程分析\"></a>过程分析</h1><p><em>fake_pi_robot.launch</em> 文件是机器人的模型描述文件，功能是生成一个pi类型的机器人模型；<br>　<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">launch</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"/use_sim_time\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">&lt;!-- Load the URDF/Xacro model of our robot --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"urdf_file\"</span> <span class=\"attr\">default</span>=<span class=\"string\">\"$(find xacro)/xacro.py '$(find rbx1_description)/urdf/pi_robot.xacro'\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robot_description\"</span> <span class=\"attr\">command</span>=<span class=\"string\">\"$(arg urdf_file)\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">name</span>=<span class=\"string\">\"arbotix\"</span> <span class=\"attr\">pkg</span>=<span class=\"string\">\"arbotix_python\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"arbotix_driver\"</span> <span class=\"attr\">output</span>=<span class=\"string\">\"screen\"</span> <span class=\"attr\">clear_params</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">rosparam</span> <span class=\"attr\">file</span>=<span class=\"string\">\"$(find rbx1_bringup)/config/fake_pi_arbotix.yaml\"</span> <span class=\"attr\">command</span>=<span class=\"string\">\"load\"</span> /&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sim\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">node</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">name</span>=<span class=\"string\">\"move_fake_pi_arm_start\"</span> <span class=\"attr\">pkg</span>=<span class=\"string\">\"rbx1_bringup\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"move_fake_pi_arm_start.py\"</span> <span class=\"attr\">output</span>=<span class=\"string\">\"screen\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robot_state_publisher\"</span> <span class=\"attr\">pkg</span>=<span class=\"string\">\"robot_state_publisher\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"state_publisher\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"publish_frequency\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"double\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"20.0\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">node</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">&lt;!-- Run a static transform between /base_link and /base_footprint needed for SLAM --&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">pkg</span>=<span class=\"string\">\"tf\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"static_transform_publisher\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"base_footprint_broadcaster\"</span> <span class=\"attr\">args</span>=<span class=\"string\">\"0 0 0 0 0 0 /base_link /base_footprint 100\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">launch</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>大致过程先加载一个 <em>urdf</em>文件，这个文件用于描述机器人的样子，然后启动 <em>arbotix</em> 仿真，启动仿真节点，发布状态，最后是 <em>tf</em> 坐标变换。<em>sim.rviz</em>配置文件描述了 <em>rviz</em> 的配置，位于目录 <em>rbx1/rbx1_nav</em> 中，它的配置代码很长，大致描述的是一些显示配置，即 <em>rviz</em> 左侧那部分：<img src=\"/2017/05/24/ros-simulation/rviz-left.jpg\" alt=\"\"></p>\n<p>速度发布命令一个是角速度，一个是线速度，参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingTopics\" target=\"_blank\" rel=\"external\">ROStopic</a>。<br>x y z 的方向遵循右手坐标系，机器人正前方为x轴，自地面向上为z轴，y轴垂直于其他两轴位于左方:</p>\n<p><img src=\"/2017/05/24/ros-simulation/axis.jpg\" alt=\"\"><img src=\"/2017/05/24/ros-simulation/screw-rule.jpg\" alt=\"\"></p>\n<p>机器人只能贴着地面运动，只能绕Z轴做旋转运动，不可能沿Z轴做直线运动；也不可能绕着x轴或者绕着y轴做旋转运动。机器人只能向前运动或向后运动，即x方向；做旋转运动可以绕z轴顺时针或者逆时针，逆时针为正方向。旋转方向遵循右手螺旋法则，逆时针为正，顺时针为负。</p>\n<p><em>linear: {x: 0.2, y: 0, z: 0}</em>的意思就是机器人沿着x轴正方向，即向前运动，速度为 <em>0.2m/s</em> ;<br><em>angular: {x: 0, y: 0, z: 0.5}</em> 的意思是机器人沿着z轴做逆时针旋转的角速度为 <em>0.5rad/s</em>;因此会得出以上机器人运动轨迹。<br>关于速度发布的语法遵循 <a href=\"http://wiki.ros.org/ROS/YAMLCommandLine\" target=\"_blank\" rel=\"external\">YAML</a> 。<br>速度单位 <em>m/s</em>-米/秒<br>角速度单位 <em>rad/s</em>-弧度/秒</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在 <em>PC</em> 环境下进行机器人的运动仿真是 <em>ROS</em> 开发者必经的一个环节，<em>ROS</em> 官方提供了好用且强大的3D可视化工具 <a href=\"http://wiki.ros.org/rviz\" target=\"_blank\" rel=\"external\">rviz</a>-3D visualization tool for ROS。<br><em>环境: ubuntu 14.04 LTS 32bits </em><br><em>ROS</em>: <em>Indigo</em><br>开启仿真之旅。<br></p>","more":"<p></p>\n<h1 id=\"安装-rviz\"><a href=\"#安装-rviz\" class=\"headerlink\" title=\"安装 rviz\"></a>安装 <a href=\"http://wiki.ros.org/rviz\" target=\"_blank\" rel=\"external\">rviz</a></h1><p>安装之前首先确保在 <em>ubuntu</em> 系统下配置安装好了 <em>ROS</em> 环境，如果没有请参考官网安装，点击 <a href=\"http://wiki.ros.org/indigo/Installation/Ubuntu\" target=\"_blank\" rel=\"external\">ROS-Install-on-Ubuntu</a>。安装3D可视化工具 <a href=\"http://wiki.ros.org/rviz\" target=\"_blank\" rel=\"external\">rviz</a> 参考 <a href=\"http://wiki.ros.org/rviz/UserGuide\" target=\"_blank\" rel=\"external\">Rviz-Installation</a><br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install ros-indigo-rviz</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"http://wiki.ros.org/rviz\" target=\"_blank\" rel=\"external\">rviz</a> 只是一个3D可视化工具，需要安装一个模拟器 <a href=\"http://wiki.ros.org/arbotix\" target=\"_blank\" rel=\"external\">Arbotix</a> 才能进行机器人的仿真，安装模拟器 <a href=\"http://wiki.ros.org/arbotix\" target=\"_blank\" rel=\"external\">Arbotix</a>：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install ros-indigo-arbotix*</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rospack</span> profile //更新ros软件包</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"开始仿真\"><a href=\"#开始仿真\" class=\"headerlink\" title=\"开始仿真\"></a>开始仿真</h1><p>仿真之前下载 <a href=\"https://github.com/pirobot/rbx1\" target=\"_blank\" rel=\"external\">ros-by-example</a> 自带的例程代码：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws/src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git <span class=\"built_in\">clone</span> https://github.com/pirobot/rbx1.git</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> rbx1</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git checkout indigo-devel</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">source</span> ~/catkin_ws/devel/setup.bash</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">rospack profile</span></div></pre></td></tr></table></figure></p>\n<p>使用 <em>rbx1</em> 包之前运行包里自带的 <em>rbx1-prereq.sh</em> 文件，安装一下依赖项，如果安装了可以略过：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sh</span> rbx1-prereq.sh　</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rospack</span> profile</span></div></pre></td></tr></table></figure></p>\n<p>运行 <em>roscore</em> 先：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscore</span> &amp;</span></div></pre></td></tr></table></figure></p>\n<p>开启一个机器人模型,模型位于<em>/rbx1/rbx1_bringup/launch</em>目录下：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roslaunch</span> rbx1_bringup fake_pi_robot.launch</span></div></pre></td></tr></table></figure></p>\n<p>也可以选择其他的模型。之后开启 <em>Rviz</em> 可视化工具：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">rosrun rviz rviz <span class=\"_\">-d</span> `rospack find rbx1_nav`/sim.rviz</span></div></pre></td></tr></table></figure></p>\n<p>一定要注意反单引号的使用，否则系统会报错。（ESC下面那个键）<br>此时就可以看到机器人模型：<img src=\"/2017/05/24/ros-simulation/rviz.jpg\" alt=\"\"><br>参数 <em>sim.rviz</em> 是 <em>rviz</em> 的配置文件。机器人目前处于静止状态，我们发布一个命令，让它动起来，命令冒号后的空格必须有：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$rostopic</span> pub -r <span class=\"number\">10</span> <span class=\"regexp\">/cmd_vel geometry_msgs/</span>Twist <span class=\"string\">'&#123;linear: &#123;x: 0.2, y: 0, z: 0&#125;, angular: &#123;x: 0, y: 0, z: 0.5&#125;&#125;'</span></div></pre></td></tr></table></figure></p>\n<p>效果：<img src=\"/2017/05/24/ros-simulation/rviz-move.jpg\" alt=\"\"><br>需要停止机器人，可以在同一个窗口按下 <em>ctrl-c</em> 或者发布一个空的指令：<br>　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$rostopic</span> pub -<span class=\"number\">1</span> <span class=\"regexp\">/cmd_vel geometry_msgs/</span>Twist <span class=\"string\">'&#123;&#125;'</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"过程分析\"><a href=\"#过程分析\" class=\"headerlink\" title=\"过程分析\"></a>过程分析</h1><p><em>fake_pi_robot.launch</em> 文件是机器人的模型描述文件，功能是生成一个pi类型的机器人模型；<br>　<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">launch</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"/use_sim_time\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">&lt;!-- Load the URDF/Xacro model of our robot --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"urdf_file\"</span> <span class=\"attr\">default</span>=<span class=\"string\">\"$(find xacro)/xacro.py '$(find rbx1_description)/urdf/pi_robot.xacro'\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robot_description\"</span> <span class=\"attr\">command</span>=<span class=\"string\">\"$(arg urdf_file)\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">name</span>=<span class=\"string\">\"arbotix\"</span> <span class=\"attr\">pkg</span>=<span class=\"string\">\"arbotix_python\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"arbotix_driver\"</span> <span class=\"attr\">output</span>=<span class=\"string\">\"screen\"</span> <span class=\"attr\">clear_params</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">rosparam</span> <span class=\"attr\">file</span>=<span class=\"string\">\"$(find rbx1_bringup)/config/fake_pi_arbotix.yaml\"</span> <span class=\"attr\">command</span>=<span class=\"string\">\"load\"</span> /&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sim\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">node</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">name</span>=<span class=\"string\">\"move_fake_pi_arm_start\"</span> <span class=\"attr\">pkg</span>=<span class=\"string\">\"rbx1_bringup\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"move_fake_pi_arm_start.py\"</span> <span class=\"attr\">output</span>=<span class=\"string\">\"screen\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robot_state_publisher\"</span> <span class=\"attr\">pkg</span>=<span class=\"string\">\"robot_state_publisher\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"state_publisher\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"publish_frequency\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"double\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"20.0\"</span> /&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">node</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">&lt;!-- Run a static transform between /base_link and /base_footprint needed for SLAM --&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">pkg</span>=<span class=\"string\">\"tf\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"static_transform_publisher\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"base_footprint_broadcaster\"</span> <span class=\"attr\">args</span>=<span class=\"string\">\"0 0 0 0 0 0 /base_link /base_footprint 100\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">launch</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>大致过程先加载一个 <em>urdf</em>文件，这个文件用于描述机器人的样子，然后启动 <em>arbotix</em> 仿真，启动仿真节点，发布状态，最后是 <em>tf</em> 坐标变换。<em>sim.rviz</em>配置文件描述了 <em>rviz</em> 的配置，位于目录 <em>rbx1/rbx1_nav</em> 中，它的配置代码很长，大致描述的是一些显示配置，即 <em>rviz</em> 左侧那部分：<img src=\"/2017/05/24/ros-simulation/rviz-left.jpg\" alt=\"\"></p>\n<p>速度发布命令一个是角速度，一个是线速度，参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingTopics\" target=\"_blank\" rel=\"external\">ROStopic</a>。<br>x y z 的方向遵循右手坐标系，机器人正前方为x轴，自地面向上为z轴，y轴垂直于其他两轴位于左方:</p>\n<p><img src=\"/2017/05/24/ros-simulation/axis.jpg\" alt=\"\"><img src=\"/2017/05/24/ros-simulation/screw-rule.jpg\" alt=\"\"></p>\n<p>机器人只能贴着地面运动，只能绕Z轴做旋转运动，不可能沿Z轴做直线运动；也不可能绕着x轴或者绕着y轴做旋转运动。机器人只能向前运动或向后运动，即x方向；做旋转运动可以绕z轴顺时针或者逆时针，逆时针为正方向。旋转方向遵循右手螺旋法则，逆时针为正，顺时针为负。</p>\n<p><em>linear: {x: 0.2, y: 0, z: 0}</em>的意思就是机器人沿着x轴正方向，即向前运动，速度为 <em>0.2m/s</em> ;<br><em>angular: {x: 0, y: 0, z: 0.5}</em> 的意思是机器人沿着z轴做逆时针旋转的角速度为 <em>0.5rad/s</em>;因此会得出以上机器人运动轨迹。<br>关于速度发布的语法遵循 <a href=\"http://wiki.ros.org/ROS/YAMLCommandLine\" target=\"_blank\" rel=\"external\">YAML</a> 。<br>速度单位 <em>m/s</em>-米/秒<br>角速度单位 <em>rad/s</em>-弧度/秒</p>"},{"title":"ubuntu 下 hexo 安装与配置","date":"2017-05-23T12:39:56.000Z","comments":1,"_content":"# 前言\n有时候调试 *linux*，写代码都是在 *ubuntu* 环境下，随时需要记录一些调试的过程，这时候就需要在 *ubuntu* 下配置 *hexo* 环境，并撰写博客。\n<!--more-->\n# 安装git\n\n ```\n $sudo apt-get install git\n  ```\n# 生成SSH Key\n  ```\n $git config --global user.name \"your username\"  \n $git config --global user.email \"your_email@youremail.com\"\n $ssh-keygen -t rsa -C \"youremail@email.com\"\n  ```\n如果自己使用多台电脑更新博客，可以使用多个 *SSH Key*,但这样做根本没必要，完全可以使用一个。拷贝之前电脑~/.ssh/中生成的id_rsa和id_rsa.pub到本电脑目录 *~/.ssh/* 中，并确保文件的权限，私钥 *id_rsa* 的权限是600，公钥 *id_rsa.pub* 权限是644。\n# github验证机制\n说到这里就多说一下github的验证机制。公钥和私钥是成对使用的，一般是使用 *RSA*算法生成 *id_rsa.pub* 和 *id_rsa*。公钥是可以暴露在网络上传输的，但私钥不可以，私钥只能放在本地。所以这两个文件的权限也不同。当使用时，客户端发出公钥登录的请求，服务器端返回一段随机字符，客户端收到该字符使用私钥对这段字符进行加密，并发送给服务器端，服务器端使用事先存储的公钥去解密这段字符，如果成功即表示客户端身份验证通过。\n# 安装Node.js\n不建议使用 *apt-get* 命令安装，安装可能不成功\n使用如下命令安装参考 [nvm-github](https://github.com/creationix/nvm):\n ```\nexport NVM_DIR=\"$HOME/.nvm\" && (\n  git clone https://github.com/creationix/nvm.git \"$NVM_DIR\"\n  cd \"$NVM_DIR\"\n  git checkout `git describe --abbrev=0 --tags --match \"v[0-9]*\" origin`\n) && . \"$NVM_DIR/nvm.sh\"\n ```\n使nvm开机自启动，将如下内容添加到 *~/.bashrc* 中：\n  ```\n  export NVM_DIR=\"$HOME/.nvm\"\n [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"\n   ```\n不要忘记重启 *terminal* 或者重新 *source* 一下 *~/.bashrc*\n执行以下命令：\n   ```\n   $nvm ls-remote //列出所有安装包的版本信息\n   $nvm install stable //安装最稳定版本\n   $nvm use node //使用当前版本\n   $nvm run node --version //也可以使用该命令 使用当前版本\n   $nvm alias default node //设置默认版本\n    ```\n如果需要更新则手动更新 *nvm*:\n     ```\n (\n  cd \"$NVM_DIR\"\n  git fetch origin\n  git checkout `git describe --abbrev=0 --tags --match \"v[0-9]*\" origin`\n ) && . \"$NVM_DIR/nvm.sh\"\n ```\n# 安装hexo\n```\n$npm install  hexo-cli -g\n$npm install hexo-server -g\n$npm install hexo-deployer-git -g\n$npm install hexo-util -g\n```\n接下来建立博客目录，进入给目录下：\n```\n$hexo init //初始化 下载必要的建站文件\n$npm install //安装依赖项\n```\n# 安装remarkable\nlinux 下有很多好用的 *markdown* 博客撰写工具，诸如[Atom](https://atom.io/)、[Haroopad](http://pad.haroopress.com/)、[Mark My Words](https://github.com/voldyman/MarkMyWords)、[remarkable](http://remarkableapp.github.io/linux/download.html) 等等。其中 [remarkable](http://remarkableapp.github.io/linux/download.html) 最为流行。 [remarkable](http://remarkableapp.github.io/linux/download.html) 是linux下一款免费的 *markdown* 编辑器。关于它的介绍这里不多说，可自行查阅。\n安装之前先安装一些依赖：\n```\n$sudo apt-get install   python3-markdown   python3-bs4  wkhtmltopdf\n```\n下载[remarkable-deb](http://remarkableapp.github.io/linux/download.html) 目前的版本为 1.87：\n```\n$wget http://remarkableapp.github.io/files/remarkable_1.87_all.deb\n```\n安装：\n```\n$sudo dpkg -i remarkable_1.87_all.deb\n$sudo apt-get install -f 补足有可能的缺失依赖项\n```\n接下来就可以开始博客的撰写了，关于博客的撰写与发布请参考我站内关于 *hexo* 的文章。\n","source":"_posts/ubuntu-hexo.md","raw":"---\ntitle: ubuntu 下 hexo 安装与配置\ndate: 2017-05-23 20:39:56\ncategories: hexo\ntags: ubuntu hexo\ncomments: true\n---\n# 前言\n有时候调试 *linux*，写代码都是在 *ubuntu* 环境下，随时需要记录一些调试的过程，这时候就需要在 *ubuntu* 下配置 *hexo* 环境，并撰写博客。\n<!--more-->\n# 安装git\n\n ```\n $sudo apt-get install git\n  ```\n# 生成SSH Key\n  ```\n $git config --global user.name \"your username\"  \n $git config --global user.email \"your_email@youremail.com\"\n $ssh-keygen -t rsa -C \"youremail@email.com\"\n  ```\n如果自己使用多台电脑更新博客，可以使用多个 *SSH Key*,但这样做根本没必要，完全可以使用一个。拷贝之前电脑~/.ssh/中生成的id_rsa和id_rsa.pub到本电脑目录 *~/.ssh/* 中，并确保文件的权限，私钥 *id_rsa* 的权限是600，公钥 *id_rsa.pub* 权限是644。\n# github验证机制\n说到这里就多说一下github的验证机制。公钥和私钥是成对使用的，一般是使用 *RSA*算法生成 *id_rsa.pub* 和 *id_rsa*。公钥是可以暴露在网络上传输的，但私钥不可以，私钥只能放在本地。所以这两个文件的权限也不同。当使用时，客户端发出公钥登录的请求，服务器端返回一段随机字符，客户端收到该字符使用私钥对这段字符进行加密，并发送给服务器端，服务器端使用事先存储的公钥去解密这段字符，如果成功即表示客户端身份验证通过。\n# 安装Node.js\n不建议使用 *apt-get* 命令安装，安装可能不成功\n使用如下命令安装参考 [nvm-github](https://github.com/creationix/nvm):\n ```\nexport NVM_DIR=\"$HOME/.nvm\" && (\n  git clone https://github.com/creationix/nvm.git \"$NVM_DIR\"\n  cd \"$NVM_DIR\"\n  git checkout `git describe --abbrev=0 --tags --match \"v[0-9]*\" origin`\n) && . \"$NVM_DIR/nvm.sh\"\n ```\n使nvm开机自启动，将如下内容添加到 *~/.bashrc* 中：\n  ```\n  export NVM_DIR=\"$HOME/.nvm\"\n [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"\n   ```\n不要忘记重启 *terminal* 或者重新 *source* 一下 *~/.bashrc*\n执行以下命令：\n   ```\n   $nvm ls-remote //列出所有安装包的版本信息\n   $nvm install stable //安装最稳定版本\n   $nvm use node //使用当前版本\n   $nvm run node --version //也可以使用该命令 使用当前版本\n   $nvm alias default node //设置默认版本\n    ```\n如果需要更新则手动更新 *nvm*:\n     ```\n (\n  cd \"$NVM_DIR\"\n  git fetch origin\n  git checkout `git describe --abbrev=0 --tags --match \"v[0-9]*\" origin`\n ) && . \"$NVM_DIR/nvm.sh\"\n ```\n# 安装hexo\n```\n$npm install  hexo-cli -g\n$npm install hexo-server -g\n$npm install hexo-deployer-git -g\n$npm install hexo-util -g\n```\n接下来建立博客目录，进入给目录下：\n```\n$hexo init //初始化 下载必要的建站文件\n$npm install //安装依赖项\n```\n# 安装remarkable\nlinux 下有很多好用的 *markdown* 博客撰写工具，诸如[Atom](https://atom.io/)、[Haroopad](http://pad.haroopress.com/)、[Mark My Words](https://github.com/voldyman/MarkMyWords)、[remarkable](http://remarkableapp.github.io/linux/download.html) 等等。其中 [remarkable](http://remarkableapp.github.io/linux/download.html) 最为流行。 [remarkable](http://remarkableapp.github.io/linux/download.html) 是linux下一款免费的 *markdown* 编辑器。关于它的介绍这里不多说，可自行查阅。\n安装之前先安装一些依赖：\n```\n$sudo apt-get install   python3-markdown   python3-bs4  wkhtmltopdf\n```\n下载[remarkable-deb](http://remarkableapp.github.io/linux/download.html) 目前的版本为 1.87：\n```\n$wget http://remarkableapp.github.io/files/remarkable_1.87_all.deb\n```\n安装：\n```\n$sudo dpkg -i remarkable_1.87_all.deb\n$sudo apt-get install -f 补足有可能的缺失依赖项\n```\n接下来就可以开始博客的撰写了，关于博客的撰写与发布请参考我站内关于 *hexo* 的文章。\n","slug":"ubuntu-hexo","published":1,"updated":"2017-05-27T01:16:39.526Z","layout":"post","photos":[],"link":"","_id":"cj4hne53s002rw8indpbe1k3s","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>有时候调试 <em>linux</em>，写代码都是在 <em>ubuntu</em> 环境下，随时需要记录一些调试的过程，这时候就需要在 <em>ubuntu</em> 下配置 <em>hexo</em> 环境，并撰写博客。<br><a id=\"more\"></a></p>\n<h1 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h1> <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install git</span></div></pre></td></tr></table></figure>\n<h1 id=\"生成SSH-Key\"><a href=\"#生成SSH-Key\" class=\"headerlink\" title=\"生成SSH Key\"></a>生成SSH Key</h1>  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"your username\"</span>  </div><div class=\"line\"><span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"your_email@youremail.com\"</span></div><div class=\"line\"><span class=\"variable\">$ssh</span>-keygen -t rsa -C <span class=\"string\">\"youremail@email.com\"</span></div></pre></td></tr></table></figure>\n<p>如果自己使用多台电脑更新博客，可以使用多个 <em>SSH Key</em>,但这样做根本没必要，完全可以使用一个。拷贝之前电脑~/.ssh/中生成的id_rsa和id_rsa.pub到本电脑目录 <em>~/.ssh/</em> 中，并确保文件的权限，私钥 <em>id_rsa</em> 的权限是600，公钥 <em>id_rsa.pub</em> 权限是644。</p>\n<h1 id=\"github验证机制\"><a href=\"#github验证机制\" class=\"headerlink\" title=\"github验证机制\"></a>github验证机制</h1><p>说到这里就多说一下github的验证机制。公钥和私钥是成对使用的，一般是使用 <em>RSA</em>算法生成 <em>id_rsa.pub</em> 和 <em>id_rsa</em>。公钥是可以暴露在网络上传输的，但私钥不可以，私钥只能放在本地。所以这两个文件的权限也不同。当使用时，客户端发出公钥登录的请求，服务器端返回一段随机字符，客户端收到该字符使用私钥对这段字符进行加密，并发送给服务器端，服务器端使用事先存储的公钥去解密这段字符，如果成功即表示客户端身份验证通过。</p>\n<h1 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h1><p>不建议使用 <em>apt-get</em> 命令安装，安装可能不成功<br>使用如下命令安装参考 <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">nvm-github</a>:<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span> &amp;&amp; (</div><div class=\"line\">  git <span class=\"built_in\">clone</span> https://github.com/creationix/nvm.git <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>\"</span></div><div class=\"line\">  <span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>\"</span></div><div class=\"line\">  git checkout `git describe --abbrev=0 --tags --match <span class=\"string\">\"v[0-9]*\"</span> origin`</div><div class=\"line\">) &amp;&amp; . <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span></div></pre></td></tr></table></figure></p>\n<p>使nvm开机自启动，将如下内容添加到 <em>~/.bashrc</em> 中：<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></div><div class=\"line\">[ <span class=\"_\">-s</span> <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; . <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span></div></pre></td></tr></table></figure></p>\n<p>不要忘记重启 <em>terminal</em> 或者重新 <em>source</em> 一下 <em>~/.bashrc</em><br>执行以下命令：<br>   <figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nvm</span> <span class=\"keyword\">ls</span>-remote <span class=\"comment\">//列出所有安装包的版本信息</span></div><div class=\"line\"><span class=\"variable\">$nvm</span> install stable <span class=\"comment\">//安装最稳定版本</span></div><div class=\"line\"><span class=\"variable\">$nvm</span> <span class=\"keyword\">use</span> node <span class=\"comment\">//使用当前版本</span></div><div class=\"line\"><span class=\"variable\">$nvm</span> <span class=\"keyword\">run</span> node --<span class=\"keyword\">version</span> <span class=\"comment\">//也可以使用该命令 使用当前版本</span></div><div class=\"line\"><span class=\"variable\">$nvm</span> alias default node <span class=\"comment\">//设置默认版本</span></div></pre></td></tr></table></figure></p>\n<p>如果需要更新则手动更新 <em>nvm</em>:<br>     <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(</div><div class=\"line\"> <span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>\"</span></div><div class=\"line\"> git fetch origin</div><div class=\"line\"> git checkout `git describe --abbrev=0 --tags --match <span class=\"string\">\"v[0-9]*\"</span> origin`</div><div class=\"line\">) &amp;&amp; . <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h1><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install  hexo-cli -g</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-server -g</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-deployer-git -g</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-util -g</span></div></pre></td></tr></table></figure>\n<p>接下来建立博客目录，进入给目录下：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$hexo</span> init <span class=\"regexp\">//</span>初始化 下载必要的建站文件</div><div class=\"line\"><span class=\"variable\">$npm</span> install <span class=\"regexp\">//</span>安装依赖项</div></pre></td></tr></table></figure></p>\n<h1 id=\"安装remarkable\"><a href=\"#安装remarkable\" class=\"headerlink\" title=\"安装remarkable\"></a>安装remarkable</h1><p>linux 下有很多好用的 <em>markdown</em> 博客撰写工具，诸如<a href=\"https://atom.io/\" target=\"_blank\" rel=\"external\">Atom</a>、<a href=\"http://pad.haroopress.com/\" target=\"_blank\" rel=\"external\">Haroopad</a>、<a href=\"https://github.com/voldyman/MarkMyWords\" target=\"_blank\" rel=\"external\">Mark My Words</a>、<a href=\"http://remarkableapp.github.io/linux/download.html\" target=\"_blank\" rel=\"external\">remarkable</a> 等等。其中 <a href=\"http://remarkableapp.github.io/linux/download.html\" target=\"_blank\" rel=\"external\">remarkable</a> 最为流行。 <a href=\"http://remarkableapp.github.io/linux/download.html\" target=\"_blank\" rel=\"external\">remarkable</a> 是linux下一款免费的 <em>markdown</em> 编辑器。关于它的介绍这里不多说，可自行查阅。<br>安装之前先安装一些依赖：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">$sudo</span> apt-<span class=\"meta\">get</span> install   python3-<span class=\"keyword\">markdown </span>  python3-<span class=\"keyword\">bs4 </span> wkhtmltopdf</div></pre></td></tr></table></figure></p>\n<p>下载<a href=\"http://remarkableapp.github.io/linux/download.html\" target=\"_blank\" rel=\"external\">remarkable-deb</a> 目前的版本为 1.87：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"regexp\">//</span>remarkableapp.github.io<span class=\"regexp\">/files/</span>remarkable_1.<span class=\"number\">87</span>_all.deb</div></pre></td></tr></table></figure></p>\n<p>安装：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> dpkg -<span class=\"selector-tag\">i</span> remarkable_1.<span class=\"number\">87</span>_all<span class=\"selector-class\">.deb</span></div><div class=\"line\"><span class=\"variable\">$sudo</span> apt-get install -f 补足有可能的缺失依赖项</div></pre></td></tr></table></figure></p>\n<p>接下来就可以开始博客的撰写了，关于博客的撰写与发布请参考我站内关于 <em>hexo</em> 的文章。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>有时候调试 <em>linux</em>，写代码都是在 <em>ubuntu</em> 环境下，随时需要记录一些调试的过程，这时候就需要在 <em>ubuntu</em> 下配置 <em>hexo</em> 环境，并撰写博客。<br></p>","more":"<p></p>\n<h1 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h1> <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install git</span></div></pre></td></tr></table></figure>\n<h1 id=\"生成SSH-Key\"><a href=\"#生成SSH-Key\" class=\"headerlink\" title=\"生成SSH Key\"></a>生成SSH Key</h1>  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"your username\"</span>  </div><div class=\"line\"><span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"your_email@youremail.com\"</span></div><div class=\"line\"><span class=\"variable\">$ssh</span>-keygen -t rsa -C <span class=\"string\">\"youremail@email.com\"</span></div></pre></td></tr></table></figure>\n<p>如果自己使用多台电脑更新博客，可以使用多个 <em>SSH Key</em>,但这样做根本没必要，完全可以使用一个。拷贝之前电脑~/.ssh/中生成的id_rsa和id_rsa.pub到本电脑目录 <em>~/.ssh/</em> 中，并确保文件的权限，私钥 <em>id_rsa</em> 的权限是600，公钥 <em>id_rsa.pub</em> 权限是644。</p>\n<h1 id=\"github验证机制\"><a href=\"#github验证机制\" class=\"headerlink\" title=\"github验证机制\"></a>github验证机制</h1><p>说到这里就多说一下github的验证机制。公钥和私钥是成对使用的，一般是使用 <em>RSA</em>算法生成 <em>id_rsa.pub</em> 和 <em>id_rsa</em>。公钥是可以暴露在网络上传输的，但私钥不可以，私钥只能放在本地。所以这两个文件的权限也不同。当使用时，客户端发出公钥登录的请求，服务器端返回一段随机字符，客户端收到该字符使用私钥对这段字符进行加密，并发送给服务器端，服务器端使用事先存储的公钥去解密这段字符，如果成功即表示客户端身份验证通过。</p>\n<h1 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h1><p>不建议使用 <em>apt-get</em> 命令安装，安装可能不成功<br>使用如下命令安装参考 <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">nvm-github</a>:<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span> &amp;&amp; (</div><div class=\"line\">  git <span class=\"built_in\">clone</span> https://github.com/creationix/nvm.git <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>\"</span></div><div class=\"line\">  <span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>\"</span></div><div class=\"line\">  git checkout `git describe --abbrev=0 --tags --match <span class=\"string\">\"v[0-9]*\"</span> origin`</div><div class=\"line\">) &amp;&amp; . <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span></div></pre></td></tr></table></figure></p>\n<p>使nvm开机自启动，将如下内容添加到 <em>~/.bashrc</em> 中：<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></div><div class=\"line\">[ <span class=\"_\">-s</span> <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; . <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span></div></pre></td></tr></table></figure></p>\n<p>不要忘记重启 <em>terminal</em> 或者重新 <em>source</em> 一下 <em>~/.bashrc</em><br>执行以下命令：<br>   <figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nvm</span> <span class=\"keyword\">ls</span>-remote <span class=\"comment\">//列出所有安装包的版本信息</span></div><div class=\"line\"><span class=\"variable\">$nvm</span> install stable <span class=\"comment\">//安装最稳定版本</span></div><div class=\"line\"><span class=\"variable\">$nvm</span> <span class=\"keyword\">use</span> node <span class=\"comment\">//使用当前版本</span></div><div class=\"line\"><span class=\"variable\">$nvm</span> <span class=\"keyword\">run</span> node --<span class=\"keyword\">version</span> <span class=\"comment\">//也可以使用该命令 使用当前版本</span></div><div class=\"line\"><span class=\"variable\">$nvm</span> alias default node <span class=\"comment\">//设置默认版本</span></div></pre></td></tr></table></figure></p>\n<p>如果需要更新则手动更新 <em>nvm</em>:<br>     <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(</div><div class=\"line\"> <span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>\"</span></div><div class=\"line\"> git fetch origin</div><div class=\"line\"> git checkout `git describe --abbrev=0 --tags --match <span class=\"string\">\"v[0-9]*\"</span> origin`</div><div class=\"line\">) &amp;&amp; . <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h1><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install  hexo-cli -g</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-server -g</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-deployer-git -g</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-util -g</span></div></pre></td></tr></table></figure>\n<p>接下来建立博客目录，进入给目录下：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$hexo</span> init <span class=\"regexp\">//</span>初始化 下载必要的建站文件</div><div class=\"line\"><span class=\"variable\">$npm</span> install <span class=\"regexp\">//</span>安装依赖项</div></pre></td></tr></table></figure></p>\n<h1 id=\"安装remarkable\"><a href=\"#安装remarkable\" class=\"headerlink\" title=\"安装remarkable\"></a>安装remarkable</h1><p>linux 下有很多好用的 <em>markdown</em> 博客撰写工具，诸如<a href=\"https://atom.io/\" target=\"_blank\" rel=\"external\">Atom</a>、<a href=\"http://pad.haroopress.com/\" target=\"_blank\" rel=\"external\">Haroopad</a>、<a href=\"https://github.com/voldyman/MarkMyWords\" target=\"_blank\" rel=\"external\">Mark My Words</a>、<a href=\"http://remarkableapp.github.io/linux/download.html\" target=\"_blank\" rel=\"external\">remarkable</a> 等等。其中 <a href=\"http://remarkableapp.github.io/linux/download.html\" target=\"_blank\" rel=\"external\">remarkable</a> 最为流行。 <a href=\"http://remarkableapp.github.io/linux/download.html\" target=\"_blank\" rel=\"external\">remarkable</a> 是linux下一款免费的 <em>markdown</em> 编辑器。关于它的介绍这里不多说，可自行查阅。<br>安装之前先安装一些依赖：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">$sudo</span> apt-<span class=\"meta\">get</span> install   python3-<span class=\"keyword\">markdown </span>  python3-<span class=\"keyword\">bs4 </span> wkhtmltopdf</div></pre></td></tr></table></figure></p>\n<p>下载<a href=\"http://remarkableapp.github.io/linux/download.html\" target=\"_blank\" rel=\"external\">remarkable-deb</a> 目前的版本为 1.87：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"regexp\">//</span>remarkableapp.github.io<span class=\"regexp\">/files/</span>remarkable_1.<span class=\"number\">87</span>_all.deb</div></pre></td></tr></table></figure></p>\n<p>安装：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> dpkg -<span class=\"selector-tag\">i</span> remarkable_1.<span class=\"number\">87</span>_all<span class=\"selector-class\">.deb</span></div><div class=\"line\"><span class=\"variable\">$sudo</span> apt-get install -f 补足有可能的缺失依赖项</div></pre></td></tr></table></figure></p>\n<p>接下来就可以开始博客的撰写了，关于博客的撰写与发布请参考我站内关于 <em>hexo</em> 的文章。</p>"},{"title":"如何让Vim变的爱不释手","date":"2017-05-18T01:02:06.000Z","comments":1,"_content":"# 前言\n*linux* 下有很多好用的 IDE，比如常见的 [Eclipse](https://eclipse.org/)、[Bluefish](http://bluefish.openoffice.nl/index.html)、[NetBeans](https://netbeans.org/) 等等，功能很多，有些功能我们不一定用得上,天天面对 *terminal* 敲命令的我们天生不喜欢鼠标。*linux* 下的文本编辑器使用最多的还是 [Vim](http://www.vim.org/) 。可不可以将 [Vim](http://www.vim.org/) 打造成一个好用的 IDE 来替代或者部分替代这些高大上的 IDE 呢? -程序猿天生喜欢折腾。话不多说先上图：![](vim/ycm.jpg)\n<!--more-->\n# vim 插件管理\n首先安装 [Vim](https://github.com/vim/vim.git), 确保版本在 7.4 以上。可以源码安装 [Vim](https://github.com/vim/vim.git) 也可以自动安装：\n　　```\n $sudo apt-get install vim\n　　```\n由于发行版的不同，这种方式安装的 [Vim](https://github.com/vim/vim.git) 版本不一定是最新的，如果版本低于 7.4 请采用源码安装。 [Vim](https://github.com/vim/vim.git) 的插件管理一般是通过 [Vundle](https://github.com/VundleVim/Vundle.vim) 来实现。 安装 [Vundle](https://github.com/VundleVim/Vundle.vim):\n　　```\n$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n　　```\n完成后修改用户目录下的 *.vimrc* 文件，添加以下项：\n　　```\n \"-----------Vundle configuration--------------------\n set nocompatible \"去掉vi一致性\n filetype off  \n \"包含vundle路径\n set rtp+=~/.vim/bundle/Vundle.vim\n call vundle#begin()\n Plugin 'VundleVim/Vundle.vim'\n Plugin 'xxx/xxx' \"新插件\n call vundle#end()\n filetype plugin indent on\n　　```\n当需要安装新的插件时，将插件的仓库名按格式填入到*.vimrc* 文件：\n　　```\nPlugin 'xxx/xxx'\n　　```\n插件的安装格式为：\n　　```\n Plugin 'repository' //在Github vim-scripts 用户下的仓库,只需要写出仓库名称\n Plugin 'username/repository' //在Github其他用户下的仓库, 需要写出”用户名/仓库名”\n Plugin 'git://github.com/something.git' //不在Github上的插件，需要写出git全路径\n　　```\n启动 *Vim*,运行命令安装插件：\n\n　　```\n ：PluginInstall\n　　```\n卸载插件时先在 *.vimrc* 中删除掉不用的插件行然后运行清除命令：\n　　```\n ：PluginClean\n　　```\n参考 [Vundle](https://github.com/VundleVim/Vundle.vim) 和 [vim-scripts](https://github.com/vim-scripts)\n# 项目树\n[NerdTree](https://github.com/scrooloose/nerdtree) 是一个树形目录插件，方便查看项目中的各个文件。\n安装：\n　　```\n Plugin 'scrooloose/nerdtree'\n\n　　```\n完成后在 *.vimrc* 中进行必要的配置：\n　```\n \"---------NERDTree Configruation-----------------------------------\n let NERDTreeShowBookmarks=1 \" 当打开 NERDTree 窗口时，自动显示 Bookmarks\n let NERDTreeWinPos='left' \"目录树在左边显示\n let NERDTreeWinSize=30 \"目录树的窗口宽度\n \"开启和关闭快捷键为F2 或者 直接输入命令:NERDTree\n map <F2> :NERDTreeToggle<CR>\n　```\n效果：\n![](vim/tree.jpg)\n# 状态栏\n[Vim-Powerline](https://github.com/Lokaltog/vim-powerline) *vim* 状态栏的显示，可以显示文件名、行列数、编码方式等。\n安装：\n　　```\n Plugin 'Lokaltog/vim-powerline'\n　　```\n现在新的仓库已迁移到 [powerline](https://github.com/powerline/powerline)。\n效果：\n![](vim/powerline.jpg)\n# 括号自动补全\n[auto-pair](https://github.com/jiangmiao/auto-pairs) 插件可以自动补全代码中的括号。安装：\n　　```\n Plugin 'jiangmiao/auto-pairs'\n　　```\n# 代码自动补全\n代码自动补全是各种IDE的必备功能，这里强烈推荐[YouCompleteMe](https://github.com/Valloric/YouCompleteMe)。它基于 [clang](https://zh.wikipedia.org/wiki/Clang) 能够为 *C/C++* 代码提供代码提示，也支持 *python C#*。[YouCompleteMe](https://github.com/Valloric/YouCompleteMe) 的安装正如传说中一样，非常麻烦，但使用起来非常爽。\n## 安装\n源码下载：\n　　```\n$git clone --recursive https://github.com/Valloric/YouCompleteMe.git ~/.vim/bundle/YouCompleteMe\n\n　　```\n安装 [clang](https://clang.llvm.org/get_started.html)：\n　　\n　　```\n $sudo apt-get install clang\n　　```\n[YouCompleteMe](https://github.com/Valloric/YouCompleteMe) 要求 [clang](https://clang.llvm.org/get_started.html) 最低版本为 3.9，如果不是可以在 [这里](http://releases.llvm.org/download.html) 下载。如果 *Ubuntu* 为32bits则需要下载源码手动编译。\n安装 *python-dev*:\n　　```\n $sudo apt-get install python-dev python3-dev\n　　```\n安装 *Cmake*:\n　　```\n $sudo apt-get install cmake\n　　```\n源码编译：\n　　```\n$cd ~/.vim/bundle/YouCompleteMe\n$./install.py --clang-completer --system-libclang\n　　```\n--system-libclang是指使用系统的*libclang*。新版 *YouCompleteMe* 编译时不再需要 *make ycm_support_libs*。\n## 配置\n拷贝系统配置到用户目录下：\n　　```\n $cp ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py  ~/\n　　```\n*.vimrc*中的配置：\n　　```\n \"----------YouCompleteMe configuration---\n set runtimepath+=~/.vim/bundle/YouCompleteMe \"使用插件\n let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py' \"指定全局配置文件路径\n set completeopt=longest,menu    \"让Vim的补全菜单行为与一般IDE一致\n autocmd InsertLeave * if pumvisible() == 0|pclose|endif \"离开插入模式后自动关闭预览窗口\n \"回车即选中当前项\n inoremap <expr> <CR>       pumvisible() ? \"\\<C-y>\" : \"\\<CR>\"\n \"上下左右键的行为\n inoremap <expr> <Down>     pumvisible() ? \"\\<C-n>\" : \"\\<Down>\"\n inoremap <expr> <Up>       pumvisible() ? \"\\<C-p>\" : \"\\<Up>\"\n inoremap <expr> <PageDown> pumvisible() ? \"\\<PageDown>\\<C-p>\\<C-n>\":\n inoremap <expr> <PageUp>   pumvisible() ? \"\\<PageUp>\\<C-p>\\<C-n>\" : \"\\<PageUp>\"\n let g:ycm_key_list_select_completion = ['<Down>']\n let g:ycm_key_list_previous_completion = ['<Up>']\n let g:ycm_confirm_extra_conf=0 \"关闭加载.ycm_extra_conf.py提示\n let g:ycm_collect_identifiers_from_tags_files=1 \" 开启 YCM 基于标签引擎\n let g:ycm_min_num_of_chars_for_completion=2 \" 从第2个键入字符就开始罗列匹配项\n let g:ycm_cache_omnifunc=0  \" 禁止缓存匹配项,每次都重新生成匹配项\n let g:ycm_seed_identifiers_with_syntax=1    \" 语法关键字补全\n nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>\"force recomile with syntastic\n inoremap <leader><leader> <C-x><C-o>\n let g:ycm_complete_in_comments = 1 \"在注释输入中也能补全\n let g:ycm_complete_in_strings = 1 \"在字符串输入中也能补全\n let g:ycm_collect_identifiers_from_comments_and_strings = 1 \"注释和字符串中的文字也会被收入补全\n let g:clang_user_options='|| exit 0'\n let g:ycm_goto_buffer_command = 'horizontal-split' \"跳转到定义处，分屏打开\n nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR> \" 跳转到定义处\n let g:ycm_error_symbol = '>>' \"错误提示符\n let g:ycm_warning_symbol = '>*' \"警告提示符\n　　```\n## 32位系统安装\n由于我使用的是ubuntu14.04 32bit系统，所以有很多软件需要手动编译，在这里将遇到的问题悉数总结一下，有和我同样配置的小伙伴可以参考。32位系统没有合适的 *clang* 和 *vim*发行包，需要手动编译安装。\n### Cmake 安装\n使用sudo apt-get install cmake 默认安装的 [Cmake](https://cmake.org/) 版本为2.8.12.2。当使用 [Cmake](https://cmake.org/) 编译LLVM时提示 [Cmake](https://cmake.org/) 版本太低，要求至少为3.4.3以上 因此需要升级[Cmake](https://cmake.org/)。 \n下载源码：\n　　```\n $wget https://cmake.org/files/v3.4/cmake-3.4.3.tar.gz\n　　```\n编译安装：\n　　```\n $./configure\n $make\n $sudo make install\n　　```\n### Clang 编译安装\n下载LLVM源代码并放到指定目录:\n　　```\n $wget http://llvm.org/releases/3.9.0/llvm-3.9.0.src.tar.xz\n $tar xf llvm-3.9.0.src.tar.xz\n $mv llvm-3.9.0.src  llvm\n\n　　```\n下载clang的源码并放到指定目录：\n　　```\n $cd llvm/tools\n $wget http://llvm.org/releases/3.9.0/cfe-3.9.0.src.tar.xz\n $tar xf cfe-3.9.0.src.tar.xz\n $mv cfe-3.9.0.src clang\n\n　　```\n下载clang-tools-extra源码并放到指定目录：\n　　```\n $cd llvm/tools/clang/tools\n $wget http://llvm.org/releases/3.9.0/clang-tools-extra-3.9.0.src.tar.xz\n $tar xf clang-tools-extra-3.9.0.src.tar.xz\n $mv clang-tools-extra-3.9.0.src  extra\n\n　　```\n下载compiler-rt源码并放到指定目录：\n　　```\n $cd llvm/projects\n $wget http://llvm.org/releases/3.9.0/compiler-rt-3.9.0.src.tar.xz\n $tar xf compiler-rt-3.9.0.src.tar.xz\n $mv compiler-rt-3.9.0.src compiler-rt\n　　```\n配置参考 [llvm官网](http://llvm.org/docs/GettingStarted.html#local-llvm-configuration)。\n　　```\n $cmake –G “Unix Makefiles” /home/steven/software/llvm –DCMAKE_BUILD_TYPE=RELEASE –DLLVM_TARGETS_TO_BUILD=X86 –DLLVM_OPTIMIZED_TABLEGEN=ON –DCMAKE_INSTALL_PREFIX=/usr/local/llvm\n　　```\n编译参考[llvm-cmake](http://llvm.org/docs/CMake.html)：\n3.7.0以后，不允许在源码树中进行构建，我们可以在llvm源码目录同级目录中创建一个目录build，然后使用绝对路径进行构建。\n退出llvm目录，在llvm同级目录下建立build目录，进入到build目录\n\n　　```\n $cd ../..\n $mkdir build\n $cd build\n $cmake --build . //后面的 . 不能少,意思是当前目录\n　　```\n安装：\n　　```\n $sudo cmake --build . --target install\n　　```\n也可以在安装时改变安装路径：\n　　```\n $cmake –DCMAKE_INSTALL_PREFIX=/tmp/llvm –P cmake_install.cmake\n　　```\n安装后看系统是否能找到，如果不能需要手动添加到环境变量。\n### vim升级\n如果不升级 *Vim*,当调用 *YouCompleteMe* 时系统会提示错误：\n　　```\nYouCompleteMe unavailable: requires Vim 7.4.143+\n　　```\n因此需要升级 *Vim*。先卸载原有版本：\n　　```\nsudo apt-get remove vim\nsudo apt-get remove vim-runtime\nsudo apt-get remove vim -tiny\nsudo apt-get remove vim-common\nsudo apt-get remove vim-doc\nsudo apt-get remove vim-scripts\n　　```\n首先安装一些依赖项：\n　　```\nsudo apt-get install libncurses5-dev libgnome2-dev libgnomeui-dev libgtk2.0-dev libatk1.0-dev libbonoboui2-dev libcairo2-dev libx11-dev libxpm-dev libxt-dev python-dev python3-dev ruby-dev lua5.1 lua5.1-dev　\n　```\n*–enable-pythoninterp* 和 *–enable-python3interp* 是 *vim* 对 *python* 版本的支持，安装 *YouCompleteMe* 必须要有这两个配置。\n下载 [vim-8.0](http://mirror.metrocast.net/vim/unix/vim-8.0.tar.bz2):\n　　```\n $wget http://mirror.metrocast.net/vim/unix/vim-8.0.tar.bz2\n　　```\n解压后配置：\n　　```\n./configure --with-features=huge --enable-multibyte --enable-rubyinterp --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config-i386-linux-gnu  --enable-python3interp --with-python3-config-dir=/usr/lib/python3.4/config-3.4m-i386-linux-gnu --enable-perlinterp --enable-luainterp --enable-gui=gtk2 --enable-cscope --prefix=/usr\n　　```\n注意上面的 *--with-python3-config-dir* 一定要指定 *python3* 的完全路径，否则系统找不到。\n编译安装：\n　　```\n $make VIMRUNTIMEDIR=/usr/share/vim/vim80\n $sudo make install\n　　```\n安装完后一定要测试一下依赖项是否完整，特别是对 *python3* 的依赖：\n　　```\n $vim --version | grep python\n　　```\n如果输出包含则表示安装完整：\n　　```\n+cryptv          +linebreak       +python/dyn      +vreplace\n+cscope          +lispindent      +python3/dyn     +wildignore\n　　```\n再回到以上YouCompleteMe的安装即可。\n# 结语\n*Vim* 还有很多有用的插件，需要慢慢研究，目前先装这些，对于常用的补全、跳转、快速查看目录等都可以实现，基本满足需求。\n\n\n\n\n\n \n\n","source":"_posts/vim.md","raw":"---\ntitle: 如何让Vim变的爱不释手\ndate: 2017-05-18 09:02:06\ncategories: Linux\ntags: Vim\ncomments: true\n---\n# 前言\n*linux* 下有很多好用的 IDE，比如常见的 [Eclipse](https://eclipse.org/)、[Bluefish](http://bluefish.openoffice.nl/index.html)、[NetBeans](https://netbeans.org/) 等等，功能很多，有些功能我们不一定用得上,天天面对 *terminal* 敲命令的我们天生不喜欢鼠标。*linux* 下的文本编辑器使用最多的还是 [Vim](http://www.vim.org/) 。可不可以将 [Vim](http://www.vim.org/) 打造成一个好用的 IDE 来替代或者部分替代这些高大上的 IDE 呢? -程序猿天生喜欢折腾。话不多说先上图：![](vim/ycm.jpg)\n<!--more-->\n# vim 插件管理\n首先安装 [Vim](https://github.com/vim/vim.git), 确保版本在 7.4 以上。可以源码安装 [Vim](https://github.com/vim/vim.git) 也可以自动安装：\n　　```\n $sudo apt-get install vim\n　　```\n由于发行版的不同，这种方式安装的 [Vim](https://github.com/vim/vim.git) 版本不一定是最新的，如果版本低于 7.4 请采用源码安装。 [Vim](https://github.com/vim/vim.git) 的插件管理一般是通过 [Vundle](https://github.com/VundleVim/Vundle.vim) 来实现。 安装 [Vundle](https://github.com/VundleVim/Vundle.vim):\n　　```\n$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n　　```\n完成后修改用户目录下的 *.vimrc* 文件，添加以下项：\n　　```\n \"-----------Vundle configuration--------------------\n set nocompatible \"去掉vi一致性\n filetype off  \n \"包含vundle路径\n set rtp+=~/.vim/bundle/Vundle.vim\n call vundle#begin()\n Plugin 'VundleVim/Vundle.vim'\n Plugin 'xxx/xxx' \"新插件\n call vundle#end()\n filetype plugin indent on\n　　```\n当需要安装新的插件时，将插件的仓库名按格式填入到*.vimrc* 文件：\n　　```\nPlugin 'xxx/xxx'\n　　```\n插件的安装格式为：\n　　```\n Plugin 'repository' //在Github vim-scripts 用户下的仓库,只需要写出仓库名称\n Plugin 'username/repository' //在Github其他用户下的仓库, 需要写出”用户名/仓库名”\n Plugin 'git://github.com/something.git' //不在Github上的插件，需要写出git全路径\n　　```\n启动 *Vim*,运行命令安装插件：\n\n　　```\n ：PluginInstall\n　　```\n卸载插件时先在 *.vimrc* 中删除掉不用的插件行然后运行清除命令：\n　　```\n ：PluginClean\n　　```\n参考 [Vundle](https://github.com/VundleVim/Vundle.vim) 和 [vim-scripts](https://github.com/vim-scripts)\n# 项目树\n[NerdTree](https://github.com/scrooloose/nerdtree) 是一个树形目录插件，方便查看项目中的各个文件。\n安装：\n　　```\n Plugin 'scrooloose/nerdtree'\n\n　　```\n完成后在 *.vimrc* 中进行必要的配置：\n　```\n \"---------NERDTree Configruation-----------------------------------\n let NERDTreeShowBookmarks=1 \" 当打开 NERDTree 窗口时，自动显示 Bookmarks\n let NERDTreeWinPos='left' \"目录树在左边显示\n let NERDTreeWinSize=30 \"目录树的窗口宽度\n \"开启和关闭快捷键为F2 或者 直接输入命令:NERDTree\n map <F2> :NERDTreeToggle<CR>\n　```\n效果：\n![](vim/tree.jpg)\n# 状态栏\n[Vim-Powerline](https://github.com/Lokaltog/vim-powerline) *vim* 状态栏的显示，可以显示文件名、行列数、编码方式等。\n安装：\n　　```\n Plugin 'Lokaltog/vim-powerline'\n　　```\n现在新的仓库已迁移到 [powerline](https://github.com/powerline/powerline)。\n效果：\n![](vim/powerline.jpg)\n# 括号自动补全\n[auto-pair](https://github.com/jiangmiao/auto-pairs) 插件可以自动补全代码中的括号。安装：\n　　```\n Plugin 'jiangmiao/auto-pairs'\n　　```\n# 代码自动补全\n代码自动补全是各种IDE的必备功能，这里强烈推荐[YouCompleteMe](https://github.com/Valloric/YouCompleteMe)。它基于 [clang](https://zh.wikipedia.org/wiki/Clang) 能够为 *C/C++* 代码提供代码提示，也支持 *python C#*。[YouCompleteMe](https://github.com/Valloric/YouCompleteMe) 的安装正如传说中一样，非常麻烦，但使用起来非常爽。\n## 安装\n源码下载：\n　　```\n$git clone --recursive https://github.com/Valloric/YouCompleteMe.git ~/.vim/bundle/YouCompleteMe\n\n　　```\n安装 [clang](https://clang.llvm.org/get_started.html)：\n　　\n　　```\n $sudo apt-get install clang\n　　```\n[YouCompleteMe](https://github.com/Valloric/YouCompleteMe) 要求 [clang](https://clang.llvm.org/get_started.html) 最低版本为 3.9，如果不是可以在 [这里](http://releases.llvm.org/download.html) 下载。如果 *Ubuntu* 为32bits则需要下载源码手动编译。\n安装 *python-dev*:\n　　```\n $sudo apt-get install python-dev python3-dev\n　　```\n安装 *Cmake*:\n　　```\n $sudo apt-get install cmake\n　　```\n源码编译：\n　　```\n$cd ~/.vim/bundle/YouCompleteMe\n$./install.py --clang-completer --system-libclang\n　　```\n--system-libclang是指使用系统的*libclang*。新版 *YouCompleteMe* 编译时不再需要 *make ycm_support_libs*。\n## 配置\n拷贝系统配置到用户目录下：\n　　```\n $cp ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py  ~/\n　　```\n*.vimrc*中的配置：\n　　```\n \"----------YouCompleteMe configuration---\n set runtimepath+=~/.vim/bundle/YouCompleteMe \"使用插件\n let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py' \"指定全局配置文件路径\n set completeopt=longest,menu    \"让Vim的补全菜单行为与一般IDE一致\n autocmd InsertLeave * if pumvisible() == 0|pclose|endif \"离开插入模式后自动关闭预览窗口\n \"回车即选中当前项\n inoremap <expr> <CR>       pumvisible() ? \"\\<C-y>\" : \"\\<CR>\"\n \"上下左右键的行为\n inoremap <expr> <Down>     pumvisible() ? \"\\<C-n>\" : \"\\<Down>\"\n inoremap <expr> <Up>       pumvisible() ? \"\\<C-p>\" : \"\\<Up>\"\n inoremap <expr> <PageDown> pumvisible() ? \"\\<PageDown>\\<C-p>\\<C-n>\":\n inoremap <expr> <PageUp>   pumvisible() ? \"\\<PageUp>\\<C-p>\\<C-n>\" : \"\\<PageUp>\"\n let g:ycm_key_list_select_completion = ['<Down>']\n let g:ycm_key_list_previous_completion = ['<Up>']\n let g:ycm_confirm_extra_conf=0 \"关闭加载.ycm_extra_conf.py提示\n let g:ycm_collect_identifiers_from_tags_files=1 \" 开启 YCM 基于标签引擎\n let g:ycm_min_num_of_chars_for_completion=2 \" 从第2个键入字符就开始罗列匹配项\n let g:ycm_cache_omnifunc=0  \" 禁止缓存匹配项,每次都重新生成匹配项\n let g:ycm_seed_identifiers_with_syntax=1    \" 语法关键字补全\n nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>\"force recomile with syntastic\n inoremap <leader><leader> <C-x><C-o>\n let g:ycm_complete_in_comments = 1 \"在注释输入中也能补全\n let g:ycm_complete_in_strings = 1 \"在字符串输入中也能补全\n let g:ycm_collect_identifiers_from_comments_and_strings = 1 \"注释和字符串中的文字也会被收入补全\n let g:clang_user_options='|| exit 0'\n let g:ycm_goto_buffer_command = 'horizontal-split' \"跳转到定义处，分屏打开\n nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR> \" 跳转到定义处\n let g:ycm_error_symbol = '>>' \"错误提示符\n let g:ycm_warning_symbol = '>*' \"警告提示符\n　　```\n## 32位系统安装\n由于我使用的是ubuntu14.04 32bit系统，所以有很多软件需要手动编译，在这里将遇到的问题悉数总结一下，有和我同样配置的小伙伴可以参考。32位系统没有合适的 *clang* 和 *vim*发行包，需要手动编译安装。\n### Cmake 安装\n使用sudo apt-get install cmake 默认安装的 [Cmake](https://cmake.org/) 版本为2.8.12.2。当使用 [Cmake](https://cmake.org/) 编译LLVM时提示 [Cmake](https://cmake.org/) 版本太低，要求至少为3.4.3以上 因此需要升级[Cmake](https://cmake.org/)。 \n下载源码：\n　　```\n $wget https://cmake.org/files/v3.4/cmake-3.4.3.tar.gz\n　　```\n编译安装：\n　　```\n $./configure\n $make\n $sudo make install\n　　```\n### Clang 编译安装\n下载LLVM源代码并放到指定目录:\n　　```\n $wget http://llvm.org/releases/3.9.0/llvm-3.9.0.src.tar.xz\n $tar xf llvm-3.9.0.src.tar.xz\n $mv llvm-3.9.0.src  llvm\n\n　　```\n下载clang的源码并放到指定目录：\n　　```\n $cd llvm/tools\n $wget http://llvm.org/releases/3.9.0/cfe-3.9.0.src.tar.xz\n $tar xf cfe-3.9.0.src.tar.xz\n $mv cfe-3.9.0.src clang\n\n　　```\n下载clang-tools-extra源码并放到指定目录：\n　　```\n $cd llvm/tools/clang/tools\n $wget http://llvm.org/releases/3.9.0/clang-tools-extra-3.9.0.src.tar.xz\n $tar xf clang-tools-extra-3.9.0.src.tar.xz\n $mv clang-tools-extra-3.9.0.src  extra\n\n　　```\n下载compiler-rt源码并放到指定目录：\n　　```\n $cd llvm/projects\n $wget http://llvm.org/releases/3.9.0/compiler-rt-3.9.0.src.tar.xz\n $tar xf compiler-rt-3.9.0.src.tar.xz\n $mv compiler-rt-3.9.0.src compiler-rt\n　　```\n配置参考 [llvm官网](http://llvm.org/docs/GettingStarted.html#local-llvm-configuration)。\n　　```\n $cmake –G “Unix Makefiles” /home/steven/software/llvm –DCMAKE_BUILD_TYPE=RELEASE –DLLVM_TARGETS_TO_BUILD=X86 –DLLVM_OPTIMIZED_TABLEGEN=ON –DCMAKE_INSTALL_PREFIX=/usr/local/llvm\n　　```\n编译参考[llvm-cmake](http://llvm.org/docs/CMake.html)：\n3.7.0以后，不允许在源码树中进行构建，我们可以在llvm源码目录同级目录中创建一个目录build，然后使用绝对路径进行构建。\n退出llvm目录，在llvm同级目录下建立build目录，进入到build目录\n\n　　```\n $cd ../..\n $mkdir build\n $cd build\n $cmake --build . //后面的 . 不能少,意思是当前目录\n　　```\n安装：\n　　```\n $sudo cmake --build . --target install\n　　```\n也可以在安装时改变安装路径：\n　　```\n $cmake –DCMAKE_INSTALL_PREFIX=/tmp/llvm –P cmake_install.cmake\n　　```\n安装后看系统是否能找到，如果不能需要手动添加到环境变量。\n### vim升级\n如果不升级 *Vim*,当调用 *YouCompleteMe* 时系统会提示错误：\n　　```\nYouCompleteMe unavailable: requires Vim 7.4.143+\n　　```\n因此需要升级 *Vim*。先卸载原有版本：\n　　```\nsudo apt-get remove vim\nsudo apt-get remove vim-runtime\nsudo apt-get remove vim -tiny\nsudo apt-get remove vim-common\nsudo apt-get remove vim-doc\nsudo apt-get remove vim-scripts\n　　```\n首先安装一些依赖项：\n　　```\nsudo apt-get install libncurses5-dev libgnome2-dev libgnomeui-dev libgtk2.0-dev libatk1.0-dev libbonoboui2-dev libcairo2-dev libx11-dev libxpm-dev libxt-dev python-dev python3-dev ruby-dev lua5.1 lua5.1-dev　\n　```\n*–enable-pythoninterp* 和 *–enable-python3interp* 是 *vim* 对 *python* 版本的支持，安装 *YouCompleteMe* 必须要有这两个配置。\n下载 [vim-8.0](http://mirror.metrocast.net/vim/unix/vim-8.0.tar.bz2):\n　　```\n $wget http://mirror.metrocast.net/vim/unix/vim-8.0.tar.bz2\n　　```\n解压后配置：\n　　```\n./configure --with-features=huge --enable-multibyte --enable-rubyinterp --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config-i386-linux-gnu  --enable-python3interp --with-python3-config-dir=/usr/lib/python3.4/config-3.4m-i386-linux-gnu --enable-perlinterp --enable-luainterp --enable-gui=gtk2 --enable-cscope --prefix=/usr\n　　```\n注意上面的 *--with-python3-config-dir* 一定要指定 *python3* 的完全路径，否则系统找不到。\n编译安装：\n　　```\n $make VIMRUNTIMEDIR=/usr/share/vim/vim80\n $sudo make install\n　　```\n安装完后一定要测试一下依赖项是否完整，特别是对 *python3* 的依赖：\n　　```\n $vim --version | grep python\n　　```\n如果输出包含则表示安装完整：\n　　```\n+cryptv          +linebreak       +python/dyn      +vreplace\n+cscope          +lispindent      +python3/dyn     +wildignore\n　　```\n再回到以上YouCompleteMe的安装即可。\n# 结语\n*Vim* 还有很多有用的插件，需要慢慢研究，目前先装这些，对于常用的补全、跳转、快速查看目录等都可以实现，基本满足需求。\n\n\n\n\n\n \n\n","slug":"vim","published":1,"updated":"2017-06-01T04:21:52.515Z","layout":"post","photos":[],"link":"","_id":"cj4hne53t002uw8inuebmk80x","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><em>linux</em> 下有很多好用的 IDE，比如常见的 <a href=\"https://eclipse.org/\" target=\"_blank\" rel=\"external\">Eclipse</a>、<a href=\"http://bluefish.openoffice.nl/index.html\" target=\"_blank\" rel=\"external\">Bluefish</a>、<a href=\"https://netbeans.org/\" target=\"_blank\" rel=\"external\">NetBeans</a> 等等，功能很多，有些功能我们不一定用得上,天天面对 <em>terminal</em> 敲命令的我们天生不喜欢鼠标。<em>linux</em> 下的文本编辑器使用最多的还是 <a href=\"http://www.vim.org/\" target=\"_blank\" rel=\"external\">Vim</a> 。可不可以将 <a href=\"http://www.vim.org/\" target=\"_blank\" rel=\"external\">Vim</a> 打造成一个好用的 IDE 来替代或者部分替代这些高大上的 IDE 呢? -程序猿天生喜欢折腾。话不多说先上图：<img src=\"/2017/05/18/vim/ycm.jpg\" alt=\"\"><br><a id=\"more\"></a></p>\n<h1 id=\"vim-插件管理\"><a href=\"#vim-插件管理\" class=\"headerlink\" title=\"vim 插件管理\"></a>vim 插件管理</h1><p>首先安装 <a href=\"https://github.com/vim/vim.git\" target=\"_blank\" rel=\"external\">Vim</a>, 确保版本在 7.4 以上。可以源码安装 <a href=\"https://github.com/vim/vim.git\" target=\"_blank\" rel=\"external\">Vim</a> 也可以自动安装：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install vim</span></div></pre></td></tr></table></figure></p>\n<p>由于发行版的不同，这种方式安装的 <a href=\"https://github.com/vim/vim.git\" target=\"_blank\" rel=\"external\">Vim</a> 版本不一定是最新的，如果版本低于 7.4 请采用源码安装。 <a href=\"https://github.com/vim/vim.git\" target=\"_blank\" rel=\"external\">Vim</a> 的插件管理一般是通过 <a href=\"https://github.com/VundleVim/Vundle.vim\" target=\"_blank\" rel=\"external\">Vundle</a> 来实现。 安装 <a href=\"https://github.com/VundleVim/Vundle.vim\" target=\"_blank\" rel=\"external\">Vundle</a>:<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/VundleVim/Vundle.<span class=\"keyword\">vim</span>.git ~/.<span class=\"keyword\">vim</span>/bundle/Vundle.<span class=\"keyword\">vim</span></div></pre></td></tr></table></figure></p>\n<p>完成后修改用户目录下的 <em>.vimrc</em> 文件，添加以下项：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">\"-----------Vundle configuration--------------------</span></div><div class=\"line\"><span class=\"keyword\">set</span> nocompatible <span class=\"comment\">\"去掉vi一致性</span></div><div class=\"line\"><span class=\"keyword\">filetype</span> off  </div><div class=\"line\"><span class=\"comment\">\"包含vundle路径</span></div><div class=\"line\"><span class=\"keyword\">set</span> rtp+=~/.<span class=\"keyword\">vim</span>/bundle/Vundle.<span class=\"keyword\">vim</span></div><div class=\"line\"><span class=\"keyword\">call</span> vundle#begin()</div><div class=\"line\">Plugin <span class=\"string\">'VundleVim/Vundle.vim'</span></div><div class=\"line\">Plugin <span class=\"string\">'xxx/xxx'</span> <span class=\"comment\">\"新插件</span></div><div class=\"line\"><span class=\"keyword\">call</span> vundle#end()</div><div class=\"line\"><span class=\"keyword\">filetype</span> plugin <span class=\"built_in\">indent</span> <span class=\"keyword\">on</span></div></pre></td></tr></table></figure></p>\n<p>当需要安装新的插件时，将插件的仓库名按格式填入到<em>.vimrc</em> 文件：<br>　　<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Plugin</span> <span class=\"string\">'xxx/xxx'</span></div></pre></td></tr></table></figure></p>\n<p>插件的安装格式为：<br>　　<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'repository'</span> <span class=\"comment\">//在Github vim-scripts 用户下的仓库,只需要写出仓库名称</span></div><div class=\"line\">Plugin <span class=\"string\">'username/repository'</span> <span class=\"comment\">//在Github其他用户下的仓库, 需要写出”用户名/仓库名”</span></div><div class=\"line\">Plugin <span class=\"string\">'git://github.com/something.git'</span> <span class=\"comment\">//不在Github上的插件，需要写出git全路径</span></div></pre></td></tr></table></figure></p>\n<p>启动 <em>Vim</em>,运行命令安装插件：</p>\n<p>　　<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">：PluginInstall</div></pre></td></tr></table></figure></p>\n<p>卸载插件时先在 <em>.vimrc</em> 中删除掉不用的插件行然后运行清除命令：<br>　　<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">：PluginClean</div></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"https://github.com/VundleVim/Vundle.vim\" target=\"_blank\" rel=\"external\">Vundle</a> 和 <a href=\"https://github.com/vim-scripts\" target=\"_blank\" rel=\"external\">vim-scripts</a></p>\n<h1 id=\"项目树\"><a href=\"#项目树\" class=\"headerlink\" title=\"项目树\"></a>项目树</h1><p><a href=\"https://github.com/scrooloose/nerdtree\" target=\"_blank\" rel=\"external\">NerdTree</a> 是一个树形目录插件，方便查看项目中的各个文件。<br>安装：<br>　　<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Plugin</span> <span class=\"string\">'scrooloose/nerdtree'</span></div></pre></td></tr></table></figure></p>\n<p>完成后在 <em>.vimrc</em> 中进行必要的配置：<br>　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">\"---------NERDTree Configruation-----------------------------------</span></div><div class=\"line\"><span class=\"keyword\">let</span> NERDTreeShowBookmarks=<span class=\"number\">1</span> <span class=\"comment\">\" 当打开 NERDTree 窗口时，自动显示 Bookmarks</span></div><div class=\"line\"><span class=\"keyword\">let</span> NERDTreeWinPos=<span class=\"string\">'left'</span> <span class=\"comment\">\"目录树在左边显示</span></div><div class=\"line\"><span class=\"keyword\">let</span> NERDTreeWinSize=<span class=\"number\">30</span> <span class=\"comment\">\"目录树的窗口宽度</span></div><div class=\"line\"><span class=\"comment\">\"开启和关闭快捷键为F2 或者 直接输入命令:NERDTree</span></div><div class=\"line\"><span class=\"keyword\">map</span> <span class=\"symbol\">&lt;F2&gt;</span> :NERDTreeToggle<span class=\"symbol\">&lt;CR&gt;</span></div></pre></td></tr></table></figure></p>\n<p>效果：<br><img src=\"/2017/05/18/vim/tree.jpg\" alt=\"\"></p>\n<h1 id=\"状态栏\"><a href=\"#状态栏\" class=\"headerlink\" title=\"状态栏\"></a>状态栏</h1><p><a href=\"https://github.com/Lokaltog/vim-powerline\" target=\"_blank\" rel=\"external\">Vim-Powerline</a> <em>vim</em> 状态栏的显示，可以显示文件名、行列数、编码方式等。<br>安装：<br>　　<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Plugin</span> <span class=\"string\">'Lokaltog/vim-powerline'</span></div></pre></td></tr></table></figure></p>\n<p>现在新的仓库已迁移到 <a href=\"https://github.com/powerline/powerline\" target=\"_blank\" rel=\"external\">powerline</a>。<br>效果：<br><img src=\"/2017/05/18/vim/powerline.jpg\" alt=\"\"></p>\n<h1 id=\"括号自动补全\"><a href=\"#括号自动补全\" class=\"headerlink\" title=\"括号自动补全\"></a>括号自动补全</h1><p><a href=\"https://github.com/jiangmiao/auto-pairs\" target=\"_blank\" rel=\"external\">auto-pair</a> 插件可以自动补全代码中的括号。安装：<br>　　<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Plugin</span> <span class=\"string\">'jiangmiao/auto-pairs'</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"代码自动补全\"><a href=\"#代码自动补全\" class=\"headerlink\" title=\"代码自动补全\"></a>代码自动补全</h1><p>代码自动补全是各种IDE的必备功能，这里强烈推荐<a href=\"https://github.com/Valloric/YouCompleteMe\" target=\"_blank\" rel=\"external\">YouCompleteMe</a>。它基于 <a href=\"https://zh.wikipedia.org/wiki/Clang\" target=\"_blank\" rel=\"external\">clang</a> 能够为 <em>C/C++</em> 代码提供代码提示，也支持 <em>python C#</em>。<a href=\"https://github.com/Valloric/YouCompleteMe\" target=\"_blank\" rel=\"external\">YouCompleteMe</a> 的安装正如传说中一样，非常麻烦，但使用起来非常爽。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>源码下载：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> clone --recursive https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/Valloric/</span>YouCompleteMe.git ~<span class=\"regexp\">/.vim/</span>bundle<span class=\"regexp\">/YouCompleteMe</span></div></pre></td></tr></table></figure></p>\n<p>安装 <a href=\"https://clang.llvm.org/get_started.html\" target=\"_blank\" rel=\"external\">clang</a>：<br>　　<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install clang</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/Valloric/YouCompleteMe\" target=\"_blank\" rel=\"external\">YouCompleteMe</a> 要求 <a href=\"https://clang.llvm.org/get_started.html\" target=\"_blank\" rel=\"external\">clang</a> 最低版本为 3.9，如果不是可以在 <a href=\"http://releases.llvm.org/download.html\" target=\"_blank\" rel=\"external\">这里</a> 下载。如果 <em>Ubuntu</em> 为32bits则需要下载源码手动编译。<br>安装 <em>python-dev</em>:<br>　　<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-<span class=\"built_in\">get</span> install python-<span class=\"built_in\">dev</span> python3-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure></p>\n<p>安装 <em>Cmake</em>:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install cmake</span></div></pre></td></tr></table></figure></p>\n<p>源码编译：<br>　　<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$<span class=\"keyword\">cd</span> ~<span class=\"string\">/.vim/bundle/YouCompleteMe</span></div><div class=\"line\">$<span class=\"string\">./install.py</span> <span class=\"params\">--clang-completer</span> <span class=\"params\">--system-libclang</span></div></pre></td></tr></table></figure></p>\n<p>–system-libclang是指使用系统的<em>libclang</em>。新版 <em>YouCompleteMe</em> 编译时不再需要 <em>make ycm_support_libs</em>。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>拷贝系统配置到用户目录下：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cp</span> ~<span class=\"regexp\">/.vim/</span>bundle<span class=\"regexp\">/YouCompleteMe/</span>third_party<span class=\"regexp\">/ycmd/</span>cpp<span class=\"regexp\">/ycm/</span>.ycm_extra_conf.py  ~<span class=\"regexp\">/</span></div></pre></td></tr></table></figure></p>\n<p><em>.vimrc</em>中的配置：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">\"----------YouCompleteMe configuration---</span></div><div class=\"line\"><span class=\"keyword\">set</span> runtimepath+=~/.<span class=\"keyword\">vim</span>/bundle/YouCompleteMe <span class=\"comment\">\"使用插件</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_global_ycm_extra_conf</span> = <span class=\"string\">'~/.ycm_extra_conf.py'</span> <span class=\"comment\">\"指定全局配置文件路径</span></div><div class=\"line\"><span class=\"keyword\">set</span> completeopt=longest,<span class=\"keyword\">menu</span>    <span class=\"comment\">\"让Vim的补全菜单行为与一般IDE一致</span></div><div class=\"line\"><span class=\"keyword\">autocmd</span> InsertLeave * <span class=\"keyword\">if</span> <span class=\"built_in\">pumvisible</span>() == <span class=\"number\">0</span>|<span class=\"keyword\">pclose</span>|<span class=\"keyword\">endif</span> <span class=\"comment\">\"离开插入模式后自动关闭预览窗口</span></div><div class=\"line\"><span class=\"comment\">\"回车即选中当前项</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;CR&gt;</span>       <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;C-y&gt;\"</span> : <span class=\"string\">\"\\&lt;CR&gt;\"</span></div><div class=\"line\"><span class=\"comment\">\"上下左右键的行为</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;Down&gt;</span>     <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;C-n&gt;\"</span> : <span class=\"string\">\"\\&lt;Down&gt;\"</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;Up&gt;</span>       <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;C-p&gt;\"</span> : <span class=\"string\">\"\\&lt;Up&gt;\"</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;PageDown&gt;</span> <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;PageDown&gt;\\&lt;C-p&gt;\\&lt;C-n&gt;\"</span>:</div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;PageUp&gt;</span>   <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;PageUp&gt;\\&lt;C-p&gt;\\&lt;C-n&gt;\"</span> : <span class=\"string\">\"\\&lt;PageUp&gt;\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_key_list_select_completion</span> = [<span class=\"string\">'&lt;Down&gt;'</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_key_list_previous_completion</span> = [<span class=\"string\">'&lt;Up&gt;'</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_confirm_extra_conf</span>=<span class=\"number\">0</span> <span class=\"comment\">\"关闭加载.ycm_extra_conf.py提示</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_collect_identifiers_from_tags_files</span>=<span class=\"number\">1</span> <span class=\"comment\">\" 开启 YCM 基于标签引擎</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_min_num_of_chars_for_completion</span>=<span class=\"number\">2</span> <span class=\"comment\">\" 从第2个键入字符就开始罗列匹配项</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_cache_omnifunc</span>=<span class=\"number\">0</span>  <span class=\"comment\">\" 禁止缓存匹配项,每次都重新生成匹配项</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_seed_identifiers_with_syntax</span>=<span class=\"number\">1</span>    <span class=\"comment\">\" 语法关键字补全</span></div><div class=\"line\"><span class=\"keyword\">nnoremap</span> <span class=\"symbol\">&lt;F5&gt;</span> :YcmForceCompileAndDiagnostics<span class=\"symbol\">&lt;CR&gt;</span><span class=\"comment\">\"force recomile with syntastic</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;leader&gt;</span><span class=\"symbol\">&lt;leader&gt;</span> <span class=\"symbol\">&lt;C-x&gt;</span><span class=\"symbol\">&lt;C-o&gt;</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_complete_in_comments</span> = <span class=\"number\">1</span> <span class=\"comment\">\"在注释输入中也能补全</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_complete_in_strings</span> = <span class=\"number\">1</span> <span class=\"comment\">\"在字符串输入中也能补全</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_collect_identifiers_from_comments_and_strings</span> = <span class=\"number\">1</span> <span class=\"comment\">\"注释和字符串中的文字也会被收入补全</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:clang_user_options</span>=<span class=\"string\">'|| exit 0'</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_goto_buffer_command</span> = <span class=\"string\">'horizontal-split'</span> <span class=\"comment\">\"跳转到定义处，分屏打开</span></div><div class=\"line\"><span class=\"keyword\">nnoremap</span> <span class=\"symbol\">&lt;leader&gt;</span>jd :YcmCompleter GoToDefinitionElseDeclaration<span class=\"symbol\">&lt;CR&gt;</span> <span class=\"comment\">\" 跳转到定义处</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_error_symbol</span> = <span class=\"string\">'&gt;&gt;'</span> <span class=\"comment\">\"错误提示符</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_warning_symbol</span> = <span class=\"string\">'&gt;*'</span> <span class=\"comment\">\"警告提示符</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"32位系统安装\"><a href=\"#32位系统安装\" class=\"headerlink\" title=\"32位系统安装\"></a>32位系统安装</h2><p>由于我使用的是ubuntu14.04 32bit系统，所以有很多软件需要手动编译，在这里将遇到的问题悉数总结一下，有和我同样配置的小伙伴可以参考。32位系统没有合适的 <em>clang</em> 和 <em>vim</em>发行包，需要手动编译安装。</p>\n<h3 id=\"Cmake-安装\"><a href=\"#Cmake-安装\" class=\"headerlink\" title=\"Cmake 安装\"></a>Cmake 安装</h3><p>使用sudo apt-get install cmake 默认安装的 <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"external\">Cmake</a> 版本为2.8.12.2。当使用 <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"external\">Cmake</a> 编译LLVM时提示 <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"external\">Cmake</a> 版本太低，要求至少为3.4.3以上 因此需要升级<a href=\"https://cmake.org/\" target=\"_blank\" rel=\"external\">Cmake</a>。<br>下载源码：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> https:<span class=\"regexp\">//</span>cmake.org<span class=\"regexp\">/files/</span>v3.<span class=\"number\">4</span><span class=\"regexp\">/cmake-3.4.3.tar.gz</span></div></pre></td></tr></table></figure></p>\n<p>编译安装：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">./configure</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo make install</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"Clang-编译安装\"><a href=\"#Clang-编译安装\" class=\"headerlink\" title=\"Clang 编译安装\"></a>Clang 编译安装</h3><p>下载LLVM源代码并放到指定目录:<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"comment\">//llvm.org/releases/3.9.0/llvm-3.9.0.src.tar.xz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> xf llvm-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\"><span class=\"variable\">$mv</span> llvm-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span>  llvm</div></pre></td></tr></table></figure></p>\n<p>下载clang的源码并放到指定目录：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> llvm/tools</div><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"comment\">//llvm.org/releases/3.9.0/cfe-3.9.0.src.tar.xz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> xf cfe-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\"><span class=\"variable\">$mv</span> cfe-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span> clang</div></pre></td></tr></table></figure></p>\n<p>下载clang-tools-extra源码并放到指定目录：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> llvm/tools/clang/tools</div><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"comment\">//llvm.org/releases/3.9.0/clang-tools-extra-3.9.0.src.tar.xz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> xf clang-tools-extra-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\"><span class=\"variable\">$mv</span> clang-tools-extra-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span>  extra</div></pre></td></tr></table></figure></p>\n<p>下载compiler-rt源码并放到指定目录：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> llvm/projects</div><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"comment\">//llvm.org/releases/3.9.0/compiler-rt-3.9.0.src.tar.xz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> xf compiler-rt-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\"><span class=\"variable\">$mv</span> compiler-rt-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span> compiler-rt</div></pre></td></tr></table></figure></p>\n<p>配置参考 <a href=\"http://llvm.org/docs/GettingStarted.html#local-llvm-configuration\" target=\"_blank\" rel=\"external\">llvm官网</a>。<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cmake</span> –G “Unix Makefiles” <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/software/</span>llvm –DCMAKE_BUILD_TYPE=RELEASE –DLLVM_TARGETS_TO_BUILD=X86 –DLLVM_OPTIMIZED_TABLEGEN=ON –DCMAKE_INSTALL_PREFIX=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/llvm</span></div></pre></td></tr></table></figure></p>\n<p>编译参考<a href=\"http://llvm.org/docs/CMake.html\" target=\"_blank\" rel=\"external\">llvm-cmake</a>：<br>3.7.0以后，不允许在源码树中进行构建，我们可以在llvm源码目录同级目录中创建一个目录build，然后使用绝对路径进行构建。<br>退出llvm目录，在llvm同级目录下建立build目录，进入到build目录</p>\n<p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ../..</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">mkdir build</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> build</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake --build . //后面的 . 不能少,意思是当前目录</span></div></pre></td></tr></table></figure></p>\n<p>安装：<br>　　<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">$sudo</span> <span class=\"comment\">cmake</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">build</span> <span class=\"string\">.</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">target</span> <span class=\"comment\">install</span></div></pre></td></tr></table></figure></p>\n<p>也可以在安装时改变安装路径：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cmake</span> –DCMAKE_INSTALL_PREFIX=<span class=\"regexp\">/tmp/</span>llvm –P cmake_install.cmake</div></pre></td></tr></table></figure></p>\n<p>安装后看系统是否能找到，如果不能需要手动添加到环境变量。</p>\n<h3 id=\"vim升级\"><a href=\"#vim升级\" class=\"headerlink\" title=\"vim升级\"></a>vim升级</h3><p>如果不升级 <em>Vim</em>,当调用 <em>YouCompleteMe</em> 时系统会提示错误：<br>　　<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">YouCompleteMe</span> <span class=\"selector-tag\">unavailable</span>: <span class=\"selector-tag\">requires</span> <span class=\"selector-tag\">Vim</span> 7<span class=\"selector-class\">.4</span><span class=\"selector-class\">.143</span>+</div></pre></td></tr></table></figure></p>\n<p>因此需要升级 <em>Vim</em>。先卸载原有版本：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span>-<span class=\"keyword\">runtime</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span> -tiny</div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span>-common</div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span>-doc</div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span>-scripts</div></pre></td></tr></table></figure></p>\n<p>首先安装一些依赖项：<br>　　<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install libncurses5-<span class=\"built_in\">dev</span> libgnome2-<span class=\"built_in\">dev</span> libgnomeui-<span class=\"built_in\">dev</span> libgtk2<span class=\"number\">.0</span>-<span class=\"built_in\">dev</span> libatk1<span class=\"number\">.0</span>-<span class=\"built_in\">dev</span> libbonoboui2-<span class=\"built_in\">dev</span> libcairo2-<span class=\"built_in\">dev</span> libx11-<span class=\"built_in\">dev</span> libxpm-<span class=\"built_in\">dev</span> libxt-<span class=\"built_in\">dev</span> python-<span class=\"built_in\">dev</span> python3-<span class=\"built_in\">dev</span> ruby-<span class=\"built_in\">dev</span> lua5<span class=\"number\">.1</span> lua5<span class=\"number\">.1</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure></p>\n<p><em>–enable-pythoninterp</em> 和 <em>–enable-python3interp</em> 是 <em>vim</em> 对 <em>python</em> 版本的支持，安装 <em>YouCompleteMe</em> 必须要有这两个配置。<br>下载 <a href=\"http://mirror.metrocast.net/vim/unix/vim-8.0.tar.bz2\" target=\"_blank\" rel=\"external\">vim-8.0</a>:<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"regexp\">//mi</span>rror.metrocast.net<span class=\"regexp\">/vim/u</span>nix<span class=\"regexp\">/vim-8.0.tar.bz2</span></div></pre></td></tr></table></figure></p>\n<p>解压后配置：<br>　　<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">./configure</span> <span class=\"params\">--with-features=huge</span> <span class=\"params\">--enable-multibyte</span> <span class=\"params\">--enable-rubyinterp</span> <span class=\"params\">--enable-pythoninterp</span> <span class=\"params\">--with-python-config-dir=/usr/lib/python2</span>.7/config-i386-linux-gnu  <span class=\"params\">--enable-python3interp</span> <span class=\"params\">--with-python3-config-dir=/usr/lib/python3</span>.4/config-3.4m-i386-linux-gnu <span class=\"params\">--enable-perlinterp</span> <span class=\"params\">--enable-luainterp</span> <span class=\"params\">--enable-gui=gtk2</span> <span class=\"params\">--enable-cscope</span> <span class=\"params\">--prefix=/usr</span></div></pre></td></tr></table></figure></p>\n<p>注意上面的 <em>–with-python3-config-dir</em> 一定要指定 <em>python3</em> 的完全路径，否则系统找不到。<br>编译安装：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$make</span> VIMRUNTIMEDIR=<span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/vim/</span>vim80</div><div class=\"line\"><span class=\"variable\">$sudo</span> make install</div></pre></td></tr></table></figure></p>\n<p>安装完后一定要测试一下依赖项是否完整，特别是对 <em>python3</em> 的依赖：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$<span class=\"keyword\">vim</span> --<span class=\"keyword\">version</span> | <span class=\"keyword\">grep</span> <span class=\"keyword\">python</span></div></pre></td></tr></table></figure></p>\n<p>如果输出包含则表示安装完整：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">+cryptv          +linebreak       +<span class=\"keyword\">python</span>/dyn      +vreplace</div><div class=\"line\">+<span class=\"keyword\">cscope</span>          +<span class=\"built_in\">lispindent</span>      +<span class=\"keyword\">python3</span>/dyn     +wildignore</div></pre></td></tr></table></figure></p>\n<p>再回到以上YouCompleteMe的安装即可。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p><em>Vim</em> 还有很多有用的插件，需要慢慢研究，目前先装这些，对于常用的补全、跳转、快速查看目录等都可以实现，基本满足需求。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><em>linux</em> 下有很多好用的 IDE，比如常见的 <a href=\"https://eclipse.org/\" target=\"_blank\" rel=\"external\">Eclipse</a>、<a href=\"http://bluefish.openoffice.nl/index.html\" target=\"_blank\" rel=\"external\">Bluefish</a>、<a href=\"https://netbeans.org/\" target=\"_blank\" rel=\"external\">NetBeans</a> 等等，功能很多，有些功能我们不一定用得上,天天面对 <em>terminal</em> 敲命令的我们天生不喜欢鼠标。<em>linux</em> 下的文本编辑器使用最多的还是 <a href=\"http://www.vim.org/\" target=\"_blank\" rel=\"external\">Vim</a> 。可不可以将 <a href=\"http://www.vim.org/\" target=\"_blank\" rel=\"external\">Vim</a> 打造成一个好用的 IDE 来替代或者部分替代这些高大上的 IDE 呢? -程序猿天生喜欢折腾。话不多说先上图：<img src=\"/2017/05/18/vim/ycm.jpg\" alt=\"\"><br></p>","more":"<p></p>\n<h1 id=\"vim-插件管理\"><a href=\"#vim-插件管理\" class=\"headerlink\" title=\"vim 插件管理\"></a>vim 插件管理</h1><p>首先安装 <a href=\"https://github.com/vim/vim.git\" target=\"_blank\" rel=\"external\">Vim</a>, 确保版本在 7.4 以上。可以源码安装 <a href=\"https://github.com/vim/vim.git\" target=\"_blank\" rel=\"external\">Vim</a> 也可以自动安装：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install vim</span></div></pre></td></tr></table></figure></p>\n<p>由于发行版的不同，这种方式安装的 <a href=\"https://github.com/vim/vim.git\" target=\"_blank\" rel=\"external\">Vim</a> 版本不一定是最新的，如果版本低于 7.4 请采用源码安装。 <a href=\"https://github.com/vim/vim.git\" target=\"_blank\" rel=\"external\">Vim</a> 的插件管理一般是通过 <a href=\"https://github.com/VundleVim/Vundle.vim\" target=\"_blank\" rel=\"external\">Vundle</a> 来实现。 安装 <a href=\"https://github.com/VundleVim/Vundle.vim\" target=\"_blank\" rel=\"external\">Vundle</a>:<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/VundleVim/Vundle.<span class=\"keyword\">vim</span>.git ~/.<span class=\"keyword\">vim</span>/bundle/Vundle.<span class=\"keyword\">vim</span></div></pre></td></tr></table></figure></p>\n<p>完成后修改用户目录下的 <em>.vimrc</em> 文件，添加以下项：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">\"-----------Vundle configuration--------------------</span></div><div class=\"line\"><span class=\"keyword\">set</span> nocompatible <span class=\"comment\">\"去掉vi一致性</span></div><div class=\"line\"><span class=\"keyword\">filetype</span> off  </div><div class=\"line\"><span class=\"comment\">\"包含vundle路径</span></div><div class=\"line\"><span class=\"keyword\">set</span> rtp+=~/.<span class=\"keyword\">vim</span>/bundle/Vundle.<span class=\"keyword\">vim</span></div><div class=\"line\"><span class=\"keyword\">call</span> vundle#begin()</div><div class=\"line\">Plugin <span class=\"string\">'VundleVim/Vundle.vim'</span></div><div class=\"line\">Plugin <span class=\"string\">'xxx/xxx'</span> <span class=\"comment\">\"新插件</span></div><div class=\"line\"><span class=\"keyword\">call</span> vundle#end()</div><div class=\"line\"><span class=\"keyword\">filetype</span> plugin <span class=\"built_in\">indent</span> <span class=\"keyword\">on</span></div></pre></td></tr></table></figure></p>\n<p>当需要安装新的插件时，将插件的仓库名按格式填入到<em>.vimrc</em> 文件：<br>　　<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Plugin</span> <span class=\"string\">'xxx/xxx'</span></div></pre></td></tr></table></figure></p>\n<p>插件的安装格式为：<br>　　<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'repository'</span> <span class=\"comment\">//在Github vim-scripts 用户下的仓库,只需要写出仓库名称</span></div><div class=\"line\">Plugin <span class=\"string\">'username/repository'</span> <span class=\"comment\">//在Github其他用户下的仓库, 需要写出”用户名/仓库名”</span></div><div class=\"line\">Plugin <span class=\"string\">'git://github.com/something.git'</span> <span class=\"comment\">//不在Github上的插件，需要写出git全路径</span></div></pre></td></tr></table></figure></p>\n<p>启动 <em>Vim</em>,运行命令安装插件：</p>\n<p>　　<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">：PluginInstall</div></pre></td></tr></table></figure></p>\n<p>卸载插件时先在 <em>.vimrc</em> 中删除掉不用的插件行然后运行清除命令：<br>　　<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">：PluginClean</div></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"https://github.com/VundleVim/Vundle.vim\" target=\"_blank\" rel=\"external\">Vundle</a> 和 <a href=\"https://github.com/vim-scripts\" target=\"_blank\" rel=\"external\">vim-scripts</a></p>\n<h1 id=\"项目树\"><a href=\"#项目树\" class=\"headerlink\" title=\"项目树\"></a>项目树</h1><p><a href=\"https://github.com/scrooloose/nerdtree\" target=\"_blank\" rel=\"external\">NerdTree</a> 是一个树形目录插件，方便查看项目中的各个文件。<br>安装：<br>　　<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Plugin</span> <span class=\"string\">'scrooloose/nerdtree'</span></div></pre></td></tr></table></figure></p>\n<p>完成后在 <em>.vimrc</em> 中进行必要的配置：<br>　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">\"---------NERDTree Configruation-----------------------------------</span></div><div class=\"line\"><span class=\"keyword\">let</span> NERDTreeShowBookmarks=<span class=\"number\">1</span> <span class=\"comment\">\" 当打开 NERDTree 窗口时，自动显示 Bookmarks</span></div><div class=\"line\"><span class=\"keyword\">let</span> NERDTreeWinPos=<span class=\"string\">'left'</span> <span class=\"comment\">\"目录树在左边显示</span></div><div class=\"line\"><span class=\"keyword\">let</span> NERDTreeWinSize=<span class=\"number\">30</span> <span class=\"comment\">\"目录树的窗口宽度</span></div><div class=\"line\"><span class=\"comment\">\"开启和关闭快捷键为F2 或者 直接输入命令:NERDTree</span></div><div class=\"line\"><span class=\"keyword\">map</span> <span class=\"symbol\">&lt;F2&gt;</span> :NERDTreeToggle<span class=\"symbol\">&lt;CR&gt;</span></div></pre></td></tr></table></figure></p>\n<p>效果：<br><img src=\"/2017/05/18/vim/tree.jpg\" alt=\"\"></p>\n<h1 id=\"状态栏\"><a href=\"#状态栏\" class=\"headerlink\" title=\"状态栏\"></a>状态栏</h1><p><a href=\"https://github.com/Lokaltog/vim-powerline\" target=\"_blank\" rel=\"external\">Vim-Powerline</a> <em>vim</em> 状态栏的显示，可以显示文件名、行列数、编码方式等。<br>安装：<br>　　<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Plugin</span> <span class=\"string\">'Lokaltog/vim-powerline'</span></div></pre></td></tr></table></figure></p>\n<p>现在新的仓库已迁移到 <a href=\"https://github.com/powerline/powerline\" target=\"_blank\" rel=\"external\">powerline</a>。<br>效果：<br><img src=\"/2017/05/18/vim/powerline.jpg\" alt=\"\"></p>\n<h1 id=\"括号自动补全\"><a href=\"#括号自动补全\" class=\"headerlink\" title=\"括号自动补全\"></a>括号自动补全</h1><p><a href=\"https://github.com/jiangmiao/auto-pairs\" target=\"_blank\" rel=\"external\">auto-pair</a> 插件可以自动补全代码中的括号。安装：<br>　　<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Plugin</span> <span class=\"string\">'jiangmiao/auto-pairs'</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"代码自动补全\"><a href=\"#代码自动补全\" class=\"headerlink\" title=\"代码自动补全\"></a>代码自动补全</h1><p>代码自动补全是各种IDE的必备功能，这里强烈推荐<a href=\"https://github.com/Valloric/YouCompleteMe\" target=\"_blank\" rel=\"external\">YouCompleteMe</a>。它基于 <a href=\"https://zh.wikipedia.org/wiki/Clang\" target=\"_blank\" rel=\"external\">clang</a> 能够为 <em>C/C++</em> 代码提供代码提示，也支持 <em>python C#</em>。<a href=\"https://github.com/Valloric/YouCompleteMe\" target=\"_blank\" rel=\"external\">YouCompleteMe</a> 的安装正如传说中一样，非常麻烦，但使用起来非常爽。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>源码下载：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> clone --recursive https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/Valloric/</span>YouCompleteMe.git ~<span class=\"regexp\">/.vim/</span>bundle<span class=\"regexp\">/YouCompleteMe</span></div></pre></td></tr></table></figure></p>\n<p>安装 <a href=\"https://clang.llvm.org/get_started.html\" target=\"_blank\" rel=\"external\">clang</a>：<br>　　<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install clang</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/Valloric/YouCompleteMe\" target=\"_blank\" rel=\"external\">YouCompleteMe</a> 要求 <a href=\"https://clang.llvm.org/get_started.html\" target=\"_blank\" rel=\"external\">clang</a> 最低版本为 3.9，如果不是可以在 <a href=\"http://releases.llvm.org/download.html\" target=\"_blank\" rel=\"external\">这里</a> 下载。如果 <em>Ubuntu</em> 为32bits则需要下载源码手动编译。<br>安装 <em>python-dev</em>:<br>　　<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-<span class=\"built_in\">get</span> install python-<span class=\"built_in\">dev</span> python3-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure></p>\n<p>安装 <em>Cmake</em>:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install cmake</span></div></pre></td></tr></table></figure></p>\n<p>源码编译：<br>　　<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$<span class=\"keyword\">cd</span> ~<span class=\"string\">/.vim/bundle/YouCompleteMe</span></div><div class=\"line\">$<span class=\"string\">./install.py</span> <span class=\"params\">--clang-completer</span> <span class=\"params\">--system-libclang</span></div></pre></td></tr></table></figure></p>\n<p>–system-libclang是指使用系统的<em>libclang</em>。新版 <em>YouCompleteMe</em> 编译时不再需要 <em>make ycm_support_libs</em>。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>拷贝系统配置到用户目录下：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cp</span> ~<span class=\"regexp\">/.vim/</span>bundle<span class=\"regexp\">/YouCompleteMe/</span>third_party<span class=\"regexp\">/ycmd/</span>cpp<span class=\"regexp\">/ycm/</span>.ycm_extra_conf.py  ~<span class=\"regexp\">/</span></div></pre></td></tr></table></figure></p>\n<p><em>.vimrc</em>中的配置：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">\"----------YouCompleteMe configuration---</span></div><div class=\"line\"><span class=\"keyword\">set</span> runtimepath+=~/.<span class=\"keyword\">vim</span>/bundle/YouCompleteMe <span class=\"comment\">\"使用插件</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_global_ycm_extra_conf</span> = <span class=\"string\">'~/.ycm_extra_conf.py'</span> <span class=\"comment\">\"指定全局配置文件路径</span></div><div class=\"line\"><span class=\"keyword\">set</span> completeopt=longest,<span class=\"keyword\">menu</span>    <span class=\"comment\">\"让Vim的补全菜单行为与一般IDE一致</span></div><div class=\"line\"><span class=\"keyword\">autocmd</span> InsertLeave * <span class=\"keyword\">if</span> <span class=\"built_in\">pumvisible</span>() == <span class=\"number\">0</span>|<span class=\"keyword\">pclose</span>|<span class=\"keyword\">endif</span> <span class=\"comment\">\"离开插入模式后自动关闭预览窗口</span></div><div class=\"line\"><span class=\"comment\">\"回车即选中当前项</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;CR&gt;</span>       <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;C-y&gt;\"</span> : <span class=\"string\">\"\\&lt;CR&gt;\"</span></div><div class=\"line\"><span class=\"comment\">\"上下左右键的行为</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;Down&gt;</span>     <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;C-n&gt;\"</span> : <span class=\"string\">\"\\&lt;Down&gt;\"</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;Up&gt;</span>       <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;C-p&gt;\"</span> : <span class=\"string\">\"\\&lt;Up&gt;\"</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;PageDown&gt;</span> <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;PageDown&gt;\\&lt;C-p&gt;\\&lt;C-n&gt;\"</span>:</div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;PageUp&gt;</span>   <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;PageUp&gt;\\&lt;C-p&gt;\\&lt;C-n&gt;\"</span> : <span class=\"string\">\"\\&lt;PageUp&gt;\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_key_list_select_completion</span> = [<span class=\"string\">'&lt;Down&gt;'</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_key_list_previous_completion</span> = [<span class=\"string\">'&lt;Up&gt;'</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_confirm_extra_conf</span>=<span class=\"number\">0</span> <span class=\"comment\">\"关闭加载.ycm_extra_conf.py提示</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_collect_identifiers_from_tags_files</span>=<span class=\"number\">1</span> <span class=\"comment\">\" 开启 YCM 基于标签引擎</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_min_num_of_chars_for_completion</span>=<span class=\"number\">2</span> <span class=\"comment\">\" 从第2个键入字符就开始罗列匹配项</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_cache_omnifunc</span>=<span class=\"number\">0</span>  <span class=\"comment\">\" 禁止缓存匹配项,每次都重新生成匹配项</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_seed_identifiers_with_syntax</span>=<span class=\"number\">1</span>    <span class=\"comment\">\" 语法关键字补全</span></div><div class=\"line\"><span class=\"keyword\">nnoremap</span> <span class=\"symbol\">&lt;F5&gt;</span> :YcmForceCompileAndDiagnostics<span class=\"symbol\">&lt;CR&gt;</span><span class=\"comment\">\"force recomile with syntastic</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;leader&gt;</span><span class=\"symbol\">&lt;leader&gt;</span> <span class=\"symbol\">&lt;C-x&gt;</span><span class=\"symbol\">&lt;C-o&gt;</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_complete_in_comments</span> = <span class=\"number\">1</span> <span class=\"comment\">\"在注释输入中也能补全</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_complete_in_strings</span> = <span class=\"number\">1</span> <span class=\"comment\">\"在字符串输入中也能补全</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_collect_identifiers_from_comments_and_strings</span> = <span class=\"number\">1</span> <span class=\"comment\">\"注释和字符串中的文字也会被收入补全</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:clang_user_options</span>=<span class=\"string\">'|| exit 0'</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_goto_buffer_command</span> = <span class=\"string\">'horizontal-split'</span> <span class=\"comment\">\"跳转到定义处，分屏打开</span></div><div class=\"line\"><span class=\"keyword\">nnoremap</span> <span class=\"symbol\">&lt;leader&gt;</span>jd :YcmCompleter GoToDefinitionElseDeclaration<span class=\"symbol\">&lt;CR&gt;</span> <span class=\"comment\">\" 跳转到定义处</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_error_symbol</span> = <span class=\"string\">'&gt;&gt;'</span> <span class=\"comment\">\"错误提示符</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_warning_symbol</span> = <span class=\"string\">'&gt;*'</span> <span class=\"comment\">\"警告提示符</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"32位系统安装\"><a href=\"#32位系统安装\" class=\"headerlink\" title=\"32位系统安装\"></a>32位系统安装</h2><p>由于我使用的是ubuntu14.04 32bit系统，所以有很多软件需要手动编译，在这里将遇到的问题悉数总结一下，有和我同样配置的小伙伴可以参考。32位系统没有合适的 <em>clang</em> 和 <em>vim</em>发行包，需要手动编译安装。</p>\n<h3 id=\"Cmake-安装\"><a href=\"#Cmake-安装\" class=\"headerlink\" title=\"Cmake 安装\"></a>Cmake 安装</h3><p>使用sudo apt-get install cmake 默认安装的 <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"external\">Cmake</a> 版本为2.8.12.2。当使用 <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"external\">Cmake</a> 编译LLVM时提示 <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"external\">Cmake</a> 版本太低，要求至少为3.4.3以上 因此需要升级<a href=\"https://cmake.org/\" target=\"_blank\" rel=\"external\">Cmake</a>。<br>下载源码：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> https:<span class=\"regexp\">//</span>cmake.org<span class=\"regexp\">/files/</span>v3.<span class=\"number\">4</span><span class=\"regexp\">/cmake-3.4.3.tar.gz</span></div></pre></td></tr></table></figure></p>\n<p>编译安装：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">./configure</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo make install</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"Clang-编译安装\"><a href=\"#Clang-编译安装\" class=\"headerlink\" title=\"Clang 编译安装\"></a>Clang 编译安装</h3><p>下载LLVM源代码并放到指定目录:<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"comment\">//llvm.org/releases/3.9.0/llvm-3.9.0.src.tar.xz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> xf llvm-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\"><span class=\"variable\">$mv</span> llvm-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span>  llvm</div></pre></td></tr></table></figure></p>\n<p>下载clang的源码并放到指定目录：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> llvm/tools</div><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"comment\">//llvm.org/releases/3.9.0/cfe-3.9.0.src.tar.xz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> xf cfe-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\"><span class=\"variable\">$mv</span> cfe-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span> clang</div></pre></td></tr></table></figure></p>\n<p>下载clang-tools-extra源码并放到指定目录：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> llvm/tools/clang/tools</div><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"comment\">//llvm.org/releases/3.9.0/clang-tools-extra-3.9.0.src.tar.xz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> xf clang-tools-extra-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\"><span class=\"variable\">$mv</span> clang-tools-extra-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span>  extra</div></pre></td></tr></table></figure></p>\n<p>下载compiler-rt源码并放到指定目录：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> llvm/projects</div><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"comment\">//llvm.org/releases/3.9.0/compiler-rt-3.9.0.src.tar.xz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> xf compiler-rt-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\"><span class=\"variable\">$mv</span> compiler-rt-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span> compiler-rt</div></pre></td></tr></table></figure></p>\n<p>配置参考 <a href=\"http://llvm.org/docs/GettingStarted.html#local-llvm-configuration\" target=\"_blank\" rel=\"external\">llvm官网</a>。<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cmake</span> –G “Unix Makefiles” <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/software/</span>llvm –DCMAKE_BUILD_TYPE=RELEASE –DLLVM_TARGETS_TO_BUILD=X86 –DLLVM_OPTIMIZED_TABLEGEN=ON –DCMAKE_INSTALL_PREFIX=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/llvm</span></div></pre></td></tr></table></figure></p>\n<p>编译参考<a href=\"http://llvm.org/docs/CMake.html\" target=\"_blank\" rel=\"external\">llvm-cmake</a>：<br>3.7.0以后，不允许在源码树中进行构建，我们可以在llvm源码目录同级目录中创建一个目录build，然后使用绝对路径进行构建。<br>退出llvm目录，在llvm同级目录下建立build目录，进入到build目录</p>\n<p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ../..</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">mkdir build</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> build</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake --build . //后面的 . 不能少,意思是当前目录</span></div></pre></td></tr></table></figure></p>\n<p>安装：<br>　　<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">$sudo</span> <span class=\"comment\">cmake</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">build</span> <span class=\"string\">.</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">target</span> <span class=\"comment\">install</span></div></pre></td></tr></table></figure></p>\n<p>也可以在安装时改变安装路径：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cmake</span> –DCMAKE_INSTALL_PREFIX=<span class=\"regexp\">/tmp/</span>llvm –P cmake_install.cmake</div></pre></td></tr></table></figure></p>\n<p>安装后看系统是否能找到，如果不能需要手动添加到环境变量。</p>\n<h3 id=\"vim升级\"><a href=\"#vim升级\" class=\"headerlink\" title=\"vim升级\"></a>vim升级</h3><p>如果不升级 <em>Vim</em>,当调用 <em>YouCompleteMe</em> 时系统会提示错误：<br>　　<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">YouCompleteMe</span> <span class=\"selector-tag\">unavailable</span>: <span class=\"selector-tag\">requires</span> <span class=\"selector-tag\">Vim</span> 7<span class=\"selector-class\">.4</span><span class=\"selector-class\">.143</span>+</div></pre></td></tr></table></figure></p>\n<p>因此需要升级 <em>Vim</em>。先卸载原有版本：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span>-<span class=\"keyword\">runtime</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span> -tiny</div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span>-common</div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span>-doc</div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span>-scripts</div></pre></td></tr></table></figure></p>\n<p>首先安装一些依赖项：<br>　　<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install libncurses5-<span class=\"built_in\">dev</span> libgnome2-<span class=\"built_in\">dev</span> libgnomeui-<span class=\"built_in\">dev</span> libgtk2<span class=\"number\">.0</span>-<span class=\"built_in\">dev</span> libatk1<span class=\"number\">.0</span>-<span class=\"built_in\">dev</span> libbonoboui2-<span class=\"built_in\">dev</span> libcairo2-<span class=\"built_in\">dev</span> libx11-<span class=\"built_in\">dev</span> libxpm-<span class=\"built_in\">dev</span> libxt-<span class=\"built_in\">dev</span> python-<span class=\"built_in\">dev</span> python3-<span class=\"built_in\">dev</span> ruby-<span class=\"built_in\">dev</span> lua5<span class=\"number\">.1</span> lua5<span class=\"number\">.1</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure></p>\n<p><em>–enable-pythoninterp</em> 和 <em>–enable-python3interp</em> 是 <em>vim</em> 对 <em>python</em> 版本的支持，安装 <em>YouCompleteMe</em> 必须要有这两个配置。<br>下载 <a href=\"http://mirror.metrocast.net/vim/unix/vim-8.0.tar.bz2\" target=\"_blank\" rel=\"external\">vim-8.0</a>:<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"regexp\">//mi</span>rror.metrocast.net<span class=\"regexp\">/vim/u</span>nix<span class=\"regexp\">/vim-8.0.tar.bz2</span></div></pre></td></tr></table></figure></p>\n<p>解压后配置：<br>　　<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">./configure</span> <span class=\"params\">--with-features=huge</span> <span class=\"params\">--enable-multibyte</span> <span class=\"params\">--enable-rubyinterp</span> <span class=\"params\">--enable-pythoninterp</span> <span class=\"params\">--with-python-config-dir=/usr/lib/python2</span>.7/config-i386-linux-gnu  <span class=\"params\">--enable-python3interp</span> <span class=\"params\">--with-python3-config-dir=/usr/lib/python3</span>.4/config-3.4m-i386-linux-gnu <span class=\"params\">--enable-perlinterp</span> <span class=\"params\">--enable-luainterp</span> <span class=\"params\">--enable-gui=gtk2</span> <span class=\"params\">--enable-cscope</span> <span class=\"params\">--prefix=/usr</span></div></pre></td></tr></table></figure></p>\n<p>注意上面的 <em>–with-python3-config-dir</em> 一定要指定 <em>python3</em> 的完全路径，否则系统找不到。<br>编译安装：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$make</span> VIMRUNTIMEDIR=<span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/vim/</span>vim80</div><div class=\"line\"><span class=\"variable\">$sudo</span> make install</div></pre></td></tr></table></figure></p>\n<p>安装完后一定要测试一下依赖项是否完整，特别是对 <em>python3</em> 的依赖：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$<span class=\"keyword\">vim</span> --<span class=\"keyword\">version</span> | <span class=\"keyword\">grep</span> <span class=\"keyword\">python</span></div></pre></td></tr></table></figure></p>\n<p>如果输出包含则表示安装完整：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">+cryptv          +linebreak       +<span class=\"keyword\">python</span>/dyn      +vreplace</div><div class=\"line\">+<span class=\"keyword\">cscope</span>          +<span class=\"built_in\">lispindent</span>      +<span class=\"keyword\">python3</span>/dyn     +wildignore</div></pre></td></tr></table></figure></p>\n<p>再回到以上YouCompleteMe的安装即可。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p><em>Vim</em> 还有很多有用的插件，需要慢慢研究，目前先装这些，对于常用的补全、跳转、快速查看目录等都可以实现，基本满足需求。</p>"}],"PostAsset":[{"_id":"source/_posts/debug-ros-using-qt/setup.jpg","slug":"setup.jpg","post":"cj4hne51y0007w8inhiavri2r","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/hello-world.jpg","slug":"hello-world.jpg","post":"cj4hne524000dw8inchqa01ty","modified":0,"renderable":0},{"_id":"source/_posts/linux-serial/libcssl.jpg","slug":"libcssl.jpg","post":"cj4hne526000fw8in622soo1h","modified":0,"renderable":0},{"_id":"source/_posts/debug-ros-using-qt/mode.jpg","slug":"mode.jpg","post":"cj4hne51y0007w8inhiavri2r","modified":0,"renderable":0},{"_id":"source/_posts/debug-ros-using-qt/open.jpg","slug":"open.jpg","post":"cj4hne51y0007w8inhiavri2r","modified":0,"renderable":0},{"_id":"source/_posts/ros-navigation-simulation/amcl.jpg","slug":"amcl.jpg","post":"cj4hne533001aw8innspteglr","modified":0,"renderable":0},{"_id":"source/_posts/ros-navigation-simulation/amcl-move.jpg","slug":"amcl-move.jpg","post":"cj4hne533001aw8innspteglr","modified":0,"renderable":0},{"_id":"source/_posts/ros-navigation-simulation/square.jpg","slug":"square.jpg","post":"cj4hne533001aw8innspteglr","modified":0,"renderable":0},{"_id":"source/_posts/vim/ycm.jpg","slug":"ycm.jpg","post":"cj4hne53t002uw8inuebmk80x","modified":0,"renderable":0},{"_id":"source/_posts/debug-ros-using-qt/compile.jpg","slug":"compile.jpg","post":"cj4hne51y0007w8inhiavri2r","modified":0,"renderable":0},{"_id":"source/_posts/ros-communication/talker.jpg","slug":"talker.jpg","post":"cj4hne52u0013w8ing48j69g2","modified":0,"renderable":0},{"_id":"source/_posts/hexo-backup/setbranch.jpg","slug":"setbranch.jpg","post":"cj4hne52a000lw8in9pk9p2qf","modified":0,"renderable":0},{"_id":"source/_posts/ros-books/book.jpg","slug":"book.jpg","post":"cj4hne52r000zw8intlpgxx2o","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-1/rosv.jpg","slug":"rosv.jpg","post":"cj4hne536001gw8inwqg1lne9","modified":0,"renderable":0},{"_id":"source/_posts/ros-navigation-compile/ltierror.jpg","slug":"ltierror.jpg","post":"cj4hne535001dw8inrwe8lkem","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-11/service.jpg","slug":"service.jpg","post":"cj4hne538001kw8ina2fd57kz","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-10/test.jpg","slug":"test.jpg","post":"cj4hne539001mw8insbaq8pnn","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/leancloudc.jpg","slug":"leancloudc.jpg","post":"cj4hne524000dw8inchqa01ty","modified":0,"renderable":0},{"_id":"source/_posts/omniwheel-kinematical-analysis/omni.jpg","slug":"omni.jpg","post":"cj4hne528000iw8invzrjkclv","modified":0,"renderable":0},{"_id":"source/_posts/omniwheel-kinematical-analysis/omnidiagram.jpg","slug":"omnidiagram.jpg","post":"cj4hne528000iw8invzrjkclv","modified":0,"renderable":0},{"_id":"source/_posts/ros-communication/turtle.jpg","slug":"turtle.jpg","post":"cj4hne52u0013w8ing48j69g2","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-5/nodeinfo.jpg","slug":"nodeinfo.jpg","post":"cj4hne53l002aw8inqhp674e4","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-5/turtlesim.jpg","slug":"turtlesim.jpg","post":"cj4hne53l002aw8inqhp674e4","modified":0,"renderable":0},{"_id":"source/_posts/ros-serial/arch.jpg","slug":"arch.jpg","post":"cj4hne53p002lw8ins8a3iohb","modified":0,"renderable":0},{"_id":"source/_posts/ros-serial/serial.jpg","slug":"serial.jpg","post":"cj4hne53p002lw8ins8a3iohb","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-7/rosparam.jpg","slug":"rosparam.jpg","post":"cj4hne53n002gw8inzw97z8yo","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-7/spawn.jpg","slug":"spawn.jpg","post":"cj4hne53n002gw8inzw97z8yo","modified":0,"renderable":0},{"_id":"source/_posts/ros-indigo-raspberry/catkin.jpg","slug":"catkin.jpg","post":"cj4hne52y0016w8inom70754m","modified":0,"renderable":0},{"_id":"source/_posts/ros-indigo-raspberry/roscore.jpg","slug":"roscore.jpg","post":"cj4hne52y0016w8inom70754m","modified":0,"renderable":0},{"_id":"source/_posts/ros-indigo-raspberry/urdf.jpg","slug":"urdf.jpg","post":"cj4hne52y0016w8inom70754m","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-14/simple_robot.png","slug":"simple_robot.png","post":"cj4hne53d001sw8inqrqx61bu","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-14/tf.png","slug":"tf.png","post":"cj4hne53d001sw8inqrqx61bu","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-14/tf_robot.png","slug":"tf_robot.png","post":"cj4hne53d001sw8inqrqx61bu","modified":0,"renderable":0},{"_id":"source/_posts/vim/powerline.jpg","slug":"powerline.jpg","post":"cj4hne53t002uw8inuebmk80x","modified":0,"renderable":0},{"_id":"source/_posts/vim/tree.jpg","slug":"tree.jpg","post":"cj4hne53t002uw8inuebmk80x","modified":0,"renderable":0},{"_id":"source/_posts/putty-graphics-ubuntu/puttyssh.jpg","slug":"puttyssh.jpg","post":"cj4hne52c000pw8in6rnt8k1v","modified":0,"renderable":0},{"_id":"source/_posts/putty-graphics-ubuntu/puttyx11.jpg","slug":"puttyx11.jpg","post":"cj4hne52c000pw8in6rnt8k1v","modified":0,"renderable":0},{"_id":"source/_posts/putty-graphics-ubuntu/run.jpg","slug":"run.jpg","post":"cj4hne52c000pw8in6rnt8k1v","modified":0,"renderable":0},{"_id":"source/_posts/putty-graphics-ubuntu/xmingconfig.jpg","slug":"xmingconfig.jpg","post":"cj4hne52c000pw8in6rnt8k1v","modified":0,"renderable":0},{"_id":"source/_posts/raspberryPi/config.jpg","slug":"config.jpg","post":"cj4hne52m000ww8int5hvozob","modified":0,"renderable":0},{"_id":"source/_posts/raspberryPi/portconfig.jpg","slug":"portconfig.jpg","post":"cj4hne52m000ww8int5hvozob","modified":0,"renderable":0},{"_id":"source/_posts/raspberryPi/vnc.jpg","slug":"vnc.jpg","post":"cj4hne52m000ww8int5hvozob","modified":0,"renderable":0},{"_id":"source/_posts/raspberryPi/wpacli.jpg","slug":"wpacli.jpg","post":"cj4hne52m000ww8int5hvozob","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-13/carrot1.jpg","slug":"carrot1.jpg","post":"cj4hne53f001vw8in6wq5ip6e","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-13/moving.jpg","slug":"moving.jpg","post":"cj4hne53f001vw8in6wq5ip6e","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-13/startdemo.jpg","slug":"startdemo.jpg","post":"cj4hne53f001vw8in6wq5ip6e","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-13/tree.png","slug":"tree.png","post":"cj4hne53f001vw8in6wq5ip6e","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-6/rqtgraph.jpg","slug":"rqtgraph.jpg","post":"cj4hne53k0027w8inw4bfs2sr","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-6/rqth.jpg","slug":"rqth.jpg","post":"cj4hne53k0027w8inw4bfs2sr","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-6/rqtplot.jpg","slug":"rqtplot.jpg","post":"cj4hne53k0027w8inw4bfs2sr","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-6/topic.jpg","slug":"topic.jpg","post":"cj4hne53k0027w8inw4bfs2sr","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-6/turtlesim.jpg","slug":"turtlesim.jpg","post":"cj4hne53k0027w8inw4bfs2sr","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-8/info.jpg","slug":"info.jpg","post":"cj4hne53n002cw8ink4mv2cj6","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-8/rqtconsole.jpg","slug":"rqtconsole.jpg","post":"cj4hne53n002cw8ink4mv2cj6","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-8/rqtgraph.jpg","slug":"rqtgraph.jpg","post":"cj4hne53n002cw8ink4mv2cj6","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-8/rqtloglevel.jpg","slug":"rqtloglevel.jpg","post":"cj4hne53n002cw8ink4mv2cj6","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-8/two.jpg","slug":"two.jpg","post":"cj4hne53n002cw8ink4mv2cj6","modified":0,"renderable":0},{"_id":"source/_posts/ros-simulation/axis.jpg","slug":"axis.jpg","post":"cj4hne53r002ow8in8yo2to36","modified":0,"renderable":0},{"_id":"source/_posts/ros-simulation/rviz-left.jpg","slug":"rviz-left.jpg","post":"cj4hne53r002ow8in8yo2to36","modified":0,"renderable":0},{"_id":"source/_posts/ros-simulation/rviz-move.jpg","slug":"rviz-move.jpg","post":"cj4hne53r002ow8in8yo2to36","modified":0,"renderable":0},{"_id":"source/_posts/ros-simulation/rviz.jpg","slug":"rviz.jpg","post":"cj4hne53r002ow8in8yo2to36","modified":0,"renderable":0},{"_id":"source/_posts/ros-simulation/screw-rule.jpg","slug":"screw-rule.jpg","post":"cj4hne53r002ow8in8yo2to36","modified":0,"renderable":0},{"_id":"source/_posts/qt-widget-designated-location/final.jpg","slug":"final.jpg","post":"cj4hne52i000sw8inyx0c2sf1","modified":0,"renderable":0},{"_id":"source/_posts/qt-widget-designated-location/grid.jpg","slug":"grid.jpg","post":"cj4hne52i000sw8inyx0c2sf1","modified":0,"renderable":0},{"_id":"source/_posts/qt-widget-designated-location/linux.jpg","slug":"linux.jpg","post":"cj4hne52i000sw8inyx0c2sf1","modified":0,"renderable":0},{"_id":"source/_posts/qt-widget-designated-location/qrc.jpg","slug":"qrc.jpg","post":"cj4hne52i000sw8inyx0c2sf1","modified":0,"renderable":0},{"_id":"source/_posts/qt-widget-designated-location/res-qrc.jpg","slug":"res-qrc.jpg","post":"cj4hne52i000sw8inyx0c2sf1","modified":0,"renderable":0},{"_id":"source/_posts/qt-widget-designated-location/text.jpg","slug":"text.jpg","post":"cj4hne52i000sw8inyx0c2sf1","modified":0,"renderable":0},{"_id":"source/_posts/ros-navigation-simulation/forward.jpg","slug":"forward.jpg","post":"cj4hne533001aw8innspteglr","modified":0,"renderable":0},{"_id":"source/_posts/ros-navigation-simulation/movebase.png","slug":"movebase.png","post":"cj4hne533001aw8innspteglr","modified":0,"renderable":0},{"_id":"source/_posts/ros-navigation-simulation/obstacle.jpg","slug":"obstacle.jpg","post":"cj4hne533001aw8innspteglr","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-12/follow.jpg","slug":"follow.jpg","post":"cj4hne53b001pw8injkxajhf8","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-12/matrix.png","slug":"matrix.png","post":"cj4hne53b001pw8injkxajhf8","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-12/pdf.jpg","slug":"pdf.jpg","post":"cj4hne53b001pw8injkxajhf8","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-12/runtime.jpg","slug":"runtime.jpg","post":"cj4hne53b001pw8injkxajhf8","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-12/rviz.jpg","slug":"rviz.jpg","post":"cj4hne53b001pw8injkxajhf8","modified":0,"renderable":0},{"_id":"source/_posts/ros-primary-tutorial-12/tf.png","slug":"tf.png","post":"cj4hne53b001pw8injkxajhf8","modified":0,"renderable":0},{"_id":"source/_posts/hexo-advance/addok.jpg","slug":"addok.jpg","post":"cj4hne5200008w8ineekjh2ho","modified":0,"renderable":0},{"_id":"source/_posts/hexo-advance/addsitemap.jpg","slug":"addsitemap.jpg","post":"cj4hne5200008w8ineekjh2ho","modified":0,"renderable":0},{"_id":"source/_posts/hexo-advance/baidusitemap.jpg","slug":"baidusitemap.jpg","post":"cj4hne5200008w8ineekjh2ho","modified":0,"renderable":0},{"_id":"source/_posts/hexo-advance/error.jpg","slug":"error.jpg","post":"cj4hne5200008w8ineekjh2ho","modified":0,"renderable":0},{"_id":"source/_posts/hexo-advance/googleconsole.jpg","slug":"googleconsole.jpg","post":"cj4hne5200008w8ineekjh2ho","modified":0,"renderable":0},{"_id":"source/_posts/hexo-advance/googleverify.jpg","slug":"googleverify.jpg","post":"cj4hne5200008w8ineekjh2ho","modified":0,"renderable":0},{"_id":"source/_posts/hexo-advance/pay.jpg","slug":"pay.jpg","post":"cj4hne5200008w8ineekjh2ho","modified":0,"renderable":0},{"_id":"source/_posts/hexo-advance/sitemap.jpg","slug":"sitemap.jpg","post":"cj4hne5200008w8ineekjh2ho","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cj4hne51o0001w8in3xm24k9m","category_id":"cj4hne51u0004w8int8zh6apm","_id":"cj4hne526000ew8inpyh5u1r6"},{"post_id":"cj4hne51s0003w8inpmyp3cz9","category_id":"cj4hne51u0004w8int8zh6apm","_id":"cj4hne52a000kw8ink14r5uku"},{"post_id":"cj4hne526000fw8in622soo1h","category_id":"cj4hne51u0004w8int8zh6apm","_id":"cj4hne52c000ow8insis5t9gj"},{"post_id":"cj4hne528000iw8invzrjkclv","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne52h000rw8inln1rjis7"},{"post_id":"cj4hne51y0007w8inhiavri2r","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne52l000uw8inhvz2lai2"},{"post_id":"cj4hne52c000pw8in6rnt8k1v","category_id":"cj4hne51u0004w8int8zh6apm","_id":"cj4hne52q000yw8in88kzp84x"},{"post_id":"cj4hne5200008w8ineekjh2ho","category_id":"cj4hne52b000mw8inkxs8ptgz","_id":"cj4hne52u0011w8in562adr4p"},{"post_id":"cj4hne52m000ww8int5hvozob","category_id":"cj4hne51u0004w8int8zh6apm","_id":"cj4hne52y0015w8in8rpkgkef"},{"post_id":"cj4hne5220009w8inbkqj6l1z","category_id":"cj4hne52b000mw8inkxs8ptgz","_id":"cj4hne5320018w8inutwghf6g"},{"post_id":"cj4hne52r000zw8intlpgxx2o","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne535001cw8inwnoz7jtz"},{"post_id":"cj4hne52u0013w8ing48j69g2","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne536001fw8indvclucaz"},{"post_id":"cj4hne524000dw8inchqa01ty","category_id":"cj4hne52b000mw8inkxs8ptgz","_id":"cj4hne537001iw8inp8g4zv5j"},{"post_id":"cj4hne52y0016w8inom70754m","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne538001lw8ina61l8chc"},{"post_id":"cj4hne533001aw8innspteglr","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53a001ow8inu5jtj0dy"},{"post_id":"cj4hne52a000lw8in9pk9p2qf","category_id":"cj4hne52b000mw8inkxs8ptgz","_id":"cj4hne53c001rw8inbbvx28bu"},{"post_id":"cj4hne535001dw8inrwe8lkem","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53e001uw8inq4i5124c"},{"post_id":"cj4hne536001gw8inwqg1lne9","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53f001xw8in5cakekw9"},{"post_id":"cj4hne52i000sw8inyx0c2sf1","category_id":"cj4hne535001ew8inn7hanf2s","_id":"cj4hne53h0020w8incvmzicfv"},{"post_id":"cj4hne538001kw8ina2fd57kz","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53j0023w8inc6mu4exs"},{"post_id":"cj4hne539001mw8insbaq8pnn","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53k0025w8ina3t7113a"},{"post_id":"cj4hne53b001pw8injkxajhf8","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53l0029w8inl2ch4efu"},{"post_id":"cj4hne53d001sw8inqrqx61bu","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53m002bw8inypuowp1n"},{"post_id":"cj4hne53f001vw8in6wq5ip6e","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53n002ew8in7qyzdnym"},{"post_id":"cj4hne53g001yw8inpdh1e6kd","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53o002hw8ineeas0g2j"},{"post_id":"cj4hne53i0021w8infzzkobck","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53p002kw8in6antg6az"},{"post_id":"cj4hne53j0024w8inokpt837e","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53r002nw8in5hduiyse"},{"post_id":"cj4hne53k0027w8inw4bfs2sr","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53s002qw8in47huj182"},{"post_id":"cj4hne53l002aw8inqhp674e4","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53t002tw8in1j0vdx9t"},{"post_id":"cj4hne53n002cw8ink4mv2cj6","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53u002vw8inzfee08hg"},{"post_id":"cj4hne53n002gw8inzw97z8yo","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53v002yw8ink34adbzr"},{"post_id":"cj4hne53o002iw8inw9yasxk4","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53v002zw8inmln24xq5"},{"post_id":"cj4hne53p002lw8ins8a3iohb","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53w0031w8inuybvxavb"},{"post_id":"cj4hne53r002ow8in8yo2to36","category_id":"cj4hne527000gw8inmq9tmdmx","_id":"cj4hne53w0033w8ineagxl7ee"},{"post_id":"cj4hne53s002rw8indpbe1k3s","category_id":"cj4hne52b000mw8inkxs8ptgz","_id":"cj4hne53w0035w8inauoavm4s"},{"post_id":"cj4hne53t002uw8inuebmk80x","category_id":"cj4hne51u0004w8int8zh6apm","_id":"cj4hne53x0037w8inp8t3tkfl"}],"PostTag":[{"post_id":"cj4hne51o0001w8in3xm24k9m","tag_id":"cj4hne51w0005w8insi2e5bqw","_id":"cj4hne524000cw8in83208t09"},{"post_id":"cj4hne51s0003w8inpmyp3cz9","tag_id":"cj4hne523000bw8inrposdnce","_id":"cj4hne529000jw8inul72tlj4"},{"post_id":"cj4hne51y0007w8inhiavri2r","tag_id":"cj4hne528000hw8ingvlwwthg","_id":"cj4hne52c000qw8in2ohcg2w8"},{"post_id":"cj4hne5200008w8ineekjh2ho","tag_id":"cj4hne52b000nw8inow03t8u0","_id":"cj4hne52q000xw8inwts9ckhf"},{"post_id":"cj4hne5220009w8inbkqj6l1z","tag_id":"cj4hne52b000nw8inow03t8u0","_id":"cj4hne52y0014w8ingq1vbhul"},{"post_id":"cj4hne524000dw8inchqa01ty","tag_id":"cj4hne52b000nw8inow03t8u0","_id":"cj4hne535001bw8inykdb4a5n"},{"post_id":"cj4hne526000fw8in622soo1h","tag_id":"cj4hne5330019w8inzdltojv8","_id":"cj4hne537001jw8inq2ph4baf"},{"post_id":"cj4hne528000iw8invzrjkclv","tag_id":"cj4hne536001hw8inwfwoi2gb","_id":"cj4hne53b001qw8inrk8vz84w"},{"post_id":"cj4hne52a000lw8in9pk9p2qf","tag_id":"cj4hne52b000nw8inow03t8u0","_id":"cj4hne53f001ww8inzo3uhg7r"},{"post_id":"cj4hne52c000pw8in6rnt8k1v","tag_id":"cj4hne53e001tw8in2tqr6itm","_id":"cj4hne53i0022w8inmc5ygdom"},{"post_id":"cj4hne52i000sw8inyx0c2sf1","tag_id":"cj4hne53h001zw8inzstvr0n1","_id":"cj4hne53l0028w8inupuno6og"},{"post_id":"cj4hne52m000ww8int5hvozob","tag_id":"cj4hne53k0026w8inzakwd4jl","_id":"cj4hne53n002fw8ine85itixy"},{"post_id":"cj4hne52r000zw8intlpgxx2o","tag_id":"cj4hne53n002dw8inxplmhord","_id":"cj4hne53q002mw8inbiyx0611"},{"post_id":"cj4hne52u0013w8ing48j69g2","tag_id":"cj4hne53p002jw8ineakckrjr","_id":"cj4hne53t002sw8inxb4k49ub"},{"post_id":"cj4hne52y0016w8inom70754m","tag_id":"cj4hne53s002pw8inrshsqsjc","_id":"cj4hne53v002xw8in74aejsbt"},{"post_id":"cj4hne533001aw8innspteglr","tag_id":"cj4hne53u002ww8in5x7d2bqt","_id":"cj4hne53w0032w8in3w65vu50"},{"post_id":"cj4hne535001dw8inrwe8lkem","tag_id":"cj4hne53w0030w8indl4magf1","_id":"cj4hne53w0036w8inpugz8sac"},{"post_id":"cj4hne536001gw8inwqg1lne9","tag_id":"cj4hne53w0034w8inp08cx4x6","_id":"cj4hne53x0039w8intewm1lnk"},{"post_id":"cj4hne538001kw8ina2fd57kz","tag_id":"cj4hne53x0038w8in4xyi196h","_id":"cj4hne53x003bw8in1wbp4wiz"},{"post_id":"cj4hne539001mw8insbaq8pnn","tag_id":"cj4hne53x003aw8inhhqaaxvr","_id":"cj4hne53y003dw8in8yr4ejit"},{"post_id":"cj4hne53b001pw8injkxajhf8","tag_id":"cj4hne53x003cw8inpby6fa2t","_id":"cj4hne53y003fw8inoa8qnexd"},{"post_id":"cj4hne53d001sw8inqrqx61bu","tag_id":"cj4hne53y003ew8inegxs2kbp","_id":"cj4hne53y003hw8inp3jnw6ly"},{"post_id":"cj4hne53f001vw8in6wq5ip6e","tag_id":"cj4hne53x003cw8inpby6fa2t","_id":"cj4hne53z003jw8int75vazg0"},{"post_id":"cj4hne53g001yw8inpdh1e6kd","tag_id":"cj4hne53y003iw8indxizdm0f","_id":"cj4hne53z003lw8inkzdgsp2n"},{"post_id":"cj4hne53i0021w8infzzkobck","tag_id":"cj4hne53z003kw8infk1y03xq","_id":"cj4hne540003nw8in406vfure"},{"post_id":"cj4hne53j0024w8inokpt837e","tag_id":"cj4hne53z003mw8in27yhxgve","_id":"cj4hne541003pw8inntnp99qg"},{"post_id":"cj4hne53k0027w8inw4bfs2sr","tag_id":"cj4hne540003ow8ingb83fc6j","_id":"cj4hne541003rw8inytwkf98p"},{"post_id":"cj4hne53l002aw8inqhp674e4","tag_id":"cj4hne541003qw8inj2ogij7s","_id":"cj4hne541003tw8injog1cxiz"},{"post_id":"cj4hne53n002cw8ink4mv2cj6","tag_id":"cj4hne541003sw8inl6cu7f54","_id":"cj4hne542003vw8inw3s8ah59"},{"post_id":"cj4hne53n002gw8inzw97z8yo","tag_id":"cj4hne542003uw8in4smusiam","_id":"cj4hne542003xw8intgwaigob"},{"post_id":"cj4hne53o002iw8inw9yasxk4","tag_id":"cj4hne542003ww8inh5t6mg1p","_id":"cj4hne542003zw8in0e6y7yhq"},{"post_id":"cj4hne53p002lw8ins8a3iohb","tag_id":"cj4hne542003yw8incwojmau1","_id":"cj4hne5430041w8in96i31d3b"},{"post_id":"cj4hne53r002ow8in8yo2to36","tag_id":"cj4hne5430040w8in1wtxgp88","_id":"cj4hne5430043w8ingijlf9s9"},{"post_id":"cj4hne53s002rw8indpbe1k3s","tag_id":"cj4hne5430042w8inh6mek5v1","_id":"cj4hne5440045w8inz5ui1zgd"},{"post_id":"cj4hne53t002uw8inuebmk80x","tag_id":"cj4hne5440044w8inv29479w3","_id":"cj4hne5440046w8inbb9cc9rg"}],"Tag":[{"name":"Linux","_id":"cj4hne51w0005w8insi2e5bqw"},{"name":"Git Command","_id":"cj4hne523000bw8inrposdnce"},{"name":"ROS Qt","_id":"cj4hne528000hw8ingvlwwthg"},{"name":"hexo","_id":"cj4hne52b000nw8inow03t8u0"},{"name":"Linux serial","_id":"cj4hne5330019w8inzdltojv8"},{"name":"omniwheel","_id":"cj4hne536001hw8inwfwoi2gb"},{"name":"PuttyGraphics","_id":"cj4hne53e001tw8in2tqr6itm"},{"name":"Qt","_id":"cj4hne53h001zw8inzstvr0n1"},{"name":"raspberryPi","_id":"cj4hne53k0026w8inzakwd4jl"},{"name":"ROS Books","_id":"cj4hne53n002dw8inxplmhord"},{"name":"Communication","_id":"cj4hne53p002jw8ineakckrjr"},{"name":"raspberryPi ros-indigo jessie","_id":"cj4hne53s002pw8inrshsqsjc"},{"name":"ROS Navigation","_id":"cj4hne53u002ww8in5x7d2bqt"},{"name":"BayesianFiltering","_id":"cj4hne53w0030w8indl4magf1"},{"name":"ROS Installation","_id":"cj4hne53w0034w8inp08cx4x6"},{"name":"ServiceClient","_id":"cj4hne53x0038w8in4xyi196h"},{"name":"Publisher","_id":"cj4hne53x003aw8inhhqaaxvr"},{"name":"ROStf","_id":"cj4hne53x003cw8inpby6fa2t"},{"name":"ROS tf","_id":"cj4hne53y003ew8inegxs2kbp"},{"name":"ROS File's System","_id":"cj4hne53y003iw8indxizdm0f"},{"name":"Catkin_make","_id":"cj4hne53z003kw8infk1y03xq"},{"name":"catkin_create_pkg","_id":"cj4hne53z003mw8in27yhxgve"},{"name":"ROS Topics","_id":"cj4hne540003ow8ingb83fc6j"},{"name":"ROS Node","_id":"cj4hne541003qw8inj2ogij7s"},{"name":"rqt_console","_id":"cj4hne541003sw8inl6cu7f54"},{"name":"ROS Services","_id":"cj4hne542003uw8in4smusiam"},{"name":"ROS Messages","_id":"cj4hne542003ww8inh5t6mg1p"},{"name":"ROS serial","_id":"cj4hne542003yw8incwojmau1"},{"name":"ROS Simulation","_id":"cj4hne5430040w8in1wtxgp88"},{"name":"ubuntu hexo","_id":"cj4hne5430042w8inh6mek5v1"},{"name":"Vim","_id":"cj4hne5440044w8inv29479w3"}]}}