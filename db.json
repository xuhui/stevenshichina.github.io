{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/about/qr.png","path":"about/qr.png","modified":1,"renderable":0},{"_id":"source/about/qrh.png","path":"about/qrh.png","modified":1,"renderable":0},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/wechat.jpg","path":"images/wechat.jpg","modified":1,"renderable":0},{"_id":"source/images/[原始文件]/alipay.jpg","path":"images/[原始文件]/alipay.jpg","modified":1,"renderable":0},{"_id":"themes/next-theme/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next-theme/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next-theme/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next-theme/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next-theme/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next-theme/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next-theme/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next-theme/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next-theme/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next-theme/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next-theme/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next-theme/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next-theme/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next-theme/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next-theme/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"source/images/[原始文件]/wechat.jpg","path":"images/[原始文件]/wechat.jpg","modified":1,"renderable":0},{"_id":"themes/next-theme/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"fe99efeeffb82c0c03563103cda7b823d1450a1d","modified":1494122794632},{"_id":"source/favicon.ico","hash":"3cf8dbb793a8aba654ddffa23caa49a377ff72d2","modified":1494573088890},{"_id":"themes/next-theme/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1494226112666},{"_id":"themes/next-theme/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1494226112715},{"_id":"themes/next-theme/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1494226112667},{"_id":"themes/next-theme/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1494226112718},{"_id":"themes/next-theme/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1494226112719},{"_id":"themes/next-theme/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1494226112717},{"_id":"themes/next-theme/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1494226112718},{"_id":"themes/next-theme/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1494226112720},{"_id":"themes/next-theme/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1494226112720},{"_id":"themes/next-theme/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1494226112847},{"_id":"themes/next-theme/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1494226112845},{"_id":"themes/next-theme/_config.yml","hash":"70d7146f85ceef0f0df19fd42118d0b8199a77f8","modified":1494550654108},{"_id":"themes/next-theme/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1494226112846},{"_id":"themes/next-theme/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1494226112721},{"_id":"themes/next-theme/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1494226112721},{"_id":"themes/next-theme/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1494226112846},{"_id":"source/categories/index.md","hash":"a85039b98dc4e4aa542cb56a647892abcee4a6a0","modified":1494467871234},{"_id":"source/about/qr.png","hash":"fe70fbe9b928f4c234636425f800d54e7a089a04","modified":1494299044000},{"_id":"source/about/index.md","hash":"f3ab9ed44bdaa85d01df079ddb59632ef181760e","modified":1495499048212},{"_id":"source/about/qrh.png","hash":"1cb43ac737f02ed1874cb7b7489ed486b9e4c22c","modified":1494299046000},{"_id":"source/_posts/hexo-advance.md","hash":"dc17f910ab8872b1b5368f7b1cecce68aebca715","modified":1494811354154},{"_id":"source/_posts/float-to-byte.md","hash":"424c99bc6946fd50d846fb0adcc2e52e4a3eeb22","modified":1495185068071},{"_id":"source/_posts/hexo-backup.md","hash":"3302723456c6856c6c392d10eafd11e8b4d6a9a1","modified":1494806182522},{"_id":"source/_posts/hexo-blog.md","hash":"a35d9d859f4e11d296cbb4e575e97511e5ea4de0","modified":1494806182522},{"_id":"source/_posts/hexo-error.md","hash":"62980d22013deb2bb4ce94fc30c6889f57fcf7df","modified":1494806182522},{"_id":"source/_posts/linux-serial.md","hash":"1cd28a9cefaaea9efff5dbf1d5fffc259ba18076","modified":1495185068071},{"_id":"source/_posts/qt-widget-designated-location.md","hash":"4d972f03a97f82525031f9304bfed1f1ce30ae6a","modified":1494806182522},{"_id":"source/_posts/raspberryPi.md","hash":"85b60d8f2957dc835bb2f995e9191b7f9e564afe","modified":1495185231480},{"_id":"source/_posts/ros-communication.md","hash":"7fa2f2fecb4e46cc029c73909cee7d8cddfc98e2","modified":1495499013109},{"_id":"source/_posts/ros-indigo-raspberry.md","hash":"4dc679dff9e84ac501bdcf18f9f073552797b5fb","modified":1494835940396},{"_id":"source/_posts/ros-serial.md","hash":"72474385bd2162eb1addc7276559bbe636a9f02d","modified":1495000373457},{"_id":"source/_posts/vim.md","hash":"878823c2e01d29897bb18960e730eaaa8cd1b59c","modified":1495185068072},{"_id":"source/tags/index.md","hash":"5222f78c07cd7911ae9acbb44720f7db8a41a893","modified":1494467930563},{"_id":"source/images/alipay.jpg","hash":"d8c8a6b853225f9dc3e9b94beadbc0bf6be7bb93","modified":1494460928880},{"_id":"source/images/avatar.jpg","hash":"0c4428cbc398b7f18ef1fcae5a1c9664c29d6fca","modified":1494319604774},{"_id":"themes/next-theme/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1494226112716},{"_id":"themes/next-theme/.github/ISSUE_TEMPLATE.md","hash":"4de856de657a27f340f245eb491a1f52ceba1735","modified":1494226112717},{"_id":"themes/next-theme/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1494226112723},{"_id":"themes/next-theme/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1494226112722},{"_id":"themes/next-theme/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1494226112723},{"_id":"themes/next-theme/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1494226112724},{"_id":"themes/next-theme/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1494226112724},{"_id":"themes/next-theme/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1494226112793},{"_id":"themes/next-theme/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1494226112794},{"_id":"themes/next-theme/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1494226112794},{"_id":"themes/next-theme/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1494226112795},{"_id":"themes/next-theme/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1494226112795},{"_id":"themes/next-theme/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1494226112797},{"_id":"themes/next-theme/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1494226112796},{"_id":"themes/next-theme/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1494226112796},{"_id":"themes/next-theme/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1494226112847},{"_id":"themes/next-theme/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1494226112848},{"_id":"themes/next-theme/layout/_layout.swig","hash":"efa71671290bb4b497d83720282b36482b6b0efb","modified":1494226112803},{"_id":"themes/next-theme/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1494226112798},{"_id":"themes/next-theme/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1494226112799},{"_id":"themes/next-theme/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1494226112798},{"_id":"themes/next-theme/layout/page.swig","hash":"79297b9b9abd684ba025ba2d1551e9e0591b5a63","modified":1494226112800},{"_id":"themes/next-theme/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1494226112801},{"_id":"themes/next-theme/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1494226112801},{"_id":"themes/next-theme/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1494226112994},{"_id":"themes/next-theme/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1494226112800},{"_id":"themes/next-theme/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1494226112995},{"_id":"themes/next-theme/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1494226112995},{"_id":"source/images/wechat.jpg","hash":"d673254d35893b0a8dc4e6501e1f2bd5fceb176f","modified":1494391666120},{"_id":"themes/next-theme/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494226112922},{"_id":"source/_posts/hexo-advance/pay.jpg","hash":"15178d5e18e706c9b6c1b67235b83f504379e8e9","modified":1494392998187},{"_id":"source/_posts/hexo-backup/setbranch.jpg","hash":"3cf5e1105cadb1de2190da051cde55d182599003","modified":1494377528652},{"_id":"source/_posts/hexo-blog/leancloudc.jpg","hash":"b7991651b5bc2901864733da810a7e58513e5788","modified":1494142825265},{"_id":"source/_posts/qt-widget-designated-location/final.jpg","hash":"6094e589bfcf4f7f21d5e0fbf1e84d0368e1d83c","modified":1494303777958},{"_id":"source/_posts/qt-widget-designated-location/qrc.jpg","hash":"94bb19dd0e013f4d24bd3b8bb5cdab7486773ff2","modified":1494295169033},{"_id":"source/_posts/qt-widget-designated-location/res-qrc.jpg","hash":"33fc26d52a5cdeed861e6b4bae59da2d3531e407","modified":1494295790173},{"_id":"source/_posts/raspberryPi/wpacli.jpg","hash":"0862f7c3cbfeff4217f4d7f9ff209a09da58289e","modified":1494817544972},{"_id":"source/_posts/ros-serial/arch.jpg","hash":"0cd82634c7c53170f0fab6c8b2f9c5bc4f02a583","modified":1494988352773},{"_id":"source/_posts/ros-indigo-raspberry/urdf.jpg","hash":"c9928f762f38bceab10973d1aad63cd1b98a7bc8","modified":1494834493469},{"_id":"source/_posts/ros-indigo-raspberry/roscore.jpg","hash":"88f9c1ebe7ac49fb9b6083183e09d4edb432ac4d","modified":1494835546610},{"_id":"source/_posts/vim/powerline.jpg","hash":"f6437229e71edbc9a8571a2ff358071d2c858514","modified":1495086347033},{"_id":"source/_posts/vim/tree.jpg","hash":"427511d6e79478bfb0885ec5a1a707619a74f22c","modified":1495086562109},{"_id":"source/images/[原始文件]/alipay.jpg","hash":"5e676d7d1e10c982d93f9c6634d362443d101a56","modified":1494391498192},{"_id":"themes/next-theme/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1494226112849},{"_id":"themes/next-theme/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1494226112849},{"_id":"themes/next-theme/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1494226112850},{"_id":"themes/next-theme/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1494226112850},{"_id":"themes/next-theme/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1494226112851},{"_id":"themes/next-theme/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1494226112852},{"_id":"themes/next-theme/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1494226112923},{"_id":"themes/next-theme/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1494226112924},{"_id":"themes/next-theme/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1494226112925},{"_id":"themes/next-theme/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1494226112924},{"_id":"themes/next-theme/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1494226112926},{"_id":"themes/next-theme/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1494226112927},{"_id":"themes/next-theme/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1494226112926},{"_id":"themes/next-theme/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1494226112927},{"_id":"themes/next-theme/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1494226112929},{"_id":"themes/next-theme/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1494226112928},{"_id":"themes/next-theme/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1494226112929},{"_id":"themes/next-theme/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1494226112930},{"_id":"themes/next-theme/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1494226112930},{"_id":"themes/next-theme/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1494226112931},{"_id":"themes/next-theme/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1494226112853},{"_id":"themes/next-theme/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1494226112804},{"_id":"themes/next-theme/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1494226112805},{"_id":"themes/next-theme/layout/_macro/post.swig","hash":"3c6ef2ec749f2102ea5006016261263d34b6d162","modified":1494226112806},{"_id":"themes/next-theme/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1494226112807},{"_id":"themes/next-theme/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1494226112808},{"_id":"themes/next-theme/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1494226112807},{"_id":"themes/next-theme/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1494226112802},{"_id":"themes/next-theme/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1494226112803},{"_id":"themes/next-theme/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1494226112809},{"_id":"themes/next-theme/layout/_partials/footer.swig","hash":"63997332854621a1e7f1a7a3219adcd7462f9b6e","modified":1494818861841},{"_id":"themes/next-theme/layout/_partials/head.swig","hash":"881556e5387d760d7b67c49f4f3c3ccc2240436b","modified":1494226112811},{"_id":"themes/next-theme/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1494226112812},{"_id":"themes/next-theme/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1494226112813},{"_id":"themes/next-theme/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1494226112812},{"_id":"themes/next-theme/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1494226112815},{"_id":"themes/next-theme/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1494226112819},{"_id":"themes/next-theme/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1494226112819},{"_id":"themes/next-theme/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1494226112823},{"_id":"themes/next-theme/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1494226112837},{"_id":"themes/next-theme/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1494226112839},{"_id":"themes/next-theme/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1494226112838},{"_id":"themes/next-theme/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1494226112839},{"_id":"themes/next-theme/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1494226112840},{"_id":"source/_posts/qt-widget-designated-location/linux.jpg","hash":"c34ad72bcef156217728ddde4a06fb1f7387bc89","modified":1494297222633},{"_id":"source/_posts/qt-widget-designated-location/grid.jpg","hash":"2470d283416fb2cda7315f9f972dcf9bf7f0a740","modified":1494298348902},{"_id":"source/_posts/qt-widget-designated-location/text.jpg","hash":"128179bd2b0b6a40e378a33eafc63a26c925bb2a","modified":1494301542941},{"_id":"source/_posts/raspberryPi/portconfig.jpg","hash":"999761e11eefc0bcf6b59d5fe3c3e95eccd07eff","modified":1494816579345},{"_id":"source/_posts/raspberryPi/config.jpg","hash":"31d988f2efaea004b2ccfcfca7227235c073998b","modified":1494816360500},{"_id":"source/_posts/raspberryPi/vnc.jpg","hash":"01d06e3af2c437a5831b442dc9d0c45ebf3fb80f","modified":1494816856750},{"_id":"source/_posts/ros-communication/turtle.jpg","hash":"2de104d636fa5b823ebf67e058ebaae08a1f3a2d","modified":1495459734000},{"_id":"source/images/[原始文件]/wechat.jpg","hash":"2e70bc628e855045909e36f236cb9908babeb210","modified":1494391486802},{"_id":"themes/next-theme/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494226112921},{"_id":"themes/next-theme/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494226112920},{"_id":"themes/next-theme/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494226112901},{"_id":"themes/next-theme/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494226112901},{"_id":"themes/next-theme/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494226112901},{"_id":"themes/next-theme/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494226112821},{"_id":"themes/next-theme/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494226112821},{"_id":"source/_posts/hexo-blog/hello-world.jpg","hash":"5cda94b2c45b93aa4eb20dfbcb3fafd79a2f47ea","modified":1494133840276},{"_id":"source/_posts/linux-serial/libcssl.jpg","hash":"fea0d9285fd68ab2409c7ec9b5c580f99f5b6d6f","modified":1495008220203},{"_id":"source/_posts/ros-indigo-raspberry/catkin.jpg","hash":"48a6c28b11e71ad941daf8274c8cf78def9ea46d","modified":1494835397080},{"_id":"themes/next-theme/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1494226112899},{"_id":"themes/next-theme/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1494226112921},{"_id":"themes/next-theme/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1494226112922},{"_id":"themes/next-theme/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1494226112920},{"_id":"themes/next-theme/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1494226112900},{"_id":"themes/next-theme/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1494226112902},{"_id":"themes/next-theme/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1494226112932},{"_id":"themes/next-theme/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1494226112934},{"_id":"themes/next-theme/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1494226112933},{"_id":"themes/next-theme/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1494226112934},{"_id":"themes/next-theme/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1494226112935},{"_id":"themes/next-theme/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1494226112935},{"_id":"themes/next-theme/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1494226112936},{"_id":"themes/next-theme/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1494226112936},{"_id":"themes/next-theme/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1494226112938},{"_id":"themes/next-theme/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1494226112938},{"_id":"themes/next-theme/source/js/src/utils.js","hash":"092a32149b67a7af271c6c2c45f4c737f64b7e54","modified":1494226112939},{"_id":"themes/next-theme/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1494226112940},{"_id":"themes/next-theme/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1494226112944},{"_id":"themes/next-theme/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1494226112942},{"_id":"themes/next-theme/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"68db2c0bf1064176627199394f25f6dc37ea23ad","modified":1494226112943},{"_id":"themes/next-theme/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1494226112945},{"_id":"themes/next-theme/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1494226112956},{"_id":"themes/next-theme/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1494226112959},{"_id":"themes/next-theme/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1494226112957},{"_id":"themes/next-theme/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1494226112960},{"_id":"themes/next-theme/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1494226112978},{"_id":"themes/next-theme/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1494226112961},{"_id":"themes/next-theme/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1494226112961},{"_id":"themes/next-theme/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1494226112962},{"_id":"themes/next-theme/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1494226112971},{"_id":"themes/next-theme/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1494226112963},{"_id":"themes/next-theme/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1494226112980},{"_id":"themes/next-theme/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1494226112981},{"_id":"themes/next-theme/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1494226112983},{"_id":"themes/next-theme/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1494226112980},{"_id":"themes/next-theme/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1494226112982},{"_id":"themes/next-theme/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1494226112985},{"_id":"themes/next-theme/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1494226112984},{"_id":"themes/next-theme/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1494226112982},{"_id":"themes/next-theme/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1494226112985},{"_id":"themes/next-theme/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1494226112990},{"_id":"themes/next-theme/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1494226112989},{"_id":"themes/next-theme/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1494226112992},{"_id":"themes/next-theme/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1494226112993},{"_id":"themes/next-theme/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1494226112992},{"_id":"themes/next-theme/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1494226112810},{"_id":"themes/next-theme/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1494226112811},{"_id":"themes/next-theme/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1494226112814},{"_id":"themes/next-theme/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1494226112814},{"_id":"themes/next-theme/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1494226112816},{"_id":"themes/next-theme/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1494226112815},{"_id":"themes/next-theme/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1494226112817},{"_id":"themes/next-theme/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1494226112817},{"_id":"themes/next-theme/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1494226112818},{"_id":"themes/next-theme/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1494226112820},{"_id":"themes/next-theme/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1494226112822},{"_id":"themes/next-theme/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1494226112832},{"_id":"themes/next-theme/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1494226112833},{"_id":"themes/next-theme/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1494226112834},{"_id":"themes/next-theme/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1494226112833},{"_id":"themes/next-theme/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1494226112834},{"_id":"themes/next-theme/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1494226112835},{"_id":"themes/next-theme/layout/_third-party/comments/livere.swig","hash":"c75024151fc63220e7d01035d8a1aff9affdecc7","modified":1494226112836},{"_id":"themes/next-theme/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1494226112836},{"_id":"themes/next-theme/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1494226112826},{"_id":"themes/next-theme/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1494226112825},{"_id":"themes/next-theme/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1494226112826},{"_id":"themes/next-theme/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1494226112827},{"_id":"themes/next-theme/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1494226112827},{"_id":"themes/next-theme/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1494226112828},{"_id":"themes/next-theme/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1494226112828},{"_id":"themes/next-theme/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1494226112829},{"_id":"themes/next-theme/layout/_third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1494226112830},{"_id":"themes/next-theme/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1494226112830},{"_id":"themes/next-theme/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1494226112831},{"_id":"themes/next-theme/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1494226112842},{"_id":"themes/next-theme/layout/_third-party/search/localsearch.swig","hash":"a0c042a74ea1afcb19daac7e2604a2bc5495037b","modified":1494226112843},{"_id":"themes/next-theme/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1494226112844},{"_id":"themes/next-theme/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1494226112844},{"_id":"themes/next-theme/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1494226112978},{"_id":"source/_posts/ros-communication/talker.jpg","hash":"5b4496fc8d5bbff82328140a0aa60003180afa50","modified":1495459308000},{"_id":"themes/next-theme/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1494226112856},{"_id":"themes/next-theme/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1494226112855},{"_id":"themes/next-theme/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1494226112854},{"_id":"themes/next-theme/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1494226112857},{"_id":"themes/next-theme/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1494226112857},{"_id":"themes/next-theme/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1494226112869},{"_id":"themes/next-theme/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1494226112884},{"_id":"themes/next-theme/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1494226112897},{"_id":"themes/next-theme/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1494226112898},{"_id":"themes/next-theme/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1494226112896},{"_id":"themes/next-theme/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1494226112898},{"_id":"themes/next-theme/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1494226112899},{"_id":"themes/next-theme/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1494226112895},{"_id":"themes/next-theme/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1494226112913},{"_id":"themes/next-theme/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1494226112912},{"_id":"themes/next-theme/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1494226112914},{"_id":"themes/next-theme/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1494226112913},{"_id":"themes/next-theme/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1494226112911},{"_id":"themes/next-theme/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1494226112907},{"_id":"themes/next-theme/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1494226112907},{"_id":"themes/next-theme/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1494226112908},{"_id":"themes/next-theme/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1494226112909},{"_id":"themes/next-theme/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1494226112909},{"_id":"themes/next-theme/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1494226112910},{"_id":"themes/next-theme/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1494226112904},{"_id":"themes/next-theme/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1494226112916},{"_id":"themes/next-theme/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1494226112916},{"_id":"themes/next-theme/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1494226112917},{"_id":"themes/next-theme/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1494226112918},{"_id":"themes/next-theme/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1494226112918},{"_id":"themes/next-theme/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1494226112915},{"_id":"themes/next-theme/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1494226112937},{"_id":"themes/next-theme/source/lib/Han/dist/han.min.css","hash":"95518d298d3c5c271faec2e4977df9e5dedd5d84","modified":1494226112976},{"_id":"themes/next-theme/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1494226112977},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1494226112946},{"_id":"themes/next-theme/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1494226112945},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1494226112946},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1494226112947},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1494226112949},{"_id":"themes/next-theme/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1494226112948},{"_id":"themes/next-theme/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1494226112954},{"_id":"themes/next-theme/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1494226112955},{"_id":"themes/next-theme/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1494226112955},{"_id":"themes/next-theme/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1494226112958},{"_id":"themes/next-theme/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1494226112958},{"_id":"themes/next-theme/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1494226112964},{"_id":"themes/next-theme/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1494226112964},{"_id":"themes/next-theme/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1494226112965},{"_id":"themes/next-theme/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1494226112988},{"_id":"themes/next-theme/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1494226112988},{"_id":"themes/next-theme/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1494226112841},{"_id":"themes/next-theme/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1494226112842},{"_id":"themes/next-theme/source/lib/Han/dist/han.css","hash":"524cfca7b6ab135d81ea723d8de06fdf0dbe7e56","modified":1494226112975},{"_id":"themes/next-theme/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1494226112975},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1494226112969},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1494226112969},{"_id":"themes/next-theme/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1494226112991},{"_id":"source/_posts/ros-serial/serial.jpg","hash":"37f55bdc08df9dfe0ed175102bed4b03c1849cf8","modified":1494987346231},{"_id":"themes/next-theme/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1494226112858},{"_id":"themes/next-theme/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1494226112860},{"_id":"themes/next-theme/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1494226112859},{"_id":"themes/next-theme/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1494226112861},{"_id":"themes/next-theme/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1494226112860},{"_id":"themes/next-theme/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1494226112862},{"_id":"themes/next-theme/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1494226112865},{"_id":"themes/next-theme/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1494226112866},{"_id":"themes/next-theme/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1494226112868},{"_id":"themes/next-theme/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1494226112867},{"_id":"themes/next-theme/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1494226112868},{"_id":"themes/next-theme/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1494226112870},{"_id":"themes/next-theme/source/css/_common/components/post/post-collapse.styl","hash":"e1a7a0828e3c93cc044250084c1ae0c9a22a6d4c","modified":1494226112871},{"_id":"themes/next-theme/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1494226112872},{"_id":"themes/next-theme/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1494226112871},{"_id":"themes/next-theme/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1494226112873},{"_id":"themes/next-theme/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1494226112873},{"_id":"themes/next-theme/source/css/_common/components/post/post-meta.styl","hash":"3d3e0200716ceb276ac755cc400def9c1b437489","modified":1494226112874},{"_id":"themes/next-theme/source/css/_common/components/post/post-reward.styl","hash":"636884d2ec9caaa5566107dc2af94160de8731ed","modified":1494393192004},{"_id":"themes/next-theme/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1494226112876},{"_id":"themes/next-theme/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1494226112875},{"_id":"themes/next-theme/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1494226112877},{"_id":"themes/next-theme/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1494226112877},{"_id":"themes/next-theme/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1494226112878},{"_id":"themes/next-theme/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1494226112863},{"_id":"themes/next-theme/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1494226112864},{"_id":"themes/next-theme/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1494226112863},{"_id":"themes/next-theme/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1494226112879},{"_id":"themes/next-theme/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1494226112881},{"_id":"themes/next-theme/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1494226112879},{"_id":"themes/next-theme/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1494226112880},{"_id":"themes/next-theme/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1494226112882},{"_id":"themes/next-theme/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1494226112882},{"_id":"themes/next-theme/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1494226112883},{"_id":"themes/next-theme/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1494226112883},{"_id":"themes/next-theme/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1494226112884},{"_id":"themes/next-theme/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1494226112885},{"_id":"themes/next-theme/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1494226112886},{"_id":"themes/next-theme/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1494226112886},{"_id":"themes/next-theme/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1494226112887},{"_id":"themes/next-theme/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1494226112888},{"_id":"themes/next-theme/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1494226112889},{"_id":"themes/next-theme/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1494226112891},{"_id":"themes/next-theme/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1494226112890},{"_id":"themes/next-theme/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1494226112892},{"_id":"themes/next-theme/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1494226112890},{"_id":"themes/next-theme/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1494226112892},{"_id":"themes/next-theme/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1494226112893},{"_id":"themes/next-theme/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1494226112894},{"_id":"themes/next-theme/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1494226112893},{"_id":"themes/next-theme/source/css/_common/components/third-party/third-party.styl","hash":"eb45ee16051624c6e36a274c0a9538e961f10c4d","modified":1494226112894},{"_id":"themes/next-theme/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1494226112911},{"_id":"themes/next-theme/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1494226112905},{"_id":"themes/next-theme/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1494226112906},{"_id":"themes/next-theme/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1494226112972},{"_id":"themes/next-theme/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1494226112973},{"_id":"themes/next-theme/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1494226112973},{"_id":"themes/next-theme/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1494226112974},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1494226112950},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1494226112951},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1494226112950},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1494226112952},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1494226112952},{"_id":"themes/next-theme/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1494226112953},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1494226112970},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1494226112966},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1494226112968},{"_id":"themes/next-theme/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1494226112941},{"_id":"themes/next-theme/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1494226112987},{"_id":"themes/next-theme/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1494226112967},{"_id":"source/_posts/vim/ycm.gif","hash":"7711c22806cc3473655573cdb8281849e6723780","modified":1495090802760}],"Category":[{"name":"hexo","_id":"cj30tmxh70004ikinqu11tx27"},{"name":"Linux","_id":"cj30tmxhu000oikinaq4gi6im"},{"name":"Qt","_id":"cj30tmxit000zikinnwsirudj"},{"name":"ROS","_id":"cj30tmxiw0018ikinclk74tj2"}],"Data":[],"Page":[{"title":"分类","date":"2017-05-05T04:30:42.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-05-05 12:30:42\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-05-11T01:57:51.234Z","path":"categories/index.html","layout":"page","_id":"cj30tmxgy0000ikinimjpvz5g","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","_content":"......\n\n\n学习、交流、分享\n\n专注于嵌入式linux、ROS、智能硬件\n\n本站文章均属原创，转载请注明出处。\n\n本站永久链接:  http://stevenshi.me\n![Alt text](qrh.png)\nEmail:  1554116385@qq.com\n\n......\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于\n---\n......\n\n\n学习、交流、分享\n\n专注于嵌入式linux、ROS、智能硬件\n\n本站文章均属原创，转载请注明出处。\n\n本站永久链接:  http://stevenshi.me\n![Alt text](qrh.png)\nEmail:  1554116385@qq.com\n\n......\n\n\n","date":"2017-05-23T00:24:08.212Z","updated":"2017-05-23T00:24:08.212Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj30tmxh30002ikinhbp8875w","content":"<p>……</p>\n<p>学习、交流、分享</p>\n<p>专注于嵌入式linux、ROS、智能硬件</p>\n<p>本站文章均属原创，转载请注明出处。</p>\n<p>本站永久链接:  <a href=\"http://stevenshi.me\">http://stevenshi.me</a><br><img src=\"/about/qrh.png\" alt=\"Alt text\"><br>Email:  1554116385@qq.com</p>\n<p>……</p>\n","site":{"data":{}},"excerpt":"","more":"<p>……</p>\n<p>学习、交流、分享</p>\n<p>专注于嵌入式linux、ROS、智能硬件</p>\n<p>本站文章均属原创，转载请注明出处。</p>\n<p>本站永久链接:  <a href=\"http://stevenshi.me\">http://stevenshi.me</a><br><img src=\"/about/qrh.png\" alt=\"Alt text\"><br>Email:  1554116385@qq.com</p>\n<p>……</p>\n"},{"title":"标签","date":"2017-05-05T04:30:52.000Z","type":"tags","comments":0,"tags":["Qt","Linux","Hexo","ROS"],"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-05-05 12:30:52\ntype: \"tags\"\ncomments: false\ntags:\n - Qt\n - Linux\n - Hexo\n - ROS\n---\n","updated":"2017-05-11T01:58:50.563Z","path":"tags/index.html","layout":"page","_id":"cj30tmxhb0006ikinvx6vbncv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"hexo进阶","date":"2017-05-09T06:32:38.000Z","comments":1,"_content":"# 添加页面\n页面指的是分类页*categories*、标签页*tags*、关于页*about*等。使用以下命令生成以上页面参考[nexT](http://theme-next.iissnan.com/theme-settings.html):\n　　```\n $hexo new page categories\n $hexo new page tags\n $hexo new page about　\n　　```\n在 *hexo* 配置文件 *_config.yml* 文件中设置 *post_asset_folder* 为true,当新建页面后会自动生成一个同名文件夹，用于存储所需的资源图片等。生成以上页面后在主题配置文件中 *themes/nexT/_config.yml* 打开相关配置项:\n　　```\n menu:\n   home: /\n   categories: /categories\n   about: /about\n   archives: /archives\n   tags: /tags\n   #sitemap: /sitemap.xml\n   #commonweal: /404.html\n　　```\n<!--more-->\n设置自己的标签页面位于*hexo/source/tags*:\n  ```\ntitle: 标签\ndate: 2017-05-05 12:30:52\ntype: \"tags\"\ncomments: false\ntags:\n - Qt\n - Linux\n - Hexo\n - ROS\n　```\n可以在上面添加自己的标签。\n分类页的示例如下:\n　```\n title: 分类\n date: 2017-05-05 12:30:42\n type: \"categories\"\n comments: false\n　```\n# 发表文章\n新文章的发表使用以下命令：\n　　```\n $hexo new post \"文章名\" 或者 hexo n \"文章名\"\n　　```\n一个文章的开头应包含:\n　```\n title: #文章题目\n date: #日期\n tags: #标签\n categories: #分类\n　```\n文章存储在*hexo/source/_posts*目录下，后缀为*.md*。可以在适当位置插入以下符号用于部分显示:\n　　```\n<!--more-->\n　　```\n插入该符号之前的文字可以直接显示出来，之后的需要鼠标点击*阅读全文*来显示全部。\n　　```\n $hexo g //生成静态文件\n $hexo d //部署\n　　```\n# 添加RSS\n安装RSS插件：\n　　```\n $npm install hexo-generator-feed --save\n　　```\n修改*hexo/_config.yml*根目录下的全局配置文件，添加以下内容:\n　　```\n #RSS 订阅支持\n plugin:\n - hexo-generator-feed\n #feed Atom\n feed:\n   type: atom\n   path: atom.xml\n   limit: 20\n　　```\n修改主题目录下的配置文件*themes/nexT/_config.yml*\n　　```\n rss: /atom.xml\n　　```\n# 添加sitemap\n安装*sitemap*插件:\n　```\n $npm install hexo-generator-sitemap --save\n　　```\n修改*hexo/_config.yml*根目录下的全局配置文件:\n　　```\n sitemap:\n　　　path: sitemap.xml\n　　```\n添加baidusitemap：\n  ```\n $npm install hexo-generator-baidu-sitemap --save\n  ```\n修改*hexo/_config.yml*根目录下的全局配置文件:\n　　```\n baidusitemap:\n　　　path: baidusitemap.xml\n　　```\n# 添加侧栏社交链接\n修改主题目录下的配置文件*themes/nexT/_config.yml*\n　　```\n # Social Links\n # Key is the link label showing to end users.\n # Value is the target link (E.g. GitHub: https://github.com/iissnan)\n social:\n   Github: https://github.com/username\n   知乎: http://www.zhihu.com/people/username\n   Email: mailto: user@xx.com\n　　```\n设置链接的图标，对应的字段是*social_icons*在主题配置文件中:\n　```\n # Social Icons\n social_icons:\n enable: true\n # Icon Mappings\n GitHub: github\n Email: envelope\n　　```\nnexT使用的图标来自[FontAwesome](http://fontawesome.io/)，只要上面有的都可以配置到nexT使用。\n# 添加本地搜索\n安装*hexo-generator-serarch*\n　　```\n $npm install hexo-generator-search --save\n　　```\n修改*hexo/_config.yml*根目录下的全局配置文件添加:\n　　```\n search:\n  path: search.xml\n  field: post\n　　```\n# 设置头像\n在hexo/source/目录下建立images文件夹，将头像放置在该文件夹下，修改主题目录下的配置文件*themes/nexT/_config.yml*\n　　```\n avatar: /images/avatar.jpg\n　　```\n# 生成网站二维码\n二维码生成工具很多，这个[Custom QR Code Generator](https://www.unitag.io/qrcode)比较不错。生成后将二维码添加到关于页面。\n# 设置代码高亮主题\nNexT 使用[TomorrowTheme](https://github.com/chriskempson/tomorrow-theme)作为代码高亮，共有5款主题供选择。 打开主题配置文件*themes/nexT/_config.yml*修改:\n　　```\n # Code Highlight theme\n # Available value:\n #    normal | night | night eighties | night blue | night bright\n # https://github.com/chriskempson/tomorrow-theme\n highlight_theme: night bright\n\n　　```\n# 开启打赏功能\n只需要主题配置文件中填入微信和支付宝收款二维码图片地址，即可开启该功能。修改主题配置文件*themes/nexT/_config.yml*\n　　```\n reward_comment: 您的支持是我原创的动力\n  wechatpay: /path/to/wechat-reward-image\n  alipay: /path/to/alipay-reward-image\n\n　　```\n鼠标放置在二维码上面时，下面的字来回晃眼，修改如下文件:\n*themes/next/source/css/_common/components/post/post-reward.styl*\n注释掉以下代码：![Alt text](hexo-advance/pay.jpg)\n# 友情链接\n修改主题配置文件*themes/next/_config.yml*\n　　```\n # Blog rolls\n links_title: 友情链接\n #links_layout: block\n #links_layout: inline\n links:\n  hexo: https://hexo.io/zh-cn/docs\n  nexT: http://theme-next.iissnan.com/\n　　```\n# 开启动画背景\n[nexT](http://theme-next.iissnan.com/theme-settings.html) 自带两种背景动画效果，canvas_nest以及three_waves,在主题配置文件:\n *themes/next/_config.yml*中设置为true即可开启,\n　　```\n # Canvas-nest\n canvas_nest: true\n　　```\n# 开启JiaThis分享\n[Jiathis](http://www.jiathis.com/)为文章提供社会化分享功能。修改主题配置文件*themes/next/_config.yml*:\n　　```\n # Share\n jiathis: true\n　　```\n# 百度分享\n两种分享只能同时开启一种，百度分享需要在站点配置文件*hexo/_config.yml*中添加：\n　　```\n # baidu share\n baidushare: true #百度分享功能\n　　```\n另外需要在主题配置文件*themes/next/_config.yml*中开启百度分享功能：\n　　```\n # Baidu Share\n # Available value:\n #    button | slide\n # Warning: Baidu Share does not support https.\n baidushare: \n  type: button\n\n　　```\n# 添加DISQUS评论\n修改主题配置文件开启[DISQUS](https://disqus.com/)功能：\n　　```\n # Disqus\n disqus:\n  enable: true\n  shortname:\n  count: true\n　　```\n去[DISQUS](https://disqus.com/)官网注册，并获取自己的shortname,填写至主题配置文件中的对应字段中。取消一篇文章的评论只需要在文章的头部修改：\n　　```\n comments: false\n　　```\n# 设置网站图标\n图标制作网站[faviconer](http://www.faviconer.com/)，制作完成自己的网站图标后放到*hexo/source*根目录下，并修改主题配置文件：\n　　```\n# Put your favicon.ico into `hexo-site/source/` directory.\nfavicon: /favicon.ico\n　　```\n# 页面中插入图片\n图片的插入可以使用[MarkdownPad](http://markdownpad.com/ \"markdown Editor for Windows\")的语法：\n　　```\n ![图片名称](图片地址)\n　　```\n图片可以放在本地，也可以放在云端。建议放在云端，因为github的空间有限，云端可以使用[七牛云存储](https://www.qiniu.com/)。\n本地图片的插入有两种方法，早期的[hexo](https://hexo.io/zh-cn/docs/ \"hexo说明\")需要将图片放在网站根目录下的*source/*文件夹中比如*source/images/*文件夹，将图片放到该处，即可在页面中引用：\n　　```\n ![test](source/images/test.jgp)\n　　```\n[hexo](https://hexo.io/zh-cn/docs/ \"hexo说明\")2.0之后，引入新方法，参考[CodeFalling/hexo-asset-image](https://github.com/CodeFalling/hexo-asset-image)\n安装插件：\n　　```\n $npm install hexo-asset-image --save\n　　```\n 修改配置文件中的 *post_asset_folder:* 为 *true* ，这样新建文章时，会在 *_post* 目录下生成同名的文件夹，页面需要的各种图片都可以放到此处。比如：\n　　```\n my-Publish\n ├── my.jpg\n ├── logo.jpg\n └── test.jpg\n my-Publish.md\n　　```\n新建名为 *my-Publish* 的新文章，文章需要的图片都放到该文件夹中。引用:\n　　```\n ![xx](my-Publish/my.jpg)\n　　```\n即可插入图片，*xx*可以随意。\n\n ","source":"_posts/hexo-advance.md","raw":"---\ntitle: hexo进阶\ndate: 2017-05-09 14:32:38\ncategories: hexo\ntags: hexo\ncomments: true\n---\n# 添加页面\n页面指的是分类页*categories*、标签页*tags*、关于页*about*等。使用以下命令生成以上页面参考[nexT](http://theme-next.iissnan.com/theme-settings.html):\n　　```\n $hexo new page categories\n $hexo new page tags\n $hexo new page about　\n　　```\n在 *hexo* 配置文件 *_config.yml* 文件中设置 *post_asset_folder* 为true,当新建页面后会自动生成一个同名文件夹，用于存储所需的资源图片等。生成以上页面后在主题配置文件中 *themes/nexT/_config.yml* 打开相关配置项:\n　　```\n menu:\n   home: /\n   categories: /categories\n   about: /about\n   archives: /archives\n   tags: /tags\n   #sitemap: /sitemap.xml\n   #commonweal: /404.html\n　　```\n<!--more-->\n设置自己的标签页面位于*hexo/source/tags*:\n  ```\ntitle: 标签\ndate: 2017-05-05 12:30:52\ntype: \"tags\"\ncomments: false\ntags:\n - Qt\n - Linux\n - Hexo\n - ROS\n　```\n可以在上面添加自己的标签。\n分类页的示例如下:\n　```\n title: 分类\n date: 2017-05-05 12:30:42\n type: \"categories\"\n comments: false\n　```\n# 发表文章\n新文章的发表使用以下命令：\n　　```\n $hexo new post \"文章名\" 或者 hexo n \"文章名\"\n　　```\n一个文章的开头应包含:\n　```\n title: #文章题目\n date: #日期\n tags: #标签\n categories: #分类\n　```\n文章存储在*hexo/source/_posts*目录下，后缀为*.md*。可以在适当位置插入以下符号用于部分显示:\n　　```\n<!--more-->\n　　```\n插入该符号之前的文字可以直接显示出来，之后的需要鼠标点击*阅读全文*来显示全部。\n　　```\n $hexo g //生成静态文件\n $hexo d //部署\n　　```\n# 添加RSS\n安装RSS插件：\n　　```\n $npm install hexo-generator-feed --save\n　　```\n修改*hexo/_config.yml*根目录下的全局配置文件，添加以下内容:\n　　```\n #RSS 订阅支持\n plugin:\n - hexo-generator-feed\n #feed Atom\n feed:\n   type: atom\n   path: atom.xml\n   limit: 20\n　　```\n修改主题目录下的配置文件*themes/nexT/_config.yml*\n　　```\n rss: /atom.xml\n　　```\n# 添加sitemap\n安装*sitemap*插件:\n　```\n $npm install hexo-generator-sitemap --save\n　　```\n修改*hexo/_config.yml*根目录下的全局配置文件:\n　　```\n sitemap:\n　　　path: sitemap.xml\n　　```\n添加baidusitemap：\n  ```\n $npm install hexo-generator-baidu-sitemap --save\n  ```\n修改*hexo/_config.yml*根目录下的全局配置文件:\n　　```\n baidusitemap:\n　　　path: baidusitemap.xml\n　　```\n# 添加侧栏社交链接\n修改主题目录下的配置文件*themes/nexT/_config.yml*\n　　```\n # Social Links\n # Key is the link label showing to end users.\n # Value is the target link (E.g. GitHub: https://github.com/iissnan)\n social:\n   Github: https://github.com/username\n   知乎: http://www.zhihu.com/people/username\n   Email: mailto: user@xx.com\n　　```\n设置链接的图标，对应的字段是*social_icons*在主题配置文件中:\n　```\n # Social Icons\n social_icons:\n enable: true\n # Icon Mappings\n GitHub: github\n Email: envelope\n　　```\nnexT使用的图标来自[FontAwesome](http://fontawesome.io/)，只要上面有的都可以配置到nexT使用。\n# 添加本地搜索\n安装*hexo-generator-serarch*\n　　```\n $npm install hexo-generator-search --save\n　　```\n修改*hexo/_config.yml*根目录下的全局配置文件添加:\n　　```\n search:\n  path: search.xml\n  field: post\n　　```\n# 设置头像\n在hexo/source/目录下建立images文件夹，将头像放置在该文件夹下，修改主题目录下的配置文件*themes/nexT/_config.yml*\n　　```\n avatar: /images/avatar.jpg\n　　```\n# 生成网站二维码\n二维码生成工具很多，这个[Custom QR Code Generator](https://www.unitag.io/qrcode)比较不错。生成后将二维码添加到关于页面。\n# 设置代码高亮主题\nNexT 使用[TomorrowTheme](https://github.com/chriskempson/tomorrow-theme)作为代码高亮，共有5款主题供选择。 打开主题配置文件*themes/nexT/_config.yml*修改:\n　　```\n # Code Highlight theme\n # Available value:\n #    normal | night | night eighties | night blue | night bright\n # https://github.com/chriskempson/tomorrow-theme\n highlight_theme: night bright\n\n　　```\n# 开启打赏功能\n只需要主题配置文件中填入微信和支付宝收款二维码图片地址，即可开启该功能。修改主题配置文件*themes/nexT/_config.yml*\n　　```\n reward_comment: 您的支持是我原创的动力\n  wechatpay: /path/to/wechat-reward-image\n  alipay: /path/to/alipay-reward-image\n\n　　```\n鼠标放置在二维码上面时，下面的字来回晃眼，修改如下文件:\n*themes/next/source/css/_common/components/post/post-reward.styl*\n注释掉以下代码：![Alt text](hexo-advance/pay.jpg)\n# 友情链接\n修改主题配置文件*themes/next/_config.yml*\n　　```\n # Blog rolls\n links_title: 友情链接\n #links_layout: block\n #links_layout: inline\n links:\n  hexo: https://hexo.io/zh-cn/docs\n  nexT: http://theme-next.iissnan.com/\n　　```\n# 开启动画背景\n[nexT](http://theme-next.iissnan.com/theme-settings.html) 自带两种背景动画效果，canvas_nest以及three_waves,在主题配置文件:\n *themes/next/_config.yml*中设置为true即可开启,\n　　```\n # Canvas-nest\n canvas_nest: true\n　　```\n# 开启JiaThis分享\n[Jiathis](http://www.jiathis.com/)为文章提供社会化分享功能。修改主题配置文件*themes/next/_config.yml*:\n　　```\n # Share\n jiathis: true\n　　```\n# 百度分享\n两种分享只能同时开启一种，百度分享需要在站点配置文件*hexo/_config.yml*中添加：\n　　```\n # baidu share\n baidushare: true #百度分享功能\n　　```\n另外需要在主题配置文件*themes/next/_config.yml*中开启百度分享功能：\n　　```\n # Baidu Share\n # Available value:\n #    button | slide\n # Warning: Baidu Share does not support https.\n baidushare: \n  type: button\n\n　　```\n# 添加DISQUS评论\n修改主题配置文件开启[DISQUS](https://disqus.com/)功能：\n　　```\n # Disqus\n disqus:\n  enable: true\n  shortname:\n  count: true\n　　```\n去[DISQUS](https://disqus.com/)官网注册，并获取自己的shortname,填写至主题配置文件中的对应字段中。取消一篇文章的评论只需要在文章的头部修改：\n　　```\n comments: false\n　　```\n# 设置网站图标\n图标制作网站[faviconer](http://www.faviconer.com/)，制作完成自己的网站图标后放到*hexo/source*根目录下，并修改主题配置文件：\n　　```\n# Put your favicon.ico into `hexo-site/source/` directory.\nfavicon: /favicon.ico\n　　```\n# 页面中插入图片\n图片的插入可以使用[MarkdownPad](http://markdownpad.com/ \"markdown Editor for Windows\")的语法：\n　　```\n ![图片名称](图片地址)\n　　```\n图片可以放在本地，也可以放在云端。建议放在云端，因为github的空间有限，云端可以使用[七牛云存储](https://www.qiniu.com/)。\n本地图片的插入有两种方法，早期的[hexo](https://hexo.io/zh-cn/docs/ \"hexo说明\")需要将图片放在网站根目录下的*source/*文件夹中比如*source/images/*文件夹，将图片放到该处，即可在页面中引用：\n　　```\n ![test](source/images/test.jgp)\n　　```\n[hexo](https://hexo.io/zh-cn/docs/ \"hexo说明\")2.0之后，引入新方法，参考[CodeFalling/hexo-asset-image](https://github.com/CodeFalling/hexo-asset-image)\n安装插件：\n　　```\n $npm install hexo-asset-image --save\n　　```\n 修改配置文件中的 *post_asset_folder:* 为 *true* ，这样新建文章时，会在 *_post* 目录下生成同名的文件夹，页面需要的各种图片都可以放到此处。比如：\n　　```\n my-Publish\n ├── my.jpg\n ├── logo.jpg\n └── test.jpg\n my-Publish.md\n　　```\n新建名为 *my-Publish* 的新文章，文章需要的图片都放到该文件夹中。引用:\n　　```\n ![xx](my-Publish/my.jpg)\n　　```\n即可插入图片，*xx*可以随意。\n\n ","slug":"hexo-advance","published":1,"updated":"2017-05-15T01:22:34.154Z","layout":"post","photos":[],"link":"","_id":"cj30tmxh00001ikinq4i2a2ac","content":"<h1 id=\"添加页面\"><a href=\"#添加页面\" class=\"headerlink\" title=\"添加页面\"></a>添加页面</h1><p>页面指的是分类页<em>categories</em>、标签页<em>tags</em>、关于页<em>about</em>等。使用以下命令生成以上页面参考<a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"external\">nexT</a>:<br>　　<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">$hexo</span> <span class=\"keyword\">new</span> page categories</div><div class=\"line\"><span class=\"built_in\">$hexo</span> <span class=\"keyword\">new</span> page tags</div><div class=\"line\"><span class=\"built_in\">$hexo</span> <span class=\"keyword\">new</span> page about</div></pre></td></tr></table></figure></p>\n<p>在 <em>hexo</em> 配置文件 <em>_config.yml</em> 文件中设置 <em>post_asset_folder</em> 为true,当新建页面后会自动生成一个同名文件夹，用于存储所需的资源图片等。生成以上页面后在主题配置文件中 <em>themes/nexT/_config.yml</em> 打开相关配置项:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">menu:</span></div><div class=\"line\"><span class=\"symbol\">  home:</span> /</div><div class=\"line\"><span class=\"symbol\">  categories:</span> /categories</div><div class=\"line\"><span class=\"symbol\">  about:</span> /about</div><div class=\"line\"><span class=\"symbol\">  archives:</span> /archives</div><div class=\"line\"><span class=\"symbol\">  tags:</span> /tags</div><div class=\"line\">  <span class=\"meta\">#sitemap: /sitemap.xml</span></div><div class=\"line\">  <span class=\"meta\">#commonweal: /404.html</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>设置自己的标签页面位于<em>hexo/source/tags</em>:<br>  <figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: 标签</div><div class=\"line\">date: 2017<span class=\"string\">-05</span><span class=\"string\">-05</span> 12:30:52</div><div class=\"line\">type: \"tags\"</div><div class=\"line\">comments: false</div><div class=\"line\"><span class=\"keyword\">tags:</span></div><div class=\"line\"> - Qt</div><div class=\"line\"> - Linux</div><div class=\"line\"> - Hexo</div><div class=\"line\"> - ROS</div></pre></td></tr></table></figure></p>\n<p>可以在上面添加自己的标签。<br>分类页的示例如下:<br>　<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">title:</span> 分类</div><div class=\"line\"><span class=\"string\">date:</span> <span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-05</span> <span class=\"number\">12</span>:<span class=\"number\">30</span>:<span class=\"number\">42</span></div><div class=\"line\"><span class=\"string\">type:</span> <span class=\"string\">\"categories\"</span></div><div class=\"line\"><span class=\"string\">comments:</span> <span class=\"literal\">false</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"发表文章\"><a href=\"#发表文章\" class=\"headerlink\" title=\"发表文章\"></a>发表文章</h1><p>新文章的发表使用以下命令：<br>　　<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">$hexo</span> <span class=\"keyword\">new</span> post <span class=\"string\">\"文章名\"</span> 或者 hexo n <span class=\"string\">\"文章名\"</span></div></pre></td></tr></table></figure></p>\n<p>一个文章的开头应包含:<br>　<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: #文章题目</div><div class=\"line\">date: #日期</div><div class=\"line\"><span class=\"keyword\">tags:</span> #标签</div><div class=\"line\">categories: #分类</div></pre></td></tr></table></figure></p>\n<p>文章存储在<em>hexo/source/_posts</em>目录下，后缀为<em>.md</em>。可以在适当位置插入以下符号用于部分显示:<br>　　<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--more--&gt;</span></div></pre></td></tr></table></figure></p>\n<p>插入该符号之前的文字可以直接显示出来，之后的需要鼠标点击<em>阅读全文</em>来显示全部。<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$hexo</span> g <span class=\"regexp\">//</span>生成静态文件</div><div class=\"line\"><span class=\"variable\">$hexo</span> d <span class=\"regexp\">//</span>部署</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加RSS\"><a href=\"#添加RSS\" class=\"headerlink\" title=\"添加RSS\"></a>添加RSS</h1><p>安装RSS插件：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-generator-feed --save</span></div></pre></td></tr></table></figure></p>\n<p>修改<em>hexo/_config.yml</em>根目录下的全局配置文件，添加以下内容:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#RSS 订阅支持</span></div><div class=\"line\"><span class=\"symbol\">plugin:</span></div><div class=\"line\">- hexo-generator-feed</div><div class=\"line\"><span class=\"meta\">#feed Atom</span></div><div class=\"line\"><span class=\"symbol\">feed:</span></div><div class=\"line\"><span class=\"symbol\">  type:</span> atom</div><div class=\"line\"><span class=\"symbol\">  path:</span> atom.xml</div><div class=\"line\"><span class=\"symbol\">  limit:</span> <span class=\"number\">20</span></div></pre></td></tr></table></figure></p>\n<p>修改主题目录下的配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">rss:</span> /atom.xml</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加sitemap\"><a href=\"#添加sitemap\" class=\"headerlink\" title=\"添加sitemap\"></a>添加sitemap</h1><p>安装<em>sitemap</em>插件:<br>　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-generator-sitemap --save</span></div></pre></td></tr></table></figure></p>\n<p>修改<em>hexo/_config.yml</em>根目录下的全局配置文件:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">sitemap:</span></div><div class=\"line\"><span class=\"symbol\">　　　path:</span> sitemap.xml</div></pre></td></tr></table></figure></p>\n<p>添加baidusitemap：<br>  <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-generator-baidu-sitemap --save</span></div></pre></td></tr></table></figure></p>\n<p>修改<em>hexo/_config.yml</em>根目录下的全局配置文件:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">baidusitemap:</span></div><div class=\"line\"><span class=\"symbol\">　　　path:</span> baidusitemap.xml</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加侧栏社交链接\"><a href=\"#添加侧栏社交链接\" class=\"headerlink\" title=\"添加侧栏社交链接\"></a>添加侧栏社交链接</h1><p>修改主题目录下的配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">Social</span> <span class=\"selector-tag\">Links</span></div><div class=\"line\"># <span class=\"selector-tag\">Key</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">link</span> <span class=\"selector-tag\">label</span> <span class=\"selector-tag\">showing</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">end</span> <span class=\"selector-tag\">users</span>.</div><div class=\"line\"># <span class=\"selector-tag\">Value</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">target</span> <span class=\"selector-tag\">link</span> (E.g. <span class=\"attribute\">GitHub</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/iissnan)</span></div><div class=\"line\"><span class=\"attribute\">social</span>:</div><div class=\"line\">  <span class=\"attribute\">Github</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/username</span></div><div class=\"line\">  知乎: <span class=\"attribute\">http</span>:<span class=\"comment\">//www.zhihu.com/people/username</span></div><div class=\"line\">  <span class=\"attribute\">Email</span>: <span class=\"attribute\">mailto</span>: user<span class=\"variable\">@xx</span>.com</div></pre></td></tr></table></figure></p>\n<p>设置链接的图标，对应的字段是<em>social_icons</em>在主题配置文件中:<br>　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Social Icons</span></div><div class=\"line\"><span class=\"attr\">social_icons:</span></div><div class=\"line\"><span class=\"attr\">enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\"># Icon Mappings</span></div><div class=\"line\"><span class=\"attr\">GitHub:</span> <span class=\"string\">github</span></div><div class=\"line\"><span class=\"attr\">Email:</span> <span class=\"string\">envelope</span></div></pre></td></tr></table></figure></p>\n<p>nexT使用的图标来自<a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"external\">FontAwesome</a>，只要上面有的都可以配置到nexT使用。</p>\n<h1 id=\"添加本地搜索\"><a href=\"#添加本地搜索\" class=\"headerlink\" title=\"添加本地搜索\"></a>添加本地搜索</h1><p>安装<em>hexo-generator-serarch</em><br>　　<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$npm <span class=\"keyword\">install</span> hexo-generator-<span class=\"keyword\">search</span> <span class=\"comment\">--save</span></div></pre></td></tr></table></figure></p>\n<p>修改<em>hexo/_config.yml</em>根目录下的全局配置文件添加:<br>　　<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">search:</div><div class=\"line\"> path: search.<span class=\"keyword\">xml</span></div><div class=\"line\"> <span class=\"title\">field</span>: post</div></pre></td></tr></table></figure></p>\n<h1 id=\"设置头像\"><a href=\"#设置头像\" class=\"headerlink\" title=\"设置头像\"></a>设置头像</h1><p>在hexo/source/目录下建立images文件夹，将头像放置在该文件夹下，修改主题目录下的配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">avatar:</span> <span class=\"meta-keyword\">/images/</span>avatar.jpg</div></pre></td></tr></table></figure></p>\n<h1 id=\"生成网站二维码\"><a href=\"#生成网站二维码\" class=\"headerlink\" title=\"生成网站二维码\"></a>生成网站二维码</h1><p>二维码生成工具很多，这个<a href=\"https://www.unitag.io/qrcode\" target=\"_blank\" rel=\"external\">Custom QR Code Generator</a>比较不错。生成后将二维码添加到关于页面。</p>\n<h1 id=\"设置代码高亮主题\"><a href=\"#设置代码高亮主题\" class=\"headerlink\" title=\"设置代码高亮主题\"></a>设置代码高亮主题</h1><p>NexT 使用<a href=\"https://github.com/chriskempson/tomorrow-theme\" target=\"_blank\" rel=\"external\">TomorrowTheme</a>作为代码高亮，共有5款主题供选择。 打开主题配置文件<em>themes/nexT/_config.yml</em>修改:<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Code Highlight theme</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Available value:</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    normal | night | night eighties | night blue | night bright</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> https://github.com/chriskempson/tomorrow-theme</span></div><div class=\"line\">highlight_theme: night bright</div></pre></td></tr></table></figure></p>\n<h1 id=\"开启打赏功能\"><a href=\"#开启打赏功能\" class=\"headerlink\" title=\"开启打赏功能\"></a>开启打赏功能</h1><p>只需要主题配置文件中填入微信和支付宝收款二维码图片地址，即可开启该功能。修改主题配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">reward_comment:</span> 您的支持是我原创的动力</div><div class=\"line\"><span class=\"symbol\"> wechatpay:</span> <span class=\"meta-keyword\">/path/</span>to/wechat-reward-image</div><div class=\"line\"><span class=\"symbol\"> alipay:</span> <span class=\"meta-keyword\">/path/</span>to/alipay-reward-image</div></pre></td></tr></table></figure></p>\n<p>鼠标放置在二维码上面时，下面的字来回晃眼，修改如下文件:<br><em>themes/next/source/css/_common/components/post/post-reward.styl</em><br>注释掉以下代码：<img src=\"/2017/05/09/hexo-advance/pay.jpg\" alt=\"Alt text\"></p>\n<h1 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h1><p>修改主题配置文件<em>themes/next/_config.yml</em><br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># Blog rolls</span></div><div class=\"line\"><span class=\"symbol\">links_title:</span> 友情链接</div><div class=\"line\"><span class=\"meta\">#links_layout: block</span></div><div class=\"line\"><span class=\"meta\">#links_layout: inline</span></div><div class=\"line\"><span class=\"symbol\">links:</span></div><div class=\"line\"><span class=\"symbol\"> hexo:</span> https:<span class=\"comment\">//hexo.io/zh-cn/docs</span></div><div class=\"line\"><span class=\"symbol\"> nexT:</span> http:<span class=\"comment\">//theme-next.iissnan.com/</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"开启动画背景\"><a href=\"#开启动画背景\" class=\"headerlink\" title=\"开启动画背景\"></a>开启动画背景</h1><p><a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"external\">nexT</a> 自带两种背景动画效果，canvas_nest以及three_waves,在主题配置文件:<br> <em>themes/next/_config.yml</em>中设置为true即可开启,<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Canvas-nest</span></div><div class=\"line\"><span class=\"attr\">canvas_nest:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"开启JiaThis分享\"><a href=\"#开启JiaThis分享\" class=\"headerlink\" title=\"开启JiaThis分享\"></a>开启JiaThis分享</h1><p><a href=\"http://www.jiathis.com/\" target=\"_blank\" rel=\"external\">Jiathis</a>为文章提供社会化分享功能。修改主题配置文件<em>themes/next/_config.yml</em>:<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Share</span></div><div class=\"line\"><span class=\"attr\">jiathis:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"百度分享\"><a href=\"#百度分享\" class=\"headerlink\" title=\"百度分享\"></a>百度分享</h1><p>两种分享只能同时开启一种，百度分享需要在站点配置文件<em>hexo/_config.yml</em>中添加：<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># baidu share</span></div><div class=\"line\"><span class=\"attr\">baidushare:</span> <span class=\"literal\">true</span> <span class=\"comment\">#百度分享功能</span></div></pre></td></tr></table></figure></p>\n<p>另外需要在主题配置文件<em>themes/next/_config.yml</em>中开启百度分享功能：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Baidu Share</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Available value:</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    button | slide</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Warning: Baidu Share does not support https.</span></div><div class=\"line\">baidushare: </div><div class=\"line\"> type: button</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加DISQUS评论\"><a href=\"#添加DISQUS评论\" class=\"headerlink\" title=\"添加DISQUS评论\"></a>添加DISQUS评论</h1><p>修改主题配置文件开启<a href=\"https://disqus.com/\" target=\"_blank\" rel=\"external\">DISQUS</a>功能：<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Disqus</span></div><div class=\"line\"><span class=\"attr\">disqus:</span></div><div class=\"line\"><span class=\"attr\"> enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\"> shortname:</span></div><div class=\"line\"><span class=\"attr\"> count:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>去<a href=\"https://disqus.com/\" target=\"_blank\" rel=\"external\">DISQUS</a>官网注册，并获取自己的shortname,填写至主题配置文件中的对应字段中。取消一篇文章的评论只需要在文章的头部修改：<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">comments:</span> <span class=\"literal\">false</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"设置网站图标\"><a href=\"#设置网站图标\" class=\"headerlink\" title=\"设置网站图标\"></a>设置网站图标</h1><p>图标制作网站<a href=\"http://www.faviconer.com/\" target=\"_blank\" rel=\"external\">faviconer</a>，制作完成自己的网站图标后放到<em>hexo/source</em>根目录下，并修改主题配置文件：<br>　　<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Put your favicon.ico into `hexo-site/source/` directory.</div><div class=\"line\">favicon: /favicon.ico</div></pre></td></tr></table></figure></p>\n<h1 id=\"页面中插入图片\"><a href=\"#页面中插入图片\" class=\"headerlink\" title=\"页面中插入图片\"></a>页面中插入图片</h1><p>图片的插入可以使用<a href=\"http://markdownpad.com/\" title=\"markdown Editor for Windows\" target=\"_blank\" rel=\"external\">MarkdownPad</a>的语法：<br>　　<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">图片名称</span>](<span class=\"link\">图片地址</span>)</div></pre></td></tr></table></figure></p>\n<p>图片可以放在本地，也可以放在云端。建议放在云端，因为github的空间有限，云端可以使用<a href=\"https://www.qiniu.com/\" target=\"_blank\" rel=\"external\">七牛云存储</a>。<br>本地图片的插入有两种方法，早期的<a href=\"https://hexo.io/zh-cn/docs/\" title=\"hexo说明\" target=\"_blank\" rel=\"external\">hexo</a>需要将图片放在网站根目录下的<em>source/</em>文件夹中比如<em>source/images/</em>文件夹，将图片放到该处，即可在页面中引用：<br>　　<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">test</span>](<span class=\"link\">source/images/test.jgp</span>)</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\" title=\"hexo说明\" target=\"_blank\" rel=\"external\">hexo</a>2.0之后，引入新方法，参考<a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">CodeFalling/hexo-asset-image</a><br>安装插件：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-asset-image --save</span></div></pre></td></tr></table></figure></p>\n<p> 修改配置文件中的 <em>post_asset_folder:</em> 为 <em>true</em> ，这样新建文章时，会在 <em>_post</em> 目录下生成同名的文件夹，页面需要的各种图片都可以放到此处。比如：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">my-Publish</div><div class=\"line\">├── my<span class=\"selector-class\">.jpg</span></div><div class=\"line\">├── logo<span class=\"selector-class\">.jpg</span></div><div class=\"line\">└── test<span class=\"selector-class\">.jpg</span></div><div class=\"line\">my-Publish.md</div></pre></td></tr></table></figure></p>\n<p>新建名为 <em>my-Publish</em> 的新文章，文章需要的图片都放到该文件夹中。引用:<br>　　<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">xx</span>](<span class=\"link\">my-Publish/my.jpg</span>)</div></pre></td></tr></table></figure></p>\n<p>即可插入图片，<em>xx</em>可以随意。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"添加页面\"><a href=\"#添加页面\" class=\"headerlink\" title=\"添加页面\"></a>添加页面</h1><p>页面指的是分类页<em>categories</em>、标签页<em>tags</em>、关于页<em>about</em>等。使用以下命令生成以上页面参考<a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"external\">nexT</a>:<br>　　<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">$hexo</span> <span class=\"keyword\">new</span> page categories</div><div class=\"line\"><span class=\"built_in\">$hexo</span> <span class=\"keyword\">new</span> page tags</div><div class=\"line\"><span class=\"built_in\">$hexo</span> <span class=\"keyword\">new</span> page about</div></pre></td></tr></table></figure></p>\n<p>在 <em>hexo</em> 配置文件 <em>_config.yml</em> 文件中设置 <em>post_asset_folder</em> 为true,当新建页面后会自动生成一个同名文件夹，用于存储所需的资源图片等。生成以上页面后在主题配置文件中 <em>themes/nexT/_config.yml</em> 打开相关配置项:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">menu:</span></div><div class=\"line\"><span class=\"symbol\">  home:</span> /</div><div class=\"line\"><span class=\"symbol\">  categories:</span> /categories</div><div class=\"line\"><span class=\"symbol\">  about:</span> /about</div><div class=\"line\"><span class=\"symbol\">  archives:</span> /archives</div><div class=\"line\"><span class=\"symbol\">  tags:</span> /tags</div><div class=\"line\">  <span class=\"meta\">#sitemap: /sitemap.xml</span></div><div class=\"line\">  <span class=\"meta\">#commonweal: /404.html</span></div></pre></td></tr></table></figure></p>","more":"<p>设置自己的标签页面位于<em>hexo/source/tags</em>:<br>  <figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: 标签</div><div class=\"line\">date: 2017<span class=\"string\">-05</span><span class=\"string\">-05</span> 12:30:52</div><div class=\"line\">type: \"tags\"</div><div class=\"line\">comments: false</div><div class=\"line\"><span class=\"keyword\">tags:</span></div><div class=\"line\"> - Qt</div><div class=\"line\"> - Linux</div><div class=\"line\"> - Hexo</div><div class=\"line\"> - ROS</div></pre></td></tr></table></figure></p>\n<p>可以在上面添加自己的标签。<br>分类页的示例如下:<br>　<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">title:</span> 分类</div><div class=\"line\"><span class=\"string\">date:</span> <span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-05</span> <span class=\"number\">12</span>:<span class=\"number\">30</span>:<span class=\"number\">42</span></div><div class=\"line\"><span class=\"string\">type:</span> <span class=\"string\">\"categories\"</span></div><div class=\"line\"><span class=\"string\">comments:</span> <span class=\"literal\">false</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"发表文章\"><a href=\"#发表文章\" class=\"headerlink\" title=\"发表文章\"></a>发表文章</h1><p>新文章的发表使用以下命令：<br>　　<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">$hexo</span> <span class=\"keyword\">new</span> post <span class=\"string\">\"文章名\"</span> 或者 hexo n <span class=\"string\">\"文章名\"</span></div></pre></td></tr></table></figure></p>\n<p>一个文章的开头应包含:<br>　<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: #文章题目</div><div class=\"line\">date: #日期</div><div class=\"line\"><span class=\"keyword\">tags:</span> #标签</div><div class=\"line\">categories: #分类</div></pre></td></tr></table></figure></p>\n<p>文章存储在<em>hexo/source/_posts</em>目录下，后缀为<em>.md</em>。可以在适当位置插入以下符号用于部分显示:<br>　　<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--more--&gt;</span></div></pre></td></tr></table></figure></p>\n<p>插入该符号之前的文字可以直接显示出来，之后的需要鼠标点击<em>阅读全文</em>来显示全部。<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$hexo</span> g <span class=\"regexp\">//</span>生成静态文件</div><div class=\"line\"><span class=\"variable\">$hexo</span> d <span class=\"regexp\">//</span>部署</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加RSS\"><a href=\"#添加RSS\" class=\"headerlink\" title=\"添加RSS\"></a>添加RSS</h1><p>安装RSS插件：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-generator-feed --save</span></div></pre></td></tr></table></figure></p>\n<p>修改<em>hexo/_config.yml</em>根目录下的全局配置文件，添加以下内容:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#RSS 订阅支持</span></div><div class=\"line\"><span class=\"symbol\">plugin:</span></div><div class=\"line\">- hexo-generator-feed</div><div class=\"line\"><span class=\"meta\">#feed Atom</span></div><div class=\"line\"><span class=\"symbol\">feed:</span></div><div class=\"line\"><span class=\"symbol\">  type:</span> atom</div><div class=\"line\"><span class=\"symbol\">  path:</span> atom.xml</div><div class=\"line\"><span class=\"symbol\">  limit:</span> <span class=\"number\">20</span></div></pre></td></tr></table></figure></p>\n<p>修改主题目录下的配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">rss:</span> /atom.xml</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加sitemap\"><a href=\"#添加sitemap\" class=\"headerlink\" title=\"添加sitemap\"></a>添加sitemap</h1><p>安装<em>sitemap</em>插件:<br>　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-generator-sitemap --save</span></div></pre></td></tr></table></figure></p>\n<p>修改<em>hexo/_config.yml</em>根目录下的全局配置文件:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">sitemap:</span></div><div class=\"line\"><span class=\"symbol\">　　　path:</span> sitemap.xml</div></pre></td></tr></table></figure></p>\n<p>添加baidusitemap：<br>  <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-generator-baidu-sitemap --save</span></div></pre></td></tr></table></figure></p>\n<p>修改<em>hexo/_config.yml</em>根目录下的全局配置文件:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">baidusitemap:</span></div><div class=\"line\"><span class=\"symbol\">　　　path:</span> baidusitemap.xml</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加侧栏社交链接\"><a href=\"#添加侧栏社交链接\" class=\"headerlink\" title=\"添加侧栏社交链接\"></a>添加侧栏社交链接</h1><p>修改主题目录下的配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">Social</span> <span class=\"selector-tag\">Links</span></div><div class=\"line\"># <span class=\"selector-tag\">Key</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">link</span> <span class=\"selector-tag\">label</span> <span class=\"selector-tag\">showing</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">end</span> <span class=\"selector-tag\">users</span>.</div><div class=\"line\"># <span class=\"selector-tag\">Value</span> <span class=\"selector-tag\">is</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">target</span> <span class=\"selector-tag\">link</span> (E.g. <span class=\"attribute\">GitHub</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/iissnan)</span></div><div class=\"line\"><span class=\"attribute\">social</span>:</div><div class=\"line\">  <span class=\"attribute\">Github</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/username</span></div><div class=\"line\">  知乎: <span class=\"attribute\">http</span>:<span class=\"comment\">//www.zhihu.com/people/username</span></div><div class=\"line\">  <span class=\"attribute\">Email</span>: <span class=\"attribute\">mailto</span>: user<span class=\"variable\">@xx</span>.com</div></pre></td></tr></table></figure></p>\n<p>设置链接的图标，对应的字段是<em>social_icons</em>在主题配置文件中:<br>　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Social Icons</span></div><div class=\"line\"><span class=\"attr\">social_icons:</span></div><div class=\"line\"><span class=\"attr\">enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\"># Icon Mappings</span></div><div class=\"line\"><span class=\"attr\">GitHub:</span> <span class=\"string\">github</span></div><div class=\"line\"><span class=\"attr\">Email:</span> <span class=\"string\">envelope</span></div></pre></td></tr></table></figure></p>\n<p>nexT使用的图标来自<a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"external\">FontAwesome</a>，只要上面有的都可以配置到nexT使用。</p>\n<h1 id=\"添加本地搜索\"><a href=\"#添加本地搜索\" class=\"headerlink\" title=\"添加本地搜索\"></a>添加本地搜索</h1><p>安装<em>hexo-generator-serarch</em><br>　　<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$npm <span class=\"keyword\">install</span> hexo-generator-<span class=\"keyword\">search</span> <span class=\"comment\">--save</span></div></pre></td></tr></table></figure></p>\n<p>修改<em>hexo/_config.yml</em>根目录下的全局配置文件添加:<br>　　<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">search:</div><div class=\"line\"> path: search.<span class=\"keyword\">xml</span></div><div class=\"line\"> <span class=\"title\">field</span>: post</div></pre></td></tr></table></figure></p>\n<h1 id=\"设置头像\"><a href=\"#设置头像\" class=\"headerlink\" title=\"设置头像\"></a>设置头像</h1><p>在hexo/source/目录下建立images文件夹，将头像放置在该文件夹下，修改主题目录下的配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">avatar:</span> <span class=\"meta-keyword\">/images/</span>avatar.jpg</div></pre></td></tr></table></figure></p>\n<h1 id=\"生成网站二维码\"><a href=\"#生成网站二维码\" class=\"headerlink\" title=\"生成网站二维码\"></a>生成网站二维码</h1><p>二维码生成工具很多，这个<a href=\"https://www.unitag.io/qrcode\" target=\"_blank\" rel=\"external\">Custom QR Code Generator</a>比较不错。生成后将二维码添加到关于页面。</p>\n<h1 id=\"设置代码高亮主题\"><a href=\"#设置代码高亮主题\" class=\"headerlink\" title=\"设置代码高亮主题\"></a>设置代码高亮主题</h1><p>NexT 使用<a href=\"https://github.com/chriskempson/tomorrow-theme\" target=\"_blank\" rel=\"external\">TomorrowTheme</a>作为代码高亮，共有5款主题供选择。 打开主题配置文件<em>themes/nexT/_config.yml</em>修改:<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Code Highlight theme</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Available value:</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    normal | night | night eighties | night blue | night bright</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> https://github.com/chriskempson/tomorrow-theme</span></div><div class=\"line\">highlight_theme: night bright</div></pre></td></tr></table></figure></p>\n<h1 id=\"开启打赏功能\"><a href=\"#开启打赏功能\" class=\"headerlink\" title=\"开启打赏功能\"></a>开启打赏功能</h1><p>只需要主题配置文件中填入微信和支付宝收款二维码图片地址，即可开启该功能。修改主题配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">reward_comment:</span> 您的支持是我原创的动力</div><div class=\"line\"><span class=\"symbol\"> wechatpay:</span> <span class=\"meta-keyword\">/path/</span>to/wechat-reward-image</div><div class=\"line\"><span class=\"symbol\"> alipay:</span> <span class=\"meta-keyword\">/path/</span>to/alipay-reward-image</div></pre></td></tr></table></figure></p>\n<p>鼠标放置在二维码上面时，下面的字来回晃眼，修改如下文件:<br><em>themes/next/source/css/_common/components/post/post-reward.styl</em><br>注释掉以下代码：<img src=\"/2017/05/09/hexo-advance/pay.jpg\" alt=\"Alt text\"></p>\n<h1 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h1><p>修改主题配置文件<em>themes/next/_config.yml</em><br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># Blog rolls</span></div><div class=\"line\"><span class=\"symbol\">links_title:</span> 友情链接</div><div class=\"line\"><span class=\"meta\">#links_layout: block</span></div><div class=\"line\"><span class=\"meta\">#links_layout: inline</span></div><div class=\"line\"><span class=\"symbol\">links:</span></div><div class=\"line\"><span class=\"symbol\"> hexo:</span> https:<span class=\"comment\">//hexo.io/zh-cn/docs</span></div><div class=\"line\"><span class=\"symbol\"> nexT:</span> http:<span class=\"comment\">//theme-next.iissnan.com/</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"开启动画背景\"><a href=\"#开启动画背景\" class=\"headerlink\" title=\"开启动画背景\"></a>开启动画背景</h1><p><a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"external\">nexT</a> 自带两种背景动画效果，canvas_nest以及three_waves,在主题配置文件:<br> <em>themes/next/_config.yml</em>中设置为true即可开启,<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Canvas-nest</span></div><div class=\"line\"><span class=\"attr\">canvas_nest:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"开启JiaThis分享\"><a href=\"#开启JiaThis分享\" class=\"headerlink\" title=\"开启JiaThis分享\"></a>开启JiaThis分享</h1><p><a href=\"http://www.jiathis.com/\" target=\"_blank\" rel=\"external\">Jiathis</a>为文章提供社会化分享功能。修改主题配置文件<em>themes/next/_config.yml</em>:<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Share</span></div><div class=\"line\"><span class=\"attr\">jiathis:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"百度分享\"><a href=\"#百度分享\" class=\"headerlink\" title=\"百度分享\"></a>百度分享</h1><p>两种分享只能同时开启一种，百度分享需要在站点配置文件<em>hexo/_config.yml</em>中添加：<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># baidu share</span></div><div class=\"line\"><span class=\"attr\">baidushare:</span> <span class=\"literal\">true</span> <span class=\"comment\">#百度分享功能</span></div></pre></td></tr></table></figure></p>\n<p>另外需要在主题配置文件<em>themes/next/_config.yml</em>中开启百度分享功能：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Baidu Share</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Available value:</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    button | slide</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Warning: Baidu Share does not support https.</span></div><div class=\"line\">baidushare: </div><div class=\"line\"> type: button</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加DISQUS评论\"><a href=\"#添加DISQUS评论\" class=\"headerlink\" title=\"添加DISQUS评论\"></a>添加DISQUS评论</h1><p>修改主题配置文件开启<a href=\"https://disqus.com/\" target=\"_blank\" rel=\"external\">DISQUS</a>功能：<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Disqus</span></div><div class=\"line\"><span class=\"attr\">disqus:</span></div><div class=\"line\"><span class=\"attr\"> enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\"> shortname:</span></div><div class=\"line\"><span class=\"attr\"> count:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>去<a href=\"https://disqus.com/\" target=\"_blank\" rel=\"external\">DISQUS</a>官网注册，并获取自己的shortname,填写至主题配置文件中的对应字段中。取消一篇文章的评论只需要在文章的头部修改：<br>　　<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">comments:</span> <span class=\"literal\">false</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"设置网站图标\"><a href=\"#设置网站图标\" class=\"headerlink\" title=\"设置网站图标\"></a>设置网站图标</h1><p>图标制作网站<a href=\"http://www.faviconer.com/\" target=\"_blank\" rel=\"external\">faviconer</a>，制作完成自己的网站图标后放到<em>hexo/source</em>根目录下，并修改主题配置文件：<br>　　<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Put your favicon.ico into `hexo-site/source/` directory.</div><div class=\"line\">favicon: /favicon.ico</div></pre></td></tr></table></figure></p>\n<h1 id=\"页面中插入图片\"><a href=\"#页面中插入图片\" class=\"headerlink\" title=\"页面中插入图片\"></a>页面中插入图片</h1><p>图片的插入可以使用<a href=\"http://markdownpad.com/\" title=\"markdown Editor for Windows\" target=\"_blank\" rel=\"external\">MarkdownPad</a>的语法：<br>　　<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">图片名称</span>](<span class=\"link\">图片地址</span>)</div></pre></td></tr></table></figure></p>\n<p>图片可以放在本地，也可以放在云端。建议放在云端，因为github的空间有限，云端可以使用<a href=\"https://www.qiniu.com/\" target=\"_blank\" rel=\"external\">七牛云存储</a>。<br>本地图片的插入有两种方法，早期的<a href=\"https://hexo.io/zh-cn/docs/\" title=\"hexo说明\" target=\"_blank\" rel=\"external\">hexo</a>需要将图片放在网站根目录下的<em>source/</em>文件夹中比如<em>source/images/</em>文件夹，将图片放到该处，即可在页面中引用：<br>　　<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">test</span>](<span class=\"link\">source/images/test.jgp</span>)</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\" title=\"hexo说明\" target=\"_blank\" rel=\"external\">hexo</a>2.0之后，引入新方法，参考<a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">CodeFalling/hexo-asset-image</a><br>安装插件：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> install hexo-asset-image --save</span></div></pre></td></tr></table></figure></p>\n<p> 修改配置文件中的 <em>post_asset_folder:</em> 为 <em>true</em> ，这样新建文章时，会在 <em>_post</em> 目录下生成同名的文件夹，页面需要的各种图片都可以放到此处。比如：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">my-Publish</div><div class=\"line\">├── my<span class=\"selector-class\">.jpg</span></div><div class=\"line\">├── logo<span class=\"selector-class\">.jpg</span></div><div class=\"line\">└── test<span class=\"selector-class\">.jpg</span></div><div class=\"line\">my-Publish.md</div></pre></td></tr></table></figure></p>\n<p>新建名为 <em>my-Publish</em> 的新文章，文章需要的图片都放到该文件夹中。引用:<br>　　<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">xx</span>](<span class=\"link\">my-Publish/my.jpg</span>)</div></pre></td></tr></table></figure></p>\n<p>即可插入图片，<em>xx</em>可以随意。</p>"},{"title":"hexo+github建立个人博客","date":"2017-05-07T03:07:34.000Z","comments":1,"_content":"# 前言\n*hexo*是一个高效简洁的静态博客框架，基于*Node.js*使用Markdown解析文章，几秒内即可利用靓丽的主题生成静态网页。\n\n#环境： \n*windows10 64bits*\n#所需软件： \n　　1. [Node.js](https://nodejs.org/en/ \"Java Script运行环境\")　基于Chrome V8引擎的JavaScript运行环境；\n　　2. [Git-for-windows](https://github.com/git-for-windows/git/releases \"git for windows\")　windows平台下git 运行环境；\n　　3. [MarkdownPad](http://markdownpad.com/ \"markdown Editor for Windows\")　博客撰写工具\n\n*开始之前先去 [github](www.github.com) 注册一个账户，并新建一个名为username.github.io的仓库，最后生成的仓库地址：https://github.com/username/username.github.io  注：username替换为自己的用户名*\n# hexo安装与配置\n首先在本地建立自己的博客文件夹，比如 *F:\\github\\hexo*，进入该文件夹内，右键点击*Git Bash Here*,打开*git for windows*环境，开始安装 [hexo](https://hexo.io/zh-cn/docs/ \"hexo说明\")：\n<!--more-->\n　　```\n　$npm install hexo-cli -g //注: -g表示全局安装\n　$npm install hexo-server -g //注： hexo3.0之后server模块是独立的,需要单独安装\n　　```\n完成之后可以通过命令查看*hexo*是否安装成功：\n　　```\n　$hexo -v\n　　```\n*hexo*根目录下的*_config.yml*文件是全局配置文件，修改该文件实现自己的配置。具体可参考[hexo](https://hexo.io/zh-cn/docs/ \"hexo说明\")官网。\n## hexo常用命令\nhexo常用命令可以参考hexo的帮助说明，下面列举几个常用命令：\n　　```\n　$hexo g //等同于hexo generate,用于生成静态文件\n　$hexo s //等同于hexo server,用于启动本地服务器，预览网页\n　$hexo d //等同于hexo deploy,用于部署文件到github\n　　```\n\n## 建站\n在自己的博客文件夹下*F:\\github\\hexo*,执行命令：\n　　```\n　$hexo init //初始化，自动下载搭建网站所需的所有文件\n　$npm install //安装依赖包\n　$hexo g //产生静态文件\n　$hexo s //启动本地服务器，开启预览功能\n　　```\n这个时候在浏览器输入localhost:4000即可查看到生成的静态网页：![Alt text](hexo-blog/hello-world.jpg)\n## 部署到github\n在hexo根目录下找到配置文件_config.yml，使用[MarkdownPad](http://markdownpad.com/ \"markdown Editor for Windows\") 打开，编辑最后的deploy字段，将自己的github仓库地址输入进去：\n　　```\n　deploy:\n　　　type: git //注意冒号':'后面的空格一定要有\n　　　repository: https://github.com/username/username.github.io.git\n　　　branch: master\n　　```\n### 配置SSH Key\n在桌面空白处鼠标右键选择*Git Bash Here*,输入以下命令配置SSH Key:\n　　```\n $ssh-keygen -t rsa -C \"your_email@youremail.com\"\n　　```\n引号里面的内容输入邮箱地址，然后回车，会提示文件保存的路径，这时候按回车键确认，然后会提示你输入密码，然后会确认输入一次，在*c:/user/username/.ssh/*文件夹内看到生成了两个文件，一个是id_rsa，另一个是id_rsa.pub，打开id_rsa.pub然后选中里面的全部内容，复制下来。登录[github](https://github.com/login),点击*setting*,左边有一个*SSH and GPG keys*选项，进入*New SSH*选项，*title*随意，将之前复制的内容粘贴到key里面去。回到*Git bash*命令行，输入以下命令验证:\n　　```\n $ssh -T git@github.com\n　　```\n### 配置用户名和密码\n　　```\n $git config --global user.name \"your username\"  \n $git config --global user.email \"your_email@youremail.com\"\n　　```\n重新生成一下静态文件：\n　　```\n　$hexo clean //清除缓存文件db.json和已生成的静态文件public\n　$hexo g //产生静态文件\n　$hexo d //部署到github\n　　```\n在运行*hexo d*之前需要安装git部署工具\n　　```\n　$npm install hexo-deployer-git -g\n　　```\n\n第一次执行*hexo d*会弹出对话框提示输入github的用户名和密码。此时在浏览器输入：\n*https://github.com/username/username.github.io*即可看到自己的博客已经搭建成功。\n注: username替换为自己的用户名.\n# nexT主题\nhexo安装完成后，默认的主题是landscape，保存在hexo/themes/文件夹下。[nexT](http://theme-next.iissnan.com/) 主题需要自行下载。在博客文件目录下F:\\github\\hexo右键单击Git Bash Here，输入命令:\n　　```\n　$git clone https://github.com/iissnan/hexo-theme-next.git themes/nexT\n　　```\n下载后的nexT主题会保存在themes目录下。修改hexo根目录下的配置文件_config.yml使主题生效:\n　　```\n　# Extensions\n　## Plugins: https://hexo.io/plugins/\n　## Themes: https://hexo.io/themes/\n　theme: nexT\n　　```\n接下来选择nexT的Scheme，打开nexT的配置文件themes/nexT/_config.yml中，修改:\n　　```\n　# Schemes\n　#scheme: Muse //默认Scheme，黑白主调，大量留白\n　#scheme: Mist //紧凑版本，整洁有序\n　scheme: Pisces //双栏显示，清新\n　　```\n更多的设置请参考: [nexT](http://theme-next.iissnan.com/getting-started.html)\n## 设置语言\n打开hexo的配置文件F:\\github\\hexo\\_config.yml，修改:\n　　```\n　language: zh-Hans //中文汉字\n　　```\n# 访问量统计\n### 文章阅读量统计\n使用 [leancloud](https://leancloud.cn) 实现文章阅读次数统计。注册完成后，点击访问控制台，选择创建新应用:![Alt-text](hexo-blog/leancloudc.jpg)\n\n创建名为Counter的class。之后找到该应用的AppID、AppKey，将这两个值写入到nexT的主题配置文件中_config.yml:\n　　```\n　# Show number of visitors to each article.\n　# You can visit https://leancloud.cn get AppID and AppKey.\n　leancloud_visitors:\n  　　enable: true\n  　　app_id: #<app_id> //复制刚才创建的应用的AppID\n  　　app_key: #<app_key> //复制刚才创建的应用的AppKey\n　　```\n为了安全，将自己的域名加入安全中心->web安全域名中，防止恶意修改。完成后部署网站，看效果是不是已经有了文章阅读量显示了。\n### 站点访问统计\n使用 [不蒜子](http://ibruce.info/2015/04/04/busuanzi/) 脚本实现。\n在themes\\nexT\\layout\\_partials目录下找到文件footer.swig，在文件的头部添加:\n　　```\n　<script async src=\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\">\n　</script>\n　　```\n\n　　\n\n　　\n　　\n\n　　","source":"_posts/hexo-blog.md","raw":"---\ntitle: hexo+github建立个人博客\ndate: 2017-05-07 11:07:34\ncategories: hexo\ntags: hexo\ncomments: true\n---\n# 前言\n*hexo*是一个高效简洁的静态博客框架，基于*Node.js*使用Markdown解析文章，几秒内即可利用靓丽的主题生成静态网页。\n\n#环境： \n*windows10 64bits*\n#所需软件： \n　　1. [Node.js](https://nodejs.org/en/ \"Java Script运行环境\")　基于Chrome V8引擎的JavaScript运行环境；\n　　2. [Git-for-windows](https://github.com/git-for-windows/git/releases \"git for windows\")　windows平台下git 运行环境；\n　　3. [MarkdownPad](http://markdownpad.com/ \"markdown Editor for Windows\")　博客撰写工具\n\n*开始之前先去 [github](www.github.com) 注册一个账户，并新建一个名为username.github.io的仓库，最后生成的仓库地址：https://github.com/username/username.github.io  注：username替换为自己的用户名*\n# hexo安装与配置\n首先在本地建立自己的博客文件夹，比如 *F:\\github\\hexo*，进入该文件夹内，右键点击*Git Bash Here*,打开*git for windows*环境，开始安装 [hexo](https://hexo.io/zh-cn/docs/ \"hexo说明\")：\n<!--more-->\n　　```\n　$npm install hexo-cli -g //注: -g表示全局安装\n　$npm install hexo-server -g //注： hexo3.0之后server模块是独立的,需要单独安装\n　　```\n完成之后可以通过命令查看*hexo*是否安装成功：\n　　```\n　$hexo -v\n　　```\n*hexo*根目录下的*_config.yml*文件是全局配置文件，修改该文件实现自己的配置。具体可参考[hexo](https://hexo.io/zh-cn/docs/ \"hexo说明\")官网。\n## hexo常用命令\nhexo常用命令可以参考hexo的帮助说明，下面列举几个常用命令：\n　　```\n　$hexo g //等同于hexo generate,用于生成静态文件\n　$hexo s //等同于hexo server,用于启动本地服务器，预览网页\n　$hexo d //等同于hexo deploy,用于部署文件到github\n　　```\n\n## 建站\n在自己的博客文件夹下*F:\\github\\hexo*,执行命令：\n　　```\n　$hexo init //初始化，自动下载搭建网站所需的所有文件\n　$npm install //安装依赖包\n　$hexo g //产生静态文件\n　$hexo s //启动本地服务器，开启预览功能\n　　```\n这个时候在浏览器输入localhost:4000即可查看到生成的静态网页：![Alt text](hexo-blog/hello-world.jpg)\n## 部署到github\n在hexo根目录下找到配置文件_config.yml，使用[MarkdownPad](http://markdownpad.com/ \"markdown Editor for Windows\") 打开，编辑最后的deploy字段，将自己的github仓库地址输入进去：\n　　```\n　deploy:\n　　　type: git //注意冒号':'后面的空格一定要有\n　　　repository: https://github.com/username/username.github.io.git\n　　　branch: master\n　　```\n### 配置SSH Key\n在桌面空白处鼠标右键选择*Git Bash Here*,输入以下命令配置SSH Key:\n　　```\n $ssh-keygen -t rsa -C \"your_email@youremail.com\"\n　　```\n引号里面的内容输入邮箱地址，然后回车，会提示文件保存的路径，这时候按回车键确认，然后会提示你输入密码，然后会确认输入一次，在*c:/user/username/.ssh/*文件夹内看到生成了两个文件，一个是id_rsa，另一个是id_rsa.pub，打开id_rsa.pub然后选中里面的全部内容，复制下来。登录[github](https://github.com/login),点击*setting*,左边有一个*SSH and GPG keys*选项，进入*New SSH*选项，*title*随意，将之前复制的内容粘贴到key里面去。回到*Git bash*命令行，输入以下命令验证:\n　　```\n $ssh -T git@github.com\n　　```\n### 配置用户名和密码\n　　```\n $git config --global user.name \"your username\"  \n $git config --global user.email \"your_email@youremail.com\"\n　　```\n重新生成一下静态文件：\n　　```\n　$hexo clean //清除缓存文件db.json和已生成的静态文件public\n　$hexo g //产生静态文件\n　$hexo d //部署到github\n　　```\n在运行*hexo d*之前需要安装git部署工具\n　　```\n　$npm install hexo-deployer-git -g\n　　```\n\n第一次执行*hexo d*会弹出对话框提示输入github的用户名和密码。此时在浏览器输入：\n*https://github.com/username/username.github.io*即可看到自己的博客已经搭建成功。\n注: username替换为自己的用户名.\n# nexT主题\nhexo安装完成后，默认的主题是landscape，保存在hexo/themes/文件夹下。[nexT](http://theme-next.iissnan.com/) 主题需要自行下载。在博客文件目录下F:\\github\\hexo右键单击Git Bash Here，输入命令:\n　　```\n　$git clone https://github.com/iissnan/hexo-theme-next.git themes/nexT\n　　```\n下载后的nexT主题会保存在themes目录下。修改hexo根目录下的配置文件_config.yml使主题生效:\n　　```\n　# Extensions\n　## Plugins: https://hexo.io/plugins/\n　## Themes: https://hexo.io/themes/\n　theme: nexT\n　　```\n接下来选择nexT的Scheme，打开nexT的配置文件themes/nexT/_config.yml中，修改:\n　　```\n　# Schemes\n　#scheme: Muse //默认Scheme，黑白主调，大量留白\n　#scheme: Mist //紧凑版本，整洁有序\n　scheme: Pisces //双栏显示，清新\n　　```\n更多的设置请参考: [nexT](http://theme-next.iissnan.com/getting-started.html)\n## 设置语言\n打开hexo的配置文件F:\\github\\hexo\\_config.yml，修改:\n　　```\n　language: zh-Hans //中文汉字\n　　```\n# 访问量统计\n### 文章阅读量统计\n使用 [leancloud](https://leancloud.cn) 实现文章阅读次数统计。注册完成后，点击访问控制台，选择创建新应用:![Alt-text](hexo-blog/leancloudc.jpg)\n\n创建名为Counter的class。之后找到该应用的AppID、AppKey，将这两个值写入到nexT的主题配置文件中_config.yml:\n　　```\n　# Show number of visitors to each article.\n　# You can visit https://leancloud.cn get AppID and AppKey.\n　leancloud_visitors:\n  　　enable: true\n  　　app_id: #<app_id> //复制刚才创建的应用的AppID\n  　　app_key: #<app_key> //复制刚才创建的应用的AppKey\n　　```\n为了安全，将自己的域名加入安全中心->web安全域名中，防止恶意修改。完成后部署网站，看效果是不是已经有了文章阅读量显示了。\n### 站点访问统计\n使用 [不蒜子](http://ibruce.info/2015/04/04/busuanzi/) 脚本实现。\n在themes\\nexT\\layout\\_partials目录下找到文件footer.swig，在文件的头部添加:\n　　```\n　<script async src=\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\">\n　</script>\n　　```\n\n　　\n\n　　\n　　\n\n　　","slug":"hexo-blog","published":1,"updated":"2017-05-14T23:56:22.522Z","layout":"post","photos":[],"link":"","_id":"cj30tmxh50003ikinql5q6j2y","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><em>hexo</em>是一个高效简洁的静态博客框架，基于<em>Node.js</em>使用Markdown解析文章，几秒内即可利用靓丽的主题生成静态网页。</p>\n<p>#环境：<br><em>windows10 64bits</em></p>\n<p>#所需软件：<br>　　1. <a href=\"https://nodejs.org/en/\" title=\"Java Script运行环境\" target=\"_blank\" rel=\"external\">Node.js</a>　基于Chrome V8引擎的JavaScript运行环境；<br>　　2. <a href=\"https://github.com/git-for-windows/git/releases\" title=\"git for windows\" target=\"_blank\" rel=\"external\">Git-for-windows</a>　windows平台下git 运行环境；<br>　　3. <a href=\"http://markdownpad.com/\" title=\"markdown Editor for Windows\" target=\"_blank\" rel=\"external\">MarkdownPad</a>　博客撰写工具</p>\n<p><em>开始之前先去 <a href=\"www.github.com\">github</a> 注册一个账户，并新建一个名为username.github.io的仓库，最后生成的仓库地址：<a href=\"https://github.com/username/username.github.io\" target=\"_blank\" rel=\"external\">https://github.com/username/username.github.io</a>  注：username替换为自己的用户名</em></p>\n<h1 id=\"hexo安装与配置\"><a href=\"#hexo安装与配置\" class=\"headerlink\" title=\"hexo安装与配置\"></a>hexo安装与配置</h1><p>首先在本地建立自己的博客文件夹，比如 <em>F:\\github\\hexo</em>，进入该文件夹内，右键点击<em>Git Bash Here</em>,打开<em>git for windows</em>环境，开始安装 <a href=\"https://hexo.io/zh-cn/docs/\" title=\"hexo说明\" target=\"_blank\" rel=\"external\">hexo</a>：<br><a id=\"more\"></a><br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$npm</span> install hexo-<span class=\"keyword\">cli</span> -<span class=\"keyword\">g</span> <span class=\"comment\">//注: -g表示全局安装</span></div><div class=\"line\">　<span class=\"variable\">$npm</span> install hexo-server -<span class=\"keyword\">g</span> <span class=\"comment\">//注： hexo3.0之后server模块是独立的,需要单独安装</span></div></pre></td></tr></table></figure></p>\n<p>完成之后可以通过命令查看<em>hexo</em>是否安装成功：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">　$</span><span class=\"bash\">hexo -v</span></div></pre></td></tr></table></figure></p>\n<p><em>hexo</em>根目录下的<em>_config.yml</em>文件是全局配置文件，修改该文件实现自己的配置。具体可参考<a href=\"https://hexo.io/zh-cn/docs/\" title=\"hexo说明\" target=\"_blank\" rel=\"external\">hexo</a>官网。</p>\n<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><p>hexo常用命令可以参考hexo的帮助说明，下面列举几个常用命令：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$hexo</span> g <span class=\"regexp\">//</span>等同于hexo generate,用于生成静态文件</div><div class=\"line\">　<span class=\"variable\">$hexo</span> s <span class=\"regexp\">//</span>等同于hexo server,用于启动本地服务器，预览网页</div><div class=\"line\">　<span class=\"variable\">$hexo</span> d <span class=\"regexp\">//</span>等同于hexo deploy,用于部署文件到github</div></pre></td></tr></table></figure></p>\n<h2 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h2><p>在自己的博客文件夹下<em>F:\\github\\hexo</em>,执行命令：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$hexo</span> init <span class=\"regexp\">//</span>初始化，自动下载搭建网站所需的所有文件</div><div class=\"line\">　<span class=\"variable\">$npm</span> install <span class=\"regexp\">//</span>安装依赖包</div><div class=\"line\">　<span class=\"variable\">$hexo</span> g <span class=\"regexp\">//</span>产生静态文件</div><div class=\"line\">　<span class=\"variable\">$hexo</span> s <span class=\"regexp\">//</span>启动本地服务器，开启预览功能</div></pre></td></tr></table></figure></p>\n<p>这个时候在浏览器输入localhost:4000即可查看到生成的静态网页：<img src=\"/2017/05/07/hexo-blog/hello-world.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"部署到github\"><a href=\"#部署到github\" class=\"headerlink\" title=\"部署到github\"></a>部署到github</h2><p>在hexo根目录下找到配置文件_config.yml，使用<a href=\"http://markdownpad.com/\" title=\"markdown Editor for Windows\" target=\"_blank\" rel=\"external\">MarkdownPad</a> 打开，编辑最后的deploy字段，将自己的github仓库地址输入进去：<br>　　<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"attribute\">deploy</span>:</div><div class=\"line\">　　　<span class=\"attribute\">type</span>: git <span class=\"comment\">//注意冒号':'后面的空格一定要有</span></div><div class=\"line\">　　　<span class=\"attribute\">repository</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/username/username.github.io.git</span></div><div class=\"line\">　　　<span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置SSH-Key\"><a href=\"#配置SSH-Key\" class=\"headerlink\" title=\"配置SSH Key\"></a>配置SSH Key</h3><p>在桌面空白处鼠标右键选择<em>Git Bash Here</em>,输入以下命令配置SSH Key:<br>　　<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></div></pre></td></tr></table></figure></p>\n<p>引号里面的内容输入邮箱地址，然后回车，会提示文件保存的路径，这时候按回车键确认，然后会提示你输入密码，然后会确认输入一次，在<em>c:/user/username/.ssh/</em>文件夹内看到生成了两个文件，一个是id_rsa，另一个是id_rsa.pub，打开id_rsa.pub然后选中里面的全部内容，复制下来。登录<a href=\"https://github.com/login\" target=\"_blank\" rel=\"external\">github</a>,点击<em>setting</em>,左边有一个<em>SSH and GPG keys</em>选项，进入<em>New SSH</em>选项，<em>title</em>随意，将之前复制的内容粘贴到key里面去。回到<em>Git bash</em>命令行，输入以下命令验证:<br>　　<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh -T git<span class=\"symbol\">@github</span>.com</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置用户名和密码\"><a href=\"#配置用户名和密码\" class=\"headerlink\" title=\"配置用户名和密码\"></a>配置用户名和密码</h3><p>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"your username\"</span>  </div><div class=\"line\"><span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"your_email@youremail.com\"</span></div></pre></td></tr></table></figure></p>\n<p>重新生成一下静态文件：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$hexo</span> clean <span class=\"regexp\">//</span>清除缓存文件db.json和已生成的静态文件public</div><div class=\"line\">　<span class=\"variable\">$hexo</span> g <span class=\"regexp\">//</span>产生静态文件</div><div class=\"line\">　<span class=\"variable\">$hexo</span> d <span class=\"regexp\">//</span>部署到github</div></pre></td></tr></table></figure></p>\n<p>在运行<em>hexo d</em>之前需要安装git部署工具<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">　$</span><span class=\"bash\">npm install hexo-deployer-git -g</span></div></pre></td></tr></table></figure></p>\n<p>第一次执行<em>hexo d</em>会弹出对话框提示输入github的用户名和密码。此时在浏览器输入：<br><em><a href=\"https://github.com/username/username.github.io\" target=\"_blank\" rel=\"external\">https://github.com/username/username.github.io</a></em>即可看到自己的博客已经搭建成功。<br>注: username替换为自己的用户名.</p>\n<h1 id=\"nexT主题\"><a href=\"#nexT主题\" class=\"headerlink\" title=\"nexT主题\"></a>nexT主题</h1><p>hexo安装完成后，默认的主题是landscape，保存在hexo/themes/文件夹下。<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">nexT</a> 主题需要自行下载。在博客文件目录下F:\\github\\hexo右键单击Git Bash Here，输入命令:<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$git</span> clone https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/iissnan/</span>hexo-theme-<span class=\"keyword\">next</span>.git themes<span class=\"regexp\">/nexT</span></div></pre></td></tr></table></figure></p>\n<p>下载后的nexT主题会保存在themes目录下。修改hexo根目录下的配置文件_config.yml使主题生效:<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">　#</span><span class=\"bash\"> Extensions</span></div><div class=\"line\"><span class=\"meta\">　#</span><span class=\"bash\"><span class=\"comment\"># Plugins: https://hexo.io/plugins/</span></span></div><div class=\"line\"><span class=\"meta\">　#</span><span class=\"bash\"><span class=\"comment\"># Themes: https://hexo.io/themes/</span></span></div><div class=\"line\">　theme: nexT</div></pre></td></tr></table></figure></p>\n<p>接下来选择nexT的Scheme，打开nexT的配置文件themes/nexT/_config.yml中，修改:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"meta\"># Schemes</span></div><div class=\"line\">　<span class=\"meta\">#scheme: Muse <span class=\"comment\">//默认Scheme，黑白主调，大量留白</span></span></div><div class=\"line\">　<span class=\"meta\">#scheme: Mist <span class=\"comment\">//紧凑版本，整洁有序</span></span></div><div class=\"line\"><span class=\"symbol\">　scheme:</span> Pisces <span class=\"comment\">//双栏显示，清新</span></div></pre></td></tr></table></figure></p>\n<p>更多的设置请参考: <a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">nexT</a></p>\n<h2 id=\"设置语言\"><a href=\"#设置语言\" class=\"headerlink\" title=\"设置语言\"></a>设置语言</h2><p>打开hexo的配置文件F:\\github\\hexo_config.yml，修改:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">　language:</span> zh-Hans <span class=\"comment\">//中文汉字</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"访问量统计\"><a href=\"#访问量统计\" class=\"headerlink\" title=\"访问量统计\"></a>访问量统计</h1><h3 id=\"文章阅读量统计\"><a href=\"#文章阅读量统计\" class=\"headerlink\" title=\"文章阅读量统计\"></a>文章阅读量统计</h3><p>使用 <a href=\"https://leancloud.cn\" target=\"_blank\" rel=\"external\">leancloud</a> 实现文章阅读次数统计。注册完成后，点击访问控制台，选择创建新应用:<img src=\"/2017/05/07/hexo-blog/leancloudc.jpg\" alt=\"Alt-text\"></p>\n<p>创建名为Counter的class。之后找到该应用的AppID、AppKey，将这两个值写入到nexT的主题配置文件中_config.yml:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"meta\"># Show number of visitors to each article.</span></div><div class=\"line\">　<span class=\"meta\"># You can visit https:<span class=\"comment\">//leancloud.cn get AppID and AppKey.</span></span></div><div class=\"line\"><span class=\"symbol\">　leancloud_visitors:</span></div><div class=\"line\"><span class=\"symbol\">  　　enable:</span> true</div><div class=\"line\"><span class=\"symbol\">  　　app_id:</span> <span class=\"meta\">#&lt;app_id&gt; <span class=\"comment\">//复制刚才创建的应用的AppID</span></span></div><div class=\"line\"><span class=\"symbol\">  　　app_key:</span> <span class=\"meta\">#&lt;app_key&gt; <span class=\"comment\">//复制刚才创建的应用的AppKey</span></span></div></pre></td></tr></table></figure></p>\n<p>为了安全，将自己的域名加入安全中心-&gt;web安全域名中，防止恶意修改。完成后部署网站，看效果是不是已经有了文章阅读量显示了。</p>\n<h3 id=\"站点访问统计\"><a href=\"#站点访问统计\" class=\"headerlink\" title=\"站点访问统计\"></a>站点访问统计</h3><p>使用 <a href=\"http://ibruce.info/2015/04/04/busuanzi/\" target=\"_blank\" rel=\"external\">不蒜子</a> 脚本实现。<br>在themes\\nexT\\layout_partials目录下找到文件footer.swig，在文件的头部添加:<br>　　<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">　<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>　　</p>\n<p>　　\n　　</p>\n<p>　　</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><em>hexo</em>是一个高效简洁的静态博客框架，基于<em>Node.js</em>使用Markdown解析文章，几秒内即可利用靓丽的主题生成静态网页。</p>\n<p>#环境：<br><em>windows10 64bits</em></p>\n<p>#所需软件：<br>　　1. <a href=\"https://nodejs.org/en/\" title=\"Java Script运行环境\" target=\"_blank\" rel=\"external\">Node.js</a>　基于Chrome V8引擎的JavaScript运行环境；<br>　　2. <a href=\"https://github.com/git-for-windows/git/releases\" title=\"git for windows\" target=\"_blank\" rel=\"external\">Git-for-windows</a>　windows平台下git 运行环境；<br>　　3. <a href=\"http://markdownpad.com/\" title=\"markdown Editor for Windows\" target=\"_blank\" rel=\"external\">MarkdownPad</a>　博客撰写工具</p>\n<p><em>开始之前先去 <a href=\"www.github.com\">github</a> 注册一个账户，并新建一个名为username.github.io的仓库，最后生成的仓库地址：<a href=\"https://github.com/username/username.github.io\" target=\"_blank\" rel=\"external\">https://github.com/username/username.github.io</a>  注：username替换为自己的用户名</em></p>\n<h1 id=\"hexo安装与配置\"><a href=\"#hexo安装与配置\" class=\"headerlink\" title=\"hexo安装与配置\"></a>hexo安装与配置</h1><p>首先在本地建立自己的博客文件夹，比如 <em>F:\\github\\hexo</em>，进入该文件夹内，右键点击<em>Git Bash Here</em>,打开<em>git for windows</em>环境，开始安装 <a href=\"https://hexo.io/zh-cn/docs/\" title=\"hexo说明\" target=\"_blank\" rel=\"external\">hexo</a>：<br></p>","more":"<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$npm</span> install hexo-<span class=\"keyword\">cli</span> -<span class=\"keyword\">g</span> <span class=\"comment\">//注: -g表示全局安装</span></div><div class=\"line\">　<span class=\"variable\">$npm</span> install hexo-server -<span class=\"keyword\">g</span> <span class=\"comment\">//注： hexo3.0之后server模块是独立的,需要单独安装</span></div></pre></td></tr></table></figure><p></p>\n<p>完成之后可以通过命令查看<em>hexo</em>是否安装成功：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">　$</span><span class=\"bash\">hexo -v</span></div></pre></td></tr></table></figure></p>\n<p><em>hexo</em>根目录下的<em>_config.yml</em>文件是全局配置文件，修改该文件实现自己的配置。具体可参考<a href=\"https://hexo.io/zh-cn/docs/\" title=\"hexo说明\" target=\"_blank\" rel=\"external\">hexo</a>官网。</p>\n<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><p>hexo常用命令可以参考hexo的帮助说明，下面列举几个常用命令：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$hexo</span> g <span class=\"regexp\">//</span>等同于hexo generate,用于生成静态文件</div><div class=\"line\">　<span class=\"variable\">$hexo</span> s <span class=\"regexp\">//</span>等同于hexo server,用于启动本地服务器，预览网页</div><div class=\"line\">　<span class=\"variable\">$hexo</span> d <span class=\"regexp\">//</span>等同于hexo deploy,用于部署文件到github</div></pre></td></tr></table></figure></p>\n<h2 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h2><p>在自己的博客文件夹下<em>F:\\github\\hexo</em>,执行命令：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$hexo</span> init <span class=\"regexp\">//</span>初始化，自动下载搭建网站所需的所有文件</div><div class=\"line\">　<span class=\"variable\">$npm</span> install <span class=\"regexp\">//</span>安装依赖包</div><div class=\"line\">　<span class=\"variable\">$hexo</span> g <span class=\"regexp\">//</span>产生静态文件</div><div class=\"line\">　<span class=\"variable\">$hexo</span> s <span class=\"regexp\">//</span>启动本地服务器，开启预览功能</div></pre></td></tr></table></figure></p>\n<p>这个时候在浏览器输入localhost:4000即可查看到生成的静态网页：<img src=\"/2017/05/07/hexo-blog/hello-world.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"部署到github\"><a href=\"#部署到github\" class=\"headerlink\" title=\"部署到github\"></a>部署到github</h2><p>在hexo根目录下找到配置文件_config.yml，使用<a href=\"http://markdownpad.com/\" title=\"markdown Editor for Windows\" target=\"_blank\" rel=\"external\">MarkdownPad</a> 打开，编辑最后的deploy字段，将自己的github仓库地址输入进去：<br>　　<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"attribute\">deploy</span>:</div><div class=\"line\">　　　<span class=\"attribute\">type</span>: git <span class=\"comment\">//注意冒号':'后面的空格一定要有</span></div><div class=\"line\">　　　<span class=\"attribute\">repository</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/username/username.github.io.git</span></div><div class=\"line\">　　　<span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置SSH-Key\"><a href=\"#配置SSH-Key\" class=\"headerlink\" title=\"配置SSH Key\"></a>配置SSH Key</h3><p>在桌面空白处鼠标右键选择<em>Git Bash Here</em>,输入以下命令配置SSH Key:<br>　　<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></div></pre></td></tr></table></figure></p>\n<p>引号里面的内容输入邮箱地址，然后回车，会提示文件保存的路径，这时候按回车键确认，然后会提示你输入密码，然后会确认输入一次，在<em>c:/user/username/.ssh/</em>文件夹内看到生成了两个文件，一个是id_rsa，另一个是id_rsa.pub，打开id_rsa.pub然后选中里面的全部内容，复制下来。登录<a href=\"https://github.com/login\" target=\"_blank\" rel=\"external\">github</a>,点击<em>setting</em>,左边有一个<em>SSH and GPG keys</em>选项，进入<em>New SSH</em>选项，<em>title</em>随意，将之前复制的内容粘贴到key里面去。回到<em>Git bash</em>命令行，输入以下命令验证:<br>　　<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh -T git<span class=\"symbol\">@github</span>.com</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置用户名和密码\"><a href=\"#配置用户名和密码\" class=\"headerlink\" title=\"配置用户名和密码\"></a>配置用户名和密码</h3><p>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"your username\"</span>  </div><div class=\"line\"><span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"your_email@youremail.com\"</span></div></pre></td></tr></table></figure></p>\n<p>重新生成一下静态文件：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$hexo</span> clean <span class=\"regexp\">//</span>清除缓存文件db.json和已生成的静态文件public</div><div class=\"line\">　<span class=\"variable\">$hexo</span> g <span class=\"regexp\">//</span>产生静态文件</div><div class=\"line\">　<span class=\"variable\">$hexo</span> d <span class=\"regexp\">//</span>部署到github</div></pre></td></tr></table></figure></p>\n<p>在运行<em>hexo d</em>之前需要安装git部署工具<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">　$</span><span class=\"bash\">npm install hexo-deployer-git -g</span></div></pre></td></tr></table></figure></p>\n<p>第一次执行<em>hexo d</em>会弹出对话框提示输入github的用户名和密码。此时在浏览器输入：<br><em><a href=\"https://github.com/username/username.github.io\" target=\"_blank\" rel=\"external\">https://github.com/username/username.github.io</a></em>即可看到自己的博客已经搭建成功。<br>注: username替换为自己的用户名.</p>\n<h1 id=\"nexT主题\"><a href=\"#nexT主题\" class=\"headerlink\" title=\"nexT主题\"></a>nexT主题</h1><p>hexo安装完成后，默认的主题是landscape，保存在hexo/themes/文件夹下。<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">nexT</a> 主题需要自行下载。在博客文件目录下F:\\github\\hexo右键单击Git Bash Here，输入命令:<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"variable\">$git</span> clone https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/iissnan/</span>hexo-theme-<span class=\"keyword\">next</span>.git themes<span class=\"regexp\">/nexT</span></div></pre></td></tr></table></figure></p>\n<p>下载后的nexT主题会保存在themes目录下。修改hexo根目录下的配置文件_config.yml使主题生效:<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">　#</span><span class=\"bash\"> Extensions</span></div><div class=\"line\"><span class=\"meta\">　#</span><span class=\"bash\"><span class=\"comment\"># Plugins: https://hexo.io/plugins/</span></span></div><div class=\"line\"><span class=\"meta\">　#</span><span class=\"bash\"><span class=\"comment\"># Themes: https://hexo.io/themes/</span></span></div><div class=\"line\">　theme: nexT</div></pre></td></tr></table></figure></p>\n<p>接下来选择nexT的Scheme，打开nexT的配置文件themes/nexT/_config.yml中，修改:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"meta\"># Schemes</span></div><div class=\"line\">　<span class=\"meta\">#scheme: Muse <span class=\"comment\">//默认Scheme，黑白主调，大量留白</span></span></div><div class=\"line\">　<span class=\"meta\">#scheme: Mist <span class=\"comment\">//紧凑版本，整洁有序</span></span></div><div class=\"line\"><span class=\"symbol\">　scheme:</span> Pisces <span class=\"comment\">//双栏显示，清新</span></div></pre></td></tr></table></figure></p>\n<p>更多的设置请参考: <a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">nexT</a></p>\n<h2 id=\"设置语言\"><a href=\"#设置语言\" class=\"headerlink\" title=\"设置语言\"></a>设置语言</h2><p>打开hexo的配置文件F:\\github\\hexo_config.yml，修改:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">　language:</span> zh-Hans <span class=\"comment\">//中文汉字</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"访问量统计\"><a href=\"#访问量统计\" class=\"headerlink\" title=\"访问量统计\"></a>访问量统计</h1><h3 id=\"文章阅读量统计\"><a href=\"#文章阅读量统计\" class=\"headerlink\" title=\"文章阅读量统计\"></a>文章阅读量统计</h3><p>使用 <a href=\"https://leancloud.cn\" target=\"_blank\" rel=\"external\">leancloud</a> 实现文章阅读次数统计。注册完成后，点击访问控制台，选择创建新应用:<img src=\"/2017/05/07/hexo-blog/leancloudc.jpg\" alt=\"Alt-text\"></p>\n<p>创建名为Counter的class。之后找到该应用的AppID、AppKey，将这两个值写入到nexT的主题配置文件中_config.yml:<br>　　<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"meta\"># Show number of visitors to each article.</span></div><div class=\"line\">　<span class=\"meta\"># You can visit https:<span class=\"comment\">//leancloud.cn get AppID and AppKey.</span></span></div><div class=\"line\"><span class=\"symbol\">　leancloud_visitors:</span></div><div class=\"line\"><span class=\"symbol\">  　　enable:</span> true</div><div class=\"line\"><span class=\"symbol\">  　　app_id:</span> <span class=\"meta\">#&lt;app_id&gt; <span class=\"comment\">//复制刚才创建的应用的AppID</span></span></div><div class=\"line\"><span class=\"symbol\">  　　app_key:</span> <span class=\"meta\">#&lt;app_key&gt; <span class=\"comment\">//复制刚才创建的应用的AppKey</span></span></div></pre></td></tr></table></figure></p>\n<p>为了安全，将自己的域名加入安全中心-&gt;web安全域名中，防止恶意修改。完成后部署网站，看效果是不是已经有了文章阅读量显示了。</p>\n<h3 id=\"站点访问统计\"><a href=\"#站点访问统计\" class=\"headerlink\" title=\"站点访问统计\"></a>站点访问统计</h3><p>使用 <a href=\"http://ibruce.info/2015/04/04/busuanzi/\" target=\"_blank\" rel=\"external\">不蒜子</a> 脚本实现。<br>在themes\\nexT\\layout_partials目录下找到文件footer.swig，在文件的头部添加:<br>　　<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">　<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">　<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>　　</p>\n<p>　　\n　　</p>\n<p>　　</p>"},{"title":"hexo 博客备份","date":"2017-05-07T13:25:07.000Z","comments":1,"_content":"# 前言\n在公司电脑中做好了hexo博客撰写，也将文章推送到了github并且发布了;回到家中在自己的电脑上想给自己的博客添加一篇文章，按照hexo建站流程，又建了一遍，但写完文章后发现，之前在公司写得博客被覆盖了，想哭的感觉有木有。当使用不同的电脑撰写博客时，会涉及到博客资源的备份和更新，如果简单的拷贝会比较麻烦，当然也可以tar整个hexo工作目录;单纯的push到github会有部分文件不全,由于主题文件目录也是git管理方式，当push后，主题默认是不会被推送到github上的。所以，必须稍作修改，才能正确的备份。\n# 解决方案\n在自己的github仓库中默认有master分支，比如username目录下的：\nusername.github.io仓库。使用master分支保存自己的hexo博客静态文件，新建hexo分支用于保存hexo资源文件。每次撰写完博客后，顺便将自己的hexo工作目录push到远程仓库的hexo分支;当在另外一台电脑上写博客时，先获取远程仓库的分支，之后就可以编辑了\n<!--more-->\n## 推送到远程\n进入到自己的博客工作目录比如*github\\hexo*,先查看远程主机\n　```\n$git remote -v\n　```\n如果有输出，查看下是否是自己远程仓库的名字，如果不是username.github.io则删除：\n　　```\n$git remote rm origin\n　　```\n添加远程主机：\n　　```\n $git remote add origin https://github.com/yourusername/yourusername.github.io.git\n $git init \n　　```\n删除掉*theme\\nexT*目录下的*.git*文件夹，因为我们要将主题配置一同推送。如果删除后还是不能推送nexT主题，就将nexT改个名字，但要注意在hexo的_config.yml中对应的主题名字与这个文件夹名字要保持一致。\n　　```\n $git add --all //add之后可以用*git status*查看刚刚改过的文件状态\n $git commit -m \"backup hexo\"\n $git push origin hexo //将本地文件push到远程仓库的hexo分支，没有则建立该分支\n　　```\n在远程仓库查看，username.github.io的仓库下已经有了两个分支，一个叫master,一个叫hexo。但发现有些不想推送的文件也被推送到了远程，比如hexo根目录下的public文件夹，这个文件夹是生成的博客静态文件，它是在博客部署后被推送到：username.github.io的master分支的，我们这里并不需要保存该文件夹。编辑hexo根目录下的.gitignore文件，添加不需要推送的文件或文件夹：\n　　```\n  .DS_Store\n  Thumbs.db\n  *.log\n  node_modules/\n  public/\n  .deploy*/\n　　```\n由于之前推送过，可能.gitignore没有起作用，.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。这个时候就需要删除缓存改变未被追踪状态，重新提交：\n　　```\n $git rm -r --cached .\n $git add --all\n $git commit -m \"update .gitignore\"\n　　```\n 之后再次推送即可。\n## 获取远程分支\n前面已经将写好的博客资源文件推送到远程仓库username.github.io的分支hexo,无论在哪里都可以获取远程分支至本地进行博客撰写，并且保持文章的更新状态。假如我在家中的电脑的目录*F:\\github\\home*下想撰写一篇新博客文章，首先要做的是进入到该目录下，进行hexo环境的安装，参考我的前一篇博客。\n　　```\n $npm install hexo-cli --save //在新电脑上配置hexo\n $npm install hexo --save\n $npm install hexo-server --save\n $npm install hexo-generator-search --save\n $npm install hexo-deployer-git --save\n　　```\n当环境建立好后，运行*hexo init*命令：\n　　```\n $hexo init\n　　```\n然后删除*hexo init*命令产生的其它文件夹，只保留生成的node_modules文件夹，建立博客需要的hexo各种命令以及依赖项都在这里:\n　　```\n $rm _config.yml db.json package.json \n $rm -rf scaffolds/ themes/ source/\n $rm .npmignore\n　　```\n之后添加远程仓库分支至本地：\n　　```\n $git init\n $git remote add origin https://github.com/yourusername/yourusername.github.io.git\n　　```\n 查看远程仓库所有分支：\n　　```\n $git branch -r\n　　```\n 一般输出为：\n　　```\n *origin/HEAD -> origin/master*\n *origin/hexo*\n *origin/master*\n　　```\n此时可以看到远程仓库有两个分支，但默认的分支为master,我们需要的是hexo分支，所以需要将默认分支修改为hexo:\n![Alt text](hexo-backup/setbranch.jpg)\n\n如果不修改则需要获取分支hexo到本地：\n　　```\n $git fetch origin hexo:hexo\n　　```\n或者：\n　　```\n $git pull origin hexo\n　　```\n切换到hexo分支：\n　　```\n  $git checkout hexo //此处为hexo分支\n　　```\n此时就可以在该目录下进行博客的撰写工作了，撰写完可以将最新更新提交，并push到远程仓库的hexo分支，至此完成多个电脑同步的问题。\n当再次回到公司电脑时，进入到博客目录使用*git pull*即可同步更新。\n在写新文章之前先配置好git的用户名和邮箱：\n  ```\n *$git config --global user.name \"yourusername\" \n *$git config --global user.email \"yourusername@xxx.com\"*\n  ```\n 新电脑需要生成SSH Key，*github*允许一个用户使用多个SSH Key。如果不想使用那么多个，可以拷贝原来电脑下的SSH Key之后就可以开始新文章的撰写和发布了：\n  ```\n $git pull //获取更新\n $hexo n post \"new blog\"\n $hexo clean //清除生成的静态文件\n $hexo g //生成静态文件\n $hexo d //部署到远程\n $git add --all //添加所有文件\n $git commit -m \"add new blog\"\n $git push origin hexo //推送到远程分支hexo\n　　```\n\n 如果不小心搞乱了，或者误删了，使用命令恢复到前一个版本:\n　　```\n $git log //查看记录\n $git reset --hard HEAD^ //恢复到前一个记录\n　　```\n \n","source":"_posts/hexo-backup.md","raw":"---\ntitle: hexo 博客备份\ndate: 2017-05-07 21:25:07\ncategories: hexo\ntags: hexo\ncomments: true\n---\n# 前言\n在公司电脑中做好了hexo博客撰写，也将文章推送到了github并且发布了;回到家中在自己的电脑上想给自己的博客添加一篇文章，按照hexo建站流程，又建了一遍，但写完文章后发现，之前在公司写得博客被覆盖了，想哭的感觉有木有。当使用不同的电脑撰写博客时，会涉及到博客资源的备份和更新，如果简单的拷贝会比较麻烦，当然也可以tar整个hexo工作目录;单纯的push到github会有部分文件不全,由于主题文件目录也是git管理方式，当push后，主题默认是不会被推送到github上的。所以，必须稍作修改，才能正确的备份。\n# 解决方案\n在自己的github仓库中默认有master分支，比如username目录下的：\nusername.github.io仓库。使用master分支保存自己的hexo博客静态文件，新建hexo分支用于保存hexo资源文件。每次撰写完博客后，顺便将自己的hexo工作目录push到远程仓库的hexo分支;当在另外一台电脑上写博客时，先获取远程仓库的分支，之后就可以编辑了\n<!--more-->\n## 推送到远程\n进入到自己的博客工作目录比如*github\\hexo*,先查看远程主机\n　```\n$git remote -v\n　```\n如果有输出，查看下是否是自己远程仓库的名字，如果不是username.github.io则删除：\n　　```\n$git remote rm origin\n　　```\n添加远程主机：\n　　```\n $git remote add origin https://github.com/yourusername/yourusername.github.io.git\n $git init \n　　```\n删除掉*theme\\nexT*目录下的*.git*文件夹，因为我们要将主题配置一同推送。如果删除后还是不能推送nexT主题，就将nexT改个名字，但要注意在hexo的_config.yml中对应的主题名字与这个文件夹名字要保持一致。\n　　```\n $git add --all //add之后可以用*git status*查看刚刚改过的文件状态\n $git commit -m \"backup hexo\"\n $git push origin hexo //将本地文件push到远程仓库的hexo分支，没有则建立该分支\n　　```\n在远程仓库查看，username.github.io的仓库下已经有了两个分支，一个叫master,一个叫hexo。但发现有些不想推送的文件也被推送到了远程，比如hexo根目录下的public文件夹，这个文件夹是生成的博客静态文件，它是在博客部署后被推送到：username.github.io的master分支的，我们这里并不需要保存该文件夹。编辑hexo根目录下的.gitignore文件，添加不需要推送的文件或文件夹：\n　　```\n  .DS_Store\n  Thumbs.db\n  *.log\n  node_modules/\n  public/\n  .deploy*/\n　　```\n由于之前推送过，可能.gitignore没有起作用，.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。这个时候就需要删除缓存改变未被追踪状态，重新提交：\n　　```\n $git rm -r --cached .\n $git add --all\n $git commit -m \"update .gitignore\"\n　　```\n 之后再次推送即可。\n## 获取远程分支\n前面已经将写好的博客资源文件推送到远程仓库username.github.io的分支hexo,无论在哪里都可以获取远程分支至本地进行博客撰写，并且保持文章的更新状态。假如我在家中的电脑的目录*F:\\github\\home*下想撰写一篇新博客文章，首先要做的是进入到该目录下，进行hexo环境的安装，参考我的前一篇博客。\n　　```\n $npm install hexo-cli --save //在新电脑上配置hexo\n $npm install hexo --save\n $npm install hexo-server --save\n $npm install hexo-generator-search --save\n $npm install hexo-deployer-git --save\n　　```\n当环境建立好后，运行*hexo init*命令：\n　　```\n $hexo init\n　　```\n然后删除*hexo init*命令产生的其它文件夹，只保留生成的node_modules文件夹，建立博客需要的hexo各种命令以及依赖项都在这里:\n　　```\n $rm _config.yml db.json package.json \n $rm -rf scaffolds/ themes/ source/\n $rm .npmignore\n　　```\n之后添加远程仓库分支至本地：\n　　```\n $git init\n $git remote add origin https://github.com/yourusername/yourusername.github.io.git\n　　```\n 查看远程仓库所有分支：\n　　```\n $git branch -r\n　　```\n 一般输出为：\n　　```\n *origin/HEAD -> origin/master*\n *origin/hexo*\n *origin/master*\n　　```\n此时可以看到远程仓库有两个分支，但默认的分支为master,我们需要的是hexo分支，所以需要将默认分支修改为hexo:\n![Alt text](hexo-backup/setbranch.jpg)\n\n如果不修改则需要获取分支hexo到本地：\n　　```\n $git fetch origin hexo:hexo\n　　```\n或者：\n　　```\n $git pull origin hexo\n　　```\n切换到hexo分支：\n　　```\n  $git checkout hexo //此处为hexo分支\n　　```\n此时就可以在该目录下进行博客的撰写工作了，撰写完可以将最新更新提交，并push到远程仓库的hexo分支，至此完成多个电脑同步的问题。\n当再次回到公司电脑时，进入到博客目录使用*git pull*即可同步更新。\n在写新文章之前先配置好git的用户名和邮箱：\n  ```\n *$git config --global user.name \"yourusername\" \n *$git config --global user.email \"yourusername@xxx.com\"*\n  ```\n 新电脑需要生成SSH Key，*github*允许一个用户使用多个SSH Key。如果不想使用那么多个，可以拷贝原来电脑下的SSH Key之后就可以开始新文章的撰写和发布了：\n  ```\n $git pull //获取更新\n $hexo n post \"new blog\"\n $hexo clean //清除生成的静态文件\n $hexo g //生成静态文件\n $hexo d //部署到远程\n $git add --all //添加所有文件\n $git commit -m \"add new blog\"\n $git push origin hexo //推送到远程分支hexo\n　　```\n\n 如果不小心搞乱了，或者误删了，使用命令恢复到前一个版本:\n　　```\n $git log //查看记录\n $git reset --hard HEAD^ //恢复到前一个记录\n　　```\n \n","slug":"hexo-backup","published":1,"updated":"2017-05-14T23:56:22.522Z","layout":"post","photos":[],"link":"","_id":"cj30tmxhc0007ikinjqffektp","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在公司电脑中做好了hexo博客撰写，也将文章推送到了github并且发布了;回到家中在自己的电脑上想给自己的博客添加一篇文章，按照hexo建站流程，又建了一遍，但写完文章后发现，之前在公司写得博客被覆盖了，想哭的感觉有木有。当使用不同的电脑撰写博客时，会涉及到博客资源的备份和更新，如果简单的拷贝会比较麻烦，当然也可以tar整个hexo工作目录;单纯的push到github会有部分文件不全,由于主题文件目录也是git管理方式，当push后，主题默认是不会被推送到github上的。所以，必须稍作修改，才能正确的备份。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>在自己的github仓库中默认有master分支，比如username目录下的：<br>username.github.io仓库。使用master分支保存自己的hexo博客静态文件，新建hexo分支用于保存hexo资源文件。每次撰写完博客后，顺便将自己的hexo工作目录push到远程仓库的hexo分支;当在另外一台电脑上写博客时，先获取远程仓库的分支，之后就可以编辑了<br><a id=\"more\"></a></p>\n<h2 id=\"推送到远程\"><a href=\"#推送到远程\" class=\"headerlink\" title=\"推送到远程\"></a>推送到远程</h2><p>进入到自己的博客工作目录比如<em>github\\hexo</em>,先查看远程主机<br>　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> remote -v</span></div></pre></td></tr></table></figure></p>\n<p>如果有输出，查看下是否是自己远程仓库的名字，如果不是username.github.io则删除：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> remote rm origin</span></div></pre></td></tr></table></figure></p>\n<p>添加远程主机：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> remote add origin https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/yourusername/y</span>ourusername.github.io.git</div><div class=\"line\"><span class=\"variable\">$git</span> init</div></pre></td></tr></table></figure></p>\n<p>删除掉<em>theme\\nexT</em>目录下的<em>.git</em>文件夹，因为我们要将主题配置一同推送。如果删除后还是不能推送nexT主题，就将nexT改个名字，但要注意在hexo的_config.yml中对应的主题名字与这个文件夹名字要保持一致。<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git add --all //add之后可以用*git status*查看刚刚改过的文件状态</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git commit -m <span class=\"string\">\"backup hexo\"</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git push origin hexo //将本地文件push到远程仓库的hexo分支，没有则建立该分支</span></div></pre></td></tr></table></figure></p>\n<p>在远程仓库查看，username.github.io的仓库下已经有了两个分支，一个叫master,一个叫hexo。但发现有些不想推送的文件也被推送到了远程，比如hexo根目录下的public文件夹，这个文件夹是生成的博客静态文件，它是在博客部署后被推送到：username.github.io的master分支的，我们这里并不需要保存该文件夹。编辑hexo根目录下的.gitignore文件，添加不需要推送的文件或文件夹：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.DS_Store</span></div><div class=\"line\">Thumbs<span class=\"selector-class\">.db</span></div><div class=\"line\">*<span class=\"selector-class\">.log</span></div><div class=\"line\">node_modules/</div><div class=\"line\">public/</div><div class=\"line\">.deploy*/</div></pre></td></tr></table></figure></p>\n<p>由于之前推送过，可能.gitignore没有起作用，.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。这个时候就需要删除缓存改变未被追踪状态，重新提交：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git rm -r --cached .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git add --all</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git commit -m <span class=\"string\">\"update .gitignore\"</span></span></div></pre></td></tr></table></figure></p>\n<p> 之后再次推送即可。</p>\n<h2 id=\"获取远程分支\"><a href=\"#获取远程分支\" class=\"headerlink\" title=\"获取远程分支\"></a>获取远程分支</h2><p>前面已经将写好的博客资源文件推送到远程仓库username.github.io的分支hexo,无论在哪里都可以获取远程分支至本地进行博客撰写，并且保持文章的更新状态。假如我在家中的电脑的目录<em>F:\\github\\home</em>下想撰写一篇新博客文章，首先要做的是进入到该目录下，进行hexo环境的安装，参考我的前一篇博客。<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-<span class=\"keyword\">cli</span> --<span class=\"keyword\">save</span> <span class=\"comment\">//在新电脑上配置hexo</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-server --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-generator-<span class=\"keyword\">search</span> --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-deployer-git --<span class=\"keyword\">save</span></div></pre></td></tr></table></figure></p>\n<p>当环境建立好后，运行<em>hexo init</em>命令：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$hexo</span> init</span></div></pre></td></tr></table></figure></p>\n<p>然后删除<em>hexo init</em>命令产生的其它文件夹，只保留生成的node_modules文件夹，建立博客需要的hexo各种命令以及依赖项都在这里:<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$rm</span> _config<span class=\"selector-class\">.yml</span> db<span class=\"selector-class\">.json</span> package<span class=\"selector-class\">.json</span> </div><div class=\"line\"><span class=\"variable\">$rm</span> -rf scaffolds/ themes/ source/</div><div class=\"line\"><span class=\"variable\">$rm</span> .npmignore</div></pre></td></tr></table></figure></p>\n<p>之后添加远程仓库分支至本地：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> init</div><div class=\"line\"><span class=\"variable\">$git</span> remote add origin https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/yourusername/y</span>ourusername.github.io.git</div></pre></td></tr></table></figure></p>\n<p> 查看远程仓库所有分支：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> branch -r</span></div></pre></td></tr></table></figure></p>\n<p> 一般输出为：<br>　　<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*<span class=\"built_in\">origin</span>/HEAD -&gt; <span class=\"built_in\">origin</span>/master*</div><div class=\"line\">*<span class=\"built_in\">origin</span>/hexo*</div><div class=\"line\">*<span class=\"built_in\">origin</span>/master*</div></pre></td></tr></table></figure></p>\n<p>此时可以看到远程仓库有两个分支，但默认的分支为master,我们需要的是hexo分支，所以需要将默认分支修改为hexo:<br><img src=\"/2017/05/07/hexo-backup/setbranch.jpg\" alt=\"Alt text\"></p>\n<p>如果不修改则需要获取分支hexo到本地：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> fetch origin hexo:hexo</span></div></pre></td></tr></table></figure></p>\n<p>或者：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> pull origin hexo</span></div></pre></td></tr></table></figure></p>\n<p>切换到hexo分支：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> checkout hexo <span class=\"regexp\">//</span>此处为hexo分支</div></pre></td></tr></table></figure></p>\n<p>此时就可以在该目录下进行博客的撰写工作了，撰写完可以将最新更新提交，并push到远程仓库的hexo分支，至此完成多个电脑同步的问题。<br>当再次回到公司电脑时，进入到博客目录使用<em>git pull</em>即可同步更新。<br>在写新文章之前先配置好git的用户名和邮箱：<br>  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">*<span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"yourusername\"</span> </div><div class=\"line\">*<span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"yourusername@xxx.com\"</span>*</div></pre></td></tr></table></figure></p>\n<p> 新电脑需要生成SSH Key，<em>github</em>允许一个用户使用多个SSH Key。如果不想使用那么多个，可以拷贝原来电脑下的SSH Key之后就可以开始新文章的撰写和发布了：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git pull //获取更新</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo n post <span class=\"string\">\"new blog\"</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo clean //清除生成的静态文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo g //生成静态文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo d //部署到远程</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git add --all //添加所有文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git commit -m <span class=\"string\">\"add new blog\"</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git push origin hexo //推送到远程分支hexo</span></div></pre></td></tr></table></figure></p>\n<p> 如果不小心搞乱了，或者误删了，使用命令恢复到前一个版本:<br>　　<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git <span class=\"keyword\">log</span> <span class=\"comment\">//查看记录</span></div><div class=\"line\">$git reset -<span class=\"params\">-hard</span> HEAD^ <span class=\"comment\">//恢复到前一个记录</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在公司电脑中做好了hexo博客撰写，也将文章推送到了github并且发布了;回到家中在自己的电脑上想给自己的博客添加一篇文章，按照hexo建站流程，又建了一遍，但写完文章后发现，之前在公司写得博客被覆盖了，想哭的感觉有木有。当使用不同的电脑撰写博客时，会涉及到博客资源的备份和更新，如果简单的拷贝会比较麻烦，当然也可以tar整个hexo工作目录;单纯的push到github会有部分文件不全,由于主题文件目录也是git管理方式，当push后，主题默认是不会被推送到github上的。所以，必须稍作修改，才能正确的备份。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>在自己的github仓库中默认有master分支，比如username目录下的：<br>username.github.io仓库。使用master分支保存自己的hexo博客静态文件，新建hexo分支用于保存hexo资源文件。每次撰写完博客后，顺便将自己的hexo工作目录push到远程仓库的hexo分支;当在另外一台电脑上写博客时，先获取远程仓库的分支，之后就可以编辑了<br></p>","more":"<p></p>\n<h2 id=\"推送到远程\"><a href=\"#推送到远程\" class=\"headerlink\" title=\"推送到远程\"></a>推送到远程</h2><p>进入到自己的博客工作目录比如<em>github\\hexo</em>,先查看远程主机<br>　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> remote -v</span></div></pre></td></tr></table></figure></p>\n<p>如果有输出，查看下是否是自己远程仓库的名字，如果不是username.github.io则删除：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> remote rm origin</span></div></pre></td></tr></table></figure></p>\n<p>添加远程主机：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> remote add origin https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/yourusername/y</span>ourusername.github.io.git</div><div class=\"line\"><span class=\"variable\">$git</span> init</div></pre></td></tr></table></figure></p>\n<p>删除掉<em>theme\\nexT</em>目录下的<em>.git</em>文件夹，因为我们要将主题配置一同推送。如果删除后还是不能推送nexT主题，就将nexT改个名字，但要注意在hexo的_config.yml中对应的主题名字与这个文件夹名字要保持一致。<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git add --all //add之后可以用*git status*查看刚刚改过的文件状态</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git commit -m <span class=\"string\">\"backup hexo\"</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git push origin hexo //将本地文件push到远程仓库的hexo分支，没有则建立该分支</span></div></pre></td></tr></table></figure></p>\n<p>在远程仓库查看，username.github.io的仓库下已经有了两个分支，一个叫master,一个叫hexo。但发现有些不想推送的文件也被推送到了远程，比如hexo根目录下的public文件夹，这个文件夹是生成的博客静态文件，它是在博客部署后被推送到：username.github.io的master分支的，我们这里并不需要保存该文件夹。编辑hexo根目录下的.gitignore文件，添加不需要推送的文件或文件夹：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.DS_Store</span></div><div class=\"line\">Thumbs<span class=\"selector-class\">.db</span></div><div class=\"line\">*<span class=\"selector-class\">.log</span></div><div class=\"line\">node_modules/</div><div class=\"line\">public/</div><div class=\"line\">.deploy*/</div></pre></td></tr></table></figure></p>\n<p>由于之前推送过，可能.gitignore没有起作用，.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。这个时候就需要删除缓存改变未被追踪状态，重新提交：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git rm -r --cached .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git add --all</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git commit -m <span class=\"string\">\"update .gitignore\"</span></span></div></pre></td></tr></table></figure></p>\n<p> 之后再次推送即可。</p>\n<h2 id=\"获取远程分支\"><a href=\"#获取远程分支\" class=\"headerlink\" title=\"获取远程分支\"></a>获取远程分支</h2><p>前面已经将写好的博客资源文件推送到远程仓库username.github.io的分支hexo,无论在哪里都可以获取远程分支至本地进行博客撰写，并且保持文章的更新状态。假如我在家中的电脑的目录<em>F:\\github\\home</em>下想撰写一篇新博客文章，首先要做的是进入到该目录下，进行hexo环境的安装，参考我的前一篇博客。<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-<span class=\"keyword\">cli</span> --<span class=\"keyword\">save</span> <span class=\"comment\">//在新电脑上配置hexo</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-server --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-generator-<span class=\"keyword\">search</span> --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-deployer-git --<span class=\"keyword\">save</span></div></pre></td></tr></table></figure></p>\n<p>当环境建立好后，运行<em>hexo init</em>命令：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$hexo</span> init</span></div></pre></td></tr></table></figure></p>\n<p>然后删除<em>hexo init</em>命令产生的其它文件夹，只保留生成的node_modules文件夹，建立博客需要的hexo各种命令以及依赖项都在这里:<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$rm</span> _config<span class=\"selector-class\">.yml</span> db<span class=\"selector-class\">.json</span> package<span class=\"selector-class\">.json</span> </div><div class=\"line\"><span class=\"variable\">$rm</span> -rf scaffolds/ themes/ source/</div><div class=\"line\"><span class=\"variable\">$rm</span> .npmignore</div></pre></td></tr></table></figure></p>\n<p>之后添加远程仓库分支至本地：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> init</div><div class=\"line\"><span class=\"variable\">$git</span> remote add origin https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/yourusername/y</span>ourusername.github.io.git</div></pre></td></tr></table></figure></p>\n<p> 查看远程仓库所有分支：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> branch -r</span></div></pre></td></tr></table></figure></p>\n<p> 一般输出为：<br>　　<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*<span class=\"built_in\">origin</span>/HEAD -&gt; <span class=\"built_in\">origin</span>/master*</div><div class=\"line\">*<span class=\"built_in\">origin</span>/hexo*</div><div class=\"line\">*<span class=\"built_in\">origin</span>/master*</div></pre></td></tr></table></figure></p>\n<p>此时可以看到远程仓库有两个分支，但默认的分支为master,我们需要的是hexo分支，所以需要将默认分支修改为hexo:<br><img src=\"/2017/05/07/hexo-backup/setbranch.jpg\" alt=\"Alt text\"></p>\n<p>如果不修改则需要获取分支hexo到本地：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> fetch origin hexo:hexo</span></div></pre></td></tr></table></figure></p>\n<p>或者：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> pull origin hexo</span></div></pre></td></tr></table></figure></p>\n<p>切换到hexo分支：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> checkout hexo <span class=\"regexp\">//</span>此处为hexo分支</div></pre></td></tr></table></figure></p>\n<p>此时就可以在该目录下进行博客的撰写工作了，撰写完可以将最新更新提交，并push到远程仓库的hexo分支，至此完成多个电脑同步的问题。<br>当再次回到公司电脑时，进入到博客目录使用<em>git pull</em>即可同步更新。<br>在写新文章之前先配置好git的用户名和邮箱：<br>  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">*<span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"yourusername\"</span> </div><div class=\"line\">*<span class=\"variable\">$git</span> config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"yourusername@xxx.com\"</span>*</div></pre></td></tr></table></figure></p>\n<p> 新电脑需要生成SSH Key，<em>github</em>允许一个用户使用多个SSH Key。如果不想使用那么多个，可以拷贝原来电脑下的SSH Key之后就可以开始新文章的撰写和发布了：<br>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git pull //获取更新</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo n post <span class=\"string\">\"new blog\"</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo clean //清除生成的静态文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo g //生成静态文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo d //部署到远程</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git add --all //添加所有文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git commit -m <span class=\"string\">\"add new blog\"</span></span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git push origin hexo //推送到远程分支hexo</span></div></pre></td></tr></table></figure></p>\n<p> 如果不小心搞乱了，或者误删了，使用命令恢复到前一个版本:<br>　　<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git <span class=\"keyword\">log</span> <span class=\"comment\">//查看记录</span></div><div class=\"line\">$git reset -<span class=\"params\">-hard</span> HEAD^ <span class=\"comment\">//恢复到前一个记录</span></div></pre></td></tr></table></figure></p>"},{"title":"浮点数与16进制的相互转换","date":"2017-05-11T05:35:03.000Z","comments":1,"_content":"# 前言\n 在嵌入式中经常会遇到浮点数的传输问题，一般将浮点数转换成4字节的16进制传输，这里的浮点数仅限于单精度浮点。大多数人的做法都是使用指针实现强制类型转换，其实浮点数在CPU里就是以4字节存储，既然在同一块内存，那我们能不能使用联合体呢？答案是肯定的。除了强制类型转换，这里介绍使用联合体实现浮点和16进制的转换，简单易用，你绝对会爱上这种方法。\n<!--more-->\n# 强制转换法\n 浮点转换成4字节16进制:\n　　```\n void float2bytes(float p,unsigned char *bytes)\n {\n  unsigned char *pchar = (unsigned char*)&p;\n  for(int i=0;i < sizeof(float);i++)\n  {\n    *bytes = *pchar;\n    pchar++;\n    bytes++;\n  }\n }\n\n　　```\n 16进制4字节转换成浮点：\n　　```\n float bytes2float(unsigned char *bytes)\n {\n  return *((float*)bytes);//强制转换\n }\n　　```\n# 联合体法\n 话不多说，直接上代码：\n　```\n typedef union{\n\n\tunsigned char cvalue[4];\n\tfloat fvalue;\n\n }float_union;\n　```\n 定义联合体变量:\n　```\n float_union trans_data;\n　```\n 此时如果给变量trans_data赋值一个浮点数:\n 　```\n trans_data.fvalue = 10.05;\n　 ```\n 那么直接调用cvalue即可获取浮点数10.05的4字节16进制数据：\n　 ```\n for(int i=0;i<4;i++)\n printf(\" 0x%02x\",trans_data.cvalue[i]);\n \n 　```\n 是不是非常简单实用。\n","source":"_posts/float-to-byte.md","raw":"---\ntitle: 浮点数与16进制的相互转换\ndate: 2017-05-11 13:35:03\ncategories: Linux\ntags: Linux\ncomments: true\n---\n# 前言\n 在嵌入式中经常会遇到浮点数的传输问题，一般将浮点数转换成4字节的16进制传输，这里的浮点数仅限于单精度浮点。大多数人的做法都是使用指针实现强制类型转换，其实浮点数在CPU里就是以4字节存储，既然在同一块内存，那我们能不能使用联合体呢？答案是肯定的。除了强制类型转换，这里介绍使用联合体实现浮点和16进制的转换，简单易用，你绝对会爱上这种方法。\n<!--more-->\n# 强制转换法\n 浮点转换成4字节16进制:\n　　```\n void float2bytes(float p,unsigned char *bytes)\n {\n  unsigned char *pchar = (unsigned char*)&p;\n  for(int i=0;i < sizeof(float);i++)\n  {\n    *bytes = *pchar;\n    pchar++;\n    bytes++;\n  }\n }\n\n　　```\n 16进制4字节转换成浮点：\n　　```\n float bytes2float(unsigned char *bytes)\n {\n  return *((float*)bytes);//强制转换\n }\n　　```\n# 联合体法\n 话不多说，直接上代码：\n　```\n typedef union{\n\n\tunsigned char cvalue[4];\n\tfloat fvalue;\n\n }float_union;\n　```\n 定义联合体变量:\n　```\n float_union trans_data;\n　```\n 此时如果给变量trans_data赋值一个浮点数:\n 　```\n trans_data.fvalue = 10.05;\n　 ```\n 那么直接调用cvalue即可获取浮点数10.05的4字节16进制数据：\n　 ```\n for(int i=0;i<4;i++)\n printf(\" 0x%02x\",trans_data.cvalue[i]);\n \n 　```\n 是不是非常简单实用。\n","slug":"float-to-byte","published":1,"updated":"2017-05-19T09:11:08.071Z","layout":"post","photos":[],"link":"","_id":"cj30tmxhe0008ikin9ty397az","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p> 在嵌入式中经常会遇到浮点数的传输问题，一般将浮点数转换成4字节的16进制传输，这里的浮点数仅限于单精度浮点。大多数人的做法都是使用指针实现强制类型转换，其实浮点数在CPU里就是以4字节存储，既然在同一块内存，那我们能不能使用联合体呢？答案是肯定的。除了强制类型转换，这里介绍使用联合体实现浮点和16进制的转换，简单易用，你绝对会爱上这种方法。<br><a id=\"more\"></a></p>\n<h1 id=\"强制转换法\"><a href=\"#强制转换法\" class=\"headerlink\" title=\"强制转换法\"></a>强制转换法</h1><p> 浮点转换成4字节16进制:<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">float2bytes</span><span class=\"params\">(<span class=\"keyword\">float</span> p,<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *bytes)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *pchar = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)&amp;p;</div><div class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i &lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">float</span>);i++)</div><div class=\"line\"> &#123;</div><div class=\"line\">   *bytes = *pchar;</div><div class=\"line\">   pchar++;</div><div class=\"line\">   bytes++;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 16进制4字节转换成浮点：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">bytes2float</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *bytes)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"keyword\">return</span> *((<span class=\"keyword\">float</span>*)bytes);<span class=\"comment\">//强制转换</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"联合体法\"><a href=\"#联合体法\" class=\"headerlink\" title=\"联合体法\"></a>联合体法</h1><p> 话不多说，直接上代码：<br>　<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef <span class=\"class\"><span class=\"keyword\">union</span>&#123;</span></div><div class=\"line\"></div><div class=\"line\">unsigned char cvalue[<span class=\"number\">4</span>];</div><div class=\"line\">float fvalue;</div><div class=\"line\"></div><div class=\"line\">&#125;float_union;</div></pre></td></tr></table></figure></p>\n<p> 定义联合体变量:<br>　<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">float_union trans_data<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p> 此时如果给变量trans_data赋值一个浮点数:<br> 　<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">trans_data.fvalue = <span class=\"number\">10.05</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p> 那么直接调用cvalue即可获取浮点数10.05的4字节16进制数据：<br>　 <figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)</div><div class=\"line\"><span class=\"keyword\">printf</span>(<span class=\"string\">\" 0x%02x\"</span>,trans_data.cvalue[i]);</div></pre></td></tr></table></figure></p>\n<p> 是不是非常简单实用。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p> 在嵌入式中经常会遇到浮点数的传输问题，一般将浮点数转换成4字节的16进制传输，这里的浮点数仅限于单精度浮点。大多数人的做法都是使用指针实现强制类型转换，其实浮点数在CPU里就是以4字节存储，既然在同一块内存，那我们能不能使用联合体呢？答案是肯定的。除了强制类型转换，这里介绍使用联合体实现浮点和16进制的转换，简单易用，你绝对会爱上这种方法。<br></p>","more":"<p></p>\n<h1 id=\"强制转换法\"><a href=\"#强制转换法\" class=\"headerlink\" title=\"强制转换法\"></a>强制转换法</h1><p> 浮点转换成4字节16进制:<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">float2bytes</span><span class=\"params\">(<span class=\"keyword\">float</span> p,<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *bytes)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *pchar = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)&amp;p;</div><div class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i &lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">float</span>);i++)</div><div class=\"line\"> &#123;</div><div class=\"line\">   *bytes = *pchar;</div><div class=\"line\">   pchar++;</div><div class=\"line\">   bytes++;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 16进制4字节转换成浮点：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">bytes2float</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *bytes)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"keyword\">return</span> *((<span class=\"keyword\">float</span>*)bytes);<span class=\"comment\">//强制转换</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"联合体法\"><a href=\"#联合体法\" class=\"headerlink\" title=\"联合体法\"></a>联合体法</h1><p> 话不多说，直接上代码：<br>　<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef <span class=\"class\"><span class=\"keyword\">union</span>&#123;</span></div><div class=\"line\"></div><div class=\"line\">unsigned char cvalue[<span class=\"number\">4</span>];</div><div class=\"line\">float fvalue;</div><div class=\"line\"></div><div class=\"line\">&#125;float_union;</div></pre></td></tr></table></figure></p>\n<p> 定义联合体变量:<br>　<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">float_union trans_data<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p> 此时如果给变量trans_data赋值一个浮点数:<br> 　<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">trans_data.fvalue = <span class=\"number\">10.05</span><span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p> 那么直接调用cvalue即可获取浮点数10.05的4字节16进制数据：<br>　 <figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)</div><div class=\"line\"><span class=\"keyword\">printf</span>(<span class=\"string\">\" 0x%02x\"</span>,trans_data.cvalue[i]);</div></pre></td></tr></table></figure></p>\n<p> 是不是非常简单实用。</p>"},{"title":"hexo问题汇总","date":"2017-05-13T09:42:11.000Z","_content":"# Unable to call the return value of (posts[\"first\"])[\"updated\"][\"toISOString\"], which is undefined or falsey\n 运行*hexo g*生成静态文件时提示错误：\n　　```\n $ hexo g\n INFO  Start processing\n FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\n Template render error: (unknown path) [Line 7, Column 23]\n Error: Unable to call `the return value of (posts[\"first\"])[\"updated\"][\"toISOString\"]`, which is undefined or falsey\n　　```\n <!--more-->\n 当移除掉插件hexo-generator-feed和hexo-generator-sitemap后错误消失，怀疑该插件与hexo兼容性不好\n　　```\n $npm uninstall hexo-generator-feed\n $npm uninstall hexo-generator-sitemap\n　　```\n# WARN No layout: index.html?\n 查看主题目录是否为空，如果为空下载主题\n# fatal: AggregateException encountered\n 当推送至远程分支时提示错误:\n　　```\n $git push origin hexo\n fatal: AggregateException encountered\n   •¢ÉúÒ»¸ö»ò¶à¸ö´íÎó¡£\n Username for 'https://github.com':\n　　```\n 多数是网络问题，重来一次即可。\n## Cannot GET /\n 当启动服务器后，浏览器输入*http://localhost:4000*，却提示错误：*Cannot GET*\n 一般是配置文件错误，当在其他电脑从远程clone下来代码仓后，安装必要的工具使用 *hexo clean* 以及 *hexo g* 后产生的 *public* 文件与本地电脑原有源码仓生成的 *public* 不一样，查看里面并没有生成以日期命名的文章文件，怀疑是配置文件出了问题，对比两个配置文件都一样，最后发现 *node_modules* 文件夹问题，就是hexo的配置和安装问题，其他文件都推送到远程仓库，唯独没有推送这个文件夹，它保存有hexo的一些可执行文件。按照hexo安装教程在clone下来的代码仓重新安装一遍hexo，最后还是不行。使用[WinMerge](http://winmerge.org/)比较原电脑中和现在电脑中的两个node_modules文件的不同，发现hexo的很多二进制文件都不同。无语-\n 当使用 *hexo init* 后，再把远程仓库的配置文件覆盖到本地电脑后，可以正常生成静态网页。肯定是 *hexo* 安装不完整缺少某些依赖项。\n 所以，当在一台新电脑部署 *hexo* 的正确做法是安装好 *hexo* 之后需要 *hexo init* 一下，这样会安装依赖项，得到完整的 *node_modules*文件夹：\n　　```\n $npm install hexo --save\n $npm install hexo-server  --save\n $npm install hexo-generator-search --save\n $npm install hexo-deployer-git --save\n $hexo init //\n　　```\n 初始化之后，保留node_modules文件夹，其它删除，之后获取远程仓库最新更新：\n　　```\n $git remote add origin https://github.com/yourusername/yourusername.github.io.git\n $git pull origin hexo\n　　```\n# bash: /dev/tty: No such device or address.error: failed to execute prompt script (exit code 1)\n 当部署自己的博客文件时：\n　　```\n $hexo d \n　　```\n 出现以下错误：\n　　```\n bash: /dev/tty: No such device or address\n error: failed to execute prompt script (exit code 1)\n fatal: could not read Username for 'https://github.com': Invalid argument\n FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\n Error: bash: /dev/tty: No such device or address\n error: failed to execute prompt script (exit code 1)\n fatal: could not read Username for 'https://github.com': Invalid argument.\n　　```\n 出现该现象是 *windows* 环境下的*git bash shell*配置问题，当改用 *github for windows* 下的*git bash shell* 再次部署时问题解决。由于国内的网络问题，官网下载很难安装成功，这里附上一个CSDN上的大神的离线安装包地址[GithubforWindows](http://download.csdn.net/user/devsplash)。\n# Permission denied (publickey).\n 当部署博客文件时提示错误：\n　　```\n $hexo d\n The authenticity of host 'github.com (192.30.255.112)' can't be established.\n Permission denied (publickey).\n　　```\n 本机没有配置SSH Key：\n 　```\n $ssh-keygen -t rsa -C \"your_email@youremail.com\"\n　 ```\n 将生成的SSH Key拷贝下来，粘贴到自己的github网站的new ssh key中即可。或者使用原来电脑的SSH Key。完成后查看配置是否成功：\n 　```\n $ssh -T git@github.com\n 　```\n# Changes not staged for commit: Untracked files:\n当每次git commit提交更改时，总是提示以下错误：\n　　```\n $git commit -m \"\"\n On branch hexo\n Changes not staged for commit:\n       \n Untracked files:\n　　```\n 通过输入git status查看提示：\n　　```\n $ git status\n On branch hexo\n Changes not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        \n Untracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        \n no changes added to commit (use \"git add\" and/or \"git commit -a\")\n \n　　```\n *Changes not staged for commit* 说明 *git* 已经跟踪到这些文件的修改，但还没有放到暂存区，需要使用 *git add* 命令提交更新到暂存区。之后再通过 *git status* 查看状态：\n　　```\n $git status\n On branch hexo\n Changes to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n       \n　　```\n 状态已经变成了Changes to be committed。提示未被跟踪的文件Untracked files说明是新建立的文件，在git之前的提交中没有这些文件，git不会自动将它们纳入跟踪范围，必须手动添加这些文件。使用 *git add* 命令跟踪新文件：\n　　```\n $git add \"file\" //添加未被跟踪的文件\n　　```\n 如果还有错误，直接清除缓存:\n　　```\n $git rm -r --cached .\n $git add --all //跟踪所有文件\n $git commit -m \"your commit\" //提交更新\n $git push origin \"yourbranch\" //推送到远程分支yourbranch\n　　```","source":"_posts/hexo-error.md","raw":"---\ntitle: hexo问题汇总\ndate: 2017-05-13 17:42:11\ntags: hexo\ncategories: hexo\n---\n# Unable to call the return value of (posts[\"first\"])[\"updated\"][\"toISOString\"], which is undefined or falsey\n 运行*hexo g*生成静态文件时提示错误：\n　　```\n $ hexo g\n INFO  Start processing\n FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\n Template render error: (unknown path) [Line 7, Column 23]\n Error: Unable to call `the return value of (posts[\"first\"])[\"updated\"][\"toISOString\"]`, which is undefined or falsey\n　　```\n <!--more-->\n 当移除掉插件hexo-generator-feed和hexo-generator-sitemap后错误消失，怀疑该插件与hexo兼容性不好\n　　```\n $npm uninstall hexo-generator-feed\n $npm uninstall hexo-generator-sitemap\n　　```\n# WARN No layout: index.html?\n 查看主题目录是否为空，如果为空下载主题\n# fatal: AggregateException encountered\n 当推送至远程分支时提示错误:\n　　```\n $git push origin hexo\n fatal: AggregateException encountered\n   •¢ÉúÒ»¸ö»ò¶à¸ö´íÎó¡£\n Username for 'https://github.com':\n　　```\n 多数是网络问题，重来一次即可。\n## Cannot GET /\n 当启动服务器后，浏览器输入*http://localhost:4000*，却提示错误：*Cannot GET*\n 一般是配置文件错误，当在其他电脑从远程clone下来代码仓后，安装必要的工具使用 *hexo clean* 以及 *hexo g* 后产生的 *public* 文件与本地电脑原有源码仓生成的 *public* 不一样，查看里面并没有生成以日期命名的文章文件，怀疑是配置文件出了问题，对比两个配置文件都一样，最后发现 *node_modules* 文件夹问题，就是hexo的配置和安装问题，其他文件都推送到远程仓库，唯独没有推送这个文件夹，它保存有hexo的一些可执行文件。按照hexo安装教程在clone下来的代码仓重新安装一遍hexo，最后还是不行。使用[WinMerge](http://winmerge.org/)比较原电脑中和现在电脑中的两个node_modules文件的不同，发现hexo的很多二进制文件都不同。无语-\n 当使用 *hexo init* 后，再把远程仓库的配置文件覆盖到本地电脑后，可以正常生成静态网页。肯定是 *hexo* 安装不完整缺少某些依赖项。\n 所以，当在一台新电脑部署 *hexo* 的正确做法是安装好 *hexo* 之后需要 *hexo init* 一下，这样会安装依赖项，得到完整的 *node_modules*文件夹：\n　　```\n $npm install hexo --save\n $npm install hexo-server  --save\n $npm install hexo-generator-search --save\n $npm install hexo-deployer-git --save\n $hexo init //\n　　```\n 初始化之后，保留node_modules文件夹，其它删除，之后获取远程仓库最新更新：\n　　```\n $git remote add origin https://github.com/yourusername/yourusername.github.io.git\n $git pull origin hexo\n　　```\n# bash: /dev/tty: No such device or address.error: failed to execute prompt script (exit code 1)\n 当部署自己的博客文件时：\n　　```\n $hexo d \n　　```\n 出现以下错误：\n　　```\n bash: /dev/tty: No such device or address\n error: failed to execute prompt script (exit code 1)\n fatal: could not read Username for 'https://github.com': Invalid argument\n FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\n Error: bash: /dev/tty: No such device or address\n error: failed to execute prompt script (exit code 1)\n fatal: could not read Username for 'https://github.com': Invalid argument.\n　　```\n 出现该现象是 *windows* 环境下的*git bash shell*配置问题，当改用 *github for windows* 下的*git bash shell* 再次部署时问题解决。由于国内的网络问题，官网下载很难安装成功，这里附上一个CSDN上的大神的离线安装包地址[GithubforWindows](http://download.csdn.net/user/devsplash)。\n# Permission denied (publickey).\n 当部署博客文件时提示错误：\n　　```\n $hexo d\n The authenticity of host 'github.com (192.30.255.112)' can't be established.\n Permission denied (publickey).\n　　```\n 本机没有配置SSH Key：\n 　```\n $ssh-keygen -t rsa -C \"your_email@youremail.com\"\n　 ```\n 将生成的SSH Key拷贝下来，粘贴到自己的github网站的new ssh key中即可。或者使用原来电脑的SSH Key。完成后查看配置是否成功：\n 　```\n $ssh -T git@github.com\n 　```\n# Changes not staged for commit: Untracked files:\n当每次git commit提交更改时，总是提示以下错误：\n　　```\n $git commit -m \"\"\n On branch hexo\n Changes not staged for commit:\n       \n Untracked files:\n　　```\n 通过输入git status查看提示：\n　　```\n $ git status\n On branch hexo\n Changes not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        \n Untracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        \n no changes added to commit (use \"git add\" and/or \"git commit -a\")\n \n　　```\n *Changes not staged for commit* 说明 *git* 已经跟踪到这些文件的修改，但还没有放到暂存区，需要使用 *git add* 命令提交更新到暂存区。之后再通过 *git status* 查看状态：\n　　```\n $git status\n On branch hexo\n Changes to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n       \n　　```\n 状态已经变成了Changes to be committed。提示未被跟踪的文件Untracked files说明是新建立的文件，在git之前的提交中没有这些文件，git不会自动将它们纳入跟踪范围，必须手动添加这些文件。使用 *git add* 命令跟踪新文件：\n　　```\n $git add \"file\" //添加未被跟踪的文件\n　　```\n 如果还有错误，直接清除缓存:\n　　```\n $git rm -r --cached .\n $git add --all //跟踪所有文件\n $git commit -m \"your commit\" //提交更新\n $git push origin \"yourbranch\" //推送到远程分支yourbranch\n　　```","slug":"hexo-error","published":1,"updated":"2017-05-14T23:56:22.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj30tmxhj0009ikinj3fscjb2","content":"<h1 id=\"Unable-to-call-the-return-value-of-posts-“first”-“updated”-“toISOString”-which-is-undefined-or-falsey\"><a href=\"#Unable-to-call-the-return-value-of-posts-“first”-“updated”-“toISOString”-which-is-undefined-or-falsey\" class=\"headerlink\" title=\"Unable to call the return value of (posts[“first”])[“updated”][“toISOString”], which is undefined or falsey\"></a>Unable to call the return value of (posts[“first”])[“updated”][“toISOString”], which is undefined or falsey</h1><p> 运行<em>hexo g</em>生成静态文件时提示错误：<br>　　<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div><div class=\"line\">INFO  Start processing</div><div class=\"line\">FATAL Something<span class=\"comment\">'s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span></div><div class=\"line\">Template render <span class=\"keyword\">error</span>: (unknown path) [Line <span class=\"number\">7</span>, Column <span class=\"number\">23</span>]</div><div class=\"line\"><span class=\"keyword\">Error</span>: Unable <span class=\"keyword\">to</span> <span class=\"keyword\">call</span> `the <span class=\"keyword\">return</span> value <span class=\"keyword\">of</span> (posts[<span class=\"string\">\"first\"</span>])[<span class=\"string\">\"updated\"</span>][<span class=\"string\">\"toISOString\"</span>]`, which <span class=\"keyword\">is</span> undefined <span class=\"keyword\">or</span> falsey</div></pre></td></tr></table></figure></p>\n <a id=\"more\"></a>\n<p> 当移除掉插件hexo-generator-feed和hexo-generator-sitemap后错误消失，怀疑该插件与hexo兼容性不好<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> uninstall hexo-generator-feed</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> uninstall hexo-generator-sitemap</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"WARN-No-layout-index-html\"><a href=\"#WARN-No-layout-index-html\" class=\"headerlink\" title=\"WARN No layout: index.html?\"></a>WARN No layout: index.html?</h1><p> 查看主题目录是否为空，如果为空下载主题</p>\n<h1 id=\"fatal-AggregateException-encountered\"><a href=\"#fatal-AggregateException-encountered\" class=\"headerlink\" title=\"fatal: AggregateException encountered\"></a>fatal: AggregateException encountered</h1><p> 当推送至远程分支时提示错误:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> push origin hexo</span></div><div class=\"line\">fatal: AggregateException encountered</div><div class=\"line\">  •¢ÉúÒ»¸ö»ò¶à¸ö´íÎó¡£</div><div class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">'https://github.com'</span>:</div></pre></td></tr></table></figure></p>\n<p> 多数是网络问题，重来一次即可。</p>\n<h2 id=\"Cannot-GET\"><a href=\"#Cannot-GET\" class=\"headerlink\" title=\"Cannot GET /\"></a>Cannot GET /</h2><p> 当启动服务器后，浏览器输入<em><a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a></em>，却提示错误：<em>Cannot GET</em><br> 一般是配置文件错误，当在其他电脑从远程clone下来代码仓后，安装必要的工具使用 <em>hexo clean</em> 以及 <em>hexo g</em> 后产生的 <em>public</em> 文件与本地电脑原有源码仓生成的 <em>public</em> 不一样，查看里面并没有生成以日期命名的文章文件，怀疑是配置文件出了问题，对比两个配置文件都一样，最后发现 <em>node_modules</em> 文件夹问题，就是hexo的配置和安装问题，其他文件都推送到远程仓库，唯独没有推送这个文件夹，它保存有hexo的一些可执行文件。按照hexo安装教程在clone下来的代码仓重新安装一遍hexo，最后还是不行。使用<a href=\"http://winmerge.org/\" target=\"_blank\" rel=\"external\">WinMerge</a>比较原电脑中和现在电脑中的两个node_modules文件的不同，发现hexo的很多二进制文件都不同。无语-<br> 当使用 <em>hexo init</em> 后，再把远程仓库的配置文件覆盖到本地电脑后，可以正常生成静态网页。肯定是 <em>hexo</em> 安装不完整缺少某些依赖项。<br> 所以，当在一台新电脑部署 <em>hexo</em> 的正确做法是安装好 <em>hexo</em> 之后需要 <em>hexo init</em> 一下，这样会安装依赖项，得到完整的 <em>node_modules</em>文件夹：<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$npm</span> install hexo --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-server  --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-generator-<span class=\"keyword\">search</span> --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-deployer-git --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$hexo</span> init <span class=\"comment\">//</span></div></pre></td></tr></table></figure></p>\n<p> 初始化之后，保留node_modules文件夹，其它删除，之后获取远程仓库最新更新：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> remote add origin https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/yourusername/y</span>ourusername.github.io.git</div><div class=\"line\"><span class=\"variable\">$git</span> pull origin hexo</div></pre></td></tr></table></figure></p>\n<h1 id=\"bash-dev-tty-No-such-device-or-address-error-failed-to-execute-prompt-script-exit-code-1\"><a href=\"#bash-dev-tty-No-such-device-or-address-error-failed-to-execute-prompt-script-exit-code-1\" class=\"headerlink\" title=\"bash: /dev/tty: No such device or address.error: failed to execute prompt script (exit code 1)\"></a>bash: /dev/tty: No such device or address.error: failed to execute prompt script (exit code 1)</h1><p> 当部署自己的博客文件时：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$hexo</span> d</span></div></pre></td></tr></table></figure></p>\n<p> 出现以下错误：<br>　　<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">bash: /dev/tty: No such device or address</div><div class=\"line\"><span class=\"keyword\">error: </span>failed to execute prompt script (exit code 1)</div><div class=\"line\">fatal: could not read Username for 'https://github.com': Invalid argument</div><div class=\"line\">FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</div><div class=\"line\"><span class=\"keyword\">Error: </span>bash: /dev/tty: No such device or address</div><div class=\"line\"><span class=\"keyword\">error: </span>failed to execute prompt script (exit code 1)</div><div class=\"line\">fatal: could not read Username for 'https://github.com': Invalid argument.</div></pre></td></tr></table></figure></p>\n<p> 出现该现象是 <em>windows</em> 环境下的<em>git bash shell</em>配置问题，当改用 <em>github for windows</em> 下的<em>git bash shell</em> 再次部署时问题解决。由于国内的网络问题，官网下载很难安装成功，这里附上一个CSDN上的大神的离线安装包地址<a href=\"http://download.csdn.net/user/devsplash\" target=\"_blank\" rel=\"external\">GithubforWindows</a>。</p>\n<h1 id=\"Permission-denied-publickey\"><a href=\"#Permission-denied-publickey\" class=\"headerlink\" title=\"Permission denied (publickey).\"></a>Permission denied (publickey).</h1><p> 当部署博客文件时提示错误：<br>　　<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$hexo d</div><div class=\"line\">The authenticity <span class=\"keyword\">of</span> host <span class=\"symbol\">'github.com</span> (<span class=\"number\">192.30</span>.<span class=\"number\">255.112</span>)' can<span class=\"symbol\">'t</span> be established.</div><div class=\"line\">Permission denied (publickey).</div></pre></td></tr></table></figure></p>\n<p> 本机没有配置SSH Key：<br> 　<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></div></pre></td></tr></table></figure></p>\n<p> 将生成的SSH Key拷贝下来，粘贴到自己的github网站的new ssh key中即可。或者使用原来电脑的SSH Key。完成后查看配置是否成功：<br> 　<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh -T git<span class=\"symbol\">@github</span>.com</div></pre></td></tr></table></figure></p>\n<h1 id=\"Changes-not-staged-for-commit-Untracked-files\"><a href=\"#Changes-not-staged-for-commit-Untracked-files\" class=\"headerlink\" title=\"Changes not staged for commit: Untracked files:\"></a>Changes not staged for commit: Untracked files:</h1><p>当每次git commit提交更改时，总是提示以下错误：<br>　　<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git <span class=\"keyword\">commit</span> -m <span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"keyword\">On</span> branch hexo</div><div class=\"line\">Changes <span class=\"keyword\">not</span> staged <span class=\"keyword\">for</span> <span class=\"keyword\">commit</span>:</div><div class=\"line\">      </div><div class=\"line\">Untracked files:</div></pre></td></tr></table></figure></p>\n<p> 通过输入git status查看提示：<br>　　<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch hexo</div><div class=\"line\">Changes not staged for <span class=\"keyword\">commit</span>:</div><div class=\"line\"> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> <span class=\"keyword\">update</span> what will be committed)</div><div class=\"line\"> (<span class=\"keyword\">use</span> <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> discard changes <span class=\"keyword\">in</span> working <span class=\"keyword\">directory</span>)</div><div class=\"line\"></div><div class=\"line\">       </div><div class=\"line\">Untracked files:</div><div class=\"line\"> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> <span class=\"keyword\">include</span> <span class=\"keyword\">in</span> what will be committed)</div><div class=\"line\"></div><div class=\"line\">       </div><div class=\"line\"><span class=\"keyword\">no</span> changes added <span class=\"keyword\">to</span> <span class=\"keyword\">commit</span> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add\"</span> <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> <span class=\"string\">\"git commit -a\"</span>)</div></pre></td></tr></table></figure></p>\n<p> <em>Changes not staged for commit</em> 说明 <em>git</em> 已经跟踪到这些文件的修改，但还没有放到暂存区，需要使用 <em>git add</em> 命令提交更新到暂存区。之后再通过 <em>git status</em> 查看状态：<br>　　<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git status</div><div class=\"line\"><span class=\"keyword\">On</span> branch hexo</div><div class=\"line\">Changes <span class=\"keyword\">to</span> be committed:</div><div class=\"line\"> (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> unstage)</div></pre></td></tr></table></figure></p>\n<p> 状态已经变成了Changes to be committed。提示未被跟踪的文件Untracked files说明是新建立的文件，在git之前的提交中没有这些文件，git不会自动将它们纳入跟踪范围，必须手动添加这些文件。使用 <em>git add</em> 命令跟踪新文件：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> add <span class=\"string\">\"file\"</span> <span class=\"regexp\">//</span>添加未被跟踪的文件</div></pre></td></tr></table></figure></p>\n<p> 如果还有错误，直接清除缓存:<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git rm -r --cached .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git add --all //跟踪所有文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git commit -m <span class=\"string\">\"your commit\"</span> //提交更新</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git push origin <span class=\"string\">\"yourbranch\"</span> //推送到远程分支yourbranch</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Unable-to-call-the-return-value-of-posts-“first”-“updated”-“toISOString”-which-is-undefined-or-falsey\"><a href=\"#Unable-to-call-the-return-value-of-posts-“first”-“updated”-“toISOString”-which-is-undefined-or-falsey\" class=\"headerlink\" title=\"Unable to call the return value of (posts[“first”])[“updated”][“toISOString”], which is undefined or falsey\"></a>Unable to call the return value of (posts[“first”])[“updated”][“toISOString”], which is undefined or falsey</h1><p> 运行<em>hexo g</em>生成静态文件时提示错误：<br>　　<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div><div class=\"line\">INFO  Start processing</div><div class=\"line\">FATAL Something<span class=\"comment\">'s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span></div><div class=\"line\">Template render <span class=\"keyword\">error</span>: (unknown path) [Line <span class=\"number\">7</span>, Column <span class=\"number\">23</span>]</div><div class=\"line\"><span class=\"keyword\">Error</span>: Unable <span class=\"keyword\">to</span> <span class=\"keyword\">call</span> `the <span class=\"keyword\">return</span> value <span class=\"keyword\">of</span> (posts[<span class=\"string\">\"first\"</span>])[<span class=\"string\">\"updated\"</span>][<span class=\"string\">\"toISOString\"</span>]`, which <span class=\"keyword\">is</span> undefined <span class=\"keyword\">or</span> falsey</div></pre></td></tr></table></figure></p>","more":"<p> 当移除掉插件hexo-generator-feed和hexo-generator-sitemap后错误消失，怀疑该插件与hexo兼容性不好<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> uninstall hexo-generator-feed</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$npm</span> uninstall hexo-generator-sitemap</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"WARN-No-layout-index-html\"><a href=\"#WARN-No-layout-index-html\" class=\"headerlink\" title=\"WARN No layout: index.html?\"></a>WARN No layout: index.html?</h1><p> 查看主题目录是否为空，如果为空下载主题</p>\n<h1 id=\"fatal-AggregateException-encountered\"><a href=\"#fatal-AggregateException-encountered\" class=\"headerlink\" title=\"fatal: AggregateException encountered\"></a>fatal: AggregateException encountered</h1><p> 当推送至远程分支时提示错误:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$git</span> push origin hexo</span></div><div class=\"line\">fatal: AggregateException encountered</div><div class=\"line\">  •¢ÉúÒ»¸ö»ò¶à¸ö´íÎó¡£</div><div class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">'https://github.com'</span>:</div></pre></td></tr></table></figure></p>\n<p> 多数是网络问题，重来一次即可。</p>\n<h2 id=\"Cannot-GET\"><a href=\"#Cannot-GET\" class=\"headerlink\" title=\"Cannot GET /\"></a>Cannot GET /</h2><p> 当启动服务器后，浏览器输入<em><a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a></em>，却提示错误：<em>Cannot GET</em><br> 一般是配置文件错误，当在其他电脑从远程clone下来代码仓后，安装必要的工具使用 <em>hexo clean</em> 以及 <em>hexo g</em> 后产生的 <em>public</em> 文件与本地电脑原有源码仓生成的 <em>public</em> 不一样，查看里面并没有生成以日期命名的文章文件，怀疑是配置文件出了问题，对比两个配置文件都一样，最后发现 <em>node_modules</em> 文件夹问题，就是hexo的配置和安装问题，其他文件都推送到远程仓库，唯独没有推送这个文件夹，它保存有hexo的一些可执行文件。按照hexo安装教程在clone下来的代码仓重新安装一遍hexo，最后还是不行。使用<a href=\"http://winmerge.org/\" target=\"_blank\" rel=\"external\">WinMerge</a>比较原电脑中和现在电脑中的两个node_modules文件的不同，发现hexo的很多二进制文件都不同。无语-<br> 当使用 <em>hexo init</em> 后，再把远程仓库的配置文件覆盖到本地电脑后，可以正常生成静态网页。肯定是 <em>hexo</em> 安装不完整缺少某些依赖项。<br> 所以，当在一台新电脑部署 <em>hexo</em> 的正确做法是安装好 <em>hexo</em> 之后需要 <em>hexo init</em> 一下，这样会安装依赖项，得到完整的 <em>node_modules</em>文件夹：<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$npm</span> install hexo --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-server  --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-generator-<span class=\"keyword\">search</span> --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$npm</span> install hexo-deployer-git --<span class=\"keyword\">save</span></div><div class=\"line\"><span class=\"variable\">$hexo</span> init <span class=\"comment\">//</span></div></pre></td></tr></table></figure></p>\n<p> 初始化之后，保留node_modules文件夹，其它删除，之后获取远程仓库最新更新：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> remote add origin https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/yourusername/y</span>ourusername.github.io.git</div><div class=\"line\"><span class=\"variable\">$git</span> pull origin hexo</div></pre></td></tr></table></figure></p>\n<h1 id=\"bash-dev-tty-No-such-device-or-address-error-failed-to-execute-prompt-script-exit-code-1\"><a href=\"#bash-dev-tty-No-such-device-or-address-error-failed-to-execute-prompt-script-exit-code-1\" class=\"headerlink\" title=\"bash: /dev/tty: No such device or address.error: failed to execute prompt script (exit code 1)\"></a>bash: /dev/tty: No such device or address.error: failed to execute prompt script (exit code 1)</h1><p> 当部署自己的博客文件时：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$hexo</span> d</span></div></pre></td></tr></table></figure></p>\n<p> 出现以下错误：<br>　　<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">bash: /dev/tty: No such device or address</div><div class=\"line\"><span class=\"keyword\">error: </span>failed to execute prompt script (exit code 1)</div><div class=\"line\">fatal: could not read Username for 'https://github.com': Invalid argument</div><div class=\"line\">FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</div><div class=\"line\"><span class=\"keyword\">Error: </span>bash: /dev/tty: No such device or address</div><div class=\"line\"><span class=\"keyword\">error: </span>failed to execute prompt script (exit code 1)</div><div class=\"line\">fatal: could not read Username for 'https://github.com': Invalid argument.</div></pre></td></tr></table></figure></p>\n<p> 出现该现象是 <em>windows</em> 环境下的<em>git bash shell</em>配置问题，当改用 <em>github for windows</em> 下的<em>git bash shell</em> 再次部署时问题解决。由于国内的网络问题，官网下载很难安装成功，这里附上一个CSDN上的大神的离线安装包地址<a href=\"http://download.csdn.net/user/devsplash\" target=\"_blank\" rel=\"external\">GithubforWindows</a>。</p>\n<h1 id=\"Permission-denied-publickey\"><a href=\"#Permission-denied-publickey\" class=\"headerlink\" title=\"Permission denied (publickey).\"></a>Permission denied (publickey).</h1><p> 当部署博客文件时提示错误：<br>　　<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$hexo d</div><div class=\"line\">The authenticity <span class=\"keyword\">of</span> host <span class=\"symbol\">'github.com</span> (<span class=\"number\">192.30</span>.<span class=\"number\">255.112</span>)' can<span class=\"symbol\">'t</span> be established.</div><div class=\"line\">Permission denied (publickey).</div></pre></td></tr></table></figure></p>\n<p> 本机没有配置SSH Key：<br> 　<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></div></pre></td></tr></table></figure></p>\n<p> 将生成的SSH Key拷贝下来，粘贴到自己的github网站的new ssh key中即可。或者使用原来电脑的SSH Key。完成后查看配置是否成功：<br> 　<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh -T git<span class=\"symbol\">@github</span>.com</div></pre></td></tr></table></figure></p>\n<h1 id=\"Changes-not-staged-for-commit-Untracked-files\"><a href=\"#Changes-not-staged-for-commit-Untracked-files\" class=\"headerlink\" title=\"Changes not staged for commit: Untracked files:\"></a>Changes not staged for commit: Untracked files:</h1><p>当每次git commit提交更改时，总是提示以下错误：<br>　　<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git <span class=\"keyword\">commit</span> -m <span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"keyword\">On</span> branch hexo</div><div class=\"line\">Changes <span class=\"keyword\">not</span> staged <span class=\"keyword\">for</span> <span class=\"keyword\">commit</span>:</div><div class=\"line\">      </div><div class=\"line\">Untracked files:</div></pre></td></tr></table></figure></p>\n<p> 通过输入git status查看提示：<br>　　<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch hexo</div><div class=\"line\">Changes not staged for <span class=\"keyword\">commit</span>:</div><div class=\"line\"> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> <span class=\"keyword\">update</span> what will be committed)</div><div class=\"line\"> (<span class=\"keyword\">use</span> <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> discard changes <span class=\"keyword\">in</span> working <span class=\"keyword\">directory</span>)</div><div class=\"line\"></div><div class=\"line\">       </div><div class=\"line\">Untracked files:</div><div class=\"line\"> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> <span class=\"keyword\">include</span> <span class=\"keyword\">in</span> what will be committed)</div><div class=\"line\"></div><div class=\"line\">       </div><div class=\"line\"><span class=\"keyword\">no</span> changes added <span class=\"keyword\">to</span> <span class=\"keyword\">commit</span> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add\"</span> <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> <span class=\"string\">\"git commit -a\"</span>)</div></pre></td></tr></table></figure></p>\n<p> <em>Changes not staged for commit</em> 说明 <em>git</em> 已经跟踪到这些文件的修改，但还没有放到暂存区，需要使用 <em>git add</em> 命令提交更新到暂存区。之后再通过 <em>git status</em> 查看状态：<br>　　<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git status</div><div class=\"line\"><span class=\"keyword\">On</span> branch hexo</div><div class=\"line\">Changes <span class=\"keyword\">to</span> be committed:</div><div class=\"line\"> (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> unstage)</div></pre></td></tr></table></figure></p>\n<p> 状态已经变成了Changes to be committed。提示未被跟踪的文件Untracked files说明是新建立的文件，在git之前的提交中没有这些文件，git不会自动将它们纳入跟踪范围，必须手动添加这些文件。使用 <em>git add</em> 命令跟踪新文件：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> add <span class=\"string\">\"file\"</span> <span class=\"regexp\">//</span>添加未被跟踪的文件</div></pre></td></tr></table></figure></p>\n<p> 如果还有错误，直接清除缓存:<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git rm -r --cached .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git add --all //跟踪所有文件</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git commit -m <span class=\"string\">\"your commit\"</span> //提交更新</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git push origin <span class=\"string\">\"yourbranch\"</span> //推送到远程分支yourbranch</span></div></pre></td></tr></table></figure></p>"},{"title":"linux串口数据不连续问题","date":"2017-05-17T06:51:26.000Z","comments":1,"_content":"# 前言\n*linux* 下编写串口应用程序，无论是中断模式，还是 *select/poll* 模式，每次接收到的数据不一定是自己希望得到的数据。比如数据帧长度为40，有可能先接收到18个字节，接着接收到了12个字节，最后接收到了10个字节。不管怎么折腾，一帧数据总是不能一次接收完全。查阅相关资料，貌似是串口芯片缓存所致。串口芯片缓存满或着超时时间到都会触发读或写中断，这个说法是否真的如此，暂且不管，能不能用一种机制保证一次读到的是一帧数据呢？只有自己编写协议，先把数据分多次接收过来满足一个有效的帧长度之后，再进行处理。\n<!--more-->\n# 实现\n关于 *linux* 串口编程有很多参考例子：[serial-how-to](http://www.faqs.org/docs/Linux-HOWTO/Serial-Programming-HOWTO.html) [serial-Programming-Guide-For-POSIX-OS](http://digilander.libero.it/robang/rubrica/serial.htm)。其他读者可自行 [google](www.google.com)。为避免重复造轮子，本次采用 [libcssl](https://github.com/mwheels/libcssl),也可以从 [sourceforge](https://sourceforge.net/projects/cssl/) 下载它是基于事件驱动的异步串口驱动库，用该库测试时，即出现上面的现象，一帧数据总是分多次接收。为了避免该现象，修改代码如下：\n　　```\n static void callback(int id,\n               uint8_t *buf,\n               int length)\n  {\n      int i;\n      //printf(\"length:%d\\n\",length);\n      //printf(\"length:%d\\n\",length);\n      //如果数据帧不是一次接收到的\n      //则进行下面的处理，数据包的长度为FRAMELENGTH\n      for(i=0;i<length;i++) {\n          data[i+pos] = buf[i];\n          //printf(\"0x%02x \",buf[i]);\n      }\n      //记录位置\n      pos += length;\n      //收到既定的一帧\n      if(pos >= FRAMELENGTH){\n          pos = 0;\n          data_already = 1;\n      }\n      //进行处理\n      if(data_already == 1){//\n \n          for(i=0;i<FRAMELENGTH;i++)\n              printf(\"0x%02x \",data[i]);\n          memset(data,0,FRAMELENGTH);\n          data_already = 0 ;//数据包准备好信号置零\n          printf(\"\\n\");\n      }\n \n \n      //printf(\"\\n\");\n      //fflush(stdout);\n  }\n　　```\n在中断回调函数中，每次记录收到字节的个数 *pos* ，直到满足既定帧长度。测试结果可正常接收既定的一帧数据包，测试时可自行指定帧长度。\n本次测试一帧数据长度为32字节：\n![](linux-serial/libcssl.jpg)\n完整代码已 *push* 到 [github](https://github.com/StevenShiChina/libcssl-cpp)，欢迎下载测试交流。\n","source":"_posts/linux-serial.md","raw":"---\ntitle: linux串口数据不连续问题\ndate: 2017-05-17 14:51:26\ncategories: Linux\ntags:  Linux serial\ncomments: true\n---\n# 前言\n*linux* 下编写串口应用程序，无论是中断模式，还是 *select/poll* 模式，每次接收到的数据不一定是自己希望得到的数据。比如数据帧长度为40，有可能先接收到18个字节，接着接收到了12个字节，最后接收到了10个字节。不管怎么折腾，一帧数据总是不能一次接收完全。查阅相关资料，貌似是串口芯片缓存所致。串口芯片缓存满或着超时时间到都会触发读或写中断，这个说法是否真的如此，暂且不管，能不能用一种机制保证一次读到的是一帧数据呢？只有自己编写协议，先把数据分多次接收过来满足一个有效的帧长度之后，再进行处理。\n<!--more-->\n# 实现\n关于 *linux* 串口编程有很多参考例子：[serial-how-to](http://www.faqs.org/docs/Linux-HOWTO/Serial-Programming-HOWTO.html) [serial-Programming-Guide-For-POSIX-OS](http://digilander.libero.it/robang/rubrica/serial.htm)。其他读者可自行 [google](www.google.com)。为避免重复造轮子，本次采用 [libcssl](https://github.com/mwheels/libcssl),也可以从 [sourceforge](https://sourceforge.net/projects/cssl/) 下载它是基于事件驱动的异步串口驱动库，用该库测试时，即出现上面的现象，一帧数据总是分多次接收。为了避免该现象，修改代码如下：\n　　```\n static void callback(int id,\n               uint8_t *buf,\n               int length)\n  {\n      int i;\n      //printf(\"length:%d\\n\",length);\n      //printf(\"length:%d\\n\",length);\n      //如果数据帧不是一次接收到的\n      //则进行下面的处理，数据包的长度为FRAMELENGTH\n      for(i=0;i<length;i++) {\n          data[i+pos] = buf[i];\n          //printf(\"0x%02x \",buf[i]);\n      }\n      //记录位置\n      pos += length;\n      //收到既定的一帧\n      if(pos >= FRAMELENGTH){\n          pos = 0;\n          data_already = 1;\n      }\n      //进行处理\n      if(data_already == 1){//\n \n          for(i=0;i<FRAMELENGTH;i++)\n              printf(\"0x%02x \",data[i]);\n          memset(data,0,FRAMELENGTH);\n          data_already = 0 ;//数据包准备好信号置零\n          printf(\"\\n\");\n      }\n \n \n      //printf(\"\\n\");\n      //fflush(stdout);\n  }\n　　```\n在中断回调函数中，每次记录收到字节的个数 *pos* ，直到满足既定帧长度。测试结果可正常接收既定的一帧数据包，测试时可自行指定帧长度。\n本次测试一帧数据长度为32字节：\n![](linux-serial/libcssl.jpg)\n完整代码已 *push* 到 [github](https://github.com/StevenShiChina/libcssl-cpp)，欢迎下载测试交流。\n","slug":"linux-serial","published":1,"updated":"2017-05-19T09:11:08.071Z","layout":"post","photos":[],"link":"","_id":"cj30tmxhl000dikinojwflmsz","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><em>linux</em> 下编写串口应用程序，无论是中断模式，还是 <em>select/poll</em> 模式，每次接收到的数据不一定是自己希望得到的数据。比如数据帧长度为40，有可能先接收到18个字节，接着接收到了12个字节，最后接收到了10个字节。不管怎么折腾，一帧数据总是不能一次接收完全。查阅相关资料，貌似是串口芯片缓存所致。串口芯片缓存满或着超时时间到都会触发读或写中断，这个说法是否真的如此，暂且不管，能不能用一种机制保证一次读到的是一帧数据呢？只有自己编写协议，先把数据分多次接收过来满足一个有效的帧长度之后，再进行处理。<br><a id=\"more\"></a></p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>关于 <em>linux</em> 串口编程有很多参考例子：<a href=\"http://www.faqs.org/docs/Linux-HOWTO/Serial-Programming-HOWTO.html\" target=\"_blank\" rel=\"external\">serial-how-to</a> <a href=\"http://digilander.libero.it/robang/rubrica/serial.htm\" target=\"_blank\" rel=\"external\">serial-Programming-Guide-For-POSIX-OS</a>。其他读者可自行 <a href=\"www.google.com\">google</a>。为避免重复造轮子，本次采用 <a href=\"https://github.com/mwheels/libcssl\" target=\"_blank\" rel=\"external\">libcssl</a>,也可以从 <a href=\"https://sourceforge.net/projects/cssl/\" target=\"_blank\" rel=\"external\">sourceforge</a> 下载它是基于事件驱动的异步串口驱动库，用该库测试时，即出现上面的现象，一帧数据总是分多次接收。为了避免该现象，修改代码如下：<br>　　<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">static void callback(<span class=\"keyword\">int</span> id,</div><div class=\"line\">              uint8_t *buf,</div><div class=\"line\">              <span class=\"keyword\">int</span> <span class=\"keyword\">length</span>)</div><div class=\"line\"> &#123;</div><div class=\"line\">     <span class=\"keyword\">int</span> i;</div><div class=\"line\">     <span class=\"regexp\">//printf</span>(<span class=\"string\">\"length:%d\\n\"</span>,<span class=\"keyword\">length</span>);</div><div class=\"line\">     <span class=\"regexp\">//printf</span>(<span class=\"string\">\"length:%d\\n\"</span>,<span class=\"keyword\">length</span>);</div><div class=\"line\">     <span class=\"regexp\">//</span>如果数据帧不是一次接收到的</div><div class=\"line\">     //则进行下面的处理，数据包的长度为FRAMELENGTH</div><div class=\"line\">     <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"keyword\">length</span>;i++) &#123;</div><div class=\"line\">         data[i+<span class=\"keyword\">pos</span>] = buf[i];</div><div class=\"line\">         <span class=\"regexp\">//printf</span>(<span class=\"string\">\"0x%02x \"</span>,buf[i]);</div><div class=\"line\">     &#125;</div><div class=\"line\">     //记录位置</div><div class=\"line\">     <span class=\"keyword\">pos</span> += <span class=\"keyword\">length</span>;</div><div class=\"line\">     <span class=\"regexp\">//</span>收到既定的一帧</div><div class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"keyword\">pos</span> &gt;= FRAMELENGTH)&#123;</div><div class=\"line\">         <span class=\"keyword\">pos</span> = <span class=\"number\">0</span>;</div><div class=\"line\">         data_already = <span class=\"number\">1</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     //进行处理</div><div class=\"line\">     <span class=\"keyword\">if</span>(data_already == <span class=\"number\">1</span>)&#123;<span class=\"regexp\">//</span></div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;FRAMELENGTH;i++)</div><div class=\"line\">             <span class=\"keyword\">printf</span>(<span class=\"string\">\"0x%02x \"</span>,data[i]);</div><div class=\"line\">         memset(data,<span class=\"number\">0</span>,FRAMELENGTH);</div><div class=\"line\">         data_already = <span class=\"number\">0</span> ;<span class=\"regexp\">//</span>数据包准备好信号置零</div><div class=\"line\">         <span class=\"keyword\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     //<span class=\"keyword\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">     <span class=\"regexp\">//fflush</span>(stdout);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>在中断回调函数中，每次记录收到字节的个数 <em>pos</em> ，直到满足既定帧长度。测试结果可正常接收既定的一帧数据包，测试时可自行指定帧长度。<br>本次测试一帧数据长度为32字节：<br><img src=\"/2017/05/17/linux-serial/libcssl.jpg\" alt=\"\"><br>完整代码已 <em>push</em> 到 <a href=\"https://github.com/StevenShiChina/libcssl-cpp\" target=\"_blank\" rel=\"external\">github</a>，欢迎下载测试交流。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><em>linux</em> 下编写串口应用程序，无论是中断模式，还是 <em>select/poll</em> 模式，每次接收到的数据不一定是自己希望得到的数据。比如数据帧长度为40，有可能先接收到18个字节，接着接收到了12个字节，最后接收到了10个字节。不管怎么折腾，一帧数据总是不能一次接收完全。查阅相关资料，貌似是串口芯片缓存所致。串口芯片缓存满或着超时时间到都会触发读或写中断，这个说法是否真的如此，暂且不管，能不能用一种机制保证一次读到的是一帧数据呢？只有自己编写协议，先把数据分多次接收过来满足一个有效的帧长度之后，再进行处理。<br></p>","more":"<p></p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>关于 <em>linux</em> 串口编程有很多参考例子：<a href=\"http://www.faqs.org/docs/Linux-HOWTO/Serial-Programming-HOWTO.html\" target=\"_blank\" rel=\"external\">serial-how-to</a> <a href=\"http://digilander.libero.it/robang/rubrica/serial.htm\" target=\"_blank\" rel=\"external\">serial-Programming-Guide-For-POSIX-OS</a>。其他读者可自行 <a href=\"www.google.com\">google</a>。为避免重复造轮子，本次采用 <a href=\"https://github.com/mwheels/libcssl\" target=\"_blank\" rel=\"external\">libcssl</a>,也可以从 <a href=\"https://sourceforge.net/projects/cssl/\" target=\"_blank\" rel=\"external\">sourceforge</a> 下载它是基于事件驱动的异步串口驱动库，用该库测试时，即出现上面的现象，一帧数据总是分多次接收。为了避免该现象，修改代码如下：<br>　　<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">static void callback(<span class=\"keyword\">int</span> id,</div><div class=\"line\">              uint8_t *buf,</div><div class=\"line\">              <span class=\"keyword\">int</span> <span class=\"keyword\">length</span>)</div><div class=\"line\"> &#123;</div><div class=\"line\">     <span class=\"keyword\">int</span> i;</div><div class=\"line\">     <span class=\"regexp\">//printf</span>(<span class=\"string\">\"length:%d\\n\"</span>,<span class=\"keyword\">length</span>);</div><div class=\"line\">     <span class=\"regexp\">//printf</span>(<span class=\"string\">\"length:%d\\n\"</span>,<span class=\"keyword\">length</span>);</div><div class=\"line\">     <span class=\"regexp\">//</span>如果数据帧不是一次接收到的</div><div class=\"line\">     //则进行下面的处理，数据包的长度为FRAMELENGTH</div><div class=\"line\">     <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"keyword\">length</span>;i++) &#123;</div><div class=\"line\">         data[i+<span class=\"keyword\">pos</span>] = buf[i];</div><div class=\"line\">         <span class=\"regexp\">//printf</span>(<span class=\"string\">\"0x%02x \"</span>,buf[i]);</div><div class=\"line\">     &#125;</div><div class=\"line\">     //记录位置</div><div class=\"line\">     <span class=\"keyword\">pos</span> += <span class=\"keyword\">length</span>;</div><div class=\"line\">     <span class=\"regexp\">//</span>收到既定的一帧</div><div class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"keyword\">pos</span> &gt;= FRAMELENGTH)&#123;</div><div class=\"line\">         <span class=\"keyword\">pos</span> = <span class=\"number\">0</span>;</div><div class=\"line\">         data_already = <span class=\"number\">1</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     //进行处理</div><div class=\"line\">     <span class=\"keyword\">if</span>(data_already == <span class=\"number\">1</span>)&#123;<span class=\"regexp\">//</span></div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;FRAMELENGTH;i++)</div><div class=\"line\">             <span class=\"keyword\">printf</span>(<span class=\"string\">\"0x%02x \"</span>,data[i]);</div><div class=\"line\">         memset(data,<span class=\"number\">0</span>,FRAMELENGTH);</div><div class=\"line\">         data_already = <span class=\"number\">0</span> ;<span class=\"regexp\">//</span>数据包准备好信号置零</div><div class=\"line\">         <span class=\"keyword\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     //<span class=\"keyword\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">     <span class=\"regexp\">//fflush</span>(stdout);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>在中断回调函数中，每次记录收到字节的个数 <em>pos</em> ，直到满足既定帧长度。测试结果可正常接收既定的一帧数据包，测试时可自行指定帧长度。<br>本次测试一帧数据长度为32字节：<br><img src=\"/2017/05/17/linux-serial/libcssl.jpg\" alt=\"\"><br>完整代码已 <em>push</em> 到 <a href=\"https://github.com/StevenShiChina/libcssl-cpp\" target=\"_blank\" rel=\"external\">github</a>，欢迎下载测试交流。</p>"},{"title":"Qt如何在指定位置显示控件","date":"2017-05-09T01:20:14.000Z","comments":1,"_content":"# 前言\n假如窗体背景为一张图片，想要在图片的某一个位置放置一个*Qlabel*，用于显示一个实时变量，但又不知道这个位置的精确坐标，这个时候该如何实现呢？\n# 思路\n一种方法是借用图片工具，找到指定位置的相对坐标，然后将控件放置在该坐标处;另一种方法可以将图片用网格划分，然后添加一个网格布局，查看指定的位置位于哪一行哪一列，然后将控件放置到布局中。这种方式不能做到精确的定位，但大体上可以使用。考虑到简单实用，选择第二种方法。\n# 开始\n<!--more-->\n## 添加资源文件\n首先创建一个*QWidget*，并设置背景图片。在工程目录下创建一个名为*icons*的文件夹，将图片放置到这个位置。回到*Qt*工程目录，右键自己的工程选择添加新文件->*qt*资源文件: ![Alt text](qt-widget-designated-location/qrc.jpg)\n\n假如建立后的资源文件为*res.qrc*,打开后，选择添加前缀，并添加刚才放置的图片文件，添加后的*res.qrc*如下:![Alt text](qt-widget-designated-location/res-qrc.jpg)\n## 设置背景图片\n在设置背景图片后要保证窗口变化时，背景图片能够随着窗口的变化而变化。因此需要重写窗口的*resizeEvent*事件。\n　　```\nvoid MainWindow::resizeEvent(QResizeEvent *event)\n{\n　QWidget::resizeEvent(event);\n　QImage image;\n　image.load(\":/icons/linux.jpeg\");\n　QPalette palette;\n　palette.setBrush(this->backgroundRole(),QBrush(image.scaled(event->size(),Qt::IgnoreAspectRatio,Qt::SmoothTransformation)));\n　this->setPalette(palette);\n　}\n　　```\n显示效果如下：![Alt text](qt-widget-designated-location/linux.jpg)\n## 将窗体网格化\n假如我想在X字符下面显示一个*Qlabel*，现将窗体分成8行9列因为我的显示器是16:9尺寸，并显示所画的网格线，重写窗体的*paintEvent*事件：\n　　```\n void MainWindow::paintEvent(QPaintEvent *event)\n {\n　//画网格线\n  QPainter painter(this);\n  drawMyGrid(&painter,8,9);\n  painter.setPen(Qt::black);\n　}\n void MainWindow::drawMyGrid(QPainter *painter,int row,int col)\n {\n  int mgin=1;//边界\n  QRect rect;\n  int i,j,x,y;\n  rect=QRect(mgin,mgin,width()-mgin,height()-mgin);\n\n  for( j=0;j<=row;j++)//行\n  {\n   y=rect.bottom()-(j*(rect.height()-mgin)/row);\n   painter->drawLine(rect.left(),y,rect.right(),y);\n  }\n  for(i=0;i<=col;i++)//列\n  {\n   x=rect.left()+(i*(rect.width()-mgin)/col);\n   painter->drawLine(x,rect.top(),x,rect.bottom());\n  }\n}\n　　```\n显示效果：![Alt text](qt-widget-designated-location/grid.jpg)\n## 在指定位置放置控件\n字符X下方的位置为第六行第七列。首先给窗体安装一个*QGridLayout*布局，将*Qlabel*放置到该布局中。\n　　```\n　label1  = new QLabel(tr(\"Text\"));\n　label1->setStyleSheet(\"color:white;font:bold;font-size:30\");\n　QGridLayout *mylayout     = new QGridLayout;\n　mylayout->addWidget(label1,5,6,1,1);//第六行第七列，占用1行1列\n　QWidget * widget = new QWidget(this);\n　widget->setLayout(mylayout);//安装布局\n　setCentralWidget(widget);\n　　```\n通过以下代码设置行列的宽高比例:\n　　```\n mylayout->setColumnStretch(0,1);//设置第一列的宽度比例\n mylayout->setRowStretch(0,1);//设置第一行的高度比例\n　　```\n必须指定每一行每一列的高度和宽度比。\n最后效果:![Alt text](qt-widget-designated-location/final.jpg)\n","source":"_posts/qt-widget-designated-location.md","raw":"---\ntitle: Qt如何在指定位置显示控件\ndate: 2017-05-09 09:20:14\ntags: Qt\ncategories: Qt\ncomments: true\n---\n# 前言\n假如窗体背景为一张图片，想要在图片的某一个位置放置一个*Qlabel*，用于显示一个实时变量，但又不知道这个位置的精确坐标，这个时候该如何实现呢？\n# 思路\n一种方法是借用图片工具，找到指定位置的相对坐标，然后将控件放置在该坐标处;另一种方法可以将图片用网格划分，然后添加一个网格布局，查看指定的位置位于哪一行哪一列，然后将控件放置到布局中。这种方式不能做到精确的定位，但大体上可以使用。考虑到简单实用，选择第二种方法。\n# 开始\n<!--more-->\n## 添加资源文件\n首先创建一个*QWidget*，并设置背景图片。在工程目录下创建一个名为*icons*的文件夹，将图片放置到这个位置。回到*Qt*工程目录，右键自己的工程选择添加新文件->*qt*资源文件: ![Alt text](qt-widget-designated-location/qrc.jpg)\n\n假如建立后的资源文件为*res.qrc*,打开后，选择添加前缀，并添加刚才放置的图片文件，添加后的*res.qrc*如下:![Alt text](qt-widget-designated-location/res-qrc.jpg)\n## 设置背景图片\n在设置背景图片后要保证窗口变化时，背景图片能够随着窗口的变化而变化。因此需要重写窗口的*resizeEvent*事件。\n　　```\nvoid MainWindow::resizeEvent(QResizeEvent *event)\n{\n　QWidget::resizeEvent(event);\n　QImage image;\n　image.load(\":/icons/linux.jpeg\");\n　QPalette palette;\n　palette.setBrush(this->backgroundRole(),QBrush(image.scaled(event->size(),Qt::IgnoreAspectRatio,Qt::SmoothTransformation)));\n　this->setPalette(palette);\n　}\n　　```\n显示效果如下：![Alt text](qt-widget-designated-location/linux.jpg)\n## 将窗体网格化\n假如我想在X字符下面显示一个*Qlabel*，现将窗体分成8行9列因为我的显示器是16:9尺寸，并显示所画的网格线，重写窗体的*paintEvent*事件：\n　　```\n void MainWindow::paintEvent(QPaintEvent *event)\n {\n　//画网格线\n  QPainter painter(this);\n  drawMyGrid(&painter,8,9);\n  painter.setPen(Qt::black);\n　}\n void MainWindow::drawMyGrid(QPainter *painter,int row,int col)\n {\n  int mgin=1;//边界\n  QRect rect;\n  int i,j,x,y;\n  rect=QRect(mgin,mgin,width()-mgin,height()-mgin);\n\n  for( j=0;j<=row;j++)//行\n  {\n   y=rect.bottom()-(j*(rect.height()-mgin)/row);\n   painter->drawLine(rect.left(),y,rect.right(),y);\n  }\n  for(i=0;i<=col;i++)//列\n  {\n   x=rect.left()+(i*(rect.width()-mgin)/col);\n   painter->drawLine(x,rect.top(),x,rect.bottom());\n  }\n}\n　　```\n显示效果：![Alt text](qt-widget-designated-location/grid.jpg)\n## 在指定位置放置控件\n字符X下方的位置为第六行第七列。首先给窗体安装一个*QGridLayout*布局，将*Qlabel*放置到该布局中。\n　　```\n　label1  = new QLabel(tr(\"Text\"));\n　label1->setStyleSheet(\"color:white;font:bold;font-size:30\");\n　QGridLayout *mylayout     = new QGridLayout;\n　mylayout->addWidget(label1,5,6,1,1);//第六行第七列，占用1行1列\n　QWidget * widget = new QWidget(this);\n　widget->setLayout(mylayout);//安装布局\n　setCentralWidget(widget);\n　　```\n通过以下代码设置行列的宽高比例:\n　　```\n mylayout->setColumnStretch(0,1);//设置第一列的宽度比例\n mylayout->setRowStretch(0,1);//设置第一行的高度比例\n　　```\n必须指定每一行每一列的高度和宽度比。\n最后效果:![Alt text](qt-widget-designated-location/final.jpg)\n","slug":"qt-widget-designated-location","published":1,"updated":"2017-05-14T23:56:22.522Z","layout":"post","photos":[],"link":"","_id":"cj30tmxho000gikin3hdcwvnb","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>假如窗体背景为一张图片，想要在图片的某一个位置放置一个<em>Qlabel</em>，用于显示一个实时变量，但又不知道这个位置的精确坐标，这个时候该如何实现呢？</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>一种方法是借用图片工具，找到指定位置的相对坐标，然后将控件放置在该坐标处;另一种方法可以将图片用网格划分，然后添加一个网格布局，查看指定的位置位于哪一行哪一列，然后将控件放置到布局中。这种方式不能做到精确的定位，但大体上可以使用。考虑到简单实用，选择第二种方法。</p>\n<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><a id=\"more\"></a>\n<h2 id=\"添加资源文件\"><a href=\"#添加资源文件\" class=\"headerlink\" title=\"添加资源文件\"></a>添加资源文件</h2><p>首先创建一个<em>QWidget</em>，并设置背景图片。在工程目录下创建一个名为<em>icons</em>的文件夹，将图片放置到这个位置。回到<em>Qt</em>工程目录，右键自己的工程选择添加新文件-&gt;<em>qt</em>资源文件: <img src=\"/2017/05/09/qt-widget-designated-location/qrc.jpg\" alt=\"Alt text\"></p>\n<p>假如建立后的资源文件为<em>res.qrc</em>,打开后，选择添加前缀，并添加刚才放置的图片文件，添加后的<em>res.qrc</em>如下:<img src=\"/2017/05/09/qt-widget-designated-location/res-qrc.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"设置背景图片\"><a href=\"#设置背景图片\" class=\"headerlink\" title=\"设置背景图片\"></a>设置背景图片</h2><p>在设置背景图片后要保证窗口变化时，背景图片能够随着窗口的变化而变化。因此需要重写窗口的<em>resizeEvent</em>事件。<br>　　<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> MainWindow::resizeEvent(QResizeEvent *event)</div><div class=\"line\">&#123;</div><div class=\"line\">　QWidget::resizeEvent(event);</div><div class=\"line\">　QImage <span class=\"built_in\">image</span>;</div><div class=\"line\">　<span class=\"built_in\">image</span>.load(<span class=\"string\">\":/icons/linux.jpeg\"</span>);</div><div class=\"line\">　QPalette palette;</div><div class=\"line\">　palette.setBrush(<span class=\"keyword\">this</span>-&gt;backgroundRole(),QBrush(<span class=\"built_in\">image</span>.scaled(event-&gt;<span class=\"built_in\">size</span>(),Qt::IgnoreAspectRatio,Qt::SmoothTransformation)));</div><div class=\"line\">　<span class=\"keyword\">this</span>-&gt;setPalette(palette);</div><div class=\"line\">　&#125;</div></pre></td></tr></table></figure></p>\n<p>显示效果如下：<img src=\"/2017/05/09/qt-widget-designated-location/linux.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"将窗体网格化\"><a href=\"#将窗体网格化\" class=\"headerlink\" title=\"将窗体网格化\"></a>将窗体网格化</h2><p>假如我想在X字符下面显示一个<em>Qlabel</em>，现将窗体分成8行9列因为我的显示器是16:9尺寸，并显示所画的网格线，重写窗体的<em>paintEvent</em>事件：<br>　　<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">void</span> MainWindow::paintEvent(QPaintEvent *event)</div><div class=\"line\"> &#123;</div><div class=\"line\">　<span class=\"comment\">//画网格线</span></div><div class=\"line\">  QPainter painter(<span class=\"keyword\">this</span>);</div><div class=\"line\">  drawMyGrid(&amp;painter,<span class=\"number\">8</span>,<span class=\"number\">9</span>);</div><div class=\"line\">  painter.setPen(Qt::black);</div><div class=\"line\">　&#125;</div><div class=\"line\"> <span class=\"keyword\">void</span> MainWindow::drawMyGrid(QPainter *painter,<span class=\"keyword\">int</span> row,<span class=\"keyword\">int</span> col)</div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> mgin=<span class=\"number\">1</span>;<span class=\"comment\">//边界</span></div><div class=\"line\">  QRect <span class=\"built_in\">rect</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> i,j,x,y;</div><div class=\"line\">  <span class=\"built_in\">rect</span>=QRect(mgin,mgin,<span class=\"built_in\">width</span>()-mgin,<span class=\"built_in\">height</span>()-mgin);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">for</span>( j=<span class=\"number\">0</span>;j&lt;=row;j++)<span class=\"comment\">//行</span></div><div class=\"line\">  &#123;</div><div class=\"line\">   y=<span class=\"built_in\">rect</span>.bottom()-(j*(<span class=\"built_in\">rect</span>.<span class=\"built_in\">height</span>()-mgin)/row);</div><div class=\"line\">   painter-&gt;drawLine(<span class=\"built_in\">rect</span>.left(),y,<span class=\"built_in\">rect</span>.right(),y);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">for</span>(i=<span class=\"number\">0</span>;i&lt;=col;i++)<span class=\"comment\">//列</span></div><div class=\"line\">  &#123;</div><div class=\"line\">   x=<span class=\"built_in\">rect</span>.left()+(i*(<span class=\"built_in\">rect</span>.<span class=\"built_in\">width</span>()-mgin)/col);</div><div class=\"line\">   painter-&gt;drawLine(x,<span class=\"built_in\">rect</span>.top(),x,<span class=\"built_in\">rect</span>.bottom());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>显示效果：<img src=\"/2017/05/09/qt-widget-designated-location/grid.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"在指定位置放置控件\"><a href=\"#在指定位置放置控件\" class=\"headerlink\" title=\"在指定位置放置控件\"></a>在指定位置放置控件</h2><p>字符X下方的位置为第六行第七列。首先给窗体安装一个<em>QGridLayout</em>布局，将<em>Qlabel</em>放置到该布局中。<br>　　<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　label1  = new QLabel(<span class=\"name\">tr</span>(<span class=\"string\">\"Text\"</span>))<span class=\"comment\">;</span></div><div class=\"line\">　label1-&gt;setStyleSheet(<span class=\"string\">\"color:white;font:bold;font-size:30\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">　QGridLayout *mylayout     = new QGridLayout<span class=\"comment\">;</span></div><div class=\"line\">　mylayout-&gt;addWidget(<span class=\"name\">label1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>)<span class=\"comment\">;//第六行第七列，占用1行1列</span></div><div class=\"line\">　QWidget * widget = new QWidget(<span class=\"name\">this</span>)<span class=\"comment\">;</span></div><div class=\"line\">　widget-&gt;setLayout(<span class=\"name\">mylayout</span>)<span class=\"comment\">;//安装布局</span></div><div class=\"line\">　setCentralWidget(<span class=\"name\">widget</span>)<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>通过以下代码设置行列的宽高比例:<br>　　<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mylayout-&gt;setColumnStretch(<span class=\"number\">0</span>,<span class=\"number\">1</span>);<span class=\"comment\">//设置第一列的宽度比例</span></div><div class=\"line\">mylayout-&gt;setRowStretch(<span class=\"number\">0</span>,<span class=\"number\">1</span>);<span class=\"comment\">//设置第一行的高度比例</span></div></pre></td></tr></table></figure></p>\n<p>必须指定每一行每一列的高度和宽度比。<br>最后效果:<img src=\"/2017/05/09/qt-widget-designated-location/final.jpg\" alt=\"Alt text\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>假如窗体背景为一张图片，想要在图片的某一个位置放置一个<em>Qlabel</em>，用于显示一个实时变量，但又不知道这个位置的精确坐标，这个时候该如何实现呢？</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>一种方法是借用图片工具，找到指定位置的相对坐标，然后将控件放置在该坐标处;另一种方法可以将图片用网格划分，然后添加一个网格布局，查看指定的位置位于哪一行哪一列，然后将控件放置到布局中。这种方式不能做到精确的定位，但大体上可以使用。考虑到简单实用，选择第二种方法。</p>\n<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1>","more":"<h2 id=\"添加资源文件\"><a href=\"#添加资源文件\" class=\"headerlink\" title=\"添加资源文件\"></a>添加资源文件</h2><p>首先创建一个<em>QWidget</em>，并设置背景图片。在工程目录下创建一个名为<em>icons</em>的文件夹，将图片放置到这个位置。回到<em>Qt</em>工程目录，右键自己的工程选择添加新文件-&gt;<em>qt</em>资源文件: <img src=\"/2017/05/09/qt-widget-designated-location/qrc.jpg\" alt=\"Alt text\"></p>\n<p>假如建立后的资源文件为<em>res.qrc</em>,打开后，选择添加前缀，并添加刚才放置的图片文件，添加后的<em>res.qrc</em>如下:<img src=\"/2017/05/09/qt-widget-designated-location/res-qrc.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"设置背景图片\"><a href=\"#设置背景图片\" class=\"headerlink\" title=\"设置背景图片\"></a>设置背景图片</h2><p>在设置背景图片后要保证窗口变化时，背景图片能够随着窗口的变化而变化。因此需要重写窗口的<em>resizeEvent</em>事件。<br>　　<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> MainWindow::resizeEvent(QResizeEvent *event)</div><div class=\"line\">&#123;</div><div class=\"line\">　QWidget::resizeEvent(event);</div><div class=\"line\">　QImage <span class=\"built_in\">image</span>;</div><div class=\"line\">　<span class=\"built_in\">image</span>.load(<span class=\"string\">\":/icons/linux.jpeg\"</span>);</div><div class=\"line\">　QPalette palette;</div><div class=\"line\">　palette.setBrush(<span class=\"keyword\">this</span>-&gt;backgroundRole(),QBrush(<span class=\"built_in\">image</span>.scaled(event-&gt;<span class=\"built_in\">size</span>(),Qt::IgnoreAspectRatio,Qt::SmoothTransformation)));</div><div class=\"line\">　<span class=\"keyword\">this</span>-&gt;setPalette(palette);</div><div class=\"line\">　&#125;</div></pre></td></tr></table></figure></p>\n<p>显示效果如下：<img src=\"/2017/05/09/qt-widget-designated-location/linux.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"将窗体网格化\"><a href=\"#将窗体网格化\" class=\"headerlink\" title=\"将窗体网格化\"></a>将窗体网格化</h2><p>假如我想在X字符下面显示一个<em>Qlabel</em>，现将窗体分成8行9列因为我的显示器是16:9尺寸，并显示所画的网格线，重写窗体的<em>paintEvent</em>事件：<br>　　<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">void</span> MainWindow::paintEvent(QPaintEvent *event)</div><div class=\"line\"> &#123;</div><div class=\"line\">　<span class=\"comment\">//画网格线</span></div><div class=\"line\">  QPainter painter(<span class=\"keyword\">this</span>);</div><div class=\"line\">  drawMyGrid(&amp;painter,<span class=\"number\">8</span>,<span class=\"number\">9</span>);</div><div class=\"line\">  painter.setPen(Qt::black);</div><div class=\"line\">　&#125;</div><div class=\"line\"> <span class=\"keyword\">void</span> MainWindow::drawMyGrid(QPainter *painter,<span class=\"keyword\">int</span> row,<span class=\"keyword\">int</span> col)</div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> mgin=<span class=\"number\">1</span>;<span class=\"comment\">//边界</span></div><div class=\"line\">  QRect <span class=\"built_in\">rect</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> i,j,x,y;</div><div class=\"line\">  <span class=\"built_in\">rect</span>=QRect(mgin,mgin,<span class=\"built_in\">width</span>()-mgin,<span class=\"built_in\">height</span>()-mgin);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">for</span>( j=<span class=\"number\">0</span>;j&lt;=row;j++)<span class=\"comment\">//行</span></div><div class=\"line\">  &#123;</div><div class=\"line\">   y=<span class=\"built_in\">rect</span>.bottom()-(j*(<span class=\"built_in\">rect</span>.<span class=\"built_in\">height</span>()-mgin)/row);</div><div class=\"line\">   painter-&gt;drawLine(<span class=\"built_in\">rect</span>.left(),y,<span class=\"built_in\">rect</span>.right(),y);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">for</span>(i=<span class=\"number\">0</span>;i&lt;=col;i++)<span class=\"comment\">//列</span></div><div class=\"line\">  &#123;</div><div class=\"line\">   x=<span class=\"built_in\">rect</span>.left()+(i*(<span class=\"built_in\">rect</span>.<span class=\"built_in\">width</span>()-mgin)/col);</div><div class=\"line\">   painter-&gt;drawLine(x,<span class=\"built_in\">rect</span>.top(),x,<span class=\"built_in\">rect</span>.bottom());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>显示效果：<img src=\"/2017/05/09/qt-widget-designated-location/grid.jpg\" alt=\"Alt text\"></p>\n<h2 id=\"在指定位置放置控件\"><a href=\"#在指定位置放置控件\" class=\"headerlink\" title=\"在指定位置放置控件\"></a>在指定位置放置控件</h2><p>字符X下方的位置为第六行第七列。首先给窗体安装一个<em>QGridLayout</em>布局，将<em>Qlabel</em>放置到该布局中。<br>　　<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　label1  = new QLabel(<span class=\"name\">tr</span>(<span class=\"string\">\"Text\"</span>))<span class=\"comment\">;</span></div><div class=\"line\">　label1-&gt;setStyleSheet(<span class=\"string\">\"color:white;font:bold;font-size:30\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">　QGridLayout *mylayout     = new QGridLayout<span class=\"comment\">;</span></div><div class=\"line\">　mylayout-&gt;addWidget(<span class=\"name\">label1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>)<span class=\"comment\">;//第六行第七列，占用1行1列</span></div><div class=\"line\">　QWidget * widget = new QWidget(<span class=\"name\">this</span>)<span class=\"comment\">;</span></div><div class=\"line\">　widget-&gt;setLayout(<span class=\"name\">mylayout</span>)<span class=\"comment\">;//安装布局</span></div><div class=\"line\">　setCentralWidget(<span class=\"name\">widget</span>)<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>通过以下代码设置行列的宽高比例:<br>　　<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mylayout-&gt;setColumnStretch(<span class=\"number\">0</span>,<span class=\"number\">1</span>);<span class=\"comment\">//设置第一列的宽度比例</span></div><div class=\"line\">mylayout-&gt;setRowStretch(<span class=\"number\">0</span>,<span class=\"number\">1</span>);<span class=\"comment\">//设置第一行的高度比例</span></div></pre></td></tr></table></figure></p>\n<p>必须指定每一行每一列的高度和宽度比。<br>最后效果:<img src=\"/2017/05/09/qt-widget-designated-location/final.jpg\" alt=\"Alt text\"></p>"},{"title":"树莓派3B使用前的配置","date":"2017-05-15T01:32:02.000Z","comments":1,"_content":"前段时间入手一块树莓派[raspberryPi](https://www.raspberrypi.org/)型号为3B。关于它的介绍这里就不多说了，可自行[google](https://www.google.com)。使用前需要准备一张SD卡用于安装系统镜像。容量尽可能大，最好不低于16G。树莓派支持多种平台，因后续要安装[ROS](http://www.ros.org/)，考虑到官方支持的稳定性，选用 *Raspbian* 平台镜像。因为*Raspbian* 是官方推荐的支持的操作系统，而[Ros-indigo](http://wiki.ros.org/cn/indigo)也刚好有基于该平台的安装包。\n# 镜像安装\n参考官网[Install-Images](https://www.raspberrypi.org/documentation/installation/installing-images/)。我安装的版本为*2017-03-02-raspbian-jessie.img*\n<!--more-->\n# 开启SSH和串口\n该版本默认不开启SSH以及串口功能，需要手动开启。树莓派板子需要连接显示器、键盘、鼠标。在终端中输入:\n　　```\n  $sudo raspi-config\n　　```\n进行配置。树莓派默认的用户名为*pi*密码为*raspberry*。\n![](raspberryPi/config.jpg)\n进入第5项开启SSH以及GPIO14 GPIO15对应的串口控制台功能。串口功能开启后就可以抛弃鼠标、键盘、显示器直接在控制台访问树莓派。\n# 开启VNC远程桌面\n同样在配置菜单的第5项开启:![](raspberryPi/portconfig.jpg)\n在windows上安装[VNC Viewer](https://www.realvnc.com/)并且输入树莓派的IP地址就可以远程访问树莓派。![](raspberryPi/vnc.jpg)\n如果不知道IP地址，可以使用工具[freeIpScanner](http://www.eusing.com/ipscan/free_ip_scanner.htm)获取IP地址。或者使用linux下的nmap命令,nmap命令说明：\n　　```\n  $namp 192.168.1.1/24 //扫描整个子网\n  $namp 192.168.1.x (x:0-255) //扫描单个主机\n  $namp 192.168.1.x 192.168.1.y //扫描多个目标\n  $namp 192.168.1.100-255 扫描某个范围内的目标#ip地址在192.168.1.100和192.168.1.255之间 \n  $nmap 192.168.1.1/24 -exclude 192.168.1.1 扫描一个网段除了某个主机\n  $nmap -p80,21,23 192.168.1.1 扫描某个主机下的端口（80端口 21端口 23 端口）\n\n　　```\n# 手动配置wifi\n命令行下启动 *wpa_cli* 参考 [WPA_supplicant](http://w1.fi/wpa_supplicant/)：\n　　```\n $sudo wpa_cli\n　　```\n![](raspberryPi/wpacli.jpg)\n　 ```\n  status //列出目前的联网状态\n  list_networks //记住网络ID\n  set_network \"ID\" key_mgmt WPA-PSK  //设置无线网络加密方式\n  set_network \"ID\" psk \"yourpassword\"   //设置密码\n  enable_network \"ID\"   //使能该网络\n  save_config //保存配置\n  　```\n完成之后会在文件/etc/wpa_supplicant/wpa_supplicant.conf看到配置信息已经写入到文件,此时可以查看网络是否连接:\n  　```\n $ifconfig\n  　```\n","source":"_posts/raspberryPi.md","raw":"---\ntitle: 树莓派3B使用前的配置\ndate: 2017-05-15 09:32:02\ntags: raspberryPi\ncategories: Linux\ncomments: true\n---\n前段时间入手一块树莓派[raspberryPi](https://www.raspberrypi.org/)型号为3B。关于它的介绍这里就不多说了，可自行[google](https://www.google.com)。使用前需要准备一张SD卡用于安装系统镜像。容量尽可能大，最好不低于16G。树莓派支持多种平台，因后续要安装[ROS](http://www.ros.org/)，考虑到官方支持的稳定性，选用 *Raspbian* 平台镜像。因为*Raspbian* 是官方推荐的支持的操作系统，而[Ros-indigo](http://wiki.ros.org/cn/indigo)也刚好有基于该平台的安装包。\n# 镜像安装\n参考官网[Install-Images](https://www.raspberrypi.org/documentation/installation/installing-images/)。我安装的版本为*2017-03-02-raspbian-jessie.img*\n<!--more-->\n# 开启SSH和串口\n该版本默认不开启SSH以及串口功能，需要手动开启。树莓派板子需要连接显示器、键盘、鼠标。在终端中输入:\n　　```\n  $sudo raspi-config\n　　```\n进行配置。树莓派默认的用户名为*pi*密码为*raspberry*。\n![](raspberryPi/config.jpg)\n进入第5项开启SSH以及GPIO14 GPIO15对应的串口控制台功能。串口功能开启后就可以抛弃鼠标、键盘、显示器直接在控制台访问树莓派。\n# 开启VNC远程桌面\n同样在配置菜单的第5项开启:![](raspberryPi/portconfig.jpg)\n在windows上安装[VNC Viewer](https://www.realvnc.com/)并且输入树莓派的IP地址就可以远程访问树莓派。![](raspberryPi/vnc.jpg)\n如果不知道IP地址，可以使用工具[freeIpScanner](http://www.eusing.com/ipscan/free_ip_scanner.htm)获取IP地址。或者使用linux下的nmap命令,nmap命令说明：\n　　```\n  $namp 192.168.1.1/24 //扫描整个子网\n  $namp 192.168.1.x (x:0-255) //扫描单个主机\n  $namp 192.168.1.x 192.168.1.y //扫描多个目标\n  $namp 192.168.1.100-255 扫描某个范围内的目标#ip地址在192.168.1.100和192.168.1.255之间 \n  $nmap 192.168.1.1/24 -exclude 192.168.1.1 扫描一个网段除了某个主机\n  $nmap -p80,21,23 192.168.1.1 扫描某个主机下的端口（80端口 21端口 23 端口）\n\n　　```\n# 手动配置wifi\n命令行下启动 *wpa_cli* 参考 [WPA_supplicant](http://w1.fi/wpa_supplicant/)：\n　　```\n $sudo wpa_cli\n　　```\n![](raspberryPi/wpacli.jpg)\n　 ```\n  status //列出目前的联网状态\n  list_networks //记住网络ID\n  set_network \"ID\" key_mgmt WPA-PSK  //设置无线网络加密方式\n  set_network \"ID\" psk \"yourpassword\"   //设置密码\n  enable_network \"ID\"   //使能该网络\n  save_config //保存配置\n  　```\n完成之后会在文件/etc/wpa_supplicant/wpa_supplicant.conf看到配置信息已经写入到文件,此时可以查看网络是否连接:\n  　```\n $ifconfig\n  　```\n","slug":"raspberryPi","published":1,"updated":"2017-05-19T09:13:51.480Z","layout":"post","photos":[],"link":"","_id":"cj30tmxhr000likinnylulf1v","content":"<p>前段时间入手一块树莓派<a href=\"https://www.raspberrypi.org/\" target=\"_blank\" rel=\"external\">raspberryPi</a>型号为3B。关于它的介绍这里就不多说了，可自行<a href=\"https://www.google.com\" target=\"_blank\" rel=\"external\">google</a>。使用前需要准备一张SD卡用于安装系统镜像。容量尽可能大，最好不低于16G。树莓派支持多种平台，因后续要安装<a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a>，考虑到官方支持的稳定性，选用 <em>Raspbian</em> 平台镜像。因为<em>Raspbian</em> 是官方推荐的支持的操作系统，而<a href=\"http://wiki.ros.org/cn/indigo\" target=\"_blank\" rel=\"external\">Ros-indigo</a>也刚好有基于该平台的安装包。</p>\n<h1 id=\"镜像安装\"><a href=\"#镜像安装\" class=\"headerlink\" title=\"镜像安装\"></a>镜像安装</h1><p>参考官网<a href=\"https://www.raspberrypi.org/documentation/installation/installing-images/\" target=\"_blank\" rel=\"external\">Install-Images</a>。我安装的版本为<em>2017-03-02-raspbian-jessie.img</em><br><a id=\"more\"></a></p>\n<h1 id=\"开启SSH和串口\"><a href=\"#开启SSH和串口\" class=\"headerlink\" title=\"开启SSH和串口\"></a>开启SSH和串口</h1><p>该版本默认不开启SSH以及串口功能，需要手动开启。树莓派板子需要连接显示器、键盘、鼠标。在终端中输入:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> raspi-config</span></div></pre></td></tr></table></figure></p>\n<p>进行配置。树莓派默认的用户名为<em>pi</em>密码为<em>raspberry</em>。<br><img src=\"/2017/05/15/raspberryPi/config.jpg\" alt=\"\"><br>进入第5项开启SSH以及GPIO14 GPIO15对应的串口控制台功能。串口功能开启后就可以抛弃鼠标、键盘、显示器直接在控制台访问树莓派。</p>\n<h1 id=\"开启VNC远程桌面\"><a href=\"#开启VNC远程桌面\" class=\"headerlink\" title=\"开启VNC远程桌面\"></a>开启VNC远程桌面</h1><p>同样在配置菜单的第5项开启:<img src=\"/2017/05/15/raspberryPi/portconfig.jpg\" alt=\"\"><br>在windows上安装<a href=\"https://www.realvnc.com/\" target=\"_blank\" rel=\"external\">VNC Viewer</a>并且输入树莓派的IP地址就可以远程访问树莓派。<img src=\"/2017/05/15/raspberryPi/vnc.jpg\" alt=\"\"><br>如果不知道IP地址，可以使用工具<a href=\"http://www.eusing.com/ipscan/free_ip_scanner.htm\" target=\"_blank\" rel=\"external\">freeIpScanner</a>获取IP地址。或者使用linux下的nmap命令,nmap命令说明：<br>　　<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$namp <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.1</span>/<span class=\"number\">24</span> //扫描整个子网</div><div class=\"line\">$namp <span class=\"number\">192.168</span><span class=\"meta\">.1</span>.x (x:<span class=\"number\">0</span>-<span class=\"number\">255</span>) //扫描单个主机</div><div class=\"line\">$namp <span class=\"number\">192.168</span><span class=\"meta\">.1</span>.x <span class=\"number\">192.168</span><span class=\"meta\">.1</span>.y //扫描多个目标</div><div class=\"line\">$namp <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.100</span>-<span class=\"number\">255</span> 扫描某个范围内的目标#<span class=\"built_in\">ip</span>地址在<span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.100</span>和<span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.255</span>之间 </div><div class=\"line\">$nmap <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.1</span>/<span class=\"number\">24</span> -exclude <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.1</span> 扫描一个网段除了某个主机</div><div class=\"line\">$nmap -p80,<span class=\"number\">21</span>,<span class=\"number\">23</span> <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.1</span> 扫描某个主机下的端口（<span class=\"number\">80</span>端口 <span class=\"number\">21</span>端口 <span class=\"number\">23</span> 端口）</div></pre></td></tr></table></figure></p>\n<h1 id=\"手动配置wifi\"><a href=\"#手动配置wifi\" class=\"headerlink\" title=\"手动配置wifi\"></a>手动配置wifi</h1><p>命令行下启动 <em>wpa_cli</em> 参考 <a href=\"http://w1.fi/wpa_supplicant/\" target=\"_blank\" rel=\"external\">WPA_supplicant</a>：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> wpa_cli</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/15/raspberryPi/wpacli.jpg\" alt=\"\"><br>　 <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">status <span class=\"string\">//</span>列出目前的联网状态</div><div class=\"line\">list_networks <span class=\"string\">//</span>记住网络ID</div><div class=\"line\"><span class=\"keyword\">set</span>_network <span class=\"string\">\"ID\"</span> key_mgmt WPA-PSK  <span class=\"string\">//</span>设置无线网络加密方式</div><div class=\"line\"><span class=\"keyword\">set</span>_network <span class=\"string\">\"ID\"</span> psk <span class=\"string\">\"yourpassword\"</span>   <span class=\"string\">//</span>设置密码</div><div class=\"line\">enable_network <span class=\"string\">\"ID\"</span>   <span class=\"string\">//</span>使能该网络</div><div class=\"line\">save_config <span class=\"string\">//</span>保存配置</div></pre></td></tr></table></figure></p>\n<p>完成之后会在文件/etc/wpa_supplicant/wpa_supplicant.conf看到配置信息已经写入到文件,此时可以查看网络是否连接:<br>  　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$ifconfig</span></span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>前段时间入手一块树莓派<a href=\"https://www.raspberrypi.org/\" target=\"_blank\" rel=\"external\">raspberryPi</a>型号为3B。关于它的介绍这里就不多说了，可自行<a href=\"https://www.google.com\" target=\"_blank\" rel=\"external\">google</a>。使用前需要准备一张SD卡用于安装系统镜像。容量尽可能大，最好不低于16G。树莓派支持多种平台，因后续要安装<a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a>，考虑到官方支持的稳定性，选用 <em>Raspbian</em> 平台镜像。因为<em>Raspbian</em> 是官方推荐的支持的操作系统，而<a href=\"http://wiki.ros.org/cn/indigo\" target=\"_blank\" rel=\"external\">Ros-indigo</a>也刚好有基于该平台的安装包。</p>\n<h1 id=\"镜像安装\"><a href=\"#镜像安装\" class=\"headerlink\" title=\"镜像安装\"></a>镜像安装</h1><p>参考官网<a href=\"https://www.raspberrypi.org/documentation/installation/installing-images/\" target=\"_blank\" rel=\"external\">Install-Images</a>。我安装的版本为<em>2017-03-02-raspbian-jessie.img</em><br></p>","more":"<p></p>\n<h1 id=\"开启SSH和串口\"><a href=\"#开启SSH和串口\" class=\"headerlink\" title=\"开启SSH和串口\"></a>开启SSH和串口</h1><p>该版本默认不开启SSH以及串口功能，需要手动开启。树莓派板子需要连接显示器、键盘、鼠标。在终端中输入:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> raspi-config</span></div></pre></td></tr></table></figure></p>\n<p>进行配置。树莓派默认的用户名为<em>pi</em>密码为<em>raspberry</em>。<br><img src=\"/2017/05/15/raspberryPi/config.jpg\" alt=\"\"><br>进入第5项开启SSH以及GPIO14 GPIO15对应的串口控制台功能。串口功能开启后就可以抛弃鼠标、键盘、显示器直接在控制台访问树莓派。</p>\n<h1 id=\"开启VNC远程桌面\"><a href=\"#开启VNC远程桌面\" class=\"headerlink\" title=\"开启VNC远程桌面\"></a>开启VNC远程桌面</h1><p>同样在配置菜单的第5项开启:<img src=\"/2017/05/15/raspberryPi/portconfig.jpg\" alt=\"\"><br>在windows上安装<a href=\"https://www.realvnc.com/\" target=\"_blank\" rel=\"external\">VNC Viewer</a>并且输入树莓派的IP地址就可以远程访问树莓派。<img src=\"/2017/05/15/raspberryPi/vnc.jpg\" alt=\"\"><br>如果不知道IP地址，可以使用工具<a href=\"http://www.eusing.com/ipscan/free_ip_scanner.htm\" target=\"_blank\" rel=\"external\">freeIpScanner</a>获取IP地址。或者使用linux下的nmap命令,nmap命令说明：<br>　　<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$namp <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.1</span>/<span class=\"number\">24</span> //扫描整个子网</div><div class=\"line\">$namp <span class=\"number\">192.168</span><span class=\"meta\">.1</span>.x (x:<span class=\"number\">0</span>-<span class=\"number\">255</span>) //扫描单个主机</div><div class=\"line\">$namp <span class=\"number\">192.168</span><span class=\"meta\">.1</span>.x <span class=\"number\">192.168</span><span class=\"meta\">.1</span>.y //扫描多个目标</div><div class=\"line\">$namp <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.100</span>-<span class=\"number\">255</span> 扫描某个范围内的目标#<span class=\"built_in\">ip</span>地址在<span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.100</span>和<span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.255</span>之间 </div><div class=\"line\">$nmap <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.1</span>/<span class=\"number\">24</span> -exclude <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.1</span> 扫描一个网段除了某个主机</div><div class=\"line\">$nmap -p80,<span class=\"number\">21</span>,<span class=\"number\">23</span> <span class=\"number\">192.168</span><span class=\"meta\">.1</span><span class=\"meta\">.1</span> 扫描某个主机下的端口（<span class=\"number\">80</span>端口 <span class=\"number\">21</span>端口 <span class=\"number\">23</span> 端口）</div></pre></td></tr></table></figure></p>\n<h1 id=\"手动配置wifi\"><a href=\"#手动配置wifi\" class=\"headerlink\" title=\"手动配置wifi\"></a>手动配置wifi</h1><p>命令行下启动 <em>wpa_cli</em> 参考 <a href=\"http://w1.fi/wpa_supplicant/\" target=\"_blank\" rel=\"external\">WPA_supplicant</a>：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> wpa_cli</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/15/raspberryPi/wpacli.jpg\" alt=\"\"><br>　 <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">status <span class=\"string\">//</span>列出目前的联网状态</div><div class=\"line\">list_networks <span class=\"string\">//</span>记住网络ID</div><div class=\"line\"><span class=\"keyword\">set</span>_network <span class=\"string\">\"ID\"</span> key_mgmt WPA-PSK  <span class=\"string\">//</span>设置无线网络加密方式</div><div class=\"line\"><span class=\"keyword\">set</span>_network <span class=\"string\">\"ID\"</span> psk <span class=\"string\">\"yourpassword\"</span>   <span class=\"string\">//</span>设置密码</div><div class=\"line\">enable_network <span class=\"string\">\"ID\"</span>   <span class=\"string\">//</span>使能该网络</div><div class=\"line\">save_config <span class=\"string\">//</span>保存配置</div></pre></td></tr></table></figure></p>\n<p>完成之后会在文件/etc/wpa_supplicant/wpa_supplicant.conf看到配置信息已经写入到文件,此时可以查看网络是否连接:<br>  　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$ifconfig</span></span></div></pre></td></tr></table></figure></p>"},{"title":"ROS多机通信","date":"2017-05-22T12:43:31.000Z","comments":1,"_content":"# 前言\nROS移动平台使用的是树莓派3B，资源有限，只能运行一些低级任务，又不具备显示器，想实时的看到ROS的运行情况只能依靠远程登录的方式。可以让PC负责运行界面，树莓派负责底层的传感器数据采集，比如激光雷达的数据采集，通过网络传给PC，PC上运行界面程序，将树莓派传过来的数据进行处理，并生成地图。要实现类似功能，需要进行多个运行ROS的设备间的通讯。\n<!--more-->\n# 配置\n首先保证 *raspberryPi* 与 *PC*在一个局域网内，并获取各自的 *IP* 地址。假设 *PC* 的 *IP*：192.168.2.102；*raspberryPi* 的 *IP*：192.168.2.105；之后查看各自的主机名,使用命令：\n　　```\n $hostname\n　　```\n假设 *PC* 的主机名为： *steven-laptop*,而 *raspberryPi* 的主机名为 *raspberry*。我们需要将各自的主机名通知对方。在 *raspberryPi* 中打开 */etc/hosts*文件加入 *PC* 的主机名以及IP地址：\n　　```\n 192.168.2.102 steven-laptop\n　　```\n同样在 *PC* 中告知 *raspberryPi* 的主机名和 *IP* 地址,修改*/etc/hosts*：\n　　```\n 192.168.2.105 raspberry\n　　```\n此时，可以使用:\n　　```\n $ping 对方主机名\n　　```\n进行连接测试。完成之后在 *PC* 中指定ROS通讯的主机名以及ROS服务器的地,让 *PC* 作为ROS服务器：\n　　```\nexport ROS_HOSTNAME=steven-laptop\nexport ROS_MASTER_URI=http://steven-laptop:11311\n　　```\n在 *raspberryPi* 中指定 *PC* 作为 *ROS Master*:\n　　```\nexport ROS_MASTER_URI=http://steven-laptop:11311\n　　```\n# 跨机运行talker/listenner\n做完以上配置，即可进行多机通信的测试。先在 *PC* 上开一个 *terminal* 运行 *roscore*:\n　　```\n $roscore & //'&'指后台运行\n　　```\n然后运行 *beginner_tutorials*(参考 [ROS tutorial](http://wiki.ros.org/cn/ROS/Tutorials)) 中的节点 *talker*;在  *raspberryPi* 中运行 *beginner_tutorials* 中的 *listenner* 节点。保证两个节点中发布的主题和订阅的主题名字一样。\n此时可以在 *raspberryPi* 中收到 *PC* 传过来的信息：\n![](ros-communication/talker.jpg)\n# 跨机运行turtlesim\n在PC上运行：\n　　```\n$roscore & \n$rosrun turtlesim turtlesim_node\n　　```\n在 *raspberryPi* 上使用键盘进行控制：\n　　```\n$rosrun turtlesim turtle_teleop_key\n　　```\n效果图：![](ros-communication/turtle.jpg)\n","source":"_posts/ros-communication.md","raw":"---\ntitle: ROS多机通信\ndate: 2017-05-22 20:43:31\ncategories: ROS\ntags: Communication\ncomments: true\n---\n# 前言\nROS移动平台使用的是树莓派3B，资源有限，只能运行一些低级任务，又不具备显示器，想实时的看到ROS的运行情况只能依靠远程登录的方式。可以让PC负责运行界面，树莓派负责底层的传感器数据采集，比如激光雷达的数据采集，通过网络传给PC，PC上运行界面程序，将树莓派传过来的数据进行处理，并生成地图。要实现类似功能，需要进行多个运行ROS的设备间的通讯。\n<!--more-->\n# 配置\n首先保证 *raspberryPi* 与 *PC*在一个局域网内，并获取各自的 *IP* 地址。假设 *PC* 的 *IP*：192.168.2.102；*raspberryPi* 的 *IP*：192.168.2.105；之后查看各自的主机名,使用命令：\n　　```\n $hostname\n　　```\n假设 *PC* 的主机名为： *steven-laptop*,而 *raspberryPi* 的主机名为 *raspberry*。我们需要将各自的主机名通知对方。在 *raspberryPi* 中打开 */etc/hosts*文件加入 *PC* 的主机名以及IP地址：\n　　```\n 192.168.2.102 steven-laptop\n　　```\n同样在 *PC* 中告知 *raspberryPi* 的主机名和 *IP* 地址,修改*/etc/hosts*：\n　　```\n 192.168.2.105 raspberry\n　　```\n此时，可以使用:\n　　```\n $ping 对方主机名\n　　```\n进行连接测试。完成之后在 *PC* 中指定ROS通讯的主机名以及ROS服务器的地,让 *PC* 作为ROS服务器：\n　　```\nexport ROS_HOSTNAME=steven-laptop\nexport ROS_MASTER_URI=http://steven-laptop:11311\n　　```\n在 *raspberryPi* 中指定 *PC* 作为 *ROS Master*:\n　　```\nexport ROS_MASTER_URI=http://steven-laptop:11311\n　　```\n# 跨机运行talker/listenner\n做完以上配置，即可进行多机通信的测试。先在 *PC* 上开一个 *terminal* 运行 *roscore*:\n　　```\n $roscore & //'&'指后台运行\n　　```\n然后运行 *beginner_tutorials*(参考 [ROS tutorial](http://wiki.ros.org/cn/ROS/Tutorials)) 中的节点 *talker*;在  *raspberryPi* 中运行 *beginner_tutorials* 中的 *listenner* 节点。保证两个节点中发布的主题和订阅的主题名字一样。\n此时可以在 *raspberryPi* 中收到 *PC* 传过来的信息：\n![](ros-communication/talker.jpg)\n# 跨机运行turtlesim\n在PC上运行：\n　　```\n$roscore & \n$rosrun turtlesim turtlesim_node\n　　```\n在 *raspberryPi* 上使用键盘进行控制：\n　　```\n$rosrun turtlesim turtle_teleop_key\n　　```\n效果图：![](ros-communication/turtle.jpg)\n","slug":"ros-communication","published":1,"updated":"2017-05-23T00:23:33.109Z","layout":"post","photos":[],"link":"","_id":"cj30tmxht000nikinmvshjot4","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>ROS移动平台使用的是树莓派3B，资源有限，只能运行一些低级任务，又不具备显示器，想实时的看到ROS的运行情况只能依靠远程登录的方式。可以让PC负责运行界面，树莓派负责底层的传感器数据采集，比如激光雷达的数据采集，通过网络传给PC，PC上运行界面程序，将树莓派传过来的数据进行处理，并生成地图。要实现类似功能，需要进行多个运行ROS的设备间的通讯。<br><a id=\"more\"></a></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>首先保证 <em>raspberryPi</em> 与 <em>PC</em>在一个局域网内，并获取各自的 <em>IP</em> 地址。假设 <em>PC</em> 的 <em>IP</em>：192.168.2.102；<em>raspberryPi</em> 的 <em>IP</em>：192.168.2.105；之后查看各自的主机名,使用命令：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$hostname</span></span></div></pre></td></tr></table></figure></p>\n<p>假设 <em>PC</em> 的主机名为： <em>steven-laptop</em>,而 <em>raspberryPi</em> 的主机名为 <em>raspberry</em>。我们需要将各自的主机名通知对方。在 <em>raspberryPi</em> 中打开 <em>/etc/hosts</em>文件加入 <em>PC</em> 的主机名以及IP地址：<br>　　<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.2</span><span class=\"selector-class\">.102</span> <span class=\"selector-tag\">steven-laptop</span></div></pre></td></tr></table></figure></p>\n<p>同样在 <em>PC</em> 中告知 <em>raspberryPi</em> 的主机名和 <em>IP</em> 地址,修改<em>/etc/hosts</em>：<br>　　<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.2</span><span class=\"selector-class\">.105</span> <span class=\"selector-tag\">raspberry</span></div></pre></td></tr></table></figure></p>\n<p>此时，可以使用:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$ping</span> 对方主机名</span></div></pre></td></tr></table></figure></p>\n<p>进行连接测试。完成之后在 <em>PC</em> 中指定ROS通讯的主机名以及ROS服务器的地,让 <em>PC</em> 作为ROS服务器：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> ROS_HOSTNAME=steven-laptop</div><div class=\"line\"><span class=\"keyword\">export</span> ROS_MASTER_URI=http:<span class=\"comment\">//steven-laptop:11311</span></div></pre></td></tr></table></figure></p>\n<p>在 <em>raspberryPi</em> 中指定 <em>PC</em> 作为 <em>ROS Master</em>:<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> ROS_MASTER_URI=http:<span class=\"comment\">//steven-laptop:11311</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"跨机运行talker-listenner\"><a href=\"#跨机运行talker-listenner\" class=\"headerlink\" title=\"跨机运行talker/listenner\"></a>跨机运行talker/listenner</h1><p>做完以上配置，即可进行多机通信的测试。先在 <em>PC</em> 上开一个 <em>terminal</em> 运行 <em>roscore</em>:<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$roscore</span> &amp; <span class=\"regexp\">//</span><span class=\"string\">'&amp;'</span>指后台运行</div></pre></td></tr></table></figure></p>\n<p>然后运行 <em>beginner_tutorials</em>(参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials\" target=\"_blank\" rel=\"external\">ROS tutorial</a>) 中的节点 <em>talker</em>;在  <em>raspberryPi</em> 中运行 <em>beginner_tutorials</em> 中的 <em>listenner</em> 节点。保证两个节点中发布的主题和订阅的主题名字一样。<br>此时可以在 <em>raspberryPi</em> 中收到 <em>PC</em> 传过来的信息：<br><img src=\"/2017/05/22/ros-communication/talker.jpg\" alt=\"\"></p>\n<h1 id=\"跨机运行turtlesim\"><a href=\"#跨机运行turtlesim\" class=\"headerlink\" title=\"跨机运行turtlesim\"></a>跨机运行turtlesim</h1><p>在PC上运行：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscore</span> &amp; </span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>\n<p>在 <em>raspberryPi</em> 上使用键盘进行控制：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> turtlesim turtle_teleop_key</span></div></pre></td></tr></table></figure></p>\n<p>效果图：<img src=\"/2017/05/22/ros-communication/turtle.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>ROS移动平台使用的是树莓派3B，资源有限，只能运行一些低级任务，又不具备显示器，想实时的看到ROS的运行情况只能依靠远程登录的方式。可以让PC负责运行界面，树莓派负责底层的传感器数据采集，比如激光雷达的数据采集，通过网络传给PC，PC上运行界面程序，将树莓派传过来的数据进行处理，并生成地图。要实现类似功能，需要进行多个运行ROS的设备间的通讯。<br></p>","more":"<p></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>首先保证 <em>raspberryPi</em> 与 <em>PC</em>在一个局域网内，并获取各自的 <em>IP</em> 地址。假设 <em>PC</em> 的 <em>IP</em>：192.168.2.102；<em>raspberryPi</em> 的 <em>IP</em>：192.168.2.105；之后查看各自的主机名,使用命令：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$hostname</span></span></div></pre></td></tr></table></figure></p>\n<p>假设 <em>PC</em> 的主机名为： <em>steven-laptop</em>,而 <em>raspberryPi</em> 的主机名为 <em>raspberry</em>。我们需要将各自的主机名通知对方。在 <em>raspberryPi</em> 中打开 <em>/etc/hosts</em>文件加入 <em>PC</em> 的主机名以及IP地址：<br>　　<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.2</span><span class=\"selector-class\">.102</span> <span class=\"selector-tag\">steven-laptop</span></div></pre></td></tr></table></figure></p>\n<p>同样在 <em>PC</em> 中告知 <em>raspberryPi</em> 的主机名和 <em>IP</em> 地址,修改<em>/etc/hosts</em>：<br>　　<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.2</span><span class=\"selector-class\">.105</span> <span class=\"selector-tag\">raspberry</span></div></pre></td></tr></table></figure></p>\n<p>此时，可以使用:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$ping</span> 对方主机名</span></div></pre></td></tr></table></figure></p>\n<p>进行连接测试。完成之后在 <em>PC</em> 中指定ROS通讯的主机名以及ROS服务器的地,让 <em>PC</em> 作为ROS服务器：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> ROS_HOSTNAME=steven-laptop</div><div class=\"line\"><span class=\"keyword\">export</span> ROS_MASTER_URI=http:<span class=\"comment\">//steven-laptop:11311</span></div></pre></td></tr></table></figure></p>\n<p>在 <em>raspberryPi</em> 中指定 <em>PC</em> 作为 <em>ROS Master</em>:<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> ROS_MASTER_URI=http:<span class=\"comment\">//steven-laptop:11311</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"跨机运行talker-listenner\"><a href=\"#跨机运行talker-listenner\" class=\"headerlink\" title=\"跨机运行talker/listenner\"></a>跨机运行talker/listenner</h1><p>做完以上配置，即可进行多机通信的测试。先在 <em>PC</em> 上开一个 <em>terminal</em> 运行 <em>roscore</em>:<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$roscore</span> &amp; <span class=\"regexp\">//</span><span class=\"string\">'&amp;'</span>指后台运行</div></pre></td></tr></table></figure></p>\n<p>然后运行 <em>beginner_tutorials</em>(参考 <a href=\"http://wiki.ros.org/cn/ROS/Tutorials\" target=\"_blank\" rel=\"external\">ROS tutorial</a>) 中的节点 <em>talker</em>;在  <em>raspberryPi</em> 中运行 <em>beginner_tutorials</em> 中的 <em>listenner</em> 节点。保证两个节点中发布的主题和订阅的主题名字一样。<br>此时可以在 <em>raspberryPi</em> 中收到 <em>PC</em> 传过来的信息：<br><img src=\"/2017/05/22/ros-communication/talker.jpg\" alt=\"\"></p>\n<h1 id=\"跨机运行turtlesim\"><a href=\"#跨机运行turtlesim\" class=\"headerlink\" title=\"跨机运行turtlesim\"></a>跨机运行turtlesim</h1><p>在PC上运行：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscore</span> &amp; </span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>\n<p>在 <em>raspberryPi</em> 上使用键盘进行控制：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> turtlesim turtle_teleop_key</span></div></pre></td></tr></table></figure></p>\n<p>效果图：<img src=\"/2017/05/22/ros-communication/turtle.jpg\" alt=\"\"></p>"},{"title":"树莓派3b安装ROS-Indigo","date":"2017-05-15T03:24:49.000Z","comments":1,"_content":"# 前言\n目前对于基于[ROS](http://www.ros.org/)的可移动平台，有两种方案较为流行，用户较多，可参考的资料也多。一种是使用英伟达的[TK1](http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html)，另外一种是使用[raspberryPi](https://www.raspberrypi.org/)。相对于[TK1](http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html)，树莓派在价格上更亲民，虽然性能上差一些，在计算[SLAM](https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%97%B6%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%9C%B0%E5%9B%BE%E6%9E%84%E5%BB%BA)时会有卡顿现象，但对于入门级用户来说，也是个不错的选择。\n<!--more-->\n# 树莓派3B上安装ROS-Indigo\n *环境*： *Raspbian OS Jessie*\n *硬件*： *raspberryPi 3B*以及一张*16G SD 卡*\n *参考*： [InstallROSIndigoOnRaspberryPi](http://wiki.ros.org/ROSberryPi/Installing%20ROS%20Indigo%20on%20Raspberry%20Pi)\n## 添加ROS代码仓\n添加ROS源以及key\n　　```\n $sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu jessie main\" > /etc/apt/sources.list.d/ros-latest.list'\n $wget https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -O - | sudo apt-key add -\n　　```\n## 更新\n　　```\n $sudo apt-get update\n $sudo apt-get upgrade\n　　```\n## 安装引导程序依赖项\n　　```\n $sudo apt-get install python-pip python-setuptools python-yaml python-distribute python-docutils python-dateutil python-six\n $sudo pip install rosdep rosinstall_generator wstool rosinstall\n　　```\n## 安装vim\n　　```\n $sudo apt-get install vim\n　　```\n## 增大swap空间\n修改/etc/dphys-swapfile文件，增大交换空间，以免编译ROS源码时出现内存不足现象。将CONF_SWAPSIZE 修改为 2048\n　　```\nCONF_SWAPSIZE=2048\n　　```\n## 初始化rosdep\n　　```\n $sudo rosdep init\n $rosdep update\n　　```\n## 创建workspace\n创建一个workspace用于存储和编译ROS源码\n　　```\n $mkdir ~/ros_catkin_ws\n $cd ~/ros_catkin_ws/\n\n　　```\n## 下载源码\n选择desktop完全版本\n　　```\n $rosinstall_generator desktop --rosdistro indigo --deps --wet-only --exclude roslisp --tar > indigo-desktop-wet.rosinstall\n $wstool init -j4 src indigo-desktop-wet.rosinstall\n　　```\n源代码将会保存在目录 *~/ros_catkin_ws/src* 下，*-j4*意思是开启4个线程同时下载。如果下载异常中断，可以尝试使用下面命令恢复：\n　　```\n $wstool update -j4 -t src\n　　```\n下载时间很漫长。\n## 解决ROS依赖\n在正式编译ROS之前，我们还需要手动安装以下几个依赖包：\n *libconsole-bridge-dev*\n *liblz4-dev*\n *liburdfdom-headers-dev* \n *liburdfdom-dev* \n *collada-dom-dev*\n为这些依赖包建立单独的用于编译安装的文件夹，同时安装checkinstall和cmake：\n　　```\n $mkdir ~/ros_catkin_ws/external_src\n $sudo apt-get install checkinstall cmake\n　　```\n如果无法安装，更新一下再安装：\n　　```\n $sudo apt-get update && sudo apt-get upgrade\n　　```\n然后添加：\n　　```\n $sudo sh -c 'echo \"deb-src http://mirrordirector.raspbian.org/raspbian/ testing main contrib non-free rpi\" >> /etc/apt/sources.list'\n　　```\n更新：\n　　```\n $sudo apt-get update\n　　```\n## 安装libconsole-bridge-dev\n　　```\n $cd ~/ros_catkin_ws/external_src\n $sudo apt-get build-dep console-bridge\n $apt-get source -b console-bridge\n $sudo dpkg -i libconsole-bridge0.2*.deb libconsole-bridge-dev_*.deb\n　　```\n## 安装liblz4-dev\n　　```\n $cd ~/ros_catkin_ws/external_src\n $apt-get source -b lz4 //获取，该步骤耗时很长\n $sudo dpkg -i liblz4-*.deb //安装\n　　```\n## 安装liburdfdom-headers-dev\n　　```　　\n $cd ~/ros_catkin_ws/external_src\n $git clone https://github.com/ros/urdfdom_headers.git\n $git reset --hard 9aed725\n $cd urdfdom_headers\n $cmake .\n $sudo checkinstall make installl\n　　```\n最后一步提示：\n　　```\nThe package documentation directory ./doc-pak does not exist.\nShould I create a default set of package docs?  [y]: y\nThis package will be built according to these values:\n\n0 -  Maintainer: [ root@raspberrypi ]\n1 -  Summary: [ Package created with checkinstall 1.6.2 ]\n2 -  Name:    [ urdfdom-headers ]\n3 -  Version: [ 20170318 ]\n4 -  Release: [ 1 ]\n5 -  License: [ GPL ]\n6 -  Group:   [ checkinstall ]\n7 -  Architecture: [ armhf ]\n8 -  Source location: [ urdfdom_headers ]\n9 -  Alternate source location: [  ]\n10 - Requires: [  ]\n11 - Provides: [ urdfdom-headers ]\n12 - Conflicts: [  ]\n13 - Replaces: [  ]\n　　```\n这里的'9aed725'就是将\"liburdfdom-headers-dev\"的安装版本变成我们需要的1.0.0版本。check-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从\"urdfdom-headers\" 改为 \"liburdfdom-headers-dev\"，其余有[y]或[n]的问题都输入'n'按回车， 否则会编译出错\n完成后检查安装的包是否正确:\n　　```\n $dpkg -l | grep urdf\n　　```\n如果正确会输出：\n　　```\nii  liburdfdom-headers-dev       20170318-1     armhf        Package created with checkinstall 1.6.2\n　　```\n## 安装liburdfdom-dev\n　　```\n $cd ~/ros_catkin_ws/external_src\n $sudo apt-get install libboost-test-dev libtinyxml-dev\n $git clone https://github.com/ros/urdfdom.git\n $cd urdfdom\n $cmake .\n $sudo checkinstall make install\n　　```\ncheck-install开始会让提示输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 \"urdfdom\"改为\"liburdfdom-dev\" ，其余有[y]或[n]的问题都输入'n'按回车， 否则会编译出错。\n编译出错提示找不到文件：utils.h\n添加一个文件(utils.h)到/usr/local/include/urdf_model目录下：\n　　```\n $cd /usr/local/include/urdf_model\n $sudo wget https://raw.githubusercontent.com/ros/urdfdom_headers/master/urdf_model/include/urdf_model/utils.h\n　　```\n重新编译\n## 安装collada-dom-dev\n　　```\n $cd ~/ros_catkin_ws/external_src\n $sudo apt-get install libboost-filesystem-dev libxml2-dev\n $wget http://downloads.sourceforge.net/project/collada-dom/Collada%20DOM/Collada%20DOM%202.4/collada-dom-2.4.0.tgz\n $tar -xzf collada-dom-2.4.0.tgz\n $cd collada-dom-2.4.0\n $cmake .\n $sudo checkinstall make install\n　　```\ncheck-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 \"collada-dom\"改为 \"collada-dom-dev\" ，其余有[y]或[n]的问题都输入'n'按回车， 否则会编译出错。\n## rosdep依赖\n　　```\n $cd ~/ros_catkin_ws\n $sudo rosdep init\n $rosdep update\n $rosdep install --from-paths src --ignore-src --rosdistro indigo -y -r --os=debian:Jessie\n\n　　```\n*rosdep install*命令会寻找所有src目录的package并递归安装依赖，要安装的依赖包有点多，耐心等待。rosdep会检查src文件夹，安装其他的依赖包。\n## 编译catkin工作空间\n在开始编译之前，先打两个补丁\n打开文件: \n　　```\n $vim ~/ros_catkin_ws/src/robot_model/collada_urdf/src/collada_urdf.cpp\n　　```\n在最后一个#include后添加\n　　```\n #ifdef __arm__  \n #include <strings.h>\n bool Assimp::IOSystem::ComparePaths(const char *p1, const char *p2) const  \n {  \n return !::strcasecmp(p1,p2);  \n } \n #endif\n　　```\n修改~/ros_catkin_ws/src/rviz/src/rviz/mesh_loader.cpp文件，在最后一个#include（如果#include的下一行是#endif则放到#endif后）行后加入以下代码\n　　```\n #ifdef __arm__                 // fix for ARM build\n #include <strings.h>\n bool Assimp::IOSystem::ComparePaths(const char *p1, const char *p2) const\n {\n    return !::strcasecmp(p1, p2);\n }\n #endif\n　　```\n编译：\n　　```\n $cd ~/ros_catkin_ws\n $sudo ./src/catkin/bin/catkin_make_isolated --install -DCMAKE_BUILD_TYPE=Release --install-space /opt/ros/indigo -j4\n\n　　```\n上面命令将编译文件安装到/opt/ros/indigo –j4是使用4个线程编译.\n## 出现的错误\n###error: ‘shared_ptr’ in namespace ‘std’ does not name a template type\n执行上面的编译命令提示错误：\n　　```\nin file included from /home/pi/ros_catkin_ws/src/robot_model/urdf/include/urdf/model.h:43:0, \n                 from /home/pi/ros_catkin_ws/src/robot_model/urdf/src/model.cpp:37: \n/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h:78:14: error: ‘shared_ptr’ in namespace ‘std’ does not name a template type \n typedef std::shared_ptr<ModelInterface> ModelInterfaceSharedPtr; \n              ^ \n/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h:79:14: error: ‘shared_ptr’ in namespace ‘std’ does not name a template type \n typedef std::shared_ptr<const ModelInterface> ModelInterfaceConstSharedPtr; \n              ^ \n/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h:80:14: error: ‘weak_ptr’ in namespace ‘std’ does not name a template type \n typedef std::weak_ptr<ModelInterface> ModelInterfaceWeakPtr; \n              ^ \nCMakeFiles/urdf.dir/build.make:62: recipe for target 'CMakeFiles/urdf.dir/src/model.cpp.o' failed\n\n　　```\n修改文件：\n/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h\n从78行开始到80行都屏蔽掉\n　　```\n /*\n typedef std::shared_ptr<ModelInterface> ModelInterfaceSharedPtr;\n typedef std::shared_ptr<const ModelInterface> ModelInterfaceConstSharedPtr;\n typedef std::weak_ptr<ModelInterface> ModelInterfaceWeakPtr;\n*/\n　　```\n再次编译成功。这个过程非常漫长。![](ros-indigo-raspberry/catkin.jpg)\n## 测试\n完成之后设置环境变量：\n　　```\n $source /opt/ros/indigo/setup.bash\n　　```\n设置ROS环境变量在每次启动shell时自动添加到bash会话\n　　```\n $echo \"source /opt/ros/indigo/setup.bash\" >> ~/.bashrc\n　　```\n到这里我们的ROS完整版就已经成功安装好了，不妨运行roscore试一下\n　　```\n $roscore\n　　```\n![](ros-indigo-raspberry/roscore.jpg)\n\n\n\n\n\n\n\n\n","source":"_posts/ros-indigo-raspberry.md","raw":"---\ntitle: 树莓派3b安装ROS-Indigo\ndate: 2017-05-15 11:24:49\ntags: raspberryPi ros-indigo jessie\ncategories: ROS\ncomments: true\n---\n# 前言\n目前对于基于[ROS](http://www.ros.org/)的可移动平台，有两种方案较为流行，用户较多，可参考的资料也多。一种是使用英伟达的[TK1](http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html)，另外一种是使用[raspberryPi](https://www.raspberrypi.org/)。相对于[TK1](http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html)，树莓派在价格上更亲民，虽然性能上差一些，在计算[SLAM](https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%97%B6%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%9C%B0%E5%9B%BE%E6%9E%84%E5%BB%BA)时会有卡顿现象，但对于入门级用户来说，也是个不错的选择。\n<!--more-->\n# 树莓派3B上安装ROS-Indigo\n *环境*： *Raspbian OS Jessie*\n *硬件*： *raspberryPi 3B*以及一张*16G SD 卡*\n *参考*： [InstallROSIndigoOnRaspberryPi](http://wiki.ros.org/ROSberryPi/Installing%20ROS%20Indigo%20on%20Raspberry%20Pi)\n## 添加ROS代码仓\n添加ROS源以及key\n　　```\n $sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu jessie main\" > /etc/apt/sources.list.d/ros-latest.list'\n $wget https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -O - | sudo apt-key add -\n　　```\n## 更新\n　　```\n $sudo apt-get update\n $sudo apt-get upgrade\n　　```\n## 安装引导程序依赖项\n　　```\n $sudo apt-get install python-pip python-setuptools python-yaml python-distribute python-docutils python-dateutil python-six\n $sudo pip install rosdep rosinstall_generator wstool rosinstall\n　　```\n## 安装vim\n　　```\n $sudo apt-get install vim\n　　```\n## 增大swap空间\n修改/etc/dphys-swapfile文件，增大交换空间，以免编译ROS源码时出现内存不足现象。将CONF_SWAPSIZE 修改为 2048\n　　```\nCONF_SWAPSIZE=2048\n　　```\n## 初始化rosdep\n　　```\n $sudo rosdep init\n $rosdep update\n　　```\n## 创建workspace\n创建一个workspace用于存储和编译ROS源码\n　　```\n $mkdir ~/ros_catkin_ws\n $cd ~/ros_catkin_ws/\n\n　　```\n## 下载源码\n选择desktop完全版本\n　　```\n $rosinstall_generator desktop --rosdistro indigo --deps --wet-only --exclude roslisp --tar > indigo-desktop-wet.rosinstall\n $wstool init -j4 src indigo-desktop-wet.rosinstall\n　　```\n源代码将会保存在目录 *~/ros_catkin_ws/src* 下，*-j4*意思是开启4个线程同时下载。如果下载异常中断，可以尝试使用下面命令恢复：\n　　```\n $wstool update -j4 -t src\n　　```\n下载时间很漫长。\n## 解决ROS依赖\n在正式编译ROS之前，我们还需要手动安装以下几个依赖包：\n *libconsole-bridge-dev*\n *liblz4-dev*\n *liburdfdom-headers-dev* \n *liburdfdom-dev* \n *collada-dom-dev*\n为这些依赖包建立单独的用于编译安装的文件夹，同时安装checkinstall和cmake：\n　　```\n $mkdir ~/ros_catkin_ws/external_src\n $sudo apt-get install checkinstall cmake\n　　```\n如果无法安装，更新一下再安装：\n　　```\n $sudo apt-get update && sudo apt-get upgrade\n　　```\n然后添加：\n　　```\n $sudo sh -c 'echo \"deb-src http://mirrordirector.raspbian.org/raspbian/ testing main contrib non-free rpi\" >> /etc/apt/sources.list'\n　　```\n更新：\n　　```\n $sudo apt-get update\n　　```\n## 安装libconsole-bridge-dev\n　　```\n $cd ~/ros_catkin_ws/external_src\n $sudo apt-get build-dep console-bridge\n $apt-get source -b console-bridge\n $sudo dpkg -i libconsole-bridge0.2*.deb libconsole-bridge-dev_*.deb\n　　```\n## 安装liblz4-dev\n　　```\n $cd ~/ros_catkin_ws/external_src\n $apt-get source -b lz4 //获取，该步骤耗时很长\n $sudo dpkg -i liblz4-*.deb //安装\n　　```\n## 安装liburdfdom-headers-dev\n　　```　　\n $cd ~/ros_catkin_ws/external_src\n $git clone https://github.com/ros/urdfdom_headers.git\n $git reset --hard 9aed725\n $cd urdfdom_headers\n $cmake .\n $sudo checkinstall make installl\n　　```\n最后一步提示：\n　　```\nThe package documentation directory ./doc-pak does not exist.\nShould I create a default set of package docs?  [y]: y\nThis package will be built according to these values:\n\n0 -  Maintainer: [ root@raspberrypi ]\n1 -  Summary: [ Package created with checkinstall 1.6.2 ]\n2 -  Name:    [ urdfdom-headers ]\n3 -  Version: [ 20170318 ]\n4 -  Release: [ 1 ]\n5 -  License: [ GPL ]\n6 -  Group:   [ checkinstall ]\n7 -  Architecture: [ armhf ]\n8 -  Source location: [ urdfdom_headers ]\n9 -  Alternate source location: [  ]\n10 - Requires: [  ]\n11 - Provides: [ urdfdom-headers ]\n12 - Conflicts: [  ]\n13 - Replaces: [  ]\n　　```\n这里的'9aed725'就是将\"liburdfdom-headers-dev\"的安装版本变成我们需要的1.0.0版本。check-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从\"urdfdom-headers\" 改为 \"liburdfdom-headers-dev\"，其余有[y]或[n]的问题都输入'n'按回车， 否则会编译出错\n完成后检查安装的包是否正确:\n　　```\n $dpkg -l | grep urdf\n　　```\n如果正确会输出：\n　　```\nii  liburdfdom-headers-dev       20170318-1     armhf        Package created with checkinstall 1.6.2\n　　```\n## 安装liburdfdom-dev\n　　```\n $cd ~/ros_catkin_ws/external_src\n $sudo apt-get install libboost-test-dev libtinyxml-dev\n $git clone https://github.com/ros/urdfdom.git\n $cd urdfdom\n $cmake .\n $sudo checkinstall make install\n　　```\ncheck-install开始会让提示输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 \"urdfdom\"改为\"liburdfdom-dev\" ，其余有[y]或[n]的问题都输入'n'按回车， 否则会编译出错。\n编译出错提示找不到文件：utils.h\n添加一个文件(utils.h)到/usr/local/include/urdf_model目录下：\n　　```\n $cd /usr/local/include/urdf_model\n $sudo wget https://raw.githubusercontent.com/ros/urdfdom_headers/master/urdf_model/include/urdf_model/utils.h\n　　```\n重新编译\n## 安装collada-dom-dev\n　　```\n $cd ~/ros_catkin_ws/external_src\n $sudo apt-get install libboost-filesystem-dev libxml2-dev\n $wget http://downloads.sourceforge.net/project/collada-dom/Collada%20DOM/Collada%20DOM%202.4/collada-dom-2.4.0.tgz\n $tar -xzf collada-dom-2.4.0.tgz\n $cd collada-dom-2.4.0\n $cmake .\n $sudo checkinstall make install\n　　```\ncheck-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 \"collada-dom\"改为 \"collada-dom-dev\" ，其余有[y]或[n]的问题都输入'n'按回车， 否则会编译出错。\n## rosdep依赖\n　　```\n $cd ~/ros_catkin_ws\n $sudo rosdep init\n $rosdep update\n $rosdep install --from-paths src --ignore-src --rosdistro indigo -y -r --os=debian:Jessie\n\n　　```\n*rosdep install*命令会寻找所有src目录的package并递归安装依赖，要安装的依赖包有点多，耐心等待。rosdep会检查src文件夹，安装其他的依赖包。\n## 编译catkin工作空间\n在开始编译之前，先打两个补丁\n打开文件: \n　　```\n $vim ~/ros_catkin_ws/src/robot_model/collada_urdf/src/collada_urdf.cpp\n　　```\n在最后一个#include后添加\n　　```\n #ifdef __arm__  \n #include <strings.h>\n bool Assimp::IOSystem::ComparePaths(const char *p1, const char *p2) const  \n {  \n return !::strcasecmp(p1,p2);  \n } \n #endif\n　　```\n修改~/ros_catkin_ws/src/rviz/src/rviz/mesh_loader.cpp文件，在最后一个#include（如果#include的下一行是#endif则放到#endif后）行后加入以下代码\n　　```\n #ifdef __arm__                 // fix for ARM build\n #include <strings.h>\n bool Assimp::IOSystem::ComparePaths(const char *p1, const char *p2) const\n {\n    return !::strcasecmp(p1, p2);\n }\n #endif\n　　```\n编译：\n　　```\n $cd ~/ros_catkin_ws\n $sudo ./src/catkin/bin/catkin_make_isolated --install -DCMAKE_BUILD_TYPE=Release --install-space /opt/ros/indigo -j4\n\n　　```\n上面命令将编译文件安装到/opt/ros/indigo –j4是使用4个线程编译.\n## 出现的错误\n###error: ‘shared_ptr’ in namespace ‘std’ does not name a template type\n执行上面的编译命令提示错误：\n　　```\nin file included from /home/pi/ros_catkin_ws/src/robot_model/urdf/include/urdf/model.h:43:0, \n                 from /home/pi/ros_catkin_ws/src/robot_model/urdf/src/model.cpp:37: \n/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h:78:14: error: ‘shared_ptr’ in namespace ‘std’ does not name a template type \n typedef std::shared_ptr<ModelInterface> ModelInterfaceSharedPtr; \n              ^ \n/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h:79:14: error: ‘shared_ptr’ in namespace ‘std’ does not name a template type \n typedef std::shared_ptr<const ModelInterface> ModelInterfaceConstSharedPtr; \n              ^ \n/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h:80:14: error: ‘weak_ptr’ in namespace ‘std’ does not name a template type \n typedef std::weak_ptr<ModelInterface> ModelInterfaceWeakPtr; \n              ^ \nCMakeFiles/urdf.dir/build.make:62: recipe for target 'CMakeFiles/urdf.dir/src/model.cpp.o' failed\n\n　　```\n修改文件：\n/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h\n从78行开始到80行都屏蔽掉\n　　```\n /*\n typedef std::shared_ptr<ModelInterface> ModelInterfaceSharedPtr;\n typedef std::shared_ptr<const ModelInterface> ModelInterfaceConstSharedPtr;\n typedef std::weak_ptr<ModelInterface> ModelInterfaceWeakPtr;\n*/\n　　```\n再次编译成功。这个过程非常漫长。![](ros-indigo-raspberry/catkin.jpg)\n## 测试\n完成之后设置环境变量：\n　　```\n $source /opt/ros/indigo/setup.bash\n　　```\n设置ROS环境变量在每次启动shell时自动添加到bash会话\n　　```\n $echo \"source /opt/ros/indigo/setup.bash\" >> ~/.bashrc\n　　```\n到这里我们的ROS完整版就已经成功安装好了，不妨运行roscore试一下\n　　```\n $roscore\n　　```\n![](ros-indigo-raspberry/roscore.jpg)\n\n\n\n\n\n\n\n\n","slug":"ros-indigo-raspberry","published":1,"updated":"2017-05-15T08:12:20.396Z","layout":"post","photos":[],"link":"","_id":"cj30tmxhx000rikinth9fotj6","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>目前对于基于<a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a>的可移动平台，有两种方案较为流行，用户较多，可参考的资料也多。一种是使用英伟达的<a href=\"http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html\" target=\"_blank\" rel=\"external\">TK1</a>，另外一种是使用<a href=\"https://www.raspberrypi.org/\" target=\"_blank\" rel=\"external\">raspberryPi</a>。相对于<a href=\"http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html\" target=\"_blank\" rel=\"external\">TK1</a>，树莓派在价格上更亲民，虽然性能上差一些，在计算<a href=\"https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%97%B6%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%9C%B0%E5%9B%BE%E6%9E%84%E5%BB%BA\" target=\"_blank\" rel=\"external\">SLAM</a>时会有卡顿现象，但对于入门级用户来说，也是个不错的选择。<br><a id=\"more\"></a></p>\n<h1 id=\"树莓派3B上安装ROS-Indigo\"><a href=\"#树莓派3B上安装ROS-Indigo\" class=\"headerlink\" title=\"树莓派3B上安装ROS-Indigo\"></a>树莓派3B上安装ROS-Indigo</h1><p> <em>环境</em>： <em>Raspbian OS Jessie</em><br> <em>硬件</em>： <em>raspberryPi 3B</em>以及一张<em>16G SD 卡</em><br> <em>参考</em>： <a href=\"http://wiki.ros.org/ROSberryPi/Installing%20ROS%20Indigo%20on%20Raspberry%20Pi\" target=\"_blank\" rel=\"external\">InstallROSIndigoOnRaspberryPi</a></p>\n<h2 id=\"添加ROS代码仓\"><a href=\"#添加ROS代码仓\" class=\"headerlink\" title=\"添加ROS代码仓\"></a>添加ROS代码仓</h2><p>添加ROS源以及key<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> <span class=\"keyword\">sh</span> -c 'echo <span class=\"string\">\"deb http://packages.ros.org/ros/ubuntu jessie main\"</span> &gt; /etc/apt/sources.<span class=\"keyword\">list</span>.<span class=\"keyword\">d</span>/ros-latest.<span class=\"keyword\">list</span>'</div><div class=\"line\"><span class=\"variable\">$wget</span> https:<span class=\"comment\">//raw.githubusercontent.com/ros/rosdistro/master/ros.key -O - | sudo apt-key add -</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get update</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get upgrade</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装引导程序依赖项\"><a href=\"#安装引导程序依赖项\" class=\"headerlink\" title=\"安装引导程序依赖项\"></a>安装引导程序依赖项</h2><p>　　<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-get install <span class=\"keyword\">python</span>-pip <span class=\"keyword\">python</span>-setuptools <span class=\"keyword\">python</span>-yaml <span class=\"keyword\">python</span>-distribute <span class=\"keyword\">python</span>-docutils <span class=\"keyword\">python</span>-dateutil <span class=\"keyword\">python</span>-six</div><div class=\"line\">$sudo pip install rosdep rosinstall_generator wstool rosinstall</div></pre></td></tr></table></figure></p>\n<h2 id=\"安装vim\"><a href=\"#安装vim\" class=\"headerlink\" title=\"安装vim\"></a>安装vim</h2><p>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install vim</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"增大swap空间\"><a href=\"#增大swap空间\" class=\"headerlink\" title=\"增大swap空间\"></a>增大swap空间</h2><p>修改/etc/dphys-swapfile文件，增大交换空间，以免编译ROS源码时出现内存不足现象。将CONF_SWAPSIZE 修改为 2048<br>　　<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">CONF_SWAPSIZE</span>=<span class=\"number\">2048</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"初始化rosdep\"><a href=\"#初始化rosdep\" class=\"headerlink\" title=\"初始化rosdep\"></a>初始化rosdep</h2><p>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> rosdep init</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosdep</span> update</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"创建workspace\"><a href=\"#创建workspace\" class=\"headerlink\" title=\"创建workspace\"></a>创建workspace</h2><p>创建一个workspace用于存储和编译ROS源码<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">mkdir ~/ros_catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h2><p>选择desktop完全版本<br>　　<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">$rosinstall_generator</span> <span class=\"comment\">desktop</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">rosdistro</span> <span class=\"comment\">indigo</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">deps</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">wet</span><span class=\"literal\">-</span><span class=\"comment\">only</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">exclude</span> <span class=\"comment\">roslisp</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">tar</span> &gt; <span class=\"comment\">indigo</span><span class=\"literal\">-</span><span class=\"comment\">desktop</span><span class=\"literal\">-</span><span class=\"comment\">wet</span><span class=\"string\">.</span><span class=\"comment\">rosinstall</span></div><div class=\"line\"><span class=\"comment\">$wstool</span> <span class=\"comment\">init</span> <span class=\"literal\">-</span><span class=\"comment\">j4</span> <span class=\"comment\">src</span> <span class=\"comment\">indigo</span><span class=\"literal\">-</span><span class=\"comment\">desktop</span><span class=\"literal\">-</span><span class=\"comment\">wet</span><span class=\"string\">.</span><span class=\"comment\">rosinstall</span></div></pre></td></tr></table></figure></p>\n<p>源代码将会保存在目录 <em>~/ros_catkin_ws/src</em> 下，<em>-j4</em>意思是开启4个线程同时下载。如果下载异常中断，可以尝试使用下面命令恢复：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$wstool</span> update -j4 -t src</span></div></pre></td></tr></table></figure></p>\n<p>下载时间很漫长。</p>\n<h2 id=\"解决ROS依赖\"><a href=\"#解决ROS依赖\" class=\"headerlink\" title=\"解决ROS依赖\"></a>解决ROS依赖</h2><p>在正式编译ROS之前，我们还需要手动安装以下几个依赖包：<br> <em>libconsole-bridge-dev</em><br> <em>liblz4-dev</em><br> <em>liburdfdom-headers-dev</em><br> <em>liburdfdom-dev</em><br> <em>collada-dom-dev</em><br>为这些依赖包建立单独的用于编译安装的文件夹，同时安装checkinstall和cmake：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$mkdir</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install checkinstall cmake</span></div></pre></td></tr></table></figure></p>\n<p>如果无法安装，更新一下再安装：<br>　　<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span> &amp;&amp; sudo apt-<span class=\"built_in\">get</span> upgrade</div></pre></td></tr></table></figure></p>\n<p>然后添加：<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> <span class=\"keyword\">sh</span> -c 'echo <span class=\"string\">\"deb-src http://mirrordirector.raspbian.org/raspbian/ testing main contrib non-free rpi\"</span> &gt;&gt; /etc/apt/sources.<span class=\"keyword\">list</span>'</div></pre></td></tr></table></figure></p>\n<p>更新：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get update</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装libconsole-bridge-dev\"><a href=\"#安装libconsole-bridge-dev\" class=\"headerlink\" title=\"安装libconsole-bridge-dev\"></a>安装libconsole-bridge-dev</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo apt-get build-dep console-bridge</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">apt-get <span class=\"built_in\">source</span> -b console-bridge</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo dpkg -i libconsole-bridge0.2*.deb libconsole-bridge-dev_*.deb</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装liblz4-dev\"><a href=\"#安装liblz4-dev\" class=\"headerlink\" title=\"安装liblz4-dev\"></a>安装liblz4-dev</h2><p>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> ~/ros_catkin_ws/external_src</div><div class=\"line\"><span class=\"variable\">$apt</span>-get source -<span class=\"selector-tag\">b</span> lz4 <span class=\"comment\">//获取，该步骤耗时很长</span></div><div class=\"line\"><span class=\"variable\">$sudo</span> dpkg -<span class=\"selector-tag\">i</span> liblz4-*<span class=\"selector-class\">.deb</span> <span class=\"comment\">//安装</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装liburdfdom-headers-dev\"><a href=\"#安装liburdfdom-headers-dev\" class=\"headerlink\" title=\"安装liburdfdom-headers-dev\"></a>安装liburdfdom-headers-dev</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git <span class=\"built_in\">clone</span> https://github.com/ros/urdfdom_headers.git</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git reset --hard 9aed725</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> urdfdom_headers</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo checkinstall make installl</span></div></pre></td></tr></table></figure></p>\n<p>最后一步提示：<br>　　<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">The <span class=\"keyword\">package</span> documentation directory ./doc-pak does not exist.</div><div class=\"line\">Should I create a <span class=\"keyword\">default</span> set of <span class=\"keyword\">package</span> docs?  [y]: y</div><div class=\"line\">This <span class=\"keyword\">package</span> will be built according to these <span class=\"string\">values:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">0</span> -  <span class=\"string\">Maintainer:</span> [ root<span class=\"meta\">@raspberrypi</span> ]</div><div class=\"line\"><span class=\"number\">1</span> -  <span class=\"string\">Summary:</span> [ Package created with checkinstall <span class=\"number\">1.6</span><span class=\"number\">.2</span> ]</div><div class=\"line\"><span class=\"number\">2</span> -  <span class=\"string\">Name:</span>    [ urdfdom-headers ]</div><div class=\"line\"><span class=\"number\">3</span> -  <span class=\"string\">Version:</span> [ <span class=\"number\">20170318</span> ]</div><div class=\"line\"><span class=\"number\">4</span> -  <span class=\"string\">Release:</span> [ <span class=\"number\">1</span> ]</div><div class=\"line\"><span class=\"number\">5</span> -  <span class=\"string\">License:</span> [ GPL ]</div><div class=\"line\"><span class=\"number\">6</span> -  <span class=\"string\">Group:</span>   [ checkinstall ]</div><div class=\"line\"><span class=\"number\">7</span> -  <span class=\"string\">Architecture:</span> [ armhf ]</div><div class=\"line\"><span class=\"number\">8</span> -  Source <span class=\"string\">location:</span> [ urdfdom_headers ]</div><div class=\"line\"><span class=\"number\">9</span> -  Alternate source <span class=\"string\">location:</span> [  ]</div><div class=\"line\"><span class=\"number\">10</span> - <span class=\"string\">Requires:</span> [  ]</div><div class=\"line\"><span class=\"number\">11</span> - <span class=\"string\">Provides:</span> [ urdfdom-headers ]</div><div class=\"line\"><span class=\"number\">12</span> - <span class=\"string\">Conflicts:</span> [  ]</div><div class=\"line\"><span class=\"number\">13</span> - <span class=\"string\">Replaces:</span> [  ]</div></pre></td></tr></table></figure></p>\n<p>这里的’9aed725’就是将”liburdfdom-headers-dev”的安装版本变成我们需要的1.0.0版本。check-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从”urdfdom-headers” 改为 “liburdfdom-headers-dev”，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错<br>完成后检查安装的包是否正确:<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">dpkg <span class=\"_\">-l</span> | grep urdf</span></div></pre></td></tr></table></figure></p>\n<p>如果正确会输出：<br>　　<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ii  liburdfdom-headers-dev       <span class=\"number\">20170318</span><span class=\"number\">-1</span>     armhf        Package created with checkinstall <span class=\"number\">1.6</span><span class=\"number\">.2</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装liburdfdom-dev\"><a href=\"#安装liburdfdom-dev\" class=\"headerlink\" title=\"安装liburdfdom-dev\"></a>安装liburdfdom-dev</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo apt-get install libboost-test-dev libtinyxml-dev</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git <span class=\"built_in\">clone</span> https://github.com/ros/urdfdom.git</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> urdfdom</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo checkinstall make install</span></div></pre></td></tr></table></figure></p>\n<p>check-install开始会让提示输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 “urdfdom”改为”liburdfdom-dev” ，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错。<br>编译出错提示找不到文件：utils.h<br>添加一个文件(utils.h)到/usr/local/include/urdf_model目录下：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/include/u</span>rdf_model</div><div class=\"line\"><span class=\"variable\">$sudo</span> wget https:<span class=\"regexp\">//</span>raw.githubusercontent.com<span class=\"regexp\">/ros/u</span>rdfdom_headers<span class=\"regexp\">/master/u</span>rdf_model<span class=\"regexp\">/include/u</span>rdf_model<span class=\"regexp\">/utils.h</span></div></pre></td></tr></table></figure></p>\n<p>重新编译</p>\n<h2 id=\"安装collada-dom-dev\"><a href=\"#安装collada-dom-dev\" class=\"headerlink\" title=\"安装collada-dom-dev\"></a>安装collada-dom-dev</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo apt-get install libboost-filesystem-dev libxml2-dev</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">wget http://downloads.sourceforge.net/project/collada-dom/Collada%20DOM/Collada%20DOM%202.4/collada-dom-2.4.0.tgz</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">tar -xzf collada-dom-2.4.0.tgz</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> collada-dom-2.4.0</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo checkinstall make install</span></div></pre></td></tr></table></figure></p>\n<p>check-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 “collada-dom”改为 “collada-dom-dev” ，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错。</p>\n<h2 id=\"rosdep依赖\"><a href=\"#rosdep依赖\" class=\"headerlink\" title=\"rosdep依赖\"></a>rosdep依赖</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo rosdep init</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">rosdep update</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">rosdep install --from-paths src --ignore-src --rosdistro indigo -y -r --os=debian:Jessie</span></div></pre></td></tr></table></figure></p>\n<p><em>rosdep install</em>命令会寻找所有src目录的package并递归安装依赖，要安装的依赖包有点多，耐心等待。rosdep会检查src文件夹，安装其他的依赖包。</p>\n<h2 id=\"编译catkin工作空间\"><a href=\"#编译catkin工作空间\" class=\"headerlink\" title=\"编译catkin工作空间\"></a>编译catkin工作空间</h2><p>在开始编译之前，先打两个补丁<br>打开文件:<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$vim</span> ~<span class=\"regexp\">/ros_catkin_ws/</span>src<span class=\"regexp\">/robot_model/</span>collada_urdf<span class=\"regexp\">/src/</span>collada_urdf.cpp</div></pre></td></tr></table></figure></p>\n<p>在最后一个#include后添加<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __arm__  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;strings.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">bool</span> Assimp::IOSystem::ComparePaths(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p1, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p2) <span class=\"keyword\">const</span>  </div><div class=\"line\">&#123;  </div><div class=\"line\"><span class=\"keyword\">return</span> !::strcasecmp(p1,p2);  </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<p>修改~/ros_catkin_ws/src/rviz/src/rviz/mesh_loader.cpp文件，在最后一个#include（如果#include的下一行是#endif则放到#endif后）行后加入以下代码<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __arm__                 <span class=\"comment\">// fix for ARM build</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;strings.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">bool</span> Assimp::IOSystem::ComparePaths(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p1, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p2) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> !::strcasecmp(p1, p2);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<p>编译：<br>　　<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$<span class=\"keyword\">cd</span> ~<span class=\"string\">/ros_catkin_ws</span></div><div class=\"line\">$sudo <span class=\"string\">./src/catkin/bin/catkin_make_isolated</span> <span class=\"params\">--install</span> -DCMAKE_BUILD_TYPE=Release <span class=\"params\">--install-space</span> <span class=\"string\">/opt/ros/indigo</span> -j4</div></pre></td></tr></table></figure></p>\n<p>上面命令将编译文件安装到/opt/ros/indigo –j4是使用4个线程编译.</p>\n<h2 id=\"出现的错误\"><a href=\"#出现的错误\" class=\"headerlink\" title=\"出现的错误\"></a>出现的错误</h2><p>###error: ‘shared_ptr’ in namespace ‘std’ does not name a template type<br>执行上面的编译命令提示错误：<br>　　<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">in</span> file included from <span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>src<span class=\"regexp\">/robot_model/</span>urdf<span class=\"regexp\">/include/</span>urdf/model.<span class=\"string\">h:</span><span class=\"number\">43</span>:<span class=\"number\">0</span>, </div><div class=\"line\">                 from <span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>src<span class=\"regexp\">/robot_model/</span>urdf<span class=\"regexp\">/src/</span>model.<span class=\"string\">cpp:</span><span class=\"number\">37</span>: </div><div class=\"line\"><span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>devel_isolated<span class=\"regexp\">/urdf/</span>include<span class=\"regexp\">/urdf/</span>urdfdom_compatibility.<span class=\"string\">h:</span><span class=\"number\">78</span>:<span class=\"number\">14</span>: <span class=\"string\">error:</span> ‘shared_ptr’ <span class=\"keyword\">in</span> namespace ‘std’ does not name a template type </div><div class=\"line\"> typedef <span class=\"string\">std:</span>:shared_ptr&lt;ModelInterface&gt; ModelInterfaceSharedPtr; </div><div class=\"line\">              ^ </div><div class=\"line\"><span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>devel_isolated<span class=\"regexp\">/urdf/</span>include<span class=\"regexp\">/urdf/</span>urdfdom_compatibility.<span class=\"string\">h:</span><span class=\"number\">79</span>:<span class=\"number\">14</span>: <span class=\"string\">error:</span> ‘shared_ptr’ <span class=\"keyword\">in</span> namespace ‘std’ does not name a template type </div><div class=\"line\"> typedef <span class=\"string\">std:</span>:shared_ptr&lt;const ModelInterface&gt; ModelInterfaceConstSharedPtr; </div><div class=\"line\">              ^ </div><div class=\"line\"><span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>devel_isolated<span class=\"regexp\">/urdf/</span>include<span class=\"regexp\">/urdf/</span>urdfdom_compatibility.<span class=\"string\">h:</span><span class=\"number\">80</span>:<span class=\"number\">14</span>: <span class=\"string\">error:</span> ‘weak_ptr’ <span class=\"keyword\">in</span> namespace ‘std’ does not name a template type </div><div class=\"line\"> typedef <span class=\"string\">std:</span>:weak_ptr&lt;ModelInterface&gt; ModelInterfaceWeakPtr; </div><div class=\"line\">              ^ </div><div class=\"line\">CMakeFiles<span class=\"regexp\">/urdf.dir/</span>build.<span class=\"string\">make:</span><span class=\"number\">62</span>: recipe <span class=\"keyword\">for</span> target <span class=\"string\">'CMakeFiles/urdf.dir/src/model.cpp.o'</span> failed</div></pre></td></tr></table></figure></p>\n<p>修改文件：<br>/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h<br>从78行开始到80行都屏蔽掉<br>　　<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> /*</div><div class=\"line\"> typedef <span class=\"symbol\">std:</span><span class=\"symbol\">:shared_ptr&lt;ModelInterface&gt;</span> ModelInterfaceSharedPtr;</div><div class=\"line\"> typedef <span class=\"symbol\">std:</span><span class=\"symbol\">:shared_ptr&lt;const</span> ModelInterface&gt; ModelInterfaceConstSharedPtr;</div><div class=\"line\"> typedef <span class=\"symbol\">std:</span><span class=\"symbol\">:weak_ptr&lt;ModelInterface&gt;</span> ModelInterfaceWeakPtr;</div><div class=\"line\">*<span class=\"regexp\">/</span></div></pre></td></tr></table></figure></p>\n<p>再次编译成功。这个过程非常漫长。<img src=\"/2017/05/15/ros-indigo-raspberry/catkin.jpg\" alt=\"\"></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>完成之后设置环境变量：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$source</span> <span class=\"regexp\">/opt/</span>ros<span class=\"regexp\">/indigo/</span>setup.bash</div></pre></td></tr></table></figure></p>\n<p>设置ROS环境变量在每次启动shell时自动添加到bash会话<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">echo</span> <span class=\"string\">\"source /opt/ros/indigo/setup.bash\"</span> &gt;&gt; ~/.bashrc</span></div></pre></td></tr></table></figure></p>\n<p>到这里我们的ROS完整版就已经成功安装好了，不妨运行roscore试一下<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscore</span></span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/15/ros-indigo-raspberry/roscore.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>目前对于基于<a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a>的可移动平台，有两种方案较为流行，用户较多，可参考的资料也多。一种是使用英伟达的<a href=\"http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html\" target=\"_blank\" rel=\"external\">TK1</a>，另外一种是使用<a href=\"https://www.raspberrypi.org/\" target=\"_blank\" rel=\"external\">raspberryPi</a>。相对于<a href=\"http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html\" target=\"_blank\" rel=\"external\">TK1</a>，树莓派在价格上更亲民，虽然性能上差一些，在计算<a href=\"https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%97%B6%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%9C%B0%E5%9B%BE%E6%9E%84%E5%BB%BA\" target=\"_blank\" rel=\"external\">SLAM</a>时会有卡顿现象，但对于入门级用户来说，也是个不错的选择。<br></p>","more":"<p></p>\n<h1 id=\"树莓派3B上安装ROS-Indigo\"><a href=\"#树莓派3B上安装ROS-Indigo\" class=\"headerlink\" title=\"树莓派3B上安装ROS-Indigo\"></a>树莓派3B上安装ROS-Indigo</h1><p> <em>环境</em>： <em>Raspbian OS Jessie</em><br> <em>硬件</em>： <em>raspberryPi 3B</em>以及一张<em>16G SD 卡</em><br> <em>参考</em>： <a href=\"http://wiki.ros.org/ROSberryPi/Installing%20ROS%20Indigo%20on%20Raspberry%20Pi\" target=\"_blank\" rel=\"external\">InstallROSIndigoOnRaspberryPi</a></p>\n<h2 id=\"添加ROS代码仓\"><a href=\"#添加ROS代码仓\" class=\"headerlink\" title=\"添加ROS代码仓\"></a>添加ROS代码仓</h2><p>添加ROS源以及key<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> <span class=\"keyword\">sh</span> -c 'echo <span class=\"string\">\"deb http://packages.ros.org/ros/ubuntu jessie main\"</span> &gt; /etc/apt/sources.<span class=\"keyword\">list</span>.<span class=\"keyword\">d</span>/ros-latest.<span class=\"keyword\">list</span>'</div><div class=\"line\"><span class=\"variable\">$wget</span> https:<span class=\"comment\">//raw.githubusercontent.com/ros/rosdistro/master/ros.key -O - | sudo apt-key add -</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get update</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get upgrade</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装引导程序依赖项\"><a href=\"#安装引导程序依赖项\" class=\"headerlink\" title=\"安装引导程序依赖项\"></a>安装引导程序依赖项</h2><p>　　<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-get install <span class=\"keyword\">python</span>-pip <span class=\"keyword\">python</span>-setuptools <span class=\"keyword\">python</span>-yaml <span class=\"keyword\">python</span>-distribute <span class=\"keyword\">python</span>-docutils <span class=\"keyword\">python</span>-dateutil <span class=\"keyword\">python</span>-six</div><div class=\"line\">$sudo pip install rosdep rosinstall_generator wstool rosinstall</div></pre></td></tr></table></figure></p>\n<h2 id=\"安装vim\"><a href=\"#安装vim\" class=\"headerlink\" title=\"安装vim\"></a>安装vim</h2><p>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install vim</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"增大swap空间\"><a href=\"#增大swap空间\" class=\"headerlink\" title=\"增大swap空间\"></a>增大swap空间</h2><p>修改/etc/dphys-swapfile文件，增大交换空间，以免编译ROS源码时出现内存不足现象。将CONF_SWAPSIZE 修改为 2048<br>　　<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">CONF_SWAPSIZE</span>=<span class=\"number\">2048</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"初始化rosdep\"><a href=\"#初始化rosdep\" class=\"headerlink\" title=\"初始化rosdep\"></a>初始化rosdep</h2><p>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> rosdep init</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosdep</span> update</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"创建workspace\"><a href=\"#创建workspace\" class=\"headerlink\" title=\"创建workspace\"></a>创建workspace</h2><p>创建一个workspace用于存储和编译ROS源码<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">mkdir ~/ros_catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h2><p>选择desktop完全版本<br>　　<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">$rosinstall_generator</span> <span class=\"comment\">desktop</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">rosdistro</span> <span class=\"comment\">indigo</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">deps</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">wet</span><span class=\"literal\">-</span><span class=\"comment\">only</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">exclude</span> <span class=\"comment\">roslisp</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">tar</span> &gt; <span class=\"comment\">indigo</span><span class=\"literal\">-</span><span class=\"comment\">desktop</span><span class=\"literal\">-</span><span class=\"comment\">wet</span><span class=\"string\">.</span><span class=\"comment\">rosinstall</span></div><div class=\"line\"><span class=\"comment\">$wstool</span> <span class=\"comment\">init</span> <span class=\"literal\">-</span><span class=\"comment\">j4</span> <span class=\"comment\">src</span> <span class=\"comment\">indigo</span><span class=\"literal\">-</span><span class=\"comment\">desktop</span><span class=\"literal\">-</span><span class=\"comment\">wet</span><span class=\"string\">.</span><span class=\"comment\">rosinstall</span></div></pre></td></tr></table></figure></p>\n<p>源代码将会保存在目录 <em>~/ros_catkin_ws/src</em> 下，<em>-j4</em>意思是开启4个线程同时下载。如果下载异常中断，可以尝试使用下面命令恢复：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$wstool</span> update -j4 -t src</span></div></pre></td></tr></table></figure></p>\n<p>下载时间很漫长。</p>\n<h2 id=\"解决ROS依赖\"><a href=\"#解决ROS依赖\" class=\"headerlink\" title=\"解决ROS依赖\"></a>解决ROS依赖</h2><p>在正式编译ROS之前，我们还需要手动安装以下几个依赖包：<br> <em>libconsole-bridge-dev</em><br> <em>liblz4-dev</em><br> <em>liburdfdom-headers-dev</em><br> <em>liburdfdom-dev</em><br> <em>collada-dom-dev</em><br>为这些依赖包建立单独的用于编译安装的文件夹，同时安装checkinstall和cmake：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$mkdir</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install checkinstall cmake</span></div></pre></td></tr></table></figure></p>\n<p>如果无法安装，更新一下再安装：<br>　　<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span> &amp;&amp; sudo apt-<span class=\"built_in\">get</span> upgrade</div></pre></td></tr></table></figure></p>\n<p>然后添加：<br>　　<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> <span class=\"keyword\">sh</span> -c 'echo <span class=\"string\">\"deb-src http://mirrordirector.raspbian.org/raspbian/ testing main contrib non-free rpi\"</span> &gt;&gt; /etc/apt/sources.<span class=\"keyword\">list</span>'</div></pre></td></tr></table></figure></p>\n<p>更新：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get update</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装libconsole-bridge-dev\"><a href=\"#安装libconsole-bridge-dev\" class=\"headerlink\" title=\"安装libconsole-bridge-dev\"></a>安装libconsole-bridge-dev</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo apt-get build-dep console-bridge</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">apt-get <span class=\"built_in\">source</span> -b console-bridge</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo dpkg -i libconsole-bridge0.2*.deb libconsole-bridge-dev_*.deb</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装liblz4-dev\"><a href=\"#安装liblz4-dev\" class=\"headerlink\" title=\"安装liblz4-dev\"></a>安装liblz4-dev</h2><p>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> ~/ros_catkin_ws/external_src</div><div class=\"line\"><span class=\"variable\">$apt</span>-get source -<span class=\"selector-tag\">b</span> lz4 <span class=\"comment\">//获取，该步骤耗时很长</span></div><div class=\"line\"><span class=\"variable\">$sudo</span> dpkg -<span class=\"selector-tag\">i</span> liblz4-*<span class=\"selector-class\">.deb</span> <span class=\"comment\">//安装</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装liburdfdom-headers-dev\"><a href=\"#安装liburdfdom-headers-dev\" class=\"headerlink\" title=\"安装liburdfdom-headers-dev\"></a>安装liburdfdom-headers-dev</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git <span class=\"built_in\">clone</span> https://github.com/ros/urdfdom_headers.git</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git reset --hard 9aed725</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> urdfdom_headers</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo checkinstall make installl</span></div></pre></td></tr></table></figure></p>\n<p>最后一步提示：<br>　　<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">The <span class=\"keyword\">package</span> documentation directory ./doc-pak does not exist.</div><div class=\"line\">Should I create a <span class=\"keyword\">default</span> set of <span class=\"keyword\">package</span> docs?  [y]: y</div><div class=\"line\">This <span class=\"keyword\">package</span> will be built according to these <span class=\"string\">values:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">0</span> -  <span class=\"string\">Maintainer:</span> [ root<span class=\"meta\">@raspberrypi</span> ]</div><div class=\"line\"><span class=\"number\">1</span> -  <span class=\"string\">Summary:</span> [ Package created with checkinstall <span class=\"number\">1.6</span><span class=\"number\">.2</span> ]</div><div class=\"line\"><span class=\"number\">2</span> -  <span class=\"string\">Name:</span>    [ urdfdom-headers ]</div><div class=\"line\"><span class=\"number\">3</span> -  <span class=\"string\">Version:</span> [ <span class=\"number\">20170318</span> ]</div><div class=\"line\"><span class=\"number\">4</span> -  <span class=\"string\">Release:</span> [ <span class=\"number\">1</span> ]</div><div class=\"line\"><span class=\"number\">5</span> -  <span class=\"string\">License:</span> [ GPL ]</div><div class=\"line\"><span class=\"number\">6</span> -  <span class=\"string\">Group:</span>   [ checkinstall ]</div><div class=\"line\"><span class=\"number\">7</span> -  <span class=\"string\">Architecture:</span> [ armhf ]</div><div class=\"line\"><span class=\"number\">8</span> -  Source <span class=\"string\">location:</span> [ urdfdom_headers ]</div><div class=\"line\"><span class=\"number\">9</span> -  Alternate source <span class=\"string\">location:</span> [  ]</div><div class=\"line\"><span class=\"number\">10</span> - <span class=\"string\">Requires:</span> [  ]</div><div class=\"line\"><span class=\"number\">11</span> - <span class=\"string\">Provides:</span> [ urdfdom-headers ]</div><div class=\"line\"><span class=\"number\">12</span> - <span class=\"string\">Conflicts:</span> [  ]</div><div class=\"line\"><span class=\"number\">13</span> - <span class=\"string\">Replaces:</span> [  ]</div></pre></td></tr></table></figure></p>\n<p>这里的’9aed725’就是将”liburdfdom-headers-dev”的安装版本变成我们需要的1.0.0版本。check-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从”urdfdom-headers” 改为 “liburdfdom-headers-dev”，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错<br>完成后检查安装的包是否正确:<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">dpkg <span class=\"_\">-l</span> | grep urdf</span></div></pre></td></tr></table></figure></p>\n<p>如果正确会输出：<br>　　<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ii  liburdfdom-headers-dev       <span class=\"number\">20170318</span><span class=\"number\">-1</span>     armhf        Package created with checkinstall <span class=\"number\">1.6</span><span class=\"number\">.2</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装liburdfdom-dev\"><a href=\"#安装liburdfdom-dev\" class=\"headerlink\" title=\"安装liburdfdom-dev\"></a>安装liburdfdom-dev</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo apt-get install libboost-test-dev libtinyxml-dev</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git <span class=\"built_in\">clone</span> https://github.com/ros/urdfdom.git</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> urdfdom</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo checkinstall make install</span></div></pre></td></tr></table></figure></p>\n<p>check-install开始会让提示输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 “urdfdom”改为”liburdfdom-dev” ，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错。<br>编译出错提示找不到文件：utils.h<br>添加一个文件(utils.h)到/usr/local/include/urdf_model目录下：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/include/u</span>rdf_model</div><div class=\"line\"><span class=\"variable\">$sudo</span> wget https:<span class=\"regexp\">//</span>raw.githubusercontent.com<span class=\"regexp\">/ros/u</span>rdfdom_headers<span class=\"regexp\">/master/u</span>rdf_model<span class=\"regexp\">/include/u</span>rdf_model<span class=\"regexp\">/utils.h</span></div></pre></td></tr></table></figure></p>\n<p>重新编译</p>\n<h2 id=\"安装collada-dom-dev\"><a href=\"#安装collada-dom-dev\" class=\"headerlink\" title=\"安装collada-dom-dev\"></a>安装collada-dom-dev</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws/external_src</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo apt-get install libboost-filesystem-dev libxml2-dev</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">wget http://downloads.sourceforge.net/project/collada-dom/Collada%20DOM/Collada%20DOM%202.4/collada-dom-2.4.0.tgz</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">tar -xzf collada-dom-2.4.0.tgz</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> collada-dom-2.4.0</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake .</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo checkinstall make install</span></div></pre></td></tr></table></figure></p>\n<p>check-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 “collada-dom”改为 “collada-dom-dev” ，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错。</p>\n<h2 id=\"rosdep依赖\"><a href=\"#rosdep依赖\" class=\"headerlink\" title=\"rosdep依赖\"></a>rosdep依赖</h2><p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/ros_catkin_ws</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo rosdep init</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">rosdep update</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">rosdep install --from-paths src --ignore-src --rosdistro indigo -y -r --os=debian:Jessie</span></div></pre></td></tr></table></figure></p>\n<p><em>rosdep install</em>命令会寻找所有src目录的package并递归安装依赖，要安装的依赖包有点多，耐心等待。rosdep会检查src文件夹，安装其他的依赖包。</p>\n<h2 id=\"编译catkin工作空间\"><a href=\"#编译catkin工作空间\" class=\"headerlink\" title=\"编译catkin工作空间\"></a>编译catkin工作空间</h2><p>在开始编译之前，先打两个补丁<br>打开文件:<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$vim</span> ~<span class=\"regexp\">/ros_catkin_ws/</span>src<span class=\"regexp\">/robot_model/</span>collada_urdf<span class=\"regexp\">/src/</span>collada_urdf.cpp</div></pre></td></tr></table></figure></p>\n<p>在最后一个#include后添加<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __arm__  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;strings.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">bool</span> Assimp::IOSystem::ComparePaths(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p1, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p2) <span class=\"keyword\">const</span>  </div><div class=\"line\">&#123;  </div><div class=\"line\"><span class=\"keyword\">return</span> !::strcasecmp(p1,p2);  </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<p>修改~/ros_catkin_ws/src/rviz/src/rviz/mesh_loader.cpp文件，在最后一个#include（如果#include的下一行是#endif则放到#endif后）行后加入以下代码<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __arm__                 <span class=\"comment\">// fix for ARM build</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;strings.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">bool</span> Assimp::IOSystem::ComparePaths(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p1, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p2) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> !::strcasecmp(p1, p2);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<p>编译：<br>　　<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$<span class=\"keyword\">cd</span> ~<span class=\"string\">/ros_catkin_ws</span></div><div class=\"line\">$sudo <span class=\"string\">./src/catkin/bin/catkin_make_isolated</span> <span class=\"params\">--install</span> -DCMAKE_BUILD_TYPE=Release <span class=\"params\">--install-space</span> <span class=\"string\">/opt/ros/indigo</span> -j4</div></pre></td></tr></table></figure></p>\n<p>上面命令将编译文件安装到/opt/ros/indigo –j4是使用4个线程编译.</p>\n<h2 id=\"出现的错误\"><a href=\"#出现的错误\" class=\"headerlink\" title=\"出现的错误\"></a>出现的错误</h2><p>###error: ‘shared_ptr’ in namespace ‘std’ does not name a template type<br>执行上面的编译命令提示错误：<br>　　<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">in</span> file included from <span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>src<span class=\"regexp\">/robot_model/</span>urdf<span class=\"regexp\">/include/</span>urdf/model.<span class=\"string\">h:</span><span class=\"number\">43</span>:<span class=\"number\">0</span>, </div><div class=\"line\">                 from <span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>src<span class=\"regexp\">/robot_model/</span>urdf<span class=\"regexp\">/src/</span>model.<span class=\"string\">cpp:</span><span class=\"number\">37</span>: </div><div class=\"line\"><span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>devel_isolated<span class=\"regexp\">/urdf/</span>include<span class=\"regexp\">/urdf/</span>urdfdom_compatibility.<span class=\"string\">h:</span><span class=\"number\">78</span>:<span class=\"number\">14</span>: <span class=\"string\">error:</span> ‘shared_ptr’ <span class=\"keyword\">in</span> namespace ‘std’ does not name a template type </div><div class=\"line\"> typedef <span class=\"string\">std:</span>:shared_ptr&lt;ModelInterface&gt; ModelInterfaceSharedPtr; </div><div class=\"line\">              ^ </div><div class=\"line\"><span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>devel_isolated<span class=\"regexp\">/urdf/</span>include<span class=\"regexp\">/urdf/</span>urdfdom_compatibility.<span class=\"string\">h:</span><span class=\"number\">79</span>:<span class=\"number\">14</span>: <span class=\"string\">error:</span> ‘shared_ptr’ <span class=\"keyword\">in</span> namespace ‘std’ does not name a template type </div><div class=\"line\"> typedef <span class=\"string\">std:</span>:shared_ptr&lt;const ModelInterface&gt; ModelInterfaceConstSharedPtr; </div><div class=\"line\">              ^ </div><div class=\"line\"><span class=\"regexp\">/home/</span>pi<span class=\"regexp\">/ros_catkin_ws/</span>devel_isolated<span class=\"regexp\">/urdf/</span>include<span class=\"regexp\">/urdf/</span>urdfdom_compatibility.<span class=\"string\">h:</span><span class=\"number\">80</span>:<span class=\"number\">14</span>: <span class=\"string\">error:</span> ‘weak_ptr’ <span class=\"keyword\">in</span> namespace ‘std’ does not name a template type </div><div class=\"line\"> typedef <span class=\"string\">std:</span>:weak_ptr&lt;ModelInterface&gt; ModelInterfaceWeakPtr; </div><div class=\"line\">              ^ </div><div class=\"line\">CMakeFiles<span class=\"regexp\">/urdf.dir/</span>build.<span class=\"string\">make:</span><span class=\"number\">62</span>: recipe <span class=\"keyword\">for</span> target <span class=\"string\">'CMakeFiles/urdf.dir/src/model.cpp.o'</span> failed</div></pre></td></tr></table></figure></p>\n<p>修改文件：<br>/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h<br>从78行开始到80行都屏蔽掉<br>　　<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> /*</div><div class=\"line\"> typedef <span class=\"symbol\">std:</span><span class=\"symbol\">:shared_ptr&lt;ModelInterface&gt;</span> ModelInterfaceSharedPtr;</div><div class=\"line\"> typedef <span class=\"symbol\">std:</span><span class=\"symbol\">:shared_ptr&lt;const</span> ModelInterface&gt; ModelInterfaceConstSharedPtr;</div><div class=\"line\"> typedef <span class=\"symbol\">std:</span><span class=\"symbol\">:weak_ptr&lt;ModelInterface&gt;</span> ModelInterfaceWeakPtr;</div><div class=\"line\">*<span class=\"regexp\">/</span></div></pre></td></tr></table></figure></p>\n<p>再次编译成功。这个过程非常漫长。<img src=\"/2017/05/15/ros-indigo-raspberry/catkin.jpg\" alt=\"\"></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>完成之后设置环境变量：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$source</span> <span class=\"regexp\">/opt/</span>ros<span class=\"regexp\">/indigo/</span>setup.bash</div></pre></td></tr></table></figure></p>\n<p>设置ROS环境变量在每次启动shell时自动添加到bash会话<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">echo</span> <span class=\"string\">\"source /opt/ros/indigo/setup.bash\"</span> &gt;&gt; ~/.bashrc</span></div></pre></td></tr></table></figure></p>\n<p>到这里我们的ROS完整版就已经成功安装好了，不妨运行roscore试一下<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscore</span></span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/05/15/ros-indigo-raspberry/roscore.jpg\" alt=\"\"></p>"},{"title":"如何让Vim变的爱不释手","date":"2017-05-18T01:02:06.000Z","comments":1,"_content":"# 前言\n*linux* 下有很多好用的 IDE，比如常见的 [Eclipse](https://eclipse.org/)、[Bluefish](http://bluefish.openoffice.nl/index.html)、[NetBeans](https://netbeans.org/) 等等，功能很多，有些功能我们不一定用得上,天天面对 *terminal* 敲命令的我们天生不喜欢鼠标。*linux* 下的文本编辑器使用最多的还是 [Vim](http://www.vim.org/) 。可不可以将 [Vim](http://www.vim.org/) 打造成一个好用的 IDE 来替代或者部分替代这些高大上的 IDE 呢? -程序猿天生喜欢折腾。话不多说先上图：![](vim/ycm.gif)\n<!--more-->\n# vim 插件管理\n首先安装 [Vim](https://github.com/vim/vim.git), 确保版本在 7.4 以上。可以源码安装 [Vim](https://github.com/vim/vim.git) 也可以自动安装：\n　　```\n $sudo apt-get install vim\n　　```\n由于发行版的不同，这种方式安装的 [Vim](https://github.com/vim/vim.git) 版本不一定是最新的，如果版本低于 7.4 请采用源码安装。 [Vim](https://github.com/vim/vim.git) 的插件管理一般是通过 [Vundle](https://github.com/VundleVim/Vundle.vim) 来实现。 安装 [Vundle](https://github.com/VundleVim/Vundle.vim):\n　　```\n$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n　　```\n完成后修改用户目录下的 *.vimrc* 文件，添加以下项：\n　　```\n \"-----------Vundle configuration--------------------\n set nocompatible \"去掉vi一致性\n filetype off  \n \"包含vundle路径\n set rtp+=~/.vim/bundle/Vundle.vim\n call vundle#begin()\n Plugin 'VundleVim/Vundle.vim'\n Plugin 'xxx/xxx' \"新插件\n call vundle#end()\n filetype plugin indent on\n　　```\n当需要安装新的插件时，将插件的仓库名按格式填入到*.vimrc* 文件：\n　　```\nPlugin 'xxx/xxx'\n　　```\n插件的安装格式为：\n　　```\n Plugin 'repository' //在Github vim-scripts 用户下的仓库,只需要写出仓库名称\n Plugin 'username/repository' //在Github其他用户下的仓库, 需要写出”用户名/仓库名”\n Plugin 'git://github.com/something.git' //不在Github上的插件，需要写出git全路径\n　　```\n启动 *Vim*,运行命令安装插件：\n\n　　```\n ：PluginInstall\n　　```\n卸载插件时先在 *.vimrc* 中删除掉不用的插件行然后运行清除命令：\n　　```\n ：PluginClean\n　　```\n参考 [Vundle](https://github.com/VundleVim/Vundle.vim) 和 [vim-scripts](https://github.com/vim-scripts)\n# 项目树\n[NerdTree](https://github.com/scrooloose/nerdtree) 是一个树形目录插件，方便查看项目中的各个文件。\n安装：\n　　```\n Plugin 'scrooloose/nerdtree'\n\n　　```\n完成后在 *.vimrc* 中进行必要的配置：\n　```\n \"---------NERDTree Configruation-----------------------------------\n let NERDTreeShowBookmarks=1 \" 当打开 NERDTree 窗口时，自动显示 Bookmarks\n let NERDTreeWinPos='left' \"目录树在左边显示\n let NERDTreeWinSize=30 \"目录树的窗口宽度\n \"开启和关闭快捷键为F2 或者 直接输入命令:NERDTree\n map <F2> :NERDTreeToggle<CR>\n　```\n效果：\n![](vim/tree.jpg)\n# 状态栏\n[Vim-Powerline](https://github.com/Lokaltog/vim-powerline) *vim* 状态栏的显示，可以显示文件名、行列数、编码方式等。\n安装：\n　　```\n Plugin 'Lokaltog/vim-powerline'\n　　```\n现在新的仓库已迁移到 [powerline](https://github.com/powerline/powerline)。\n效果：\n![](vim/powerline.jpg)\n# 括号自动补全\n[auto-pair](https://github.com/jiangmiao/auto-pairs) 插件可以自动补全代码中的括号。安装：\n　　```\n Plugin 'jiangmiao/auto-pairs'\n　　```\n# 代码自动补全\n代码自动补全是各种IDE的必备功能，这里强烈推荐[YouCompleteMe](https://github.com/Valloric/YouCompleteMe)。它基于 [clang](https://zh.wikipedia.org/wiki/Clang) 能够为 *C/C++* 代码提供代码提示，也支持 *python C#*。[YouCompleteMe](https://github.com/Valloric/YouCompleteMe) 的安装正如传说中一样，非常麻烦，但使用起来非常爽。\n## 安装\n源码下载：\n　　```\n$git clone --recursive https://github.com/Valloric/YouCompleteMe.git ~/.vim/bundle/YouCompleteMe\n\n　　```\n安装 [clang](https://clang.llvm.org/get_started.html)：\n　　\n　　```\n $sudo apt-get install clang\n　　```\n[YouCompleteMe](https://github.com/Valloric/YouCompleteMe) 要求 [clang](https://clang.llvm.org/get_started.html) 最低版本为 3.9，如果不是可以在 [这里](http://releases.llvm.org/download.html) 下载。如果 *Ubuntu* 为32bits则需要下载源码手动编译。\n安装 *python-dev*:\n　　```\n $sudo apt-get install python-dev python3-dev\n　　```\n安装 *Cmake*:\n　　```\n $sudo apt-get install cmake\n　　```\n源码编译：\n　　```\n$cd ~/.vim/bundle/YouCompleteMe\n$./install.py --clang-completer --system-libclang\n　　```\n--system-libclang是指使用系统的*libclang*。新版 *YouCompleteMe* 编译时不再需要 *make ycm_support_libs*。\n## 配置\n拷贝系统配置到用户目录下：\n　　```\n $cp ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py  ~/\n　　```\n*.vimrc*中的配置：\n　　```\n \"----------YouCompleteMe configuration---\n set runtimepath+=~/.vim/bundle/YouCompleteMe \"使用插件\n let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py' \"指定全局配置文件路径\n set completeopt=longest,menu    \"让Vim的补全菜单行为与一般IDE一致\n autocmd InsertLeave * if pumvisible() == 0|pclose|endif \"离开插入模式后自动关闭预览窗口\n \"回车即选中当前项\n inoremap <expr> <CR>       pumvisible() ? \"\\<C-y>\" : \"\\<CR>\"\n \"上下左右键的行为\n inoremap <expr> <Down>     pumvisible() ? \"\\<C-n>\" : \"\\<Down>\"\n inoremap <expr> <Up>       pumvisible() ? \"\\<C-p>\" : \"\\<Up>\"\n inoremap <expr> <PageDown> pumvisible() ? \"\\<PageDown>\\<C-p>\\<C-n>\":\n inoremap <expr> <PageUp>   pumvisible() ? \"\\<PageUp>\\<C-p>\\<C-n>\" : \"\\<PageUp>\"\n let g:ycm_key_list_select_completion = ['<Down>']\n let g:ycm_key_list_previous_completion = ['<Up>']\n let g:ycm_confirm_extra_conf=0 \"关闭加载.ycm_extra_conf.py提示\n let g:ycm_collect_identifiers_from_tags_files=1 \" 开启 YCM 基于标签引擎\n let g:ycm_min_num_of_chars_for_completion=2 \" 从第2个键入字符就开始罗列匹配项\n let g:ycm_cache_omnifunc=0  \" 禁止缓存匹配项,每次都重新生成匹配项\n let g:ycm_seed_identifiers_with_syntax=1    \" 语法关键字补全\n nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>\"force recomile with syntastic\n inoremap <leader><leader> <C-x><C-o>\n let g:ycm_complete_in_comments = 1 \"在注释输入中也能补全\n let g:ycm_complete_in_strings = 1 \"在字符串输入中也能补全\n let g:ycm_collect_identifiers_from_comments_and_strings = 1 \"注释和字符串中的文字也会被收入补全\n let g:clang_user_options='|| exit 0'\n let g:ycm_goto_buffer_command = 'horizontal-split' \"跳转到定义处，分屏打开\n nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR> \" 跳转到定义处\n let g:ycm_error_symbol = '>>' \"错误提示符\n let g:ycm_warning_symbol = '>*' \"警告提示符\n　　```\n## 32位系统安装\n由于我使用的是ubuntu14.04 32bit系统，所以有很多软件需要手动编译，在这里将遇到的问题悉数总结一下，有和我同样配置的小伙伴可以参考。32位系统没有合适的 *clang* 和 *vim*发行包，需要手动编译安装。\n### Cmake 安装\n使用sudo apt-get install cmake 默认安装的 [Cmake](https://cmake.org/) 版本为2.8.12.2。当使用 [Cmake](https://cmake.org/) 编译LLVM时提示 [Cmake](https://cmake.org/) 版本太低，要求至少为3.4.3以上 因此需要升级[Cmake](https://cmake.org/)。 \n下载源码：\n　　```\n $wget https://cmake.org/files/v3.4/cmake-3.4.3.tar.gz\n　　```\n编译安装：\n　　```\n $./configure\n $make\n $sudo make install\n　　```\n### Clang 编译安装\n下载LLVM源代码并放到指定目录:\n　　```\n $wget http://llvm.org/releases/3.9.0/llvm-3.9.0.src.tar.xz\n $tar xf llvm-3.9.0.src.tar.xz\n $mv llvm-3.9.0.src  llvm\n\n　　```\n下载clang的源码并放到指定目录：\n　　```\n $cd llvm/tools\n $wget http://llvm.org/releases/3.9.0/cfe-3.9.0.src.tar.xz\n $tar xf cfe-3.9.0.src.tar.xz\n $mv cfe-3.9.0.src clang\n\n　　```\n下载clang-tools-extra源码并放到指定目录：\n　　```\n $cd llvm/tools/clang/tools\n $wget http://llvm.org/releases/3.9.0/clang-tools-extra-3.9.0.src.tar.xz\n $tar xf clang-tools-extra-3.9.0.src.tar.xz\n $mv clang-tools-extra-3.9.0.src  extra\n\n　　```\n下载compiler-rt源码并放到指定目录：\n　　```\n $cd llvm/projects\n $wget http://llvm.org/releases/3.9.0/compiler-rt-3.9.0.src.tar.xz\n $tar xf compiler-rt-3.9.0.src.tar.xz\n $mv compiler-rt-3.9.0.src compiler-rt\n　　```\n配置参考 [llvm官网](http://llvm.org/docs/GettingStarted.html#local-llvm-configuration)。\n　　```\n $cmake –G “Unix Makefiles” /home/steven/software/llvm –DCMAKE_BUILD_TYPE=RELEASE –DLLVM_TARGETS_TO_BUILD=X86 –DLLVM_OPTIMIZED_TABLEGEN=ON –DCMAKE_INSTALL_PREFIX=/usr/local/llvm\n　　```\n编译参考[llvm-cmake](http://llvm.org/docs/CMake.html)：\n3.7.0以后，不允许在源码树中进行构建，我们可以在llvm源码目录同级目录中创建一个目录build，然后使用绝对路径进行构建。\n退出llvm目录，在llvm同级目录下建立build目录，进入到build目录\n\n　　```\n $cd ../..\n $mkdir build\n $cd build\n $cmake --build . //后面的 . 不能少,意思是当前目录\n　　```\n安装：\n　　```\n $sudo cmake --build . --target install\n　　```\n也可以在安装时改变安装路径：\n　　```\n $cmake –DCMAKE_INSTALL_PREFIX=/tmp/llvm –P cmake_install.cmake\n　　```\n安装后看系统是否能找到，如果不能需要手动添加到环境变量。\n### vim升级\n如果不升级 *Vim*,当调用 *YouCompleteMe* 时系统会提示错误：\n　　```\nYouCompleteMe unavailable: requires Vim 7.4.143+\n　　```\n因此需要升级 *Vim*。先卸载原有版本：\n　　```\nsudo apt-get remove vim\nsudo apt-get remove vim-runtime\nsudo apt-get remove vim -tiny\nsudo apt-get remove vim-common\nsudo apt-get remove vim-doc\nsudo apt-get remove vim-scripts\n　　```\n首先安装一些依赖项：\n　　```\nsudo apt-get install libncurses5-dev libgnome2-dev libgnomeui-dev libgtk2.0-dev libatk1.0-dev libbonoboui2-dev libcairo2-dev libx11-dev libxpm-dev libxt-dev python-dev python3-dev ruby-dev lua5.1 lua5.1-dev　\n　```\n*–enable-pythoninterp* 和 *–enable-python3interp* 是 *vim* 对 *python* 版本的支持，安装 *YouCompleteMe* 必须要有这两个配置。\n下载 [vim-8.0](http://mirror.metrocast.net/vim/unix/vim-8.0.tar.bz2):\n　　```\n $wget http://mirror.metrocast.net/vim/unix/vim-8.0.tar.bz2\n　　```\n解压后配置：\n　　```\n./configure --with-features=huge --enable-multibyte --enable-rubyinterp --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config-i386-linux-gnu  --enable-python3interp --with-python3-config-dir=/usr/lib/python3.4/config-3.4m-i386-linux-gnu --enable-perlinterp --enable-luainterp --enable-gui=gtk2 --enable-cscope --prefix=/usr\n　　```\n注意上面的 *--with-python3-config-dir* 一定要指定 *python3* 的完全路径，否则系统找不到。\n编译安装：\n　　```\n $make VIMRUNTIMEDIR=/usr/share/vim/vim80\n $sudo make install\n　　```\n安装完后一定要测试一下依赖项是否完整，特别是对 *python3* 的依赖：\n　　```\n $vim --version | grep python\n　　```\n如果输出包含则表示安装完整：\n　　```\n+cryptv          +linebreak       +python/dyn      +vreplace\n+cscope          +lispindent      +python3/dyn     +wildignore\n　　```\n再回到以上YouCompleteMe的安装即可。\n# 结语\n*Vim* 还有很多有用的插件，需要慢慢研究，目前先装这些，对于常用的补全、跳转、快速查看目录等都可以实现，基本满足需求。\n\n\n\n\n\n \n\n","source":"_posts/vim.md","raw":"---\ntitle: 如何让Vim变的爱不释手\ndate: 2017-05-18 09:02:06\ncategories: Linux\ntags: Vim\ncomments: true\n---\n# 前言\n*linux* 下有很多好用的 IDE，比如常见的 [Eclipse](https://eclipse.org/)、[Bluefish](http://bluefish.openoffice.nl/index.html)、[NetBeans](https://netbeans.org/) 等等，功能很多，有些功能我们不一定用得上,天天面对 *terminal* 敲命令的我们天生不喜欢鼠标。*linux* 下的文本编辑器使用最多的还是 [Vim](http://www.vim.org/) 。可不可以将 [Vim](http://www.vim.org/) 打造成一个好用的 IDE 来替代或者部分替代这些高大上的 IDE 呢? -程序猿天生喜欢折腾。话不多说先上图：![](vim/ycm.gif)\n<!--more-->\n# vim 插件管理\n首先安装 [Vim](https://github.com/vim/vim.git), 确保版本在 7.4 以上。可以源码安装 [Vim](https://github.com/vim/vim.git) 也可以自动安装：\n　　```\n $sudo apt-get install vim\n　　```\n由于发行版的不同，这种方式安装的 [Vim](https://github.com/vim/vim.git) 版本不一定是最新的，如果版本低于 7.4 请采用源码安装。 [Vim](https://github.com/vim/vim.git) 的插件管理一般是通过 [Vundle](https://github.com/VundleVim/Vundle.vim) 来实现。 安装 [Vundle](https://github.com/VundleVim/Vundle.vim):\n　　```\n$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n　　```\n完成后修改用户目录下的 *.vimrc* 文件，添加以下项：\n　　```\n \"-----------Vundle configuration--------------------\n set nocompatible \"去掉vi一致性\n filetype off  \n \"包含vundle路径\n set rtp+=~/.vim/bundle/Vundle.vim\n call vundle#begin()\n Plugin 'VundleVim/Vundle.vim'\n Plugin 'xxx/xxx' \"新插件\n call vundle#end()\n filetype plugin indent on\n　　```\n当需要安装新的插件时，将插件的仓库名按格式填入到*.vimrc* 文件：\n　　```\nPlugin 'xxx/xxx'\n　　```\n插件的安装格式为：\n　　```\n Plugin 'repository' //在Github vim-scripts 用户下的仓库,只需要写出仓库名称\n Plugin 'username/repository' //在Github其他用户下的仓库, 需要写出”用户名/仓库名”\n Plugin 'git://github.com/something.git' //不在Github上的插件，需要写出git全路径\n　　```\n启动 *Vim*,运行命令安装插件：\n\n　　```\n ：PluginInstall\n　　```\n卸载插件时先在 *.vimrc* 中删除掉不用的插件行然后运行清除命令：\n　　```\n ：PluginClean\n　　```\n参考 [Vundle](https://github.com/VundleVim/Vundle.vim) 和 [vim-scripts](https://github.com/vim-scripts)\n# 项目树\n[NerdTree](https://github.com/scrooloose/nerdtree) 是一个树形目录插件，方便查看项目中的各个文件。\n安装：\n　　```\n Plugin 'scrooloose/nerdtree'\n\n　　```\n完成后在 *.vimrc* 中进行必要的配置：\n　```\n \"---------NERDTree Configruation-----------------------------------\n let NERDTreeShowBookmarks=1 \" 当打开 NERDTree 窗口时，自动显示 Bookmarks\n let NERDTreeWinPos='left' \"目录树在左边显示\n let NERDTreeWinSize=30 \"目录树的窗口宽度\n \"开启和关闭快捷键为F2 或者 直接输入命令:NERDTree\n map <F2> :NERDTreeToggle<CR>\n　```\n效果：\n![](vim/tree.jpg)\n# 状态栏\n[Vim-Powerline](https://github.com/Lokaltog/vim-powerline) *vim* 状态栏的显示，可以显示文件名、行列数、编码方式等。\n安装：\n　　```\n Plugin 'Lokaltog/vim-powerline'\n　　```\n现在新的仓库已迁移到 [powerline](https://github.com/powerline/powerline)。\n效果：\n![](vim/powerline.jpg)\n# 括号自动补全\n[auto-pair](https://github.com/jiangmiao/auto-pairs) 插件可以自动补全代码中的括号。安装：\n　　```\n Plugin 'jiangmiao/auto-pairs'\n　　```\n# 代码自动补全\n代码自动补全是各种IDE的必备功能，这里强烈推荐[YouCompleteMe](https://github.com/Valloric/YouCompleteMe)。它基于 [clang](https://zh.wikipedia.org/wiki/Clang) 能够为 *C/C++* 代码提供代码提示，也支持 *python C#*。[YouCompleteMe](https://github.com/Valloric/YouCompleteMe) 的安装正如传说中一样，非常麻烦，但使用起来非常爽。\n## 安装\n源码下载：\n　　```\n$git clone --recursive https://github.com/Valloric/YouCompleteMe.git ~/.vim/bundle/YouCompleteMe\n\n　　```\n安装 [clang](https://clang.llvm.org/get_started.html)：\n　　\n　　```\n $sudo apt-get install clang\n　　```\n[YouCompleteMe](https://github.com/Valloric/YouCompleteMe) 要求 [clang](https://clang.llvm.org/get_started.html) 最低版本为 3.9，如果不是可以在 [这里](http://releases.llvm.org/download.html) 下载。如果 *Ubuntu* 为32bits则需要下载源码手动编译。\n安装 *python-dev*:\n　　```\n $sudo apt-get install python-dev python3-dev\n　　```\n安装 *Cmake*:\n　　```\n $sudo apt-get install cmake\n　　```\n源码编译：\n　　```\n$cd ~/.vim/bundle/YouCompleteMe\n$./install.py --clang-completer --system-libclang\n　　```\n--system-libclang是指使用系统的*libclang*。新版 *YouCompleteMe* 编译时不再需要 *make ycm_support_libs*。\n## 配置\n拷贝系统配置到用户目录下：\n　　```\n $cp ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py  ~/\n　　```\n*.vimrc*中的配置：\n　　```\n \"----------YouCompleteMe configuration---\n set runtimepath+=~/.vim/bundle/YouCompleteMe \"使用插件\n let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py' \"指定全局配置文件路径\n set completeopt=longest,menu    \"让Vim的补全菜单行为与一般IDE一致\n autocmd InsertLeave * if pumvisible() == 0|pclose|endif \"离开插入模式后自动关闭预览窗口\n \"回车即选中当前项\n inoremap <expr> <CR>       pumvisible() ? \"\\<C-y>\" : \"\\<CR>\"\n \"上下左右键的行为\n inoremap <expr> <Down>     pumvisible() ? \"\\<C-n>\" : \"\\<Down>\"\n inoremap <expr> <Up>       pumvisible() ? \"\\<C-p>\" : \"\\<Up>\"\n inoremap <expr> <PageDown> pumvisible() ? \"\\<PageDown>\\<C-p>\\<C-n>\":\n inoremap <expr> <PageUp>   pumvisible() ? \"\\<PageUp>\\<C-p>\\<C-n>\" : \"\\<PageUp>\"\n let g:ycm_key_list_select_completion = ['<Down>']\n let g:ycm_key_list_previous_completion = ['<Up>']\n let g:ycm_confirm_extra_conf=0 \"关闭加载.ycm_extra_conf.py提示\n let g:ycm_collect_identifiers_from_tags_files=1 \" 开启 YCM 基于标签引擎\n let g:ycm_min_num_of_chars_for_completion=2 \" 从第2个键入字符就开始罗列匹配项\n let g:ycm_cache_omnifunc=0  \" 禁止缓存匹配项,每次都重新生成匹配项\n let g:ycm_seed_identifiers_with_syntax=1    \" 语法关键字补全\n nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>\"force recomile with syntastic\n inoremap <leader><leader> <C-x><C-o>\n let g:ycm_complete_in_comments = 1 \"在注释输入中也能补全\n let g:ycm_complete_in_strings = 1 \"在字符串输入中也能补全\n let g:ycm_collect_identifiers_from_comments_and_strings = 1 \"注释和字符串中的文字也会被收入补全\n let g:clang_user_options='|| exit 0'\n let g:ycm_goto_buffer_command = 'horizontal-split' \"跳转到定义处，分屏打开\n nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR> \" 跳转到定义处\n let g:ycm_error_symbol = '>>' \"错误提示符\n let g:ycm_warning_symbol = '>*' \"警告提示符\n　　```\n## 32位系统安装\n由于我使用的是ubuntu14.04 32bit系统，所以有很多软件需要手动编译，在这里将遇到的问题悉数总结一下，有和我同样配置的小伙伴可以参考。32位系统没有合适的 *clang* 和 *vim*发行包，需要手动编译安装。\n### Cmake 安装\n使用sudo apt-get install cmake 默认安装的 [Cmake](https://cmake.org/) 版本为2.8.12.2。当使用 [Cmake](https://cmake.org/) 编译LLVM时提示 [Cmake](https://cmake.org/) 版本太低，要求至少为3.4.3以上 因此需要升级[Cmake](https://cmake.org/)。 \n下载源码：\n　　```\n $wget https://cmake.org/files/v3.4/cmake-3.4.3.tar.gz\n　　```\n编译安装：\n　　```\n $./configure\n $make\n $sudo make install\n　　```\n### Clang 编译安装\n下载LLVM源代码并放到指定目录:\n　　```\n $wget http://llvm.org/releases/3.9.0/llvm-3.9.0.src.tar.xz\n $tar xf llvm-3.9.0.src.tar.xz\n $mv llvm-3.9.0.src  llvm\n\n　　```\n下载clang的源码并放到指定目录：\n　　```\n $cd llvm/tools\n $wget http://llvm.org/releases/3.9.0/cfe-3.9.0.src.tar.xz\n $tar xf cfe-3.9.0.src.tar.xz\n $mv cfe-3.9.0.src clang\n\n　　```\n下载clang-tools-extra源码并放到指定目录：\n　　```\n $cd llvm/tools/clang/tools\n $wget http://llvm.org/releases/3.9.0/clang-tools-extra-3.9.0.src.tar.xz\n $tar xf clang-tools-extra-3.9.0.src.tar.xz\n $mv clang-tools-extra-3.9.0.src  extra\n\n　　```\n下载compiler-rt源码并放到指定目录：\n　　```\n $cd llvm/projects\n $wget http://llvm.org/releases/3.9.0/compiler-rt-3.9.0.src.tar.xz\n $tar xf compiler-rt-3.9.0.src.tar.xz\n $mv compiler-rt-3.9.0.src compiler-rt\n　　```\n配置参考 [llvm官网](http://llvm.org/docs/GettingStarted.html#local-llvm-configuration)。\n　　```\n $cmake –G “Unix Makefiles” /home/steven/software/llvm –DCMAKE_BUILD_TYPE=RELEASE –DLLVM_TARGETS_TO_BUILD=X86 –DLLVM_OPTIMIZED_TABLEGEN=ON –DCMAKE_INSTALL_PREFIX=/usr/local/llvm\n　　```\n编译参考[llvm-cmake](http://llvm.org/docs/CMake.html)：\n3.7.0以后，不允许在源码树中进行构建，我们可以在llvm源码目录同级目录中创建一个目录build，然后使用绝对路径进行构建。\n退出llvm目录，在llvm同级目录下建立build目录，进入到build目录\n\n　　```\n $cd ../..\n $mkdir build\n $cd build\n $cmake --build . //后面的 . 不能少,意思是当前目录\n　　```\n安装：\n　　```\n $sudo cmake --build . --target install\n　　```\n也可以在安装时改变安装路径：\n　　```\n $cmake –DCMAKE_INSTALL_PREFIX=/tmp/llvm –P cmake_install.cmake\n　　```\n安装后看系统是否能找到，如果不能需要手动添加到环境变量。\n### vim升级\n如果不升级 *Vim*,当调用 *YouCompleteMe* 时系统会提示错误：\n　　```\nYouCompleteMe unavailable: requires Vim 7.4.143+\n　　```\n因此需要升级 *Vim*。先卸载原有版本：\n　　```\nsudo apt-get remove vim\nsudo apt-get remove vim-runtime\nsudo apt-get remove vim -tiny\nsudo apt-get remove vim-common\nsudo apt-get remove vim-doc\nsudo apt-get remove vim-scripts\n　　```\n首先安装一些依赖项：\n　　```\nsudo apt-get install libncurses5-dev libgnome2-dev libgnomeui-dev libgtk2.0-dev libatk1.0-dev libbonoboui2-dev libcairo2-dev libx11-dev libxpm-dev libxt-dev python-dev python3-dev ruby-dev lua5.1 lua5.1-dev　\n　```\n*–enable-pythoninterp* 和 *–enable-python3interp* 是 *vim* 对 *python* 版本的支持，安装 *YouCompleteMe* 必须要有这两个配置。\n下载 [vim-8.0](http://mirror.metrocast.net/vim/unix/vim-8.0.tar.bz2):\n　　```\n $wget http://mirror.metrocast.net/vim/unix/vim-8.0.tar.bz2\n　　```\n解压后配置：\n　　```\n./configure --with-features=huge --enable-multibyte --enable-rubyinterp --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config-i386-linux-gnu  --enable-python3interp --with-python3-config-dir=/usr/lib/python3.4/config-3.4m-i386-linux-gnu --enable-perlinterp --enable-luainterp --enable-gui=gtk2 --enable-cscope --prefix=/usr\n　　```\n注意上面的 *--with-python3-config-dir* 一定要指定 *python3* 的完全路径，否则系统找不到。\n编译安装：\n　　```\n $make VIMRUNTIMEDIR=/usr/share/vim/vim80\n $sudo make install\n　　```\n安装完后一定要测试一下依赖项是否完整，特别是对 *python3* 的依赖：\n　　```\n $vim --version | grep python\n　　```\n如果输出包含则表示安装完整：\n　　```\n+cryptv          +linebreak       +python/dyn      +vreplace\n+cscope          +lispindent      +python3/dyn     +wildignore\n　　```\n再回到以上YouCompleteMe的安装即可。\n# 结语\n*Vim* 还有很多有用的插件，需要慢慢研究，目前先装这些，对于常用的补全、跳转、快速查看目录等都可以实现，基本满足需求。\n\n\n\n\n\n \n\n","slug":"vim","published":1,"updated":"2017-05-19T09:11:08.072Z","layout":"post","photos":[],"link":"","_id":"cj30tmxif000tikinangmba9g","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><em>linux</em> 下有很多好用的 IDE，比如常见的 <a href=\"https://eclipse.org/\" target=\"_blank\" rel=\"external\">Eclipse</a>、<a href=\"http://bluefish.openoffice.nl/index.html\" target=\"_blank\" rel=\"external\">Bluefish</a>、<a href=\"https://netbeans.org/\" target=\"_blank\" rel=\"external\">NetBeans</a> 等等，功能很多，有些功能我们不一定用得上,天天面对 <em>terminal</em> 敲命令的我们天生不喜欢鼠标。<em>linux</em> 下的文本编辑器使用最多的还是 <a href=\"http://www.vim.org/\" target=\"_blank\" rel=\"external\">Vim</a> 。可不可以将 <a href=\"http://www.vim.org/\" target=\"_blank\" rel=\"external\">Vim</a> 打造成一个好用的 IDE 来替代或者部分替代这些高大上的 IDE 呢? -程序猿天生喜欢折腾。话不多说先上图：<img src=\"/2017/05/18/vim/ycm.gif\" alt=\"\"><br><a id=\"more\"></a></p>\n<h1 id=\"vim-插件管理\"><a href=\"#vim-插件管理\" class=\"headerlink\" title=\"vim 插件管理\"></a>vim 插件管理</h1><p>首先安装 <a href=\"https://github.com/vim/vim.git\" target=\"_blank\" rel=\"external\">Vim</a>, 确保版本在 7.4 以上。可以源码安装 <a href=\"https://github.com/vim/vim.git\" target=\"_blank\" rel=\"external\">Vim</a> 也可以自动安装：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install vim</span></div></pre></td></tr></table></figure></p>\n<p>由于发行版的不同，这种方式安装的 <a href=\"https://github.com/vim/vim.git\" target=\"_blank\" rel=\"external\">Vim</a> 版本不一定是最新的，如果版本低于 7.4 请采用源码安装。 <a href=\"https://github.com/vim/vim.git\" target=\"_blank\" rel=\"external\">Vim</a> 的插件管理一般是通过 <a href=\"https://github.com/VundleVim/Vundle.vim\" target=\"_blank\" rel=\"external\">Vundle</a> 来实现。 安装 <a href=\"https://github.com/VundleVim/Vundle.vim\" target=\"_blank\" rel=\"external\">Vundle</a>:<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/VundleVim/Vundle.<span class=\"keyword\">vim</span>.git ~/.<span class=\"keyword\">vim</span>/bundle/Vundle.<span class=\"keyword\">vim</span></div></pre></td></tr></table></figure></p>\n<p>完成后修改用户目录下的 <em>.vimrc</em> 文件，添加以下项：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">\"-----------Vundle configuration--------------------</span></div><div class=\"line\"><span class=\"keyword\">set</span> nocompatible <span class=\"comment\">\"去掉vi一致性</span></div><div class=\"line\"><span class=\"keyword\">filetype</span> off  </div><div class=\"line\"><span class=\"comment\">\"包含vundle路径</span></div><div class=\"line\"><span class=\"keyword\">set</span> rtp+=~/.<span class=\"keyword\">vim</span>/bundle/Vundle.<span class=\"keyword\">vim</span></div><div class=\"line\"><span class=\"keyword\">call</span> vundle#begin()</div><div class=\"line\">Plugin <span class=\"string\">'VundleVim/Vundle.vim'</span></div><div class=\"line\">Plugin <span class=\"string\">'xxx/xxx'</span> <span class=\"comment\">\"新插件</span></div><div class=\"line\"><span class=\"keyword\">call</span> vundle#end()</div><div class=\"line\"><span class=\"keyword\">filetype</span> plugin <span class=\"built_in\">indent</span> <span class=\"keyword\">on</span></div></pre></td></tr></table></figure></p>\n<p>当需要安装新的插件时，将插件的仓库名按格式填入到<em>.vimrc</em> 文件：<br>　　<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Plugin</span> <span class=\"string\">'xxx/xxx'</span></div></pre></td></tr></table></figure></p>\n<p>插件的安装格式为：<br>　　<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'repository'</span> <span class=\"comment\">//在Github vim-scripts 用户下的仓库,只需要写出仓库名称</span></div><div class=\"line\">Plugin <span class=\"string\">'username/repository'</span> <span class=\"comment\">//在Github其他用户下的仓库, 需要写出”用户名/仓库名”</span></div><div class=\"line\">Plugin <span class=\"string\">'git://github.com/something.git'</span> <span class=\"comment\">//不在Github上的插件，需要写出git全路径</span></div></pre></td></tr></table></figure></p>\n<p>启动 <em>Vim</em>,运行命令安装插件：</p>\n<p>　　<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">：PluginInstall</div></pre></td></tr></table></figure></p>\n<p>卸载插件时先在 <em>.vimrc</em> 中删除掉不用的插件行然后运行清除命令：<br>　　<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">：PluginClean</div></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"https://github.com/VundleVim/Vundle.vim\" target=\"_blank\" rel=\"external\">Vundle</a> 和 <a href=\"https://github.com/vim-scripts\" target=\"_blank\" rel=\"external\">vim-scripts</a></p>\n<h1 id=\"项目树\"><a href=\"#项目树\" class=\"headerlink\" title=\"项目树\"></a>项目树</h1><p><a href=\"https://github.com/scrooloose/nerdtree\" target=\"_blank\" rel=\"external\">NerdTree</a> 是一个树形目录插件，方便查看项目中的各个文件。<br>安装：<br>　　<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Plugin</span> <span class=\"string\">'scrooloose/nerdtree'</span></div></pre></td></tr></table></figure></p>\n<p>完成后在 <em>.vimrc</em> 中进行必要的配置：<br>　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">\"---------NERDTree Configruation-----------------------------------</span></div><div class=\"line\"><span class=\"keyword\">let</span> NERDTreeShowBookmarks=<span class=\"number\">1</span> <span class=\"comment\">\" 当打开 NERDTree 窗口时，自动显示 Bookmarks</span></div><div class=\"line\"><span class=\"keyword\">let</span> NERDTreeWinPos=<span class=\"string\">'left'</span> <span class=\"comment\">\"目录树在左边显示</span></div><div class=\"line\"><span class=\"keyword\">let</span> NERDTreeWinSize=<span class=\"number\">30</span> <span class=\"comment\">\"目录树的窗口宽度</span></div><div class=\"line\"><span class=\"comment\">\"开启和关闭快捷键为F2 或者 直接输入命令:NERDTree</span></div><div class=\"line\"><span class=\"keyword\">map</span> <span class=\"symbol\">&lt;F2&gt;</span> :NERDTreeToggle<span class=\"symbol\">&lt;CR&gt;</span></div></pre></td></tr></table></figure></p>\n<p>效果：<br><img src=\"/2017/05/18/vim/tree.jpg\" alt=\"\"></p>\n<h1 id=\"状态栏\"><a href=\"#状态栏\" class=\"headerlink\" title=\"状态栏\"></a>状态栏</h1><p><a href=\"https://github.com/Lokaltog/vim-powerline\" target=\"_blank\" rel=\"external\">Vim-Powerline</a> <em>vim</em> 状态栏的显示，可以显示文件名、行列数、编码方式等。<br>安装：<br>　　<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Plugin</span> <span class=\"string\">'Lokaltog/vim-powerline'</span></div></pre></td></tr></table></figure></p>\n<p>现在新的仓库已迁移到 <a href=\"https://github.com/powerline/powerline\" target=\"_blank\" rel=\"external\">powerline</a>。<br>效果：<br><img src=\"/2017/05/18/vim/powerline.jpg\" alt=\"\"></p>\n<h1 id=\"括号自动补全\"><a href=\"#括号自动补全\" class=\"headerlink\" title=\"括号自动补全\"></a>括号自动补全</h1><p><a href=\"https://github.com/jiangmiao/auto-pairs\" target=\"_blank\" rel=\"external\">auto-pair</a> 插件可以自动补全代码中的括号。安装：<br>　　<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Plugin</span> <span class=\"string\">'jiangmiao/auto-pairs'</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"代码自动补全\"><a href=\"#代码自动补全\" class=\"headerlink\" title=\"代码自动补全\"></a>代码自动补全</h1><p>代码自动补全是各种IDE的必备功能，这里强烈推荐<a href=\"https://github.com/Valloric/YouCompleteMe\" target=\"_blank\" rel=\"external\">YouCompleteMe</a>。它基于 <a href=\"https://zh.wikipedia.org/wiki/Clang\" target=\"_blank\" rel=\"external\">clang</a> 能够为 <em>C/C++</em> 代码提供代码提示，也支持 <em>python C#</em>。<a href=\"https://github.com/Valloric/YouCompleteMe\" target=\"_blank\" rel=\"external\">YouCompleteMe</a> 的安装正如传说中一样，非常麻烦，但使用起来非常爽。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>源码下载：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> clone --recursive https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/Valloric/</span>YouCompleteMe.git ~<span class=\"regexp\">/.vim/</span>bundle<span class=\"regexp\">/YouCompleteMe</span></div></pre></td></tr></table></figure></p>\n<p>安装 <a href=\"https://clang.llvm.org/get_started.html\" target=\"_blank\" rel=\"external\">clang</a>：<br>　　<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install clang</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/Valloric/YouCompleteMe\" target=\"_blank\" rel=\"external\">YouCompleteMe</a> 要求 <a href=\"https://clang.llvm.org/get_started.html\" target=\"_blank\" rel=\"external\">clang</a> 最低版本为 3.9，如果不是可以在 <a href=\"http://releases.llvm.org/download.html\" target=\"_blank\" rel=\"external\">这里</a> 下载。如果 <em>Ubuntu</em> 为32bits则需要下载源码手动编译。<br>安装 <em>python-dev</em>:<br>　　<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-<span class=\"built_in\">get</span> install python-<span class=\"built_in\">dev</span> python3-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure></p>\n<p>安装 <em>Cmake</em>:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install cmake</span></div></pre></td></tr></table></figure></p>\n<p>源码编译：<br>　　<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$<span class=\"keyword\">cd</span> ~<span class=\"string\">/.vim/bundle/YouCompleteMe</span></div><div class=\"line\">$<span class=\"string\">./install.py</span> <span class=\"params\">--clang-completer</span> <span class=\"params\">--system-libclang</span></div></pre></td></tr></table></figure></p>\n<p>–system-libclang是指使用系统的<em>libclang</em>。新版 <em>YouCompleteMe</em> 编译时不再需要 <em>make ycm_support_libs</em>。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>拷贝系统配置到用户目录下：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cp</span> ~<span class=\"regexp\">/.vim/</span>bundle<span class=\"regexp\">/YouCompleteMe/</span>third_party<span class=\"regexp\">/ycmd/</span>cpp<span class=\"regexp\">/ycm/</span>.ycm_extra_conf.py  ~<span class=\"regexp\">/</span></div></pre></td></tr></table></figure></p>\n<p><em>.vimrc</em>中的配置：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">\"----------YouCompleteMe configuration---</span></div><div class=\"line\"><span class=\"keyword\">set</span> runtimepath+=~/.<span class=\"keyword\">vim</span>/bundle/YouCompleteMe <span class=\"comment\">\"使用插件</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_global_ycm_extra_conf</span> = <span class=\"string\">'~/.ycm_extra_conf.py'</span> <span class=\"comment\">\"指定全局配置文件路径</span></div><div class=\"line\"><span class=\"keyword\">set</span> completeopt=longest,<span class=\"keyword\">menu</span>    <span class=\"comment\">\"让Vim的补全菜单行为与一般IDE一致</span></div><div class=\"line\"><span class=\"keyword\">autocmd</span> InsertLeave * <span class=\"keyword\">if</span> <span class=\"built_in\">pumvisible</span>() == <span class=\"number\">0</span>|<span class=\"keyword\">pclose</span>|<span class=\"keyword\">endif</span> <span class=\"comment\">\"离开插入模式后自动关闭预览窗口</span></div><div class=\"line\"><span class=\"comment\">\"回车即选中当前项</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;CR&gt;</span>       <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;C-y&gt;\"</span> : <span class=\"string\">\"\\&lt;CR&gt;\"</span></div><div class=\"line\"><span class=\"comment\">\"上下左右键的行为</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;Down&gt;</span>     <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;C-n&gt;\"</span> : <span class=\"string\">\"\\&lt;Down&gt;\"</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;Up&gt;</span>       <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;C-p&gt;\"</span> : <span class=\"string\">\"\\&lt;Up&gt;\"</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;PageDown&gt;</span> <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;PageDown&gt;\\&lt;C-p&gt;\\&lt;C-n&gt;\"</span>:</div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;PageUp&gt;</span>   <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;PageUp&gt;\\&lt;C-p&gt;\\&lt;C-n&gt;\"</span> : <span class=\"string\">\"\\&lt;PageUp&gt;\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_key_list_select_completion</span> = [<span class=\"string\">'&lt;Down&gt;'</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_key_list_previous_completion</span> = [<span class=\"string\">'&lt;Up&gt;'</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_confirm_extra_conf</span>=<span class=\"number\">0</span> <span class=\"comment\">\"关闭加载.ycm_extra_conf.py提示</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_collect_identifiers_from_tags_files</span>=<span class=\"number\">1</span> <span class=\"comment\">\" 开启 YCM 基于标签引擎</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_min_num_of_chars_for_completion</span>=<span class=\"number\">2</span> <span class=\"comment\">\" 从第2个键入字符就开始罗列匹配项</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_cache_omnifunc</span>=<span class=\"number\">0</span>  <span class=\"comment\">\" 禁止缓存匹配项,每次都重新生成匹配项</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_seed_identifiers_with_syntax</span>=<span class=\"number\">1</span>    <span class=\"comment\">\" 语法关键字补全</span></div><div class=\"line\"><span class=\"keyword\">nnoremap</span> <span class=\"symbol\">&lt;F5&gt;</span> :YcmForceCompileAndDiagnostics<span class=\"symbol\">&lt;CR&gt;</span><span class=\"comment\">\"force recomile with syntastic</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;leader&gt;</span><span class=\"symbol\">&lt;leader&gt;</span> <span class=\"symbol\">&lt;C-x&gt;</span><span class=\"symbol\">&lt;C-o&gt;</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_complete_in_comments</span> = <span class=\"number\">1</span> <span class=\"comment\">\"在注释输入中也能补全</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_complete_in_strings</span> = <span class=\"number\">1</span> <span class=\"comment\">\"在字符串输入中也能补全</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_collect_identifiers_from_comments_and_strings</span> = <span class=\"number\">1</span> <span class=\"comment\">\"注释和字符串中的文字也会被收入补全</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:clang_user_options</span>=<span class=\"string\">'|| exit 0'</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_goto_buffer_command</span> = <span class=\"string\">'horizontal-split'</span> <span class=\"comment\">\"跳转到定义处，分屏打开</span></div><div class=\"line\"><span class=\"keyword\">nnoremap</span> <span class=\"symbol\">&lt;leader&gt;</span>jd :YcmCompleter GoToDefinitionElseDeclaration<span class=\"symbol\">&lt;CR&gt;</span> <span class=\"comment\">\" 跳转到定义处</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_error_symbol</span> = <span class=\"string\">'&gt;&gt;'</span> <span class=\"comment\">\"错误提示符</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_warning_symbol</span> = <span class=\"string\">'&gt;*'</span> <span class=\"comment\">\"警告提示符</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"32位系统安装\"><a href=\"#32位系统安装\" class=\"headerlink\" title=\"32位系统安装\"></a>32位系统安装</h2><p>由于我使用的是ubuntu14.04 32bit系统，所以有很多软件需要手动编译，在这里将遇到的问题悉数总结一下，有和我同样配置的小伙伴可以参考。32位系统没有合适的 <em>clang</em> 和 <em>vim</em>发行包，需要手动编译安装。</p>\n<h3 id=\"Cmake-安装\"><a href=\"#Cmake-安装\" class=\"headerlink\" title=\"Cmake 安装\"></a>Cmake 安装</h3><p>使用sudo apt-get install cmake 默认安装的 <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"external\">Cmake</a> 版本为2.8.12.2。当使用 <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"external\">Cmake</a> 编译LLVM时提示 <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"external\">Cmake</a> 版本太低，要求至少为3.4.3以上 因此需要升级<a href=\"https://cmake.org/\" target=\"_blank\" rel=\"external\">Cmake</a>。<br>下载源码：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> https:<span class=\"regexp\">//</span>cmake.org<span class=\"regexp\">/files/</span>v3.<span class=\"number\">4</span><span class=\"regexp\">/cmake-3.4.3.tar.gz</span></div></pre></td></tr></table></figure></p>\n<p>编译安装：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">./configure</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo make install</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"Clang-编译安装\"><a href=\"#Clang-编译安装\" class=\"headerlink\" title=\"Clang 编译安装\"></a>Clang 编译安装</h3><p>下载LLVM源代码并放到指定目录:<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"comment\">//llvm.org/releases/3.9.0/llvm-3.9.0.src.tar.xz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> xf llvm-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\"><span class=\"variable\">$mv</span> llvm-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span>  llvm</div></pre></td></tr></table></figure></p>\n<p>下载clang的源码并放到指定目录：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> llvm/tools</div><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"comment\">//llvm.org/releases/3.9.0/cfe-3.9.0.src.tar.xz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> xf cfe-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\"><span class=\"variable\">$mv</span> cfe-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span> clang</div></pre></td></tr></table></figure></p>\n<p>下载clang-tools-extra源码并放到指定目录：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> llvm/tools/clang/tools</div><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"comment\">//llvm.org/releases/3.9.0/clang-tools-extra-3.9.0.src.tar.xz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> xf clang-tools-extra-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\"><span class=\"variable\">$mv</span> clang-tools-extra-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span>  extra</div></pre></td></tr></table></figure></p>\n<p>下载compiler-rt源码并放到指定目录：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> llvm/projects</div><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"comment\">//llvm.org/releases/3.9.0/compiler-rt-3.9.0.src.tar.xz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> xf compiler-rt-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\"><span class=\"variable\">$mv</span> compiler-rt-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span> compiler-rt</div></pre></td></tr></table></figure></p>\n<p>配置参考 <a href=\"http://llvm.org/docs/GettingStarted.html#local-llvm-configuration\" target=\"_blank\" rel=\"external\">llvm官网</a>。<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cmake</span> –G “Unix Makefiles” <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/software/</span>llvm –DCMAKE_BUILD_TYPE=RELEASE –DLLVM_TARGETS_TO_BUILD=X86 –DLLVM_OPTIMIZED_TABLEGEN=ON –DCMAKE_INSTALL_PREFIX=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/llvm</span></div></pre></td></tr></table></figure></p>\n<p>编译参考<a href=\"http://llvm.org/docs/CMake.html\" target=\"_blank\" rel=\"external\">llvm-cmake</a>：<br>3.7.0以后，不允许在源码树中进行构建，我们可以在llvm源码目录同级目录中创建一个目录build，然后使用绝对路径进行构建。<br>退出llvm目录，在llvm同级目录下建立build目录，进入到build目录</p>\n<p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ../..</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">mkdir build</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> build</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake --build . //后面的 . 不能少,意思是当前目录</span></div></pre></td></tr></table></figure></p>\n<p>安装：<br>　　<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">$sudo</span> <span class=\"comment\">cmake</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">build</span> <span class=\"string\">.</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">target</span> <span class=\"comment\">install</span></div></pre></td></tr></table></figure></p>\n<p>也可以在安装时改变安装路径：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cmake</span> –DCMAKE_INSTALL_PREFIX=<span class=\"regexp\">/tmp/</span>llvm –P cmake_install.cmake</div></pre></td></tr></table></figure></p>\n<p>安装后看系统是否能找到，如果不能需要手动添加到环境变量。</p>\n<h3 id=\"vim升级\"><a href=\"#vim升级\" class=\"headerlink\" title=\"vim升级\"></a>vim升级</h3><p>如果不升级 <em>Vim</em>,当调用 <em>YouCompleteMe</em> 时系统会提示错误：<br>　　<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">YouCompleteMe</span> <span class=\"selector-tag\">unavailable</span>: <span class=\"selector-tag\">requires</span> <span class=\"selector-tag\">Vim</span> 7<span class=\"selector-class\">.4</span><span class=\"selector-class\">.143</span>+</div></pre></td></tr></table></figure></p>\n<p>因此需要升级 <em>Vim</em>。先卸载原有版本：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span>-<span class=\"keyword\">runtime</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span> -tiny</div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span>-common</div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span>-doc</div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span>-scripts</div></pre></td></tr></table></figure></p>\n<p>首先安装一些依赖项：<br>　　<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install libncurses5-<span class=\"built_in\">dev</span> libgnome2-<span class=\"built_in\">dev</span> libgnomeui-<span class=\"built_in\">dev</span> libgtk2<span class=\"number\">.0</span>-<span class=\"built_in\">dev</span> libatk1<span class=\"number\">.0</span>-<span class=\"built_in\">dev</span> libbonoboui2-<span class=\"built_in\">dev</span> libcairo2-<span class=\"built_in\">dev</span> libx11-<span class=\"built_in\">dev</span> libxpm-<span class=\"built_in\">dev</span> libxt-<span class=\"built_in\">dev</span> python-<span class=\"built_in\">dev</span> python3-<span class=\"built_in\">dev</span> ruby-<span class=\"built_in\">dev</span> lua5<span class=\"number\">.1</span> lua5<span class=\"number\">.1</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure></p>\n<p><em>–enable-pythoninterp</em> 和 <em>–enable-python3interp</em> 是 <em>vim</em> 对 <em>python</em> 版本的支持，安装 <em>YouCompleteMe</em> 必须要有这两个配置。<br>下载 <a href=\"http://mirror.metrocast.net/vim/unix/vim-8.0.tar.bz2\" target=\"_blank\" rel=\"external\">vim-8.0</a>:<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"regexp\">//mi</span>rror.metrocast.net<span class=\"regexp\">/vim/u</span>nix<span class=\"regexp\">/vim-8.0.tar.bz2</span></div></pre></td></tr></table></figure></p>\n<p>解压后配置：<br>　　<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">./configure</span> <span class=\"params\">--with-features=huge</span> <span class=\"params\">--enable-multibyte</span> <span class=\"params\">--enable-rubyinterp</span> <span class=\"params\">--enable-pythoninterp</span> <span class=\"params\">--with-python-config-dir=/usr/lib/python2</span>.7/config-i386-linux-gnu  <span class=\"params\">--enable-python3interp</span> <span class=\"params\">--with-python3-config-dir=/usr/lib/python3</span>.4/config-3.4m-i386-linux-gnu <span class=\"params\">--enable-perlinterp</span> <span class=\"params\">--enable-luainterp</span> <span class=\"params\">--enable-gui=gtk2</span> <span class=\"params\">--enable-cscope</span> <span class=\"params\">--prefix=/usr</span></div></pre></td></tr></table></figure></p>\n<p>注意上面的 <em>–with-python3-config-dir</em> 一定要指定 <em>python3</em> 的完全路径，否则系统找不到。<br>编译安装：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$make</span> VIMRUNTIMEDIR=<span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/vim/</span>vim80</div><div class=\"line\"><span class=\"variable\">$sudo</span> make install</div></pre></td></tr></table></figure></p>\n<p>安装完后一定要测试一下依赖项是否完整，特别是对 <em>python3</em> 的依赖：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$<span class=\"keyword\">vim</span> --<span class=\"keyword\">version</span> | <span class=\"keyword\">grep</span> <span class=\"keyword\">python</span></div></pre></td></tr></table></figure></p>\n<p>如果输出包含则表示安装完整：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">+cryptv          +linebreak       +<span class=\"keyword\">python</span>/dyn      +vreplace</div><div class=\"line\">+<span class=\"keyword\">cscope</span>          +<span class=\"built_in\">lispindent</span>      +<span class=\"keyword\">python3</span>/dyn     +wildignore</div></pre></td></tr></table></figure></p>\n<p>再回到以上YouCompleteMe的安装即可。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p><em>Vim</em> 还有很多有用的插件，需要慢慢研究，目前先装这些，对于常用的补全、跳转、快速查看目录等都可以实现，基本满足需求。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><em>linux</em> 下有很多好用的 IDE，比如常见的 <a href=\"https://eclipse.org/\" target=\"_blank\" rel=\"external\">Eclipse</a>、<a href=\"http://bluefish.openoffice.nl/index.html\" target=\"_blank\" rel=\"external\">Bluefish</a>、<a href=\"https://netbeans.org/\" target=\"_blank\" rel=\"external\">NetBeans</a> 等等，功能很多，有些功能我们不一定用得上,天天面对 <em>terminal</em> 敲命令的我们天生不喜欢鼠标。<em>linux</em> 下的文本编辑器使用最多的还是 <a href=\"http://www.vim.org/\" target=\"_blank\" rel=\"external\">Vim</a> 。可不可以将 <a href=\"http://www.vim.org/\" target=\"_blank\" rel=\"external\">Vim</a> 打造成一个好用的 IDE 来替代或者部分替代这些高大上的 IDE 呢? -程序猿天生喜欢折腾。话不多说先上图：<img src=\"/2017/05/18/vim/ycm.gif\" alt=\"\"><br></p>","more":"<p></p>\n<h1 id=\"vim-插件管理\"><a href=\"#vim-插件管理\" class=\"headerlink\" title=\"vim 插件管理\"></a>vim 插件管理</h1><p>首先安装 <a href=\"https://github.com/vim/vim.git\" target=\"_blank\" rel=\"external\">Vim</a>, 确保版本在 7.4 以上。可以源码安装 <a href=\"https://github.com/vim/vim.git\" target=\"_blank\" rel=\"external\">Vim</a> 也可以自动安装：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install vim</span></div></pre></td></tr></table></figure></p>\n<p>由于发行版的不同，这种方式安装的 <a href=\"https://github.com/vim/vim.git\" target=\"_blank\" rel=\"external\">Vim</a> 版本不一定是最新的，如果版本低于 7.4 请采用源码安装。 <a href=\"https://github.com/vim/vim.git\" target=\"_blank\" rel=\"external\">Vim</a> 的插件管理一般是通过 <a href=\"https://github.com/VundleVim/Vundle.vim\" target=\"_blank\" rel=\"external\">Vundle</a> 来实现。 安装 <a href=\"https://github.com/VundleVim/Vundle.vim\" target=\"_blank\" rel=\"external\">Vundle</a>:<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/VundleVim/Vundle.<span class=\"keyword\">vim</span>.git ~/.<span class=\"keyword\">vim</span>/bundle/Vundle.<span class=\"keyword\">vim</span></div></pre></td></tr></table></figure></p>\n<p>完成后修改用户目录下的 <em>.vimrc</em> 文件，添加以下项：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">\"-----------Vundle configuration--------------------</span></div><div class=\"line\"><span class=\"keyword\">set</span> nocompatible <span class=\"comment\">\"去掉vi一致性</span></div><div class=\"line\"><span class=\"keyword\">filetype</span> off  </div><div class=\"line\"><span class=\"comment\">\"包含vundle路径</span></div><div class=\"line\"><span class=\"keyword\">set</span> rtp+=~/.<span class=\"keyword\">vim</span>/bundle/Vundle.<span class=\"keyword\">vim</span></div><div class=\"line\"><span class=\"keyword\">call</span> vundle#begin()</div><div class=\"line\">Plugin <span class=\"string\">'VundleVim/Vundle.vim'</span></div><div class=\"line\">Plugin <span class=\"string\">'xxx/xxx'</span> <span class=\"comment\">\"新插件</span></div><div class=\"line\"><span class=\"keyword\">call</span> vundle#end()</div><div class=\"line\"><span class=\"keyword\">filetype</span> plugin <span class=\"built_in\">indent</span> <span class=\"keyword\">on</span></div></pre></td></tr></table></figure></p>\n<p>当需要安装新的插件时，将插件的仓库名按格式填入到<em>.vimrc</em> 文件：<br>　　<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Plugin</span> <span class=\"string\">'xxx/xxx'</span></div></pre></td></tr></table></figure></p>\n<p>插件的安装格式为：<br>　　<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'repository'</span> <span class=\"comment\">//在Github vim-scripts 用户下的仓库,只需要写出仓库名称</span></div><div class=\"line\">Plugin <span class=\"string\">'username/repository'</span> <span class=\"comment\">//在Github其他用户下的仓库, 需要写出”用户名/仓库名”</span></div><div class=\"line\">Plugin <span class=\"string\">'git://github.com/something.git'</span> <span class=\"comment\">//不在Github上的插件，需要写出git全路径</span></div></pre></td></tr></table></figure></p>\n<p>启动 <em>Vim</em>,运行命令安装插件：</p>\n<p>　　<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">：PluginInstall</div></pre></td></tr></table></figure></p>\n<p>卸载插件时先在 <em>.vimrc</em> 中删除掉不用的插件行然后运行清除命令：<br>　　<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">：PluginClean</div></pre></td></tr></table></figure></p>\n<p>参考 <a href=\"https://github.com/VundleVim/Vundle.vim\" target=\"_blank\" rel=\"external\">Vundle</a> 和 <a href=\"https://github.com/vim-scripts\" target=\"_blank\" rel=\"external\">vim-scripts</a></p>\n<h1 id=\"项目树\"><a href=\"#项目树\" class=\"headerlink\" title=\"项目树\"></a>项目树</h1><p><a href=\"https://github.com/scrooloose/nerdtree\" target=\"_blank\" rel=\"external\">NerdTree</a> 是一个树形目录插件，方便查看项目中的各个文件。<br>安装：<br>　　<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Plugin</span> <span class=\"string\">'scrooloose/nerdtree'</span></div></pre></td></tr></table></figure></p>\n<p>完成后在 <em>.vimrc</em> 中进行必要的配置：<br>　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">\"---------NERDTree Configruation-----------------------------------</span></div><div class=\"line\"><span class=\"keyword\">let</span> NERDTreeShowBookmarks=<span class=\"number\">1</span> <span class=\"comment\">\" 当打开 NERDTree 窗口时，自动显示 Bookmarks</span></div><div class=\"line\"><span class=\"keyword\">let</span> NERDTreeWinPos=<span class=\"string\">'left'</span> <span class=\"comment\">\"目录树在左边显示</span></div><div class=\"line\"><span class=\"keyword\">let</span> NERDTreeWinSize=<span class=\"number\">30</span> <span class=\"comment\">\"目录树的窗口宽度</span></div><div class=\"line\"><span class=\"comment\">\"开启和关闭快捷键为F2 或者 直接输入命令:NERDTree</span></div><div class=\"line\"><span class=\"keyword\">map</span> <span class=\"symbol\">&lt;F2&gt;</span> :NERDTreeToggle<span class=\"symbol\">&lt;CR&gt;</span></div></pre></td></tr></table></figure></p>\n<p>效果：<br><img src=\"/2017/05/18/vim/tree.jpg\" alt=\"\"></p>\n<h1 id=\"状态栏\"><a href=\"#状态栏\" class=\"headerlink\" title=\"状态栏\"></a>状态栏</h1><p><a href=\"https://github.com/Lokaltog/vim-powerline\" target=\"_blank\" rel=\"external\">Vim-Powerline</a> <em>vim</em> 状态栏的显示，可以显示文件名、行列数、编码方式等。<br>安装：<br>　　<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Plugin</span> <span class=\"string\">'Lokaltog/vim-powerline'</span></div></pre></td></tr></table></figure></p>\n<p>现在新的仓库已迁移到 <a href=\"https://github.com/powerline/powerline\" target=\"_blank\" rel=\"external\">powerline</a>。<br>效果：<br><img src=\"/2017/05/18/vim/powerline.jpg\" alt=\"\"></p>\n<h1 id=\"括号自动补全\"><a href=\"#括号自动补全\" class=\"headerlink\" title=\"括号自动补全\"></a>括号自动补全</h1><p><a href=\"https://github.com/jiangmiao/auto-pairs\" target=\"_blank\" rel=\"external\">auto-pair</a> 插件可以自动补全代码中的括号。安装：<br>　　<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Plugin</span> <span class=\"string\">'jiangmiao/auto-pairs'</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"代码自动补全\"><a href=\"#代码自动补全\" class=\"headerlink\" title=\"代码自动补全\"></a>代码自动补全</h1><p>代码自动补全是各种IDE的必备功能，这里强烈推荐<a href=\"https://github.com/Valloric/YouCompleteMe\" target=\"_blank\" rel=\"external\">YouCompleteMe</a>。它基于 <a href=\"https://zh.wikipedia.org/wiki/Clang\" target=\"_blank\" rel=\"external\">clang</a> 能够为 <em>C/C++</em> 代码提供代码提示，也支持 <em>python C#</em>。<a href=\"https://github.com/Valloric/YouCompleteMe\" target=\"_blank\" rel=\"external\">YouCompleteMe</a> 的安装正如传说中一样，非常麻烦，但使用起来非常爽。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>源码下载：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> clone --recursive https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/Valloric/</span>YouCompleteMe.git ~<span class=\"regexp\">/.vim/</span>bundle<span class=\"regexp\">/YouCompleteMe</span></div></pre></td></tr></table></figure></p>\n<p>安装 <a href=\"https://clang.llvm.org/get_started.html\" target=\"_blank\" rel=\"external\">clang</a>：<br>　　<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install clang</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/Valloric/YouCompleteMe\" target=\"_blank\" rel=\"external\">YouCompleteMe</a> 要求 <a href=\"https://clang.llvm.org/get_started.html\" target=\"_blank\" rel=\"external\">clang</a> 最低版本为 3.9，如果不是可以在 <a href=\"http://releases.llvm.org/download.html\" target=\"_blank\" rel=\"external\">这里</a> 下载。如果 <em>Ubuntu</em> 为32bits则需要下载源码手动编译。<br>安装 <em>python-dev</em>:<br>　　<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-<span class=\"built_in\">get</span> install python-<span class=\"built_in\">dev</span> python3-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure></p>\n<p>安装 <em>Cmake</em>:<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$sudo</span> apt-get install cmake</span></div></pre></td></tr></table></figure></p>\n<p>源码编译：<br>　　<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$<span class=\"keyword\">cd</span> ~<span class=\"string\">/.vim/bundle/YouCompleteMe</span></div><div class=\"line\">$<span class=\"string\">./install.py</span> <span class=\"params\">--clang-completer</span> <span class=\"params\">--system-libclang</span></div></pre></td></tr></table></figure></p>\n<p>–system-libclang是指使用系统的<em>libclang</em>。新版 <em>YouCompleteMe</em> 编译时不再需要 <em>make ycm_support_libs</em>。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>拷贝系统配置到用户目录下：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cp</span> ~<span class=\"regexp\">/.vim/</span>bundle<span class=\"regexp\">/YouCompleteMe/</span>third_party<span class=\"regexp\">/ycmd/</span>cpp<span class=\"regexp\">/ycm/</span>.ycm_extra_conf.py  ~<span class=\"regexp\">/</span></div></pre></td></tr></table></figure></p>\n<p><em>.vimrc</em>中的配置：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">\"----------YouCompleteMe configuration---</span></div><div class=\"line\"><span class=\"keyword\">set</span> runtimepath+=~/.<span class=\"keyword\">vim</span>/bundle/YouCompleteMe <span class=\"comment\">\"使用插件</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_global_ycm_extra_conf</span> = <span class=\"string\">'~/.ycm_extra_conf.py'</span> <span class=\"comment\">\"指定全局配置文件路径</span></div><div class=\"line\"><span class=\"keyword\">set</span> completeopt=longest,<span class=\"keyword\">menu</span>    <span class=\"comment\">\"让Vim的补全菜单行为与一般IDE一致</span></div><div class=\"line\"><span class=\"keyword\">autocmd</span> InsertLeave * <span class=\"keyword\">if</span> <span class=\"built_in\">pumvisible</span>() == <span class=\"number\">0</span>|<span class=\"keyword\">pclose</span>|<span class=\"keyword\">endif</span> <span class=\"comment\">\"离开插入模式后自动关闭预览窗口</span></div><div class=\"line\"><span class=\"comment\">\"回车即选中当前项</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;CR&gt;</span>       <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;C-y&gt;\"</span> : <span class=\"string\">\"\\&lt;CR&gt;\"</span></div><div class=\"line\"><span class=\"comment\">\"上下左右键的行为</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;Down&gt;</span>     <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;C-n&gt;\"</span> : <span class=\"string\">\"\\&lt;Down&gt;\"</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;Up&gt;</span>       <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;C-p&gt;\"</span> : <span class=\"string\">\"\\&lt;Up&gt;\"</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;PageDown&gt;</span> <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;PageDown&gt;\\&lt;C-p&gt;\\&lt;C-n&gt;\"</span>:</div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;expr&gt;</span> <span class=\"symbol\">&lt;PageUp&gt;</span>   <span class=\"built_in\">pumvisible</span>() ? <span class=\"string\">\"\\&lt;PageUp&gt;\\&lt;C-p&gt;\\&lt;C-n&gt;\"</span> : <span class=\"string\">\"\\&lt;PageUp&gt;\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_key_list_select_completion</span> = [<span class=\"string\">'&lt;Down&gt;'</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_key_list_previous_completion</span> = [<span class=\"string\">'&lt;Up&gt;'</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_confirm_extra_conf</span>=<span class=\"number\">0</span> <span class=\"comment\">\"关闭加载.ycm_extra_conf.py提示</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_collect_identifiers_from_tags_files</span>=<span class=\"number\">1</span> <span class=\"comment\">\" 开启 YCM 基于标签引擎</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_min_num_of_chars_for_completion</span>=<span class=\"number\">2</span> <span class=\"comment\">\" 从第2个键入字符就开始罗列匹配项</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_cache_omnifunc</span>=<span class=\"number\">0</span>  <span class=\"comment\">\" 禁止缓存匹配项,每次都重新生成匹配项</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_seed_identifiers_with_syntax</span>=<span class=\"number\">1</span>    <span class=\"comment\">\" 语法关键字补全</span></div><div class=\"line\"><span class=\"keyword\">nnoremap</span> <span class=\"symbol\">&lt;F5&gt;</span> :YcmForceCompileAndDiagnostics<span class=\"symbol\">&lt;CR&gt;</span><span class=\"comment\">\"force recomile with syntastic</span></div><div class=\"line\"><span class=\"keyword\">inoremap</span> <span class=\"symbol\">&lt;leader&gt;</span><span class=\"symbol\">&lt;leader&gt;</span> <span class=\"symbol\">&lt;C-x&gt;</span><span class=\"symbol\">&lt;C-o&gt;</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_complete_in_comments</span> = <span class=\"number\">1</span> <span class=\"comment\">\"在注释输入中也能补全</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_complete_in_strings</span> = <span class=\"number\">1</span> <span class=\"comment\">\"在字符串输入中也能补全</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_collect_identifiers_from_comments_and_strings</span> = <span class=\"number\">1</span> <span class=\"comment\">\"注释和字符串中的文字也会被收入补全</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:clang_user_options</span>=<span class=\"string\">'|| exit 0'</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_goto_buffer_command</span> = <span class=\"string\">'horizontal-split'</span> <span class=\"comment\">\"跳转到定义处，分屏打开</span></div><div class=\"line\"><span class=\"keyword\">nnoremap</span> <span class=\"symbol\">&lt;leader&gt;</span>jd :YcmCompleter GoToDefinitionElseDeclaration<span class=\"symbol\">&lt;CR&gt;</span> <span class=\"comment\">\" 跳转到定义处</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_error_symbol</span> = <span class=\"string\">'&gt;&gt;'</span> <span class=\"comment\">\"错误提示符</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ycm_warning_symbol</span> = <span class=\"string\">'&gt;*'</span> <span class=\"comment\">\"警告提示符</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"32位系统安装\"><a href=\"#32位系统安装\" class=\"headerlink\" title=\"32位系统安装\"></a>32位系统安装</h2><p>由于我使用的是ubuntu14.04 32bit系统，所以有很多软件需要手动编译，在这里将遇到的问题悉数总结一下，有和我同样配置的小伙伴可以参考。32位系统没有合适的 <em>clang</em> 和 <em>vim</em>发行包，需要手动编译安装。</p>\n<h3 id=\"Cmake-安装\"><a href=\"#Cmake-安装\" class=\"headerlink\" title=\"Cmake 安装\"></a>Cmake 安装</h3><p>使用sudo apt-get install cmake 默认安装的 <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"external\">Cmake</a> 版本为2.8.12.2。当使用 <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"external\">Cmake</a> 编译LLVM时提示 <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"external\">Cmake</a> 版本太低，要求至少为3.4.3以上 因此需要升级<a href=\"https://cmake.org/\" target=\"_blank\" rel=\"external\">Cmake</a>。<br>下载源码：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> https:<span class=\"regexp\">//</span>cmake.org<span class=\"regexp\">/files/</span>v3.<span class=\"number\">4</span><span class=\"regexp\">/cmake-3.4.3.tar.gz</span></div></pre></td></tr></table></figure></p>\n<p>编译安装：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">./configure</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">make</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo make install</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"Clang-编译安装\"><a href=\"#Clang-编译安装\" class=\"headerlink\" title=\"Clang 编译安装\"></a>Clang 编译安装</h3><p>下载LLVM源代码并放到指定目录:<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"comment\">//llvm.org/releases/3.9.0/llvm-3.9.0.src.tar.xz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> xf llvm-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\"><span class=\"variable\">$mv</span> llvm-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span>  llvm</div></pre></td></tr></table></figure></p>\n<p>下载clang的源码并放到指定目录：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> llvm/tools</div><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"comment\">//llvm.org/releases/3.9.0/cfe-3.9.0.src.tar.xz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> xf cfe-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\"><span class=\"variable\">$mv</span> cfe-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span> clang</div></pre></td></tr></table></figure></p>\n<p>下载clang-tools-extra源码并放到指定目录：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> llvm/tools/clang/tools</div><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"comment\">//llvm.org/releases/3.9.0/clang-tools-extra-3.9.0.src.tar.xz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> xf clang-tools-extra-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\"><span class=\"variable\">$mv</span> clang-tools-extra-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span>  extra</div></pre></td></tr></table></figure></p>\n<p>下载compiler-rt源码并放到指定目录：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> llvm/projects</div><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"comment\">//llvm.org/releases/3.9.0/compiler-rt-3.9.0.src.tar.xz</span></div><div class=\"line\"><span class=\"variable\">$tar</span> xf compiler-rt-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\"><span class=\"variable\">$mv</span> compiler-rt-<span class=\"number\">3.9</span>.<span class=\"number\">0</span><span class=\"selector-class\">.src</span> compiler-rt</div></pre></td></tr></table></figure></p>\n<p>配置参考 <a href=\"http://llvm.org/docs/GettingStarted.html#local-llvm-configuration\" target=\"_blank\" rel=\"external\">llvm官网</a>。<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cmake</span> –G “Unix Makefiles” <span class=\"regexp\">/home/</span>steven<span class=\"regexp\">/software/</span>llvm –DCMAKE_BUILD_TYPE=RELEASE –DLLVM_TARGETS_TO_BUILD=X86 –DLLVM_OPTIMIZED_TABLEGEN=ON –DCMAKE_INSTALL_PREFIX=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/llvm</span></div></pre></td></tr></table></figure></p>\n<p>编译参考<a href=\"http://llvm.org/docs/CMake.html\" target=\"_blank\" rel=\"external\">llvm-cmake</a>：<br>3.7.0以后，不允许在源码树中进行构建，我们可以在llvm源码目录同级目录中创建一个目录build，然后使用绝对路径进行构建。<br>退出llvm目录，在llvm同级目录下建立build目录，进入到build目录</p>\n<p>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ../..</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">mkdir build</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> build</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">cmake --build . //后面的 . 不能少,意思是当前目录</span></div></pre></td></tr></table></figure></p>\n<p>安装：<br>　　<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">$sudo</span> <span class=\"comment\">cmake</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">build</span> <span class=\"string\">.</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">target</span> <span class=\"comment\">install</span></div></pre></td></tr></table></figure></p>\n<p>也可以在安装时改变安装路径：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cmake</span> –DCMAKE_INSTALL_PREFIX=<span class=\"regexp\">/tmp/</span>llvm –P cmake_install.cmake</div></pre></td></tr></table></figure></p>\n<p>安装后看系统是否能找到，如果不能需要手动添加到环境变量。</p>\n<h3 id=\"vim升级\"><a href=\"#vim升级\" class=\"headerlink\" title=\"vim升级\"></a>vim升级</h3><p>如果不升级 <em>Vim</em>,当调用 <em>YouCompleteMe</em> 时系统会提示错误：<br>　　<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">YouCompleteMe</span> <span class=\"selector-tag\">unavailable</span>: <span class=\"selector-tag\">requires</span> <span class=\"selector-tag\">Vim</span> 7<span class=\"selector-class\">.4</span><span class=\"selector-class\">.143</span>+</div></pre></td></tr></table></figure></p>\n<p>因此需要升级 <em>Vim</em>。先卸载原有版本：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span>-<span class=\"keyword\">runtime</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span> -tiny</div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span>-common</div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span>-doc</div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"built_in\">remove</span> <span class=\"keyword\">vim</span>-scripts</div></pre></td></tr></table></figure></p>\n<p>首先安装一些依赖项：<br>　　<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install libncurses5-<span class=\"built_in\">dev</span> libgnome2-<span class=\"built_in\">dev</span> libgnomeui-<span class=\"built_in\">dev</span> libgtk2<span class=\"number\">.0</span>-<span class=\"built_in\">dev</span> libatk1<span class=\"number\">.0</span>-<span class=\"built_in\">dev</span> libbonoboui2-<span class=\"built_in\">dev</span> libcairo2-<span class=\"built_in\">dev</span> libx11-<span class=\"built_in\">dev</span> libxpm-<span class=\"built_in\">dev</span> libxt-<span class=\"built_in\">dev</span> python-<span class=\"built_in\">dev</span> python3-<span class=\"built_in\">dev</span> ruby-<span class=\"built_in\">dev</span> lua5<span class=\"number\">.1</span> lua5<span class=\"number\">.1</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure></p>\n<p><em>–enable-pythoninterp</em> 和 <em>–enable-python3interp</em> 是 <em>vim</em> 对 <em>python</em> 版本的支持，安装 <em>YouCompleteMe</em> 必须要有这两个配置。<br>下载 <a href=\"http://mirror.metrocast.net/vim/unix/vim-8.0.tar.bz2\" target=\"_blank\" rel=\"external\">vim-8.0</a>:<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> http:<span class=\"regexp\">//mi</span>rror.metrocast.net<span class=\"regexp\">/vim/u</span>nix<span class=\"regexp\">/vim-8.0.tar.bz2</span></div></pre></td></tr></table></figure></p>\n<p>解压后配置：<br>　　<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">./configure</span> <span class=\"params\">--with-features=huge</span> <span class=\"params\">--enable-multibyte</span> <span class=\"params\">--enable-rubyinterp</span> <span class=\"params\">--enable-pythoninterp</span> <span class=\"params\">--with-python-config-dir=/usr/lib/python2</span>.7/config-i386-linux-gnu  <span class=\"params\">--enable-python3interp</span> <span class=\"params\">--with-python3-config-dir=/usr/lib/python3</span>.4/config-3.4m-i386-linux-gnu <span class=\"params\">--enable-perlinterp</span> <span class=\"params\">--enable-luainterp</span> <span class=\"params\">--enable-gui=gtk2</span> <span class=\"params\">--enable-cscope</span> <span class=\"params\">--prefix=/usr</span></div></pre></td></tr></table></figure></p>\n<p>注意上面的 <em>–with-python3-config-dir</em> 一定要指定 <em>python3</em> 的完全路径，否则系统找不到。<br>编译安装：<br>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$make</span> VIMRUNTIMEDIR=<span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/vim/</span>vim80</div><div class=\"line\"><span class=\"variable\">$sudo</span> make install</div></pre></td></tr></table></figure></p>\n<p>安装完后一定要测试一下依赖项是否完整，特别是对 <em>python3</em> 的依赖：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$<span class=\"keyword\">vim</span> --<span class=\"keyword\">version</span> | <span class=\"keyword\">grep</span> <span class=\"keyword\">python</span></div></pre></td></tr></table></figure></p>\n<p>如果输出包含则表示安装完整：<br>　　<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">+cryptv          +linebreak       +<span class=\"keyword\">python</span>/dyn      +vreplace</div><div class=\"line\">+<span class=\"keyword\">cscope</span>          +<span class=\"built_in\">lispindent</span>      +<span class=\"keyword\">python3</span>/dyn     +wildignore</div></pre></td></tr></table></figure></p>\n<p>再回到以上YouCompleteMe的安装即可。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p><em>Vim</em> 还有很多有用的插件，需要慢慢研究，目前先装这些，对于常用的补全、跳转、快速查看目录等都可以实现，基本满足需求。</p>"},{"title":"ROS串口通信","date":"2017-05-17T02:03:49.000Z","comments":1,"_content":"# 前言\n移植 [ROS](http://www.ros.org/) 的目的是控制机器人移动或者控制飞行器按既定轨道飞行，那么如何实现 [ROS](http://www.ros.org/) 与底层的移动控制设备通信呢？底层设备一般都是ARM架构实现，资源有限，不可能跑个ubuntu，当然也可以移植 [ROS](http://www.ros.org/) 的框架，但这个要对底层设备进行 [ROS](http://www.ros.org/) 框架的封装，实现起来麻烦一些。普遍来讲，底层设备一般都具备串口，通过串口与底层设备通讯，也许是一种高效便捷的方法。\n<!--more-->\n# 架构\n在 [ROS](http://www.ros.org/) 平台下，设计一个串口节点，该节点订阅talker控制节点发来的命令主题，将命令通过串口设备发送到移动底座也可以是飞控设备；同时串口节点实时接收移动底座通过串口发送过来的传感器实时数据，并将该数据封装后以 *sensor* 主题的模式进行发布， *listenner* 节点可以实现订阅该主题。这样就实现了 [ROS](http://www.ros.org/) 与移动底座的串口通信过程。![](ros-serial/arch.jpg)\n# 串口节点\n*linux* 下的串口有很多现成的实现例子，比如 [libcssl](https://github.com/mwheels/libcssl) ,当然也可以自己编程实现。对于 [ROS](http://www.ros.org/) 架构的串口也有现成的例子 [serial](http://wiki.ros.org/serial) ,源代码 [serial code](https://github.com/wjwwood/serial.git) 。也有基于 [stm32](https://github.com/spiralray/stm32f1_rosserial) 的 [ROS](http://www.ros.org/) 串口代码框架。也可以参考 [uROSnode](https://github.com/openrobots-dev/uROSnode) 避免重复造轮子，这里使用 [ROS](http://www.ros.org/) 现有的串口源码。\n## 建立工作目录\n　　```\n $mkdir -p ~/catkin_ws/src/mypackage/\n　　```\n## 下载源代码\n　　```\n $cd ~/catkin_ws/src/mypackage/\n $git clone https://github.com/wjwwood/serial.git\n　　```\n## 建立串口节点\n　　在 *mypackage* 目录下建立自己的节点程序包：\n　　```\n $catkin_create_pkg my_serial_node std_msgs rospy roscpp\n　　```\n此时会在 *mypackage/my_serial_node *目录下生成两个文件 *CMakeLists.txt* 和 *package.xml* 以及两个文件夹 *include/* 和 *src/*。修改 *CMakeLists.txt* 的内容：\n　　```\n cmake_minimum_required(VERSION 2.8.3)\n project( my_serial_node )\n \n  find_package(catkin REQUIRED COMPONENTS\n     roscpp\n     serial\n     std_msgs\n   )\n  \n  catkin_package(\n    CATKIN_DEPENDS\n      serial\n      std_msgs\n  )\n \n  include_directories(\n    ${catkin_INCLUDE_DIRS}\n  )\n \n  add_executable( my_serial_node src/my_serial_node.cpp)\n \n  target_link_libraries( my_serial_node\n    ${catkin_LIBRARIES}\n  )\n\n　　```\n修改 *package.xml* 内容添加刚刚下载的 *serial* 依赖：\n　　```\n <?xml version=\"1.0\"?>\n   <package>\n     <name> my_serial_node</name>\n     <version>0.0.0</version>\n     <description>my serial node </description>\n  \n     <license>BSD</license>\n \n    <buildtool_depend>catkin</buildtool_depend>\n    <build_depend>serial</build_depend>\n    <build_depend>std_msgs</build_depend>\n    <run_depend>serial</run_depend>\n    <run_depend>std_msgs</run_depend>\n \n  </package>\n　　```\n在 *src* 目录下建立 *my_serial_node.cpp* 文件：\n　　```\n #include <serial/serial.h>\n #include <std_msgs/String.h>\n #include <std_msgs/Empty.h>\n \n serial::Serial ros_ser;\n //回调函数\n void callback(const std_msgs::String::ConstPtr& msg){\n      ROS_INFO_STREAM(\"Write to serial port\" << msg->data);\n      ros_ser.write(msg->data);\n  }\n \n int main (int argc, char** argv){\n      ros::init(argc, argv, \"my_serial_node\");\n      ros::NodeHandle n;\n      //订阅主题command\n      ros::Subscriber command_sub = n.subscribe(\"command\", 1000, callback);\n      //发布主题sensor\n      ros::Publisher sensor_pub = n.advertise<std_msgs::String>(\"sensor\", 1000);\n \n      try\n      {\n          ros_ser.setPort(\"/dev/ttyUSB0\");\n          ros_ser.setBaudrate(115200);\n          ros_serial::Timeout to = serial::Timeout::simpleTimeout(1000);\n          ros_ser.setTimeout(to);\n          ros_ser.open();\n      }\n      catch (serial::IOException& e)\n      {\n          ROS_ERROR_STREAM(\"Unable to open port \");\n          return -1;\n      }\n \n      if(ros_ser.isOpen()){\n          ROS_INFO_STREAM(\"Serial Port opened\");\n      }else{\n          return -1;\n      }\n \n      ros::Rate loop_rate(10);\n      while(ros::ok()){\n \n          ros::spinOnce();\n \n          if(ros_ser.available()){\n              ROS_INFO_STREAM(\"Reading from serial port\");\n              std_msgs::String serial_data;\n              //获取串口数据\n              serial_data.data = ros_ser.read(ros_ser.available());\n              ROS_INFO_STREAM(\"Read: \" << serial_data.data);\n              //将串口数据发布到主题sensor\n              sensor_pub.publish(serial_data);\n          }\n          loop_rate.sleep();\n \n      }\n  }\n\n　　```\n## 建立talker节点\n同样在 *src* 目录下新建文件 *talker.cpp* ,并在 *CMakeLists.txt* 中添加以下内容：\n　　```\n add_executable(talker src/talker.cpp)\n target_link_libraries(talker ${catkin_LIBRARIES})\n　　```\n*talker.cpp*内容：\n　　```\n#include \"ros/ros.h\"\n#include \"std_msgs/String.h\"\n#include <sstream>\nint main(int argc, char **argv)\n{\n ros::init(argc, argv, \"talker\");\n ros::NodeHandle n;\n //发布主题command\n ros::Publisher command_pub = n.advertise<std_msgs::String>(\"command\", 1000);\n ros::Rate loop_rate(10);\n int count = 0;\n while (ros::ok())\n {\n   std_msgs::String msg;\n   std::stringstream ss_data;\n   ss_data << \"talker publish command \" << count;\n   msg.data = ss_data.str();\n   ROS_INFO(\"%s\", msg.data.c_str());\n   command_pub.publish(msg);\n   ros::spinOnce();\n   loop_rate.sleep();\n   ++count;\n  }\n  return 0;\n}\n　　```\n## 建立listenner节点\n方式同 *talker* 节点。代码如下：\n　　```\n#include \"ros/ros.h\"\n#include \"std_msgs/String.h\"\n//回调函数\nvoid callback(const std_msgs::String::ConstPtr& msg)\n{\n ROS_INFO(\"listener got: [%s]\", msg->data.c_str());\n}\nint main(int argc, char **argv)\n{\n ros::init(argc, argv, \"listener\");\n ros::NodeHandle n;\n //订阅主题\n ros::Subscriber sub = n.subscribe(\"sensor\", 1000, callback);\n ros::spin();\n return 0;\n\n}\n　　```\n# 测试\n回到目录 *catkin_ws* 进行编译：\n　　```\n $cd ~/catkin_ws/\n $catkin_make\n　　```\n测试时将底层设备通过串口与运行 [ROS](http://www.ros.org/) 系统设备的串口连接，并写好底层设备的串口驱动程序。在 [ROS](http://www.ros.org/) 平台上开三个终端运行三个节点：\n　　```\n $roscore //必须先运行\n $rosrun my_serial_node my_serial_node\n $rosrun my_serial_node talker\n $rosrun my_serial_node listenner\n　　```\n\n效果如下：\n![](ros-serial/serial.jpg)\n\n","source":"_posts/ros-serial.md","raw":"---\ntitle: ROS串口通信\ndate: 2017-05-17 10:03:49\ncategories: ROS\ntags: ROS serial\ncomments: true\n---\n# 前言\n移植 [ROS](http://www.ros.org/) 的目的是控制机器人移动或者控制飞行器按既定轨道飞行，那么如何实现 [ROS](http://www.ros.org/) 与底层的移动控制设备通信呢？底层设备一般都是ARM架构实现，资源有限，不可能跑个ubuntu，当然也可以移植 [ROS](http://www.ros.org/) 的框架，但这个要对底层设备进行 [ROS](http://www.ros.org/) 框架的封装，实现起来麻烦一些。普遍来讲，底层设备一般都具备串口，通过串口与底层设备通讯，也许是一种高效便捷的方法。\n<!--more-->\n# 架构\n在 [ROS](http://www.ros.org/) 平台下，设计一个串口节点，该节点订阅talker控制节点发来的命令主题，将命令通过串口设备发送到移动底座也可以是飞控设备；同时串口节点实时接收移动底座通过串口发送过来的传感器实时数据，并将该数据封装后以 *sensor* 主题的模式进行发布， *listenner* 节点可以实现订阅该主题。这样就实现了 [ROS](http://www.ros.org/) 与移动底座的串口通信过程。![](ros-serial/arch.jpg)\n# 串口节点\n*linux* 下的串口有很多现成的实现例子，比如 [libcssl](https://github.com/mwheels/libcssl) ,当然也可以自己编程实现。对于 [ROS](http://www.ros.org/) 架构的串口也有现成的例子 [serial](http://wiki.ros.org/serial) ,源代码 [serial code](https://github.com/wjwwood/serial.git) 。也有基于 [stm32](https://github.com/spiralray/stm32f1_rosserial) 的 [ROS](http://www.ros.org/) 串口代码框架。也可以参考 [uROSnode](https://github.com/openrobots-dev/uROSnode) 避免重复造轮子，这里使用 [ROS](http://www.ros.org/) 现有的串口源码。\n## 建立工作目录\n　　```\n $mkdir -p ~/catkin_ws/src/mypackage/\n　　```\n## 下载源代码\n　　```\n $cd ~/catkin_ws/src/mypackage/\n $git clone https://github.com/wjwwood/serial.git\n　　```\n## 建立串口节点\n　　在 *mypackage* 目录下建立自己的节点程序包：\n　　```\n $catkin_create_pkg my_serial_node std_msgs rospy roscpp\n　　```\n此时会在 *mypackage/my_serial_node *目录下生成两个文件 *CMakeLists.txt* 和 *package.xml* 以及两个文件夹 *include/* 和 *src/*。修改 *CMakeLists.txt* 的内容：\n　　```\n cmake_minimum_required(VERSION 2.8.3)\n project( my_serial_node )\n \n  find_package(catkin REQUIRED COMPONENTS\n     roscpp\n     serial\n     std_msgs\n   )\n  \n  catkin_package(\n    CATKIN_DEPENDS\n      serial\n      std_msgs\n  )\n \n  include_directories(\n    ${catkin_INCLUDE_DIRS}\n  )\n \n  add_executable( my_serial_node src/my_serial_node.cpp)\n \n  target_link_libraries( my_serial_node\n    ${catkin_LIBRARIES}\n  )\n\n　　```\n修改 *package.xml* 内容添加刚刚下载的 *serial* 依赖：\n　　```\n <?xml version=\"1.0\"?>\n   <package>\n     <name> my_serial_node</name>\n     <version>0.0.0</version>\n     <description>my serial node </description>\n  \n     <license>BSD</license>\n \n    <buildtool_depend>catkin</buildtool_depend>\n    <build_depend>serial</build_depend>\n    <build_depend>std_msgs</build_depend>\n    <run_depend>serial</run_depend>\n    <run_depend>std_msgs</run_depend>\n \n  </package>\n　　```\n在 *src* 目录下建立 *my_serial_node.cpp* 文件：\n　　```\n #include <serial/serial.h>\n #include <std_msgs/String.h>\n #include <std_msgs/Empty.h>\n \n serial::Serial ros_ser;\n //回调函数\n void callback(const std_msgs::String::ConstPtr& msg){\n      ROS_INFO_STREAM(\"Write to serial port\" << msg->data);\n      ros_ser.write(msg->data);\n  }\n \n int main (int argc, char** argv){\n      ros::init(argc, argv, \"my_serial_node\");\n      ros::NodeHandle n;\n      //订阅主题command\n      ros::Subscriber command_sub = n.subscribe(\"command\", 1000, callback);\n      //发布主题sensor\n      ros::Publisher sensor_pub = n.advertise<std_msgs::String>(\"sensor\", 1000);\n \n      try\n      {\n          ros_ser.setPort(\"/dev/ttyUSB0\");\n          ros_ser.setBaudrate(115200);\n          ros_serial::Timeout to = serial::Timeout::simpleTimeout(1000);\n          ros_ser.setTimeout(to);\n          ros_ser.open();\n      }\n      catch (serial::IOException& e)\n      {\n          ROS_ERROR_STREAM(\"Unable to open port \");\n          return -1;\n      }\n \n      if(ros_ser.isOpen()){\n          ROS_INFO_STREAM(\"Serial Port opened\");\n      }else{\n          return -1;\n      }\n \n      ros::Rate loop_rate(10);\n      while(ros::ok()){\n \n          ros::spinOnce();\n \n          if(ros_ser.available()){\n              ROS_INFO_STREAM(\"Reading from serial port\");\n              std_msgs::String serial_data;\n              //获取串口数据\n              serial_data.data = ros_ser.read(ros_ser.available());\n              ROS_INFO_STREAM(\"Read: \" << serial_data.data);\n              //将串口数据发布到主题sensor\n              sensor_pub.publish(serial_data);\n          }\n          loop_rate.sleep();\n \n      }\n  }\n\n　　```\n## 建立talker节点\n同样在 *src* 目录下新建文件 *talker.cpp* ,并在 *CMakeLists.txt* 中添加以下内容：\n　　```\n add_executable(talker src/talker.cpp)\n target_link_libraries(talker ${catkin_LIBRARIES})\n　　```\n*talker.cpp*内容：\n　　```\n#include \"ros/ros.h\"\n#include \"std_msgs/String.h\"\n#include <sstream>\nint main(int argc, char **argv)\n{\n ros::init(argc, argv, \"talker\");\n ros::NodeHandle n;\n //发布主题command\n ros::Publisher command_pub = n.advertise<std_msgs::String>(\"command\", 1000);\n ros::Rate loop_rate(10);\n int count = 0;\n while (ros::ok())\n {\n   std_msgs::String msg;\n   std::stringstream ss_data;\n   ss_data << \"talker publish command \" << count;\n   msg.data = ss_data.str();\n   ROS_INFO(\"%s\", msg.data.c_str());\n   command_pub.publish(msg);\n   ros::spinOnce();\n   loop_rate.sleep();\n   ++count;\n  }\n  return 0;\n}\n　　```\n## 建立listenner节点\n方式同 *talker* 节点。代码如下：\n　　```\n#include \"ros/ros.h\"\n#include \"std_msgs/String.h\"\n//回调函数\nvoid callback(const std_msgs::String::ConstPtr& msg)\n{\n ROS_INFO(\"listener got: [%s]\", msg->data.c_str());\n}\nint main(int argc, char **argv)\n{\n ros::init(argc, argv, \"listener\");\n ros::NodeHandle n;\n //订阅主题\n ros::Subscriber sub = n.subscribe(\"sensor\", 1000, callback);\n ros::spin();\n return 0;\n\n}\n　　```\n# 测试\n回到目录 *catkin_ws* 进行编译：\n　　```\n $cd ~/catkin_ws/\n $catkin_make\n　　```\n测试时将底层设备通过串口与运行 [ROS](http://www.ros.org/) 系统设备的串口连接，并写好底层设备的串口驱动程序。在 [ROS](http://www.ros.org/) 平台上开三个终端运行三个节点：\n　　```\n $roscore //必须先运行\n $rosrun my_serial_node my_serial_node\n $rosrun my_serial_node talker\n $rosrun my_serial_node listenner\n　　```\n\n效果如下：\n![](ros-serial/serial.jpg)\n\n","slug":"ros-serial","published":1,"updated":"2017-05-17T05:52:53.457Z","layout":"post","photos":[],"link":"","_id":"cj30tmxil000wikinthbmliao","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>移植 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 的目的是控制机器人移动或者控制飞行器按既定轨道飞行，那么如何实现 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 与底层的移动控制设备通信呢？底层设备一般都是ARM架构实现，资源有限，不可能跑个ubuntu，当然也可以移植 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 的框架，但这个要对底层设备进行 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 框架的封装，实现起来麻烦一些。普遍来讲，底层设备一般都具备串口，通过串口与底层设备通讯，也许是一种高效便捷的方法。<br><a id=\"more\"></a></p>\n<h1 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h1><p>在 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 平台下，设计一个串口节点，该节点订阅talker控制节点发来的命令主题，将命令通过串口设备发送到移动底座也可以是飞控设备；同时串口节点实时接收移动底座通过串口发送过来的传感器实时数据，并将该数据封装后以 <em>sensor</em> 主题的模式进行发布， <em>listenner</em> 节点可以实现订阅该主题。这样就实现了 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 与移动底座的串口通信过程。<img src=\"/2017/05/17/ros-serial/arch.jpg\" alt=\"\"></p>\n<h1 id=\"串口节点\"><a href=\"#串口节点\" class=\"headerlink\" title=\"串口节点\"></a>串口节点</h1><p><em>linux</em> 下的串口有很多现成的实现例子，比如 <a href=\"https://github.com/mwheels/libcssl\" target=\"_blank\" rel=\"external\">libcssl</a> ,当然也可以自己编程实现。对于 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 架构的串口也有现成的例子 <a href=\"http://wiki.ros.org/serial\" target=\"_blank\" rel=\"external\">serial</a> ,源代码 <a href=\"https://github.com/wjwwood/serial.git\" target=\"_blank\" rel=\"external\">serial code</a> 。也有基于 <a href=\"https://github.com/spiralray/stm32f1_rosserial\" target=\"_blank\" rel=\"external\">stm32</a> 的 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 串口代码框架。也可以参考 <a href=\"https://github.com/openrobots-dev/uROSnode\" target=\"_blank\" rel=\"external\">uROSnode</a> 避免重复造轮子，这里使用 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 现有的串口源码。</p>\n<h2 id=\"建立工作目录\"><a href=\"#建立工作目录\" class=\"headerlink\" title=\"建立工作目录\"></a>建立工作目录</h2><p>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$mkdir</span> -p ~<span class=\"regexp\">/catkin_ws/</span>src<span class=\"regexp\">/mypackage/</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"下载源代码\"><a href=\"#下载源代码\" class=\"headerlink\" title=\"下载源代码\"></a>下载源代码</h2><p>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> ~<span class=\"regexp\">/catkin_ws/</span>src<span class=\"regexp\">/mypackage/</span></div><div class=\"line\"><span class=\"variable\">$git</span> clone https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/wjwwood/</span>serial.git</div></pre></td></tr></table></figure></p>\n<h2 id=\"建立串口节点\"><a href=\"#建立串口节点\" class=\"headerlink\" title=\"建立串口节点\"></a>建立串口节点</h2><p>　　在 <em>mypackage</em> 目录下建立自己的节点程序包：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$catkin</span>_create_pkg my_serial_node std_msgs rospy roscpp</span></div></pre></td></tr></table></figure></p>\n<p>此时会在 <em>mypackage/my_serial_node </em>目录下生成两个文件 <em>CMakeLists.txt</em> 和 <em>package.xml</em> 以及两个文件夹 <em>include/</em> 和 <em>src/</em>。修改 <em>CMakeLists.txt</em> 的内容：<br>　　<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">cmake_minimum_required(<span class=\"name\">VERSION</span> <span class=\"number\">2.8</span>.<span class=\"number\">3</span>)</div><div class=\"line\">project( <span class=\"name\">my_serial_node</span> )</div><div class=\"line\"></div><div class=\"line\"> find_package(<span class=\"name\">catkin</span> REQUIRED COMPONENTS</div><div class=\"line\">    roscpp</div><div class=\"line\">    serial</div><div class=\"line\">    std_msgs</div><div class=\"line\">  )</div><div class=\"line\"> </div><div class=\"line\"> catkin_package(</div><div class=\"line\">   <span class=\"name\">CATKIN_DEPENDS</span></div><div class=\"line\">     serial</div><div class=\"line\">     std_msgs</div><div class=\"line\"> )</div><div class=\"line\"></div><div class=\"line\"> include_directories(</div><div class=\"line\">   $&#123;catkin_INCLUDE_DIRS&#125;</div><div class=\"line\"> )</div><div class=\"line\"></div><div class=\"line\"> add_executable( <span class=\"name\">my_serial_node</span> src/my_serial_node.cpp)</div><div class=\"line\"></div><div class=\"line\"> target_link_libraries( <span class=\"name\">my_serial_node</span></div><div class=\"line\">   $&#123;catkin_LIBRARIES&#125;</div><div class=\"line\"> )</div></pre></td></tr></table></figure></p>\n<p>修改 <em>package.xml</em> 内容添加刚刚下载的 <em>serial</em> 依赖：<br>　　<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">package</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span> my_serial_node<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>my serial node <span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">license</span>&gt;</span>BSD<span class=\"tag\">&lt;/<span class=\"name\">license</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">buildtool_depend</span>&gt;</span>catkin<span class=\"tag\">&lt;/<span class=\"name\">buildtool_depend</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>serial<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>serial<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在 <em>src</em> 目录下建立 <em>my_serial_node.cpp</em> 文件：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;serial/serial.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;std_msgs/String.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;std_msgs/Empty.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">serial::Serial ros_ser;</div><div class=\"line\"><span class=\"comment\">//回调函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">callback</span><span class=\"params\">(<span class=\"keyword\">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span>&#123;</div><div class=\"line\">     ROS_INFO_STREAM(<span class=\"string\">\"Write to serial port\"</span> &lt;&lt; msg-&gt;data);</div><div class=\"line\">     ros_ser.write(msg-&gt;data);</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span>&#123;</div><div class=\"line\">     ros::init(argc, argv, <span class=\"string\">\"my_serial_node\"</span>);</div><div class=\"line\">     ros::NodeHandle n;</div><div class=\"line\">     <span class=\"comment\">//订阅主题command</span></div><div class=\"line\">     ros::Subscriber command_sub = n.subscribe(<span class=\"string\">\"command\"</span>, <span class=\"number\">1000</span>, callback);</div><div class=\"line\">     <span class=\"comment\">//发布主题sensor</span></div><div class=\"line\">     ros::Publisher sensor_pub = n.advertise&lt;std_msgs::String&gt;(<span class=\"string\">\"sensor\"</span>, <span class=\"number\">1000</span>);</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">try</span></div><div class=\"line\">     &#123;</div><div class=\"line\">         ros_ser.setPort(<span class=\"string\">\"/dev/ttyUSB0\"</span>);</div><div class=\"line\">         ros_ser.setBaudrate(<span class=\"number\">115200</span>);</div><div class=\"line\">         ros_serial::Timeout to = serial::Timeout::simpleTimeout(<span class=\"number\">1000</span>);</div><div class=\"line\">         ros_ser.setTimeout(to);</div><div class=\"line\">         ros_ser.open();</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">catch</span> (serial::IOException&amp; e)</div><div class=\"line\">     &#123;</div><div class=\"line\">         ROS_ERROR_STREAM(<span class=\"string\">\"Unable to open port \"</span>);</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">if</span>(ros_ser.isOpen())&#123;</div><div class=\"line\">         ROS_INFO_STREAM(<span class=\"string\">\"Serial Port opened\"</span>);</div><div class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     ros::<span class=\"function\">Rate <span class=\"title\">loop_rate</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</div><div class=\"line\">     <span class=\"keyword\">while</span>(ros::ok())&#123;</div><div class=\"line\"></div><div class=\"line\">         ros::spinOnce();</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">if</span>(ros_ser.available())&#123;</div><div class=\"line\">             ROS_INFO_STREAM(<span class=\"string\">\"Reading from serial port\"</span>);</div><div class=\"line\">             std_msgs::String serial_data;</div><div class=\"line\">             <span class=\"comment\">//获取串口数据</span></div><div class=\"line\">             serial_data.data = ros_ser.read(ros_ser.available());</div><div class=\"line\">             ROS_INFO_STREAM(<span class=\"string\">\"Read: \"</span> &lt;&lt; serial_data.data);</div><div class=\"line\">             <span class=\"comment\">//将串口数据发布到主题sensor</span></div><div class=\"line\">             sensor_pub.publish(serial_data);</div><div class=\"line\">         &#125;</div><div class=\"line\">         loop_rate.sleep();</div><div class=\"line\"></div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"建立talker节点\"><a href=\"#建立talker节点\" class=\"headerlink\" title=\"建立talker节点\"></a>建立talker节点</h2><p>同样在 <em>src</em> 目录下新建文件 <em>talker.cpp</em> ,并在 <em>CMakeLists.txt</em> 中添加以下内容：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(talker src/talker.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(talker $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>\n<p><em>talker.cpp</em>内容：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"std_msgs/String.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> ros::init(argc, argv, <span class=\"string\">\"talker\"</span>);</div><div class=\"line\"> ros::NodeHandle n;</div><div class=\"line\"> <span class=\"comment\">//发布主题command</span></div><div class=\"line\"> ros::Publisher command_pub = n.advertise&lt;std_msgs::String&gt;(<span class=\"string\">\"command\"</span>, <span class=\"number\">1000</span>);</div><div class=\"line\"> ros::<span class=\"function\">Rate <span class=\"title\">loop_rate</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</div><div class=\"line\"> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"> <span class=\"keyword\">while</span> (ros::ok())</div><div class=\"line\"> &#123;</div><div class=\"line\">   std_msgs::String msg;</div><div class=\"line\">   <span class=\"built_in\">std</span>::<span class=\"built_in\">stringstream</span> ss_data;</div><div class=\"line\">   ss_data &lt;&lt; <span class=\"string\">\"talker publish command \"</span> &lt;&lt; count;</div><div class=\"line\">   msg.data = ss_data.str();</div><div class=\"line\">   ROS_INFO(<span class=\"string\">\"%s\"</span>, msg.data.c_str());</div><div class=\"line\">   command_pub.publish(msg);</div><div class=\"line\">   ros::spinOnce();</div><div class=\"line\">   loop_rate.sleep();</div><div class=\"line\">   ++count;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"建立listenner节点\"><a href=\"#建立listenner节点\" class=\"headerlink\" title=\"建立listenner节点\"></a>建立listenner节点</h2><p>方式同 <em>talker</em> 节点。代码如下：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"std_msgs/String.h\"</span></span></div><div class=\"line\"><span class=\"comment\">//回调函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">callback</span><span class=\"params\">(<span class=\"keyword\">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> ROS_INFO(<span class=\"string\">\"listener got: [%s]\"</span>, msg-&gt;data.c_str());</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> ros::init(argc, argv, <span class=\"string\">\"listener\"</span>);</div><div class=\"line\"> ros::NodeHandle n;</div><div class=\"line\"> <span class=\"comment\">//订阅主题</span></div><div class=\"line\"> ros::Subscriber sub = n.subscribe(<span class=\"string\">\"sensor\"</span>, <span class=\"number\">1000</span>, callback);</div><div class=\"line\"> ros::spin();</div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>回到目录 <em>catkin_ws</em> 进行编译：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make</span></div></pre></td></tr></table></figure></p>\n<p>测试时将底层设备通过串口与运行 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 系统设备的串口连接，并写好底层设备的串口驱动程序。在 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 平台上开三个终端运行三个节点：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscore</span> //必须先运行</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> my_serial_node my_serial_node</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> my_serial_node talker</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> my_serial_node listenner</span></div></pre></td></tr></table></figure></p>\n<p>效果如下：<br><img src=\"/2017/05/17/ros-serial/serial.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>移植 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 的目的是控制机器人移动或者控制飞行器按既定轨道飞行，那么如何实现 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 与底层的移动控制设备通信呢？底层设备一般都是ARM架构实现，资源有限，不可能跑个ubuntu，当然也可以移植 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 的框架，但这个要对底层设备进行 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 框架的封装，实现起来麻烦一些。普遍来讲，底层设备一般都具备串口，通过串口与底层设备通讯，也许是一种高效便捷的方法。<br></p>","more":"<p></p>\n<h1 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h1><p>在 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 平台下，设计一个串口节点，该节点订阅talker控制节点发来的命令主题，将命令通过串口设备发送到移动底座也可以是飞控设备；同时串口节点实时接收移动底座通过串口发送过来的传感器实时数据，并将该数据封装后以 <em>sensor</em> 主题的模式进行发布， <em>listenner</em> 节点可以实现订阅该主题。这样就实现了 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 与移动底座的串口通信过程。<img src=\"/2017/05/17/ros-serial/arch.jpg\" alt=\"\"></p>\n<h1 id=\"串口节点\"><a href=\"#串口节点\" class=\"headerlink\" title=\"串口节点\"></a>串口节点</h1><p><em>linux</em> 下的串口有很多现成的实现例子，比如 <a href=\"https://github.com/mwheels/libcssl\" target=\"_blank\" rel=\"external\">libcssl</a> ,当然也可以自己编程实现。对于 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 架构的串口也有现成的例子 <a href=\"http://wiki.ros.org/serial\" target=\"_blank\" rel=\"external\">serial</a> ,源代码 <a href=\"https://github.com/wjwwood/serial.git\" target=\"_blank\" rel=\"external\">serial code</a> 。也有基于 <a href=\"https://github.com/spiralray/stm32f1_rosserial\" target=\"_blank\" rel=\"external\">stm32</a> 的 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 串口代码框架。也可以参考 <a href=\"https://github.com/openrobots-dev/uROSnode\" target=\"_blank\" rel=\"external\">uROSnode</a> 避免重复造轮子，这里使用 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 现有的串口源码。</p>\n<h2 id=\"建立工作目录\"><a href=\"#建立工作目录\" class=\"headerlink\" title=\"建立工作目录\"></a>建立工作目录</h2><p>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$mkdir</span> -p ~<span class=\"regexp\">/catkin_ws/</span>src<span class=\"regexp\">/mypackage/</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"下载源代码\"><a href=\"#下载源代码\" class=\"headerlink\" title=\"下载源代码\"></a>下载源代码</h2><p>　　<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$cd</span> ~<span class=\"regexp\">/catkin_ws/</span>src<span class=\"regexp\">/mypackage/</span></div><div class=\"line\"><span class=\"variable\">$git</span> clone https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/wjwwood/</span>serial.git</div></pre></td></tr></table></figure></p>\n<h2 id=\"建立串口节点\"><a href=\"#建立串口节点\" class=\"headerlink\" title=\"建立串口节点\"></a>建立串口节点</h2><p>　　在 <em>mypackage</em> 目录下建立自己的节点程序包：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$catkin</span>_create_pkg my_serial_node std_msgs rospy roscpp</span></div></pre></td></tr></table></figure></p>\n<p>此时会在 <em>mypackage/my_serial_node </em>目录下生成两个文件 <em>CMakeLists.txt</em> 和 <em>package.xml</em> 以及两个文件夹 <em>include/</em> 和 <em>src/</em>。修改 <em>CMakeLists.txt</em> 的内容：<br>　　<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">cmake_minimum_required(<span class=\"name\">VERSION</span> <span class=\"number\">2.8</span>.<span class=\"number\">3</span>)</div><div class=\"line\">project( <span class=\"name\">my_serial_node</span> )</div><div class=\"line\"></div><div class=\"line\"> find_package(<span class=\"name\">catkin</span> REQUIRED COMPONENTS</div><div class=\"line\">    roscpp</div><div class=\"line\">    serial</div><div class=\"line\">    std_msgs</div><div class=\"line\">  )</div><div class=\"line\"> </div><div class=\"line\"> catkin_package(</div><div class=\"line\">   <span class=\"name\">CATKIN_DEPENDS</span></div><div class=\"line\">     serial</div><div class=\"line\">     std_msgs</div><div class=\"line\"> )</div><div class=\"line\"></div><div class=\"line\"> include_directories(</div><div class=\"line\">   $&#123;catkin_INCLUDE_DIRS&#125;</div><div class=\"line\"> )</div><div class=\"line\"></div><div class=\"line\"> add_executable( <span class=\"name\">my_serial_node</span> src/my_serial_node.cpp)</div><div class=\"line\"></div><div class=\"line\"> target_link_libraries( <span class=\"name\">my_serial_node</span></div><div class=\"line\">   $&#123;catkin_LIBRARIES&#125;</div><div class=\"line\"> )</div></pre></td></tr></table></figure></p>\n<p>修改 <em>package.xml</em> 内容添加刚刚下载的 <em>serial</em> 依赖：<br>　　<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">package</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span> my_serial_node<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>my serial node <span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">license</span>&gt;</span>BSD<span class=\"tag\">&lt;/<span class=\"name\">license</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">buildtool_depend</span>&gt;</span>catkin<span class=\"tag\">&lt;/<span class=\"name\">buildtool_depend</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>serial<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">build_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">build_depend</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>serial<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">run_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">run_depend</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在 <em>src</em> 目录下建立 <em>my_serial_node.cpp</em> 文件：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;serial/serial.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;std_msgs/String.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;std_msgs/Empty.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">serial::Serial ros_ser;</div><div class=\"line\"><span class=\"comment\">//回调函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">callback</span><span class=\"params\">(<span class=\"keyword\">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span>&#123;</div><div class=\"line\">     ROS_INFO_STREAM(<span class=\"string\">\"Write to serial port\"</span> &lt;&lt; msg-&gt;data);</div><div class=\"line\">     ros_ser.write(msg-&gt;data);</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span>&#123;</div><div class=\"line\">     ros::init(argc, argv, <span class=\"string\">\"my_serial_node\"</span>);</div><div class=\"line\">     ros::NodeHandle n;</div><div class=\"line\">     <span class=\"comment\">//订阅主题command</span></div><div class=\"line\">     ros::Subscriber command_sub = n.subscribe(<span class=\"string\">\"command\"</span>, <span class=\"number\">1000</span>, callback);</div><div class=\"line\">     <span class=\"comment\">//发布主题sensor</span></div><div class=\"line\">     ros::Publisher sensor_pub = n.advertise&lt;std_msgs::String&gt;(<span class=\"string\">\"sensor\"</span>, <span class=\"number\">1000</span>);</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">try</span></div><div class=\"line\">     &#123;</div><div class=\"line\">         ros_ser.setPort(<span class=\"string\">\"/dev/ttyUSB0\"</span>);</div><div class=\"line\">         ros_ser.setBaudrate(<span class=\"number\">115200</span>);</div><div class=\"line\">         ros_serial::Timeout to = serial::Timeout::simpleTimeout(<span class=\"number\">1000</span>);</div><div class=\"line\">         ros_ser.setTimeout(to);</div><div class=\"line\">         ros_ser.open();</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">catch</span> (serial::IOException&amp; e)</div><div class=\"line\">     &#123;</div><div class=\"line\">         ROS_ERROR_STREAM(<span class=\"string\">\"Unable to open port \"</span>);</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">if</span>(ros_ser.isOpen())&#123;</div><div class=\"line\">         ROS_INFO_STREAM(<span class=\"string\">\"Serial Port opened\"</span>);</div><div class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     ros::<span class=\"function\">Rate <span class=\"title\">loop_rate</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</div><div class=\"line\">     <span class=\"keyword\">while</span>(ros::ok())&#123;</div><div class=\"line\"></div><div class=\"line\">         ros::spinOnce();</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">if</span>(ros_ser.available())&#123;</div><div class=\"line\">             ROS_INFO_STREAM(<span class=\"string\">\"Reading from serial port\"</span>);</div><div class=\"line\">             std_msgs::String serial_data;</div><div class=\"line\">             <span class=\"comment\">//获取串口数据</span></div><div class=\"line\">             serial_data.data = ros_ser.read(ros_ser.available());</div><div class=\"line\">             ROS_INFO_STREAM(<span class=\"string\">\"Read: \"</span> &lt;&lt; serial_data.data);</div><div class=\"line\">             <span class=\"comment\">//将串口数据发布到主题sensor</span></div><div class=\"line\">             sensor_pub.publish(serial_data);</div><div class=\"line\">         &#125;</div><div class=\"line\">         loop_rate.sleep();</div><div class=\"line\"></div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"建立talker节点\"><a href=\"#建立talker节点\" class=\"headerlink\" title=\"建立talker节点\"></a>建立talker节点</h2><p>同样在 <em>src</em> 目录下新建文件 <em>talker.cpp</em> ,并在 <em>CMakeLists.txt</em> 中添加以下内容：<br>　　<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(talker src/talker.cpp)</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(talker $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>\n<p><em>talker.cpp</em>内容：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"std_msgs/String.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> ros::init(argc, argv, <span class=\"string\">\"talker\"</span>);</div><div class=\"line\"> ros::NodeHandle n;</div><div class=\"line\"> <span class=\"comment\">//发布主题command</span></div><div class=\"line\"> ros::Publisher command_pub = n.advertise&lt;std_msgs::String&gt;(<span class=\"string\">\"command\"</span>, <span class=\"number\">1000</span>);</div><div class=\"line\"> ros::<span class=\"function\">Rate <span class=\"title\">loop_rate</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</div><div class=\"line\"> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"> <span class=\"keyword\">while</span> (ros::ok())</div><div class=\"line\"> &#123;</div><div class=\"line\">   std_msgs::String msg;</div><div class=\"line\">   <span class=\"built_in\">std</span>::<span class=\"built_in\">stringstream</span> ss_data;</div><div class=\"line\">   ss_data &lt;&lt; <span class=\"string\">\"talker publish command \"</span> &lt;&lt; count;</div><div class=\"line\">   msg.data = ss_data.str();</div><div class=\"line\">   ROS_INFO(<span class=\"string\">\"%s\"</span>, msg.data.c_str());</div><div class=\"line\">   command_pub.publish(msg);</div><div class=\"line\">   ros::spinOnce();</div><div class=\"line\">   loop_rate.sleep();</div><div class=\"line\">   ++count;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"建立listenner节点\"><a href=\"#建立listenner节点\" class=\"headerlink\" title=\"建立listenner节点\"></a>建立listenner节点</h2><p>方式同 <em>talker</em> 节点。代码如下：<br>　　<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ros/ros.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"std_msgs/String.h\"</span></span></div><div class=\"line\"><span class=\"comment\">//回调函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">callback</span><span class=\"params\">(<span class=\"keyword\">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> ROS_INFO(<span class=\"string\">\"listener got: [%s]\"</span>, msg-&gt;data.c_str());</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> ros::init(argc, argv, <span class=\"string\">\"listener\"</span>);</div><div class=\"line\"> ros::NodeHandle n;</div><div class=\"line\"> <span class=\"comment\">//订阅主题</span></div><div class=\"line\"> ros::Subscriber sub = n.subscribe(<span class=\"string\">\"sensor\"</span>, <span class=\"number\">1000</span>, callback);</div><div class=\"line\"> ros::spin();</div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>回到目录 <em>catkin_ws</em> 进行编译：<br>　　<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/catkin_ws/</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">catkin_make</span></div></pre></td></tr></table></figure></p>\n<p>测试时将底层设备通过串口与运行 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 系统设备的串口连接，并写好底层设备的串口驱动程序。在 <a href=\"http://www.ros.org/\" target=\"_blank\" rel=\"external\">ROS</a> 平台上开三个终端运行三个节点：<br>　　<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$roscore</span> //必须先运行</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> my_serial_node my_serial_node</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> my_serial_node talker</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$rosrun</span> my_serial_node listenner</span></div></pre></td></tr></table></figure></p>\n<p>效果如下：<br><img src=\"/2017/05/17/ros-serial/serial.jpg\" alt=\"\"></p>"}],"PostAsset":[{"_id":"source/_posts/hexo-blog/hello-world.jpg","slug":"hello-world.jpg","post":"cj30tmxh50003ikinql5q6j2y","modified":1,"renderable":0},{"_id":"source/_posts/linux-serial/libcssl.jpg","slug":"libcssl.jpg","post":"cj30tmxhl000dikinojwflmsz","modified":1,"renderable":0},{"_id":"source/_posts/ros-indigo-raspberry/catkin.jpg","slug":"catkin.jpg","post":"cj30tmxhx000rikinth9fotj6","modified":1,"renderable":0},{"_id":"source/_posts/ros-communication/talker.jpg","slug":"talker.jpg","post":"cj30tmxht000nikinmvshjot4","modified":1,"renderable":0},{"_id":"source/_posts/hexo-advance/pay.jpg","post":"cj30tmxh00001ikinq4i2a2ac","slug":"pay.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-backup/setbranch.jpg","post":"cj30tmxhc0007ikinjqffektp","slug":"setbranch.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-blog/leancloudc.jpg","post":"cj30tmxh50003ikinql5q6j2y","slug":"leancloudc.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ros-communication/turtle.jpg","post":"cj30tmxht000nikinmvshjot4","slug":"turtle.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ros-serial/arch.jpg","post":"cj30tmxil000wikinthbmliao","slug":"arch.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ros-serial/serial.jpg","slug":"serial.jpg","post":"cj30tmxil000wikinthbmliao","modified":1,"renderable":0},{"_id":"source/_posts/ros-indigo-raspberry/roscore.jpg","post":"cj30tmxhx000rikinth9fotj6","slug":"roscore.jpg","modified":1,"renderable":1},{"_id":"source/_posts/ros-indigo-raspberry/urdf.jpg","post":"cj30tmxhx000rikinth9fotj6","slug":"urdf.jpg","modified":1,"renderable":1},{"_id":"source/_posts/vim/powerline.jpg","post":"cj30tmxif000tikinangmba9g","slug":"powerline.jpg","modified":1,"renderable":1},{"_id":"source/_posts/vim/tree.jpg","post":"cj30tmxif000tikinangmba9g","slug":"tree.jpg","modified":1,"renderable":1},{"_id":"source/_posts/vim/ycm.gif","slug":"ycm.gif","post":"cj30tmxif000tikinangmba9g","modified":1,"renderable":0},{"_id":"source/_posts/raspberryPi/config.jpg","post":"cj30tmxhr000likinnylulf1v","slug":"config.jpg","modified":1,"renderable":1},{"_id":"source/_posts/raspberryPi/portconfig.jpg","post":"cj30tmxhr000likinnylulf1v","slug":"portconfig.jpg","modified":1,"renderable":1},{"_id":"source/_posts/raspberryPi/vnc.jpg","post":"cj30tmxhr000likinnylulf1v","slug":"vnc.jpg","modified":1,"renderable":1},{"_id":"source/_posts/raspberryPi/wpacli.jpg","post":"cj30tmxhr000likinnylulf1v","slug":"wpacli.jpg","modified":1,"renderable":1},{"_id":"source/_posts/qt-widget-designated-location/final.jpg","post":"cj30tmxho000gikin3hdcwvnb","slug":"final.jpg","modified":1,"renderable":1},{"_id":"source/_posts/qt-widget-designated-location/grid.jpg","post":"cj30tmxho000gikin3hdcwvnb","slug":"grid.jpg","modified":1,"renderable":1},{"_id":"source/_posts/qt-widget-designated-location/linux.jpg","post":"cj30tmxho000gikin3hdcwvnb","slug":"linux.jpg","modified":1,"renderable":1},{"_id":"source/_posts/qt-widget-designated-location/qrc.jpg","post":"cj30tmxho000gikin3hdcwvnb","slug":"qrc.jpg","modified":1,"renderable":1},{"_id":"source/_posts/qt-widget-designated-location/res-qrc.jpg","post":"cj30tmxho000gikin3hdcwvnb","slug":"res-qrc.jpg","modified":1,"renderable":1},{"_id":"source/_posts/qt-widget-designated-location/text.jpg","post":"cj30tmxho000gikin3hdcwvnb","slug":"text.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cj30tmxh00001ikinq4i2a2ac","category_id":"cj30tmxh70004ikinqu11tx27","_id":"cj30tmxhn000eikinasmeqack"},{"post_id":"cj30tmxhj0009ikinj3fscjb2","category_id":"cj30tmxh70004ikinqu11tx27","_id":"cj30tmxhq000jikinbxudectt"},{"post_id":"cj30tmxh50003ikinql5q6j2y","category_id":"cj30tmxh70004ikinqu11tx27","_id":"cj30tmxhs000mikiny8g20xj9"},{"post_id":"cj30tmxhc0007ikinjqffektp","category_id":"cj30tmxh70004ikinqu11tx27","_id":"cj30tmxie000sikinmkirg7tp"},{"post_id":"cj30tmxhe0008ikin9ty397az","category_id":"cj30tmxhu000oikinaq4gi6im","_id":"cj30tmxir000yikinbiqp41i6"},{"post_id":"cj30tmxif000tikinangmba9g","category_id":"cj30tmxhu000oikinaq4gi6im","_id":"cj30tmxiu0011ikina5w8cqk8"},{"post_id":"cj30tmxhl000dikinojwflmsz","category_id":"cj30tmxhu000oikinaq4gi6im","_id":"cj30tmxiu0013ikinuz3x94ox"},{"post_id":"cj30tmxho000gikin3hdcwvnb","category_id":"cj30tmxit000zikinnwsirudj","_id":"cj30tmxiw0017ikin6w8icyz0"},{"post_id":"cj30tmxhr000likinnylulf1v","category_id":"cj30tmxhu000oikinaq4gi6im","_id":"cj30tmxix001bikinioyk9utl"},{"post_id":"cj30tmxht000nikinmvshjot4","category_id":"cj30tmxiw0018ikinclk74tj2","_id":"cj30tmxiy001fikin7af8tbkv"},{"post_id":"cj30tmxhx000rikinth9fotj6","category_id":"cj30tmxiw0018ikinclk74tj2","_id":"cj30tmxj0001jikinlo96o4f9"},{"post_id":"cj30tmxil000wikinthbmliao","category_id":"cj30tmxiw0018ikinclk74tj2","_id":"cj30tmxj1001likin4y1hdje4"}],"PostTag":[{"post_id":"cj30tmxh00001ikinq4i2a2ac","tag_id":"cj30tmxhb0005ikinaclu93vd","_id":"cj30tmxhl000cikinaf8ssh52"},{"post_id":"cj30tmxhj0009ikinj3fscjb2","tag_id":"cj30tmxhb0005ikinaclu93vd","_id":"cj30tmxhn000fikinj62c5qsz"},{"post_id":"cj30tmxh50003ikinql5q6j2y","tag_id":"cj30tmxhb0005ikinaclu93vd","_id":"cj30tmxhr000kikin6bbiuasu"},{"post_id":"cj30tmxhc0007ikinjqffektp","tag_id":"cj30tmxhb0005ikinaclu93vd","_id":"cj30tmxhx000qikinzmybkis1"},{"post_id":"cj30tmxhe0008ikin9ty397az","tag_id":"cj30tmxhw000pikin535d7hnx","_id":"cj30tmxil000xikinyrsccims"},{"post_id":"cj30tmxhl000dikinojwflmsz","tag_id":"cj30tmxih000vikin02meq94g","_id":"cj30tmxiu0012ikin79a6p8l1"},{"post_id":"cj30tmxho000gikin3hdcwvnb","tag_id":"cj30tmxiu0010ikin0b6cvcb1","_id":"cj30tmxiw0016ikinmj91wa7x"},{"post_id":"cj30tmxhr000likinnylulf1v","tag_id":"cj30tmxiw0015ikinxdl6ltuz","_id":"cj30tmxix001aikinnw0sbgf7"},{"post_id":"cj30tmxht000nikinmvshjot4","tag_id":"cj30tmxix0019ikinfi2rhqn9","_id":"cj30tmxiy001eikineqec2a50"},{"post_id":"cj30tmxhx000rikinth9fotj6","tag_id":"cj30tmxiy001dikinppva9ge5","_id":"cj30tmxj0001iikinc4cz1fl7"},{"post_id":"cj30tmxif000tikinangmba9g","tag_id":"cj30tmxiz001hikinz5ax9c8h","_id":"cj30tmxj1001mikinp4yt7gkc"},{"post_id":"cj30tmxil000wikinthbmliao","tag_id":"cj30tmxj0001kikinvwayt4ai","_id":"cj30tmxj2001nikinihhr2prp"}],"Tag":[{"name":"hexo","_id":"cj30tmxhb0005ikinaclu93vd"},{"name":"Linux","_id":"cj30tmxhw000pikin535d7hnx"},{"name":"Linux serial","_id":"cj30tmxih000vikin02meq94g"},{"name":"Qt","_id":"cj30tmxiu0010ikin0b6cvcb1"},{"name":"raspberryPi","_id":"cj30tmxiw0015ikinxdl6ltuz"},{"name":"Communication","_id":"cj30tmxix0019ikinfi2rhqn9"},{"name":"raspberryPi ros-indigo jessie","_id":"cj30tmxiy001dikinppva9ge5"},{"name":"Vim","_id":"cj30tmxiz001hikinz5ax9c8h"},{"name":"ROS serial","_id":"cj30tmxj0001kikinvwayt4ai"}]}}