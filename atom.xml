<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Steven&#39;s blog</title>
  <subtitle>点一盏灯 给需要的人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://stevenshi.me/"/>
  <updated>2017-10-11T07:08:43.866Z</updated>
  <id>http://stevenshi.me/</id>
  
  <author>
    <name>Steven Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>详解stm32串口到底如何与ROS实现信息交互</title>
    <link href="http://stevenshi.me/2017/10/11/stm32-serial-port-ros/"/>
    <id>http://stevenshi.me/2017/10/11/stm32-serial-port-ros/</id>
    <published>2017-10-11T03:09:07.000Z</published>
    <updated>2017-10-11T07:08:43.866Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直有朋友咨询STM32到底如何与ROS实现信息交互，ROS如何获取移动底座的位置、速度、偏航角等信息，移动底座又是如何实时接收ROS的速度控制命令等。为了更清晰的描述这些问题，最近特意进行了总结归纳，从底层的STM32，到ROS的节点设计都做了详细的论述，放到这里给共同学习ROS的童鞋一个方向。<br><a id="more"></a></p>
<h1 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h1><p>有的朋友使用全向移动底座，有的使用两轮差动或四轮驱动实现移动底座；为了保持代码通用性，运动学解析这一部分没有特别的说明，移动底座只接收 x 与 y 两个方向的线速度以及一个绕 z 轴的角速度；针对不同的移动底座，还需要设计不同的运动学解析函数，以便于将线速度与角速度转变成电机运动指令，从而控制电机运动。ROS 部分实现一个节点，该节点订阅 cmd_vel 话题，并将该话题转变成 x y 两个方向的线速度以及一个绕 z 轴的角速度，通过串口发送到移动底座，即给STM32；另外该节点还需要发布导航需要的 odom 消息，这个消息需要移动底座提供，通过STM32的串口发送机器人的位置、速度、偏航角等信息，经过特殊的变换之后再发布。</p>
<h2 id="stm32"><a href="#STM32" class="headerlink" title="STM32"></a>STM32</h2><p>STM32使用最多的便是STM32F103，为了便于调试，选择STM32的串口1作为调试串口，打印一些调试信息；使用STM32的串口3作为与 ROS 通信的端口；调试串口波特率设置为9600,8位数据1个停止位，偶校验；串口3设置为115200波特率，8位数据1个停止位无校验模式；当然这个波特率可以自行设置。数据的发送和接收可以是固定长度或不固定长度，为了适应不同的长度字节，建议使用DMA模式，并开启串口的空闲中断，否则很难判断一帧数据包的完全接收。当然也可以开启一个定时器，在一定时间内判断是否超时来间接的判断一帧数据是否完成。最好的方式就是开启串口空闲中断，将数据的发送和接收都由DMA负责，这样不占用CPU资源。<br>调试端口:<br>                    PA9—&gt;USART1_TX—-&gt;DMA1_Channel4<br>                    PA10—&gt;USART1_RX—&gt;DMA1_Channel5<br>与ROS通信端口:<br>                    PB10—&gt;USART3_TX—-&gt;DMA1_Channel2<br>                    PB11—-&gt;USART3_RX—&gt;DMA1_Channel3</p>
<h3 id="数据接收"><a href="#数据接收" class="headerlink" title="数据接收"></a>数据接收</h3><p>使用DMA接收数据，配置如下：<br>　　<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">DM<span class="built_in">A_Cmd</span>(USARTz_Rx_DM<span class="built_in">A_Channe</span>,DISABLE)<span class="comment">;//配置之前先停止</span></div><div class="line">DM<span class="built_in">A_DeInit</span>(USARTz_Rx_DM<span class="built_in">A_Channe</span>)<span class="comment">;//恢复缺省配置</span></div><div class="line">DM<span class="built_in">A_InitStructure</span>.DM<span class="built_in">A_PeripheralBaseAddr</span> = (uint32_t)USARTz_DR_Base<span class="comment">;// 设置串口接收数据寄存器</span></div><div class="line">DM<span class="built_in">A_InitStructure</span>.DM<span class="built_in">A_MemoryBaseAddr</span> = (uint32_t)USARTzRxBuffer<span class="comment">;//接收缓存地址 </span></div><div class="line">DM<span class="built_in">A_InitStructure</span>.DM<span class="built_in">A_DIR</span> = DM<span class="built_in">A_DIR</span>_PeripheralSRC<span class="comment">;//设置外设为数据源</span></div><div class="line">DM<span class="built_in">A_InitStructure</span>.DM<span class="built_in">A_BufferSize</span> = USARTzTxBufferSize<span class="comment">;//需要接收的字节数</span></div><div class="line">DM<span class="built_in">A_InitStructure</span>.DM<span class="built_in">A_PeripheralInc</span> = DM<span class="built_in">A_PeripheralInc</span>_Disable<span class="comment">; //外设地址不做增加调整      </span></div><div class="line">DM<span class="built_in">A_InitStructure</span>.DM<span class="built_in">A_MemoryInc</span> = DM<span class="built_in">A_MemoryInc</span>_Enable<span class="comment">;  // 内存缓冲地址增加调整              </span></div><div class="line">DM<span class="built_in">A_InitStructure</span>.DM<span class="built_in">A_PeripheralDataSize</span> = DM<span class="built_in">A_PeripheralDataSize</span>_Byte<span class="comment">; // 外设数据宽度一个字节</span></div><div class="line">DM<span class="built_in">A_InitStructure</span>.DM<span class="built_in">A_MemoryDataSize</span> = DM<span class="built_in">A_MemoryDataSize</span>_Byte<span class="comment">; // 内存数据宽度一个字节        </span></div><div class="line">DM<span class="built_in">A_InitStructure</span>.DM<span class="built_in">A_Mode</span> = DM<span class="built_in">A_Mode</span>_Normal<span class="comment">;                           //单次传输模式</span></div><div class="line">DM<span class="built_in">A_InitStructure</span>.DM<span class="built_in">A_Priority</span> = DM<span class="built_in">A_Priority</span>_VeryHigh<span class="comment">; // 高优先级               </span></div><div class="line">DM<span class="built_in">A_InitStructure</span>.DM<span class="built_in">A_M2M</span> = DM<span class="built_in">A_M2M</span>_Disable<span class="comment">;  //关闭内存到内存的DMA模式</span></div><div class="line">DM<span class="built_in">A_Init</span>(USARTz_Rx_DM<span class="built_in">A_Channe</span>, &amp;DM<span class="built_in">A_InitStructure</span>)<span class="comment">;// 写入配置</span></div><div class="line">DM<span class="built_in">A_ClearFlag</span>(USARTz_Rx_DM<span class="built_in">A_FLAG</span>)<span class="comment">;    //清除DMA所有标志                       </span></div><div class="line">DM<span class="built_in">A_Cmd</span>(USARTz_Rx_DM<span class="built_in">A_Channe</span>, ENABLE)<span class="comment">; // 开启DMA接收通道</span></div></pre></td></tr></table></figure></p>
<p>开启串口的空闲中断，并在空闲中断中读取串口数据：<br>　　<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Enable USART3 Receive  interrupts */</span></div><div class="line">  <span class="selector-tag">USART_ITConfig</span>(USART3, USART_IT_IDLE, ENABLE); </div><div class="line"></div><div class="line"> <span class="selector-tag">void</span> <span class="selector-tag">USART3_IRQHandler</span>(void)<span class="comment">//串口中断</span></div><div class="line"> &#123;</div><div class="line">    </div><div class="line">	<span class="selector-tag">if</span>(USART_GetITStatus(USART3, USART_IT_IDLE) != RESET)  </div><div class="line">    &#123;</div><div class="line">        <span class="selector-tag">com_x_usart_dma_read</span>();</div><div class="line">		<span class="selector-tag">USART_ReceiveData</span>( USART3 );</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>这样才能接收变长的数据帧。</p>
<h3 id="数据发送"><a href="#数据发送" class="headerlink" title="数据发送"></a>数据发送</h3><p>数据发送时只要将数据发送的首地址以及数据宽度给 DMA 即可，因为一开始固定了发送缓存地址，所以只需要指定发送缓存长度即可：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">com_x_usart_dma_start_tx</span><span class="params">(<span class="keyword">uint8_t</span> size)</span></span></div><div class="line">&#123;</div><div class="line">   USARTz_Tx_DMA_Channe-&gt;CNDTR = (<span class="keyword">uint16_t</span>)size; <span class="comment">//重新赋值，指定发送缓存长度 </span></div><div class="line">   DMA_Cmd(USARTz_Tx_DMA_Channe, ENABLE);  <span class="comment">// 开启DMA发送    </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="调试功能"><a href="#调试功能" class="headerlink" title="调试功能"></a>调试功能</h3><p>关于 stm32 的 printf 功能实现可以参考站内文章 <a href="/2017/09/06/stm32-dma-printf/" title="STM32如何在DMA模式下实现printf">STM32如何在DMA模式下实现printf</a><br>这里建议使用 DMA 方式实现 printf，因为底座还有很多任务要处理包括运动学解析以及电机控制等。</p>
<h2 id="ros"><a href="#ROS" class="headerlink" title="ROS"></a>ROS</h2><p>需要设计一个 ROS 节点，该节点订阅 cmd_vel 话题，并发布 odom 消息；解析订阅的 cmd_vel 话题，转变成线速度以及角速度参数通过串口发送至移动底座；并实时监听串口送来的移动底座的位置、速度、偏航角等信息，整合成 odom 消息格式，发布出去。因为串口发送的都是16进制数据，因此涉及到浮点与16进制的转换，可以直接读内存实现：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//通过联合体获取浮点与16进制</span></div><div class="line"><span class="keyword">typedef</span>	<span class="keyword">union</span>&#123;</div><div class="line">		<span class="keyword">float</span> fv;</div><div class="line">		<span class="keyword">uint8_t</span> cv[<span class="number">4</span>];</div><div class="line">&#125;float_union;</div></pre></td></tr></table></figure></p>
<p>串口发送的数据格式也就是移动底座接收数据包的格式可以定义为：</p>
<table>
<thead>
<tr>
<th>head</th>
<th>head</th>
<th>velocity_x</th>
<th>velocity_y</th>
<th>angular_v</th>
<th>CRC</th>
</tr>
</thead>
<tbody>
<tr>
<td>0xff</td>
<td>0xff</td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>unsigned char</td>
</tr>
</tbody>
</table>
<p>velocity_x 表示 x 方向线速度，velocity_y 表示 y 方向线速度，angular_v 表示绕 z 轴的角速度，因为移动底座为贴地面运行，因此只有绕 z 轴的角速度，数据发送的总长度为15字节。<br>串口接收的数据格式也就是一定底座发送的数据包格式可以定义为：</p>
<table>
<thead>
<tr>
<th>head</th>
<th>head</th>
<th>x-position</th>
<th>y-position</th>
<th>x-speed</th>
<th>y-speed</th>
<th>angular-speed</th>
<th>pose-angular</th>
<th>CRC</th>
</tr>
</thead>
<tbody>
<tr>
<td>0xaa</td>
<td>0xaa</td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>u8</td>
</tr>
</tbody>
</table>
<p>x-position 表示机器人实时 x 坐标位置，y-position表示机器人实时 y 坐标位置，x-velocity表示机器人实时 x 坐标方向速度，y-velocity表示机器人实时 y 坐标方向速度，angular velocity表示机器人当前角速度，pose angular表示机器人当前偏航角。数据上传的总长度为27字节。校验和从有效数据开始取异或即可。<br>　　<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">data</span>[8] = <span class="keyword">data</span>[2]^<span class="keyword">data</span>[3]^<span class="keyword">data</span>[4]^<span class="keyword">data</span>[5]^<span class="keyword">data</span>[6]^<span class="keyword">data</span>[7];//不计算数据包的头</span></div></pre></td></tr></table></figure></p>
<p>需要注意的是，ROS 中需要将偏航角转换成四元数才能进行发布：<br>　　<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将偏航角转换成四元数才能发布</span></div><div class="line">  odom_quat = tf<span class="type">::createQuaternionMsgFromYaw</span>(yaw.fvalue);</div><div class="line"></div><div class="line"><span class="comment">//发布坐标变换父子坐标系</span></div><div class="line">  odom_trans.<span class="keyword">header</span>.frame_id = <span class="string">"odom"</span>;</div><div class="line">  odom_trans.child_frame_id = <span class="string">"base_link"</span>;</div><div class="line"><span class="comment">//填充获取的数据</span></div><div class="line">  odom_trans.transform.translation.x = posx.fvalue;<span class="comment">//x坐标</span></div><div class="line">  odom_trans.transform.translation.y = posy.fvalue;<span class="comment">//y坐标</span></div><div class="line">  odom_trans.transform.translation.z = <span class="number">0</span>;<span class="comment">//z坐标</span></div><div class="line">  odom_trans.transform.rotation = odom_quat;<span class="comment">//偏航角</span></div><div class="line"></div><div class="line"><span class="comment">//获取当前时间</span></div><div class="line">  current_time = ros<span class="type">::Time</span><span class="type">::now</span>();</div><div class="line"></div><div class="line"><span class="comment">//载入线速度和角速度</span></div><div class="line">  odom.twist.twist.linear.x = vx.fvalue;</div><div class="line">  odom.twist.twist.linear.y = vy.fvalue;</div><div class="line">  odom.twist.twist.angular.z = va.fvalue;</div><div class="line"><span class="comment">//发布里程计消息</span></div><div class="line">  read_pub.publish(odom);</div><div class="line">  ROS_INFO(<span class="string">"publish odometry"</span>);</div><div class="line">  last_time = current_time;</div></pre></td></tr></table></figure></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>为了更直观的观察代码可用性，使用时我直接使用了 ROS 中的 turtlesim turtle_teleop_key 来使用键盘的方向键来键入速度、角速度等。测试时开三个terminal,分别运行：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore  </span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun my_serial_node my_serial_node</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtle_teleop_key</span></div></pre></td></tr></table></figure></p>
<p>此时可以通过键盘方向键发送运动命令，可以在终端窗口观察到信息的发布,STM32端可以手动给一些位置、速度等的固定值，可以接另外一台电脑连接STM32的调试串口，因为我就一个电脑，测试时直接使用JTAG观察变量：</p>
<p><img src="/2017/10/11/stm32-serial-port-ros/up.png" alt=""></p>
<p>该截图为按下向上的方向键时捕捉到的信息，可以清晰的看到 stm32 收到的线速度 x 方向为 2：</p>
<p><img src="/2017/10/11/stm32-serial-port-ros/stm32up.png" alt=""></p>
<p>对应的也可以看到 ROS 的输出信息 ：</p>
<p><img src="/2017/10/11/stm32-serial-port-ros/rosup.png" alt=""></p>
<p>在STM32端给定的移动底座的实时位置、速度信息为：</p>
<p><img src="/2017/10/11/stm32-serial-port-ros/stm32odom.png" alt=""></p>
<p>此时我们在ROS端可以非常清晰的查看到该信息已经发布，并被我们捕捉到，开一个终端，输入rostopic echo /odom 进行查看：</p>
<p><img src="/2017/10/11/stm32-serial-port-ros/echoodom.png" alt=""></p>
<p>至此，已经完全实现了STM32的串口与ROS进行数据交互，并且测试成功，实际使用时只要添加对应的移动底座运动学解析部分即可，全部代码支持 19.9 元捐助方式获取，包括STM32端的配置、数据打包、数据解析以及 ROS 节点部分的全部代码实现。捐助后邮件联系 核实后即发送。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一直有朋友咨询STM32到底如何与ROS实现信息交互，ROS如何获取移动底座的位置、速度、偏航角等信息，移动底座又是如何实时接收ROS的速度控制命令等。为了更清晰的描述这些问题，最近特意进行了总结归纳，从底层的STM32，到ROS的节点设计都做了详细的论述，放到这里给共同学习ROS的童鞋一个方向。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="STM32 ROS" scheme="http://stevenshi.me/tags/STM32-ROS/"/>
    
  </entry>
  
  <entry>
    <title>STM32F103驱动ADS1118</title>
    <link href="http://stevenshi.me/2017/09/07/stm32-ads1118/"/>
    <id>http://stevenshi.me/2017/09/07/stm32-ads1118/</id>
    <published>2017-09-07T02:21:04.000Z</published>
    <updated>2017-10-11T07:59:12.963Z</updated>
    
    <content type="html"><![CDATA[<p>ADS1118 作为常用温度测量芯片被越来越多的开发者熟知，TI官方给出的是基于 MSP430 的驱动测试程序，由于 STM32 的普及，闲暇中移植了 MSP430 的 ADS1118 驱动程序到 STM32F103 平台下，并进行了测试，特在此记录，以飨读者。<br><a id="more"></a></p>
<h1 id="硬件连接"><a href="#硬件连接" class="headerlink" title="硬件连接"></a>硬件连接</h1><p>使用 STM32F103 的 SPI2 接口连接 ADS1118 的通信接口：</p>
<table>
<thead>
<tr>
<th>STM32F103</th>
<th>ADS1118</th>
</tr>
</thead>
<tbody>
<tr>
<td>PB12</td>
<td>CS</td>
</tr>
<tr>
<td>PB13</td>
<td>SCLK</td>
</tr>
<tr>
<td>PB14</td>
<td>DOUT</td>
</tr>
<tr>
<td>PB15</td>
<td>DIN</td>
</tr>
</tbody>
</table>
<p>ADS1118 手册建议数据线之间接一个50欧电阻，实际测试可不接。ADS1118 电源接3.3V并加滤波电容。</p>
<h1 id="spi-配置"><a href="#SPI-配置" class="headerlink" title="SPI 配置"></a>SPI 配置</h1><p>ADS1118 接口的时序要求如图：<br><img src="/2017/09/07/stm32-ads1118/time.png" alt=""></p>
<p>DIN 接口接收控制器送过来的配置数据，并且在 SCLK 的下降沿将数据锁存读入 ADS1118 内部，并且在 SCLK 的上升沿中将数据送出到 DOUT。基于此将 STM32F103 的 SPI 接口做如下配置，CPOL=0，CPHA = 1;<br>　　<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">void SPI_config(void)&#123;</div><div class="line">	SPI_Cmd(SPI_MASTER, DISABLE);//配置之前先关闭SPI接口</div><div class="line"></div><div class="line">	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;<span class="comment">//全双工</span></div><div class="line">	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;<span class="comment">//主模式</span></div><div class="line">	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;<span class="comment">//8bits</span></div><div class="line">	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;<span class="comment">// CPOL=0</span></div><div class="line">	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;<span class="comment">//CPHA=1</span></div><div class="line">	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;<span class="comment">//CS设置为软件配置</span></div><div class="line">	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;<span class="comment">//通信速率</span></div><div class="line">	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;<span class="comment">//高位在前</span></div><div class="line">	SPI_InitStructure.SPI_CRCPolynomial = <span class="number">7</span>;</div><div class="line">	SPI_Init(SPI_MASTER, &amp;SPI_InitStructure);</div><div class="line">	</div><div class="line">	SPI_Cmd(SPI_MASTER, ENABLE);//配置完成使能SPI接口</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对应 GPIO 的配置：<br>　　<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> SPI<span class="number">_G</span>PIO<span class="number">_</span>Configuration(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">	GPIO<span class="number">_</span>InitTypeDef GPIO<span class="number">_</span>InitStructure;</div><div class="line"></div><div class="line">	<span class="comment">/* Configure SPI_MASTER pins-*/</span></div><div class="line"></div><div class="line">	<span class="comment">// Pin PB13 (SCLK) must be configured as as 50MHz push pull</span></div><div class="line">	GPIO<span class="number">_</span>StructInit(&amp;GPIO<span class="number">_</span>InitStructure);</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_P</span><span class="keyword">in</span> = SPI<span class="number">_M</span>ASTER<span class="number">_P</span>IN<span class="number">_</span>SCK;</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_M</span>ode = GPIO<span class="number">_M</span>ode<span class="number">_</span>AF<span class="number">_P</span>P;</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_</span>Speed = GPIO<span class="number">_</span>Speed<span class="number">_50M</span>Hz;</div><div class="line">	GPIO<span class="number">_</span>Init(SPI<span class="number">_M</span>ASTER<span class="number">_G</span>PIO, &amp;GPIO<span class="number">_</span>InitStructure);</div><div class="line"></div><div class="line">	<span class="comment">// Pin PB14 (MISO) must be configured as as input pull-up</span></div><div class="line">	GPIO<span class="number">_</span>StructInit(&amp;GPIO<span class="number">_</span>InitStructure);</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_P</span><span class="keyword">in</span> = SPI<span class="number">_M</span>ASTER<span class="number">_P</span>IN<span class="number">_M</span>ISO;</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_M</span>ode = GPIO<span class="number">_M</span>ode<span class="number">_</span>IN<span class="number">_</span>FLOATING;</div><div class="line">	GPIO<span class="number">_</span>Init(SPI<span class="number">_M</span>ASTER<span class="number">_G</span>PIO, &amp;GPIO<span class="number">_</span>InitStructure);</div><div class="line"></div><div class="line">	<span class="comment">// Pin PB15 (MOSI) must be configured as as 50MHz push pull</span></div><div class="line">	GPIO<span class="number">_</span>StructInit(&amp;GPIO<span class="number">_</span>InitStructure);</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_P</span><span class="keyword">in</span> = SPI<span class="number">_M</span>ASTER<span class="number">_P</span>IN<span class="number">_M</span>OSI;</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_M</span>ode = GPIO<span class="number">_M</span>ode<span class="number">_</span>AF<span class="number">_P</span>P;</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_</span>Speed = GPIO<span class="number">_</span>Speed<span class="number">_50M</span>Hz;</div><div class="line">	GPIO<span class="number">_</span>Init(SPI<span class="number">_M</span>ASTER<span class="number">_G</span>PIO, &amp;GPIO<span class="number">_</span>InitStructure);</div><div class="line">	</div><div class="line">	<span class="comment">//SPI1 NSS </span></div><div class="line">	GPIO<span class="number">_</span>StructInit(&amp;GPIO<span class="number">_</span>InitStructure);</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_P</span><span class="keyword">in</span> = SPI<span class="number">_M</span>ASTER<span class="number">_P</span>IN<span class="number">_</span>NSS;</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_M</span>ode = GPIO<span class="number">_M</span>ode<span class="number">_</span>Out<span class="number">_P</span>P;</div><div class="line">	GPIO<span class="number">_</span>Init(SPI<span class="number">_M</span>ASTER<span class="number">_G</span>PIO, &amp;GPIO<span class="number">_</span>InitStructure);</div><div class="line"></div><div class="line">	GPIO<span class="number">_</span>SetBits(SPI<span class="number">_M</span>ASTER<span class="number">_G</span>PIO, SPI<span class="number">_M</span>ASTER<span class="number">_P</span>IN<span class="number">_</span>NSS);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另外记得使能端口时钟：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI_RCC_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">	<span class="comment">/* Enable GPIO clock for SPI_MASTER */</span></div><div class="line">	RCC_APB2PeriphClockCmd(SPI_MASTER_GPIO_CLK | RCC_APB2Periph_AFIO, ENABLE);</div><div class="line">	<span class="comment">/* Enable SPI_MASTER Periph clock */</span></div><div class="line">	RCC_APB1PeriphClockCmd(SPI_MASTER_CLK, ENABLE); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="读写实现"><a href="#读写实现" class="headerlink" title="读写实现"></a>读写实现</h1><p>ADS1118 在发送寄存器配置的同时会传输转换结果，手册中提到既支持16bits 模式也支持32bits模式。</p>
<p>16bits模式：</p>
<p><img src="/2017/09/07/stm32-ads1118/16bits.png" alt=""></p>
<p>32bits模式：</p>
<p><img src="/2017/09/07/stm32-ads1118/32bits.png" alt=""></p>
<p>DIN 接口接收寄存器配置的同时DOUT接口输出转换结果，在32bits模式下发送完寄存器配置后第二次可以发送数据0，具体可参考手册。基于此设计数据发送读取函数：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//读写寄存器16bits模式</span></div><div class="line"><span class="keyword">uint16_t</span> SPI_read_write_Reg(<span class="keyword">uint16_t</span> CofigReg)</div><div class="line">&#123;</div><div class="line"></div><div class="line">	getdata1=SPI_send_Byte((<span class="keyword">uint8_t</span>)(CofigReg&gt;&gt;<span class="number">8</span>));</div><div class="line">	getdata2=SPI_send_Byte((<span class="keyword">uint8_t</span>)CofigReg);</div><div class="line"></div><div class="line">	getdata= (<span class="keyword">uint16_t</span>)getdata2|((<span class="keyword">uint16_t</span>)getdata1&lt;&lt;<span class="number">8</span>);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> getdata;</div><div class="line">&#125;</div><div class="line"><span class="keyword">uint8_t</span> SPI_send_Byte(<span class="keyword">uint8_t</span> byte)</div><div class="line">&#123;</div><div class="line"> </div><div class="line">	<span class="keyword">while</span>(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET)&#123;&#125;</div><div class="line">	</div><div class="line">	SPI_I2S_SendData(SPI2, byte);</div><div class="line">	</div><div class="line">	<span class="keyword">while</span>(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)&#123;&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> SPI_I2S_ReceiveData(SPI2);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>获取 ADS1118 的片内温度需要将 ADS1118 的寄存器的第4bit修改为1，启动单次转换将第15bit写1即可：<br>　　<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">float</span> ads1118_get_temperature(void)</div><div class="line">&#123;</div><div class="line">	uint16_t <span class="keyword">adc=0;</span></div><div class="line">	float value<span class="number">=0</span><span class="comment">;</span></div><div class="line">	adsConfigReg.<span class="keyword">stru.NOP </span>    =  DATA_VALID<span class="comment">;</span></div><div class="line">	adsConfigReg.<span class="keyword">stru.TS_MODE </span>=  TEMPERATURE_MODE<span class="comment">;</span></div><div class="line">	adsConfigReg.<span class="keyword">stru.DR </span>     =  DR_8_SPS<span class="comment">;</span></div><div class="line">	adsConfigReg.<span class="keyword">stru.MODE </span>   =  SIGNLE_SHOT<span class="comment">;</span></div><div class="line">	adsConfigReg.<span class="keyword">stru.OS </span>     =  SINGLE_CONVER_START<span class="comment">;   </span></div><div class="line">	</div><div class="line">	ADS1118_ENABLE<span class="comment">;</span></div><div class="line"> </div><div class="line">	<span class="keyword">adc </span>= SPI_read_write_Reg(adsConfigReg<span class="meta">.word</span>)<span class="comment">;</span></div><div class="line">	</div><div class="line">	//conver to temperture</div><div class="line">	<span class="meta">if</span>(<span class="keyword">adc&amp;0x8000)</span></div><div class="line">	&#123;</div><div class="line">		//-xx.xxx c</div><div class="line">		<span class="keyword">adc&gt;&gt;=2;</span></div><div class="line">		value=(<span class="number">0x3fff</span>-<span class="keyword">adc+1)*(-0.03125);</span></div><div class="line">	&#125;</div><div class="line">	<span class="meta">else</span></div><div class="line">	&#123;</div><div class="line">		//+xx.xxx c</div><div class="line">		<span class="keyword">adc&gt;&gt;=2;</span></div><div class="line">		value<span class="symbol">=adc</span>*<span class="number">0</span>.<span class="number">03125</span><span class="comment">;     </span></div><div class="line">	&#125;</div><div class="line">	ADS1118_DISABLE<span class="comment">;</span></div><div class="line">	return value<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ADS1118默认开启ADC模式，通过配置寄存器的12-14bit可以选择开启哪个通道，具体可参考手册。另外关于片内温度模式时，使用的是14bit左对齐模式。而且ADS1118的转换结果中，负数使用二进制补码格式，因此需要做一个转换，每个值代表0.03125℃，测试中的SPI通信数据：</p>
<p><img src="/2017/09/07/stm32-ads1118/spi.png" alt=""></p>
<h1 id="热电偶"><a href="#热电偶" class="headerlink" title="热电偶"></a>热电偶</h1><p>ADS1118 可以使用差分方式连接两路热电偶温度传感器，本篇也是参考了TI官方文档 <a href="http://www.ti.com.cn/cn/lit/ug/zhcu067/zhcu067.pdf" target="_blank" rel="external">使用ADS1118进行精密热电偶测量</a>。冷端温度读取片内温度即可，将片内温度转换成热电偶对应的电压，然后加上热端获取的电压值，反向查表即可获取热电偶温度值。实际测试时使用的是K型热电偶，从网上查到K型热电偶的温度电压对应表，进行查表：<br>　　<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">type_k_thermo_lookup_table type_k_thermo_lookup[<span class="number">16</span>] = &#123;</div><div class="line">&#123;<span class="number">-200</span>,<span class="number">-5.891</span>&#125;,</div><div class="line">&#123;<span class="number">-100</span>,<span class="number">-3.554</span>&#125;,</div><div class="line">&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,</div><div class="line">&#123;<span class="number">100</span>,<span class="number">4.096</span>&#125;,</div><div class="line">&#123;<span class="number">200</span>,<span class="number">8.138</span>&#125;,</div><div class="line">&#123;<span class="number">300</span>,<span class="number">12.209</span>&#125;,</div><div class="line">&#123;<span class="number">400</span>,<span class="number">16.397</span>&#125;,</div><div class="line">&#123;<span class="number">500</span>,<span class="number">20.644</span>&#125;,</div><div class="line">&#123;<span class="number">600</span>,<span class="number">24.905</span>&#125;,</div><div class="line">&#123;<span class="number">700</span>,<span class="number">29.129</span>&#125;,</div><div class="line">&#123;<span class="number">800</span>,<span class="number">33.275</span>&#125;,</div><div class="line">&#123;<span class="number">900</span>,<span class="number">37.326</span>&#125;,</div><div class="line">&#123;<span class="number">1000</span>,<span class="number">41.276</span>&#125;,</div><div class="line">&#123;<span class="number">1100</span>,<span class="number">45.119</span>&#125;,</div><div class="line">&#123;<span class="number">1200</span>,<span class="number">48.838</span>&#125;,</div><div class="line">&#123;<span class="number">1300</span>,<span class="number">52.410</span>&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>测试时冷端温度一般高于室内温度2摄氏度左右，因为芯片内部发热所致，获取差分输入的代码设置如下：<br>　　<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">uint16_t</span> ads1118_get_differential_0_1(uint8_t PGA)</div><div class="line">&#123;</div><div class="line">	uint16_t <span class="keyword">adc=0;</span></div><div class="line"></div><div class="line">	ADS_InitTypeDef ConfigReg<span class="comment">;</span></div><div class="line"></div><div class="line">	ConfigReg.<span class="keyword">stru.NOP	</span>=	DATA_VALID<span class="comment">;</span></div><div class="line">	ConfigReg.<span class="keyword">stru.TS_MODE	</span>=	<span class="keyword">ADC_MODE;</span></div><div class="line">	ConfigReg.<span class="keyword">stru.DR	</span>=	DR_860_SPS<span class="comment">;</span></div><div class="line">	ConfigReg.<span class="keyword">stru.PGA	</span>=	PGA<span class="comment">;</span></div><div class="line">	ConfigReg.<span class="keyword">stru.MODE	</span>=	SIGNLE_SHOT<span class="comment">;</span></div><div class="line">	ConfigReg.<span class="keyword">stru.OS	</span>=	SINGLE_CONVER_START<span class="comment">;   //high</span></div><div class="line">	ConfigReg.<span class="keyword">stru.MUX	</span>=	AINPN_0_1<span class="comment">;</span></div><div class="line">	ConfigReg.<span class="keyword">stru.PULLUP	</span>=	PULL_UP_EN<span class="comment">;</span></div><div class="line">	ConfigReg.<span class="keyword">stru.RESV	</span>=	CONFIG_BIT_RESV<span class="comment">;</span></div><div class="line">	ADS1118_ENABLE<span class="comment">;</span></div><div class="line">	delay_us((uint32_t)<span class="number">1</span>)<span class="comment">;</span></div><div class="line">	<span class="keyword">adc </span>= SPI_read_write_Reg(ConfigReg<span class="meta">.word</span>)<span class="comment">;</span></div><div class="line">	</div><div class="line">	ADS1118_DISABLE<span class="comment">;</span></div><div class="line">	delay_ms(<span class="number">1</span>)<span class="comment">;</span></div><div class="line">	ADS1118_ENABLE<span class="comment">;</span></div><div class="line">	ConfigReg.<span class="keyword">stru.NOP	</span>=	DATA_INVALID<span class="comment">;</span></div><div class="line">	ConfigReg.<span class="keyword">stru.TS_MODE	</span>=	<span class="keyword">ADC_MODE;</span></div><div class="line">	ConfigReg.<span class="keyword">stru.DR	</span>=	DR_860_SPS<span class="comment">;</span></div><div class="line">	ConfigReg.<span class="keyword">stru.PGA	</span>=	PGA<span class="comment">;</span></div><div class="line">	ConfigReg.<span class="keyword">stru.MODE	</span>=	SIGNLE_SHOT<span class="comment">;</span></div><div class="line">	ConfigReg.<span class="keyword">stru.OS	</span>=	SINGLE_CONVER_START<span class="comment">;   //high</span></div><div class="line">	ConfigReg.<span class="keyword">stru.MUX	</span>=	AINPN_0_1<span class="comment">;</span></div><div class="line">	ConfigReg.<span class="keyword">stru.PULLUP	</span>=	PULL_UP_EN<span class="comment">;</span></div><div class="line">	ConfigReg.<span class="keyword">stru.RESV	</span>=	CONFIG_BIT_RESV<span class="comment">;</span></div><div class="line">	delay_us((uint32_t)<span class="number">1</span>)<span class="comment">;</span></div><div class="line">	</div><div class="line">	//等待Dout给出数据有效信号--从高变低</div><div class="line">	<span class="meta">while</span>(GPIO_ReadInputDataBit(SPI_MASTER_GPIO,SPI_MASTER_PIN_MISO))<span class="comment">;</span></div><div class="line">	<span class="keyword">adc </span>= SPI_read_write_Reg(ConfigReg<span class="meta">.word</span>)<span class="comment">;</span></div><div class="line">	delay_us(<span class="number">1</span>)<span class="comment">;</span></div><div class="line">	ADS1118_DISABLE<span class="comment">;</span></div><div class="line">	return   <span class="keyword">adc;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实际测试时，温度精度在2摄氏度左右，并没有达到TI官方公布的精度，在硬件电路方面有待进一步提高。全部代码支持 9.9 元捐助方式获取，谢谢理解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ADS1118 作为常用温度测量芯片被越来越多的开发者熟知，TI官方给出的是基于 MSP430 的驱动测试程序，由于 STM32 的普及，闲暇中移植了 MSP430 的 ADS1118 驱动程序到 STM32F103 平台下，并进行了测试，特在此记录，以飨读者。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://stevenshi.me/categories/linux/"/>
    
    
      <category term="STM32F103 ADS1118" scheme="http://stevenshi.me/tags/STM32F103-ADS1118/"/>
    
  </entry>
  
  <entry>
    <title>STM32如何在DMA模式下实现printf</title>
    <link href="http://stevenshi.me/2017/09/06/stm32-dma-printf/"/>
    <id>http://stevenshi.me/2017/09/06/stm32-dma-printf/</id>
    <published>2017-09-06T07:32:26.000Z</published>
    <updated>2017-09-14T08:56:29.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在调试stm32f103芯片时，想在串口打印一些调试信息，总感觉没有linux下那么顺手。搜索一番，官方有解决方案，但限于使用一般串口模式，而如果使用DMA则实现起来麻烦一些，为了在DMA模式下使用printf，特做此记录。<br><a id="more"></a></p>
<h1 id="一般模式"><a href="#一般模式" class="headerlink" title="一般模式"></a>一般模式</h1><p>一般模式下，就是重定义fputc函数，将输出重定向至串口。首先包含头文件 stdio.h,然后重写fputc函数：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __GNUC__</span></div><div class="line"><span class="comment">/* With GCC/RAISONANCE, small printf (option LD Linker-&gt;Libraries-&gt;Small printf set to 'Yes') calls __io_putchar() */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PUTCHAR_PROTOTYPE int __io_putchar(int ch)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __GNUC__ */</span></span></div><div class="line">PUTCHAR_PROTOTYPE</div><div class="line">&#123;</div><div class="line">  <span class="comment">/* Place your implementation of fputc here */</span></div><div class="line">  <span class="comment">/* e.g. write a character to the USART */</span></div><div class="line">  USART_SendData(USART1, (<span class="keyword">uint8_t</span>) ch);</div><div class="line">  <span class="comment">/* Loop until the end of transmission */</span></div><div class="line">  <span class="keyword">while</span> (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);</div><div class="line">	</div><div class="line">  <span class="keyword">return</span> ch;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样在使用printf函数时，会自动调用fputc函数。另外在工程属性的 “Target” -&gt; “Code Generation” 选项中勾选 “Use MicroLIB”</p>
<h1 id="dma模式"><a href="#DMA模式" class="headerlink" title="DMA模式"></a>DMA模式</h1><p>如果串口使用的是DMA发送，如何实现printf功能呢？串口使用DMA发送数据时，只需要将发送缓存的首地址以及数据长度给DMA即可。那么只要计算出printf要发送的数据首地址与长度也就可以给DMA去发送了。我们可以将要发送的数据放到一个队列里，CPU只负责搬运该数据，将数据的长度与首地址交给DMA即可实现printf的功能。我们简单的修改一下fputc函数：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">PUTCHAR_PROTOTYPE</div><div class="line">&#123;</div><div class="line">  <span class="comment">/* Place your implementation of fputc here */</span></div><div class="line">  <span class="comment">/* e.g. write a character to the USART */</span></div><div class="line">  <span class="comment">//USART_SendData(USART1, (uint8_t) ch);</span></div><div class="line">  <span class="comment">/* Loop until the end of transmission */</span></div><div class="line"> <span class="comment">// while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);</span></div><div class="line">  remote_data_x_usart_In_Queue((<span class="keyword">uint8_t</span>)ch);<span class="comment">//将要发送的数据放入环形队列中</span></div><div class="line">  <span class="keyword">return</span> ch;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另外设计一个函数将数据从队列中取出，并将数据的首地址和长度给DMA：<br>　　<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">int</span> remote_data_x_usart_dma_ctl(<span class="keyword">void</span>) </div><div class="line">&#123; 	</div><div class="line">	uint32_t <span class="built_in">num</span>=<span class="number">0</span>; 	uint8_t data; 	</div><div class="line">	<span class="keyword">if</span>(DMA_GetCurrDataCounter(USARTm_Tx_DMA_Channe)==<span class="number">0</span>) </div><div class="line">	&#123;</div><div class="line">		DMA_Cmd(USARTm_Tx_DMA_Channe,DISABLE); 		</div><div class="line">		<span class="keyword">while</span>((remote_data_x_usart_Out_Queue(&amp;data))!=<span class="number">0</span>)<span class="comment">//数据出列	</span></div><div class="line">		&#123;	 			</div><div class="line">			USARTmTxBuffer[<span class="built_in">num</span>]=data; 			</div><div class="line">			<span class="built_in">num</span>++; 			</div><div class="line">			<span class="keyword">if</span>(<span class="built_in">num</span>==USARTm_Tx_BUFFER_SIZE) 			</div><div class="line">				<span class="keyword">break</span>; 		</div><div class="line">		&#125; 		</div><div class="line">		<span class="keyword">if</span>(<span class="built_in">num</span>&gt;<span class="number">0</span>) 		</div><div class="line">		&#123; 			</div><div class="line">			remote_data_x_usart_dma_start_tx((uint32_t)USARTmTxBuffer,<span class="built_in">num</span>);<span class="comment">//将数据首地址与长度给DMA</span></div><div class="line">		&#125; 		</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>; 	</div><div class="line">	&#125; 	</div><div class="line">	<span class="keyword">else</span> 	</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样即可实现DMA模式下的 printf 功能。不过每次调用printf时必须调用一次 remote_data_x_usart_dma_ctl 函数。为了减少麻烦可以将该函数放到 sysTick 中断中，让CPU每次判断队列是否不为空，这样可能会降低系统效率，但也没降低多少性能。<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (usTicks != <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		usTicks--;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	remote_data_x_usart_dma_ctl();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>数据的入列与出列可以简单设置如下：<br>　　<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将数据插入队列</span></div><div class="line">uint32_t remote_data_x_usart_In_Queue(uint8_t <span class="keyword">data</span>) </div><div class="line">&#123; 	</div><div class="line">	<span class="keyword">if</span>(USARTm_Tx_Buf_Queue.USARTm_Tx_COUNTER &lt;USARTm_Tx_BUFFER_SIZE)<span class="comment">//判断队列是否满，不满才进行以下操作</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(USARTm_Tx_Buf_Queue.USARTm_Tx_PTR_HEAD &gt;= USARTm_Tx_BUFFER_SIZE) <span class="comment">//队列头指针超出队列宽度</span></div><div class="line">				USARTm_Tx_Buf_Queue.USARTm_Tx_PTR_HEAD = <span class="number">0</span>; <span class="comment">//头指针归零 		</span></div><div class="line">			USARTm_Tx_Buf_Queue.USARTm_Tx_Buffer[USARTm_Tx_Buf_Queue.USARTm_Tx_PTR_HEAD] = <span class="keyword">data</span>; <span class="comment">//将数据入列		</span></div><div class="line">			USARTm_Tx_Buf_Queue.USARTm_Tx_PTR_HEAD++; 	<span class="comment">//头指针移动加一	</span></div><div class="line">			USARTm_Tx_Buf_Queue.USARTm_Tx_COUNTER++;  	<span class="comment">//队列宽度加一</span></div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>; 	</div><div class="line">		&#125; 		</div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>;	 	 </div><div class="line">&#125;</div><div class="line"><span class="comment">//从队列中获取一个数</span></div><div class="line">uint32_t remote_data_x_usart_Out_Queue(uint8_t *<span class="keyword">data</span>) </div><div class="line">&#123; 	</div><div class="line">	uint32_t num;</div><div class="line">	<span class="keyword">if</span>(USARTm_Tx_Buf_Queue.USARTm_Tx_COUNTER &gt; <span class="number">0</span>) 	<span class="comment">//判断队列是否为空，不为空才能提取</span></div><div class="line">		&#123; 		</div><div class="line">			<span class="keyword">if</span>(USARTm_Tx_Buf_Queue.USARTm_Tx_PTR_TAIL &gt;= USARTm_Tx_BUFFER_SIZE)<span class="comment">//盘对尾指针是否超出队列宽度			</span></div><div class="line">				USARTm_Tx_Buf_Queue.USARTm_Tx_PTR_TAIL = <span class="number">0</span>;<span class="comment">//超出就归零</span></div><div class="line">			num = USARTm_Tx_Buf_Queue.USARTm_Tx_COUNTER;<span class="comment">//获取队列宽度	</span></div><div class="line">			*<span class="keyword">data</span> = USARTm_Tx_Buf_Queue.USARTm_Tx_Buffer[USARTm_Tx_Buf_Queue.USARTm_Tx_PTR_TAIL]; <span class="comment">//获取一个数据	</span></div><div class="line">			USARTm_Tx_Buf_Queue.USARTm_Tx_PTR_TAIL++; <span class="comment">//尾指针移动加一	</span></div><div class="line">			USARTm_Tx_Buf_Queue.USARTm_Tx_COUNTER--; <span class="comment">//数据被提取，队列宽度减一		</span></div><div class="line">			<span class="keyword">return</span> num; <span class="comment">//返回队列宽度</span></div><div class="line">		&#125; 	</div><div class="line">	<span class="keyword">else</span> 	</div><div class="line">		&#123; 		</div><div class="line">			*<span class="keyword">data</span> = <span class="number">0xFF</span>;<span class="comment">//队列为空填充一个值</span></div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//返回队列宽度</span></div><div class="line">		&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于DMA的配置可参考STM32官方库，测试时sysTick设置的是1ms中断，系统连接一个ADS1118采集4路模拟量并采集片内温度，显示效果：</p>
<p><img src="/2017/09/06/stm32-dma-printf/printf.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在调试stm32f103芯片时，想在串口打印一些调试信息，总感觉没有linux下那么顺手。搜索一番，官方有解决方案，但限于使用一般串口模式，而如果使用DMA则实现起来麻烦一些，为了在DMA模式下使用printf，特做此记录。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://stevenshi.me/categories/linux/"/>
    
    
      <category term="STM32 DMA Printf" scheme="http://stevenshi.me/tags/STM32-DMA-Printf/"/>
    
  </entry>
  
  <entry>
    <title>也来聊聊CAN总线</title>
    <link href="http://stevenshi.me/2017/08/24/can-bus/"/>
    <id>http://stevenshi.me/2017/08/24/can-bus/</id>
    <published>2017-08-24T07:35:54.000Z</published>
    <updated>2017-08-25T07:52:40.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="can-的特点"><a href="#CAN-的特点" class="headerlink" title="CAN 的特点"></a>CAN 的特点</h1><p>为什么汽车行业都用 CAN 总线？它有什么特点？它为什么能存在于工业界这么多年至今仍被广泛应用着？它到底有什么过人之处？因项目需要，重拾 CAN 总线，关于 CAN 的资料浩如烟海，这里只聊干货。<br><a id="more"></a></p>
<h2 id="差分传输"><a href="#差分传输" class="headerlink" title="差分传输"></a>差分传输</h2><p>由于 CAN 总线使用差分信号传输，只需要三根线，CAN_H,CAN_L,GND，其中 GND 作为屏蔽层使用。这种设计方式使得它的传输距离远、可靠性高，最远可达10公里，最高速率可达 1Mbps 。</p>
<h2 id="多主结构"><a href="#多主结构" class="headerlink" title="多主结构"></a>多主结构</h2><p>由于 CAN 设备不需要使用地址标识每个挂接在总线上的设备，它是基于内容的寻址方式，只需要ID来标识，因此 CAN 总线上的设备没有主从之分，任意节点都可以发起通信；</p>
<h2 id="错误检测"><a href="#错误检测" class="headerlink" title="错误检测"></a>错误检测</h2><p>出错的 CAN 节点可自动切断与总线的连接，不影响其他节点通信；如果自身错误超过128个，CAN 节点就会自动关闭，切断与总线的连接。</p>
<h1 id="仲裁"><a href="#仲裁" class="headerlink" title="仲裁"></a>仲裁</h1><p>CAN 总线上的设备不分主从，任意设备都可以主动发送消息到总线，所有挂接在总线上的设备都可以收到该消息；CAN 设备具有载波侦听功能，即设备在发送报文前会先监听总线状态，当总线处于空闲时才会使能发送。CAN 总线使用仲裁来判定哪个节点最终拥有总线使用权，它利用线与特性，当某一时刻出现两个或以上的节点同时操作总线时，CAN 设备在发送消息的同时也检测总线状态，如果自己发送的数据与检测回来的数据不同，则主动放弃总线使用权。当一个节点发送1，另外一节点发送0时，则线与后总线为0，那么发送0的节点则拥有了总线使用权，它可以继续发送数据，而发送1的节点则退出总线使用权。举例说明该情况，假如某一时刻有两个 CAN 节点同时操作总线，消息的前面都会附加11位的 ID 新版提升为29位，这个 ID 决定了消息的优先级，ID 数字越小优先级则越高：<br>   <figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">节点  ID </div><div class="line"> <span class="keyword">A</span>    <span class="number">11110001000</span></div><div class="line"> B    <span class="number">11101110111</span></div><div class="line">总线   <span class="number">11100000000</span></div></pre></td></tr></table></figure></p>
<p>如上面，两个节点A B 同时发送信息，在发送到 ID 的第4位时，B节点发送的是0，A节点发送的是1，线与之后总线为0，因此B节点获取了总线使用权，A节点退出。CAN 总线上的0称为显性，1称为隐性，因为0总是拥有总线使用权。总线上的设备都可以接收任意节点发来的消息，根据ID号判断消息是否是自己需要的，如果发现ID号与自己需要的信息不符，则主动放弃接收，因此它是基于内容的寻址方式。</p>
<h1 id="数据帧结构"><a href="#数据帧结构" class="headerlink" title="数据帧结构"></a>数据帧结构</h1><p><img src="/2017/08/24/can-bus/dataframe.png" alt=""><br>这张图片摘自 wikipedia,CAN 数据的帧结构包括仲裁、控制域、数据域、CRC校验以及结束部分。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CAN-的特点&quot;&gt;&lt;a href=&quot;#CAN-的特点&quot; class=&quot;headerlink&quot; title=&quot;CAN 的特点&quot;&gt;&lt;/a&gt;CAN 的特点&lt;/h1&gt;&lt;p&gt;为什么汽车行业都用 CAN 总线？它有什么特点？它为什么能存在于工业界这么多年至今仍被广泛应用着？它到底有什么过人之处？因项目需要，重拾 CAN 总线，关于 CAN 的资料浩如烟海，这里只聊干货。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://stevenshi.me/categories/linux/"/>
    
    
      <category term="CAN" scheme="http://stevenshi.me/tags/CAN/"/>
    
  </entry>
  
  <entry>
    <title>ROS通过串口控制移动底座</title>
    <link href="http://stevenshi.me/2017/07/18/control-mobile-base-by-serial/"/>
    <id>http://stevenshi.me/2017/07/18/control-mobile-base-by-serial/</id>
    <published>2017-07-18T07:08:51.000Z</published>
    <updated>2017-10-11T03:34:13.756Z</updated>
    
    <content type="html"><![CDATA[<p>移动底座与ROS上层的通信一般采用串口或者CAN接口，本次设计选用串口与ROS上层通信。Navigation Stack 中发布给 base_controller 的话题为 cmd_vel ，因此需要设计一个节点用于接收 cmd_vel 话题，获取该话题中的消息将其转换成移动底座可识别的速度及角速度指令，通过串口发送给移动底座，从而控制移动底座按既定要求运动。该节点还需要接收底座的通过串口上传过来的里程编码消息并转换成里程计消息发布到 ROS 上层，为 ROS 导航提供必须的里程计消息。<br><a id="more"></a></p>
<h1 id="订阅cmd_vel话题"><a href="#订阅cmd-vel话题" class="headerlink" title="订阅cmd_vel话题"></a>订阅cmd_vel话题</h1><p>设计一个节点，我们暂时命名为 my_serial_node ,在该节点中借助 <a href="https://github.com/wjwwood/serial" target="_blank" rel="external">ros-serial</a> 实现串口的收发功能，并订阅话题 cmd_vel, 为了方便测试我们这里暂时订阅 /turtle1/cmd_vel 话题，详细看代码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;serial/serial.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;std_msgs/String.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;std_msgs/Empty.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;geometry_msgs/Twist.h&gt;</span></span></div><div class="line"> </div><div class="line">serial::Serial ser;</div><div class="line"> </div><div class="line"><span class="comment">//订阅turtle1/cmd_vel话题的回调函数，用于显示速度以及角速度</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cmd_vel_callback</span><span class="params">(<span class="keyword">const</span> geometry_msgs::Twist&amp; cmd_vel)</span></span>&#123;</div><div class="line">    ROS_INFO(<span class="string">"I heard linear velocity: x-[%f],y-[%f],"</span>,cmd_vel.linear.x,cmd_vel.linear.y);</div><div class="line">    ROS_INFO(<span class="string">"I heard angular velocity: [%f]"</span>,cmd_vel.angular.z);</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Twist Received"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line">    ros::init(argc, argv, <span class="string">"my_serial_node"</span>);</div><div class="line">    ros::NodeHandle nh;</div><div class="line"> </div><div class="line">    </div><div class="line">    <span class="comment">//订阅/turtle1/cmd_vel话题用于测试 $ rosrun turtlesim turtle_teleop_key</span></div><div class="line">    ros::Subscriber write_sub = nh.subscribe(<span class="string">"/turtle1/cmd_vel"</span>,<span class="number">1000</span>,cmd_vel_callback);</div><div class="line">    ros::Publisher read_pub = nh.advertise&lt;std_msgs::String&gt;(<span class="string">"sensor"</span>, <span class="number">1000</span>);</div><div class="line"> </div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">        ser.setPort(<span class="string">"/dev/ttyUSB0"</span>);</div><div class="line">        ser.setBaudrate(<span class="number">115200</span>);</div><div class="line">        serial::Timeout to = serial::Timeout::simpleTimeout(<span class="number">1000</span>);</div><div class="line">        ser.setTimeout(to);</div><div class="line">        ser.open();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (serial::IOException&amp; e)</div><div class="line">    &#123;</div><div class="line">        ROS_ERROR_STREAM(<span class="string">"Unable to open port "</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span>(ser.isOpen())&#123;</div><div class="line">        ROS_INFO_STREAM(<span class="string">"Serial Port initialized"</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>可以通过以下方式简单的测试一下订阅的话题是否可行：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtle_teleop_key</span></div></pre></td></tr></table></figure></p>
<p>在另外一个 terminal 中运行上面的节点:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun my_serial_node my_serial_node</span></div></pre></td></tr></table></figure></p>
<p>当用手按下上下左右方向键时会看到实时的打印速度信息：<br><img src="/2017/07/18/control-mobile-base-by-serial/cmd_vel.jpg" alt=""></p>
<h1 id="串口发送"><a href="#串口发送" class="headerlink" title="串口发送"></a>串口发送</h1><p>节点订阅了 cmd_vel 话题，将速度、角速度数据提取出来之后，需要将这些信息以固定的协议格式通过串口送至移动底座，移动底座接收该命令并执行该命令。这里的协议格式可自行定义，也可以直接发送速度、角速度数据到移动底座；本次开发定义格式如下：</p>
<table>
<thead>
<tr>
<th>head</th>
<th>head</th>
<th>A-speed</th>
<th>B-speed</th>
<th>C-speed</th>
<th>CRC</th>
</tr>
</thead>
<tbody>
<tr>
<td>0xff</td>
<td>0xfe</td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>u8</td>
</tr>
</tbody>
</table>
<p>因此串口发送的总字节数是15字节，在获取到cmd_vel话题后提取有效数据并打包送至底层，串口发送借助 <a href="https://github.com/wjwwood/serial" target="_blank" rel="external">ros-serial</a> 的 write 函数功能即可。<br>　　<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">serial.<span class="built_in">write</span>(<span class="built_in">buffer</span>,buffersize)</div></pre></td></tr></table></figure></p>
<h1 id="串口接收与发布-odometry-话题"><a href="#串口接收与发布-odometry-话题" class="headerlink" title="串口接收与发布 odometry 话题"></a>串口接收与发布 odometry 话题</h1><p>设计本节点还需要通过串口从移动底座获取里程计信息，并发布该里程计信息，为 Navigation stack 提供必要的 odometry 信息。串口接收的数据格式定义如下：</p>
<table>
<thead>
<tr>
<th>head</th>
<th>head</th>
<th>x-position</th>
<th>y-position</th>
<th>x-speed</th>
<th>y-speed</th>
<th>angular-speed</th>
<th>pose-angular</th>
<th>CRC</th>
</tr>
</thead>
<tbody>
<tr>
<td>0xff</td>
<td>0xae</td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>u8</td>
</tr>
</tbody>
</table>
<p>因此串口接收数据总字节数为27字节，串口接收完成后通过校验分析数据无误后，提取对应数据填充到 odometry 消息中，并发布出去。串口接收 <a href="https://github.com/wjwwood/serial" target="_blank" rel="external">ros-serial</a> 提供了很多接口函数，因为底层发送的都是16进制格式，因此数据接收我选择了 Serial::read (uint8_t *buffer, size_t size) 函数，这个可以从 <a href="https://github.com/wjwwood/serial" target="_blank" rel="external">ros-serial</a> 的源码中查到。里程计消息的发布可以参考站内文章: <a href="/2017/07/07/ros-primary-tutorial-15/" title="ROS初级十五 发布里程计消息">ROS初级十五 发布里程计消息</a><br>运动学解析函数<br>　　<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**********************************************************</span></div><div class="line"> * 运动学解析函数 将获取的 x y 方向的线速度以及角速度转变成</div><div class="line"> * 移动底座三个轮子的速度，并通过串口发送出去</div><div class="line"> * VA = Vx + L*W</div><div class="line"> * VB = -Vx*cosθ + Vy*sinθ + L*W</div><div class="line"> * VC = -Vx*cosθ - Vy*sinθ + L*W</div><div class="line"> * θ 为轮子与移动底座坐标系X轴的夹角，此处为60°</div><div class="line"> * VA VB VC 分别为三个轮子的速度</div><div class="line"> * Vx Vy 为移动底座在x y 方向的速度</div><div class="line"> * W 为移动底座绕Z轴的角速度 </div><div class="line"> * L 为三个轮子到移动底座中心的距离 此处为0.15m</div><div class="line"> * ********************************************************/</div><div class="line">void kinematics_analysis(const geometry_msgs::<span class="symbol">Twist</span>&amp; cmd_vel)&#123;</div><div class="line">	float_union <span class="symbol">VA</span>,<span class="symbol">VB</span>,<span class="symbol">VC</span>;</div><div class="line">	<span class="symbol">VA</span>.fvalue = cmd_vel.linear.x + <span class="number">0.15</span>*cmd_vel.angular.z;</div><div class="line">	<span class="symbol">VB</span>.fvalue = -cmd_vel.linear.x * <span class="number">0.5</span> + cmd_vel.linear.y * <span class="number">0.867</span> + <span class="number">0.15</span>*cmd_vel.angular.z;</div><div class="line">	<span class="symbol">VC</span>.fvalue = -cmd_vel.linear.x * <span class="number">0.5</span> - cmd_vel.linear.y * <span class="number">0.867</span> + <span class="number">0.15</span>*cmd_vel.angular.z;</div><div class="line">	memset(s_buffer,<span class="number">0</span>,sizeof(s_buffer));</div><div class="line">	//数据打包</div><div class="line">	s_buffer[<span class="number">0</span>] = <span class="number">0xff</span>;</div><div class="line">	s_buffer[<span class="number">1</span>] = <span class="number">0xfe</span>;</div><div class="line">	//<span class="symbol">VA</span></div><div class="line">	s_buffer[<span class="number">2</span>] = <span class="symbol">VA</span>.cvalue[<span class="number">0</span>];</div><div class="line">	s_buffer[<span class="number">3</span>] = <span class="symbol">VA</span>.cvalue[<span class="number">1</span>];</div><div class="line">	s_buffer[<span class="number">4</span>] = <span class="symbol">VA</span>.cvalue[<span class="number">2</span>];</div><div class="line">	s_buffer[<span class="number">5</span>] = <span class="symbol">VA</span>.cvalue[<span class="number">3</span>];</div><div class="line">	//<span class="symbol">VB</span></div><div class="line">	s_buffer[<span class="number">6</span>] = <span class="symbol">VB</span>.cvalue[<span class="number">0</span>];</div><div class="line">	s_buffer[<span class="number">7</span>] = <span class="symbol">VB</span>.cvalue[<span class="number">1</span>];</div><div class="line">	s_buffer[<span class="number">8</span>] = <span class="symbol">VB</span>.cvalue[<span class="number">2</span>];</div><div class="line">	s_buffer[<span class="number">9</span>] = <span class="symbol">VB</span>.cvalue[<span class="number">3</span>];</div><div class="line">	//<span class="symbol">VC</span></div><div class="line">	s_buffer[<span class="number">10</span>] = <span class="symbol">VC</span>.cvalue[<span class="number">0</span>];</div><div class="line">	s_buffer[<span class="number">11</span>] = <span class="symbol">VC</span>.cvalue[<span class="number">1</span>];</div><div class="line">	s_buffer[<span class="number">12</span>] = <span class="symbol">VC</span>.cvalue[<span class="number">2</span>];</div><div class="line">	s_buffer[<span class="number">13</span>] = <span class="symbol">VC</span>.cvalue[<span class="number">3</span>];</div><div class="line">	//<span class="symbol">CRC</span></div><div class="line">	s_buffer[<span class="number">14</span>] = s_buffer[<span class="number">2</span>]^s_buffer[<span class="number">3</span>]^s_buffer[<span class="number">4</span>]^s_buffer[<span class="number">5</span>]^s_buffer[<span class="number">6</span>]^s_buffer[<span class="number">7</span>]^</div><div class="line">					s_buffer[<span class="number">8</span>]^s_buffer[<span class="number">9</span>]^s_buffer[<span class="number">10</span>]^s_buffer[<span class="number">11</span>]^s_buffer[<span class="number">12</span>]^s_buffer[<span class="number">13</span>];</div><div class="line">	ser.write(s_buffer,sBUFFERSIZE);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>在与底盘实际通信前我们先用两台电脑进行串口的通信测试，并查看发布的 odometry 消息。一台电脑跑ROS并通过串口与另一台电脑连接，串口监控软件送出一组模拟数据：</p>
<p>　　<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">0xff</span> <span class="number">0xae</span> <span class="number">0x01</span> <span class="number">0x02</span> <span class="number">0x03</span> <span class="number">0x04</span> <span class="number">0x05</span> </div><div class="line"><span class="number">0x06</span> <span class="number">0x07</span> <span class="number">0x08</span> <span class="number">0x09</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x02</span> </div><div class="line"><span class="number">0x03</span> <span class="number">0x04</span> <span class="number">0x05</span> <span class="number">0x06</span> <span class="number">0x07</span> <span class="number">0x08</span> <span class="number">0x09</span> </div><div class="line"><span class="number">0x00</span> <span class="number">0x12</span> <span class="number">0x13</span> <span class="number">0x14</span> <span class="number">0x15</span> <span class="number">0x00</span></div></pre></td></tr></table></figure></p>
<p>运行节点：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun my_serial_node my_serial_node</span></div></pre></td></tr></table></figure></p>
<p>通过串口监控软件不停的发送上述数据帧，并通过以下命令查看话题：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rostopic <span class="built_in">echo</span> /odom</span></div></pre></td></tr></table></figure></p>
<p>可以看到串口接收到底层送来的数据并实时的进行发布：<br><img src="/2017/07/18/control-mobile-base-by-serial/odom.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移动底座与ROS上层的通信一般采用串口或者CAN接口，本次设计选用串口与ROS上层通信。Navigation Stack 中发布给 base_controller 的话题为 cmd_vel ，因此需要设计一个节点用于接收 cmd_vel 话题，获取该话题中的消息将其转换成移动底座可识别的速度及角速度指令，通过串口发送给移动底座，从而控制移动底座按既定要求运动。该节点还需要接收底座的通过串口上传过来的里程编码消息并转换成里程计消息发布到 ROS 上层，为 ROS 导航提供必须的里程计消息。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS serial" scheme="http://stevenshi.me/tags/ROS-serial/"/>
    
  </entry>
  
  <entry>
    <title>ROS中级二 利用Rviz实时观测模拟SLAM过程</title>
    <link href="http://stevenshi.me/2017/07/11/ros-intermediate-tutorial-2/"/>
    <id>http://stevenshi.me/2017/07/11/ros-intermediate-tutorial-2/</id>
    <published>2017-07-11T07:05:54.000Z</published>
    <updated>2017-07-11T08:15:32.793Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://wiki.ros.org/rviz" target="_blank" rel="external">Rviz</a> 是 ROS 提供的一个非常强大的图形化显示工具，在实际机器人上建图之前我们先使用已有的地图记录进行模拟 SLAM 的过程，加深理解，为随后的真实环境建图打下基础。建立封闭环境下的二维地图是导航、定位、路径规划的前提。SLAM 全称 simultaneous localization and mapping 即时定位与地图构建，SLAM 理论最早在1988年由 Smith、Self以及 Cheeseman 共同提出。本篇学习使用 <a href="http://wiki.ros.org/rviz" target="_blank" rel="external">Rviz</a> 实时观测地图构建的过程，需要用到已有的地图建立的数据记录，<a href="http://pr.willowgarage.com/data/gmapping/" target="_blank" rel="external">可在此下载</a>,需要安装 <a href="http://wiki.ros.org/gmapping" target="_blank" rel="external">gmapping</a> 包。<br><a id="more"></a></p>
<h1 id="gmapping-安装"><a href="#gmapping-安装" class="headerlink" title="gmapping 安装"></a>gmapping 安装</h1><p>ROS 目前提供两种方法实现 SLAM，一种叫做 <a href="http://wiki.ros.org/hector_mapping" target="_blank" rel="external">hector_mapping</a>,另外一种叫做 <a href="http://wiki.ros.org/gmapping" target="_blank" rel="external">gmapping</a>。两种算法不同，<a href="http://wiki.ros.org/gmapping" target="_blank" rel="external">gmapping</a> 算法较早，它使用粒子滤波并且需要里程计输入，但对传感器性能要求较低，适合初学者；<a href="http://wiki.ros.org/hector_mapping" target="_blank" rel="external">hector_mapping</a> 性能不错，它通过最小二乘法匹配扫描点，并且依赖高精度的激光雷达数据，但是不需要里程计输入。我们先尝试 <a href="http://wiki.ros.org/gmapping" target="_blank" rel="external">gmapping</a>，安装：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-slam-gmapping</span></div></pre></td></tr></table></figure></p>
<h1 id="rviz开启slam观测"><a href="#Rviz开启SLAM观测" class="headerlink" title="Rviz开启SLAM观测"></a>Rviz开启SLAM观测</h1><p>ROS 启用重放时的数据中的时间不是现在的本地时间，而是历史时间，因此我们需要告诉 ROS 系统，我们使用历史模拟时间：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosparam <span class="built_in">set</span> use_sim_time <span class="literal">true</span></span></div></pre></td></tr></table></figure></p>
<p>准备好已有的激光数据记录文件：<br>   <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/pr.willowgarage.com/data</span><span class="regexp">/gmapping/basic</span>_localization_stage.bag</div></pre></td></tr></table></figure></p>
<p>记得开启 ROS master :<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div></pre></td></tr></table></figure></p>
<p> <a href="http://wiki.ros.org/gmapping" target="_blank" rel="external">gmapping</a> 需要两个输入，一个为激光雷达数据，另外一个是全局 tf转换关系，这个 tf 中需要一个里程计数据以构建坐标系。启用 <a href="http://wiki.ros.org/gmapping" target="_blank" rel="external">gmapping</a> 监听 base_scan 话题发来的消息，该话题由模拟器发布：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun gmapping slam_gmapping scan:=base_scan</span></div></pre></td></tr></table></figure></p>
<p>重放激光扫描的数据记录：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosbag play --clock basic_localization_stage.bag</span></div></pre></td></tr></table></figure></p>
<p>启动 Rviz:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rviz rviz</span></div></pre></td></tr></table></figure></p>
<p>此时只是启动了Rviz 并没有给Rviz添加输入，因此它显示为空的网格，<a href="http://wiki.ros.org/gmapping" target="_blank" rel="external">gmapping</a> 的输出话题为 /map,因此我们将该 topic 添加到Rviz的输入,开启 Rviz 后，点击 add 按钮，选择 map 点击OK，会出现一个空的地图：</p>
<p><img src="/2017/07/11/ros-intermediate-tutorial-2/addmap.jpg" alt=""> </p>
<p>之后点击 map 中的topic，再点击 add 添加话题 /map:</p>
<p><img src="/2017/07/11/ros-intermediate-tutorial-2/addtopic.jpg" alt=""></p>
<p>最后地图会慢慢的展现出来：</p>
<p><img src="/2017/07/11/ros-intermediate-tutorial-2/result.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://wiki.ros.org/rviz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rviz&lt;/a&gt; 是 ROS 提供的一个非常强大的图形化显示工具，在实际机器人上建图之前我们先使用已有的地图记录进行模拟 SLAM 的过程，加深理解，为随后的真实环境建图打下基础。建立封闭环境下的二维地图是导航、定位、路径规划的前提。SLAM 全称 simultaneous localization and mapping 即时定位与地图构建，SLAM 理论最早在1988年由 Smith、Self以及 Cheeseman 共同提出。本篇学习使用 &lt;a href=&quot;http://wiki.ros.org/rviz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rviz&lt;/a&gt; 实时观测地图构建的过程，需要用到已有的地图建立的数据记录，&lt;a href=&quot;http://pr.willowgarage.com/data/gmapping/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;可在此下载&lt;/a&gt;,需要安装 &lt;a href=&quot;http://wiki.ros.org/gmapping&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gmapping&lt;/a&gt; 包。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="SLAM Rviz" scheme="http://stevenshi.me/tags/SLAM-Rviz/"/>
    
  </entry>
  
  <entry>
    <title>ROS中级一 配置并使用ROS导航功能包集</title>
    <link href="http://stevenshi.me/2017/07/10/ros-intermediate-tutorial-1/"/>
    <id>http://stevenshi.me/2017/07/10/ros-intermediate-tutorial-1/</id>
    <published>2017-07-10T01:41:05.000Z</published>
    <updated>2017-07-20T07:11:20.280Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习如何配置 ROS 的 Navigation 功能包以及如何让导航功能在机器人上运行起来。先来看一下 ROS 导航架构图：</p>
<p><img src="/2017/07/10/ros-intermediate-tutorial-1/overview_navigation.png" alt=""></p>
<a id="more"></a>
<h1 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h1><p>ROS 的二维导航功能包 navigation 根据输入的里程计消息以及激光雷达等传感器信息通过内部导航算法计算出安全的机器人速度控制指令，移动机器人到指定位置，从而完成既定的导航任务。尽管导航功能包设计的尽量通用，但仍然对机器人的硬件有一定的要求：<br>a,导航功能包目前只对差分或全向轮式机器人起作用，并且假定机器人可以使用速度指令进行控制，速度指令格式遵循x方向、y方向以及角度。<br>b,导航功能包要求机器人必须安装有激光雷达或深度相机等二维平面测距设备。<br>c,导航功能包起初以正方形机器人为模型开发，因此对正方形的机器人支持较好，对于其他形状的机器人也支持，但可能表现不佳。</p>
<h1 id="导航架构分析"><a href="#导航架构分析" class="headerlink" title="导航架构分析"></a>导航架构分析</h1><p>从上图中可以看出， navigation 功能包集的输入有 传感器 tf 变换 (sensor transforms)、里程计 (odometry source) 以及激光雷达或者点云数据 (sensor sources)，输出是 cmd_vel 速度消息 (base controller)。框内部分为 navigation 的核心 move_base 功能，它负责规划整个导航所需的流程，它是导航所必须的，灰色框内部分是可选的，蓝色框内是需要我们提供的组件。一般在 ROS 中进行导航功能使用到的三个包分别为 move_base、gmapping、amcl; move_base 根据获取的传感器消息进行路径规划，并移动机器人到达指定位置；gmapping 根据获取的激光雷达数据或者深度相机建立地图；amcl可以根据已有地图进行机器人的定位。</p>
<h1 id="机器人配置"><a href="#机器人配置" class="headerlink" title="机器人配置"></a>机器人配置</h1><h2 id="tf变换"><a href="#TF变换" class="headerlink" title="TF变换"></a>TF变换</h2><p>导航功能包集需要机器人不断的使用 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 发布机器人的坐标系之间的变换关系，关于这一块可以参考 <a href="http://wiki.ros.org/cn/navigation/Tutorials/RobotSetup/TF" target="_blank" rel="external">TF配置</a> 也可以参考本站文章 <a href="/2017/06/08/ros-primary-tutorial-14/" title="ROS初级十四 tf配置">ROS初级十四 tf配置</a>。</p>
<h2 id="传感器信息sensor-source"><a href="#传感器信息-sensor-source" class="headerlink" title="传感器信息(sensor source)"></a>传感器信息(sensor source)</h2><p>机器人要想避开现实环境中的障碍物离不开传感器信息的实时获取，这里的传感器我们假定为激光雷达或点云数据，传感器需要不断的发布 sensor_msgs/LaserScan 或者 sensor_msgs/PointCloud 消息。关于如何发布这些消息可以参考站内文章 <a href="/2017/07/07/ros-primary-tutorial-16/" title="ROS初级十六发布传感器数据流">ROS初级十六发布传感器数据流</a> 或者参考 <a href="http://wiki.ros.org/cn/navigation/Tutorials/RobotSetup/Sensors" target="_blank" rel="external">在ROS上发布传感器数据流</a>。</p>
<h2 id="里程计消息odometry-source"><a href="#里程计消息-odometry-source" class="headerlink" title="里程计消息(odometry source)"></a>里程计消息(odometry source)</h2><p>ROS 导航功能包集在正确的导航之前需要获取底层传过来的里程计消息，里程计消息使用 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 和 nav_msgs/Odometry 发布，关于如何发布可参考 <a href="http://wiki.ros.org/navigation/Tutorials/RobotSetup/Odom" target="_blank" rel="external">Publishing Odometry Information over ROS</a> 也可参考站内文章 <a href="/2017/07/07/ros-primary-tutorial-15/" title="ROS初级十五 发布里程计消息">ROS初级十五 发布里程计消息</a>。</p>
<h2 id="基座控制器base-controller"><a href="#基座控制器-base-controller" class="headerlink" title="基座控制器(base controller)"></a>基座控制器(base controller)</h2><p>ROS 导航功能包集 navigation 可以通过 cmd_vel 话题发布 geometry_msgs/Twist 类型的消息，这个消息基于机器人的基座坐标系 base_link ,它负责将运动命令传递给移动基座。也就是必须有一个节点负责定制 cmd_vel 话题，并将该话题上的速度(vx, vy, vtheta)指令转化为电机指令(cmd_vel.linear.x, cmd_vel.linear.y, cmd_vel.angular.z)发送到移动底座，使机器人按既定要求移动。</p>
<h2 id="地图map_server"><a href="#地图-map-server" class="headerlink" title="地图(map_server)"></a>地图(map_server)</h2><p>地图并不是 ROS 导航功能包集所必须的。</p>
<h1 id="导航功能包集配置"><a href="#导航功能包集配置" class="headerlink" title="导航功能包集配置"></a>导航功能包集配置</h1><p>假设上述需要的所有环境配置都已完成，机器人使用 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a>发布坐标变换，并从传感器接收 sensor_msgs/LaserScan 或者 sensor_msgs/PointCloud 消息以便于导航，同时需要使用 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 和 nav_msgs/Odometry 消息发布导航消息，消息以命令形式发布给移动底座，从而控制机器人到既定位置。</p>
<h2 id="创建一个软件包"><a href="#创建一个软件包" class="headerlink" title="创建一个软件包"></a>创建一个软件包</h2><p>首先创建一个软件包用于保存我们需要的所有配置文件以及启动文件。创建功能包时需要添加一些依赖项，包括机器人配置中所使用到的功能包，其中 move_base 是必须添加的依赖项：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg my_robot_name_2dnav move_base my_tf_configuration_dep my_odom_configuration_dep my_sensor_configuration_dep</span></div></pre></td></tr></table></figure></p>
<p>使用时将后面的依赖项修改为自己机器人配置所需的依赖，这是我自己的机器人所有使用的依赖项：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg my_robot_2dnav move_base roscpp tf geometry_msgs sensor_msgs nav_msgs</span></div></pre></td></tr></table></figure></p>
<h2 id="创建机器人启动配置文件"><a href="#创建机器人启动配置文件" class="headerlink" title="创建机器人启动配置文件"></a>创建机器人启动配置文件</h2><p>创建一个ROS launch 配置文件以及发布机器人所需的 tf 变换树。新建文件 my_robot_configuration.launch 并放到我们的软件包的launch目录下:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd my_robot_2dnav</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir launch</span></div><div class="line"><span class="meta">$</span><span class="bash"> vim my_robot_configuration.launch</span></div></pre></td></tr></table></figure></p>
<p>添加以下内容到文件 my_robot_configuration.launch 中：<br>   <figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;launch&gt;</div><div class="line">      &lt;node pkg=<span class="string">"sensor_node_pkg"</span> <span class="built_in">type</span>=<span class="string">"sensor_node_type"</span> <span class="built_in">name</span>=<span class="string">"sensor_node_name"</span> output=<span class="string">"screen"</span>&gt;</div><div class="line">          &lt;<span class="built_in">param</span> <span class="built_in">name</span>=<span class="string">"sensor_param"</span> value=<span class="string">"param_value"</span> /&gt;</div><div class="line">      &lt;/node&gt;</div><div class="line">      &lt;node pkg=<span class="string">"odom_node_pkg"</span> <span class="built_in">type</span>=<span class="string">"odom_node_type"</span> <span class="built_in">name</span>=<span class="string">"odom_node"</span> output=<span class="string">"screen"</span>&gt;</div><div class="line">          &lt;<span class="built_in">param</span> <span class="built_in">name</span>=<span class="string">"odom_param"</span> value=<span class="string">"param_value"</span> /&gt;</div><div class="line">      &lt;/node&gt;</div><div class="line"> </div><div class="line">      &lt;node pkg=<span class="string">"transform_configuration_pkg"</span> <span class="built_in">type</span>=<span class="string">"transform_configuration_type"</span> <span class="built_in">name</span>=<span class="string">"transform_configuration_name"</span> output=<span class="string">"screen"</span>&gt;</div><div class="line">         &lt;<span class="built_in">param</span> <span class="built_in">name</span>=<span class="string">"transform_configuration_param"</span> value=<span class="string">"param_value"</span> /&gt;</div><div class="line">     &lt;/node&gt;</div><div class="line"> &lt;/launch&gt;</div></pre></td></tr></table></figure></p>
<p>这里只是一个launch模板，接下来我们根据自己的机器人去完善修改它。上面代码会首先启动机器人运行导航功能包所需的所有传感器，实际使用时需要将我们自己的传感器对应的ROS驱动包替换 sensor_node_pkg，将自己的传感器类型替换 sensor_node_type，通常与节点名一致；用自己的传感器节点名替换 sensor_node_name, sensor_param 包含所有必须的参数，如果有多个传感器，在这里一起启动它们。接下来，我们启动移动底座的里程计，同样将我们自己的里程计替换pkg,type,name,并根据实际情况指定相关参数。最后启动相应的 tf 变换，同样将我们自己的 tf 变换替换对应的 pkg,type,name 根据实际情况修改相关参数。</p>
<h2 id="代价地图配置local_costmap-amp-global_costmap"><a href="#代价地图配置-local-costmap-amp-global-costmap" class="headerlink" title="代价地图配置(local_costmap &amp; global_costmap)"></a>代价地图配置(local_costmap &amp; global_costmap)</h2><p>导航功能包集需要两个代价地图来保存现实环境中的障碍物信息，这两个代价地图分别为 local_costmap 和 global_costmap。前者用于局部路径规划与避障，后者用于全局的路径规划。有些参数是两个代价地图都必须的，也有一些参数为各自所有。对于代价地图，有三个配置项分别为 common 配置项、 global 配置项以及 local 配置项。如果想看完整的配置，请参阅 <a href="http://wiki.ros.org/costmap_2d" target="_blank" rel="external">costmap_2d</a>。</p>
<h3 id="共同配置common"><a href="#共同配置common" class="headerlink" title="共同配置common"></a>共同配置common</h3><p>导航功能包集使用代价地图存储障碍物信息，我们需要指出要监听的传感器话题，以便于更新数据。创建一个名为 costmap_common_params.yaml 的文件，添加以下内容：</p>
   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">obstacle_range:</span> <span class="number">2.5</span></div><div class="line"><span class="attr">raytrace_range:</span> <span class="number">3.0</span></div><div class="line"><span class="attr">footprint:</span> <span class="string">[[x0,</span> <span class="string">y0],</span> <span class="string">[x1,</span> <span class="string">y1],</span> <span class="string">...</span> <span class="string">[xn,</span> <span class="string">yn]]</span></div><div class="line"><span class="comment">#robot_radius: ir_of_robot</span></div><div class="line"><span class="attr">inflation_radius:</span> <span class="number">0.55</span></div><div class="line"></div><div class="line"><span class="attr">observation_sources:</span> <span class="string">laser_scan_sensor</span> <span class="string">point_cloud_sensor</span></div><div class="line"></div><div class="line"><span class="attr">laser_scan_sensor:</span> <span class="string">&#123;sensor_frame:</span> <span class="string">frame_name,</span> <span class="attr">data_type:</span> <span class="string">LaserScan,</span> <span class="attr">topic:</span> <span class="string">topic_name,</span> <span class="attr">marking:</span> <span class="literal">true</span><span class="string">,</span> <span class="attr">clearing:</span> <span class="literal">true</span><span class="string">&#125;</span></div><div class="line"></div><div class="line"><span class="attr">point_cloud_sensor:</span> <span class="string">&#123;sensor_frame:</span> <span class="string">frame_name,</span> <span class="attr">data_type:</span> <span class="string">PointCloud,</span> <span class="attr">topic:</span> <span class="string">topic_name,</span> <span class="attr">marking:</span> <span class="literal">true</span><span class="string">,</span> <span class="attr">clearing:</span> <span class="literal">true</span><span class="string">&#125;</span></div></pre></td></tr></table></figure>
<p>obstacle_range 参数决定了引入障碍物到代价地图的传感器读数的最大范围，此处我们设置为 2.5m，这意味着机器人只会更新以其底盘中心为半径2.5m以内的障碍物信息。raytrace_range 参数确定空白区域内光线追踪的范围，此处我们设置为3.0m，意味着机器人将试图根据传感器读数清除其前面3.0m远的空间。<br>footprint 为机器人的形状设置，如果是圆形可以直接指定机器人半径 robot_radius。当指定 footprint 时，机器人的中心默认是在(0.0,0.0)，支持顺时针和逆时针方向。inflation_radius 为代价地图膨胀半径，膨胀半径应该设置为障碍物产生代价的最大距离，此处设为0.55意味着机器人所有路径与障碍物保持0.55米或更远的距离。<br>observation_sources 参数定义了一系列传递空间信息给代价地图的各种传感器。frame_name 参数应设置为传感器坐标帧的名称， data_type 参数应设置为 LaserScan 或 PointCloud，这取决于主题使用的消息， topic_name 应该设置为发布传感器数据的主题的名称。  marking 和 clearing 参数确定传感器是否用于向代价地图添加障碍物信息，或从代价地图清除障碍信息，或两者都有。 </p>
<h3 id="全局配置-global_costmap"><a href="#全局配置-global-costmap" class="headerlink" title="全局配置 global_costmap"></a>全局配置 global_costmap</h3><p>新建一个文件命名为 global_costmap_params.yaml 用于存储全局代价地图配置选项，添加以下内容：</p>
   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">global_costmap:</span></div><div class="line"><span class="attr">  global_frame:</span> <span class="string">/map</span></div><div class="line"><span class="attr">  robot_base_frame:</span> <span class="string">base_link</span></div><div class="line"><span class="attr">  update_frequency:</span> <span class="number">5.0</span></div><div class="line"><span class="attr">  static_map:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>global_frame 参数定义了全局代价地图运行所在的坐标系。在这种情况下,我们会选择/map坐标系。 robot_base_frame 参数定义了代价地图参考的的机器人移动底盘的坐标系。update_frequency 参数决定了代价地图更新的频率。 static_map 参数决定代价地图是否根据 map_server 提供的地图初始化。如果不打算使用现有的地图，将其设为false。 </p>
<h3 id="本地配置-local_costmap"><a href="#本地配置-local-costmap" class="headerlink" title="本地配置 local_costmap"></a>本地配置 local_costmap</h3><p>新建一个文件命名为 localal_costmap_params.yaml，添加以下内容：<br>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">local_costmap:</span></div><div class="line"><span class="attr">  global_frame:</span> <span class="string">odom</span></div><div class="line"><span class="attr">  robot_base_frame:</span> <span class="string">base_link</span></div><div class="line"><span class="attr">  update_frequency:</span> <span class="number">5.0</span></div><div class="line"><span class="attr">  publish_frequency:</span> <span class="number">2.0</span></div><div class="line"><span class="attr">  static_map:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  rolling_window:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  width:</span> <span class="number">6.0</span></div><div class="line"><span class="attr">  height:</span> <span class="number">6.0</span></div><div class="line"><span class="attr">  resolution:</span> <span class="number">0.05</span></div></pre></td></tr></table></figure></p>
<p>global_frame，robot_base_frame，update_frequency，static_map参数与全局配置意义相同。publish_frequency 参数决定了代价地图发布可视化信息的频率。 rolling_window 参数设置为true，意味着随着机器人在现实环境中移动，代价地图会保持以机器人为中心。 width 、height、resolution 参数分别设置局部代价地图的宽度(米)、高度(米)和分辨率(米/单元)。 这里的分辨率和静态地图的分辨率可能不同，但我们通常把他们设成一样的。</p>
<h2 id="baselocalplanner-配置"><a href="#BaseLocalPlanner-配置" class="headerlink" title="BaseLocalPlanner 配置"></a>BaseLocalPlanner 配置</h2><p>Base_Local_Planner 负责根据全局路径规划计算速度命令并发送到机器人移动底座，根据自己的机器人规格配置以下参数以便于正常启动和运行机器人。新建一个文件命名为 base_local_planner_params.yaml，添加以下内容：<br>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">TrajectoryPlannerROS:</span></div><div class="line"><span class="attr">  max_vel_x:</span> <span class="number">0.45</span></div><div class="line"><span class="attr">  min_vel_x:</span> <span class="number">0.1</span></div><div class="line"><span class="attr">  max_vel_theta:</span> <span class="number">1.0</span></div><div class="line"><span class="attr">  min_in_place_vel_theta:</span> <span class="number">0.4</span></div><div class="line"></div><div class="line"><span class="attr">  acc_lim_theta:</span> <span class="number">3.2</span></div><div class="line"><span class="attr">  acc_lim_x:</span> <span class="number">2.5</span></div><div class="line"><span class="attr">  acc_lim_y:</span> <span class="number">2.5</span></div><div class="line"></div><div class="line"><span class="attr">  holonomic_robot:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>前面为机器人的速度限制，后面为机器人的加速度限制。</p>
<h2 id="创建一个-launch-启动文件"><a href="#创建一个-launch-启动文件" class="headerlink" title="创建一个 launch 启动文件"></a>创建一个 launch 启动文件</h2><p>当做好前面所有的配置文件后，我们需要一个launch 文件用于一起启动它们，新建一个文件命名为 move_base.launch 添加以下内容：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">master</span> <span class="attr">auto</span>=<span class="string">"start"</span>/&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Run the map server --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"map_server"</span> <span class="attr">pkg</span>=<span class="string">"map_server"</span> <span class="attr">type</span>=<span class="string">"map_server"</span> <span class="attr">args</span>=<span class="string">"$(find my_map_package)/my_map.pgm my_map_resolution"</span>/&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--- Run AMCL --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"$(find amcl)/examples/amcl_omni.launch"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"move_base"</span> <span class="attr">type</span>=<span class="string">"move_base"</span> <span class="attr">respawn</span>=<span class="string">"false"</span> <span class="attr">name</span>=<span class="string">"move_base"</span> <span class="attr">output</span>=<span class="string">"screen"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find my_robot_name_2dnav)/costmap_common_params.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> <span class="attr">ns</span>=<span class="string">"global_costmap"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find my_robot_name_2dnav)/costmap_common_params.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> <span class="attr">ns</span>=<span class="string">"local_costmap"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find my_robot_name_2dnav)/local_costmap_params.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find my_robot_name_2dnav)/global_costmap_params.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find my_robot_name_2dnav)/base_local_planner_params.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">node</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>需要修改的地方是更改地图服务器使指向自己的地图，如果是差分驱动的机器人，将 amcl_omni.launch 改为 amcl_diff.launch 。</p>
<h2 id="amcl配置"><a href="#AMCL配置" class="headerlink" title="AMCL配置"></a>AMCL配置</h2><p>AMCL 有许多配置选项影响定位的性能，详细可参考 <a href="http://wiki.ros.org/amcl" target="_blank" rel="external">amcl</a></p>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>启动两个终端分别运行：<br>   <figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">roslaunch my_robot_configuration.<span class="built_in">launch</span></div><div class="line">roslaunch move_base.<span class="built_in">launch</span></div></pre></td></tr></table></figure></p>
<p>通过图形化显示给导航功能包发送一个目标信息，可参考<a href="http://wiki.ros.org/navigation/Tutorials/Using%20rviz%20with%20the%20Navigation%20Stack" target="_blank" rel="external">rviz and navigation tutorial</a>，使用代码给导航功能包集发送导航目标，参考 <a href="http://wiki.ros.org/navigation/Tutorials/SendingSimpleGoals" target="_blank" rel="external">sending simple navigation goals</a></p>
<p>参考：<br>英文 <a href="http://wiki.ros.org/navigation/Tutorials/RobotSetup" target="_blank" rel="external">Setup and Configuration of the Navigation Stack on a Robot</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习如何配置 ROS 的 Navigation 功能包以及如何让导航功能在机器人上运行起来。先来看一下 ROS 导航架构图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/07/10/ros-intermediate-tutorial-1/overview_navigation.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS navigation" scheme="http://stevenshi.me/tags/ROS-navigation/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级十七 URDF解读</title>
    <link href="http://stevenshi.me/2017/07/08/ros-primary-tutorial-17/"/>
    <id>http://stevenshi.me/2017/07/08/ros-primary-tutorial-17/</id>
    <published>2017-07-08T01:19:45.000Z</published>
    <updated>2017-08-18T00:27:22.018Z</updated>
    
    <content type="html"><![CDATA[<p>URDF的全称为 Unified Robot Description Format，通用机器人描述格式，它是一种特殊的 xml 格式文件，它能够抽象的描述现实中的机器人硬件，包括外形和组件。URDF 包括很多不同的功能包以及组件，它们之间的关系如图所描述：</p>
<p><img src="/2017/07/08/ros-primary-tutorial-17/urdf_diagram.png" alt=""><br><a id="more"></a></p>
<h1 id="构建可视化机器人模型"><a href="#构建可视化机器人模型" class="headerlink" title="构建可视化机器人模型"></a>构建可视化机器人模型</h1><p>开始之前先下载 <a href="http://wiki.ros.org/joint_state_publisher" target="_blank" rel="external">joint_state_publisher</a> 以及 <a href="http://wiki.ros.org/urdf_tutorial" target="_blank" rel="external">urdf_tutorial</a> 两个包。<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/src/</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span>  https://github.com/ros/urdf_tutorial.git</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/ros/robot_model.git</span></div></pre></td></tr></table></figure></p>
<p> <a href="http://wiki.ros.org/joint_state_publisher" target="_blank" rel="external">joint_state_publisher</a> 属于 robot_model 代码仓的一个 package ，需要注意的是 robot_model 有很多分支，我们下载后需要选择 indigo-devel 分支：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/src/robot_model/   </span></div><div class="line"><span class="meta">$</span><span class="bash"> git checkout indigo-devel</span></div></pre></td></tr></table></figure></p>
<h2 id="单个模型"><a href="#单个模型" class="headerlink" title="单个模型"></a>单个模型</h2><p>先看一个简单的模型描述，在 urdf_tutorial/urdf 中的 01-myfirst.urdf 文件：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">"myfirst"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"base_link"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">length</span>=<span class="string">"0.6"</span> <span class="attr">radius</span>=<span class="string">"0.2"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>首先描述了机器人的名字 myfirst,该机器人仅有一个 link 名字为  base_link, 它包含一个 cylinder 长度为 0.6m，半径为 0.2m。<br>使用 Rviz 查看这个模型：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> roslaunch urdf_tutorial <span class="keyword">display</span>.launch <span class="keyword">model</span>:=urdf/<span class="number">01</span>-myfirst.urdf</div></pre></td></tr></table></figure></p>
<p>出现错误：<br>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</div><div class="line">  <span class="keyword">File</span> <span class="string">"/opt/ros/indigo/share/xacro/xacro.py"</span>, line <span class="number">62</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</div><div class="line">    xacro.main()</div><div class="line">  <span class="keyword">File</span> <span class="string">"/opt/ros/indigo/lib/python2.7/dist-packages/xacro/__init__.py"</span>, line <span class="number">673</span>, <span class="keyword">in</span> <span class="keyword">main</span></div><div class="line">    f = <span class="keyword">open</span>(args[<span class="number">0</span>])</div><div class="line">IOError: [Errno <span class="number">2</span>] <span class="keyword">No</span> such <span class="keyword">file</span> <span class="keyword">or</span> <span class="keyword">directory</span>: <span class="string">'urdf/01-myfirst.urdf'</span></div><div class="line">Invalid &lt;param&gt; tag: Cannot <span class="keyword">load</span> command parameter [robot_description]: command [/opt/ros/indigo/<span class="keyword">share</span>/xacro/xacro.py urdf/<span class="number">01</span>-myfirst.urdf] returned <span class="keyword">with</span> code [<span class="number">1</span>]. </div><div class="line"></div><div class="line">Param <span class="keyword">xml</span> <span class="keyword">is</span> &lt;param command=<span class="string">"$(find xacro)/xacro.py $(arg model)"</span> <span class="keyword">name</span>=<span class="string">"robot_description"</span>/&gt;</div><div class="line">The traceback <span class="keyword">for</span> the <span class="keyword">exception</span> was written <span class="keyword">to</span> the <span class="keyword">log</span> <span class="keyword">file</span></div></pre></td></tr></table></figure></p>
<p>错误提示貌似找不到 01-myfirst.urdf 这个文件，但事实上它是存在的，换一种方式打开：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> roslaunch urdf_tutorial <span class="keyword">display</span>.launch <span class="keyword">model</span>:=<span class="string">'$(find urdf_tutorial)/urdf/01-myfirst.urdf'</span></div></pre></td></tr></table></figure></p>
<p>如果进入到目录 ~/catkin_ws/src/urdf_tutorial/urdf_tutorial 下再用上述命令打开就不会出现错误：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/src/urdf_tutorial/urdf_tutorial</span></div><div class="line"><span class="meta">$</span><span class="bash"> roslaunch urdf_tutorial display.launch model:=urdf/01-myfirst.urdf</span></div></pre></td></tr></table></figure></p>
<p>图中所示，我们可以看到只有一个圆柱体存在：</p>
<p><img src="/2017/07/08/ros-primary-tutorial-17/myfirsturdf.png" alt=""></p>
<p>需要注意的两点：<br>a,固定坐标系以网格中心作为参考点，它正是 base_link 的坐标系；<br>b,圆柱体的中心正好位于网格中心即 base_link原点，因此，圆柱体的另一半在网格下面。</p>
<h2 id="多个模型"><a href="#多个模型" class="headerlink" title="多个模型"></a>多个模型</h2><p>一个模型就是一个 link 元素，添加多个模型就需要多个link，link 之间需要使用 joint 连接，joint 有固定于可动之分。下面看一个固定 joint 连接，文件位于 urdf_tutorial/urdf 中的 02-multipleshapes.urdf：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"> <span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">"multipleshapes"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"base_link"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">visual</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">length</span>=<span class="string">"0.6"</span> <span class="attr">radius</span>=<span class="string">"0.2"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">link</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"right_leg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">"0.6 0.1 0.2"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"base_to_right_leg"</span> <span class="attr">type</span>=<span class="string">"fixed"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"base_link"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"right_leg"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在圆柱体的基础上又定义了一个box，尺寸为 0.6m x 0.1m x 0.2m ,一个 joint 连接两个模型，joint 必须指定它所连接的两个模型的父link与子link,子 link 的位置依赖于父 link 的位置。<br>可以运行命令查看：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> roslaunch urdf_tutorial <span class="keyword">display</span>.launch <span class="keyword">model</span>:=urdf/<span class="number">02</span>-multipleshapes.urdf</div></pre></td></tr></table></figure></p>
<p>图中可以看到两个模型的中心重合，因为他们的坐标原点一样，如果我们不希望他们重合，可以定义多个坐标系原点。</p>
<h2 id="原点"><a href="#原点" class="headerlink" title="原点"></a>原点</h2><p>上图腿的位置位于圆柱体的中间部分，下面我们调整它的位置，参见文件urdf_tutorial/urdf/03-origins.urdf<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line">   <span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">"origins"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"base_link"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">visual</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">length</span>=<span class="string">"0.6"</span> <span class="attr">radius</span>=<span class="string">"0.2"</span>/&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">link</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"right_leg"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">visual</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">"0.6 0.1 0.2"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"0 1.57075 0"</span> <span class="attr">xyz</span>=<span class="string">"0 0 -0.3"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"base_to_right_leg"</span> <span class="attr">type</span>=<span class="string">"fixed"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"base_link"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"right_leg"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 -0.22 0.25"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;/<span class="name">robot</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>由代码可看出，两个 link 即两个零件由名称为 base_to_right_leg 的 joint 连接，joint 的原点相对于 base_link 的原点偏移为x方向0，y 方向-0.22，z 方向 0.25，因此 child link 即 right_leg 的原点位于base_link 的上方 0.25 右方0.22 的位置。如果不指定 child link 的姿态角，它将和base_link具有相同的姿态角，即子坐标系和父坐标系姿态角相同。上述代码既定义了right_leg 在xyz方向的偏移，同时也定义了rpy 姿态角(roll pitch yaw),相对于joint 原点即子坐标参考系，right_leg 在z方向上下移了0.3,俯仰角为pi/2弧度，即相对于之前绕Y轴旋转了90度，之前为水平，现在变为垂直。可以通过 Rviz 查看：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> roslaunch urdf_tutorial <span class="keyword">display</span>.launch <span class="keyword">model</span>:=urdf/<span class="number">03</span>-origins.urdf</div></pre></td></tr></table></figure></p>
<p>姿态角的定义如图：<br><img src="/2017/07/08/ros-primary-tutorial-17/rpy.png" alt=""><br>机身前方为 Roll 轴，一般定义为 X 轴，绕 X 轴的旋转角度称为 Roll 即翻滚角，绕 Pitch 轴的旋转称为俯仰角，此处一般定义为 Y 轴，绕 Yaw 轴的旋转称为偏航角，一般定义为 Z 轴。<br>另外也可以定义机体组件的颜色，可以添加不同形状的组件可以参考 04-materials.urdf 以及 05-visual.urdf。</p>
<h1 id="构建可移动机器人模型"><a href="#构建可移动机器人模型" class="headerlink" title="构建可移动机器人模型"></a>构建可移动机器人模型</h1><p>对应文件为 06-flexible.urdf</p>
<h2 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h2>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"head_swivel"</span> <span class="attr">type</span>=<span class="string">"continuous"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"base_link"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"head"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">"0 0 1"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 0 0.3"</span>/&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></div></pre></td></tr></table></figure>
<p>定义的joint用于连接 base_link 与 head ，类型为 continuous,意思是它可以旋转任意角度，因此这个连接是可移动的连接。需要注意的是必须指定它旋转的轴，上面指定旋转的矢量为 [0,0,1] 即只能绕Z轴旋转。</p>
<h2 id="抓手"><a href="#抓手" class="headerlink" title="抓手"></a>抓手</h2>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"left_gripper_joint"</span> <span class="attr">type</span>=<span class="string">"revolute"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">"0 0 1"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">limit</span> <span class="attr">effort</span>=<span class="string">"1000.0"</span> <span class="attr">lower</span>=<span class="string">"0.0"</span> <span class="attr">upper</span>=<span class="string">"0.548"</span> <span class="attr">velocity</span>=<span class="string">"0.5"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span> <span class="attr">xyz</span>=<span class="string">"0.2 0.01 0"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"gripper_pole"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"left_gripper"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">joint</span>&gt;</span></div></pre></td></tr></table></figure>
<p>joint 为 revolute 即旋转类型，它和 continuous 类型类似，但 revolute 类型有极限约束，指定上下极限位置的同时，还需要指定最大速度以及 effort。注意这里的上下极限是单位是弧度。</p>
<h2 id="夹臂"><a href="#夹臂" class="headerlink" title="夹臂"></a>夹臂</h2>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"gripper_extension"</span> <span class="attr">type</span>=<span class="string">"prismatic"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"base_link"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"gripper_pole"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">limit</span> <span class="attr">effort</span>=<span class="string">"1000.0"</span> <span class="attr">lower</span>=<span class="string">"-0.38"</span> <span class="attr">upper</span>=<span class="string">"0"</span> <span class="attr">velocity</span>=<span class="string">"0.5"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span> <span class="attr">xyz</span>=<span class="string">"0.19 0 0.2"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">joint</span>&gt;</span></div></pre></td></tr></table></figure>
<p>夹臂是一种不同的 joint，称为柱状 joint,也就是说它沿着一个轴运动，而不是绕着轴运动。这里的极限与抓手不同的是极限单位是米而不是弧度。还有两种其它类型的 joint，柱状 joint 只能做一维运动，一个平面 joint 可以做二维运动，一个浮动的 joint 可以做三维运动。</p>
<h2 id="指定姿态"><a href="#指定姿态" class="headerlink" title="指定姿态"></a>指定姿态</h2><p>进入到目录urdf_tutorial/urdf_tutorial中，运行命令：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> roslaunch urdf_tutorial <span class="keyword">display</span>.launch <span class="keyword">model</span>:=urdf/<span class="number">06</span>-flexible.urdf</div></pre></td></tr></table></figure></p>
<p>可以看大如下机器人模型以及 Joint State Publisher 的控制界面：<br><img src="/2017/07/08/ros-primary-tutorial-17/pose.png" alt=""></p>
<p>当在 Rviz 中滑动滑块时，会看到模型移动。首先GUI解析URDF文件，找到所有非固定的 joint 以及他们的运动约束极限，然后，利用滑块的值发布消息 <a href="http://docs.ros.org/api/sensor_msgs/html/msg/JointState.html" target="_blank" rel="external">sensor_msgs/JointState</a> ,之后 <a href="http://wiki.ros.org/robot_state_publisher" target="_blank" rel="external">robot_state_publisher</a> 计算在不同的部件之间的所有变换，变换后的 tf 坐标树被用来在 Rviz 中显示这些形状。</p>
<h1 id="添加物理属性和碰撞属性"><a href="#添加物理属性和碰撞属性" class="headerlink" title="添加物理属性和碰撞属性"></a>添加物理属性和碰撞属性</h1><h2 id="碰撞属性"><a href="#碰撞属性" class="headerlink" title="碰撞属性"></a>碰撞属性</h2><p>为了使机器人能在 <a href="http://www.gazebosim.org/" target="_blank" rel="external">Gazebo</a> 中仿真，需要定义机器人的碰撞属性。这部分的例子可以参考 07-physics.urdf<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"base_link"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">visual</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">length</span>=<span class="string">"0.6"</span> <span class="attr">radius</span>=<span class="string">"0.2"</span>/&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">"blue"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">visual</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">collision</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">length</span>=<span class="string">"0.6"</span> <span class="attr">radius</span>=<span class="string">"0.2"</span>/&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">collision</span>&gt;</span></div><div class="line"> 	<span class="tag">&lt;<span class="name">inertial</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">"1.0"</span> <span class="attr">ixy</span>=<span class="string">"0.0"</span> <span class="attr">ixz</span>=<span class="string">"0.0"</span> <span class="attr">iyy</span>=<span class="string">"1.0"</span> <span class="attr">iyz</span>=<span class="string">"0.0"</span> <span class="attr">izz</span>=<span class="string">"1.0"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">link</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>代码中可见，collision 元素与 visual 元素同级，都属于 link 的直接子元素; collision 元素定义它的外形方式与 visual 元素一样，都使用 geometry 实现。也可以与 visual 一样使用相同的方式指定一个原点。很多情况下我们希望 collision 的几何外形和原点与 visual 的几何外形和原点一样，但是有两种特殊情况：一种情况是快速处理，做碰撞检测的两个网格比两个简单的几何尺寸的计算要复杂的多，因此在碰撞元素中更倾向于使用简单的几何尺寸来代替网格以便于减少计算复杂度。另外一种情况是安全区域，你可能希望限制接近于敏感设备的运动，比如，我们不希望任何东西与R2D2的头部相撞，我们可能会定义碰撞的几何尺寸为一个圆柱，用于防止任何东西靠近它的头部。</p>
<h2 id="物理属性"><a href="#物理属性" class="headerlink" title="物理属性"></a>物理属性</h2><p>在 <a href="http://www.gazebosim.org/" target="_blank" rel="external">Gazebo</a> 中仿真需要定义机器人的物理属性，包括 inertial 惯性、contact coefficients 连接系数 以及 joint dynamics 关节动力等属性。转动惯量可以使用一个3x3的矩阵表示：<br>$\left[<br>\begin{matrix}<br>ixx &amp; ixy &amp; ixz \\<br>ixy &amp; iyy &amp; iyz \\<br>ixz &amp; iyz &amp; izz \\<br>\end{matrix}<br>\right]$<br>因为它是对称的，因此可以仅使用6个元素来表示。这部分同样可参考 07-physics.urdf。</p>
<h2 id="使用-xacro-简化-urdf-文件"><a href="#使用-Xacro-简化-URDF-文件" class="headerlink" title="使用 Xacro 简化 URDF 文件"></a>使用 Xacro 简化 URDF 文件</h2><p><a href="http://wiki.ros.org/xacro" target="_blank" rel="external">xacro</a> 是一宏语言，可以压缩 URDF 文件的大小，增加文件的可读性和可维护性。这部分代码可参考 08-macroed.urdf.xacro ，为了使用 xacro 我们需要指定一个命名空间，以便文件能被正确的解析，一般在文件的头部会加入以下：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">"macroed"</span> <span class="attr">xmlns:xacro</span>=<span class="string">"http://ros.org/wiki/xacro"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>模型的名称此处定义为 macroed 。使用 xacro 声明常量能够避免在很多行重复使用同一个值，当修改该值时只需要修改一处即可，可增加代码维护性。常量的声明方法：<br>   <figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;xacro:<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"width"</span> value=<span class="string">"0.2"</span> /&gt;</div><div class="line">&lt;xacro:<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"bodylen"</span> value=<span class="string">"0.6"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>使用时可以直接使用变量名来引用：<br>   <figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;width&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">length</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;bodylen&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>也可以在${}结构中加入四则运算：<br>   <figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;wheeldiam/2&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">length</span>=<span class="string">"0.1"</span>/&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"$</span></span><span class="template-variable">&#123;baselen*reflect/3&#125;</span><span class="xml"><span class="tag"><span class="string"> 0 -$</span></span></span><span class="template-variable">&#123;wheeldiam/2+.05&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>也可以使用宏更进一步简化：<br>   <figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">"default_inertial"</span> <span class="attr">params</span>=<span class="string">"mass"</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">"$</span></span><span class="template-variable">&#123;mass&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line">       <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">"1.0"</span> <span class="attr">ixy</span>=<span class="string">"0.0"</span> <span class="attr">ixz</span>=<span class="string">"0.0"</span> <span class="attr">iyy</span>=<span class="string">"1.0"</span> <span class="attr">iyz</span>=<span class="string">"0.0"</span> <span class="attr">izz</span>=<span class="string">"1.0"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>使用：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xacro:default_inertial</span> <span class="attr">mass</span>=<span class="string">"10"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>未完<br>参考：<a href="http://wiki.ros.org/urdf/Tutorials" target="_blank" rel="external">urdf/tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;URDF的全称为 Unified Robot Description Format，通用机器人描述格式，它是一种特殊的 xml 格式文件，它能够抽象的描述现实中的机器人硬件，包括外形和组件。URDF 包括很多不同的功能包以及组件，它们之间的关系如图所描述：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/07/08/ros-primary-tutorial-17/urdf_diagram.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="URDF" scheme="http://stevenshi.me/tags/URDF/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级十六 发布传感器数据流</title>
    <link href="http://stevenshi.me/2017/07/07/ros-primary-tutorial-16/"/>
    <id>http://stevenshi.me/2017/07/07/ros-primary-tutorial-16/</id>
    <published>2017-07-07T05:41:15.000Z</published>
    <updated>2017-07-07T07:50:59.350Z</updated>
    
    <content type="html"><![CDATA[<p>传感器数据发布的正确与否直接影响到 ROS 导航功能的安全和性能。如果没有正确获取传感器的数据，机器人将会迷路或撞上障碍物。有很多传感器为机器人导航提供可用的信息，比如激光雷达、摄像头、声呐、红外以及碰撞传感器等。目前ROS的导航功能包仅支持激光雷达以及点云数据也就是 sensor_msgs/LaserScan 和 sensor_msgs/PointCloud 两种消息类型。本篇学习如何发布导航需要的这两种传感器数据消息。<br><a id="more"></a></p>
<h1 id="ros-消息头信息"><a href="#ROS-消息头信息" class="headerlink" title="ROS 消息头信息"></a>ROS 消息头信息</h1><p>不管是 sensor_msgs/LaserScan 消息还是 sensor_msgs/PointCloud 消息，都和ROS中的其他消息一样包含  <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 框架以及时间依赖信息。为了标准化这些消息，ROS中提供了 Header 消息类型用于标识诸如此类消息的起始部分。以下消息展示了 Header 类型的三个域，可以参考 <a href="http://docs.ros.org/api/std_msgs/html/msg/Header.html" target="_blank" rel="external">std_msgs/Header.msg</a>。 seq 标识消息的顺序号，自动累加；stamp 用于存储和消息相关的时间信息即时间戳，它必须与数据产生的时间相符； frame_id 用于标识传感器数据采集的参考坐标系，比如激光雷达的数据必须与它的坐标参考系相符。<br>   <figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#Standard metadata for higher-level flow data types</span></div><div class="line"><span class="meta">#sequence ID: consecutively increasing ID </span></div><div class="line"><span class="keyword">uint32</span> seq</div><div class="line"><span class="meta">#Two-integer timestamp that is expressed as:</span></div><div class="line"><span class="meta"># * stamp.secs: seconds (stamp_secs) since epoch</span></div><div class="line"><span class="meta"># * stamp.nsecs: nanoseconds since stamp_secs</span></div><div class="line"><span class="meta"># time-handling sugar is provided by the client library</span></div><div class="line">time stamp</div><div class="line"><span class="meta">#Frame this data is associated with</span></div><div class="line"><span class="meta"># 0: no frame</span></div><div class="line"><span class="meta"># 1: global frame</span></div><div class="line"><span class="keyword">string</span> frame_id</div></pre></td></tr></table></figure></p>
<h1 id="发布激光雷达消息"><a href="#发布激光雷达消息" class="headerlink" title="发布激光雷达消息"></a>发布激光雷达消息</h1><h2 id="激光雷达消息结构"><a href="#激光雷达消息结构" class="headerlink" title="激光雷达消息结构"></a>激光雷达消息结构</h2><p>ROS在 <a href="http://wiki.ros.org/sensor_msgs" target="_blank" rel="external">sensor_msgs</a> 中提供一个特殊的消息类型专门用于存储机器人的激光雷达数据叫做 LaserScan。LaserScan 的消息类型为虚拟的激光雷达数据采集提供了方便。在讨论如何发布激光雷达消息之前，我们先看一下激光雷达消息的格式，参考 <a href="http://docs.ros.org/api/sensor_msgs/html/msg/LaserScan.html" target="_blank" rel="external">sensor_msgs/LaserScan.msg</a>:<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Single scan from a planar laser range-finder</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># If you have another ranging device with different behavior (e.g. a sonar</span></div><div class="line"><span class="comment"># array), please find or create a different message, since applications</span></div><div class="line"><span class="comment"># will make fairly laser-specific assumptions about this data</span></div><div class="line"></div><div class="line">Header header            <span class="comment"># timestamp in the header is the acquisition time of </span></div><div class="line">                         <span class="comment"># the first ray in the scan.</span></div><div class="line">                         <span class="comment">#</span></div><div class="line">                         <span class="comment"># in frame frame_id, angles are measured around </span></div><div class="line">                         <span class="comment"># the positive Z axis (counterclockwise, if Z is up)</span></div><div class="line">                         <span class="comment"># with zero angle being forward along the x axis</span></div><div class="line">                         </div><div class="line"><span class="built_in">float</span>32 angle_min        <span class="comment"># start angle of the scan [rad]</span></div><div class="line"><span class="built_in">float</span>32 angle_max        <span class="comment"># end angle of the scan [rad]</span></div><div class="line"><span class="built_in">float</span>32 angle_increment  <span class="comment"># angular distance between measurements [rad]</span></div><div class="line"></div><div class="line"><span class="built_in">float</span>32 time_increment   <span class="comment"># time between measurements [seconds] - if your scanner</span></div><div class="line">                         <span class="comment"># is moving, this will be used in interpolating position</span></div><div class="line">                         <span class="comment"># of 3d points</span></div><div class="line"><span class="built_in">float</span>32 scan_time        <span class="comment"># time between scans [seconds]</span></div><div class="line"></div><div class="line"><span class="built_in">float</span>32 range_min        <span class="comment"># minimum range value [m]</span></div><div class="line"><span class="built_in">float</span>32 range_max        <span class="comment"># maximum range value [m]</span></div><div class="line"></div><div class="line"><span class="built_in">float</span>32[] ranges         <span class="comment"># range data [m] (<span class="doctag">Note:</span> values &lt; range_min or &gt; range_max should be discarded)</span></div><div class="line"><span class="built_in">float</span>32[] intensities    <span class="comment"># intensity data [device-specific units].  If your</span></div><div class="line">                         <span class="comment"># device does not provide intensities, please leave</span></div><div class="line">                         <span class="comment"># the array empty.</span></div></pre></td></tr></table></figure></p>
<p>为了更进一步理解激光雷达消息，接下来我们写一些代码介绍如何发布激光雷达消息。</p>
<h2 id="代码实现发布laserscan消息"><a href="#代码实现发布LaserScan消息" class="headerlink" title="代码实现发布LaserScan消息"></a>代码实现发布LaserScan消息</h2><p>新建包 laser_scan_publisher_tutorial，依赖项为 roscpp sensor_msgs<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/src</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg laser_scan_publisher_tutorial sensor_msgs roscpp</span></div></pre></td></tr></table></figure></p>
<p>在 src 目录下新建文件 laser_scan_publisher.cpp 添加以下内容：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sensor_msgs/LaserScan.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line">   ros::init(argc, argv, <span class="string">"laser_scan_publisher"</span>);</div><div class="line"> </div><div class="line">   ros::NodeHandle n;</div><div class="line">    <span class="comment">//定义发布器 scan_pub 消息类型为sensor_msgs::LaserScan</span></div><div class="line">    ros::Publisher scan_pub = n.advertise&lt;sensor_msgs::LaserScan&gt;(<span class="string">"scan"</span>, <span class="number">50</span>);</div><div class="line"></div><div class="line">   <span class="comment">//虚拟一些激光雷达的数据</span></div><div class="line">   <span class="comment">//在真实激光雷达中要替换这些数据使用真实数据</span></div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> num_readings = <span class="number">100</span>;<span class="comment">//每圈扫描点个数</span></div><div class="line">   <span class="keyword">double</span> laser_frequency = <span class="number">40</span>;<span class="comment">//扫描频率</span></div><div class="line">   <span class="keyword">double</span> ranges[num_readings];<span class="comment">//范围</span></div><div class="line">   <span class="keyword">double</span> intensities[num_readings];<span class="comment">//存储 激光雷达的强度数据</span></div><div class="line"></div><div class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">   ros::<span class="function">Rate <span class="title">r</span><span class="params">(<span class="number">1.0</span>)</span></span>;</div><div class="line">   <span class="keyword">while</span>(n.ok())&#123;</div><div class="line">     <span class="comment">//generate some fake data for our laser scan</span></div><div class="line">     <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_readings; ++i)&#123;</div><div class="line">       ranges[i] = count;</div><div class="line">       intensities[i] = <span class="number">100</span> + count;<span class="comment">//模拟一些数据</span></div><div class="line">     &#125;</div><div class="line">     ros::Time scan_time = ros::Time::now();</div><div class="line"></div><div class="line">     <span class="comment">//populate the LaserScan message</span></div><div class="line">     <span class="comment">//填充 LaserScan 消息结构</span></div><div class="line">     sensor_msgs::LaserScan scan;</div><div class="line">     scan.header.stamp = scan_time;<span class="comment">//时间戳</span></div><div class="line">     scan.header.frame_id = <span class="string">"laser_frame"</span>;<span class="comment">//参考坐标系</span></div><div class="line">     scan.angle_min = <span class="number">-1.57</span>;<span class="comment">//扫描起始角度</span></div><div class="line">     scan.angle_max = <span class="number">1.57</span>;<span class="comment">//扫描结束角度</span></div><div class="line">     scan.angle_increment = <span class="number">3.14</span> / num_readings;<span class="comment">//角度递增</span></div><div class="line">     scan.time_increment = (<span class="number">1</span> / laser_frequency) / (num_readings);<span class="comment">//时间递增</span></div><div class="line">     scan.range_min = <span class="number">0.0</span>;<span class="comment">//最小的扫描范围 单位为m</span></div><div class="line">     scan.range_max = <span class="number">100.0</span>;<span class="comment">//最大的扫描范围</span></div><div class="line"></div><div class="line">     scan.ranges.resize(num_readings);<span class="comment">//暂未理解</span></div><div class="line">     scan.intensities.resize(num_readings);</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_readings; ++i)&#123;</div><div class="line">       scan.ranges[i] = ranges[i];</div><div class="line">       scan.intensities[i] = intensities[i];</div><div class="line">     &#125;</div><div class="line">     <span class="comment">//发布激光雷达扫描数据</span></div><div class="line">     scan_pub.publish(scan);</div><div class="line">     ++count;</div><div class="line">     r.sleep();</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>修改CMakeLists.txt添加以下项：<br>   <figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">add_executable</span>(laser_scan_publisher src/laser_scan_publisher.cpp)</div><div class="line"><span class="keyword">if</span>(sensor_msgs_EXPORTED_TARGETS)</div><div class="line">   <span class="keyword">add_dependencies</span>(laser_scan_publisher <span class="variable">$&#123;sensor_msgs_EXPORTED_TARGETS&#125;</span>)</div><div class="line"><span class="keyword">endif</span>()</div><div class="line"><span class="keyword">target_link_libraries</span>(laser_scan_publisher</div><div class="line">   <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></div><div class="line"> )</div><div class="line"><span class="keyword">install</span>(TARGETS laser_scan_publisher</div><div class="line">   ARCHIVE DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</span></div><div class="line">   LIBRARY DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</span></div><div class="line">   RUNTIME DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</span></div><div class="line"> )</div></pre></td></tr></table></figure></p>
<p>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure></p>
<h1 id="发布点云消息数据"><a href="#发布点云消息数据" class="headerlink" title="发布点云消息数据"></a>发布点云消息数据</h1><h2 id="点云消息数据结构"><a href="#点云消息数据结构" class="headerlink" title="点云消息数据结构"></a>点云消息数据结构</h2><p>ROS 提供 sensor_msgs/PointCloud 消息类型用于存储和共享点云数据。它支持三维空间的点云数据，并且支持通道设置，比如可以设置一个强度通道用于存储这些点的数值强度，以下为点云消息的数据结构，参考<a href="http://docs.ros.org/api/sensor_msgs/html/msg/PointCloud.html" target="_blank" rel="external">sensor_msgs/PointCloud.msg</a>:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> This message holds a collection of 3d points, plus optional additional</span></div><div class="line"><span class="meta">#</span><span class="bash"> information about each point.</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Time of sensor data acquisition, coordinate frame ID.</span></div><div class="line">Header header</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Array of 3d points. Each Point32 should be interpreted as a 3d point</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">in</span> the frame given <span class="keyword">in</span> the header.</span></div><div class="line">geometry_msgs/Point32[] points</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Each channel should have the same number of elements as points array,</span></div><div class="line"><span class="meta">#</span><span class="bash"> and the data <span class="keyword">in</span> each channel should correspond 1:1 with each point.</span></div><div class="line"><span class="meta">#</span><span class="bash"> Channel names <span class="keyword">in</span> common practice are listed <span class="keyword">in</span> ChannelFloat32.msg.</span></div><div class="line">ChannelFloat32[] channels</div></pre></td></tr></table></figure></p>
<h2 id="代码实现点云消息数据的发布"><a href="#代码实现点云消息数据的发布" class="headerlink" title="代码实现点云消息数据的发布"></a>代码实现点云消息数据的发布</h2><p>新建包 point_cloud_publisher_tutorial 依赖项为 sensor_msgs roscpp：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg point_cloud_publisher_tutorial sensor_msgs roscpp</span></div></pre></td></tr></table></figure></p>
<p>在 src 目录下新建文件 point_cloud_publisher.cpp 添加以下内容：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sensor_msgs/PointCloud.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line">   ros::init(argc, argv, <span class="string">"point_cloud_publisher"</span>);</div><div class="line"> </div><div class="line">   ros::NodeHandle n;</div><div class="line">   <span class="comment">//创建ROS发布器 名称为 cloud_pub 消息类型为sensor_msgs::PointCloud</span></div><div class="line">   ros::Publisher cloud_pub = n.advertise&lt;sensor_msgs::PointCloud&gt;(<span class="string">"cloud"</span>, <span class="number">50</span>);</div><div class="line"></div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> num_points = <span class="number">100</span>;<span class="comment">//点的个数</span></div><div class="line"></div><div class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">   ros::<span class="function">Rate <span class="title">r</span><span class="params">(<span class="number">1.0</span>)</span></span>;<span class="comment">//发布频率</span></div><div class="line">   <span class="keyword">while</span>(n.ok())&#123;</div><div class="line">     <span class="comment">//定义点云消息数据cloud</span></div><div class="line">     sensor_msgs::PointCloud cloud;</div><div class="line">     cloud.header.stamp = ros::Time::now();<span class="comment">//时间戳</span></div><div class="line">     cloud.header.frame_id = <span class="string">"sensor_frame"</span>;<span class="comment">//参考坐标系</span></div><div class="line"></div><div class="line">     cloud.points.resize(num_points);<span class="comment">//设置点云数据的点数</span></div><div class="line"></div><div class="line">     <span class="comment">//we'll also add an intensity channel to the cloud</span></div><div class="line">     cloud.channels.resize(<span class="number">1</span>);<span class="comment">//添加一个强度通道</span></div><div class="line">     cloud.channels[<span class="number">0</span>].name = <span class="string">"intensities"</span>;</div><div class="line">     cloud.channels[<span class="number">0</span>].values.resize(num_points);<span class="comment">//设置通道的宽度与点数匹配</span></div><div class="line"></div><div class="line">     <span class="comment">//模拟填充一些点云数据并且填充强度通道数据</span></div><div class="line">     <span class="comment">//generate some fake data for our point cloud</span></div><div class="line">     <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_points; ++i)&#123;</div><div class="line">       cloud.points[i].x = <span class="number">1</span> + count;</div><div class="line">       cloud.points[i].y = <span class="number">2</span> + count;</div><div class="line">       cloud.points[i].z = <span class="number">3</span> + count;</div><div class="line">       cloud.channels[<span class="number">0</span>].values[i] = <span class="number">100</span> + count;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">//发布点云数据</span></div><div class="line">     cloud_pub.publish(cloud);</div><div class="line">     ++count;</div><div class="line">     r.sleep();</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>修改 CMakeLists.txt 添加以下项：<br> <figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">add_executable</span>(point_cloud_publisher src/point_cloud_publisher.cpp)</div><div class="line"><span class="keyword">if</span>(sensor_msgs_EXPORTED_TARGETS)</div><div class="line">     <span class="keyword">add_dependencies</span>(point_cloud_publisher <span class="variable">$&#123;sensor_msgs_EXPORTED_TARGETS&#125;</span>)</div><div class="line"><span class="keyword">endif</span>()</div><div class="line"><span class="keyword">target_link_libraries</span>(point_cloud_publisher</div><div class="line">    <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></div><div class="line">  )</div><div class="line"><span class="keyword">install</span>(TARGETS point_cloud_publisher</div><div class="line">    ARCHIVE DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</span></div><div class="line">    LIBRARY DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</span></div><div class="line">    RUNTIME DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</span></div><div class="line">  )</div></pre></td></tr></table></figure></p>
<p>回到 ~/catkin_ws 即可编译。<br>参考 <a href="http://wiki.ros.org/navigation/Tutorials/RobotSetup/Sensors" target="_blank" rel="external">Publishing Sensor Streams Over ROS</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;传感器数据发布的正确与否直接影响到 ROS 导航功能的安全和性能。如果没有正确获取传感器的数据，机器人将会迷路或撞上障碍物。有很多传感器为机器人导航提供可用的信息，比如激光雷达、摄像头、声呐、红外以及碰撞传感器等。目前ROS的导航功能包仅支持激光雷达以及点云数据也就是 sensor_msgs/LaserScan 和 sensor_msgs/PointCloud 两种消息类型。本篇学习如何发布导航需要的这两种传感器数据消息。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS sensor" scheme="http://stevenshi.me/tags/ROS-sensor/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级十五 发布里程计消息</title>
    <link href="http://stevenshi.me/2017/07/07/ros-primary-tutorial-15/"/>
    <id>http://stevenshi.me/2017/07/07/ros-primary-tutorial-15/</id>
    <published>2017-07-07T00:40:30.000Z</published>
    <updated>2017-07-20T07:20:07.488Z</updated>
    
    <content type="html"><![CDATA[<p>ROS导航功能包使用 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 来决定机器人在环境中的位置并根据传感器的数据生成静态地图。但是 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 却不能提供机器人速度的任何信息。因此导航功能包需要里程计信息源能够发布包含速度信息的变换及里程计消息。本篇将学习 nav_msgs/Odometry 消息，并且通过代码学习如何通过 ROS 以及 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 变换发布里程计消息。<br><a id="more"></a></p>
<h1 id="nav_msgsodometry-消息"><a href="#nav-msgs-Odometry-消息" class="headerlink" title="nav_msgs/Odometry 消息"></a>nav_msgs/Odometry 消息</h1><p>nav_msgs/Odometry 消息包含机器人在自由空间中的位置估计以及速度值。可以使用消息查看命令来查看 nav_msgs/Odometry 消息的详细信息：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosmsg show nav_msgs/Odometry</span></div></pre></td></tr></table></figure></p>
<p>详细的介绍可参考 <a href="http://docs.ros.org/api/nav_msgs/html/msg/Odometry.html" target="_blank" rel="external">nav_msgs/Odometry.msg</a><br>   <figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This represents an estimate of a position and velocity in free space.  </span></div><div class="line"><span class="comment"># The pose in this message should be specified in the coordinate frame given by header.frame_id.</span></div><div class="line"><span class="comment"># The twist in this message should be specified in the coordinate frame given by the child_frame_id</span></div><div class="line"><span class="attribute"><span class="nomarkup">Header</span></span> header</div><div class="line"><span class="attribute">string</span> child_frame_id</div><div class="line"><span class="attribute">geometry_msgs</span>/PoseWithCovariance pose</div><div class="line"><span class="attribute">geometry_msgs</span>/TwistWithCovariance twist</div></pre></td></tr></table></figure></p>
<p>pose 参数包含机器人在里程计框架下的位置估计并附带一个可选的位姿估算协方差。 twist 参数包含机器人在子坐标系下的速度信息，并附带一个可选的速度估算协方差，这个子坐标系通常是机器人移动基座的坐标参考系。</p>
<h1 id="使用-tf-发布里程计变换"><a href="#使用-tf-发布里程计变换" class="headerlink" title="使用 tf 发布里程计变换"></a>使用 tf 发布里程计变换</h1><p><a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 软件库负责维护机器人坐标系之间的变换树，因此任何里程计源都应该发布它管理的坐标系信息。这一部分的详细使用和说明请参考我的前一篇文章 <a href="/2017/06/08/ros-primary-tutorial-14/" title="ROS初级十四 tf配置">ROS初级十四 tf配置</a>。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>下面我们通过编写一些简单的代码实现里程计消息以及利用 tf 实现变换，模拟一个机器人进行圆周运动。新建包 odometry_publisher_tutorial,依赖项为 tf 以及 nav_msgs:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg odometry_publisher_tutorial tf nav_msgs roscpp</span></div></pre></td></tr></table></figure></p>
<p>新建cpp文件，并命名为 odometry_publisher.cpp,拷贝如下代码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line">  <span class="comment">//包含 tf 以及 nav_msgs 相关的头文件</span></div><div class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_broadcaster.h&gt;</span></span></div><div class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;nav_msgs/Odometry.h&gt;</span></span></div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line">    ros::init(argc, argv, <span class="string">"odometry_publisher"</span>);</div><div class="line"></div><div class="line">   ros::NodeHandle n;</div><div class="line"></div><div class="line">   <span class="comment">//创建一个publisher 命名为 odom_pub 消息类型为 nav_msgs::Odometry</span></div><div class="line">   ros::Publisher odom_pub = n.advertise&lt;nav_msgs::Odometry&gt;(<span class="string">"odom"</span>, <span class="number">50</span>);</div><div class="line"></div><div class="line">   <span class="comment">//创建对象 tf 广播变换</span></div><div class="line">   tf::TransformBroadcaster odom_broadcaster;</div><div class="line">   <span class="comment">//假定机器人的起始位置位于odom坐标参考系的原点即0点</span></div><div class="line">   <span class="keyword">double</span> x = <span class="number">0.0</span>;</div><div class="line">   <span class="keyword">double</span> y = <span class="number">0.0</span>;</div><div class="line">   <span class="keyword">double</span> th = <span class="number">0.0</span>;</div><div class="line"></div><div class="line">   <span class="comment">//设定一个初始速度，在 odom 坐标参考系下</span></div><div class="line">   <span class="keyword">double</span> vx = <span class="number">0.1</span>;<span class="comment">// x 方向 0.1m/s</span></div><div class="line">   <span class="keyword">double</span> vy = <span class="number">-0.1</span>;<span class="comment">//  y 方向 -0.1m/s</span></div><div class="line">   <span class="keyword">double</span> vth = <span class="number">0.1</span>;<span class="comment">// 角速度为0.1rad/s</span></div><div class="line"></div><div class="line">   ros::Time current_time, last_time;</div><div class="line">   <span class="comment">//获取系统当前时间</span></div><div class="line">   current_time = ros::Time::now();</div><div class="line">   last_time = ros::Time::now();</div><div class="line"></div><div class="line">   <span class="comment">//以 1HZ频率发布</span></div><div class="line">   ros::<span class="function">Rate <span class="title">r</span><span class="params">(<span class="number">1.0</span>)</span></span>;</div><div class="line">   <span class="keyword">while</span>(n.ok())&#123;</div><div class="line">     current_time = ros::Time::now();</div><div class="line"></div><div class="line">     <span class="comment">//计算里程计信息</span></div><div class="line">     <span class="comment">//compute odometry in a typical way given the velocities of the robot</span></div><div class="line">     <span class="keyword">double</span> dt = (current_time - last_time).toSec();</div><div class="line">     <span class="keyword">double</span> delta_x = (vx * <span class="built_in">cos</span>(th) - vy * <span class="built_in">sin</span>(th)) * dt;</div><div class="line">     <span class="keyword">double</span> delta_y = (vx * <span class="built_in">sin</span>(th) + vy * <span class="built_in">cos</span>(th)) * dt;</div><div class="line">     <span class="keyword">double</span> delta_th = vth * dt;</div><div class="line"></div><div class="line">     <span class="comment">//更新里程计信息</span></div><div class="line">     x += delta_x;</div><div class="line">     y += delta_y;</div><div class="line">     th += delta_th;</div><div class="line"></div><div class="line">     <span class="comment">//以下为了兼容三维系统下的消息结构，将里程计的偏航角转换成四元数</span></div><div class="line">     <span class="comment">//since all odometry is 6DOF we'll need a quaternion created from yaw</span></div><div class="line">     geometry_msgs::Quaternion odom_quat = tf::createQuaternionMsgFromYaw(th);</div><div class="line">        <span class="comment">//first, we'll publish the transform over tf</span></div><div class="line">     <span class="comment">//TransformStamped 类型为tf 发布时需要的类型</span></div><div class="line">     geometry_msgs::TransformStamped odom_trans;</div><div class="line">     <span class="comment">//时间戳</span></div><div class="line">     odom_trans.header.stamp = current_time;</div><div class="line">     <span class="comment">//父参考坐标系 id</span></div><div class="line">     odom_trans.header.frame_id = <span class="string">"odom"</span>;</div><div class="line">     <span class="comment">//子参考系 id</span></div><div class="line">     odom_trans.child_frame_id = <span class="string">"base_link"</span>;</div><div class="line">     <span class="comment">//我们希望发布从odom到base_link的变换，因此这两个坐标系的关系不要搞错</span></div><div class="line"></div><div class="line">     <span class="comment">//填充变换数据</span></div><div class="line">     odom_trans.transform.translation.x = x;</div><div class="line">     odom_trans.transform.translation.y = y;</div><div class="line">     odom_trans.transform.translation.z = <span class="number">0.0</span>;</div><div class="line">     odom_trans.transform.rotation = odom_quat;</div><div class="line"></div><div class="line">     <span class="comment">//发送变换</span></div><div class="line">     <span class="comment">//send the transform</span></div><div class="line">     odom_broadcaster.sendTransform(odom_trans);</div><div class="line"></div><div class="line">     <span class="comment">//填充时间戳，发布nav_msgs/Odometry 里程计消息</span></div><div class="line">     <span class="comment">//以便于导航包可以获取速度信息</span></div><div class="line">     <span class="comment">//还需设置时间戳以及父子参考坐标系</span></div><div class="line">     <span class="comment">//next, we'll publish the odometry message over ROS</span></div><div class="line">     nav_msgs::Odometry odom;</div><div class="line">     odom.header.stamp = current_time;</div><div class="line">     odom.header.frame_id = <span class="string">"odom"</span>;</div><div class="line">     odom.child_frame_id = <span class="string">"base_link"</span>;</div><div class="line"></div><div class="line">     <span class="comment">//最后填充机器人的位置以及速度信息，</span></div><div class="line">     <span class="comment">//并且发布该信息，因为是机器人本体，</span></div><div class="line">     <span class="comment">//所以参考坐标系为 base_link</span></div><div class="line">     <span class="comment">//set the position</span></div><div class="line">     odom.pose.pose.position.x = x;</div><div class="line">     odom.pose.pose.position.y = y;</div><div class="line">     odom.pose.pose.position.z = <span class="number">0.0</span>;</div><div class="line">     odom.pose.pose.orientation = odom_quat;</div><div class="line"></div><div class="line">     <span class="comment">//set the velocity</span></div><div class="line">     odom.twist.twist.linear.x = vx;</div><div class="line">     odom.twist.twist.linear.y = vy;</div><div class="line">     odom.twist.twist.angular.z = vth;</div><div class="line"></div><div class="line">     <span class="comment">//publish the message</span></div><div class="line">     odom_pub.publish(odom);</div><div class="line"></div><div class="line">    last_time = current_time;</div><div class="line">    r.sleep();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>设置 CMakeLists.txt 添加依赖项：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(odometry_publisher src/odometry_publisher.cpp)</span></span></div><div class="line"><span class="function"><span class="title">if</span><span class="params">(nav_msgs_EXPORTED_TARGETS)</span></span></div><div class="line">	add_dependencies(odometry_publisher $&#123;nav_msgs_EXPORTED_TARGETS&#125;)</div><div class="line"><span class="function"><span class="title">endif</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(odometry_publisher $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line">install(TARGETS odometry_publisher</div><div class="line">	ARCHIVE DESTINATION $&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</div><div class="line">	LIBRARY DESTINATION $&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</div><div class="line">	RUNTIME DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</div><div class="line">	)</div></pre></td></tr></table></figure></p>
<p>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure></p>
<p>参考：<a href="http://wiki.ros.org/navigation/Tutorials/RobotSetup/Odom" target="_blank" rel="external">Publishing Odometry Information Over ROS</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ROS导航功能包使用 &lt;a href=&quot;http://wiki.ros.org/tf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tf&lt;/a&gt; 来决定机器人在环境中的位置并根据传感器的数据生成静态地图。但是 &lt;a href=&quot;http://wiki.ros.org/tf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tf&lt;/a&gt; 却不能提供机器人速度的任何信息。因此导航功能包需要里程计信息源能够发布包含速度信息的变换及里程计消息。本篇将学习 nav_msgs/Odometry 消息，并且通过代码学习如何通过 ROS 以及 &lt;a href=&quot;http://wiki.ros.org/tf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tf&lt;/a&gt; 变换发布里程计消息。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS odometry" scheme="http://stevenshi.me/tags/ROS-odometry/"/>
    
  </entry>
  
  <entry>
    <title>ROS 探索</title>
    <link href="http://stevenshi.me/2017/07/01/directory-for-ros/"/>
    <id>http://stevenshi.me/2017/07/01/directory-for-ros/</id>
    <published>2017-07-01T01:23:20.000Z</published>
    <updated>2017-10-11T03:49:38.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ros实战"><a href="#ROS实战" class="headerlink" title="ROS实战"></a>ROS实战</h2><ol>
<li><a href="/2017/06/28/omniwheel-kinematical-analysis/" title="三轮全向移动底盘运动学解析">三轮全向移动底盘运动学解析</a></li>
<li><a href="/2017/07/18/control-mobile-base-by-serial/" title="ROS通过串口控制移动底座">ROS通过串口控制移动底座</a></li>
<li><a href="/2017/10/11/stm32-serial-port-ros/" title="详解stm32串口到底如何与ROS实现信息交互">详解stm32串口到底如何与ROS实现信息交互</a>
</li>
</ol>
<h2 id="ros中级教程"><a href="#ROS中级教程" class="headerlink" title="ROS中级教程"></a>ROS中级教程</h2><ol>
<li><a href="/2017/07/10/ros-intermediate-tutorial-1/" title="ROS中级一 配置并使用ROS导航功能包集">ROS中级一 配置并使用ROS导航功能包集</a></li>
<li><a href="/2017/07/11/ros-intermediate-tutorial-2/" title="ROS中级二 利用Rviz实时观测模拟SLAM过程">ROS中级二 利用Rviz实时观测模拟SLAM过程</a>
</li>
</ol>
<h2 id="ros初级教程"><a href="#ROS初级教程" class="headerlink" title="ROS初级教程"></a>ROS初级教程</h2><ol>
<li><a href="/2017/05/26/ros-primary-tutorial-1/" title="ROS初级一 安装与配置">ROS初级一 安装与配置</a></li>
<li><a href="/2017/05/26/ros-primary-tutorial-2/" title="ROS初级二 文件系统介绍">ROS初级二 文件系统介绍</a></li>
<li><a href="/2017/05/26/ros-primary-tutorial-3/" title="ROS初级三 创建ROS程序包">ROS初级三 创建ROS程序包</a></li>
<li><a href="/2017/05/26/ros-primary-tutorial-4/" title="ROS初级四 编译ROS程序包">ROS初级四 编译ROS程序包</a></li>
<li><a href="/2017/05/27/ros-primary-tutorial-5/" title="ROS初级五 理解ROS节点">ROS初级五 理解ROS节点</a></li>
<li><a href="/2017/05/27/ros-primary-tutorial-6/" title="ROS初级六 理解ROS话题">ROS初级六 理解ROS话题</a></li>
<li><a href="/2017/05/31/ros-primary-tutorial-7/" title="ROS初级七 理解ROS服务和参数">ROS初级七 理解ROS服务和参数</a></li>
<li><a href="/2017/05/31/ros-primary-tutorial-8/" title="ROS初级八 使用rqt_console和roslaunch">ROS初级八 使用rqt_console和roslaunch</a></li>
<li><a href="/2017/05/31/ros-primary-tutorial-9/" title="ROS初级九 创建ROS消息和ROS服务">ROS初级九 创建ROS消息和ROS服务</a></li>
<li><a href="/2017/05/31/ros-primary-tutorial-10/" title="ROS初级十 简单的ROS发布器和订阅器">ROS初级十 简单的ROS发布器和订阅器</a></li>
<li><a href="/2017/06/01/ros-primary-tutorial-11/" title="ROS初级十一 简单的ROS服务器和客户端">ROS初级十一 简单的ROS服务器和客户端</a></li>
<li><a href="/2017/06/07/ros-primary-tutorial-12/" title="ROS初级十二 理解ROS坐标转换上">ROS初级十二 理解ROS坐标转换上</a></li>
<li><a href="/2017/06/07/ros-primary-tutorial-13/" title="ROS初级十三 理解ROS坐标转换下">ROS初级十三 理解ROS坐标转换下</a></li>
<li><a href="/2017/06/08/ros-primary-tutorial-14/" title="ROS初级十四 tf 配置">ROS初级十四 tf 配置</a></li>
<li><a href="/2017/07/07/ros-primary-tutorial-15/" title="ROS初级十五 发布里程计消息">ROS初级十五 发布里程计消息</a></li>
<li><a href="/2017/07/07/ros-primary-tutorial-16/" title="ROS初级十六 发布传感器数据流">ROS初级十六 发布传感器数据流</a></li>
<li><a href="/2017/07/08/ros-primary-tutorial-17/" title="ROS初级十七 URDF解读">ROS初级十七 URDF解读</a>
</li>
</ol>
<h2 id="ros初探"><a href="#ROS初探" class="headerlink" title="ROS初探"></a>ROS初探</h2><ol>
<li><a href="/2017/05/15/ros-indigo-raspberry/" title="树莓派3B安装 ROS-Indigo">树莓派3B安装 ROS-Indigo</a></li>
<li><a href="/2017/05/17/ros-serial/" title="ROS 串口通信">ROS 串口通信</a></li>
<li><a href="/2017/05/22/ros-communication/" title="ROS 多机通信">ROS 多机通信</a></li>
<li><a href="/2017/05/23/ros-navigation-compile/" title="贝叶斯滤波库在树莓派上的移植">贝叶斯滤波库在树莓派上的移植</a></li>
<li><a href="/2017/05/24/ros-simulation/" title="ROS 机器人仿真">ROS 机器人仿真</a></li>
<li><a href="/2017/05/24/ros-navigation-simulation/" title="ROS 导航仿真">ROS 导航仿真</a></li>
<li><a href="/2017/05/25/debug-ros-using-qt/" title="使用 Qt 编译 ROS">使用 Qt 编译 ROS</a>
</li>
</ol>
<h2 id="ros-书籍"><a href="#ROS-书籍" class="headerlink" title="ROS 书籍"></a>ROS 书籍</h2><ol>
<li><a href="/2017/06/12/ros-books/" title="ROS 学习电子书">ROS 学习电子书</a>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ros实战&quot;&gt;&lt;a href=&quot;#ROS实战&quot; class=&quot;headerlink&quot; title=&quot;ROS实战&quot;&gt;&lt;/a&gt;ROS实战&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/06/28/omniwheel-kinematical-analysis/
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS" scheme="http://stevenshi.me/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>三轮全向移动底盘运动学解析</title>
    <link href="http://stevenshi.me/2017/06/28/omniwheel-kinematical-analysis/"/>
    <id>http://stevenshi.me/2017/06/28/omniwheel-kinematical-analysis/</id>
    <published>2017-06-28T05:44:18.000Z</published>
    <updated>2017-06-29T03:13:11.092Z</updated>
    
    <content type="html"><![CDATA[<p>三轮全向移动底盘因其良好的运动性并且结构简单，近年来备受欢迎。三个轮子互相间隔120°，每个全向轮由若干个小滚轮组成，各个滚轮的母线组成一个完整的圆。机器人既可以沿轮面的切线方向移动，也可以沿轮子的轴线方向移动，这两种运动的组合即可以实现平面内任意方向的运动。</p>
<p><img src="/2017/06/28/omniwheel-kinematical-analysis/omnidiagram.jpg" alt=""></p>
<a id="more"></a>
<h1 id="运动学分析"><a href="#运动学分析" class="headerlink" title="运动学分析"></a>运动学分析</h1><p><img src="/2017/06/28/omniwheel-kinematical-analysis/omni.jpg" alt=""><br>为便于运动学分析，我们以理想情况为基础，三个轮子相对于车体的中轴线对称，且物理尺寸重量等完全一致；上层负载均衡，机器人的重心与三个轮子转动轴线的交点重合；三个轮体与地面摩擦力足够大，不会发生打滑现象；机器人中心到三个全向轮的距离相等。<br>定义绝对坐标系 <em>XOY</em>，机器人自身坐标系 <em>X’O’Y’</em>。机器人的姿态角为 <em>θ</em>，即机器人自身坐标相对于绝对坐标的旋转角度。机器人自身旋转的角速度设为 <em>W</em>。 <em>L</em> 为三个轮子相对于机器人中心的距离，$V_A$,$V_B$,$V_C$ 分别表示三个轮子沿驱动方向的速度；角度 <em>ψ</em> 为 轮子与机器人坐标系 <em>X</em> 轴的夹角，这个夹角我们可以算出为 60°。我们假定机器人在任意时刻的速度为 $V = [V_x,V_y,W]$,其中 $V_x$ 和 $V_y$ 分别为机器人在自身坐标系下的  <em>X</em> 轴 <em>Y</em> 轴方向的速度，<em>W</em> 为机器人运动的角速度，假定顺时针方向为正方向。那么可得出机器人运动学方程：<br>$ V_A= V_x + L W $<br>$ V_B= -V_x cosψ + V_y sinψ + L W $<br>$ V_C= -V_x cosψ - V_y sinψ + L W $<br>写成矩阵形式为：<br>$\left[<br>\begin{matrix}<br>V_A \\<br>V_B \\<br>V_C \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; L \\<br>-cosψ &amp; sinψ &amp; L \\<br>-cosψ &amp; -sinψ &amp; L<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>V_x \\<br>V_y \\<br>W \\<br>\end{matrix}<br>\right] $<br>车轮的线速度还可以表示为：<br>$ V_A = Rω_A $<br>$ V_B = Rω_B $<br>$ V_C = Rω_C $<br>式中 R 为全向轮的半径，ω 为全向轮旋转角速度,因此得出：<br>$\left[<br>\begin{matrix}<br>ω_A \\<br>ω_B \\<br>ω_C \\<br>\end{matrix}<br>\right] = R^{-1}<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; L \\<br>-cosψ &amp; sinψ &amp; L \\<br>-cosψ &amp; -sinψ &amp; L<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>V_x \\<br>V_y \\<br>W \\<br>\end{matrix}<br>\right]$<br>以上是机器人在自身坐标系下的运动学方程，实际应用中还需要转换为全局坐标系，上图中机器人自身坐标与全局坐标的夹角为 <em>θ</em>，假设机器人在全局坐标系中的速度为<br>$V_g = [V_gx,V_gy,W_g]$<br>那么可以推出：<br>$V_gx = V_xcosθ - V_ysinθ $<br>$V_gy = V_xsinθ + V_ycosθ $<br>因此可以推出机器人相对于自身坐标下的速度 $V = [V_x,V_y,W]$ 与机器人相对于全局坐标下的速度 $V_g = [V_gx,V_gy,W_g]$ 之间的变换关系：</p>
<p>$R(θ)=<br>\left[<br>\begin{matrix}<br>cosθ &amp; -sinθ &amp; 0 \\<br>sinθ &amp;  cosθ &amp; 0 \\<br>0 &amp; 0 &amp; 1 \\<br>\end{matrix}<br>\right]$</p>
<p>因此两个坐标系下的变换可写成：</p>
<p>$\left[<br>\begin{matrix}<br>V_gx \\<br>V_gy \\<br>W_g \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>cosθ &amp; -sinθ &amp; 0 \\<br>sinθ &amp;  cosθ &amp; 0 \\<br>0 &amp; 0 &amp; 1 \\<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>V_x \\<br>V_y \\<br>W \\<br>\end{matrix}<br>\right]$</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三轮全向移动底盘因其良好的运动性并且结构简单，近年来备受欢迎。三个轮子互相间隔120°，每个全向轮由若干个小滚轮组成，各个滚轮的母线组成一个完整的圆。机器人既可以沿轮面的切线方向移动，也可以沿轮子的轴线方向移动，这两种运动的组合即可以实现平面内任意方向的运动。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/06/28/omniwheel-kinematical-analysis/omnidiagram.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="omniwheel" scheme="http://stevenshi.me/tags/omniwheel/"/>
    
  </entry>
  
  <entry>
    <title>hexo中插入数学公式</title>
    <link href="http://stevenshi.me/2017/06/26/hexo-insert-formula/"/>
    <id>http://stevenshi.me/2017/06/26/hexo-insert-formula/</id>
    <published>2017-06-26T03:28:55.000Z</published>
    <updated>2017-07-20T01:49:14.449Z</updated>
    
    <content type="html"><![CDATA[<p>原生hexo并不支持数学公式，需要安装插件 <a href="https://www.mathjax.org/" target="_blank" rel="external">mathJax</a>。<a href="https://www.mathjax.org/" target="_blank" rel="external">mathJax</a> 是一款运行于浏览器中的开源数学符号渲染引擎，使用 <a href="https://www.mathjax.org/" target="_blank" rel="external">mathJax</a> 可以方便的在浏览器中嵌入数学公式。<a href="https://www.mathjax.org/" target="_blank" rel="external">mathJax</a> 使用网络字体产生高质量的排版，因此可适应各种分辨率，它的显示是基于文本的而非图片，因此显示效果更好。这些公式可以被搜索引擎使用，因此公式里的符号一样可以被搜索引擎检索到。先看一下矩阵的显示效果:</p>
<p>$\left[<br>\begin{matrix}<br>V_A \\<br>V_B \\<br>V_C \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; L \\<br>-cosψ &amp; sinψ &amp; L \\<br>-cosψ &amp; -sinψ &amp; L<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>V_x \\<br>V_y \\<br>W \\<br>\end{matrix}<br>\right] $</p>
<a id="more"></a>
<h1 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h1><p>　　<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-<span class="built_in">math</span> <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<p>在站点配置文件 <em>_config.yml</em> 中添加：<br>　　<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">math</span>:</div><div class="line">  <span class="attribute">engine</span>: <span class="string">'mathjax'</span> # or <span class="string">'katex'</span></div><div class="line">  <span class="attribute">mathjax</span>:</div><div class="line">    # <span class="attribute">src</span>: custom_mathjax_source</div><div class="line">    <span class="attribute">config</span>:</div><div class="line">      # MathJax config</div></pre></td></tr></table></figure></p>
<p>在 next 主题配置文件中 <em>themes/next-theme/_config.yml</em> 中将 mathJax 设为 true:<br>　　<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># MathJax Support</span></div><div class="line"><span class="attr">mathjax:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  per_page:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  cdn:</span> <span class="string">//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span></div></pre></td></tr></table></figure></p>
<p>也可以在文章的开始集成插件支持，但不建议这么做：<br>　　<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span></span></div><div class="line">   <span class="attr">src</span>=<span class="string">"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"</span>&gt;<span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>公式插入格式：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span>数学公式<span class="symbol">$</span> 行内 不独占一行</div><div class="line"><span class="symbol">$</span><span class="symbol">$</span>数学公式<span class="symbol">$</span><span class="symbol">$</span> 行间 独占一行</div></pre></td></tr></table></figure></p>
<p>例如：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$f</span>(x)=ax+b$</span></div></pre></td></tr></table></figure></p>
<p>显示效果为：$f(x)=ax+b$<br>如果是行间则使用：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span><span class="symbol">$</span>f(x)=ax+b<span class="symbol">$</span><span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>显示效果为：$$f(x)=ax+b$$</p>
<h1 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h1><h2 id="上标与下标"><a href="#上标与下标" class="headerlink" title="上标与下标"></a>上标与下标</h2><p>使用 ^ 表示上标，使用 _ 表示下标，如果上下标的内容多于一个字符，可以使用大括号括起来：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span><span class="symbol">$</span>f(x) = a_1x^n + a_2x^&#123;n<span class="number">-1</span>&#125; + a_3x^&#123;n<span class="number">-2</span>&#125;<span class="symbol">$</span><span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>显示效果为：$$f(x) = a_1x^n + a_2x^{n-1} + a_3x^{n-2}$$<br>如果左右两边都有上下标可以使用 \sideset 语法：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span><span class="symbol">$</span>\sideset&#123;^n_k&#125;&#123;^x_y&#125;a<span class="symbol">$</span><span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>显示效果为：$$\sideset{^n_k}{^x_y}a$$</p>
<h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>在 markdown 语法中，\, $, {, }, _都是有特殊含义的，所以需要加\转义。小括号与方括号可以使用原始的() [] 大括号需要转义\也可以使用\lbrace和 \rbrace<br>　　<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">\&#123;</span>x*y<span class="symbol">\&#125;</span></div><div class="line"><span class="symbol">\l</span>brace x*y <span class="symbol">\r</span>brace</div></pre></td></tr></table></figure></p>
<p>显示效果为：$ \lbrace x*y \rbrace $<br>原始符号不会随着公式大小自动缩放，需要使用 \left 和 \right 来实现自动缩放：<br>　　<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="formula">$$<span class="tag">\<span class="name">left</span></span> <span class="tag">\<span class="name">lbrace</span></span> <span class="tag">\<span class="name">sum</span></span>_&#123;i=0&#125;^n i^3 = <span class="tag">\<span class="name">frac</span><span class="string">&#123;(n^2+n)(n+6)&#125;</span><span class="string">&#123;9&#125;</span></span> <span class="tag">\<span class="name">right</span></span> <span class="tag">\<span class="name">rbrace</span></span>$$</span></div></pre></td></tr></table></figure></p>
<p>效果：<br>$$\left \lbrace \sum_{i=0}^n i^3 = \frac{(n^2+n)(n+6)}{9} \right \rbrace$$<br>不使用\left 和 \right的效果：<br>　　<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="formula">$$ <span class="tag">\<span class="name">lbrace</span></span> <span class="tag">\<span class="name">sum</span></span>_&#123;i=0&#125;^n i^3 = <span class="tag">\<span class="name">frac</span><span class="string">&#123;(n^2+n)(n+6)&#125;</span><span class="string">&#123;9&#125;</span></span>  <span class="tag">\<span class="name">rbrace</span></span>$$</span></div></pre></td></tr></table></figure></p>
<p>$$ \lbrace \sum_{i=0}^n i^3 = \frac{(n^2+n)(n+6)}{9}  \rbrace$$</p>
<h2 id="分数与开方"><a href="#分数与开方" class="headerlink" title="分数与开方"></a>分数与开方</h2><p>可以使用\frac 或者 \over 实现分数的显示：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span>\<span class="built-in">frac</span> xy<span class="symbol">$</span></div><div class="line"><span class="symbol">$</span> x+<span class="number">3</span> \over y+<span class="number">5</span> <span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>分别显示为：$\frac xy$ 和 $ x+3 \over y+5 $。<br>开方使用\sqrt:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> \<span class="built-in">sqrt</span>&#123;x^<span class="number">5</span>&#125; <span class="symbol">$</span></div><div class="line"><span class="symbol">$</span> \<span class="built-in">sqrt</span>[<span class="number">3</span>]&#123;\<span class="built-in">frac</span> xy&#125; <span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>分别显示为：$ \sqrt{x^5} $ 和 $ \sqrt[3]{\frac xy} $</p>
<h2 id="求和与积分"><a href="#求和与积分" class="headerlink" title="求和与积分"></a>求和与积分</h2><p>求和使用\sum,可加上下标，积分使用\int可加上下限，双重积分用\iint:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> \sum_&#123;i=<span class="number">0</span>&#125;^n <span class="symbol">$</span></div><div class="line"><span class="symbol">$</span> \int_1^\infty <span class="symbol">$</span></div><div class="line"><span class="symbol">$</span> \iint_1^\infty <span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>分别显示:$ \sum_{i=0}^n $ 和 $ \int_1^\infty $ 以及 $ \iint_1^\infty $</p>
<h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><p>极限使用\lim:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> \lim_&#123;x \to <span class="number">0</span>&#125; <span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>显示为：$ \lim_{x \to 0} $</p>
<h2 id="表格与矩阵"><a href="#表格与矩阵" class="headerlink" title="表格与矩阵"></a>表格与矩阵</h2><p>表格样式lcr表示居中，|加入一条竖线，\hline表示行间横线，列之间用&amp;分隔，行之间用\分隔<br>　　<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="formula">$$<span class="tag">\<span class="name">begin</span><span class="string">&#123;array&#125;</span><span class="string">&#123;c|lcr&#125;</span></span></span></div><div class="line">n &amp; <span class="tag">\<span class="name">text</span><span class="string">&#123;Left&#125;</span></span> &amp; <span class="tag">\<span class="name">text</span><span class="string">&#123;Center&#125;</span></span> &amp; <span class="tag">\<span class="name">text</span><span class="string">&#123;Right&#125;</span></span> <span class="tag">\<span class="name">\</span></span><span class="tag">\<span class="name">\</span></span></div><div class="line"><span class="tag">\<span class="name">hline</span></span></div><div class="line">1 &amp; 1.97 &amp; 5 &amp; 12 <span class="tag">\<span class="name">\</span></span><span class="tag">\<span class="name">\</span></span></div><div class="line">2 &amp; -11 &amp; 19 &amp; -80 <span class="tag">\<span class="name">\</span></span><span class="tag">\<span class="name">\</span></span></div><div class="line">3 &amp; 70 &amp; 209 &amp; 1+i <span class="tag">\<span class="name">\</span></span><span class="tag">\<span class="name">\</span></span></div><div class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;array&#125;</span></span>$$</div></pre></td></tr></table></figure></p>
<p>显示效果为：$$\begin{array}{c|lcr}<br>n &amp; \text{Left} &amp; \text{Center} &amp; \text{Right} \\<br>\hline<br>1 &amp; 1.97 &amp; 5 &amp; 12 \\<br>2 &amp; -11 &amp; 19 &amp; -80 \\<br>3 &amp; 70 &amp; 209 &amp; 1+i \\<br>\end{array}$$<br>表格的插入也可以使用以下方式：<br>　　<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">名称|<span class="string">说明</span></div><div class="line">---|<span class="string">---</span>|<span class="string">---</span></div><div class="line">temperature|<span class="string">  室内温度</span></div><div class="line">set temperature|<span class="string">  设定温度</span></div><div class="line">height|<span class="string">  室内高度</span></div></pre></td></tr></table></figure></p>
<p>显示效果：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>temperature</td>
<td>室内温度</td>
</tr>
<tr>
<td>set temperature</td>
<td>设定温度</td>
</tr>
<tr>
<td>height</td>
<td>室内高度</td>
</tr>
</tbody>
</table>
<p>矩阵显示和表格很相似<br>　　<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$$<span class="symbol">\l</span>eft[</div><div class="line"><span class="symbol">\b</span>egin&#123;matrix&#125;</div><div class="line">V_A <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">V_B <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">V_C <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line"><span class="symbol">\e</span>nd&#123;matrix&#125;</div><div class="line"><span class="symbol">\r</span>ight] =</div><div class="line"><span class="symbol">\l</span>eft[</div><div class="line"><span class="symbol">\b</span>egin&#123;matrix&#125;</div><div class="line">1 &amp; 0 &amp; L <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">-cosψ &amp; sinψ &amp; L <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">-cosψ &amp; -sinψ &amp; L</div><div class="line"><span class="symbol">\e</span>nd&#123;matrix&#125;</div><div class="line"><span class="symbol">\r</span>ight]</div><div class="line"><span class="symbol">\l</span>eft[</div><div class="line"><span class="symbol">\b</span>egin&#123;matrix&#125;</div><div class="line">V_x <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">V_y <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">W <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line"><span class="symbol">\e</span>nd&#123;matrix&#125;</div><div class="line"><span class="symbol">\r</span>ight] $$</div></pre></td></tr></table></figure></p>
<p>显示效果：　<br>$$\left[<br>\begin{matrix}<br>V_A \\<br>V_B \\<br>V_C \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; L \\<br>-cosψ &amp; sinψ &amp; L \\<br>-cosψ &amp; -sinψ &amp; L<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>V_x \\<br>V_y \\<br>W \\<br>\end{matrix}<br>\right] $$<br>还有其他矩阵如内联矩阵增广矩阵方程组等，下次再补充，未完待续…<br>参考：<br><a href="https://www.mathjax.org" target="_blank" rel="external">mathJax</a><br><a href="http://mohu.org/info/symbols/symbols.htm" target="_blank" rel="external">LaTeX</a><br><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference/5044" target="_blank" rel="external">mathjax-basic-tutorial-and-quick-reference</a><br><a href="http://mlworks.cn/posts/introduction-to-mathjax-and-latex-expression" target="_blank" rel="external">MathJax公式简介</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原生hexo并不支持数学公式，需要安装插件 &lt;a href=&quot;https://www.mathjax.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mathJax&lt;/a&gt;。&lt;a href=&quot;https://www.mathjax.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mathJax&lt;/a&gt; 是一款运行于浏览器中的开源数学符号渲染引擎，使用 &lt;a href=&quot;https://www.mathjax.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mathJax&lt;/a&gt; 可以方便的在浏览器中嵌入数学公式。&lt;a href=&quot;https://www.mathjax.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mathJax&lt;/a&gt; 使用网络字体产生高质量的排版，因此可适应各种分辨率，它的显示是基于文本的而非图片，因此显示效果更好。这些公式可以被搜索引擎使用，因此公式里的符号一样可以被搜索引擎检索到。先看一下矩阵的显示效果:&lt;/p&gt;
&lt;p&gt;$\left[&lt;br&gt;\begin{matrix}&lt;br&gt;V_A \\&lt;br&gt;V_B \\&lt;br&gt;V_C \\&lt;br&gt;\end{matrix}&lt;br&gt;\right] =&lt;br&gt;\left[&lt;br&gt;\begin{matrix}&lt;br&gt;1 &amp;amp; 0 &amp;amp; L \\&lt;br&gt;-cosψ &amp;amp; sinψ &amp;amp; L \\&lt;br&gt;-cosψ &amp;amp; -sinψ &amp;amp; L&lt;br&gt;\end{matrix}&lt;br&gt;\right]&lt;br&gt;\left[&lt;br&gt;\begin{matrix}&lt;br&gt;V_x \\&lt;br&gt;V_y \\&lt;br&gt;W \\&lt;br&gt;\end{matrix}&lt;br&gt;\right] $&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://stevenshi.me/categories/hexo/"/>
    
    
      <category term="formula" scheme="http://stevenshi.me/tags/formula/"/>
    
  </entry>
  
  <entry>
    <title>超经典 ROS 学习电子书</title>
    <link href="http://stevenshi.me/2017/06/12/ros-books/"/>
    <id>http://stevenshi.me/2017/06/12/ros-books/</id>
    <published>2017-06-12T08:55:48.000Z</published>
    <updated>2017-07-11T00:29:08.256Z</updated>
    
    <content type="html"><![CDATA[<p>收藏了几本 ROS 学习的超级经典教材，都是高清晰电子版，在这里和大家分享一下。</p>
<p><img src="/2017/06/12/ros-books/book.jpg" alt=""><br><a id="more"></a></p>
<p>下载地址：<a href="https://github.com/StevenShiChina/books" target="_blank" rel="external">ROS-Books</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;收藏了几本 ROS 学习的超级经典教材，都是高清晰电子版，在这里和大家分享一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/06/12/ros-books/book.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS Books" scheme="http://stevenshi.me/tags/ROS-Books/"/>
    
  </entry>
  
  <entry>
    <title>Putty 远程运行 ubuntu 图形界面程序</title>
    <link href="http://stevenshi.me/2017/06/12/putty-graphics-ubuntu/"/>
    <id>http://stevenshi.me/2017/06/12/putty-graphics-ubuntu/</id>
    <published>2017-06-12T00:16:20.000Z</published>
    <updated>2017-07-20T08:39:15.430Z</updated>
    
    <content type="html"><![CDATA[<p>远程登录 linux 一般通过 SSH 协议，或 telnet 协议，这两种协议一般都只是命令行界面，而不能远程运行带有图形界面的应用程序。但是 putty 这款软件支持 X11 Forwarding,如果再配合一个 <a href="https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1" target="_blank" rel="external">X server</a> 问题就解决了。一般常用的 <a href="https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1" target="_blank" rel="external">X server</a> 有 <a href="https://sourceforge.net/projects/xming/" target="_blank" rel="external">Xming</a> 和 <a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="external">VcXsrv</a>。基本的原理就是 ubuntu 开启 X11 转发服务，putty 负责数据的转发，而 X Server 进行图形界面的显示。<br><a id="more"></a></p>
<h1 id="ssh-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h1><p>配置 ubuntu 允许 X11 转发，打开 /etc/ssh/sshd_config 使能 X11 forwarding:<br>   <figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">X11Forwarding</span> <span class="literal">yes</span></div></pre></td></tr></table></figure></p>
<p>配置完成后记得重启 SSH 服务：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo /etc/init.d/ssh restart</span></div></pre></td></tr></table></figure></p>
<h1 id="x-server-配置"><a href="#X-Server-配置" class="headerlink" title="X Server 配置"></a>X Server 配置</h1><p>X Server 可以使用 <a href="https://sourceforge.net/projects/xming/" target="_blank" rel="external">Xming</a> 也可以使用 <a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="external">VcXsrv</a>，在 win10 64bits 环境下测试 <a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="external">VcXsrv</a> 的效果较好。</p>
<h2 id="xming"><a href="#Xming" class="headerlink" title="Xming"></a><a href="https://sourceforge.net/projects/xming/" target="_blank" rel="external">Xming</a></h2><p>Xming 的安装保持默认即可，安装完成后运行 Xlaunch 进行简单的配置：</p>
<p><img src="/2017/06/12/putty-graphics-ubuntu/xmingconfig.jpg" alt=""></p>
<p>主要是 Display number 的配置，记住这个号码，之后在 putty 中会用到。保存配置后即可启动 Xming。</p>
<h2 id="vcxsrv"><a href="#VcXsrv" class="headerlink" title="VcXsrv"></a><a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="external">VcXsrv</a></h2><p>VcXsrv 安装完成后运行 XLaunch 进行配置，和前面 xming 的配置类似，主要是 Display number 我这里配置为 0。</p>
<h1 id="putty-配置"><a href="#Putty-配置" class="headerlink" title="Putty 配置"></a>Putty 配置</h1><p>Putty 首先选择 SSH 协议，端口 22：<br><img src="/2017/06/12/putty-graphics-ubuntu/puttyssh.jpg" alt=""><br>还需配置X11：<br><img src="/2017/06/12/putty-graphics-ubuntu/puttyx11.jpg" alt=""></p>
<p>注意 X display location 中的 localhost:0 ，这个端口号即是前面设置的 Display number，保持前后一致即可。<br>登录到 ubuntu 后，在命令行界面打开一个图形界面程序：<br><img src="/2017/06/12/putty-graphics-ubuntu/run.jpg" alt=""><br>比较不爽的是当用键盘控制时，turtle 的反应比较慢，不如直接在 ubuntu 系统内运行快。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;远程登录 linux 一般通过 SSH 协议，或 telnet 协议，这两种协议一般都只是命令行界面，而不能远程运行带有图形界面的应用程序。但是 putty 这款软件支持 X11 Forwarding,如果再配合一个 &lt;a href=&quot;https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;X server&lt;/a&gt; 问题就解决了。一般常用的 &lt;a href=&quot;https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;X server&lt;/a&gt; 有 &lt;a href=&quot;https://sourceforge.net/projects/xming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xming&lt;/a&gt; 和 &lt;a href=&quot;https://sourceforge.net/projects/vcxsrv/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VcXsrv&lt;/a&gt;。基本的原理就是 ubuntu 开启 X11 转发服务，putty 负责数据的转发，而 X Server 进行图形界面的显示。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://stevenshi.me/categories/linux/"/>
    
    
      <category term="PuttyGraphics" scheme="http://stevenshi.me/tags/PuttyGraphics/"/>
    
  </entry>
  
  <entry>
    <title>Git 实用命令总结</title>
    <link href="http://stevenshi.me/2017/06/09/git-summary/"/>
    <id>http://stevenshi.me/2017/06/09/git-summary/</id>
    <published>2017-06-09T02:16:08.000Z</published>
    <updated>2017-07-20T08:39:15.851Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Git 那么久也没来得及总结一下，今天抽空将 Git 经常用到的一些命令记录下来，以备不时之需。</p>
<h1 id="创建代码仓"><a href="#创建代码仓" class="headerlink" title="创建代码仓"></a>创建代码仓</h1><p>如果远程已有代码仓可以直接 clone 至本地：<br>   <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">clone</span> <span class="title">https</span>://github.com/username/repository.git</div></pre></td></tr></table></figure></p>
<p>使用时请将 username 和 repository 替换成自己需要的远程代码仓地址，比如 clone 我的 learning_tf 代码仓至本地：<br>   <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">clone</span> <span class="title">https</span>://github.com/StevenShiChina/learning_tf.git</div></pre></td></tr></table></figure></p>
<p>值得一提得是 git 不仅支持 https 协议，还支持 ssh 协议等，具体可参考 <a href="https://git-scm.com/book/id/v2/Git-on-the-Server-The-Protocols" target="_blank" rel="external">git-protocols</a>。<br>也可以在本地创建一个 git 项目：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git init</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="本地修改与更新"><a href="#本地修改与更新" class="headerlink" title="本地修改与更新"></a>本地修改与更新</h1><p>在本地新建文件或修改文件后，要将文件修改提交到暂存区：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> git add --<span class="keyword">all</span> <span class="comment">// 当前目录下的所有文件都提交到暂存</span></div></pre></td></tr></table></figure></p>
<p>也可以使用如下命令：<br>   <figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">add</span> . <span class="comment">// ‘.’指当前目录下所有文件</span></div></pre></td></tr></table></figure></p>
<p>只添加某个文件：<br>   <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">add</span><span class="bash"> -p &lt;file&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果忘记了当前目录下修改了哪个文件可以用以下命令查看：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git status</span></div></pre></td></tr></table></figure></p>
<p>修改完之后可以提交本地所有修改到暂存区：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git commit <span class="_">-a</span></span></div></pre></td></tr></table></figure></p>
<p>为了区分每次提交的不同可以附加消息提交：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"your message to add here"</span></span></div></pre></td></tr></table></figure></p>
<p> 如果在提交到暂存前提示错误，可以删除 git 的缓存，重新提交到暂存：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git rm -r --cached .</span></div><div class="line"><span class="meta">$</span><span class="bash"> git add --all</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"your message to add here"</span></span></div></pre></td></tr></table></figure></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>在将本地代码仓推送至远程之前，我们还需要对本地 git 进行一些必要的配置，包括全局用户名以及邮件，这个可以配置为全局的也可以配置在自己的代码仓下：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span>  <span class="comment">// 生成SSH Key</span></div><div class="line">$ git config --global user<span class="selector-class">.name</span> <span class="string">"your username"</span> <span class="comment">//配置远程仓的用户名</span></div><div class="line">$ git config --global user<span class="selector-class">.email</span> <span class="string">"your_email@youremail.com"</span> <span class="comment">//配置邮件地址</span></div></pre></td></tr></table></figure></p>
<p>需要将生成的 SSH Key 添加到 github 具体可参考站内文章 <a href="/2017/05/07/hexo-blog/" title="hexo+github建立个人博客">hexo+github建立个人博客</a> 。<br>可以通过以下命令查看是否能连接到远程：<br>   <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>ssh -T git<span class="variable">@github</span>.com</div></pre></td></tr></table></figure></p>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>如果是本地新建的代码仓，需要通过以下命令将远程主机的代码仓与本地对应起来：<br>   <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote <span class="built_in">add</span> origin http<span class="variable">s:</span>//github.<span class="keyword">com</span>/username/repository.git</div></pre></td></tr></table></figure></p>
<p>查看远程分支：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></div><div class="line"><span class="meta">$</span><span class="bash"> git remote show &lt;分支名&gt; //查看某个分支信息</span></div></pre></td></tr></table></figure></p>
<p>如果远程有多个分支，可以通过以下命令切换：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git checkout &lt;分支名&gt;</span></div><div class="line"><span class="meta">$</span><span class="bash"> git checkout -b &lt;分支名&gt; //该命令可以创建分支并切换到分支</span></div></pre></td></tr></table></figure></p>
<p>如果搞错了，可以删除本地分支：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git branch <span class="_">-d</span> &lt;分支名&gt;</span></div></pre></td></tr></table></figure></p>
<p>可以通过 tag 给当前版本打个标签：<br>   <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">tag</span> <span class="title">&lt;tag-name</span>&gt;</div></pre></td></tr></table></figure></p>
<h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><p>本地修改完成后，需要推送至远程：<br>   <figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">push</span> <span class="built_in">origin</span> &lt;分支名&gt;</div></pre></td></tr></table></figure></p>
<h1 id="本地同步"><a href="#本地同步" class="headerlink" title="本地同步"></a>本地同步</h1><p>在本地可以通过 pull 命令来同步远程文件：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> git pull  <span class="comment">// 同步所有</span></div><div class="line"><span class="symbol">$</span> git pull origin &lt;分支名&gt; <span class="comment">//同步某个分支</span></div></pre></td></tr></table></figure></p>
<h1 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h1>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git merge &lt;分支名&gt;</span></div></pre></td></tr></table></figure>
<h1 id="回撤"><a href="#回撤" class="headerlink" title="回撤"></a>回撤</h1><p>如果修改错了，想回退到上一个版本：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD</span></div></pre></td></tr></table></figure></p>
<p>未完待续…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 Git 那么久也没来得及总结一下，今天抽空将 Git 经常用到的一些命令记录下来，以备不时之需。&lt;/p&gt;
&lt;h1 id=&quot;创建代码仓&quot;&gt;&lt;a href=&quot;#创建代码仓&quot; class=&quot;headerlink&quot; title=&quot;创建代码仓&quot;&gt;&lt;/a&gt;创建代码仓&lt;/h1&gt;&lt;p&gt;如果远程已有代码仓可以直接 clone 至本地：&lt;br&gt;   &lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git &lt;span class=&quot;keyword&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;https&lt;/span&gt;://github.com/username/repository.git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用时请将 username 和 repository 替换成自己需要的远程代码仓地址，比如 clone 我的 learning_tf 代码仓至本地：&lt;br&gt;   &lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git &lt;span class=&quot;keyword&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;https&lt;/span&gt;://github.com/StevenShiChina/learning_tf.git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;值得一提得是 git 不仅支持 https 协议，还支持 ssh 协议等，具体可参考 &lt;a href=&quot;https://git-scm.com/book/id/v2/Git-on-the-Server-The-Protocols&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git-protocols&lt;/a&gt;。&lt;br&gt;也可以在本地创建一个 git 项目：&lt;br&gt;   &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; git init&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://stevenshi.me/categories/linux/"/>
    
    
      <category term="Git命令" scheme="http://stevenshi.me/tags/Git%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级十四 tf 配置</title>
    <link href="http://stevenshi.me/2017/06/08/ros-primary-tutorial-14/"/>
    <id>http://stevenshi.me/2017/06/08/ros-primary-tutorial-14/</id>
    <published>2017-06-08T03:15:29.000Z</published>
    <updated>2017-06-13T05:58:03.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="transform-configuration-变换配置"><a href="#Transform-Configuration-变换配置" class="headerlink" title="Transform Configuration 变换配置"></a>Transform Configuration 变换配置</h1><p>变换树是一种偏移，体现了不同坐标系之间的变换和旋转。假设有一个简单的机器人，只有移动底座以及一个位于底座上方的激光扫描仪。因此定义两个坐标系，一个对应激光扫描仪的中心点的坐标系，一个对应于移动底座中心点的坐标系，两个坐标系分别取名为 <em>base_laser</em> 和 <em>base_link</em> 。</p>
<p><img src="/2017/06/08/ros-primary-tutorial-14/simple_robot.png" alt=""><br><a id="more"></a><br>假设我们已经从激光扫描仪获取了一些数据，但这些数据都是以物体到激光扫描仪的距离给出的，即坐标系是 <em>base_laser</em>。 现在通过这些数据让机器人避开一些障碍物，如果不将这些激光扫描仪获取的数据从 <em>base_laser</em> 转换到 <em>base_link</em> 那么机器人在避开障碍物的过程中有可能失败，因此需要将激光扫描仪获取的数据从 <em>base_laser</em> 坐标系转换到 <em>base_link</em> 坐标系。因此需要知道两个坐标系的关系。看上图，<em>base_laser</em> 中心点位于 <em>base_link</em> 中心点上方 20cm 处，并向右偏移 10cm 。因此从激光扫描仪到移动底座的转换关系为(x:-0.1m,y:0.0m,z:-0.2m),反过来从移动底座到激光扫描仪的转换关系为(x:0.1m,y:0.0m,z:0.2m)。<br>当然这种变换关系我们可以手动去计算保存，需要的时候再调用，但是如果坐标系统增加，变换关系复杂，那么就需要利用 tf 来实现了。使用 tf 来管理坐标转关系，需要将转换关系添加到转换树中，转换树中的每一个节点都对应着一种坐标系，节点之间的连线即是两个坐标相互转换的一种表示，从当前节点到子节点的表示。 tf 利用树结构保证了两个坐标系之间只存在唯一的转换关系，我们假定节点的连线方向从父节点指向子节点。</p>
<p><img src="/2017/06/08/ros-primary-tutorial-14/tf_robot.png" alt=""></p>
<p>基于以上描述，我们需要创建两个节点，分别命名为 <em>base_laser</em> 以及 <em>base_link</em>。为了明确两者之间的关系，需要指定谁是父节点 parent，谁是子节点 child。因为 tf 假设所有的转换都是从 parent 到 child。这里我们选择 <em>base_link</em> 为 parent 父节点，<em>base_laser</em> 为 child 子节点，将来如果有其他传感器也将作为子节点添加到移动底座。因此转换关系的数学关系为(x:0.1m,y:0.0m,z:0.2m)。知道这个转换关系 <em>base_link</em> 就可以推理出 <em>base_laser</em> 扫描出的数据跟自己的位置关系，因此可以安全的避开障碍物并规划合理的路径。这个转换实质是将 <em>base_laser</em> 坐标系的点转换到 <em>base_link</em> 坐标系中去。本篇涉及的代码已上传至 <a href="https://github.com/StevenShiChina/robot_setup_tf" target="_blank" rel="external">mygithub</a>。</p>
<h1 id="broadcasting-a-transform-广播变换"><a href="#Broadcasting-a-Transform-广播变换" class="headerlink" title="Broadcasting a Transform 广播变换"></a>Broadcasting a Transform 广播变换</h1><p>创建源码包，添加依赖项：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/src/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg robot_setup_tf roscpp tf geometry_msgs</span></div></pre></td></tr></table></figure></p>
<p>创建一个节点用于广播变换，我们将节点命名为 tf_broadcaster，在 robot_setup_tf/src 目录下建立文件 tf_broadcaster.cpp，添加以下内容：<br>   <figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_broadcaster.h&gt;</span></span></div><div class="line"> </div><div class="line">  int main(int argc, char** argv)</div><div class="line">  &#123;</div><div class="line"><span class="symbol">      ros:</span>:init(argc, argv, <span class="string">"robot_tf_publisher"</span>);</div><div class="line"><span class="symbol">      ros:</span>:NodeHandle n;</div><div class="line"><span class="symbol"> </span></div><div class="line">      ros::Rate r(<span class="number">100</span>);</div><div class="line">     <span class="comment">//创建TransformBroadcaster对象，用于发布变换关系</span></div><div class="line"><span class="symbol">     tf:</span>:TransformBroadcaster broadcaster;</div><div class="line">     <span class="comment">//通过TransformBroadcaster来发送转换关系，需要附带5个参数。</span></div><div class="line">     <span class="comment">//第1个参数，我们传递了旋转变换，在两个坐标系的发送的任意旋转，</span></div><div class="line">     <span class="comment">//都必须通过调用btQuaternion.现在情况下，我们不想旋转，</span></div><div class="line">     <span class="comment">//所以我们在调用btQauternion的时候，将pitch,roll,yaw的参数都置0.</span></div><div class="line">     <span class="comment">//第2个参数，btVector3，任何变换过程都需要调用它。</span></div><div class="line">     <span class="comment">//相应的传感器的x方向距离机体基准偏移10cm，z方向20cm。</span></div><div class="line">     <span class="comment">//第3个参数，我们需要给定转换关系携带一个时间戳，我们标记为ros::Time::now()。</span></div><div class="line">     <span class="comment">//第4个参数，我们需要传递parent节点的名字。</span></div><div class="line">     <span class="comment">//第5个参数，传递的是child节点的名字。</span></div><div class="line">     while(n.ok())&#123;</div><div class="line">         broadcaster.sendTransform(</div><div class="line"><span class="symbol">             tf:</span>:StampedTransform(</div><div class="line"><span class="symbol">                 tf:</span>:Transform(<span class="symbol">tf::</span>Quaternion(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>), <span class="symbol">tf::</span>Vector3(<span class="number">0.1</span>, <span class="number">0.0</span>, <span class="number">0.2</span>)),</div><div class="line"><span class="symbol">             ros:</span>:<span class="symbol">Time::</span>now(),<span class="string">"base_link"</span>, <span class="string">"base_laser"</span>));</div><div class="line">         r.sleep();</div><div class="line"></div><div class="line">     &#125;</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>通过TransformBroadcaster来发送转换关系，需要附带5个参数。第1个参数，我们传递了旋转变换，在两个坐标系的发送的任意旋转，都必须通过调用 btQuaternion。现在我们不想旋转，所以我们在调用 btQauternion 的时候，将 pitch,roll,yaw 的参数都置0。第2个参数 btVector3，任何变换过程都需要调用它。相应的传感器的 x 方向距离机体基准偏移 10cm，z 方向 20cm。第3个参数，我们需要给定转换关系携带一个时间戳，我们标记为 ros::Time::now()。第4个参数，我们需要传递 parent 节点的名字。第5个参数，传递的是 child 节点的名字。 </p>
<h1 id="using-a-transform-调用变换"><a href="#Using-a-Transform-调用变换" class="headerlink" title="Using a Transform 调用变换"></a>Using a Transform 调用变换</h1><p>上面的节点用于发布转换关系，即将 <em>base_laser</em> 的坐标转换为 <em>base_link</em> 的坐标，现在我们利用这个转换关系，将从激光扫描仪获取的数据转换到移动底座对应的坐标系中来，即 <em>base_laser</em> 到 <em>base_link</em> 的转换。需要建立一个节点用于监听这种变换，在 robot_setup_tf/src 目录下新建文件 tf_listener.cpp 并添加以下代码：<br>   <figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;geometry_msgs/PointStamped.h&gt;</span></span></div><div class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_listener.h&gt;</span></span></div><div class="line">  </div><div class="line"><span class="comment">//创建一个函数，参数为TransformListener,作用为将“base_laser”坐标系的点，变换到“base_link”坐标系中。</span></div><div class="line"><span class="comment">//这个函数将会以ros::Timer定义的周期，作为一个回调函数周期调用,目前周期是1s</span></div><div class="line"> void transformPoint(const <span class="symbol">tf::</span>TransformListener&amp; listener)&#123;</div><div class="line">       </div><div class="line">     </div><div class="line">      <span class="comment">//此处，我们创建一个虚拟点，作为geometry_msgs::PointStamped。</span></div><div class="line">      <span class="comment">//消息名字最后的“Stamped”的意义是，它包含了一个头部，</span></div><div class="line">      <span class="comment">//允许我们去把时间戳和消息的frame_id相关联起来。</span></div><div class="line">      <span class="comment">//我们将会设置laser_point的时间戳为ros::time(),</span></div><div class="line">      <span class="comment">//即是允许我们请求TransformListener取得最新的变换数据。</span></div><div class="line">      <span class="comment">//对于header里的frame_id，我们设置为“base_laser”,</span></div><div class="line">      <span class="comment">//因为我们是创建的是扫描仪坐标系里的虚拟点。</span></div><div class="line">      <span class="comment">//最后，我们将会设置具体的虚拟点，比如x:1.0,y:0.2,z:0.0 </span></div><div class="line">      <span class="comment">//we'll create a point in the base_laser frame that we'd like to transform to the base_link frame</span></div><div class="line"><span class="symbol">       geometry_msgs:</span>:PointStamped laser_point;</div><div class="line">       laser_point.header.frame_id = <span class="string">"base_laser"</span>;</div><div class="line">  </div><div class="line">      <span class="comment">//we'll just use the most recent transform available for our simple example</span></div><div class="line">      laser_point.header.stamp = <span class="symbol">ros::</span>Time();</div><div class="line"> </div><div class="line">      <span class="comment">//just an arbitrary point in space</span></div><div class="line">      <span class="comment">//这里我们给定一个固定点</span></div><div class="line">      laser_point.point.x = <span class="number">1.0</span>;</div><div class="line">      laser_point.point.y = <span class="number">0.2</span>;</div><div class="line">      laser_point.point.z = <span class="number">0.0</span>;</div><div class="line"> </div><div class="line">      <span class="comment">//我们已经有了从“base_laser”到“base_link”变换的点数据。</span></div><div class="line">      <span class="comment">//进一步，我们通过TransformListener对象，</span></div><div class="line">      <span class="comment">//调用transformPoint(),填充三个参数来进行数据变换。</span></div><div class="line">      <span class="comment">//第1个参数，代表我们想要变换的目标坐标系的名字。</span></div><div class="line">      <span class="comment">//第2个参数填充需要变换的原始坐标系的点对象，</span></div><div class="line">      <span class="comment">//第3个参数填充，目标坐标系的点对象。</span></div><div class="line">      <span class="comment">//所以，在函数调用后，base_point里存储的信息就是变换后的点坐标。 </span></div><div class="line">      try&#123;</div><div class="line"><span class="symbol">          geometry_msgs:</span>:PointStamped base_point;</div><div class="line">          listener.transformPoint(<span class="string">"base_link"</span>, laser_point, base_point);</div><div class="line"> </div><div class="line">          ROS_INFO(<span class="string">"base_laser: (%.2f, %.2f. %.2f) -----&gt; base_link: (%.2f, %.2f, %.2f) at time %.2f"</span>,</div><div class="line">          laser_point.point.x, laser_point.point.y, laser_point.point.z,</div><div class="line">          base_point.point.x, base_point.point.y, base_point.point.z, base_point.header.stamp.toSec());</div><div class="line">      &#125;</div><div class="line">     <span class="comment">//显示异常信息</span></div><div class="line">      catch(<span class="symbol">tf::</span>TransformException&amp; ex)&#123;</div><div class="line">          ROS_ERROR(<span class="string">"Received an exception trying to transform a point from \"base_laser\" to \"base_link\": %s"</span>, ex.what());</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line"> int main(int argc, char** argv)&#123;</div><div class="line"><span class="symbol">      ros:</span>:init(argc, argv, <span class="string">"robot_tf_listener"</span>);</div><div class="line"><span class="symbol">      ros:</span>:NodeHandle n;</div><div class="line">      <span class="comment">//一个TransformListener目标会自动的订阅ROS系统中的变换消息主题，</span></div><div class="line">      <span class="comment">//同时管理所有的该通道上的变换数据</span></div><div class="line"><span class="symbol">      tf:</span>:TransformListener listener(<span class="symbol">ros::</span>Duration(<span class="number">10</span>));</div><div class="line"> </div><div class="line">      <span class="comment">//we'll transform a point once every second</span></div><div class="line"><span class="symbol">      ros:</span>:Timer timer = n.createTimer(<span class="symbol">ros::</span>Duration(<span class="number">1.0</span>), <span class="symbol">boost::</span>bind(&amp;transformPoint, <span class="symbol">boost::</span>ref(listener)));</div><div class="line"><span class="symbol"> </span></div><div class="line">      ros::spin();</div><div class="line"> </div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h1 id="编译测试"><a href="#编译测试" class="headerlink" title="编译测试"></a>编译测试</h1><p>在编译之前需要修改 CMakeLists.txt 文件，添加构建依赖项<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(tf_broadcaster src/tf_broadcaster.cpp)</span></span></div><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(tf_listener src/tf_listener.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(tf_listener $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p>编译:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div><div class="line"><span class="meta">$</span><span class="bash"> rospack profile</span></div></pre></td></tr></table></figure></p>
<p>开启三个 terminal 分别运行：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun robot_setup_tf tf_broadcaster</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun robot_setup_tf tf_listener</span></div></pre></td></tr></table></figure></p>
<p>在 tf_listener 运行后可以看到如下输出，每隔1秒发布一次：</p>
<p><img src="/2017/06/08/ros-primary-tutorial-14/tf.png" alt=""></p>
<p>参考 <a href="http://wiki.ros.org/cn/navigation/Tutorials/RobotSetup/TF" target="_blank" rel="external">RobotSetup/TF</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Transform-Configuration-变换配置&quot;&gt;&lt;a href=&quot;#Transform-Configuration-变换配置&quot; class=&quot;headerlink&quot; title=&quot;Transform Configuration 变换配置&quot;&gt;&lt;/a&gt;Transform Configuration 变换配置&lt;/h1&gt;&lt;p&gt;变换树是一种偏移，体现了不同坐标系之间的变换和旋转。假设有一个简单的机器人，只有移动底座以及一个位于底座上方的激光扫描仪。因此定义两个坐标系，一个对应激光扫描仪的中心点的坐标系，一个对应于移动底座中心点的坐标系，两个坐标系分别取名为 &lt;em&gt;base_laser&lt;/em&gt; 和 &lt;em&gt;base_link&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/06/08/ros-primary-tutorial-14/simple_robot.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS tf" scheme="http://stevenshi.me/tags/ROS-tf/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级十三 理解ROS坐标转换下</title>
    <link href="http://stevenshi.me/2017/06/07/ros-primary-tutorial-13/"/>
    <id>http://stevenshi.me/2017/06/07/ros-primary-tutorial-13/</id>
    <published>2017-06-07T05:44:30.000Z</published>
    <updated>2017-06-13T05:52:15.456Z</updated>
    
    <content type="html"><![CDATA[<p>本篇继续学习 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a>。通过编写一个简单的 tf broadcaster 以及 tf listener 来更进一步的理解坐标变换。本篇涉及到的代码已上传到 <a href="https://github.com/StevenShiChina/learning_tf" target="_blank" rel="external">mygithub</a>。</p>
<h1 id="tf-broadcaster"><a href="#tf-broadcaster" class="headerlink" title="tf broadcaster"></a>tf broadcaster</h1><p>tf broadcaster 用于广播坐标变换，任何节点都可以监听该变换。先创建一个程序包，名字随心，这里我们命名为 <em>learning_tf</em>,包的依赖项为 <em>roscpp rospy turtlesim</em><br><a id="more"></a><br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/src/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg learning_tf roscpp rospy turtlesim</span></div></pre></td></tr></table></figure></p>
<p>为了便于使用 <em>roscd</em> 我们先编译一下这个程序包:</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div><div class="line"><span class="meta">$</span><span class="bash"> rospack profile</span></div></pre></td></tr></table></figure>
<p>此时使用 roscd 输入lear 再按 TAB 即可出现 <em>learning_tf/</em>。进入 <em>learning_tf/src</em> 目录下，新建文件 <em>turtle_tf_broadcaster.cpp</em> 添加如下代码：</p>
   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_broadcaster.h&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;turtlesim/Pose.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">string</span> turtle_name;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">poseCallback</span><span class="params">(<span class="keyword">const</span> turtlesim::PoseConstPtr&amp; msg)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="comment">//创建一个 TransformBroadcaster 对象用于发布坐标变换</span></div><div class="line">  <span class="keyword">static</span> tf::TransformBroadcaster br;</div><div class="line">  </div><div class="line">  <span class="comment">//创建Transform 对象并将2D的坐标转换为3D坐标系</span></div><div class="line">  tf::Transform transform;</div><div class="line">  transform.setOrigin( tf::Vector3(msg-&gt;x, msg-&gt;y, <span class="number">0.0</span>) );<span class="comment">//获取 x y 坐标，不需要Z坐标 </span></div><div class="line"> </div><div class="line">  tf::Quaternion q;</div><div class="line">  q.setRPY(<span class="number">0</span>, <span class="number">0</span>, msg-&gt;theta);<span class="comment">// x y轴旋转为0因为在地面运动只能绕Z轴的旋转</span></div><div class="line">  transform.setRotation(q);<span class="comment">//</span></div><div class="line">  <span class="comment">//发布坐标变换 ros::Time::now()为转换携带的时间戳 传递父节点的名字 world 子节点为turtle_name</span></div><div class="line">  br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), <span class="string">"world"</span>, turtle_name));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line">&#123;</div><div class="line">  ros::init(argc, argv, <span class="string">"my_tf_broadcaster"</span>);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>)&#123;ROS_ERROR(<span class="string">"need turtle name as argument"</span>); <span class="keyword">return</span> <span class="number">-1</span>;&#125;;</div><div class="line"> </div><div class="line">  turtle_name = argv[<span class="number">1</span>];</div><div class="line"></div><div class="line">  ros::NodeHandle node;</div><div class="line"> <span class="comment">//订阅 turtle_name 的 turtleX/pose 话题，当turtle位置改变时调用回调函数 poseCallback</span></div><div class="line">  ros::Subscriber sub = node.subscribe(turtle_name+<span class="string">"/pose"</span>, <span class="number">10</span>, &amp;poseCallback);</div><div class="line"></div><div class="line">  ros::spin();</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<p>代码的整个流程为：<br>1 订阅 turtleX/pose 位置话题<br>2 发布坐标变换到tf树<br>修改CMakeLists.txt:</p>
   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(turtle_tf_broadcaster src/turtle_tf_broadcaster.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(turtle_tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure>
<p>编译：</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure>
<p>编译报错：</p>
   <figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Linking CXX executable /home/steven/catkin_ws/devel/<span class="keyword">lib</span>/learning_tf/turtle_tf_broadcaster</div><div class="line">CMakeFiles/turtle_tf_broadcaster.dir/src/turtle_tf_broadcaster.cpp.o: <span class="keyword">In</span> <span class="keyword">function</span> `poseCallback(boost::shared_ptr&lt;turtlesim::Pose_&lt;std::allocator&lt;void&gt; &gt; <span class="keyword">const</span>&gt; <span class="keyword">const</span>&amp;)<span class="comment">':</span></div><div class="line">turtle_tf_broadcaster.cpp:(.<span class="keyword">text</span>+<span class="number">0x39</span>): undefined reference <span class="keyword">to</span> `tf::TransformBroadcaster::TransformBroadcaster()<span class="comment">'</span></div><div class="line">turtle_tf_broadcaster.cpp:(.<span class="keyword">text</span>+<span class="number">0x1a3</span>): undefined reference <span class="keyword">to</span> `tf::TransformBroadcaster::sendTransform(tf::StampedTransform <span class="keyword">const</span>&amp;)<span class="comment">'</span></div><div class="line">collect2: ld returned <span class="number">1</span> <span class="keyword">exit</span> status</div><div class="line">make[<span class="number">2</span>]: *** [/home/steven/catkin_ws/devel/<span class="keyword">lib</span>/learning_tf/turtle_tf_broadcaster] <span class="keyword">Error</span> <span class="number">1</span></div><div class="line">make[<span class="number">1</span>]: *** [learning_tf/CMakeFiles/turtle_tf_broadcaster.dir/all] <span class="keyword">Error</span> <span class="number">2</span></div><div class="line">make: *** [all] <span class="keyword">Error</span> <span class="number">2</span></div><div class="line">Invoking <span class="string">"make -j1 -l1"</span> failed</div></pre></td></tr></table></figure>
<p>忘记了在 CMakeLists.txt 文件需要添加 tf 包的依赖：</p>
   <figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">find_package(<span class="name">catkin</span> REQUIRED COMPONENTS</div><div class="line">    roscpp</div><div class="line">    rospy</div><div class="line">    turtlesim</div><div class="line">    tf</div><div class="line">  )</div></pre></td></tr></table></figure>
<p>编译完成后在 ~/catkin_ws/devel/lib/learning_tf/ 目录下会看到编译好的可执行文件 turtle_tf_broadcaster<br>接下来创建一个 launch 文件：</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> mkdir -p ~/catkin_ws/src/learning_tf/launch</span></div><div class="line"><span class="meta">$</span><span class="bash"> roscd learning_tf/launch/</span></div><div class="line"><span class="meta">$</span><span class="bash"> touch start_demo.launch</span></div></pre></td></tr></table></figure>
<p>输入以下内容：</p>
   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Turtlesim Node--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"turtlesim"</span> <span class="attr">type</span>=<span class="string">"turtlesim_node"</span> <span class="attr">name</span>=<span class="string">"sim"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"turtlesim"</span> <span class="attr">type</span>=<span class="string">"turtle_teleop_key"</span> <span class="attr">name</span>=<span class="string">"teleop"</span> <span class="attr">output</span>=<span class="string">"screen"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Axes --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"scale_linear"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">type</span>=<span class="string">"double"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"scale_angular"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">type</span>=<span class="string">"double"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"learning_tf"</span> <span class="attr">type</span>=<span class="string">"turtle_tf_broadcaster"</span></span></div><div class="line">          <span class="attr">args</span>=<span class="string">"/turtle1"</span> <span class="attr">name</span>=<span class="string">"turtle1_tf_broadcaster"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"learning_tf"</span> <span class="attr">type</span>=<span class="string">"turtle_tf_broadcaster"</span></span></div><div class="line">          <span class="attr">args</span>=<span class="string">"/turtle2"</span> <span class="attr">name</span>=<span class="string">"turtle2_tf_broadcaster"</span> /&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">launch</span>&gt;</span></div></pre></td></tr></table></figure>
<p>launch文件启动了4个节点，分别是：<br> 1 turtlesim 包中的类型为 turtlesim_node 名称为 sim 的节点；<br> 2 turtlesim 包中的类型为 turtle_teleop_key 名称为 teleop 的节点；<br> 3 learning_tf 包中类型为 turtle_tf_broadcaster 名称为 turtle1_tf_broadcaster 的节点；<br> 4 learning_tf 包中类型为 turtle_tf_broadcaster 名称为 turtle2_tf_broadcaster 的节点。</p>
<h1 id="tf-listener"><a href="#tf-listener" class="headerlink" title="tf listener"></a>tf listener</h1><p>前面编写了broadcaster 用于发布 turtle 的坐标变换到 tf树，下面来编写 listener 来监听坐标的变换。在 learning_tf/src 目录下新建文件 turtle_tf_listener.cpp 添加如下代码:</p>
   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_listener.h&gt; //接收转换</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;geometry_msgs/Twist.h&gt; //消息</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;turtlesim/Spawn.h&gt; //再生</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line"></div><div class="line">    ros::init(argc, argv, <span class="string">"my_tf_listener"</span>);<span class="comment">//节点名称</span></div><div class="line"> </div><div class="line">    ros::NodeHandle node;<span class="comment">//节点</span></div><div class="line"></div><div class="line">    <span class="comment">//再生服务</span></div><div class="line">    ros::service::waitForService(<span class="string">"spawn"</span>);</div><div class="line">    ros::ServiceClient add_turtle =</div><div class="line">     node.serviceClient&lt;turtlesim::Spawn&gt;(<span class="string">"spawn"</span>);</div><div class="line">    turtlesim::Spawn srv;</div><div class="line">    add_turtle.call(srv);</div><div class="line"></div><div class="line">    <span class="comment">//通过话题 turtle2/cmd_vel 发布 geometry_msgs::Twist 类型消息</span></div><div class="line">    ros::Publisher turtle_vel = </div><div class="line">    node.advertise&lt;geometry_msgs::Twist&gt;(<span class="string">"turtle2/cmd_vel"</span>, <span class="number">10</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//创建接收对象，一旦TransformListener创建，就开始接收tf转换消息</span></div><div class="line">    tf::TransformListener listener; </div><div class="line"></div><div class="line">    ros::<span class="function">Rate <span class="title">rate</span><span class="params">(<span class="number">10.0</span>)</span></span>;</div><div class="line">    <span class="keyword">while</span> (node.ok())&#123;</div><div class="line">      tf::StampedTransform transform;</div><div class="line">      <span class="comment">//from turtle2 到 trutle1 即当 turtle2移动时,turtle1跟随 turtle2 运动</span></div><div class="line">      <span class="keyword">try</span>&#123;</div><div class="line">        listener.lookupTransform(<span class="string">"/turtle2"</span>, <span class="string">"/turtle1"</span>,</div><div class="line">                                 ros::Time(<span class="number">0</span>), transform);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (tf::TransformException &amp;ex) &#123;</div><div class="line">        ROS_ERROR(<span class="string">"%s"</span>,ex.what());</div><div class="line">        ros::Duration(<span class="number">1.0</span>).sleep();</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 计算新的角速度和线速度</span></div><div class="line">      geometry_msgs::Twist vel_msg;</div><div class="line">      vel_msg.angular.z = <span class="number">4.0</span> * <span class="built_in">atan2</span>(transform.getOrigin().y(),</div><div class="line">                                      transform.getOrigin().x());</div><div class="line">      vel_msg.linear.x = <span class="number">0.5</span> * <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(transform.getOrigin().x(), <span class="number">2</span>) +</div><div class="line">                                    <span class="built_in">pow</span>(transform.getOrigin().y(), <span class="number">2</span>));</div><div class="line">      turtle_vel.publish(vel_msg);</div><div class="line"> </div><div class="line">      rate.sleep();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
<p>在CMakeLists.txt中添加依赖项：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(turtle_tf_listener src/turtle_tf_listener.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(turtle_tf_listener $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p>编译如果提示错误：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">turtle_tf_listener<span class="selector-class">.cpp</span>:<span class="number">3</span>:<span class="number">32</span>: fatal error: </div><div class="line">turtlesim/Velocity<span class="selector-class">.h</span>: No such file or directory compilation terminated.</div></pre></td></tr></table></figure></p>
<p>则文件使用的为之前版本，应该选择下载 hydro 版本的 参考 <a href="http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20listener%20%28C%2B%2B%29" target="_blank" rel="external">Writing listener C++</a><br>之后修改start_demo.launch 将listener节点添加进去：<br>   <figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;node pkg=<span class="string">"learning_tf"</span> <span class="class"><span class="keyword">type</span></span>=<span class="string">"turtle_tf_listener"</span> name=<span class="string">"listener"</span> /&gt;</div></pre></td></tr></table></figure></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>停止之前的launch 文件，然后启动 start_demo.launch：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roslaunch learning_tf start_demo.launch</span></div></pre></td></tr></table></figure></p>
<p>可以通过以下命令查看坐标广播信息：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosrun tf tf_<span class="keyword">echo</span> <span class="string">/world</span> <span class="string">/turtle1</span></div></pre></td></tr></table></figure></p>
<p>错误</p>
<p>运行 start_demo.launch 时提示错误<em> [ERROR] [1496887441.589043649]: “turtle2” passed to lookupTransform argument target_frame does not exist. </em>  但是当控制一个 turtle 移动时另外一个也可以跟随移动，参照 <a href="http://answers.ros.org/question/148121/something-wrong-with-tf-tutorial/" target="_blank" rel="external">http://answers.ros.org/question/148121/something-wrong-with-tf-tutorial/</a> 的修改，在函数 listener.lookupTransform 的前面添加 listener.waitForTransform(“/turtle2”, “/turtle1”, ros::Time(0), ros::Duration(3.0));然后重新编译，再次运行错误消失。运行 rviz 可以看到两个 turtle 之间的运动坐标变换<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rviz rviz <span class="_">-d</span> `rospack find turtle_tf`/rviz/turtle_rviz.rviz</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/06/07/ros-primary-tutorial-13/startdemo.jpg" alt=""></p>
<h1 id="adding-a-frame"><a href="#adding-a-frame" class="headerlink" title="adding a frame"></a>adding a frame</h1><p>通常情况下，系统中有一个全局坐标系 world ，当添加一个激光扫描仪，或者再添加一个双目摄像头，那么此时就需要在系统中添加两个坐标参考系，利用 tf 让系统帮我们将激光扫描仪的数据或双目摄像头的数据转换到全局坐标系中去，因此添加一个坐标系是非常必要的。<br>tf 以树形结构维护和保存多个参考系坐标，在这个结构中不能有闭环产生，这就意味着，坐标参考系树形结构中只能有一个父参考系 parent,它可以有多个子参考坐标系 child。下面图中 tf 树形结构中有三个参考坐标系，world，turtle1 和 turtle2。 并且 turtle1 和 trutle2 都是 world 的子参考坐标系，如果再添加一个新的坐标参考系 carrot1 它必须是以上三个参考坐标系的子参考系。</p>
<p><img src="/2017/06/07/ros-primary-tutorial-13/tree.png" alt=""></p>
<p>接着前面，我们在 turtle1 基础上添加一个参考坐标系 carrot1, 它的父参考系是 turtle1。在 learning_tf/src 目录下建立文件 frame_tf_broadcaster.cpp，添加以下代码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_broadcaster.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line">&#123;</div><div class="line">	ros::init(argc, argv, <span class="string">"my_tf_broadcaster"</span>);</div><div class="line">	ros::NodeHandle node;</div><div class="line"></div><div class="line">	tf::TransformBroadcaster br;</div><div class="line">	tf::Transform transform;</div><div class="line">  </div><div class="line">	ros::<span class="function">Rate <span class="title">rate</span><span class="params">(<span class="number">10.0</span>)</span></span>;</div><div class="line">	<span class="keyword">while</span> (node.ok())&#123;</div><div class="line">		transform.setOrigin( tf::Vector3(<span class="number">0.0</span>, <span class="number">2.0</span>, <span class="number">0.0</span>) );</div><div class="line">		transform.setRotation( tf::Quaternion(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>) );</div><div class="line">		br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), <span class="string">"turtle1"</span>, <span class="string">"carrot1"</span>));</div><div class="line">		rate.sleep();</div><div class="line">     &#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>父参考系 turtle1 ，子参考系 carrot1 ，carrot1 在 x y z 方向上与 turtle1 的偏移为 (x:0.0,y:2.0,z:0.0)。修改 CMakeLists.txt 文件添加依赖：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(frame_tf_broadcaster src/frame_tf_broadcaster.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(frame_tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure></p>
<p>在 ~/catkin_ws/devel/lib/learning_tf/ 文件夹下会生成可执行的节点文件 frame_tf_broadcaster ，我们将它的启动放到 start_demo.launch 文件中，添加以下内容：<br>   <figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;node pkg=<span class="string">"learning_tf"</span> <span class="class"><span class="keyword">type</span></span>=<span class="string">"frame_tf_broadcaster"</span> </div><div class="line"> name=<span class="string">"broadcaster_frame"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>运行测试看下效果，roslaunch 会一并执行 roscore 所以不用再提前运行 roscore:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roslaunch learning_tf start_demo.launch</span></div></pre></td></tr></table></figure></p>
<p>我们发现添加了这个坐标系，并没有对之前的 turtle 产生影响，这就恰恰说明了添加一个新的参考坐标系不会影响以前固有的参考坐标系。我们的监听节点依然使用的是之前定义的参考坐标系。现在，我们打开前面编写的监听节点源码 learning_tf/src/turtle_tf_listener.cpp, 我们将 /turtle1 替换成 /carrot1 ：<br>   <figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">listener</span><span class="selector-class">.waitForTransform</span>(<span class="string">"/turtle2"</span>, <span class="string">"/carrot1"</span>,<span class="attribute">ros</span>::Time(<span class="number">0</span>), <span class="attribute">ros</span>::Duration(<span class="number">3.0</span>));</div><div class="line"><span class="selector-tag">listener</span><span class="selector-class">.lookupTransform</span>(<span class="string">"/turtle2"</span>, <span class="string">"/carrot1"</span>,<span class="attribute">ros</span>::Time(<span class="number">0</span>), transform);</div></pre></td></tr></table></figure></p>
<p>再次编译并执行 start_demo.launch，我们发现，当移动 turtle1 时， turtle2 在跟随 turtle1 的同时总是保持一定的距离，这个距离就是 carrot1 参考系相对于 turtle1 的偏移，因此 turtle2 跟随的是 carrot1 虽然我们没有定义这个模型，但依然能感觉到这个随动关系:</p>
<p><img src="/2017/06/07/ros-primary-tutorial-13/carrot1.jpg" alt=""></p>
<h1 id="moving-frame"><a href="#moving-frame" class="headerlink" title="moving frame"></a>moving frame</h1><p>建立移动参考系，让两个参考系的关系不再是固定的而是随着时间变化的，因此可以简单的将固定参考系的关系修改成随着时间而变化的，修改 frame_tf_broadcaster.cpp 文件：<br>   <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span><span class="selector-class">.setOrigin</span>( <span class="selector-tag">tf</span><span class="selector-pseudo">::Vector3(2.0</span>*<span class="selector-tag">sin</span>(<span class="selector-tag">ros</span><span class="selector-pseudo">::Time</span><span class="selector-pseudo">::now().toSec())</span>, 2<span class="selector-class">.0</span>*<span class="selector-tag">cos</span>(<span class="selector-tag">ros</span><span class="selector-pseudo">::Time</span><span class="selector-pseudo">::now().toSec())</span>, 0<span class="selector-class">.0</span>) );</div><div class="line"><span class="selector-tag">transform</span><span class="selector-class">.setRotation</span>( <span class="selector-tag">tf</span><span class="selector-pseudo">::Quaternion(0</span>, 0, 0, 1) )</div></pre></td></tr></table></figure></p>
<p>以上变换将 carrot1 相对于父参考系 turtle1 的坐标变换修改成时间的正余弦函数，我们再次编译并重新运行一下看效果：<br><img src="/2017/06/07/ros-primary-tutorial-13/moving.jpg" alt=""><br>turtle2 一直绕着 turtle1 做画圆运动，因为上面的函数是三角函数 且符合 x2 + y2 = r2 关系。<br>参考:<a href="http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20broadcaster%20%28C%2B%2B%29" target="_blank" rel="external">Writing a tf broadcaster C++</a>   /  <a href="http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20listener%20%28C%2B%2B%29" target="_blank" rel="external">Writing a tf listener C++</a> / <a href="http://wiki.ros.org/tf/Tutorials/Adding%20a%20frame%20%28C%2B%2B%29" target="_blank" rel="external">Adding a frame</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇继续学习 &lt;a href=&quot;http://wiki.ros.org/tf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tf&lt;/a&gt;。通过编写一个简单的 tf broadcaster 以及 tf listener 来更进一步的理解坐标变换。本篇涉及到的代码已上传到 &lt;a href=&quot;https://github.com/StevenShiChina/learning_tf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mygithub&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;tf-broadcaster&quot;&gt;&lt;a href=&quot;#tf-broadcaster&quot; class=&quot;headerlink&quot; title=&quot;tf broadcaster&quot;&gt;&lt;/a&gt;tf broadcaster&lt;/h1&gt;&lt;p&gt;tf broadcaster 用于广播坐标变换，任何节点都可以监听该变换。先创建一个程序包，名字随心，这里我们命名为 &lt;em&gt;learning_tf&lt;/em&gt;,包的依赖项为 &lt;em&gt;roscpp rospy turtlesim&lt;/em&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROStf" scheme="http://stevenshi.me/tags/ROStf/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级十二 理解ROS坐标转换上</title>
    <link href="http://stevenshi.me/2017/06/07/ros-primary-tutorial-12/"/>
    <id>http://stevenshi.me/2017/06/07/ros-primary-tutorial-12/</id>
    <published>2017-06-07T02:30:19.000Z</published>
    <updated>2017-06-13T09:01:20.229Z</updated>
    
    <content type="html"><![CDATA[<p>一个完整的机器人有腿(或轮子)、有眼睛、有手、有大脑，大脑控制机器人去协调的动作。问题来了，大脑是如何知道腿在哪儿？眼睛在哪儿？手臂在哪儿？要帮主人把房门打开，如何控制手臂去开门？这些都涉及到一个关键的问题-机器人的坐标变换。本篇学习 ROS 中的 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 。<br><a id="more"></a></p>
<h1 id="tf-初理解"><a href="#tf-初理解" class="headerlink" title="tf 初理解"></a>tf 初理解</h1><p><img src="/2017/06/07/ros-primary-tutorial-12/tf.png" alt=""><br>tf 是 ROS 中的坐标变换系统，它可以跟踪多个参考坐标系的坐标，使用树形数据结构根据时间缓冲来维护这些坐标及其坐标关系，帮助我们在任意时间完成两个或多个参考系中的坐标变换。 tf 以分布式形式存在，所有节点都可以使用这些变换数据，节点可以监听 tf 变换，接收系统中发布的所有参考坐标系，并查询需要的参考坐标系；节点可以广播 tf 变换，向系统中广播参考系坐标关系，每个节点的参考坐标广播可以直接插入 tf 树中告知系统。</p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>通过一个实例来更好的理解  <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a>，参考 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">官网</a>。<br>启动一个demo:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roslaunch turtle_tf turtle_tf_demo.launch</span></div></pre></td></tr></table></figure></p>
<p>此时会看到有两个 turtle 同时出现，将光标移动到 terminal 以便于用键盘的方向键来控制其中一个 turtle 的移动，可以看到当一个移动时另外一个一直做跟随运动：<br><img src="/2017/06/07/ros-primary-tutorial-12/follow.jpg" alt=""></p>
<p>该例子使用 tf 库创建的三个坐标系，一个是全局坐标系，一个是 turtle1 坐标系，另一个是 turtle2 坐标系。它使用 tf 广播发布 turtle 的坐标，另外一个去监听这个坐标，并计算它们之间的位置差，从而移动一个去跟随另一个的位置。</p>
<h1 id="tf-工具使用"><a href="#tf-工具使用" class="headerlink" title="tf 工具使用"></a>tf 工具使用</h1><p><a href="http://wiki.ros.org/tf#view_frames" target="_blank" rel="external">view_frames</a>：</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun tf view_frames</span></div></pre></td></tr></table></figure>
<p><a href="http://wiki.ros.org/tf#view_frames" target="_blank" rel="external">view_frames</a> 可以以PDF的形式创建当前坐标广播系统树，命令输出如下：<br>   <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Listening <span class="built_in">to</span> /tf <span class="keyword">for</span> <span class="number">5.000000</span> <span class="built_in">seconds</span></div><div class="line">Done Listening</div><div class="line">dot - graphviz <span class="built_in">version</span> <span class="number">2.36</span><span class="number">.0</span> (<span class="number">20140111.2315</span>)</div><div class="line"></div><div class="line">Detected dot <span class="built_in">version</span> <span class="number">2.36</span></div><div class="line">frames.pdf generated</div></pre></td></tr></table></figure></p>
<p>它会在当前目录下生成 frames.pdf 文件，可以使用如下命令查看：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> evince frames.pdf</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/06/07/ros-primary-tutorial-12/pdf.jpg" alt=""><br>从图中可以看出，系统存在三个参考坐标系，world 为父坐标系即全局坐标系，另外两个也都有自己的坐标系，信息中还包括发送频率、缓存长度等信息。</p>
<p><a href="http://wiki.ros.org/rqt_tf_tree" target="_blank" rel="external">rqt_tf_tree</a>:</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rqt_tf_tree rqt_tf_tree</span></div></pre></td></tr></table></figure>
<p><a href="http://wiki.ros.org/rqt_tf_tree" target="_blank" rel="external">rqt_tf_tree</a> 是一个可视化的实时坐标树查看工具，可以随时点击刷新按钮来实时的查看坐标广播树。<img src="/2017/06/07/ros-primary-tutorial-12/runtime.jpg" alt=""></p>
<p><a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf_echo</a>:<br>使用：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosrun tf tf_echo <span class="string">[reference_frame]</span> <span class="string">[target_frame]</span></div></pre></td></tr></table></figure></p>
<p>如何从 turtle1 得到 turtle2 的坐标:<br><img src="/2017/06/07/ros-primary-tutorial-12/matrix.png" alt=""></p>
<p>该命令输出指定的坐标变换关系，如：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun tf tf_echo turtle1 turtle2</span></div></pre></td></tr></table></figure></p>
<p>输出一般为：<br>   <figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">At</span> <span class="selector-tag">time</span> <span class="selector-tag">1496812263</span><span class="selector-class">.516</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Translation</span>: <span class="selector-attr">[0.000, 0.000, 0.000]</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Rotation</span>: <span class="selector-tag">in</span> <span class="selector-tag">Quaternion</span> <span class="selector-attr">[0.000, 0.000, 0.707, 0.707]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (radian) <span class="selector-attr">[0.000, -0.000, 1.571]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (degree) <span class="selector-attr">[0.000, -0.000, 90.000]</span></div><div class="line"><span class="selector-tag">At</span> <span class="selector-tag">time</span> <span class="selector-tag">1496812264</span><span class="selector-class">.205</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Translation</span>: <span class="selector-attr">[0.000, 0.000, 0.000]</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Rotation</span>: <span class="selector-tag">in</span> <span class="selector-tag">Quaternion</span> <span class="selector-attr">[0.000, 0.000, 0.707, 0.707]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (radian) <span class="selector-attr">[0.000, -0.000, 1.571]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (degree) <span class="selector-attr">[0.000, -0.000, 90.000]</span></div><div class="line"><span class="selector-tag">At</span> <span class="selector-tag">time</span> <span class="selector-tag">1496812265</span><span class="selector-class">.213</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Translation</span>: <span class="selector-attr">[0.000, 0.000, 0.000]</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Rotation</span>: <span class="selector-tag">in</span> <span class="selector-tag">Quaternion</span> <span class="selector-attr">[0.000, 0.000, 0.707, 0.707]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (radian) <span class="selector-attr">[0.000, -0.000, 1.571]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (degree) <span class="selector-attr">[0.000, -0.000, 90.000]</span></div><div class="line"><span class="selector-tag">At</span> <span class="selector-tag">time</span> <span class="selector-tag">1496812266</span><span class="selector-class">.205</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Translation</span>: <span class="selector-attr">[0.000, 0.000, 0.000]</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Rotation</span>: <span class="selector-tag">in</span> <span class="selector-tag">Quaternion</span> <span class="selector-attr">[0.000, 0.000, 0.707, 0.707]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (radian) <span class="selector-attr">[0.000, -0.000, 1.571]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (degree) <span class="selector-attr">[0.000, -0.000, 90.000]</span></div></pre></td></tr></table></figure></p>
<p>它是一直输出的，当控制移动 turtle1 时可以看到 turtle2 的坐标是怎么变化的，也就是 turtle2 的坐标是怎么根据 turtle1 的出来的。</p>
<h1 id="rviz"><a href="#rviz" class="headerlink" title="rviz"></a>rviz</h1><p>使用 <a href="">rviz</a> 可视化工具查看坐标系之间的坐标关系<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rviz rviz <span class="_">-d</span> `rospack find turtle_tf`/rviz/turtle_rviz.rviz</span></div></pre></td></tr></table></figure></p>
<p>当通过键盘控制 turtle 运动时，可以在 rviz 中观察到两个 turtle 的位置关系及坐标的变换：<br><img src="/2017/06/07/ros-primary-tutorial-12/rviz.jpg" alt=""><br>远处两个小的坐标系分别为 turtle1 和 turtle2 的坐标系，左下角为系统全局坐标系。本篇先到这里，下一篇进一步学习 tf 坐标变换。<br>参考 <a href="http://wiki.ros.org/tf/Tutorials/Introduction%20to%20tf" target="_blank" rel="external">Introduction tf</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个完整的机器人有腿(或轮子)、有眼睛、有手、有大脑，大脑控制机器人去协调的动作。问题来了，大脑是如何知道腿在哪儿？眼睛在哪儿？手臂在哪儿？要帮主人把房门打开，如何控制手臂去开门？这些都涉及到一个关键的问题-机器人的坐标变换。本篇学习 ROS 中的 &lt;a href=&quot;http://wiki.ros.org/tf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tf&lt;/a&gt; 。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROStf" scheme="http://stevenshi.me/tags/ROStf/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级十一 简单的ROS服务器和客户端</title>
    <link href="http://stevenshi.me/2017/06/01/ros-primary-tutorial-11/"/>
    <id>http://stevenshi.me/2017/06/01/ros-primary-tutorial-11/</id>
    <published>2017-06-01T02:17:27.000Z</published>
    <updated>2017-06-13T05:53:48.462Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习简单的 ROS 服务器和客户端的编写，服务器和客户端也是 ROS 网络中的一个节点，服务器可以提供某些服务，客户端发出请求，服务器做出响应。本篇涉及的代码已上传到 <a href="https://github.com/StevenShiChina/beginner_tutorials" target="_blank" rel="external">mygithub</a>。<br><a id="more"></a></p>
<h1 id="服务器节点"><a href="#服务器节点" class="headerlink" title="服务器节点"></a>服务器节点</h1><p>我们将创建一个 service 节点 (add_two_ints_server)，该节点接收两个整形数字，并返回它们的和。客户端可以给服务器发送请求。<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd beginner_tutorials/src</span></div></pre></td></tr></table></figure></p>
<p>新建 add_two_ints_server.cpp 在  beginner_tutorials/src 目录下，添加源码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">/*beginner_tutorials/AddTwoInts.h由编译系统自动根据我们先前创建的srv文件</span></div><div class="line"> 生成的对应该srv文件的头文件*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"beginner_tutorials/AddTwoInts.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">/*add函数提供两个int值求和的服务，int值从request里面获取，</span></div><div class="line"> 而返回数据装入response内，这些数据类型都定义在srv文件内部，</div><div class="line"> 函数返回一个boolean值*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(beginner_tutorials::AddTwoInts::Request  &amp;req,</span></span></div><div class="line">        beginner_tutorials::AddTwoInts::Response &amp;res)</div><div class="line">&#123;</div><div class="line"> res.sum = req.a + req.b;</div><div class="line"> ROS_INFO(<span class="string">"request: x=%ld, y=%ld"</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)req.a, (<span class="keyword">long</span> <span class="keyword">int</span>)req.b);</div><div class="line"> ROS_INFO(<span class="string">"sending back response: [%ld]"</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)res.sum);</div><div class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line"> ros::init(argc, argv, <span class="string">"add_two_ints_server"</span>);</div><div class="line"> ros::NodeHandle n;</div><div class="line"></div><div class="line"><span class="comment">/*service 服务建立*/</span></div><div class="line"> ros::ServiceServer service = n.advertiseService(<span class="string">"add_two_ints"</span>, add);</div><div class="line"> ROS_INFO(<span class="string">"Ready to add two ints."</span>);</div><div class="line"> ros::spin();</div><div class="line"></div><div class="line"> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="客户端节点"><a href="#客户端节点" class="headerlink" title="客户端节点"></a>客户端节点</h1><p>在目录 beginner_tutorials/src 下，新建 add_two_ints_client.cpp 文件添加如下源码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"beginner_tutorials/AddTwoInts.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">  ros::init(argc, argv, <span class="string">"add_two_ints_client"</span>);</div><div class="line">  <span class="keyword">if</span> (argc != <span class="number">3</span>)</div><div class="line">  &#123;</div><div class="line">    ROS_INFO(<span class="string">"usage: add_two_ints_client X Y"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ros::NodeHandle n;</div><div class="line">  </div><div class="line">  <span class="comment">/*为add_two_ints service创建一个client。ros::ServiceClient 对象待会用来调用service*/</span></div><div class="line"></div><div class="line">  ros::ServiceClient client = n.serviceClient&lt;beginner_tutorials::AddTwoInts&gt;(<span class="string">"add_two_ints"</span>);</div><div class="line"></div><div class="line"> <span class="comment">/*实例化一个由ROS编译系统自动生成的service类，并给其request成员赋值。</span></div><div class="line">  一个service类包含两个成员request和response。同时也包括两个类定义Request和Response*/</div><div class="line"></div><div class="line">  beginner_tutorials::AddTwoInts srv;</div><div class="line">  srv.request.a = atoll(argv[<span class="number">1</span>]);</div><div class="line">  srv.request.b = atoll(argv[<span class="number">2</span>]);</div><div class="line"></div><div class="line">  <span class="comment">/*调用service。由于service的调用是模态过程（调用的时候占用进程阻止其他代码的执行），</span></div><div class="line">  一旦调用完成，将返回调用结果。如果service调用成功，call()函数将返回true，</div><div class="line">  srv.response里面的值将是合法的值。如果调用失败，call()函数将返回false，</div><div class="line">  srv.response里面的值将是非法的*/</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (client.call(srv))</div><div class="line">  &#123;</div><div class="line">    ROS_INFO(<span class="string">"Sum: %ld"</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)srv.response.sum);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    ROS_ERROR(<span class="string">"Failed to call service add_two_ints"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="编译测试"><a href="#编译测试" class="headerlink" title="编译测试"></a>编译测试</h1><p>编译之前先修改下 CMakeLists.txt ,文件位于:<br> ~/catkin_ws/src/beginner_tutorials/CMakeLists.txt，参考 <a href="https://raw.github.com/ros/catkin_tutorials/master/create_package_srvclient/catkin_ws/src/beginner_tutorials/CMakeLists.txt" target="_blank" rel="external">CMakeLists.txt</a>:<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(add_two_ints_server src/add_two_ints_server.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(add_two_ints_server $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line"><span class="function"><span class="title">add_dependencies</span><span class="params">(add_two_ints_server beginner_tutorials_gencpp)</span></span></div><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(add_two_ints_client src/add_two_ints_client.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(add_two_ints_client $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line"><span class="function"><span class="title">add_dependencies</span><span class="params">(add_two_ints_client beginner_tutorials_gencpp)</span></span></div></pre></td></tr></table></figure></p>
<p>生成两个可执行程序 add_two_ints_server 和 add_two_ints_client ，这两个可执行程序默认被放在的 devel space 下的包目录下。可以直接调用可执行程序，或者使用 rosrun 命令去调用它们。它们不会被装在usr/bin目录下，如果希望在安装的时候可执行程序在PATH变量里面，需要设置一下install target，请参考：<a href="http://wiki.ros.org/catkin/CMakeLists.txt" target="_blank" rel="external">catkin/CMakeLists.txt</a><br>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure></p>
<p>编译完成后会在目录 ~/catkin_ws/devel/lib/beginner_tutorials 下生成两个可执行文件 add_two_ints_client  和 add_two_ints_server 现在可以运行并测试它们：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun beginner_tutorials add_two_ints_server</span></div></pre></td></tr></table></figure></p>
<p>如果运行时找不到程序包，运行一下 <em>rospack profile</em> 另外开启一个terminal 运行客户端:<br>   <figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosrun <span class="keyword">beginner_tutorials </span><span class="keyword">add_two_ints_client </span> <span class="number">188</span> <span class="number">102</span></div></pre></td></tr></table></figure></p>
<p>输出结果看图：<img src="/2017/06/01/ros-primary-tutorial-11/service.jpg" alt=""><br>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/WritingServiceClient%28c%2B%2B%29" target="_blank" rel="external">WritingServiceClient</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习简单的 ROS 服务器和客户端的编写，服务器和客户端也是 ROS 网络中的一个节点，服务器可以提供某些服务，客户端发出请求，服务器做出响应。本篇涉及的代码已上传到 &lt;a href=&quot;https://github.com/StevenShiChina/beginner_tutorials&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mygithub&lt;/a&gt;。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ServiceClient" scheme="http://stevenshi.me/tags/ServiceClient/"/>
    
  </entry>
  
</feed>
