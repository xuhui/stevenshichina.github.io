<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Steven&#39;s blog</title>
  <subtitle>点一盏灯 给需要的人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://stevenshi.me/"/>
  <updated>2017-06-09T03:09:16.173Z</updated>
  <id>http://stevenshi.me/</id>
  
  <author>
    <name>Steven Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ROS初级&lt;十四&gt; tf 配置</title>
    <link href="http://stevenshi.me/2017/06/08/ros-primary-tutorial-14/"/>
    <id>http://stevenshi.me/2017/06/08/ros-primary-tutorial-14/</id>
    <published>2017-06-08T03:15:29.000Z</published>
    <updated>2017-06-09T03:09:16.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Transform-Configuration-变换配置"><a href="#Transform-Configuration-变换配置" class="headerlink" title="Transform Configuration 变换配置"></a>Transform Configuration 变换配置</h1><p>变换树是一种偏移，体现了不同坐标系之间的变换和旋转。假设有一个简单的机器人，只有移动底座以及一个位于底座上方的激光扫描仪。因此定义两个坐标系，一个对应激光扫描仪的中心点的坐标系，一个对应于移动底座中心点的坐标系，两个坐标系分别取名为 <em>base_laser</em> 和 <em>base_link</em> 。</p>
<p><img src="/2017/06/08/ros-primary-tutorial-14/simple_robot.png" alt=""><br><a id="more"></a><br>假设我们已经从激光扫描仪获取了一些数据，但这些数据都是以物体到激光扫描仪的距离给出的，即坐标系是 <em>base_laser</em>。 现在通过这些数据让机器人避开一些障碍物，如果不将这些激光扫描仪获取的数据从 <em>base_laser</em> 转换到 <em>base_link</em> 那么机器人在避开障碍物的过程中有可能失败，因此需要将激光扫描仪获取的数据从 <em>base_laser</em> 坐标系转换到 <em>base_link</em> 坐标系。因此需要知道两个坐标系的关系。看上图，<em>base_laser</em> 中心点位于 <em>base_link</em> 中心点上方 20cm 处，并向右偏移 10cm 。因此从激光扫描仪到移动底座的转换关系为(x:-0.1m,y:0.0m,z:-0.2m),反过来从移动底座到激光扫描仪的转换关系为(x:0.1m,y:0.0m,z:0.2m)。<br>当然这种变换关系我们可以手动去计算保存，需要的时候再调用，但是如果坐标系统增加，变换关系复杂，那么就需要利用 tf 来实现了。使用 tf 来管理坐标转关系，需要将转换关系添加到转换树中，转换树中的每一个节点都对应着一种坐标系，节点之间的连线即是两个坐标相互转换的一种表示，从当前节点到子节点的表示。 tf 利用树结构保证了两个坐标系之间只存在唯一的转换关系，我们假定节点的连线方向从父节点指向子节点。</p>
<p><img src="/2017/06/08/ros-primary-tutorial-14/tf_robot.png" alt=""></p>
<p>基于以上描述，我们需要创建两个节点，分别命名为 <em>base_laser</em> 以及 <em>base_link</em>。为了明确两者之间的关系，需要指定谁是父节点 parent，谁是子节点 child。因为 tf 假设所有的转换都是从 parent 到 child。这里我们选择 <em>base_link</em> 为 parent 父节点，<em>base_laser</em> 为 child 子节点，将来如果有其他传感器也将作为子节点添加到移动底座。因此转换关系的数学关系为(x:0.1m,y:0.0m,z:0.2m)。知道这个转换关系 <em>base_link</em> 就可以推理出 <em>base_laser</em> 扫描出的数据跟自己的位置关系，因此可以安全的避开障碍物并规划合理的路径。这个转换实质是将 <em>base_laser</em> 坐标系的点转换到 <em>base_link</em> 坐标系中去。本篇涉及的代码已上传至 <a href="https://github.com/StevenShiChina/robot_setup_tf" target="_blank" rel="external">mygithub</a>。</p>
<h1 id="Broadcasting-a-Transform-广播变换"><a href="#Broadcasting-a-Transform-广播变换" class="headerlink" title="Broadcasting a Transform 广播变换"></a>Broadcasting a Transform 广播变换</h1><p>创建源码包，添加依赖项：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/src/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg robot_setup_tf roscpp tf geometry_msgs</span></div></pre></td></tr></table></figure></p>
<p>创建一个节点用于广播变换，我们将节点命名为 tf_broadcaster，在 robot_setup_tf/src 目录下建立文件 tf_broadcaster.cpp，添加以下内容：<br>   <figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_broadcaster.h&gt;</span></span></div><div class="line"> </div><div class="line">  int main(int argc, char** argv)</div><div class="line">  &#123;</div><div class="line"><span class="symbol">      ros:</span>:init(argc, argv, <span class="string">"robot_tf_publisher"</span>);</div><div class="line"><span class="symbol">      ros:</span>:NodeHandle n;</div><div class="line"><span class="symbol"> </span></div><div class="line">      ros::Rate r(<span class="number">100</span>);</div><div class="line">     <span class="comment">//创建TransformBroadcaster对象，用于发布变换关系</span></div><div class="line"><span class="symbol">     tf:</span>:TransformBroadcaster broadcaster;</div><div class="line">     <span class="comment">//通过TransformBroadcaster来发送转换关系，需要附带5个参数。</span></div><div class="line">     <span class="comment">//第1个参数，我们传递了旋转变换，在两个坐标系的发送的任意旋转，</span></div><div class="line">     <span class="comment">//都必须通过调用btQuaternion.现在情况下，我们不想旋转，</span></div><div class="line">     <span class="comment">//所以我们在调用btQauternion的时候，将pitch,roll,yaw的参数都置0.</span></div><div class="line">     <span class="comment">//第2个参数，btVector3，任何变换过程都需要调用它。</span></div><div class="line">     <span class="comment">//相应的传感器的x方向距离机体基准偏移10cm，z方向20cm。</span></div><div class="line">     <span class="comment">//第3个参数，我们需要给定转换关系携带一个时间戳，我们标记为ros::Time::now()。</span></div><div class="line">     <span class="comment">//第4个参数，我们需要传递parent节点的名字。</span></div><div class="line">     <span class="comment">//第5个参数，传递的是child节点的名字。</span></div><div class="line">     while(n.ok())&#123;</div><div class="line">         broadcaster.sendTransform(</div><div class="line"><span class="symbol">             tf:</span>:StampedTransform(</div><div class="line"><span class="symbol">                 tf:</span>:Transform(<span class="symbol">tf::</span>Quaternion(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>), <span class="symbol">tf::</span>Vector3(<span class="number">0.1</span>, <span class="number">0.0</span>, <span class="number">0.2</span>)),</div><div class="line"><span class="symbol">             ros:</span>:<span class="symbol">Time::</span>now(),<span class="string">"base_link"</span>, <span class="string">"base_laser"</span>));</div><div class="line">         r.sleep();</div><div class="line"></div><div class="line">     &#125;</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>通过TransformBroadcaster来发送转换关系，需要附带5个参数。第1个参数，我们传递了旋转变换，在两个坐标系的发送的任意旋转，都必须通过调用 btQuaternion。现在我们不想旋转，所以我们在调用 btQauternion 的时候，将 pitch,roll,yaw 的参数都置0。第2个参数 btVector3，任何变换过程都需要调用它。相应的传感器的 x 方向距离机体基准偏移 10cm，z 方向 20cm。第3个参数，我们需要给定转换关系携带一个时间戳，我们标记为 ros::Time::now()。第4个参数，我们需要传递 parent 节点的名字。第5个参数，传递的是 child 节点的名字。 </p>
<h1 id="Using-a-Transform-调用变换"><a href="#Using-a-Transform-调用变换" class="headerlink" title="Using a Transform 调用变换"></a>Using a Transform 调用变换</h1><p>上面的节点用于发布转换关系，即将 <em>base_laser</em> 的坐标转换为 <em>base_link</em> 的坐标，现在我们利用这个转换关系，将从激光扫描仪获取的数据转换到移动底座对应的坐标系中来，即 <em>base_laser</em> 到 <em>base_link</em> 的转换。需要建立一个节点用于监听这种变换，在 robot_setup_tf/src 目录下新建文件 tf_listener.cpp 并添加以下代码：<br>   <figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;geometry_msgs/PointStamped.h&gt;</span></span></div><div class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_listener.h&gt;</span></span></div><div class="line">  </div><div class="line"><span class="comment">//创建一个函数，参数为TransformListener,作用为将“base_laser”坐标系的点，变换到“base_link”坐标系中。</span></div><div class="line"><span class="comment">//这个函数将会以ros::Timer定义的周期，作为一个回调函数周期调用,目前周期是1s</span></div><div class="line"> void transformPoint(const <span class="symbol">tf::</span>TransformListener&amp; listener)&#123;</div><div class="line">       </div><div class="line">     </div><div class="line">      <span class="comment">//此处，我们创建一个虚拟点，作为geometry_msgs::PointStamped。</span></div><div class="line">      <span class="comment">//消息名字最后的“Stamped”的意义是，它包含了一个头部，</span></div><div class="line">      <span class="comment">//允许我们去把时间戳和消息的frame_id相关联起来。</span></div><div class="line">      <span class="comment">//我们将会设置laser_point的时间戳为ros::time(),</span></div><div class="line">      <span class="comment">//即是允许我们请求TransformListener取得最新的变换数据。</span></div><div class="line">      <span class="comment">//对于header里的frame_id，我们设置为“base_laser”,</span></div><div class="line">      <span class="comment">//因为我们是创建的是扫描仪坐标系里的虚拟点。</span></div><div class="line">      <span class="comment">//最后，我们将会设置具体的虚拟点，比如x:1.0,y:0.2,z:0.0 </span></div><div class="line">      <span class="comment">//we'll create a point in the base_laser frame that we'd like to transform to the base_link frame</span></div><div class="line"><span class="symbol">       geometry_msgs:</span>:PointStamped laser_point;</div><div class="line">       laser_point.header.frame_id = <span class="string">"base_laser"</span>;</div><div class="line">  </div><div class="line">      <span class="comment">//we'll just use the most recent transform available for our simple example</span></div><div class="line">      laser_point.header.stamp = <span class="symbol">ros::</span>Time();</div><div class="line"> </div><div class="line">      <span class="comment">//just an arbitrary point in space</span></div><div class="line">      <span class="comment">//这里我们给定一个固定点</span></div><div class="line">      laser_point.point.x = <span class="number">1.0</span>;</div><div class="line">      laser_point.point.y = <span class="number">0.2</span>;</div><div class="line">      laser_point.point.z = <span class="number">0.0</span>;</div><div class="line"> </div><div class="line">      <span class="comment">//我们已经有了从“base_laser”到“base_link”变换的点数据。</span></div><div class="line">      <span class="comment">//进一步，我们通过TransformListener对象，</span></div><div class="line">      <span class="comment">//调用transformPoint(),填充三个参数来进行数据变换。</span></div><div class="line">      <span class="comment">//第1个参数，代表我们想要变换的目标坐标系的名字。</span></div><div class="line">      <span class="comment">//第2个参数填充需要变换的原始坐标系的点对象，</span></div><div class="line">      <span class="comment">//第3个参数填充，目标坐标系的点对象。</span></div><div class="line">      <span class="comment">//所以，在函数调用后，base_point里存储的信息就是变换后的点坐标。 </span></div><div class="line">      try&#123;</div><div class="line"><span class="symbol">          geometry_msgs:</span>:PointStamped base_point;</div><div class="line">          listener.transformPoint(<span class="string">"base_link"</span>, laser_point, base_point);</div><div class="line"> </div><div class="line">          ROS_INFO(<span class="string">"base_laser: (%.2f, %.2f. %.2f) -----&gt; base_link: (%.2f, %.2f, %.2f) at time %.2f"</span>,</div><div class="line">          laser_point.point.x, laser_point.point.y, laser_point.point.z,</div><div class="line">          base_point.point.x, base_point.point.y, base_point.point.z, base_point.header.stamp.toSec());</div><div class="line">      &#125;</div><div class="line">     <span class="comment">//显示异常信息</span></div><div class="line">      catch(<span class="symbol">tf::</span>TransformException&amp; ex)&#123;</div><div class="line">          ROS_ERROR(<span class="string">"Received an exception trying to transform a point from \"base_laser\" to \"base_link\": %s"</span>, ex.what());</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line"> int main(int argc, char** argv)&#123;</div><div class="line"><span class="symbol">      ros:</span>:init(argc, argv, <span class="string">"robot_tf_listener"</span>);</div><div class="line"><span class="symbol">      ros:</span>:NodeHandle n;</div><div class="line">      <span class="comment">//一个TransformListener目标会自动的订阅ROS系统中的变换消息主题，</span></div><div class="line">      <span class="comment">//同时管理所有的该通道上的变换数据</span></div><div class="line"><span class="symbol">      tf:</span>:TransformListener listener(<span class="symbol">ros::</span>Duration(<span class="number">10</span>));</div><div class="line"> </div><div class="line">      <span class="comment">//we'll transform a point once every second</span></div><div class="line"><span class="symbol">      ros:</span>:Timer timer = n.createTimer(<span class="symbol">ros::</span>Duration(<span class="number">1.0</span>), <span class="symbol">boost::</span>bind(&amp;transformPoint, <span class="symbol">boost::</span>ref(listener)));</div><div class="line"><span class="symbol"> </span></div><div class="line">      ros::spin();</div><div class="line"> </div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h1 id="编译测试"><a href="#编译测试" class="headerlink" title="编译测试"></a>编译测试</h1><p>在编译之前需要修改 CMakeLists.txt 文件，添加构建依赖项<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(tf_broadcaster src/tf_broadcaster.cpp)</span></span></div><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(tf_listener src/tf_listener.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(tf_listener $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p>编译:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div><div class="line"><span class="meta">$</span><span class="bash"> rospack profile</span></div></pre></td></tr></table></figure></p>
<p>开启三个 terminal 分别运行：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun robot_setup_tf tf_broadcaster</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun robot_setup_tf tf_listener</span></div></pre></td></tr></table></figure></p>
<p>在 tf_listener 运行后可以看到如下输出，每隔1秒发布一次：</p>
<p><img src="/2017/06/08/ros-primary-tutorial-14/tf.png" alt=""></p>
<p>参考 <a href="http://wiki.ros.org/cn/navigation/Tutorials/RobotSetup/TF" target="_blank" rel="external">RobotSetup/TF</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Transform-Configuration-变换配置&quot;&gt;&lt;a href=&quot;#Transform-Configuration-变换配置&quot; class=&quot;headerlink&quot; title=&quot;Transform Configuration 变换配置&quot;&gt;&lt;/a&gt;Transform Configuration 变换配置&lt;/h1&gt;&lt;p&gt;变换树是一种偏移，体现了不同坐标系之间的变换和旋转。假设有一个简单的机器人，只有移动底座以及一个位于底座上方的激光扫描仪。因此定义两个坐标系，一个对应激光扫描仪的中心点的坐标系，一个对应于移动底座中心点的坐标系，两个坐标系分别取名为 &lt;em&gt;base_laser&lt;/em&gt; 和 &lt;em&gt;base_link&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/06/08/ros-primary-tutorial-14/simple_robot.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS tf" scheme="http://stevenshi.me/tags/ROS-tf/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级&lt;十三&gt; 理解 ROS 坐标转换 二</title>
    <link href="http://stevenshi.me/2017/06/07/ros-primary-tutorial-13/"/>
    <id>http://stevenshi.me/2017/06/07/ros-primary-tutorial-13/</id>
    <published>2017-06-07T05:44:30.000Z</published>
    <updated>2017-06-09T03:15:55.516Z</updated>
    
    <content type="html"><![CDATA[<p>本篇继续学习 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a>。通过编写一个简单的 tf broadcaster 以及 tf listener 来更进一步的理解坐标变换。本篇涉及到的代码已上传到 <a href="https://github.com/StevenShiChina/learning_tf" target="_blank" rel="external">mygithub</a>。</p>
<h1 id="tf-broadcaster"><a href="#tf-broadcaster" class="headerlink" title="tf broadcaster"></a>tf broadcaster</h1><p>tf broadcaster 用于广播坐标变换，任何节点都可以监听该变换。先创建一个程序包，名字随心，这里我们命名为 <em>learning_tf</em>,包的依赖项为 <em>roscpp rospy turtlesim</em><br><a id="more"></a><br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/src/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg learning_tf roscpp rospy turtlesim</span></div></pre></td></tr></table></figure></p>
<p>为了便于使用 <em>roscd</em> 我们先编译一下这个程序包:</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div><div class="line"><span class="meta">$</span><span class="bash"> rospack profile</span></div></pre></td></tr></table></figure>
<p>此时使用 roscd 输入lear 再按 TAB 即可出现 <em>learning_tf/</em>。进入 <em>learning_tf/src</em> 目录下，新建文件 <em>turtle_tf_broadcaster.cpp</em> 添加如下代码：</p>
   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_broadcaster.h&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;turtlesim/Pose.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">string</span> turtle_name;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">poseCallback</span><span class="params">(<span class="keyword">const</span> turtlesim::PoseConstPtr&amp; msg)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="comment">//创建一个 TransformBroadcaster 对象用于发布坐标变换</span></div><div class="line">  <span class="keyword">static</span> tf::TransformBroadcaster br;</div><div class="line">  </div><div class="line">  <span class="comment">//创建Transform 对象并将2D的坐标转换为3D坐标系</span></div><div class="line">  tf::Transform transform;</div><div class="line">  transform.setOrigin( tf::Vector3(msg-&gt;x, msg-&gt;y, <span class="number">0.0</span>) );<span class="comment">//获取 x y 坐标，不需要Z坐标 </span></div><div class="line"> </div><div class="line">  tf::Quaternion q;</div><div class="line">  q.setRPY(<span class="number">0</span>, <span class="number">0</span>, msg-&gt;theta);<span class="comment">// x y轴旋转为0因为在地面运动只能绕Z轴的旋转</span></div><div class="line">  transform.setRotation(q);<span class="comment">//</span></div><div class="line">  <span class="comment">//发布坐标变换 ros::Time::now()为转换携带的时间戳 传递父节点的名字 world 子节点为turtle_name</span></div><div class="line">  br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), <span class="string">"world"</span>, turtle_name));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line">&#123;</div><div class="line">  ros::init(argc, argv, <span class="string">"my_tf_broadcaster"</span>);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>)&#123;ROS_ERROR(<span class="string">"need turtle name as argument"</span>); <span class="keyword">return</span> <span class="number">-1</span>;&#125;;</div><div class="line"> </div><div class="line">  turtle_name = argv[<span class="number">1</span>];</div><div class="line"></div><div class="line">  ros::NodeHandle node;</div><div class="line"> <span class="comment">//订阅 turtle_name 的 turtleX/pose 话题，当turtle位置改变时调用回调函数 poseCallback</span></div><div class="line">  ros::Subscriber sub = node.subscribe(turtle_name+<span class="string">"/pose"</span>, <span class="number">10</span>, &amp;poseCallback);</div><div class="line"></div><div class="line">  ros::spin();</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<p>代码的整个流程为：<br>1 订阅 turtleX/pose 位置话题<br>2 发布坐标变换到tf树<br>修改CMakeLists.txt:</p>
   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(turtle_tf_broadcaster src/turtle_tf_broadcaster.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(turtle_tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure>
<p>编译：</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure>
<p>编译报错：</p>
   <figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Linking CXX executable /home/steven/catkin_ws/devel/<span class="keyword">lib</span>/learning_tf/turtle_tf_broadcaster</div><div class="line">CMakeFiles/turtle_tf_broadcaster.dir/src/turtle_tf_broadcaster.cpp.o: <span class="keyword">In</span> <span class="keyword">function</span> `poseCallback(boost::shared_ptr&lt;turtlesim::Pose_&lt;std::allocator&lt;void&gt; &gt; <span class="keyword">const</span>&gt; <span class="keyword">const</span>&amp;)<span class="comment">':</span></div><div class="line">turtle_tf_broadcaster.cpp:(.<span class="keyword">text</span>+<span class="number">0x39</span>): undefined reference <span class="keyword">to</span> `tf::TransformBroadcaster::TransformBroadcaster()<span class="comment">'</span></div><div class="line">turtle_tf_broadcaster.cpp:(.<span class="keyword">text</span>+<span class="number">0x1a3</span>): undefined reference <span class="keyword">to</span> `tf::TransformBroadcaster::sendTransform(tf::StampedTransform <span class="keyword">const</span>&amp;)<span class="comment">'</span></div><div class="line">collect2: ld returned <span class="number">1</span> <span class="keyword">exit</span> status</div><div class="line">make[<span class="number">2</span>]: *** [/home/steven/catkin_ws/devel/<span class="keyword">lib</span>/learning_tf/turtle_tf_broadcaster] <span class="keyword">Error</span> <span class="number">1</span></div><div class="line">make[<span class="number">1</span>]: *** [learning_tf/CMakeFiles/turtle_tf_broadcaster.dir/all] <span class="keyword">Error</span> <span class="number">2</span></div><div class="line">make: *** [all] <span class="keyword">Error</span> <span class="number">2</span></div><div class="line">Invoking <span class="string">"make -j1 -l1"</span> failed</div></pre></td></tr></table></figure>
<p>忘记了在 CMakeLists.txt 文件需要添加 tf 包的依赖：</p>
   <figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">find_package(<span class="name">catkin</span> REQUIRED COMPONENTS</div><div class="line">    roscpp</div><div class="line">    rospy</div><div class="line">    turtlesim</div><div class="line">    tf</div><div class="line">  )</div></pre></td></tr></table></figure>
<p>编译完成后在 ~/catkin_ws/devel/lib/learning_tf/ 目录下会看到编译好的可执行文件 turtle_tf_broadcaster<br>接下来创建一个 launch 文件：</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> mkdir -p ~/catkin_ws/src/learning_tf/launch</span></div><div class="line"><span class="meta">$</span><span class="bash"> roscd learning_tf/launch/</span></div><div class="line"><span class="meta">$</span><span class="bash"> touch start_demo.launch</span></div></pre></td></tr></table></figure>
<p>输入以下内容：</p>
   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Turtlesim Node--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"turtlesim"</span> <span class="attr">type</span>=<span class="string">"turtlesim_node"</span> <span class="attr">name</span>=<span class="string">"sim"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"turtlesim"</span> <span class="attr">type</span>=<span class="string">"turtle_teleop_key"</span> <span class="attr">name</span>=<span class="string">"teleop"</span> <span class="attr">output</span>=<span class="string">"screen"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Axes --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"scale_linear"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">type</span>=<span class="string">"double"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"scale_angular"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">type</span>=<span class="string">"double"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"learning_tf"</span> <span class="attr">type</span>=<span class="string">"turtle_tf_broadcaster"</span></span></div><div class="line">          <span class="attr">args</span>=<span class="string">"/turtle1"</span> <span class="attr">name</span>=<span class="string">"turtle1_tf_broadcaster"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"learning_tf"</span> <span class="attr">type</span>=<span class="string">"turtle_tf_broadcaster"</span></span></div><div class="line">          <span class="attr">args</span>=<span class="string">"/turtle2"</span> <span class="attr">name</span>=<span class="string">"turtle2_tf_broadcaster"</span> /&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">launch</span>&gt;</span></div></pre></td></tr></table></figure>
<p>launch文件启动了4个节点，分别是：<br> 1 turtlesim 包中的类型为 turtlesim_node 名称为 sim 的节点；<br> 2 turtlesim 包中的类型为 turtle_teleop_key 名称为 teleop 的节点；<br> 3 learning_tf 包中类型为 turtle_tf_broadcaster 名称为 turtle1_tf_broadcaster 的节点；<br> 4 learning_tf 包中类型为 turtle_tf_broadcaster 名称为 turtle2_tf_broadcaster 的节点。</p>
<h1 id="tf-listener"><a href="#tf-listener" class="headerlink" title="tf listener"></a>tf listener</h1><p>前面编写了broadcaster 用于发布 turtle 的坐标变换到 tf树，下面来编写 listener 来监听坐标的变换。在 learning_tf/src 目录下新建文件 turtle_tf_listener.cpp 添加如下代码:</p>
   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_listener.h&gt; //接收转换</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;geometry_msgs/Twist.h&gt; //消息</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;turtlesim/Spawn.h&gt; //再生</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line"></div><div class="line">    ros::init(argc, argv, <span class="string">"my_tf_listener"</span>);<span class="comment">//节点名称</span></div><div class="line"> </div><div class="line">    ros::NodeHandle node;<span class="comment">//节点</span></div><div class="line"></div><div class="line">    <span class="comment">//再生服务</span></div><div class="line">    ros::service::waitForService(<span class="string">"spawn"</span>);</div><div class="line">    ros::ServiceClient add_turtle =</div><div class="line">     node.serviceClient&lt;turtlesim::Spawn&gt;(<span class="string">"spawn"</span>);</div><div class="line">    turtlesim::Spawn srv;</div><div class="line">    add_turtle.call(srv);</div><div class="line"></div><div class="line">    <span class="comment">//通过话题 turtle2/cmd_vel 发布 geometry_msgs::Twist 类型消息</span></div><div class="line">    ros::Publisher turtle_vel = </div><div class="line">    node.advertise&lt;geometry_msgs::Twist&gt;(<span class="string">"turtle2/cmd_vel"</span>, <span class="number">10</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//创建接收对象，一旦TransformListener创建，就开始接收tf转换消息</span></div><div class="line">    tf::TransformListener listener; </div><div class="line"></div><div class="line">    ros::<span class="function">Rate <span class="title">rate</span><span class="params">(<span class="number">10.0</span>)</span></span>;</div><div class="line">    <span class="keyword">while</span> (node.ok())&#123;</div><div class="line">      tf::StampedTransform transform;</div><div class="line">      <span class="comment">//from turtle2 到 trutle1 即当 turtle2移动时,turtle1跟随 turtle2 运动</span></div><div class="line">      <span class="keyword">try</span>&#123;</div><div class="line">        listener.lookupTransform(<span class="string">"/turtle2"</span>, <span class="string">"/turtle1"</span>,</div><div class="line">                                 ros::Time(<span class="number">0</span>), transform);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (tf::TransformException &amp;ex) &#123;</div><div class="line">        ROS_ERROR(<span class="string">"%s"</span>,ex.what());</div><div class="line">        ros::Duration(<span class="number">1.0</span>).sleep();</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 计算新的角速度和线速度</span></div><div class="line">      geometry_msgs::Twist vel_msg;</div><div class="line">      vel_msg.angular.z = <span class="number">4.0</span> * <span class="built_in">atan2</span>(transform.getOrigin().y(),</div><div class="line">                                      transform.getOrigin().x());</div><div class="line">      vel_msg.linear.x = <span class="number">0.5</span> * <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(transform.getOrigin().x(), <span class="number">2</span>) +</div><div class="line">                                    <span class="built_in">pow</span>(transform.getOrigin().y(), <span class="number">2</span>));</div><div class="line">      turtle_vel.publish(vel_msg);</div><div class="line"> </div><div class="line">      rate.sleep();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
<p>在CMakeLists.txt中添加依赖项：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(turtle_tf_listener src/turtle_tf_listener.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(turtle_tf_listener $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p>编译如果提示错误：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">turtle_tf_listener<span class="selector-class">.cpp</span>:<span class="number">3</span>:<span class="number">32</span>: fatal error: </div><div class="line">turtlesim/Velocity<span class="selector-class">.h</span>: No such file or directory compilation terminated.</div></pre></td></tr></table></figure></p>
<p>则文件使用的为之前版本，应该选择下载 hydro 版本的 参考 <a href="http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20listener%20%28C%2B%2B%29" target="_blank" rel="external">Writing listener C++</a><br>之后修改start_demo.launch 将listener节点添加进去：<br>   <figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;node pkg=<span class="string">"learning_tf"</span> <span class="class"><span class="keyword">type</span></span>=<span class="string">"turtle_tf_listener"</span> name=<span class="string">"listener"</span> /&gt;</div></pre></td></tr></table></figure></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>停止之前的launch 文件，然后启动 start_demo.launch：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roslaunch learning_tf start_demo.launch</span></div></pre></td></tr></table></figure></p>
<p>可以通过以下命令查看坐标广播信息：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosrun tf tf_<span class="keyword">echo</span> <span class="string">/world</span> <span class="string">/turtle1</span></div></pre></td></tr></table></figure></p>
<p>错误</p>
<p>运行 start_demo.launch 时提示错误<em> [ERROR] [1496887441.589043649]: “turtle2” passed to lookupTransform argument target_frame does not exist. </em>  但是当控制一个 turtle 移动时另外一个也可以跟随移动，参照 <a href="http://answers.ros.org/question/148121/something-wrong-with-tf-tutorial/" target="_blank" rel="external">http://answers.ros.org/question/148121/something-wrong-with-tf-tutorial/</a> 的修改，在函数 listener.lookupTransform 的前面添加 listener.waitForTransform(“/turtle2”, “/turtle1”, ros::Time(0), ros::Duration(3.0));然后重新编译，再次运行错误消失。运行 rviz 可以看到两个 turtle 之间的运动坐标变换<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rviz rviz <span class="_">-d</span> `rospack find turtle_tf`/rviz/turtle_rviz.rviz</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/06/07/ros-primary-tutorial-13/startdemo.jpg" alt=""></p>
<h1 id="adding-a-frame"><a href="#adding-a-frame" class="headerlink" title="adding a frame"></a>adding a frame</h1><p>通常情况下，系统中有一个全局坐标系 world ，当添加一个激光扫描仪，或者再添加一个双目摄像头，那么此时就需要在系统中添加两个坐标参考系，利用 tf 让系统帮我们将激光扫描仪的数据或双目摄像头的数据转换到全局坐标系中去，因此添加一个坐标系是非常必要的。<br>tf 以树形结构维护和保存多个参考系坐标，在这个结构中不能有闭环产生，这就意味着，坐标参考系树形结构中只能有一个父参考系 parent,它可以有多个子参考坐标系 child。下面图中 tf 树形结构中有三个参考坐标系，world，turtle1 和 turtle2。 并且 turtle1 和 trutle2 都是 world 的子参考坐标系，如果再添加一个新的坐标参考系 carrot1 它必须是以上三个参考坐标系的子参考系。</p>
<p><img src="/2017/06/07/ros-primary-tutorial-13/tree.png" alt=""></p>
<p>接着前面，我们在 turtle1 基础上添加一个参考坐标系 carrot1, 它的父参考系是 turtle1。在 learning_tf/src 目录下建立文件 frame_tf_broadcaster.cpp，添加以下代码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_broadcaster.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line">&#123;</div><div class="line">	ros::init(argc, argv, <span class="string">"my_tf_broadcaster"</span>);</div><div class="line">	ros::NodeHandle node;</div><div class="line"></div><div class="line">	tf::TransformBroadcaster br;</div><div class="line">	tf::Transform transform;</div><div class="line">  </div><div class="line">	ros::<span class="function">Rate <span class="title">rate</span><span class="params">(<span class="number">10.0</span>)</span></span>;</div><div class="line">	<span class="keyword">while</span> (node.ok())&#123;</div><div class="line">		transform.setOrigin( tf::Vector3(<span class="number">0.0</span>, <span class="number">2.0</span>, <span class="number">0.0</span>) );</div><div class="line">		transform.setRotation( tf::Quaternion(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>) );</div><div class="line">		br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), <span class="string">"turtle1"</span>, <span class="string">"carrot1"</span>));</div><div class="line">		rate.sleep();</div><div class="line">     &#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>父参考系 turtle1 ，子参考系 carrot1 ，carrot1 在 x y z 方向上与 turtle1 的偏移为 (x:0.0,y:2.0,z:0.0)。修改 CMakeLists.txt 文件添加依赖：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(frame_tf_broadcaster src/frame_tf_broadcaster.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(frame_tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure></p>
<p>在 ~/catkin_ws/devel/lib/learning_tf/ 文件夹下会生成可执行的节点文件 frame_tf_broadcaster ，我们将它的启动放到 start_demo.launch 文件中，添加以下内容：<br>   <figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;node pkg=<span class="string">"learning_tf"</span> <span class="class"><span class="keyword">type</span></span>=<span class="string">"frame_tf_broadcaster"</span> </div><div class="line"> name=<span class="string">"broadcaster_frame"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>运行测试看下效果，roslaunch 会一并执行 roscore 所以不用再提前运行 roscore:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roslaunch learning_tf start_demo.launch</span></div></pre></td></tr></table></figure></p>
<p>我们发现添加了这个坐标系，并没有对之前的 turtle 产生影响，这就恰恰说明了添加一个新的参考坐标系不会影响以前固有的参考坐标系。我们的监听节点依然使用的是之前定义的参考坐标系。现在，我们打开前面编写的监听节点源码 learning_tf/src/turtle_tf_listener.cpp, 我们将 /turtle1 替换成 /carrot1 ：<br>   <figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">listener</span><span class="selector-class">.waitForTransform</span>(<span class="string">"/turtle2"</span>, <span class="string">"/carrot1"</span>,<span class="attribute">ros</span>::Time(<span class="number">0</span>), <span class="attribute">ros</span>::Duration(<span class="number">3.0</span>));</div><div class="line"><span class="selector-tag">listener</span><span class="selector-class">.lookupTransform</span>(<span class="string">"/turtle2"</span>, <span class="string">"/carrot1"</span>,<span class="attribute">ros</span>::Time(<span class="number">0</span>), transform);</div></pre></td></tr></table></figure></p>
<p>再次编译并执行 start_demo.launch，我们发现，当移动 turtle1 时， turtle2 在跟随 turtle1 的同时总是保持一定的距离，这个距离就是 carrot1 参考系相对于 turtle1 的偏移，因此 turtle2 跟随的是 carrot1 虽然我们没有定义这个模型，但依然能感觉到这个随动关系:</p>
<p><img src="/2017/06/07/ros-primary-tutorial-13/carrot1.jpg" alt=""></p>
<h1 id="moving-frame"><a href="#moving-frame" class="headerlink" title="moving frame"></a>moving frame</h1><p>建立移动参考系，让两个参考系的关系不再是固定的而是随着时间变化的，因此可以简单的将固定参考系的关系修改成随着时间而变化的，修改 frame_tf_broadcaster.cpp 文件：<br>   <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span><span class="selector-class">.setOrigin</span>( <span class="selector-tag">tf</span><span class="selector-pseudo">::Vector3(2.0</span>*<span class="selector-tag">sin</span>(<span class="selector-tag">ros</span><span class="selector-pseudo">::Time</span><span class="selector-pseudo">::now().toSec())</span>, 2<span class="selector-class">.0</span>*<span class="selector-tag">cos</span>(<span class="selector-tag">ros</span><span class="selector-pseudo">::Time</span><span class="selector-pseudo">::now().toSec())</span>, 0<span class="selector-class">.0</span>) );</div><div class="line"><span class="selector-tag">transform</span><span class="selector-class">.setRotation</span>( <span class="selector-tag">tf</span><span class="selector-pseudo">::Quaternion(0</span>, 0, 0, 1) )</div></pre></td></tr></table></figure></p>
<p>以上变换将 carrot1 相对于父参考系 turtle1 的坐标变换修改成时间的正余弦函数，我们再次编译并重新运行一下看效果：<br><img src="/2017/06/07/ros-primary-tutorial-13/moving.jpg" alt=""><br>turtle2 一直绕着 turtle1 做画圆运动，因为上面的函数是三角函数 且符合 x2 + y2 = r2 关系。<br>参考:<a href="http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20broadcaster%20%28C%2B%2B%29" target="_blank" rel="external">Writing a tf broadcaster C++</a>   /  <a href="http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20listener%20%28C%2B%2B%29" target="_blank" rel="external">Writing a tf listener C++</a> / <a href="http://wiki.ros.org/tf/Tutorials/Adding%20a%20frame%20%28C%2B%2B%29" target="_blank" rel="external">Adding a frame</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇继续学习 &lt;a href=&quot;http://wiki.ros.org/tf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tf&lt;/a&gt;。通过编写一个简单的 tf broadcaster 以及 tf listener 来更进一步的理解坐标变换。本篇涉及到的代码已上传到 &lt;a href=&quot;https://github.com/StevenShiChina/learning_tf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mygithub&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;tf-broadcaster&quot;&gt;&lt;a href=&quot;#tf-broadcaster&quot; class=&quot;headerlink&quot; title=&quot;tf broadcaster&quot;&gt;&lt;/a&gt;tf broadcaster&lt;/h1&gt;&lt;p&gt;tf broadcaster 用于广播坐标变换，任何节点都可以监听该变换。先创建一个程序包，名字随心，这里我们命名为 &lt;em&gt;learning_tf&lt;/em&gt;,包的依赖项为 &lt;em&gt;roscpp rospy turtlesim&lt;/em&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS tf" scheme="http://stevenshi.me/tags/ROS-tf/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级&lt;十二&gt; 理解 ROS 坐标转换 一</title>
    <link href="http://stevenshi.me/2017/06/07/ros-primary-tutorial-12/"/>
    <id>http://stevenshi.me/2017/06/07/ros-primary-tutorial-12/</id>
    <published>2017-06-07T02:30:19.000Z</published>
    <updated>2017-06-08T01:56:59.098Z</updated>
    
    <content type="html"><![CDATA[<p>一个完整的机器人有腿(或轮子)、有眼睛、有手、有大脑，大脑控制机器人去协调的动作。问题来了，大脑是如何知道腿在哪儿？眼睛在哪儿？手臂在哪儿？要帮主人把房门打开，如何控制手臂去开门？这些都涉及到一个关键的问题-机器人的坐标变换。本篇学习 ROS 中的 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 。<br><a id="more"></a></p>
<h1 id="tf-初理解"><a href="#tf-初理解" class="headerlink" title="tf 初理解"></a>tf 初理解</h1><p><img src="/2017/06/07/ros-primary-tutorial-12/tf.png" alt=""><br>tf 是 ROS 中的坐标变换系统，它可以跟踪多个参考坐标系的坐标，使用树形数据结构根据时间缓冲来维护这些坐标及其坐标关系，帮助我们在任意时间完成两个或多个参考系中的坐标变换。 tf 以分布式形式存在，所有节点都可以使用这些变换数据，节点可以监听 tf 变换，接收系统中发布的所有参考坐标系，并查询需要的参考坐标系；节点可以广播 tf 变换，想系统中广播参考系坐标关系，每个节点的参考坐标广播可以直接插入 tf 树中告知系统。</p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>通过一个实例来更好的理解  <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a>，参考 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">官网</a>。<br>启动一个demo:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roslaunch turtle_tf turtle_tf_demo.launch</span></div></pre></td></tr></table></figure></p>
<p>此时会看到有两个 turtle 同时出现，将光标移动到 terminal 以便于用键盘的方向键来控制其中一个 turtle 的移动，可以看到当一个移动时另外一个一直做跟随运动：<br><img src="/2017/06/07/ros-primary-tutorial-12/follow.jpg" alt=""></p>
<p>该例子使用 tf 库创建的三个坐标系，一个是全局坐标系，一个是 turtle1 坐标系，另一个是 turtle2 坐标系。它使用 tf 广播发布 turtle 的坐标，另外一个去监听这个坐标，并计算它们之间的位置差，从而移动一个去跟随另一个的位置。</p>
<h1 id="tf-工具使用"><a href="#tf-工具使用" class="headerlink" title="tf 工具使用"></a>tf 工具使用</h1><p><a href="http://wiki.ros.org/tf#view_frames" target="_blank" rel="external">view_frames</a>：</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun tf view_frames</span></div></pre></td></tr></table></figure>
<p><a href="http://wiki.ros.org/tf#view_frames" target="_blank" rel="external">view_frames</a> 可以以PDF的形式创建当前坐标广播系统树，命令输出如下：<br>   <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Listening <span class="built_in">to</span> /tf <span class="keyword">for</span> <span class="number">5.000000</span> <span class="built_in">seconds</span></div><div class="line">Done Listening</div><div class="line">dot - graphviz <span class="built_in">version</span> <span class="number">2.36</span><span class="number">.0</span> (<span class="number">20140111.2315</span>)</div><div class="line"></div><div class="line">Detected dot <span class="built_in">version</span> <span class="number">2.36</span></div><div class="line">frames.pdf generated</div></pre></td></tr></table></figure></p>
<p>它会在当前目录下生成 frames.pdf 文件，可以使用如下命令查看：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> evince frames.pdf</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/06/07/ros-primary-tutorial-12/pdf.jpg" alt=""><br>从图中可以看出，系统存在三个参考坐标系，world 为父坐标系即全局坐标系，另外两个也都有自己的坐标系，信息中还包括发送频率、缓存长度等信息。</p>
<p><a href="http://wiki.ros.org/rqt_tf_tree" target="_blank" rel="external">rqt_tf_tree</a>:</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rqt_tf_tree rqt_tf_tree</span></div></pre></td></tr></table></figure>
<p><a href="http://wiki.ros.org/rqt_tf_tree" target="_blank" rel="external">rqt_tf_tree</a> 是一个可视化的实时坐标树查看工具，可以随时点击刷新按钮来实时的查看坐标广播树。<img src="/2017/06/07/ros-primary-tutorial-12/runtime.jpg" alt=""></p>
<p><a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf_echo</a>:<br>使用：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosrun tf tf_echo <span class="string">[reference_frame]</span> <span class="string">[target_frame]</span></div></pre></td></tr></table></figure></p>
<p>如何从 turtle1 得到 turtle2 的坐标:<br><img src="/2017/06/07/ros-primary-tutorial-12/matrix.png" alt=""></p>
<p>该命令输出指定的坐标变换关系，如：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun tf tf_echo turtle1 turtle2</span></div></pre></td></tr></table></figure></p>
<p>输出一般为：<br>   <figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">At</span> <span class="selector-tag">time</span> <span class="selector-tag">1496812263</span><span class="selector-class">.516</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Translation</span>: <span class="selector-attr">[0.000, 0.000, 0.000]</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Rotation</span>: <span class="selector-tag">in</span> <span class="selector-tag">Quaternion</span> <span class="selector-attr">[0.000, 0.000, 0.707, 0.707]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (radian) <span class="selector-attr">[0.000, -0.000, 1.571]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (degree) <span class="selector-attr">[0.000, -0.000, 90.000]</span></div><div class="line"><span class="selector-tag">At</span> <span class="selector-tag">time</span> <span class="selector-tag">1496812264</span><span class="selector-class">.205</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Translation</span>: <span class="selector-attr">[0.000, 0.000, 0.000]</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Rotation</span>: <span class="selector-tag">in</span> <span class="selector-tag">Quaternion</span> <span class="selector-attr">[0.000, 0.000, 0.707, 0.707]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (radian) <span class="selector-attr">[0.000, -0.000, 1.571]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (degree) <span class="selector-attr">[0.000, -0.000, 90.000]</span></div><div class="line"><span class="selector-tag">At</span> <span class="selector-tag">time</span> <span class="selector-tag">1496812265</span><span class="selector-class">.213</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Translation</span>: <span class="selector-attr">[0.000, 0.000, 0.000]</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Rotation</span>: <span class="selector-tag">in</span> <span class="selector-tag">Quaternion</span> <span class="selector-attr">[0.000, 0.000, 0.707, 0.707]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (radian) <span class="selector-attr">[0.000, -0.000, 1.571]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (degree) <span class="selector-attr">[0.000, -0.000, 90.000]</span></div><div class="line"><span class="selector-tag">At</span> <span class="selector-tag">time</span> <span class="selector-tag">1496812266</span><span class="selector-class">.205</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Translation</span>: <span class="selector-attr">[0.000, 0.000, 0.000]</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Rotation</span>: <span class="selector-tag">in</span> <span class="selector-tag">Quaternion</span> <span class="selector-attr">[0.000, 0.000, 0.707, 0.707]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (radian) <span class="selector-attr">[0.000, -0.000, 1.571]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (degree) <span class="selector-attr">[0.000, -0.000, 90.000]</span></div></pre></td></tr></table></figure></p>
<p>它是一直输出的，当控制移动 turtle1 时可以看到 turtle2 的坐标是怎么变化的，也就是 turtle2 的坐标是怎么根据 turtle1 的出来的。</p>
<h1 id="rviz"><a href="#rviz" class="headerlink" title="rviz"></a>rviz</h1><p>使用 <a href="">rviz</a> 可视化工具查看坐标系之间的坐标关系<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rviz rviz <span class="_">-d</span> `rospack find turtle_tf`/rviz/turtle_rviz.rviz</span></div></pre></td></tr></table></figure></p>
<p>当通过键盘控制 turtle 运动时，可以在 rviz 中观察到两个 turtle 的位置关系及坐标的变换：<br><img src="/2017/06/07/ros-primary-tutorial-12/rviz.jpg" alt=""><br>远处两个小的坐标系分别为 turtle1 和 turtle2 的坐标系，左下角为系统全局坐标系。本篇先到这里，下一篇进一步学习 tf 坐标变换。<br>参考 <a href="http://wiki.ros.org/tf/Tutorials/Introduction%20to%20tf" target="_blank" rel="external">Introduction tf</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个完整的机器人有腿(或轮子)、有眼睛、有手、有大脑，大脑控制机器人去协调的动作。问题来了，大脑是如何知道腿在哪儿？眼睛在哪儿？手臂在哪儿？要帮主人把房门打开，如何控制手臂去开门？这些都涉及到一个关键的问题-机器人的坐标变换。本篇学习 ROS 中的 &lt;a href=&quot;http://wiki.ros.org/tf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tf&lt;/a&gt; 。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS tf" scheme="http://stevenshi.me/tags/ROS-tf/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级&lt;十一&gt; 简单的ROS服务器和客户端</title>
    <link href="http://stevenshi.me/2017/06/01/ros-primary-tutorial-11/"/>
    <id>http://stevenshi.me/2017/06/01/ros-primary-tutorial-11/</id>
    <published>2017-06-01T02:17:27.000Z</published>
    <updated>2017-06-09T03:14:39.348Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习简单的 ROS 服务器和客户端的编写，服务器和客户端也是 ROS 网络中的一个节点，服务器可以提供某些服务，客户端发出请求，服务器做出响应。本篇涉及的代码已上传到 <a href="https://github.com/StevenShiChina/beginner_tutorials" target="_blank" rel="external">mygithub</a>。<br><a id="more"></a></p>
<h1 id="服务器节点"><a href="#服务器节点" class="headerlink" title="服务器节点"></a>服务器节点</h1><p>我们将创建一个 service 节点 (add_two_ints_server)，该节点接收两个整形数字，并返回它们的和。客户端可以给服务器发送请求。<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd beginner_tutorials/src</span></div></pre></td></tr></table></figure></p>
<p>新建 add_two_ints_server.cpp 在  beginner_tutorials/src 目录下，添加源码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">/*beginner_tutorials/AddTwoInts.h由编译系统自动根据我们先前创建的srv文件</span></div><div class="line"> 生成的对应该srv文件的头文件*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"beginner_tutorials/AddTwoInts.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">/*add函数提供两个int值求和的服务，int值从request里面获取，</span></div><div class="line"> 而返回数据装入response内，这些数据类型都定义在srv文件内部，</div><div class="line"> 函数返回一个boolean值*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(beginner_tutorials::AddTwoInts::Request  &amp;req,</span></span></div><div class="line">        beginner_tutorials::AddTwoInts::Response &amp;res)</div><div class="line">&#123;</div><div class="line"> res.sum = req.a + req.b;</div><div class="line"> ROS_INFO(<span class="string">"request: x=%ld, y=%ld"</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)req.a, (<span class="keyword">long</span> <span class="keyword">int</span>)req.b);</div><div class="line"> ROS_INFO(<span class="string">"sending back response: [%ld]"</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)res.sum);</div><div class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line"> ros::init(argc, argv, <span class="string">"add_two_ints_server"</span>);</div><div class="line"> ros::NodeHandle n;</div><div class="line"></div><div class="line"><span class="comment">/*service 服务建立*/</span></div><div class="line"> ros::ServiceServer service = n.advertiseService(<span class="string">"add_two_ints"</span>, add);</div><div class="line"> ROS_INFO(<span class="string">"Ready to add two ints."</span>);</div><div class="line"> ros::spin();</div><div class="line"></div><div class="line"> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="客户端节点"><a href="#客户端节点" class="headerlink" title="客户端节点"></a>客户端节点</h1><p>在目录 beginner_tutorials/src 下，新建 add_two_ints_client.cpp 文件添加如下源码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"beginner_tutorials/AddTwoInts.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">  ros::init(argc, argv, <span class="string">"add_two_ints_client"</span>);</div><div class="line">  <span class="keyword">if</span> (argc != <span class="number">3</span>)</div><div class="line">  &#123;</div><div class="line">    ROS_INFO(<span class="string">"usage: add_two_ints_client X Y"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ros::NodeHandle n;</div><div class="line">  </div><div class="line">  <span class="comment">/*为add_two_ints service创建一个client。ros::ServiceClient 对象待会用来调用service*/</span></div><div class="line"></div><div class="line">  ros::ServiceClient client = n.serviceClient&lt;beginner_tutorials::AddTwoInts&gt;(<span class="string">"add_two_ints"</span>);</div><div class="line"></div><div class="line"> <span class="comment">/*实例化一个由ROS编译系统自动生成的service类，并给其request成员赋值。</span></div><div class="line">  一个service类包含两个成员request和response。同时也包括两个类定义Request和Response*/</div><div class="line"></div><div class="line">  beginner_tutorials::AddTwoInts srv;</div><div class="line">  srv.request.a = atoll(argv[<span class="number">1</span>]);</div><div class="line">  srv.request.b = atoll(argv[<span class="number">2</span>]);</div><div class="line"></div><div class="line">  <span class="comment">/*调用service。由于service的调用是模态过程（调用的时候占用进程阻止其他代码的执行），</span></div><div class="line">  一旦调用完成，将返回调用结果。如果service调用成功，call()函数将返回true，</div><div class="line">  srv.response里面的值将是合法的值。如果调用失败，call()函数将返回false，</div><div class="line">  srv.response里面的值将是非法的*/</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (client.call(srv))</div><div class="line">  &#123;</div><div class="line">    ROS_INFO(<span class="string">"Sum: %ld"</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)srv.response.sum);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    ROS_ERROR(<span class="string">"Failed to call service add_two_ints"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="编译测试"><a href="#编译测试" class="headerlink" title="编译测试"></a>编译测试</h1><p>编译之前先修改下 CMakeLists.txt ,文件位于:<br> ~/catkin_ws/src/beginner_tutorials/CMakeLists.txt，参考 <a href="https://raw.github.com/ros/catkin_tutorials/master/create_package_srvclient/catkin_ws/src/beginner_tutorials/CMakeLists.txt" target="_blank" rel="external">CMakeLists.txt</a>:<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(add_two_ints_server src/add_two_ints_server.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(add_two_ints_server $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line"><span class="function"><span class="title">add_dependencies</span><span class="params">(add_two_ints_server beginner_tutorials_gencpp)</span></span></div><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(add_two_ints_client src/add_two_ints_client.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(add_two_ints_client $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line"><span class="function"><span class="title">add_dependencies</span><span class="params">(add_two_ints_client beginner_tutorials_gencpp)</span></span></div></pre></td></tr></table></figure></p>
<p>生成两个可执行程序 add_two_ints_server 和 add_two_ints_client ，这两个可执行程序默认被放在的 devel space 下的包目录下。可以直接调用可执行程序，或者使用 rosrun 命令去调用它们。它们不会被装在usr/bin目录下，如果希望在安装的时候可执行程序在PATH变量里面，需要设置一下install target，请参考：<a href="http://wiki.ros.org/catkin/CMakeLists.txt" target="_blank" rel="external">catkin/CMakeLists.txt</a><br>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure></p>
<p>编译完成后会在目录 ~/catkin_ws/devel/lib/beginner_tutorials 下生成两个可执行文件 add_two_ints_client  和 add_two_ints_server 现在可以运行并测试它们：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun beginner_tutorials add_two_ints_server</span></div></pre></td></tr></table></figure></p>
<p>如果运行时找不到程序包，运行一下 <em>rospack profile</em> 另外开启一个terminal 运行客户端:<br>   <figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosrun <span class="keyword">beginner_tutorials </span><span class="keyword">add_two_ints_client </span> <span class="number">188</span> <span class="number">102</span></div></pre></td></tr></table></figure></p>
<p>输出结果看图：<img src="/2017/06/01/ros-primary-tutorial-11/service.jpg" alt=""><br>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/WritingServiceClient%28c%2B%2B%29" target="_blank" rel="external">WritingServiceClient</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习简单的 ROS 服务器和客户端的编写，服务器和客户端也是 ROS 网络中的一个节点，服务器可以提供某些服务，客户端发出请求，服务器做出响应。本篇涉及的代码已上传到 &lt;a href=&quot;https://github.com/StevenShiChina/beginner_tutorials&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mygithub&lt;/a&gt;。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ServiceClient" scheme="http://stevenshi.me/tags/ServiceClient/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级&lt;十&gt; 简单的ROS发布器和订阅器</title>
    <link href="http://stevenshi.me/2017/05/31/ros-primary-tutorial-10/"/>
    <id>http://stevenshi.me/2017/05/31/ros-primary-tutorial-10/</id>
    <published>2017-05-31T07:27:20.000Z</published>
    <updated>2017-06-09T03:13:02.934Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习 ROS 中简单的发布器和订阅器节点的编写。节点就是 ROS 网络中的一个可执行文件，它既可以订阅消息也可以发布消息。本篇涉及的代码已上传至 <a href="https://github.com/StevenShiChina/beginner_tutorials" target="_blank" rel="external">mygithub</a>。<br><a id="more"></a></p>
<h1 id="发布器"><a href="#发布器" class="headerlink" title="发布器"></a>发布器</h1><p>我们将创建一个发布器节点 talker，它将不断的在 ROS 网络中广播消息。在 beginner_tutorials 目录下新建一个 src 目录<br>   <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>mkdir -p ~<span class="regexp">/catkin_ws/src</span><span class="regexp">/beginner_tutorials/src</span></div><div class="line"><span class="variable">$ </span>roscd beginner_tutorials/src/</div></pre></td></tr></table></figure></p>
<p>src 文件夹用于放置 beginner_tutorials 包的所有源代码，新建 talker.cpp 在 beginner_tutorials/src/ 目录下添加如下代码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span> <span class="comment">/*引用ROS系统中发部分常用的头文件*/</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"std_msgs/String.h"</span> <span class="comment">/*消息类型定义*/</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="comment">/*初始化ROS talker节点名*</span></div><div class="line">  ros::init(argc, argv, "talker");</div><div class="line"></div><div class="line">  /*为该进程创建一个节点句柄 第一个创建的 NodeHandle 会为节点进行初始化，</div><div class="line">  最后一个销毁的 NodeHandle 则会释放该节点所占用的所有资源*</div><div class="line">  </div><div class="line">  ros::NodeHandle n;</div><div class="line"></div><div class="line">  /*告诉 master 我们将要在 command（话题名） 上发布 std_msgs/String 类型的消息。</div><div class="line">  这样 master 就会告诉所有订阅了 command 话题的节点，将要有数据发布。第二个参数是发布序列的大小。</div><div class="line">  如果我们发布的消息的频率太高，缓冲区中的消息在大于 1000 个的时候就会开始丢弃先前发布的消息。 </div><div class="line">  NodeHandle::advertise() 返回一个 ros::Publisher 对象,它有两个作用：</div><div class="line">  1) 它有一个 publish() 成员函数可以让你在topic上发布消息； </div><div class="line">  2) 如果消息类型不对,它会拒绝发布*/</div><div class="line">  </div><div class="line">  ros::Publisher chatter_pub = n.advertise&lt;std_msgs::String&gt;(<span class="string">"command"</span>, <span class="number">1000</span>);</div><div class="line">  </div><div class="line">  <span class="comment">/*ros::Rate 对象可以允许指定自循环的频率。它会追踪记录自上一次调用 Rate::sleep() </span></div><div class="line">  后时间的流逝，并休眠直到一个频率周期的时间,本例指定循环频率为10HZ */</div><div class="line"> </div><div class="line">  ros::<span class="function">Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line"> <span class="comment">/*roscpp 会默认生成一个 SIGINT 句柄，它负责处理 Ctrl-C 键盘操作——使得 ros::ok() 返回 false。 </span></div><div class="line">   如果下列条件之一发生，ros::ok() 返回false： </div><div class="line">   1  SIGINT 被触发 (Ctrl-C) </div><div class="line">   2  被另一同名节点踢出 ROS 网络 </div><div class="line">   3  ros::shutdown() 被程序的另一部分调用 </div><div class="line">   4 节点中的所有 ros::NodeHandles 都已经被销毁 </div><div class="line">   一旦 ros::ok() 返回 false, 所有的 ROS 调用都会失效*/</div><div class="line">  </div><div class="line">  <span class="keyword">while</span> (ros::ok())</div><div class="line">  &#123;</div><div class="line">    <span class="comment">/*我们使用一个由 msg file 文件产生的『消息自适应』类在 </span></div><div class="line">    ROS 网络中广播消息。现在我们使用标准的String消息，它只有一个数据成员 "data"。</div><div class="line">    当然，你也可以发布更复杂的消息类型。 */</div><div class="line">    </div><div class="line">    std_msgs::String msg;</div><div class="line">    </div><div class="line">    <span class="built_in">std</span>::<span class="built_in">stringstream</span> ss;</div><div class="line">    </div><div class="line">    ss &lt;&lt; <span class="string">"talker publish command "</span> &lt;&lt; count;</div><div class="line">    </div><div class="line">    msg.data = ss.str();</div><div class="line">    </div><div class="line">    <span class="comment">/*ROS_INFO 和其他类似的函数可以用来代替 printf/cout 等函数。</span></div><div class="line">    具体可以参考 http://wiki.ros.org/rosconsole，以获得更多信息*/</div><div class="line">    </div><div class="line">    ROS_INFO(<span class="string">"%s"</span>, msg.data.c_str()); </div><div class="line">    </div><div class="line">   <span class="comment">/*广播消息*/</span></div><div class="line">    </div><div class="line">    chatter_pub.publish(msg);</div><div class="line">    </div><div class="line">    <span class="comment">/*在这个例子中并不是一定要调用 ros::spinOnce()，因为我们不接受回调。</span></div><div class="line">     如果你的程序里包含其他回调函数，最好在这里加上 ros::spinOnce()这一语句，</div><div class="line">    否则你的回调函数就永远也不会被调用了*/</div><div class="line">   </div><div class="line">    ros::spinOnce();</div><div class="line">    </div><div class="line">    <span class="comment">/*休眠一段时间，使得发布频率为10HZ*/</span></div><div class="line">    loop_rate.sleep();</div><div class="line">   </div><div class="line">    ++count;</div><div class="line">   &#125;</div><div class="line"> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的内容可以总结为：<br> 1 初始化 ROS 系统<br> 2 在 ROS 网络内广播我们将要在 command 话题上发布 std_msgs/String 类型的消息<br> 3 以每秒 10 次的频率在 chatter 上发布消息<br>接下来编写一个订阅器用于接收该节点发布的消息。</p>
<h1 id="订阅器"><a href="#订阅器" class="headerlink" title="订阅器"></a>订阅器</h1><p>新建 listener.cpp 放置于 beginner_tutorials 的 src 目录下：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd beginner_tutorials/src/</span></div><div class="line"><span class="meta">$</span><span class="bash"> vim listener.cpp</span></div></pre></td></tr></table></figure></p>
<p>添加如下代码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"std_msgs/String.h"</span></span></div><div class="line"><span class="comment">/*定义回调函数*/</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">chatterCallback</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="comment">/*打印收到的信息，消息是以 boost shared_ptr 指针的形式传输，这就意味着你可以存储它而又不需要复制数据。 */</span></div><div class="line">  ROS_INFO(<span class="string">"listener got: [%s]"</span>, msg-&gt;data.c_str());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line"> <span class="comment">/*初始化节点，命名为listener*/</span></div><div class="line"> </div><div class="line"> ros::init(argc, argv, <span class="string">"listener"</span>);</div><div class="line"></div><div class="line"> <span class="comment">/*创建节点句柄*/</span></div><div class="line"></div><div class="line">  ros::NodeHandle n;</div><div class="line"> </div><div class="line"> <span class="comment">/*订阅主题,并注册回调函数，当有消息发布到这个话题时，ROS 就会调用 chatterCallback() 函数。</span></div><div class="line">  第二个参数是队列大小，以防我们处理消息的速度不够快，当缓存达到 1000 条消息后，再有新的消息到来就将开始丢弃先前接收的消息。 */</div><div class="line"> </div><div class="line"> ros::Subscriber sub = n.subscribe(<span class="string">"command"</span>, <span class="number">1000</span>, chatterCallback);</div><div class="line"> </div><div class="line"> <span class="comment">/*进入自循环，可以尽可能快的调用消息回调函数。如果没有消息到达，它不会占用很多 CPU，所以不用担心。一旦 ros::ok() 返回 false，</span></div><div class="line">  ros::spin() 就会立刻跳出自循环。这有可能是 ros::shutdown() 被调用，或者是用户按下了 Ctrl-C，</div><div class="line">  使得 master 告诉节点要终止运行。也有可能是节点被人为关闭的。 </div><div class="line">  还有其他的方法进行回调，但在这里我们不涉及。想要了解，可以参考 http://wiki.ros.org/roscpp_tutorials package</div><div class="line">  里的一些 demo 应用。需要更为详尽的信息，可以参考 http://wiki.ros.org/roscpp/Overview。 */</div><div class="line">  </div><div class="line">  ros::spin();</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码可以总结为：<br> 1 初始化ROS系统<br> 2 订阅 chatter 话题<br> 3 进入自循环，等待消息的到达<br> 4 当消息到达，调用 chatterCallback() 函数 </p>
<h1 id="编译测试"><a href="#编译测试" class="headerlink" title="编译测试"></a>编译测试</h1><p>编译测试之前需要修改 beginner_tutorials 中的 CMakeLists.txt 文件，添加以下内容：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">include_directories</span><span class="params">(include $&#123;catkin_INCLUDE_DIRS&#125;)</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(talker src/talker.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(talker $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(listener src/listener.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(listener $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p>这会生成两个可执行文件, talker 和 listener, 默认存储到 <a href="http://wiki.ros.org/catkin/workspaces#Development_.28Devel.29_Space" target="_blank" rel="external">devel space</a> 目录下,具体是在 ~/catkin_ws/devel/lib/beginner_tutorials 中。<br>为可执行文件添加对生成的消息文件的依赖：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_dependencies</span><span class="params">(talker beginner_tutorials_generate_messages_cpp)</span></span></div><div class="line"><span class="function"><span class="title">add_dependencies</span><span class="params">(listener beginner_tutorials_generate_messages_cpp)</span></span></div></pre></td></tr></table></figure></p>
<p>这样就可以确保自定义消息的头文件在被使用之前已经被生成。因为 catkin 把所有的 package 并行的编译，所以如果你要使用其他 catkin 工作空间中其他 package 的消息，同样也需要添加对他们各自生成的消息文件的依赖。<br>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ./devel/setup.bash</span></div></pre></td></tr></table></figure></p>
<p>测试时打开两个 terminal,一个运行 talker 节点，一个运行 listener 节点：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun beginner_tutorials talker // 启动 talker节点</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun beginner_tutorials listener // 启动 listener 节点</span></div></pre></td></tr></table></figure></p>
<p>效果：<br><img src="/2017/05/31/ros-primary-tutorial-10/test.jpg" alt=""><br>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29" target="_blank" rel="external">WritingPublisherSubscriber</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习 ROS 中简单的发布器和订阅器节点的编写。节点就是 ROS 网络中的一个可执行文件，它既可以订阅消息也可以发布消息。本篇涉及的代码已上传至 &lt;a href=&quot;https://github.com/StevenShiChina/beginner_tutorials&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mygithub&lt;/a&gt;。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="Publisher" scheme="http://stevenshi.me/tags/Publisher/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级&lt;九&gt; 创建 ROS 消息和 ROS 服务</title>
    <link href="http://stevenshi.me/2017/05/31/ros-primary-tutorial-9/"/>
    <id>http://stevenshi.me/2017/05/31/ros-primary-tutorial-9/</id>
    <published>2017-05-31T05:31:50.000Z</published>
    <updated>2017-06-08T01:58:34.042Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习如何创建并编译 ROS 消息和服务，以及 <a href="http://wiki.ros.org/rosmsg" target="_blank" rel="external">rosmsg</a> <a href="http://wiki.ros.org/srv" target="_blank" rel="external">rossrv</a> <a href="http://wiki.ros.org/rosbash#roscp" target="_blank" rel="external">roscp</a> <a href="http://wiki.ros.org/rosbash#rosed" target="_blank" rel="external">rosed</a> 等命令的使用。<br><a id="more"></a></p>
<h1 id="rosed"><a href="#rosed" class="headerlink" title="rosed"></a>rosed</h1><p><a href="http://wiki.ros.org/rosbash#rosed" target="_blank" rel="external">rosed</a> 是 <a href="http://wiki.ros.org/rosbash" target="_blank" rel="external">rosbash</a> 的一部分，相当于 ros + edit。利用 <a href="http://wiki.ros.org/rosbash#rosed" target="_blank" rel="external">rosed</a> 可以直接通过 package 名称来获取到待编辑的文件而无需指定该文件的存储路径，使用方法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosed <span class="string">[package_name]</span> <span class="string">[filename]</span></div></pre></td></tr></table></figure></p>
<p>示例直接打开 beginner_tutorials 中的 talker.cpp文件：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosed beginner_tutoris talker.cpp</span></div></pre></td></tr></table></figure></p>
<p><a href="http://wiki.ros.org/rosbash#rosed" target="_blank" rel="external">rosed</a> 默认的编辑器是 <a href="http://www.vim.org/" target="_blank" rel="external">vim</a> ，可以将以下命令添加到 ~/.bashrc 文件中来修改默认的编辑器：<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export EDITOR=<span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>vim</div></pre></td></tr></table></figure></p>
<p>或者修改为使用 <a href="https://www.gnu.org/software/emacs/" target="_blank" rel="external">emacs</a> 为默认编辑器：<br>   <figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> EDITOR=<span class="string">'emacs -nw'</span></div></pre></td></tr></table></figure></p>
<p>打开一个新的终端，看看定义的 EDITOR 是否正确:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$EDITOR</span></span></div></pre></td></tr></table></figure></p>
<h1 id="消息和服务介绍"><a href="#消息和服务介绍" class="headerlink" title="消息和服务介绍"></a>消息和服务介绍</h1><p>消息 msg 文件是一个描述 ROS 中所使用的消息类型的一个简单文本，它们会被用来生成不同语言的源代码。服务 srv 文件用于描述一项服务，它包含两部分，请求和响应。<br>msg 文件存放在 package 的 msg 目录下，srv 文件存放于package 的 srv 目录下。msg 文件每行声明一个数据类型和变量名，目前支持的数据类型有：<br>   <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">int8</span>, <span class="built_in">int16</span>, <span class="built_in">int32</span>, <span class="built_in">int64</span> (plus <span class="built_in">uint</span>*) </div><div class="line"><span class="built_in">float32</span>, <span class="built_in">float64</span> </div><div class="line"><span class="built_in">string</span> </div><div class="line">time, duration </div><div class="line">other msg files </div><div class="line">variable-length <span class="built_in">array</span>[] <span class="keyword">and</span> fixed-length <span class="built_in">array</span>[C]</div></pre></td></tr></table></figure></p>
<p>在 ROS 中有一个特殊的数据类型：Header，它含有时间戳和坐标系信息。在 msg 文件的第一行经常可以看到 Header header的声明。<br>msg 文件样例：<br>   <figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Header</span> <span class="built_in">header</span></div><div class="line"><span class="keyword">string</span> child_frame_id</div><div class="line">geometry_msgs/PoseWithCovariance pose</div><div class="line">geometry_msgs/TwistWithCovariance twist</div></pre></td></tr></table></figure></p>
<p>srv 文件分为请求和响应两部分，由’—‘分隔。样例：<br>   <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int64 A</div><div class="line"><span class="section">int64 B</span></div><div class="line">---</div><div class="line">int64 Sum</div></pre></td></tr></table></figure></p>
<p>A 和 B 是请求，sum 是响应。</p>
<h1 id="msg-的使用"><a href="#msg-的使用" class="headerlink" title="msg 的使用"></a>msg 的使用</h1><p>在之前创建的 beginner_tutorial 里定义新的消息：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd beginner_tutorials/</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir msg</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"int64 num"</span> &gt; msg/Num.msg</span></div></pre></td></tr></table></figure></p>
<p>上面是最简单的例子在.msg文件中只有一行数据。当然，也可以仿造上面的形式多增加几行以得到更为复杂的消息：<br>   <figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">string</span> first_name</div><div class="line"><span class="keyword">string</span> last_name</div><div class="line"><span class="keyword">uint8</span> age</div><div class="line"><span class="keyword">uint32</span> score</div></pre></td></tr></table></figure></p>
<p>接下来需要确保 msg 文件被转换成 C++,Python和其他语言的源代码，查看 package.xml：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosed beginner_tutorials  package.xml</span></div></pre></td></tr></table></figure></p>
<p>确保它包含以下两条语句：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>message_generation<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>message_runtime<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在构建的时候，我们只需要”message_generation”。然而，在运行的时候，我们只需要”message_runtime”。 打开 CMakeLists.txt 文件，利用 find_packag 函数，增加对 message_generation 的依赖，这样就可以生成消息了。 可以直接在 COMPONENTS 的列表里增加 message_generation ：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosed beginner_tutorials CMakeLists.txt</span></div></pre></td></tr></table></figure></p>
   <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// Do <span class="keyword">not</span> just <span class="built_in">add</span> this <span class="built_in">line</span> <span class="built_in">to</span> your CMakeLists.txt,  modify <span class="keyword">the</span> existing <span class="built_in">line</span></div><div class="line"> find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs message_generation)</div></pre></td></tr></table></figure>
<p>即使没有调用 find_package, 也可以编译通过。这是因为 catkin 把所有的 package 都整合在一起，因此，如果其他的 package 调用了 find_package，你的 package 的依赖就会是同样的配置。但是，在单独编译这个 package 时，忘记调用 find_package 会很容易出错。确保设置了运行依赖项：<br>   <figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">catkin_package(</div><div class="line">  ...</div><div class="line">  CATKIN_DEPENDS message_runtime ...</div><div class="line">  ...)</div></pre></td></tr></table></figure></p>
<p>找到如下代码块:<br>   <figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// add_message_files(</span></div><div class="line"><span class="comment">//  FILES</span></div><div class="line"><span class="comment">//  Message1.msg</span></div><div class="line"><span class="comment">//   Message2.msg</span></div><div class="line"><span class="comment">// )</span></div></pre></td></tr></table></figure></p>
<p>去掉注释符号，用前面定义的.msg文件替代Message*.msg<br>   <figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">add_message_files(</div><div class="line"> <span class="name">FILES</span></div><div class="line"> Num.msg</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>手动添加.msg文件后，我们要确保CMake知道在什么时候重新配置我们的project。 确保添加了如下代码：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">generate_messages</span><span class="params">()</span></span></div></pre></td></tr></table></figure></p>
<p>查看自定义的消息文件能否被 ROS 识别，使用方法：<br>   <figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosmsg show [<span class="keyword">message</span> <span class="keyword">type</span>]</div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rosmsg <span class="keyword">show</span> beginner_tutorials/<span class="keyword">Num</span> </div><div class="line">$ rosmsg <span class="keyword">show</span> <span class="keyword">Num</span> // 也可以省略掉 <span class="keyword">package</span> 名</div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int64</span> num</div><div class="line"><span class="keyword">string</span> first_name</div><div class="line"><span class="keyword">string</span> last_name</div><div class="line"><span class="keyword">uint8</span> age</div><div class="line"><span class="keyword">uint8</span> score</div></pre></td></tr></table></figure></p>
<h1 id="srv-的使用"><a href="#srv-的使用" class="headerlink" title="srv 的使用"></a>srv 的使用</h1><p>在 beginner_tutorials 中创建服务，我们从其他 ROS 包中拷贝一个 srv 文件：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd beginner_tutorials</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir srv</span></div><div class="line"><span class="meta">$</span><span class="bash"> roscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv</span></div></pre></td></tr></table></figure></p>
<p>确保 srv 文件被转换成C++ Python 和其他语言的源代码。CMakeLists.txt 文件中关于 message_generation 的配置对 msg 和 srv 都起作用：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Do not just add this line to your CMakeLists.txt, modify the existing line</span></div><div class="line"><span class="function"><span class="title">find_package</span><span class="params">(catkin REQUIRED COMPONENTS roscpp rospy std_msgs message_generation)</span></span></div></pre></td></tr></table></figure></p>
<p>修改 CMakeLists.txt 文件增加 srv 依赖项：<br>   <figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">add_service_files(</span></div><div class="line"> FILES</div><div class="line"> <span class="keyword">AddTwoInts.srv</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>查看服务能否被 ROS 识别，使用方法：<br>   <figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">rossrv</span> show &lt;service <span class="keyword">type</span>&gt;</div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rossrv show beginner_tutorials/AddTwoInts</span></div><div class="line"><span class="meta">$</span><span class="bash"> rossrv show AddTwoInts //也可以不指定 package 名字</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int64 a</div><div class="line"><span class="section">int64 b</span></div><div class="line">---</div><div class="line">int64 sum</div></pre></td></tr></table></figure></p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>通过上面为 beginner_tutorials 包添加的 msg 文件和 srv 文件，接下来就可以编译了。编译之前先在 CMakeLists.txt 文件中添加所有消息文件所依赖的那些含有 .msg 文件的 package ：<br>   <figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">generate_messages(</div><div class="line"> <span class="name">DEPENDENCIES</span></div><div class="line"> std_msgs</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure></p>
<p>编译完成后，所有在 msg 路径下的 .msg 文件都将转换为 ROS 所支持语言的源代码。生成的 C++ 头文件将会放置在 ~/catkin_ws/devel/include/beginner_tutorials/目录下；Python脚本语言会在~/catkin_ws/devel/lib/python2.7/dist-packages/beginner_tutorials/msg 目录下创建。 lisp 文件会出现在 ~/catkin_ws/devel/share/common-lisp/ros/beginner_tutorials/msg/ 路径下。详细格式参考 <a href="http://wiki.ros.org/ROS/Message_Description_Language" target="_blank" rel="external">Message_Description_Language</a> 。</p>
<p>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/CreatingMsgAndSrv" target="_blank" rel="external">CreatingMsgAndSrv</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习如何创建并编译 ROS 消息和服务，以及 &lt;a href=&quot;http://wiki.ros.org/rosmsg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rosmsg&lt;/a&gt; &lt;a href=&quot;http://wiki.ros.org/srv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rossrv&lt;/a&gt; &lt;a href=&quot;http://wiki.ros.org/rosbash#roscp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;roscp&lt;/a&gt; &lt;a href=&quot;http://wiki.ros.org/rosbash#rosed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rosed&lt;/a&gt; 等命令的使用。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS Messages" scheme="http://stevenshi.me/tags/ROS-Messages/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级&lt;八&gt; 使用rqt_console 和 roslaunch</title>
    <link href="http://stevenshi.me/2017/05/31/ros-primary-tutorial-8/"/>
    <id>http://stevenshi.me/2017/05/31/ros-primary-tutorial-8/</id>
    <published>2017-05-31T02:26:43.000Z</published>
    <updated>2017-06-08T01:59:01.643Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习 <a href="http://wiki.ros.org/rqt_console" target="_blank" rel="external">rqt_console</a> 与 <a href="http://wiki.ros.org/roslaunch" target="_blank" rel="external">roslaunch</a> 的使用。<a href="http://wiki.ros.org/rqt_console" target="_blank" rel="external">rqt_console</a> 属于 ROS 日志框架的一部分，用来显示节点的输出信息。<a href="http://wiki.ros.org/roslaunch" target="_blank" rel="external">roslaunch</a> 用于节点的运行，可以同时运行多个节点。<br>使用之前先安装以下程序包:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt-common-plugins</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>如果之前已安装，也可忽略。</p>
<h1 id="rqt-console-与-rqt-logger-level"><a href="#rqt-console-与-rqt-logger-level" class="headerlink" title="rqt_console 与 rqt_logger_level"></a>rqt_console 与 rqt_logger_level</h1><p><a href="http://wiki.ros.org/rqt_console" target="_blank" rel="external">rqt_console</a> 显示节点信息， <a href="http://wiki.ros.org/rqt_logger_level" target="_blank" rel="external">rqt_logger_level</a> 用于修改节点运行时输出信息的日志等级。<br>开启 rqt_console 窗口与 rqt_logger_level 窗口：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rqt_console rqt_console</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun rqt_logger_level rqt_logger_level</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/31/ros-primary-tutorial-8/rqtconsole.jpg" alt=""><br><img src="/2017/05/31/ros-primary-tutorial-8/rqtloglevel.jpg" alt=""></p>
<p>开启一个新的 terminal 然后启动 turtlesim 节点：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>
<p>因为默认的日志等级为 info 所以 <a href="http://wiki.ros.org/rqt_console" target="_blank" rel="external">rqt_console</a> 的输出为：<br><img src="/2017/05/31/ros-primary-tutorial-8/info.jpg" alt=""></p>
<p>现在刷新一下 <a href="http://wiki.ros.org/rqt_logger_level" target="_blank" rel="external">rqt_logger_level</a> 窗口，并将日志等级修改为 Warn 并且让 turtle 做旋转动作：<br>   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r <span class="number">1</span> -- '[<span class="number">2.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]' '[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.8</span>]'</div></pre></td></tr></table></figure></p>
<p> 这里我的日志等级并没有修改过来，原因未知，待查。<br>日志等级按以下优先顺序排列：<br>   <figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Fatal</div><div class="line"><span class="keyword">Error</span></div><div class="line">Warn</div><div class="line">Info</div><div class="line">Debug</div></pre></td></tr></table></figure></p>
<p>Fatal是最高优先级，Debug是最低优先级。通过设置日志等级可以获取该等级及其以上优先等级的所有日志消息。比如，将日志等级设为Warn时，会得到Warn、Error和Fatal这三个等级的所有日志消息。</p>
<h1 id="roslaunch"><a href="#roslaunch" class="headerlink" title="roslaunch"></a>roslaunch</h1><p><a href="http://wiki.ros.org/roslaunch" target="_blank" rel="external">roslaunch</a> 可以用来启动定义在 launch 文件中的多个节点，用法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ roslaunch <span class="string">[package]</span> <span class="string">[filename.launch]</span></div></pre></td></tr></table></figure></p>
<p>进入 beginner_tutorials 目录,建立一个 launch 文件，<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd beginner_tutorials</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir launch</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> launch/</span></div><div class="line"><span class="meta">$</span><span class="bash"> vim turtlemimic.launch</span></div></pre></td></tr></table></figure></p>
<p>在 turtlemimic.launch 文件中输入以下内容：<br>   <figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> &lt;launch&gt;</div><div class="line"></div><div class="line">    &lt;<span class="built_in">group</span> ns=<span class="string">"turtlesim1"</span>&gt;</div><div class="line">      &lt;node pkg=<span class="string">"turtlesim"</span> <span class="built_in">name</span>=<span class="string">"sim"</span> <span class="built_in">type</span>=<span class="string">"turtlesim_node"</span>/&gt;</div><div class="line">   &lt;/<span class="built_in">group</span>&gt;</div><div class="line"></div><div class="line">    &lt;<span class="built_in">group</span> ns=<span class="string">"turtlesim2"</span>&gt;</div><div class="line">      &lt;node pkg=<span class="string">"turtlesim"</span> <span class="built_in">name</span>=<span class="string">"sim"</span> <span class="built_in">type</span>=<span class="string">"turtlesim_node"</span>/&gt;</div><div class="line">    &lt;/<span class="built_in">group</span>&gt;</div><div class="line"> </div><div class="line">   &lt;node pkg=<span class="string">"turtlesim"</span> <span class="built_in">name</span>=<span class="string">"mimic"</span> <span class="built_in">type</span>=<span class="string">"mimic"</span>&gt;</div><div class="line">     &lt;remap <span class="keyword">from</span>=<span class="string">"input"</span> <span class="keyword">to</span>=<span class="string">"turtlesim1/turtle1"</span>/&gt;</div><div class="line">     &lt;remap <span class="keyword">from</span>=<span class="string">"output"</span> <span class="keyword">to</span>=<span class="string">"turtlesim2/turtle1"</span>/&gt;</div><div class="line">   &lt;/node&gt;</div><div class="line"> </div><div class="line">&lt;/launch&gt;</div></pre></td></tr></table></figure></p>
<p>创建了两个节点分组，一个名字为 turtlesim1 ，一个名字为 turtlesim2 ，两个组里都是用相同的  turtlesim节点并命名为 sim，在同时启动两个 turtlesim 模拟器时避免冲突。将所有话题的输入重命名为 turtlesim1 输出重命名为 turtlesim2，这样可以使 turtlesim2 模仿 turtlesim1。<br>启动：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roslaunch beginner_tutorials turtlemimic.launch</span></div></pre></td></tr></table></figure></p>
<p> 并在另一个 terminal 下发布运动指令：<br>   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rostopic pub /turtlesim1/turtle1/cmd_vel geometry_msgs/Twist -r <span class="number">1</span> -- '[<span class="number">2.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]' '[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">-1.8</span>]'</div></pre></td></tr></table></figure></p>
<p>可以看到两个 turtle 在做同样的圆周运动<img src="/2017/05/31/ros-primary-tutorial-8/two.jpg" alt=""></p>
<p>也可以通过 <a href="">rqt_graph</a> 来更好的理解 launch文件中所做的事情：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rqt_graph</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/31/ros-primary-tutorial-8/rqtgraph.jpg" alt=""><br>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/UsingRqtconsoleRoslaunch" target="_blank" rel="external">UsingRqtconsoleRoslaunch</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习 &lt;a href=&quot;http://wiki.ros.org/rqt_console&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rqt_console&lt;/a&gt; 与 &lt;a href=&quot;http://wiki.ros.org/roslaunch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;roslaunch&lt;/a&gt; 的使用。&lt;a href=&quot;http://wiki.ros.org/rqt_console&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rqt_console&lt;/a&gt; 属于 ROS 日志框架的一部分，用来显示节点的输出信息。&lt;a href=&quot;http://wiki.ros.org/roslaunch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;roslaunch&lt;/a&gt; 用于节点的运行，可以同时运行多个节点。&lt;br&gt;使用之前先安装以下程序包:&lt;br&gt;   &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo apt-get install ros-indigo-rqt&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo apt-get install ros-indigo-rqt-common-plugins&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="rqt_console" scheme="http://stevenshi.me/tags/rqt-console/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级&lt;七&gt; 理解ROS服务和参数</title>
    <link href="http://stevenshi.me/2017/05/31/ros-primary-tutorial-7/"/>
    <id>http://stevenshi.me/2017/05/31/ros-primary-tutorial-7/</id>
    <published>2017-05-31T00:23:36.000Z</published>
    <updated>2017-06-08T01:59:30.605Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习 ROS 的服务和参数。</p>
<h1 id="ROS-服务"><a href="#ROS-服务" class="headerlink" title="ROS 服务"></a>ROS 服务</h1><p>Services 是 ROS 节点之间通信的另一种方式，服务允许节点发送请求(request)，并获得响应(response)。<a href="http://wiki.ros.org/rosservice" target="_blank" rel="external">rosservice</a> 命令可以使用 ROS 客户端/服务器框架提供的服务，<a href="http://wiki.ros.org/rosservice" target="_blank" rel="external">rosservice</a> 提供了很多可以在 topic 上使用的命令：<br>   <figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">rosservice <span class="built_in">list</span>         输出可用服务的信息</div><div class="line">rosservice <span class="built_in">call</span>         调用带参数的服务</div><div class="line">rosservice <span class="built_in">type</span>         输出服务类型</div><div class="line">rosservice <span class="built_in">find</span>         依据类型寻找服务<span class="built_in">find</span> services by service <span class="built_in">type</span></div><div class="line">rosservice uri          输出服务的ROSRPC uri</div></pre></td></tr></table></figure></p>
<p>测试上述命令之前先运行 turtlesim 节点:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>
<p>并用键盘进行控制，显示出运动轨迹。<br><a id="more"></a></p>
<h2 id="rosserice-list"><a href="#rosserice-list" class="headerlink" title="rosserice list"></a>rosserice list</h2>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosservice  list</span></div></pre></td></tr></table></figure>
<p>rosservice list 命令显示出 turtlesim 节点提供的一些服务，其中 rosout 为 roscore 提供的服务：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="string">/clear</span> <span class="string">//</span>清除</div><div class="line"><span class="string">/kill</span>  <span class="string">//</span>终止</div><div class="line"><span class="string">/reset</span> <span class="string">//</span>重置</div><div class="line"><span class="string">/rosout/get_loggers</span></div><div class="line"><span class="string">/rosout/set_logger_level</span></div><div class="line"><span class="string">/spawn</span> <span class="string">//</span>再生</div><div class="line"><span class="string">/turtle1/set_pen</span> <span class="string">//</span>设定画笔包括颜色、线条宽度、开关等</div><div class="line"><span class="string">/turtle1/teleport_absolute</span> <span class="string">//</span>绝对参数</div><div class="line"><span class="string">/turtle1/teleport_relative</span> <span class="string">//</span>相对参数</div><div class="line"><span class="string">/turtlesim/get_loggers</span> <span class="string">//</span>日志</div><div class="line"><span class="string">/turtlesim/set_logger_level</span> <span class="string">//</span>日志等级</div></pre></td></tr></table></figure></p>
<p>参数的详细说明参阅 <a href="http://wiki.ros.org/turtlesim" target="_blank" rel="external">turtlesim</a>。</p>
<h2 id="rosservice-type"><a href="#rosservice-type" class="headerlink" title="rosservice type"></a>rosservice type</h2><p>rosservice type 用于显示某个服务的类型，使用方法：<br>   <figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">rosservice</span> <span class="keyword">type</span> [service]</div></pre></td></tr></table></figure></p>
<p>比如我们想查看 turtlesim 节点提供的 clear 服务：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosservice <span class="built_in">type</span> clear</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">std_srvs/<span class="keyword">Empty</span></div></pre></td></tr></table></figure></p>
<p>服务的类型为空Empty,这表明在调用这个服务时不需要参数。那我们调用一次这个参数看下效果，使用方法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosservice call <span class="string">[service]</span> <span class="string">[args]</span></div></pre></td></tr></table></figure></p>
<p>测试：<br>   <figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosservice <span class="keyword">call</span> <span class="keyword">clear</span></div></pre></td></tr></table></figure></p>
<p>之前 turtule 运行的轨迹被清除。上面是不带参数的服务，我们查看一下带参数的服务 spwan:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosservice <span class="built_in">type</span> spawn| rossrv show</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">float32 x</div><div class="line">float32 y</div><div class="line">float32 theta</div><div class="line"><span class="section">string name</span></div><div class="line">---</div><div class="line">string name</div></pre></td></tr></table></figure></p>
<p>以上可以看出 spawn 服务需要的参数有 x y 坐标值、角度以及名字等参数。我们使用 spawn 服务在指定位置再生成一个 turtle :<br>   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosservice call spawn <span class="number">3</span> <span class="number">3</span> <span class="number">1.8</span> <span class="string">"another turtle"</span></div></pre></td></tr></table></figure></p>
<p>上面命令在坐标(3,3) 方位角为 1.8 生成一个名字为 “anotherturtle” 的 turtle,注意名字之间不能有空格。<br><img src="/2017/05/31/ros-primary-tutorial-7/spawn.jpg" alt=""></p>
<h1 id="ROS-参数"><a href="#ROS-参数" class="headerlink" title="ROS 参数"></a>ROS 参数</h1><p><a href="http://wiki.ros.org/rosparam" target="_blank" rel="external">rosparam</a> 使得我们能够存储并操作 ROS 参数服务器 <a href="http://wiki.ros.org/Parameter%20Server" target="_blank" rel="external">Parameter Server</a> 上的数据。参数服务器能够存储整型、浮点、布尔、字符串、字典和列表等数据类型。<a href="http://wiki.ros.org/rosparam" target="_blank" rel="external">rosparam</a> 使用 <a href="https://zh.wikipedia.org/wiki/YAML" target="_blank" rel="external">YAML</a> 标记语言的语法。一般而言，<a href="https://zh.wikipedia.org/wiki/YAML" target="_blank" rel="external">YAML</a> 的表述很自然：1 是整型, 1.0 是浮点型, one 是字符串, true 是布尔, [1, 2, 3]是整型列表, {a: b, c: d}是字典。 <a href="http://wiki.ros.org/rosparam" target="_blank" rel="external">rosparam</a> 有很多指令可以用来操作参数:<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rosparam <span class="keyword">set</span>            设置参数</div><div class="line">rosparam <span class="comment">get</span>            获取参数</div><div class="line">rosparam <span class="comment">load</span>           从文件读取参数</div><div class="line">rosparam <span class="comment">dump</span>           向文件中写入参数</div><div class="line">rosparam <span class="comment">delete</span>         删除参数</div><div class="line">rosparam <span class="comment">list</span>           列出参数名</div></pre></td></tr></table></figure></p>
<p>rosparam list 命令可列出某个节点在参数服务器上的各种参数：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosparam list</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">/background_b</span> <span class="string">//</span>背景颜色 </div><div class="line"><span class="string">/background_g</span> <span class="string">//</span>背景颜色</div><div class="line"><span class="string">/background_r</span> <span class="string">//</span>背景颜色</div><div class="line"><span class="string">/rosdistro</span></div><div class="line"><span class="string">/roslaunch/uris/host_ubuntu__39737</span></div><div class="line"><span class="string">/rosversion</span></div><div class="line"><span class="string">/run_id</span></div></pre></td></tr></table></figure></p>
<p>设置背景颜色通过命令 rosparam set 获取背景颜色使用命令 rosparam get<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rosparam set <span class="string">[param_name]</span></div><div class="line">rosparam get <span class="string">[param_name]</span></div></pre></td></tr></table></figure></p>
<p>我们修改一下红色值：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> rosparam <span class="keyword">set</span> background_r <span class="comment">200</span></div></pre></td></tr></table></figure></p>
<p>调用清除命令参数才能生效：<br>   <figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosservice <span class="keyword">call</span> <span class="keyword">clear</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/31/ros-primary-tutorial-7/rosparam.jpg" alt=""><br>获取参数值：<br>   <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosparam <span class="keyword">get</span> /  <span class="comment">//显示服务器上所有参数内容</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">background_b</span>: <span class="number">255</span></div><div class="line"><span class="attribute">background_g</span>: <span class="number">10</span></div><div class="line"><span class="attribute">background_r</span>: <span class="number">200</span></div><div class="line"><span class="attribute">rosdistro</span>: 'indigo</div><div class="line"></div><div class="line"> '</div><div class="line"><span class="attribute">roslaunch</span>:</div><div class="line"> <span class="attribute">uris</span>: &#123;<span class="attribute">host_ubuntu__39737</span>: <span class="string">'http://ubuntu:39737/'</span>&#125;</div><div class="line"><span class="attribute">rosversion</span>: '<span class="number">1.11</span>.<span class="number">20</span></div><div class="line"></div><div class="line"> '</div><div class="line"><span class="attribute">run_id</span>: <span class="number">0</span>efaaffc-<span class="number">4599</span>-<span class="number">11</span>e7-a400-<span class="number">000</span>c2915ac77</div></pre></td></tr></table></figure></p>
<p>获取某个参数值，比如获取红色通道的值：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosparam get background_r</span></div></pre></td></tr></table></figure></p>
<p>可以使用 rosparam dump 命令将所有参数进行存储，使用 rosparam load 命令读取所有参数：<br>使用方法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rosparam dump <span class="string">[file_name]</span></div><div class="line">rosparam load <span class="string">[file_name]</span> <span class="string">[namespace]</span></div></pre></td></tr></table></figure></p>
<p>将所有参数写入文件 myparams.yaml 中：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosparam dump myparams.yaml</span></div></pre></td></tr></table></figure></p>
<p>载入参数：<br>   <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rosparam load params.yaml <span class="keyword">copy</span><span class="bash">  //将参数载入 copy 空间</span></div><div class="line">$ rosparam get <span class="keyword">copy</span><span class="bash">/background_r</span></div></pre></td></tr></table></figure></p>
<p>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingServicesParams" target="_blank" rel="external">UnderstandingServicesParams</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习 ROS 的服务和参数。&lt;/p&gt;
&lt;h1 id=&quot;ROS-服务&quot;&gt;&lt;a href=&quot;#ROS-服务&quot; class=&quot;headerlink&quot; title=&quot;ROS 服务&quot;&gt;&lt;/a&gt;ROS 服务&lt;/h1&gt;&lt;p&gt;Services 是 ROS 节点之间通信的另一种方式，服务允许节点发送请求(request)，并获得响应(response)。&lt;a href=&quot;http://wiki.ros.org/rosservice&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rosservice&lt;/a&gt; 命令可以使用 ROS 客户端/服务器框架提供的服务，&lt;a href=&quot;http://wiki.ros.org/rosservice&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rosservice&lt;/a&gt; 提供了很多可以在 topic 上使用的命令：&lt;br&gt;   &lt;figure class=&quot;highlight sqf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;rosservice &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;         输出可用服务的信息&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rosservice &lt;span class=&quot;built_in&quot;&gt;call&lt;/span&gt;         调用带参数的服务&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rosservice &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;         输出服务类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rosservice &lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt;         依据类型寻找服务&lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt; services by service &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rosservice uri          输出服务的ROSRPC uri&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;测试上述命令之前先运行 turtlesim 节点:&lt;br&gt;   &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; roscore &amp;amp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; rosrun turtlesim turtlesim_node&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;并用键盘进行控制，显示出运动轨迹。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS Services" scheme="http://stevenshi.me/tags/ROS-Services/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级&lt;六&gt; 理解ROS话题</title>
    <link href="http://stevenshi.me/2017/05/27/ros-primary-tutorial-6/"/>
    <id>http://stevenshi.me/2017/05/27/ros-primary-tutorial-6/</id>
    <published>2017-05-27T05:13:54.000Z</published>
    <updated>2017-06-08T02:00:26.939Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习 ROS 中的话题 <a href="http://wiki.ros.org/rostopic" target="_blank" rel="external">Topics</a> 以及 <a href="http://wiki.ros.org/rostopic" target="_blank" rel="external">Topics</a> 的使用。源码位于 <a href="https://github.com/ros/ros_comm" target="_blank" rel="external">ROS-communications</a>。开始之前我们先运行 turtlesim 节点，并用键盘来控制它的移动。开一个 terminal 运行：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>
<p>开启另外一个 terminal 运行键盘控制节点：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rosrun</span> turtlesim turtle_teleop_key</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>现在随便移动键盘的方向键，看看 图画里的 turtle 是否在跟随你的指令移动:</p>
<p><img src="/2017/05/27/ros-primary-tutorial-6/turtlesim.jpg" alt=""><br>在此期间键盘是如何控制它移动的，期间到底发生了什么，下面我们来进一步分析。</p>
<h1 id="理解话题"><a href="#理解话题" class="headerlink" title="理解话题"></a>理解话题</h1><p>为了更形象的理解话题，我们使用工具 <a href="http://wiki.ros.org/rqt_graph" target="_blank" rel="external">rqt_graph</a>，如果没有安装则通过以下命令安装：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt //如果使用的其他发行版替换indigo即可</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt-common-plugins</span></div></pre></td></tr></table></figure></p>
<p>保持前面的 turtlesim 节点在运行状态，新开一个 terminal 运行 <a href="http://wiki.ros.org/rqt_graph" target="_blank" rel="external">rqt_graph</a>:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rqt_graph rqt_graph</span></div></pre></td></tr></table></figure></p>
<p>我们会看到下图：<br><img src="/2017/05/27/ros-primary-tutorial-6/rqtgraph.jpg" alt=""><br>将鼠标放置于/turtle1/cmd_vel 上，相应的ROS节点和话题就会高亮显示，turtlesim 和 teleop_turtle 两个节点通过话题 /turtle1/cmd_vel 进行通信。我们可以使用 rostopic 工具查看话题的相关信息。<br>用法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rostopic echo <span class="string">[topic]</span></div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rostopic <span class="built_in">echo</span> /turtle1/cmd_vel</span></div></pre></td></tr></table></figure></p>
<p>这个时候按键盘的向下方向键会看到如下信息：<br>   <figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">linear:</span></div><div class="line"><span class="symbol">  x:</span> <span class="number">-2.0</span></div><div class="line"><span class="symbol">  y:</span> <span class="number">0.0</span></div><div class="line"><span class="symbol">  z:</span> <span class="number">0.0</span></div><div class="line"><span class="symbol">angular:</span></div><div class="line"><span class="symbol">  x:</span> <span class="number">0.0</span></div><div class="line"><span class="symbol">  y:</span> <span class="number">0.0</span></div><div class="line"><span class="symbol">  z:</span> <span class="number">0.0</span></div></pre></td></tr></table></figure></p>
<p>此时刷新一下 rqt_graph 就会看到又多了一个订阅话题 /turtle1/cmd_vel 的节点，红色部分就是。</p>
<p><img src="/2017/05/27/ros-primary-tutorial-6/topic.jpg" alt=""></p>
<h1 id="查看话题"><a href="#查看话题" class="headerlink" title="查看话题"></a>查看话题</h1><p>rostopic list 能够列出所有当前订阅和发布的话题，保持前面的各个节点处于运行状态：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rostopic list -v</span></div></pre></td></tr></table></figure></p>
<p>此时会输出：<br>   <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Published <span class="string">topics:</span></div><div class="line"> * <span class="regexp">/turtle1/</span>color_sensor [turtlesim/Color] <span class="number">1</span> publisher</div><div class="line"> * <span class="regexp">/turtle1/</span>cmd_vel [geometry_msgs/Twist] <span class="number">1</span> publisher</div><div class="line"> * <span class="regexp">/rosout [rosgraph_msgs/</span>Log] <span class="number">4</span> publishers</div><div class="line"> * <span class="regexp">/rosout_agg [rosgraph_msgs/</span>Log] <span class="number">1</span> publisher</div><div class="line"> * <span class="regexp">/turtle1/</span>pose [turtlesim/Pose] <span class="number">1</span> publisher</div><div class="line"></div><div class="line">Subscribed <span class="string">topics:</span></div><div class="line"> * <span class="regexp">/turtle1/</span>cmd_vel [geometry_msgs/Twist] <span class="number">2</span> subscribers</div><div class="line"> * <span class="regexp">/rosout [rosgraph_msgs/</span>Log] <span class="number">1</span> subscriber</div><div class="line"> * <span class="regexp">/statistics [rosgraph_msgs/</span>TopicStatistics] <span class="number">1</span> subscriber</div></pre></td></tr></table></figure></p>
<p>上面列出了所有的订阅和发布的话题及其类型。关于 rostopic list 的其他使用方法可通过帮助命令查看：<br>   <figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rostopic</span> <span class="keyword">list</span> -<span class="built_in">h</span></div></pre></td></tr></table></figure></p>
<h1 id="理解消息"><a href="#理解消息" class="headerlink" title="理解消息"></a>理解消息</h1><p>话题之间的通信是通过在节点之间发送消息 <a href="http://wiki.ros.org/Messages" target="_blank" rel="external">Ros Messages</a> 实现的。发布器 teleop_turtle 和订阅器 turtlesim 之间必须发送和接收相同类型的消息才能通信。也就是说话题的类型是由发布在它上面的消息类型决定的。使用 rostopic type 命令可以查看发布在某个话题上的消息类型：<br>用法：<br>   <figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">rostopic</span> <span class="keyword">type</span> [topic]</div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rostopic <span class="class"><span class="keyword">type</span> <span class="title">turtle1</span></span>/cmd_vel <span class="comment">//查看话题 turtle1/cmd_vel 上的消息类型</span></div></pre></td></tr></table></figure></p>
<p>一般会输出：<br>   <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">geometry_msgs/Twist</div></pre></td></tr></table></figure></p>
<p>可以使用 <a href="http://wiki.ros.org/rosmsg" target="_blank" rel="external">rosmsg</a> 命令查看消息的详细类型：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosmsg show geometry_msgs/Twist</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">geometry_msgs/Vector3 linear</div><div class="line">  <span class="built_in">float</span>64 x</div><div class="line">  <span class="built_in">float</span>64 y</div><div class="line">  <span class="built_in">float</span>64 z</div><div class="line">geometry_msgs/Vector3 angular</div><div class="line">  <span class="built_in">float</span>64 x</div><div class="line">  <span class="built_in">float</span>64 y</div><div class="line">  <span class="built_in">float</span>64 z</div></pre></td></tr></table></figure></p>
<p>上面可以看到消息  geometry_msgs/Twist 的类型 一个是 x y z 三轴的线速度，另外一个是 x y z 三轴的角速度。</p>
<h1 id="使用话题"><a href="#使用话题" class="headerlink" title="使用话题"></a>使用话题</h1><p>rostopic pub 可以把消息发布到某个正在广播的话题上。<br>用法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rostopic pub <span class="string">[topic]</span> <span class="string">[msg_type]</span> <span class="string">[args]</span></div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rostopic pub <span class="number">-1</span> /turtle1/cmd_vel geometry_msgs/Twist -- '[<span class="number">2.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]' '[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.8</span>]'</div></pre></td></tr></table></figure></p>
<p>该命令会发送一条消息到话题 /turtle1/cmd_vel 上，并使得 turtlesim 以2.0大小的线速度和1.8大小的角速度开始移动。 -1 的意思是发布一条消息后马上退出，geometry_msgs/Twist 为消息类型，后面是 x y z 的数值，前面一组代表线速度，后面一组代表角速度。geometry_msgs/Twist 消息里包含两组浮点类型元素 linear 和 angular 。参数格式遵循 <a href="http://wiki.ros.org/ROS/YAMLCommandLine" target="_blank" rel="external">YAML</a> 语法。<br>上面的命令并没有让 turtle 保持一直运动，因为我们的命令只发布了一次就退出了，而要使其一直运动需要控制命令的发布频率：<br>   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r <span class="number">1</span> -- '[<span class="number">2.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]' '[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.8</span>]'</div></pre></td></tr></table></figure></p>
<p>这条命令以 1hz 的频率发布消息到话题 /turtle1/cmd_vel 上，参数 -r 表示频率,后面的 1 为 1hz,此时会看到 turtle 沿着圆形轨迹不停的转动。<br>使用 rostopic hz 命令可以查看消息发布的频率<br>用法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rostopic hz <span class="string">[topic]</span></div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rostopic hz /turtle1/cmd_vel</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">subscribed <span class="keyword">to</span> [/turtle1/cmd_vel]</div><div class="line">average rate: <span class="number">1.000</span></div><div class="line">        <span class="built_in">min</span>: <span class="number">1.000</span>s <span class="built_in">max</span>: <span class="number">1.000</span>s std de<span class="variable">v:</span> <span class="number">0.00000</span>s <span class="keyword">windo</span><span class="variable">w:</span> <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>可见消息发布的频率正如我们前面的设置1 hz。我们也可以查看话题 /turtle1/pose 的发布频率：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rostopic hz /turtle1/pose</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">subscribed <span class="keyword">to</span> [/turtle1/pose]</div><div class="line">average rate: <span class="number">62.534</span></div><div class="line">        <span class="built_in">min</span>: <span class="number">0.015</span>s <span class="built_in">max</span>: <span class="number">0.017</span>s std de<span class="variable">v:</span> <span class="number">0.00052</span>s <span class="keyword">windo</span><span class="variable">w:</span> <span class="number">61</span></div></pre></td></tr></table></figure></p>
<p>可见 turtlesim 正以大约62hz 的频率发布数据给 turtle ，这个应该是位置数据。我们也可以结合 rostopic type 和 rosmsg show 命令来获取关于某个话题的更深层次的信息。<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">rostopic <span class="built_in">type</span> /turtle1/cmd_vel | rosmsg show</span></div></pre></td></tr></table></figure></p>
<h1 id="使用rqt-plot"><a href="#使用rqt-plot" class="headerlink" title="使用rqt_plot"></a>使用rqt_plot</h1><p><a href="http://wiki.ros.org/rqt_plot" target="_blank" rel="external">rqt_plot</a> 是 <a href="https://www.qt.io/" target="_blank" rel="external">Qt</a> 开发的图形用户界面，可以将某个话题上的数据以图形的方式实时的绘制出来，如果没有安装首先通过以下命令安装，参考<a href="http://wiki.ros.org/rqt_plot" target="_blank" rel="external">rqt_plot</a>:</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt-common-plugins</span></div></pre></td></tr></table></figure>
<p>使用：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rqt_plot rqt_plot</span></div></pre></td></tr></table></figure></p>
<p>窗口左上角可以添加需要的话题，右边的减号可以删除不需要的话题。点击那个绿色的对号按钮可以调节时间和坐标等信息：<br><img src="/2017/05/27/ros-primary-tutorial-6/rqtplot.jpg" alt=""></p>
<p>更多 rqt_plot 的使用请参阅官方文档 <a href="http://wiki.ros.org/rqt_plot" target="_blank" rel="external">rqt_plot</a> 或 <a href="http://rosindex.github.io/p/rqt_plot/#indigo" target="_blank" rel="external">rosindex-rqt_plot</a> </p>
<p>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingTopics" target="_blank" rel="external">UnderstandingTopics</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习 ROS 中的话题 &lt;a href=&quot;http://wiki.ros.org/rostopic&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Topics&lt;/a&gt; 以及 &lt;a href=&quot;http://wiki.ros.org/rostopic&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Topics&lt;/a&gt; 的使用。源码位于 &lt;a href=&quot;https://github.com/ros/ros_comm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS-communications&lt;/a&gt;。开始之前我们先运行 turtlesim 节点，并用键盘来控制它的移动。开一个 terminal 运行：&lt;br&gt;   &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; roscore &amp;amp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; rosrun turtlesim turtlesim_node&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;开启另外一个 terminal 运行键盘控制节点：&lt;br&gt;   &lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;span class=&quot;meta-keyword&quot;&gt;$rosrun&lt;/span&gt; turtlesim turtle_teleop_key&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS Topics" scheme="http://stevenshi.me/tags/ROS-Topics/"/>
    
  </entry>
  
  <entry>
    <title>ROS 初级&lt;五&gt; 理解ROS节点</title>
    <link href="http://stevenshi.me/2017/05/27/ros-primary-tutorial-5/"/>
    <id>http://stevenshi.me/2017/05/27/ros-primary-tutorial-5/</id>
    <published>2017-05-27T01:34:16.000Z</published>
    <updated>2017-06-08T02:00:43.427Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习 ROS 节点相关知识。节点是 ROS 程序包中的一个可执行文件，它可以与其他节点进行通信，节点可以发布或订阅话题，也可以提供或使用某种服务 。<br><a id="more"></a></p>
<h1 id="相关介绍"><a href="#相关介绍" class="headerlink" title="相关介绍"></a>相关介绍</h1><p><a href="http://wiki.ros.org/Nodes" target="_blank" rel="external">Nodes</a>: 表示 ROS 中的节点，它表现形式为一个可执行文件，它可以通过 ROS 与其它节点进行通信。<br><a href="http://wiki.ros.org/Messages" target="_blank" rel="external">Messages</a>: 表示消息，它是一种 ROS 数据类型，用于订阅或发布到一个话题。<br><a href="http://wiki.ros.org/Topics" target="_blank" rel="external">Topics</a>: 表示话题，节点可以发布消息到话题，也可以订阅话题以接收消息。<br><a href="http://wiki.ros.org/Master" target="_blank" rel="external">Master</a>: 表示节点管理器，它提供 ROS 名称服务，帮助 ROS 节点找到彼此。<br><a href="http://wiki.ros.org/rosout" target="_blank" rel="external">rosout</a>: 类似标准输出 stdout。<br><a href="http://wiki.ros.org/roscore" target="_blank" rel="external">roscore</a>: 相当于 ROS 中的服务器，运行所有节点前必须先运行 roscore。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>先运行 roscore:<br>   <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>roscore &amp; <span class="regexp">//</span>后台运行</div></pre></td></tr></table></figure></p>
<p>可以使用 rosnode 查看节点信息：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosnode <span class="built_in">list</span> <span class="comment">//列出活跃的节点</span></div></pre></td></tr></table></figure></p>
<p>此时输出一般为：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">/rosout</span></div></pre></td></tr></table></figure></p>
<p>表示当前只有一个 rosout 节点在运行，这个节点用于收集和记录调试输出信息，它必须先于其它节点运行，并且总是一直在运行。<br>返回特定节点的信息：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosnode info /rosout</span></div></pre></td></tr></table></figure></p>
<p>此时输出一般为：<br>   <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Node</span> <span class="title">[/rosout</span>]</div><div class="line">Publications:</div><div class="line"> * /rosout_agg [rosgraph_msgs/Log]</div><div class="line"></div><div class="line">Subscriptions:</div><div class="line"> * /rosout [unknown <span class="keyword">type</span>]</div><div class="line"></div><div class="line">Services:</div><div class="line"> * /rosout/set_logger_level</div><div class="line"> * /rosout/get_loggers</div><div class="line"></div><div class="line"></div><div class="line">contacting <span class="keyword">node</span> http:<span class="title">//ubuntu</span>:<span class="number">56062</span>/ ...</div><div class="line">Pid: <span class="number">2811</span></div></pre></td></tr></table></figure></p>
<p>可以看出，rosout 既发布主题也订阅主题并且提供 log 日志服务。</p>
<h1 id="运行节点"><a href="#运行节点" class="headerlink" title="运行节点"></a>运行节点</h1><p><a href="http://wiki.ros.org/rosrun" target="_blank" rel="external">rosrun</a> 用于运行某个 ROS 程序包内的节点，而不需要知道这个包的路径，当然前提是这个包已经加入到 ROS 的环境变量中，即 ROS 可以找到它。<br>用法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosrun <span class="string">[package_name]</span> <span class="string">[node_name]</span></div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>
<p>运行程序包 turtlesim 中的 turtlesim_node 节点。要使用 <a href="http://wiki.ros.org/turtlesim" target="_blank" rel="external">turtlesim</a> 需要事先安装这个包：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-ros-tutorials</span></div></pre></td></tr></table></figure></p>
<p>或者通过源码下载后自行编译 参考<a href="https://github.com/ros/ros_tutorials" target="_blank" rel="external">ros_tutorials</a> 。运行效果<img src="/2017/05/27/ros-primary-tutorial-5/turtlesim.jpg" alt=""><br>如果此时打开另一个 terminal 并使用前面的命令查看节点信息：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosnode list</span></div></pre></td></tr></table></figure></p>
<p>此时的输出一般为：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">/rosout</span></div><div class="line"><span class="string">/turtlesim</span></div></pre></td></tr></table></figure></p>
<p>也可以查看 /turtlesim 节点的具体信息：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosnode info /turtlesim</span></div></pre></td></tr></table></figure></p>
<p>输出一般为：<br>   <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Node [/turtlesim]</div><div class="line"><span class="string">Publications:</span></div><div class="line"> * <span class="regexp">/turtle1/</span>color_sensor [turtlesim/Color]</div><div class="line"> * <span class="regexp">/rosout [rosgraph_msgs/</span>Log]</div><div class="line"> * <span class="regexp">/turtle1/</span>pose [turtlesim/Pose]</div><div class="line"><span class="symbol"></span></div><div class="line">Subscriptions:</div><div class="line"> * <span class="regexp">/turtle1/</span>cmd_vel [unknown type]</div><div class="line"><span class="symbol"></span></div><div class="line">Services:</div><div class="line"> * <span class="regexp">/turtle1/</span>teleport_absolute</div><div class="line"> * <span class="regexp">/turtlesim/</span>get_loggers</div><div class="line"> * <span class="regexp">/turtlesim/</span>set_logger_level</div><div class="line"> * /reset</div><div class="line"> * /spawn</div><div class="line"> * /clear</div><div class="line"> * <span class="regexp">/turtle1/</span>set_pen</div><div class="line"> * <span class="regexp">/turtle1/</span>teleport_relative</div><div class="line"> * /kill</div><div class="line"></div><div class="line"></div><div class="line">contacting node <span class="string">http:</span><span class="comment">//ubuntu:53732/ ...</span></div><div class="line"><span class="string">Pid:</span> <span class="number">3904</span></div><div class="line"><span class="string">Connections:</span></div><div class="line"> * <span class="string">topic:</span> /rosout</div><div class="line">    * <span class="string">to:</span> /rosout</div><div class="line">    * <span class="string">direction:</span> outbound</div><div class="line">    * <span class="string">transport:</span> TCPROS</div></pre></td></tr></table></figure></p>
<p>我们也可以通过命令行修改节点名字，使用 ROS 的 <a href="http://wiki.ros.org/Remapping%20Arguments" target="_blank" rel="external">RemappingArguments</a> 改变节点名称：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtlesim_node __name:=my_turtle</span></div></pre></td></tr></table></figure></p>
<p>改变节点名称前，先 kill 掉之前运行的节点 turtlesim_node。此时再输入命令查看节点信息，名字已经改变了：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">/my_turtle</span></div><div class="line"><span class="string">/rosout</span></div></pre></td></tr></table></figure></p>
<p>我们可以使用 ping 命令查看节点通讯是否可达：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosnode ping my_turtle</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rosnode: node is [/my_turtle]</div><div class="line">pinging /my_turtle <span class="keyword">with</span> <span class="keyword">a</span> timeout <span class="keyword">of</span> <span class="number">3.0</span>s</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">1.326084</span>ms</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">0.391006</span>ms</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">0.315189</span>ms</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">0.321150</span>ms</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">0.367880</span>ms</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">0.342846</span>ms</div></pre></td></tr></table></figure></p>
<p>至此，关于 ROS 节点的学习告一段落。<br>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingNodes" target="_blank" rel="external">Understanding-Nodes</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习 ROS 节点相关知识。节点是 ROS 程序包中的一个可执行文件，它可以与其他节点进行通信，节点可以发布或订阅话题，也可以提供或使用某种服务 。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS Node" scheme="http://stevenshi.me/tags/ROS-Node/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级&lt;四&gt; 编译ROS程序包</title>
    <link href="http://stevenshi.me/2017/05/26/ros-primary-tutorial-4/"/>
    <id>http://stevenshi.me/2017/05/26/ros-primary-tutorial-4/</id>
    <published>2017-05-26T07:10:04.000Z</published>
    <updated>2017-05-27T05:16:45.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>ROS 程序包的编译使用命令 <a href="http://wiki.ros.org/catkin/commands/catkin_make" target="_blank" rel="external">catkin_make</a>。在 catkin 工作空间的根目录下 <em>~/catkin_ws</em> 执行该命令即可编译 catkin 程序包：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>该命令会在 <em>~/catkin_ws</em> 目录下生成 <em>build </em> 和 <em>devel</em> 文件夹，<em>build </em>是 <em>cmake</em> 和 <em>make</em> 命令执行的地方，<em>devel</em> 文件夹内部用于保存编译生成文件，目标文件以及配置文件 setup.*sh等。该命令等价于：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> src</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_init_workspace</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ..</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir build</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> build</span></div><div class="line"><span class="meta">$</span><span class="bash"> cmake ../src -DCMAKE_INSTALL_PREFIX=../install -DCATKIN_DEVEL_PREFIX=../devel</span></div><div class="line"><span class="meta">$</span><span class="bash"> make</span></div></pre></td></tr></table></figure></p>
<p>如果只想编译指定的某个包或几个包可以使用以下命令：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class="string">"package1;package2"</span></span></div></pre></td></tr></table></figure></p>
<p>比如我只想编译 mypackage 和 beginner_tutorial这两个包，那么命令可写成：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class="string">"mypackage,beginner_tutorial"</span></span></div></pre></td></tr></table></figure></p>
<p>注意命令中的 = 前后不能有空格。<br>输出：<br>  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Base <span class="string">path:</span> <span class="regexp">/home/</span>steven/catkin_ws</div><div class="line">Source <span class="string">space:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>src</div><div class="line">Build <span class="string">space:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>build</div><div class="line">Devel <span class="string">space:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>devel</div><div class="line">Install <span class="string">space:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>install</div><div class="line"></div><div class="line"> Running <span class="string">command:</span> <span class="string">"cmake /home/steven/catkin_ws/src -DCATKIN_WHITELIST_PACKAGES=mypackage,beginner_tutorial -DCATKIN_DEVEL_PREFIX=/home/steven/catkin_ws/devel -DCMAKE_INSTALL_PREFIX=/home/steven/catkin_ws/install -G Unix Makefiles"</span> <span class="keyword">in</span> <span class="string">"/home/steven/catkin_ws/build"</span></div><div class="line"></div><div class="line">-- Using <span class="string">CATKIN_DEVEL_PREFIX:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>devel</div><div class="line">-- Using <span class="string">CMAKE_PREFIX_PATH:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>devel;<span class="regexp">/opt/</span>ros/indigo</div><div class="line">-- This workspace <span class="string">overlays:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>devel;<span class="regexp">/opt/</span>ros/indigo</div><div class="line">-- Using <span class="string">PYTHON_EXECUTABLE:</span> <span class="regexp">/usr/</span>bin/python</div><div class="line">-- Using Debian Python <span class="keyword">package</span> layout</div><div class="line">-- Using <span class="string">empy:</span> <span class="regexp">/usr/</span>bin/empy</div><div class="line">-- Using <span class="string">CATKIN_ENABLE_TESTING:</span> ON</div><div class="line">-- Call enable_testing()</div><div class="line">-- Using <span class="string">CATKIN_TEST_RESULTS_DIR:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>build/test_results</div><div class="line">-- Found <span class="string">gtest:</span> gtests will be built</div><div class="line">-- Using Python <span class="string">nosetests:</span> <span class="regexp">/usr/</span>bin/nosetests<span class="number">-2.7</span></div><div class="line">-- catkin <span class="number">0.6</span><span class="number">.18</span></div><div class="line">-- BUILD_SHARED_LIBS is on</div><div class="line">-- Using <span class="string">CATKIN_WHITELIST_PACKAGES:</span> mypackage,beginner_tutorial</div><div class="line">-- Configuring done</div><div class="line">-- Generating done</div><div class="line">-- Build files have been written <span class="string">to:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>build</div><div class="line"></div><div class="line"> Running <span class="string">command:</span> <span class="string">"make -j1 -l1"</span> <span class="keyword">in</span> <span class="string">"/home/steven/catkin_ws/build"</span></div></pre></td></tr></table></figure></p>
<p>如果想恢复编译所有包使用命令：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class="string">""</span></span></div></pre></td></tr></table></figure></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>编译完成后生成的文件位于 <em>devel</em> 目录下，可以使用以下命令进行安装：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make install</span></div></pre></td></tr></table></figure></p>
<p>以上命令等价于：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/build</span></div><div class="line">//If cmake hasn't already been called</div><div class="line"><span class="meta">$</span><span class="bash"> cmake ../src -DCMAKE_INSTALL_PREFIX=../install -DCATKIN_DEVEL_PREFIX=../devel</span></div><div class="line"><span class="meta">$</span><span class="bash"> make</span></div><div class="line"><span class="meta">$</span><span class="bash"> make install</span></div></pre></td></tr></table></figure></p>
<p>执行完以上命令后会在 <em>~/catkin_ws</em> 目录下生成 <em>install</em> 文件夹，所有编译完成的包都安装到了 <em>install</em> 下。里面包含 <em>setup.bash</em> 配置文件，可以使用 <em>source</em> 让系统可以找到这些编译完后的可执行包。<br>可以通过以下命令改变安装位置：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make -DCMAKE_INSTALL_PREFIX=/opt/ros/indigo install</span></div></pre></td></tr></table></figure></p>
<p>位置 <em>/opt/ros/indigo</em> 为系统目录，一般不建议将自己的包安装于此。安装完后记得 <em>source</em> 一下才能使用：<br>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$source</span> <span class="regexp">/opt/</span>ros<span class="regexp">/indigo/</span>setup.bash</div></pre></td></tr></table></figure></p>
<p>或者：<br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span></div></pre></td></tr></table></figure></p>
<p>可以将这句话添加到自己的 <em>~/.bashrc</em> 中：<br>  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">source</span> ~<span class="regexp">/catkin_ws/</span>devel<span class="regexp">/setup.bash</span></div></pre></td></tr></table></figure></p>
<p>参考 <a href="http://wiki.ros.org/catkin/commands/catkin_make" target="_blank" rel="external">catkin_make</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;编译&quot;&gt;&lt;a href=&quot;#编译&quot; class=&quot;headerlink&quot; title=&quot;编译&quot;&gt;&lt;/a&gt;编译&lt;/h1&gt;&lt;p&gt;ROS 程序包的编译使用命令 &lt;a href=&quot;http://wiki.ros.org/catkin/commands/catkin_make&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;catkin_make&lt;/a&gt;。在 catkin 工作空间的根目录下 &lt;em&gt;~/catkin_ws&lt;/em&gt; 执行该命令即可编译 catkin 程序包：&lt;br&gt;   &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/catkin_ws&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;catkin_make&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="Catkin_make" scheme="http://stevenshi.me/tags/Catkin-make/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级&lt;三&gt; 创建ROS程序包</title>
    <link href="http://stevenshi.me/2017/05/26/ros-primary-tutorial-3/"/>
    <id>http://stevenshi.me/2017/05/26/ros-primary-tutorial-3/</id>
    <published>2017-05-26T03:23:13.000Z</published>
    <updated>2017-05-27T05:16:19.554Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习 ROS 程序包的创建，使用工具 <a href="http://wiki.ros.org/catkin/commands/catkin_create_pkg" target="_blank" rel="external">catkin_create_pkg</a> 创建新程序包。</p>
<h1 id="ROS程序包的组成"><a href="#ROS程序包的组成" class="headerlink" title="ROS程序包的组成"></a>ROS程序包的组成</h1><p> ROS 程序包必须包含 <a href="http://wiki.ros.org/catkin/package.xml" target="_blank" rel="external">package.xml</a> 文件和 <a href="http://wiki.ros.org/catkin/CMakeLists.txt" target="_blank" rel="external">CMakeLists.txt</a> 文件。<em>package.xml</em> 提供有关程序包的元信息，每个目录下只能有一个程序包：<br>   <figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">beginner_tutorials/ </span>    </div><div class="line"> <span class="meta">include</span>/                   </div><div class="line"> msg/                       </div><div class="line"> src/                        </div><div class="line"> srv/                       </div><div class="line"> CMakeLists.txt              </div><div class="line"> package.xml</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="catkin工作空间"><a href="#catkin工作空间" class="headerlink" title="catkin工作空间"></a>catkin工作空间</h1><p>一个简单的 <a href="http://wiki.ros.org/catkin/workspaces" target="_blank" rel="external">catkin workspace</a> 结构如下：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">workspace_folder/        -- WORKSPACE</div><div class="line">  src/                   -- SOURCE SPACE</div><div class="line">    CMakeLists<span class="selector-class">.txt</span>       -- <span class="string">'Toplevel'</span> CMake file, provided by catkin</div><div class="line">    package_1/</div><div class="line">      CMakeLists<span class="selector-class">.txt</span>     -- CMakeLists<span class="selector-class">.txt</span> file <span class="keyword">for</span> package_1</div><div class="line">      package<span class="selector-class">.xml</span>        -- Package manifest <span class="keyword">for</span> package_1</div><div class="line">    ...</div><div class="line">    package_n/</div><div class="line">      CMakeLists<span class="selector-class">.txt</span>     -- CMakeLists<span class="selector-class">.txt</span> file <span class="keyword">for</span> package_n</div><div class="line">      package<span class="selector-class">.xml</span>        -- Package manifest <span class="keyword">for</span> package_n</div></pre></td></tr></table></figure></p>
<h1 id="创建catkin程序包"><a href="#创建catkin程序包" class="headerlink" title="创建catkin程序包"></a>创建catkin程序包</h1><p>使用 <a href="http://wiki.ros.org/catkin/commands/catkin_create_pkg" target="_blank" rel="external">catkin_create_pkg</a> 创建自己的 catkin 程序包，格式：<br>   <figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$catkin_create_pkg</span> &lt;package_name&gt; <span class="selector-attr">[depend1]</span> <span class="selector-attr">[depend2]</span> <span class="selector-attr">[depend3]</span></div></pre></td></tr></table></figure></p>
<p>实例：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/src </span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_create_pkg beginner_tutorials std_msgs rospy roscpp</span></div></pre></td></tr></table></figure></p>
<p>上面命令创建了一个名为 <em>beginner_tutorials</em> 的 catkin 程序包，这个程序包依赖于 std_msgs、roscpp 和 rospy。执行这个命令后在 <em>~/catkin_ws/src</em> 目录下将会创建一个名为 <em>beginner_tutorials</em> 的文件夹，这个文件夹里面包含一个 <em>package.xml</em> 文件和一个 <em>CMakeLists.txt</em> 文件，这两个文件都已经自动包含了部分在执行 <a href="http://wiki.ros.org/catkin/commands/catkin_create_pkg" target="_blank" rel="external">catkin_create_pkg</a> 命令时提供的信息。 </p>
<h1 id="程序包依赖关系"><a href="#程序包依赖关系" class="headerlink" title="程序包依赖关系"></a>程序包依赖关系</h1><p>可以使用 <em>rospack</em> 命令来查看某个程序包的依赖包：<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rospack</span> depends1 beginner_tutorials <span class="regexp">//</span>查看一级依赖</div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">roscpp</span></div><div class="line">rospy</div><div class="line">std_msgs</div></pre></td></tr></table></figure></p>
<p>列出的依赖包正是我们在用 <a href="http://wiki.ros.org/catkin/commands/catkin_create_pkg" target="_blank" rel="external">catkin_create_pkg</a> 创建 beginner_tutorials 程序包时指定的依赖包。而这些依赖已经自动添加到 <em>package.xml</em> 文件中：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscd</span> beginner_tutorials</span></div><div class="line"><span class="meta"><span class="meta-keyword">$cat</span> package.xml</span></div></pre></td></tr></table></figure></p>
<p>package.xml内容：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span>&gt;</span></div><div class="line">...</div><div class="line"> <span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>列出所有的间接依赖包：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rospack</span> depends beginner_tutorials</span></div><div class="line">cpp_common</div><div class="line">rostime</div><div class="line">roscpp_traits</div><div class="line">roscpp_serialization</div><div class="line">genmsg</div><div class="line">genpy</div><div class="line">message_runtime</div><div class="line">rosconsole</div><div class="line">std_msgs</div><div class="line">rosgraph_msgs</div><div class="line">xmlrpcpp</div><div class="line">roscpp</div><div class="line">rosgraph</div><div class="line">catkin</div><div class="line">rospack</div><div class="line">roslib</div><div class="line">rospy</div></pre></td></tr></table></figure></p>
<h1 id="自定义程序包"><a href="#自定义程序包" class="headerlink" title="自定义程序包"></a>自定义程序包</h1><p>修改 <em>package.xml</em>, 更新必要的信息。<br>描述标签：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>The beginner_tutorials package<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>将描述信息修改为任何喜欢的内容，但是按照约定第一句话应该简短一些，因为它覆盖了程序包的范围。如果用一句话难以描述完全那就需要换行了。<br>维护者标签：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!-- One maintainer tag required, multiple allowed, one person per tag --&gt;</span> </div><div class="line"><span class="comment">&lt;!-- Example:  --&gt;</span></div><div class="line"><span class="comment">&lt;!-- &lt;maintainer email="jane.doe@example.com"&gt;Jane Doe&lt;/maintainer&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">"user@todo.todo"</span>&gt;</span>user<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这是 <em>package.xml</em> 中要求填写的一个重要标签，因为它能够让其他人联系到程序包的相关人员。至少需要填写一个维护者名称，但如果有需要的话你可以添加多个。除了在标签里面填写维护者的名称外，还应该在标签的 <em>email</em> 属性中填写邮箱地址。<br>许可标签：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- One license tag required, multiple allowed, one license per tag --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Commonly used license strings: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">license</span>&gt;</span>TODO<span class="tag">&lt;/<span class="name">license</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>选择一种许可协议并将它填写到这里。一些常见的开源许可协议有BSD、MIT、Boost Software License、GPLv2、GPLv3、LGPLv2.1和LGPLv3。可以在 <a href="https://opensource.org/licenses/alphabetical" target="_blank" rel="external">Open Source Initiative</a> 中获取许可协议的相关信息。我们使用BSD协议，因为ROS核心组件的剩余部分已经使用了该协议。<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">license</span>&gt;</span>BSD<span class="tag">&lt;/<span class="name">license</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>依赖项标签：<br>依赖项标签用来描述程序包的各种依赖项，包括 build_depend、buildtool_depend、run_depend、test_depend。<br>关于这些标签的更详细介绍请参考 <a href="http://wiki.ros.org/catkin/package.xml#Build.2C_Run.2C_and_Test_Dependencies" target="_blank" rel="external">Catkin Dependencies</a> 相关的文档。在之前的操作中，因为我们将 std_msgs、 roscpp、 和 rospy 作为 catkin_create_pkg 命令的参数，所以生成的依赖项看起来如下:<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- The *_depend tags are used to specify dependencies --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Dependencies can be catkin packages or system dependencies --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Examples: --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Use build_depend for packages you need at compile time: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   &lt;build_depend&gt;genmsg&lt;/build_depend&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Use buildtool_depend for build tool packages: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Use run_depend for packages you need at runtime: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   &lt;run_depend&gt;python-yaml&lt;/run_depend&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Use test_depend for packages you need only for testing: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   &lt;test_depend&gt;gtest&lt;/test_depend&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>除了 <em>catkin</em> 中默认提供的 <em>buildtool_depend</em>，所有我们列出的依赖包都已经被添加到 <em>build_depend</em> 标签中。因为在编译和运行时我们需要用到所有指定的依赖包，因此还需要将每一个依赖包分别添加到 <em>run_depend</em> 标签中:<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>完整的 <a href="http://wiki.ros.org/catkin/package.xml" target="_blank" rel="external">package.xml</a> :<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line">   <span class="tag">&lt;<span class="name">package</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>beginner_tutorials<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">description</span>&gt;</span>The beginner_tutorials package<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">   </div><div class="line">     <span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">"you@yourdomain.tld"</span>&gt;</span>Your Name<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">license</span>&gt;</span>BSD<span class="tag">&lt;/<span class="name">license</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">url</span> <span class="attr">type</span>=<span class="string">"website"</span>&gt;</span>http://wiki.ros.org/beginner_tutorials<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">author</span> <span class="attr">email</span>=<span class="string">"you@yourdomain.tld"</span>&gt;</span>Jane Doe<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习 ROS 程序包的创建，使用工具 &lt;a href=&quot;http://wiki.ros.org/catkin/commands/catkin_create_pkg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;catkin_create_pkg&lt;/a&gt; 创建新程序包。&lt;/p&gt;
&lt;h1 id=&quot;ROS程序包的组成&quot;&gt;&lt;a href=&quot;#ROS程序包的组成&quot; class=&quot;headerlink&quot; title=&quot;ROS程序包的组成&quot;&gt;&lt;/a&gt;ROS程序包的组成&lt;/h1&gt;&lt;p&gt; ROS 程序包必须包含 &lt;a href=&quot;http://wiki.ros.org/catkin/package.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;package.xml&lt;/a&gt; 文件和 &lt;a href=&quot;http://wiki.ros.org/catkin/CMakeLists.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CMakeLists.txt&lt;/a&gt; 文件。&lt;em&gt;package.xml&lt;/em&gt; 提供有关程序包的元信息，每个目录下只能有一个程序包：&lt;br&gt;   &lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;beginner_tutorials/ &lt;/span&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;meta&quot;&gt;include&lt;/span&gt;/                   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; msg/                       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; src/                        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; srv/                       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; CMakeLists.txt              &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; package.xml&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="catkin_create_pkg" scheme="http://stevenshi.me/tags/catkin-create-pkg/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级&lt;二&gt; 文件系统介绍</title>
    <link href="http://stevenshi.me/2017/05/26/ros-primary-tutorial-2/"/>
    <id>http://stevenshi.me/2017/05/26/ros-primary-tutorial-2/</id>
    <published>2017-05-26T01:54:15.000Z</published>
    <updated>2017-05-27T05:15:43.714Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习 ROS 的文件系统，包括一些命令行工具 <a href="http://wiki.ros.org/rosbash#roscd" target="_blank" rel="external">roscd</a>、 <a href="http://wiki.ros.org/rosbash#rosls" target="_blank" rel="external">rosls</a>、 <a href="http://wiki.ros.org/rospack" target="_blank" rel="external">rospack</a> 等的使用。</p>
<h1 id="安装-tutorial-程序包："><a href="#安装-tutorial-程序包：" class="headerlink" title="安装 tutorial 程序包："></a>安装 tutorial 程序包：</h1>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install ros-indigo-ros-tutorials</span></div></pre></td></tr></table></figure>
<p>源码位于: <a href="https://github.com/ros/ros_tutorials.git" target="_blank" rel="external">ros_tutorials</a>。<br> 一般一个 ROS 软件包中包括 <em>CMakeLists.txt</em>、  <em>include</em>、   <em>package.xml</em>、  <em>src</em> 等几个文件及文件目录。Packages 软件包是ROS 应用程序代码的组织单元，每个软件包都可以包含程序库、可执行文件、脚本或者其它手动创建的东西。 Manifest (package.xml): 清单，是对于软件包相关信息的描述,用于定义软件包相关元信息之间的依赖关系，这些信息包括版本、维护者和许可协议等。<br><a id="more"></a></p>
<h1 id="文件系统工具"><a href="#文件系统工具" class="headerlink" title="文件系统工具"></a>文件系统工具</h1><h2 id="rospack"><a href="#rospack" class="headerlink" title="rospack"></a><a href="http://wiki.ros.org/rospack" target="_blank" rel="external">rospack</a></h2><p> <a href="http://wiki.ros.org/rospack" target="_blank" rel="external">rospack</a> 命令允许获取 ROS 软件包的信息，可以通过 <em>rospack help</em> 查看它的使用方法：<br>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">$rospack <span class="keyword">help</span></div><div class="line"><span class="keyword">USAGE</span>: rospack &lt;command&gt; [options] [<span class="keyword">package</span>]</div><div class="line"> Allowed commands:</div><div class="line">   <span class="keyword">help</span></div><div class="line">   cflags-<span class="keyword">only</span>-I     [<span class="comment">--deps-only] [package]</span></div><div class="line">   cflags-<span class="keyword">only</span>-other [<span class="comment">--deps-only] [package]</span></div><div class="line">   depends           [<span class="keyword">package</span>] (<span class="keyword">alias</span>: deps)</div><div class="line">   depends-indent    [<span class="keyword">package</span>] (<span class="keyword">alias</span>: deps-indent)</div><div class="line">   depends-manifests [<span class="keyword">package</span>] (<span class="keyword">alias</span>: deps-manifests)</div><div class="line">   depends-msgsrv    [<span class="keyword">package</span>] (<span class="keyword">alias</span>: deps-msgsrv)</div><div class="line">   depends-<span class="keyword">on</span>        [<span class="keyword">package</span>]</div><div class="line">   depends-on1       [<span class="keyword">package</span>]</div><div class="line">   depends-why <span class="comment">--target=&lt;target&gt; [package] (alias: deps-why)</span></div><div class="line">   depends1          [<span class="keyword">package</span>] (<span class="keyword">alias</span>: deps1)</div><div class="line">   <span class="keyword">export</span> [<span class="comment">--deps-only] --lang=&lt;lang&gt; --attrib=&lt;attrib&gt; [package]</span></div><div class="line">   find [<span class="keyword">package</span>]</div><div class="line">   langs</div><div class="line">   libs-<span class="keyword">only</span>-L     [<span class="comment">--deps-only] [package]</span></div><div class="line">   libs-<span class="keyword">only</span>-l     [<span class="comment">--deps-only] [package]</span></div><div class="line">   libs-<span class="keyword">only</span>-other [<span class="comment">--deps-only] [package]</span></div><div class="line">   <span class="keyword">list</span></div><div class="line">   <span class="keyword">list</span>-duplicates</div><div class="line">   <span class="keyword">list</span>-<span class="keyword">names</span></div><div class="line">   plugins <span class="comment">--attrib=&lt;attrib&gt; [--top=&lt;toppkg&gt;] [package]</span></div><div class="line">   profile [<span class="comment">--length=&lt;length&gt;] [--zombie-only]</span></div><div class="line">   rosdep  [<span class="keyword">package</span>] (<span class="keyword">alias</span>: rosdeps)</div><div class="line">   rosdep0 [<span class="keyword">package</span>] (<span class="keyword">alias</span>: rosdeps0)</div><div class="line">   vcs  [<span class="keyword">package</span>]</div><div class="line">   vcs0 [<span class="keyword">package</span>]</div><div class="line"> Extra options:</div><div class="line">   -q     Quiets <span class="keyword">error</span> reports.</div><div class="line"></div><div class="line"><span class="keyword">If</span> [<span class="keyword">package</span>] <span class="keyword">is</span> omitted, the <span class="keyword">current</span> working <span class="keyword">directory</span></div><div class="line"><span class="keyword">is</span> used (<span class="keyword">if</span> it contains a package.xml <span class="keyword">or</span> manifest.xml).</div></pre></td></tr></table></figure></p>
<p> 一般我们常用的 <em>rospack find xxx</em> 命令查找某个包位于何处，比如我们想知道 <em>turtlesim</em> 包位于哪里：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rospack</span> find turtlesim</span></div></pre></td></tr></table></figure></p>
<p> 系统会输出turtlesim 的路径 <em>/opt/ros/indigo/share/turtlesim</em></p>
<h2 id="roscd"><a href="#roscd" class="headerlink" title="roscd"></a><a href="http://wiki.ros.org/rosbash#roscd" target="_blank" rel="external">roscd</a></h2><p> <a href="http://wiki.ros.org/rosbash#roscd" target="_blank" rel="external">roscd</a> 是 <a href="http://wiki.ros.org/rosbash" target="_blank" rel="external">rosbash</a> 命令集中的一部分，它可以直接切换(cd)工作目录到某个软件包或者软件包集当中。<br> 使用方法：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscd</span> [本地包名称[/子目录]]</span></div></pre></td></tr></table></figure></p>
<p> 比如：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscd</span> beginner_tutorials/src</span></div></pre></td></tr></table></figure></p>
<p> 直接进入到 <em>beginner_tutorials/src</em> 目录下，此时查看当前目录<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$pwd</span></div><div class="line"><span class="regexp">/home/y</span>ourusername<span class="regexp">/catkin_ws/</span>src<span class="regexp">/beginner_tutorials/</span>src</div></pre></td></tr></table></figure></p>
<p>值得注意的是 <a href="http://wiki.ros.org/rosbash#roscd" target="_blank" rel="external">roscd</a> 只能切换到那些路径已经包含在 ROS_PACKAGE_PATH 环境变量中的软件包。<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">roscd <span class="built_in">log</span></span></div></pre></td></tr></table></figure></p>
<p>roscd log可以切换到ROS保存日记文件的目录下,如果你没有执行过任何ROS程序，系统会报错说该目录不存在。 此时查看当前目录：<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$pwd</span></div><div class="line"><span class="regexp">/home/y</span>ourusername<span class="regexp">/.ros/</span>log</div></pre></td></tr></table></figure></p>
<h2 id="rosls"><a href="#rosls" class="headerlink" title="rosls"></a><a href="http://wiki.ros.org/rosbash#rosls" target="_blank" rel="external">rosls</a></h2><p><a href="http://wiki.ros.org/rosbash#rosls" target="_blank" rel="external">rosls</a> 是 <a href="http://wiki.ros.org/rosbash" target="_blank" rel="external">rosbash</a> 命令集中的一部分,允许直接按软件包的名称而不是绝对路径执行ls命令,使用方法：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rosls</span> [本地包名称[/子目录]]</span></div></pre></td></tr></table></figure></p>
<p>比如在任意目录下执行，而不需要进入到 beginner_tutorials 所在目录：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rosls</span> beginner_tutorials/</span></div></pre></td></tr></table></figure></p>
<p>应输出：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CMakeLists<span class="selector-class">.txt</span>  include  msg  package<span class="selector-class">.xml</span>  src  srv</div></pre></td></tr></table></figure></p>
<h1 id="TAB补全"><a href="#TAB补全" class="headerlink" title="TAB补全"></a>TAB补全</h1><p>ROS 命令同样支持TAB补全，这里不再细讲。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习 ROS 的文件系统，包括一些命令行工具 &lt;a href=&quot;http://wiki.ros.org/rosbash#roscd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;roscd&lt;/a&gt;、 &lt;a href=&quot;http://wiki.ros.org/rosbash#rosls&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rosls&lt;/a&gt;、 &lt;a href=&quot;http://wiki.ros.org/rospack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rospack&lt;/a&gt; 等的使用。&lt;/p&gt;
&lt;h1 id=&quot;安装-tutorial-程序包：&quot;&gt;&lt;a href=&quot;#安装-tutorial-程序包：&quot; class=&quot;headerlink&quot; title=&quot;安装 tutorial 程序包：&quot;&gt;&lt;/a&gt;安装 tutorial 程序包：&lt;/h1&gt;   &lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;span class=&quot;meta-keyword&quot;&gt;$sudo&lt;/span&gt; apt-get install ros-indigo-ros-tutorials&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;源码位于: &lt;a href=&quot;https://github.com/ros/ros_tutorials.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ros_tutorials&lt;/a&gt;。&lt;br&gt; 一般一个 ROS 软件包中包括 &lt;em&gt;CMakeLists.txt&lt;/em&gt;、  &lt;em&gt;include&lt;/em&gt;、   &lt;em&gt;package.xml&lt;/em&gt;、  &lt;em&gt;src&lt;/em&gt; 等几个文件及文件目录。Packages 软件包是ROS 应用程序代码的组织单元，每个软件包都可以包含程序库、可执行文件、脚本或者其它手动创建的东西。 Manifest (package.xml): 清单，是对于软件包相关信息的描述,用于定义软件包相关元信息之间的依赖关系，这些信息包括版本、维护者和许可协议等。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS File&#39;s System" scheme="http://stevenshi.me/tags/ROS-File-s-System/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级&lt;一&gt; 安装与配置</title>
    <link href="http://stevenshi.me/2017/05/26/ros-primary-tutorial-1/"/>
    <id>http://stevenshi.me/2017/05/26/ros-primary-tutorial-1/</id>
    <published>2017-05-26T00:23:23.000Z</published>
    <updated>2017-06-08T02:01:38.427Z</updated>
    
    <content type="html"><![CDATA[<p>一直想记录一下ROS学习过程中的点滴，先从最基础的 ROS-Beginner-Tutorials开始， 以便于帮助更多的人，本篇是ROS学习的开篇。</p>
<h1 id="ROS安装"><a href="#ROS安装" class="headerlink" title="ROS安装"></a>ROS安装</h1><p>目前ROS官方还在维护的版本有4个(截至201705),参考 <a href="http://wiki.ros.org/Distributions" target="_blank" rel="external">ROS-Distributions</a>：<img src="/2017/05/26/ros-primary-tutorial-1/rosv.jpg" alt=""><br><a id="more"></a><br>因为我的环境是ubuntu14.04,支持的 ROS 版本为 <a href="http://wiki.ros.org/indigo" target="_blank" rel="external">ROS-Indigo</a>, 因此我选择安装 <a href="http://wiki.ros.org/indigo" target="_blank" rel="external">ROS-Indigo</a>。<br><em>环境： ubuntu 14.04 Trusty LTS 32bits</em><br>安装可以参考官网: <a href="http://wiki.ros.org/indigo/Installation/Ubuntu" target="_blank" rel="external">ROS-Indigo-Installation-ubuntu</a><br>添加代码仓：<br>   <figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> <span class="keyword">sh</span> -c 'echo <span class="string">"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main"</span> &gt; /etc/apt/sources.<span class="keyword">list</span>.<span class="keyword">d</span>/ros-latest.<span class="keyword">list</span>'</div></pre></td></tr></table></figure></p>
<p>设定key:<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sudo apt-key adv <span class="params">--keyserver</span> hkp:<span class="string">//ha.pool.sks-keyservers.net</span><span class="function">:80</span> <span class="params">--recv-key</span> 421C365BD9FF1F717815A3895523BAEEB01FA116</div></pre></td></tr></table></figure></p>
<p>更新：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get update</span></div></pre></td></tr></table></figure></p>
<p>选择桌面版完全安装：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install ros-indigo-desktop-full</span></div></pre></td></tr></table></figure></p>
<p>初始化rosdep:<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> rosdep init</span></div><div class="line"><span class="meta"><span class="meta-keyword">$rosdep</span> update</span></div></pre></td></tr></table></figure></p>
<p>设定环境变量让系统能找到ROS：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">echo</span> <span class="string">"source /opt/ros/indigo/setup.bash"</span> &gt;&gt; ~/.bashrc</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">source</span> ~/.bashrc</span></div></pre></td></tr></table></figure></p>
<p>安装rosinstall工具，方便下载ROS：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install python-rosinstall</span></div></pre></td></tr></table></figure></p>
<h1 id="管理环境"><a href="#管理环境" class="headerlink" title="管理环境"></a>管理环境</h1><p>检查我们是否配置好了环境变量：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">export</span> | grep ROS</span></div></pre></td></tr></table></figure></p>
<p>检查是否有 <a href="http://wiki.ros.org/ROS/EnvironmentVariables#ROS_ROOT" target="_blank" rel="external">ROS_ROOT</a> 和 <a href="http://wiki.ros.org/ROS/EnvironmentVariables#ROS_PACKAGE_PATH" target="_blank" rel="external">ROS_PACKAGE_PATH</a> 的配置。</p>
<h1 id="创建ROS工作空间"><a href="#创建ROS工作空间" class="headerlink" title="创建ROS工作空间"></a>创建ROS工作空间</h1><p><a href="http://wiki.ros.org/catkin/commands/catkin_make" target="_blank" rel="external">catkin_make</a> 命令只适用于 ROS Groovy 及其以后的版本。</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">mkdir -p ~/catkin_ws/src</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/src</span></div></pre></td></tr></table></figure>
<p>这就创建了一个 <a href="http://wiki.ros.org/catkin/workspaces" target="_blank" rel="external">catkin 工作空间</a>, 里面是空的，只有一个 <a href="http://wiki.ros.org/catkin/CMakeLists.txt" target="_blank" rel="external">CMakeLists.txt</a>, 但依然可以编译它：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make</span></div></pre></td></tr></table></figure></p>
<p>当前目录下会生成 <em>build</em> 和 <em>devel</em> 这两个文件夹。在 <em>devel</em> 文件夹里面可以看到几个 setup.*sh 文件。 source 这些文件中的任何一个都可以将当前工作空间设置在ROS工作环境的最顶层，参考 <a href="http://wiki.ros.org/catkin" target="_blank" rel="external">catkin</a>文档。接下来首先 source 一下新生成的 setup.bash 文件：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span></div></pre></td></tr></table></figure></p>
<p>也可以将这句命令加入到 ~/.bashrc 中，这样每次打开一个 <em>terminal</em> 会自动 <em>source</em> 。<br>确保工作空间已经正确配置可以通过以下命令查看：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span></span></div></pre></td></tr></table></figure></p>
<p>正确的输出一般为：<br>   <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/home/</span>yourusername<span class="regexp">/catkin_ws/</span><span class="string">src:</span><span class="regexp">/opt/</span>ros<span class="regexp">/indigo/</span><span class="string">share:</span><span class="regexp">/opt/</span>ros<span class="regexp">/indigo/</span>stacks</div></pre></td></tr></table></figure></p>
<p>至此，ROS的安装与配置已经搭建完成。<br>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials" target="_blank" rel="external">ROS-Beginner-Tutorials</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直想记录一下ROS学习过程中的点滴，先从最基础的 ROS-Beginner-Tutorials开始， 以便于帮助更多的人，本篇是ROS学习的开篇。&lt;/p&gt;
&lt;h1 id=&quot;ROS安装&quot;&gt;&lt;a href=&quot;#ROS安装&quot; class=&quot;headerlink&quot; title=&quot;ROS安装&quot;&gt;&lt;/a&gt;ROS安装&lt;/h1&gt;&lt;p&gt;目前ROS官方还在维护的版本有4个(截至201705),参考 &lt;a href=&quot;http://wiki.ros.org/Distributions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS-Distributions&lt;/a&gt;：&lt;img src=&quot;/2017/05/26/ros-primary-tutorial-1/rosv.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS Installation" scheme="http://stevenshi.me/tags/ROS-Installation/"/>
    
  </entry>
  
  <entry>
    <title>使用 Qt 编译调试 ROS</title>
    <link href="http://stevenshi.me/2017/05/25/debug-ros-using-qt/"/>
    <id>http://stevenshi.me/2017/05/25/debug-ros-using-qt/</id>
    <published>2017-05-25T06:06:45.000Z</published>
    <updated>2017-06-09T06:43:07.528Z</updated>
    
    <content type="html"><![CDATA[<p>其实 vim 配置好后可以很方便的调试 ROS ，就是 Vim 配置比较麻烦，可以参考我的站内文章  <a href="http://stevenshi.me/2017/05/18/vim/">如何让VIM变的爱不释手</a> 。 相信很多人都用过 Qt ，它原生支持 CMake ，因此 Qt 可以很好的支持 ROS，本篇学习如何使用 Qt 进行 ROS 的开发。<br><a id="more"></a></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>首先找到这个文件 QtProject-qtcreator.desktop 该文件可能位于~/.local/share/applications/，也可能位于/usr/share/applications，可以使用如下命令查找：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo find -name QtProject-qtcreator.desktop</span></div></pre></td></tr></table></figure></p>
<p>打开该文件，在Exec那一行添加 bash -i –c ：<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Exec=bash -i -c <span class="regexp">/usr/</span>local<span class="regexp">/qtcreator-3.4.2/</span>bin<span class="regexp">/qtcreator</span></div></pre></td></tr></table></figure></p>
<p>添加 “bash -i –c” 是为了在通过快捷方式启动Qt Creator的同时加载ROS环境变量，ROS环境变量加载脚本配置在 ~/.bashrc 文件内，类似于加载工作空间里的 <em>devel/setup.bash</em> 。</p>
<h1 id="打开工程"><a href="#打开工程" class="headerlink" title="打开工程"></a>打开工程</h1><p>在桌面上打开 qt-creator，打开某一个ROS工程，找到 CMakelist.txt 因为 qt 本身支持 cmake 项目:</p>
<p><img src="/2017/05/25/debug-ros-using-qt/open.jpg" alt=""></p>
<p>设置编译路径为 catkin_ws 的 build 路径:</p>
<p><img src="/2017/05/25/debug-ros-using-qt/setup.jpg" alt=""></p>
<p>设置CMake编译模式：-DCMAKE_BUILD_TYPE=Debug :</p>
<p><img src="/2017/05/25/debug-ros-using-qt/mode.jpg" alt=""></p>
<p>最后点击 Run CMake 按钮,然后点击 Finish 按钮就可以编译该工程了：</p>
<p><img src="/2017/05/25/debug-ros-using-qt/compile.jpg" alt=""></p>
<p>值得注意的是，在运行前需要新开一个 terminal 运行 roscore,然后再运行编译后的工程节点。</p>
<h1 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h1><p>对于 ROS 新工程的建立需要 <a href="https://www.qt.io/ide/" target="_blank" rel="external">Qt Creator</a> 4.1 以上版本，需要安装 <a href="http://rosindustrial.org/news/2016/6/9/ros-qt-ide-plugin" target="_blank" rel="external">ros_qtc_plugin</a> 插件，该插件位于 <a href="https://github.com/ros-industrial/ros_qtc_plugin" target="_blank" rel="external">github</a>。 因为我安装的版本较低，所以我依然采用 ROS 命令行建立新的 pkg。 至此，可以开始使用 Qt 开发 ROS 了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实 vim 配置好后可以很方便的调试 ROS ，就是 Vim 配置比较麻烦，可以参考我的站内文章  &lt;a href=&quot;http://stevenshi.me/2017/05/18/vim/&quot;&gt;如何让VIM变的爱不释手&lt;/a&gt; 。 相信很多人都用过 Qt ，它原生支持 CMake ，因此 Qt 可以很好的支持 ROS，本篇学习如何使用 Qt 进行 ROS 的开发。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS Qt" scheme="http://stevenshi.me/tags/ROS-Qt/"/>
    
  </entry>
  
  <entry>
    <title>ROS导航仿真</title>
    <link href="http://stevenshi.me/2017/05/24/ros-navigation-simulation/"/>
    <id>http://stevenshi.me/2017/05/24/ros-navigation-simulation/</id>
    <published>2017-05-24T05:36:03.000Z</published>
    <updated>2017-05-24T06:54:53.570Z</updated>
    
    <content type="html"><![CDATA[<p>在进入实际的机器人运动控制之前，先使用空白地图或现有地图进行ROS导航功能的仿真,以便于更进一步了解机器人的导航控制策略。<br><em>环境: ubuntu 14.04 LTS 32bits </em><br><em>ROS</em>: <em>Indigo</em><br><a id="more"></a></p>
<h1 id="Navigation-安装"><a href="#Navigation-安装" class="headerlink" title="Navigation 安装"></a>Navigation 安装</h1><p>在进行导航仿真之前，需要先下载 <em>ROS</em> 官方提供的 <a href="http://wiki.ros.org/cn/navigation" target="_blank" rel="external">ROS-Navigation</a>，安装下载：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/src</span></div><div class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> https://github.com/ros-planning/navigation.git</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> navigation　</span></div><div class="line"><span class="meta">$</span><span class="bash">git checkout indigo-devel</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make</span></div><div class="line"><span class="meta">$</span><span class="bash">rospack profile</span></div></pre></td></tr></table></figure></p>
<p>可能会报错：<br>   <figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">catkin_ws<span class="meta-keyword">/src/</span>navigation/map_server<span class="meta-keyword">/src/</span>image_loader.cpp:<span class="number">43</span>:<span class="number">27</span>: fatal error: SDL/SDL_image.h: No such file or directory</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL/SDL_image.h&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>安装 <a href="https://www.libsdl.org/" target="_blank" rel="external">SDL</a>,SDL（Simple DirectMedia Layer）是一套开放源代码的跨平台多媒体开发库，使用C语言写成。SDL提供了数种控制图像、声音、输出入的函数，让开发者只要用相同或是相似的代码就可以开发出跨多个平台（Linux、Windows、Mac OS X等）的应用软件。参考 <a href="https://zh.wikipedia.org/wiki/SDL" target="_blank" rel="external">SDL</a>:<br>   <figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-<span class="built_in">get</span> install libsdl-image1<span class="number">.2</span>-<span class="built_in">dev</span> libsdl1<span class="number">.2</span>-<span class="built_in">dev</span></div></pre></td></tr></table></figure></p>
<h1 id="使用-arbotix-测试-move-base"><a href="#使用-arbotix-测试-move-base" class="headerlink" title="使用 arbotix 测试 move_base"></a>使用 arbotix 测试 move_base</h1><p><a href="http://wiki.ros.org/move_base" target="_blank" rel="external">move_base</a> 是导航功能里比较重要的一项，它获取传感器数据并负责路径规划、距离计算、成本计算等。</p>
<p><img src="/2017/05/24/ros-navigation-simulation/movebase.png" alt=""></p>
<p><em>move_base</em> 节点运行前需要四个配置文件，它们定义了路径规划需要的一些配置参数，包括越过障碍物的代价、机器人的半径、即时距离计算、机器人移动速度等参数。在 <em>ROS by example</em> 中的示例代码 <em>rbx1</em> 中有关于每个机器人的四个配置文件，它们位于 <em>rbx1/rbx1_nav/config</em> 中，每个机器人下面都有对应的四个配置文件：<br><em>base_local_planner_params.yaml</em><br><em>costmap_common_params.yaml</em><br><em>global_costmap_params.yaml</em><br><em>local_costmap_params.yaml</em><br>里面的参数说明可以参考官方文档<a href=""></a><br>下面的命令启动启动一个机器人，使用 <em>move_base</em>使其向前移动 2m：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$roslaunch</span> rbx1_bringup fake_turtlebot<span class="selector-class">.launch</span> <span class="comment">//启动一个机器人 使用ArbotiX模拟器</span></div><div class="line"><span class="variable">$roslaunch</span> rbx1_nav fake_move_base_blank_map<span class="selector-class">.launch</span> <span class="comment">///以空白地图启动move_base节点</span></div><div class="line"><span class="variable">$rosrun</span> rviz rviz -d `rospack find rbx1_nav`/<span class="selector-tag">nav</span><span class="selector-class">.rviz</span> <span class="comment">//启动Rviz</span></div><div class="line">$ rostopic pub /move_base_simple/goal geometry_msgs/PoseStamped <span class="string">'&#123;header: &#123;frame_id: "map"&#125;,pose: &#123;position: &#123;x: 1.0,y: 0,z: 0&#125;,orientation: &#123;x: 0,y: 0,z: 0,w: 2&#125;&#125;&#125;'</span> <span class="comment">//向前运动2m</span></div></pre></td></tr></table></figure></p>
<p>返回原地：<br>   <figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml">$ rostopic pub /move_base_simple/goal geometry_msgs/PoseStamped '</span><span class="template-variable">&#123;header: &#123;frame_id: "map"&#125;</span><span class="xml">,pose: </span><span class="template-variable">&#123;position: &#123;x: 0.0,y: 0,z: 0&#125;</span><span class="xml">,orientation: </span><span class="template-variable">&#123;x: 0,y: 0,z: 0,w: 2&#125;</span><span class="xml">&#125;&#125;' //返回</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/24/ros-navigation-simulation/forward.jpg" alt=""></p>
<p>让机器人走一个正方形：<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rosrun</span> rbx1_nav move_base_square.py<span class="regexp">//</span>让机器人走正方形</div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/24/ros-navigation-simulation/square.jpg" alt=""></p>
<h1 id="带障碍物的导航"><a href="#带障碍物的导航" class="headerlink" title="带障碍物的导航"></a>带障碍物的导航</h1><p>将空白地图换做带障碍物的地图再次使机器人运行一个正方形：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$roscore</span></div><div class="line"><span class="variable">$roslaunch</span> rbx1_bringup fake_turtlebot<span class="selector-class">.launch</span> <span class="comment">//加载一个模拟机器人</span></div><div class="line"><span class="variable">$roslaunch</span> rbx1_nav fake_move_base_map_with_obstacles<span class="selector-class">.launch</span>  <span class="comment">//加载一张带障碍物的地图</span></div><div class="line"><span class="variable">$rosrun</span>  rviz rviz -d `rospack find rbx1_nav`/nav_obstacles<span class="selector-class">.rviz</span> <span class="comment">//加载rviz  带障碍物的导航</span></div><div class="line"><span class="variable">$rosrun</span> rbx1_nav move_base_square<span class="selector-class">.py</span> <span class="comment">//使其自动走一个正方形</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/24/ros-navigation-simulation/obstacle.jpg" alt=""></p>
<h1 id="复杂地图导航与蒙特卡洛定位"><a href="#复杂地图导航与蒙特卡洛定位" class="headerlink" title="复杂地图导航与蒙特卡洛定位"></a>复杂地图导航与蒙特卡洛定位</h1><p>使用ROS导航包里现有的复杂地图结合 <a href="http://wiki.ros.org/amcl" target="_blank" rel="external">ACML</a>-(Adaptive Monte Carlo Localization) 进行导航功能的测试。<a href="http://wiki.ros.org/amcl" target="_blank" rel="external">ACML</a> 即自适应蒙特卡罗定位，关于它的原理回头再仔细分析。<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$roscore</span></div><div class="line"><span class="variable">$roslaunch</span> rbx1_bringup fake_turtlebot<span class="selector-class">.launch</span> <span class="comment">//运行一个机器人</span></div><div class="line"><span class="variable">$roslaunch</span> rbx1_nav fake_amcl<span class="selector-class">.launch</span> <span class="comment">//运行fake_amcl.launch调用已有的测试地图</span></div><div class="line"><span class="variable">$rosrun</span> rviz rviz -d `rospack find rbx1_nav`/amcl<span class="selector-class">.rviz</span> <span class="comment">//启动rviz 并调用amcl配置文件</span></div></pre></td></tr></table></figure></p>
<p>也可以手动指定要调用的地图：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$roslaunch</span> rbx1_nav fake_amcl<span class="selector-class">.launch</span> map:=test_map.yaml</div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/24/ros-navigation-simulation/amcl.jpg" alt=""></p>
<p>此时点击2D New Goal按钮，让机器人运动到指定目标：<br><img src="/2017/05/24/ros-navigation-simulation/amcl-move.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在进入实际的机器人运动控制之前，先使用空白地图或现有地图进行ROS导航功能的仿真,以便于更进一步了解机器人的导航控制策略。&lt;br&gt;&lt;em&gt;环境: ubuntu 14.04 LTS 32bits &lt;/em&gt;&lt;br&gt;&lt;em&gt;ROS&lt;/em&gt;: &lt;em&gt;Indigo&lt;/em&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS Navigation" scheme="http://stevenshi.me/tags/ROS-Navigation/"/>
    
  </entry>
  
  <entry>
    <title>ROS机器人仿真</title>
    <link href="http://stevenshi.me/2017/05/24/ros-simulation/"/>
    <id>http://stevenshi.me/2017/05/24/ros-simulation/</id>
    <published>2017-05-24T02:07:50.000Z</published>
    <updated>2017-05-24T05:33:51.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 <em>PC</em> 环境下进行机器人的运动仿真是 <em>ROS</em> 开发者必经的一个环节，<em>ROS</em> 官方提供了好用且强大的3D可视化工具 <a href="http://wiki.ros.org/rviz" target="_blank" rel="external">rviz</a>-3D visualization tool for ROS。<br><em>环境: ubuntu 14.04 LTS 32bits </em><br><em>ROS</em>: <em>Indigo</em><br>开启仿真之旅。<br><a id="more"></a></p>
<h1 id="安装-rviz"><a href="#安装-rviz" class="headerlink" title="安装 rviz"></a>安装 <a href="http://wiki.ros.org/rviz" target="_blank" rel="external">rviz</a></h1><p>安装之前首先确保在 <em>ubuntu</em> 系统下配置安装好了 <em>ROS</em> 环境，如果没有请参考官网安装，点击 <a href="http://wiki.ros.org/indigo/Installation/Ubuntu" target="_blank" rel="external">ROS-Install-on-Ubuntu</a>。安装3D可视化工具 <a href="http://wiki.ros.org/rviz" target="_blank" rel="external">rviz</a> 参考 <a href="http://wiki.ros.org/rviz/UserGuide" target="_blank" rel="external">Rviz-Installation</a><br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install ros-indigo-rviz</span></div></pre></td></tr></table></figure></p>
<p><a href="http://wiki.ros.org/rviz" target="_blank" rel="external">rviz</a> 只是一个3D可视化工具，需要安装一个模拟器 <a href="http://wiki.ros.org/arbotix" target="_blank" rel="external">Arbotix</a> 才能进行机器人的仿真，安装模拟器 <a href="http://wiki.ros.org/arbotix" target="_blank" rel="external">Arbotix</a>：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install ros-indigo-arbotix*</span></div><div class="line"><span class="meta"><span class="meta-keyword">$rospack</span> profile //更新ros软件包</span></div></pre></td></tr></table></figure></p>
<h1 id="开始仿真"><a href="#开始仿真" class="headerlink" title="开始仿真"></a>开始仿真</h1><p>仿真之前下载 <a href="https://github.com/pirobot/rbx1" target="_blank" rel="external">ros-by-example</a> 自带的例程代码：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/src</span></div><div class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> https://github.com/pirobot/rbx1.git</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> rbx1</span></div><div class="line"><span class="meta">$</span><span class="bash">git checkout indigo-devel</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span></div><div class="line"><span class="meta">$</span><span class="bash">rospack profile</span></div></pre></td></tr></table></figure></p>
<p>使用 <em>rbx1</em> 包之前运行包里自带的 <em>rbx1-prereq.sh</em> 文件，安装一下依赖项，如果安装了可以略过：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sh</span> rbx1-prereq.sh　</span></div><div class="line"><span class="meta"><span class="meta-keyword">$rospack</span> profile</span></div></pre></td></tr></table></figure></p>
<p>运行 <em>roscore</em> 先：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscore</span> &amp;</span></div></pre></td></tr></table></figure></p>
<p>开启一个机器人模型,模型位于<em>/rbx1/rbx1_bringup/launch</em>目录下：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roslaunch</span> rbx1_bringup fake_pi_robot.launch</span></div></pre></td></tr></table></figure></p>
<p>也可以选择其他的模型。之后开启 <em>Rviz</em> 可视化工具：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">rosrun rviz rviz <span class="_">-d</span> `rospack find rbx1_nav`/sim.rviz</span></div></pre></td></tr></table></figure></p>
<p>一定要注意反单引号的使用，否则系统会报错。（ESC下面那个键）<br>此时就可以看到机器人模型：<img src="/2017/05/24/ros-simulation/rviz.jpg" alt=""><br>参数 <em>sim.rviz</em> 是 <em>rviz</em> 的配置文件。机器人目前处于静止状态，我们发布一个命令，让它动起来，命令冒号后的空格必须有：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rostopic</span> pub -r <span class="number">10</span> <span class="regexp">/cmd_vel geometry_msgs/</span>Twist <span class="string">'&#123;linear: &#123;x: 0.2, y: 0, z: 0&#125;, angular: &#123;x: 0, y: 0, z: 0.5&#125;&#125;'</span></div></pre></td></tr></table></figure></p>
<p>效果：<img src="/2017/05/24/ros-simulation/rviz-move.jpg" alt=""><br>需要停止机器人，可以在同一个窗口按下 <em>ctrl-c</em> 或者发布一个空的指令：<br>　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rostopic</span> pub -<span class="number">1</span> <span class="regexp">/cmd_vel geometry_msgs/</span>Twist <span class="string">'&#123;&#125;'</span></div></pre></td></tr></table></figure></p>
<h1 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h1><p><em>fake_pi_robot.launch</em> 文件是机器人的模型描述文件，功能是生成一个pi类型的机器人模型；<br>　<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"/use_sim_time"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line"> </div><div class="line">    <span class="comment">&lt;!-- Load the URDF/Xacro model of our robot --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">"urdf_file"</span> <span class="attr">default</span>=<span class="string">"$(find xacro)/xacro.py '$(find rbx1_description)/urdf/pi_robot.xacro'"</span> /&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"robot_description"</span> <span class="attr">command</span>=<span class="string">"$(arg urdf_file)"</span> /&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"arbotix"</span> <span class="attr">pkg</span>=<span class="string">"arbotix_python"</span> <span class="attr">type</span>=<span class="string">"arbotix_driver"</span> <span class="attr">output</span>=<span class="string">"screen"</span> <span class="attr">clear_params</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find rbx1_bringup)/config/fake_pi_arbotix.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> /&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"sim"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">node</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"move_fake_pi_arm_start"</span> <span class="attr">pkg</span>=<span class="string">"rbx1_bringup"</span> <span class="attr">type</span>=<span class="string">"move_fake_pi_arm_start.py"</span> <span class="attr">output</span>=<span class="string">"screen"</span> /&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"robot_state_publisher"</span> <span class="attr">pkg</span>=<span class="string">"robot_state_publisher"</span> <span class="attr">type</span>=<span class="string">"state_publisher"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"publish_frequency"</span> <span class="attr">type</span>=<span class="string">"double"</span> <span class="attr">value</span>=<span class="string">"20.0"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">node</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="comment">&lt;!-- Run a static transform between /base_link and /base_footprint needed for SLAM --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"tf"</span> <span class="attr">type</span>=<span class="string">"static_transform_publisher"</span> <span class="attr">name</span>=<span class="string">"base_footprint_broadcaster"</span> <span class="attr">args</span>=<span class="string">"0 0 0 0 0 0 /base_link /base_footprint 100"</span> /&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"> <span class="tag">&lt;/<span class="name">launch</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>大致过程先加载一个 <em>urdf</em>文件，这个文件用于描述机器人的样子，然后启动 <em>arbotix</em> 仿真，启动仿真节点，发布状态，最后是 <em>tf</em> 坐标变换。<em>sim.rviz</em>配置文件描述了 <em>rviz</em> 的配置，位于目录 <em>rbx1/rbx1_nav</em> 中，它的配置代码很长，大致描述的是一些显示配置，即 <em>rviz</em> 左侧那部分：<img src="/2017/05/24/ros-simulation/rviz-left.jpg" alt=""></p>
<p>速度发布命令一个是角速度，一个是线速度，参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingTopics" target="_blank" rel="external">ROStopic</a>。<br>x y z 的方向遵循右手坐标系，机器人正前方为x轴，自地面向上为z轴，y轴垂直于其他两轴位于左方:</p>
<p><img src="/2017/05/24/ros-simulation/axis.jpg" alt=""><img src="/2017/05/24/ros-simulation/screw-rule.jpg" alt=""></p>
<p>机器人只能贴着地面运动，只能绕Z轴做旋转运动，不可能沿Z轴做直线运动；也不可能绕着x轴或者绕着y轴做旋转运动。机器人只能向前运动或向后运动，即x方向；做旋转运动可以绕z轴顺时针或者逆时针，逆时针为正方向。旋转方向遵循右手螺旋法则，逆时针为正，顺时针为负。</p>
<p><em>linear: {x: 0.2, y: 0, z: 0}</em>的意思就是机器人沿着x轴正方向，即向前运动，速度为 <em>0.2m/s</em> ;<br><em>angular: {x: 0, y: 0, z: 0.5}</em> 的意思是机器人沿着z轴做逆时针旋转的角速度为 <em>0.5rad/s</em>;因此会得出以上机器人运动轨迹。<br>关于速度发布的语法遵循 <a href="http://wiki.ros.org/ROS/YAMLCommandLine" target="_blank" rel="external">YAML</a> 。<br>速度单位 <em>m/s</em>-米/秒<br>角速度单位 <em>rad/s</em>-弧度/秒</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在 &lt;em&gt;PC&lt;/em&gt; 环境下进行机器人的运动仿真是 &lt;em&gt;ROS&lt;/em&gt; 开发者必经的一个环节，&lt;em&gt;ROS&lt;/em&gt; 官方提供了好用且强大的3D可视化工具 &lt;a href=&quot;http://wiki.ros.org/rviz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rviz&lt;/a&gt;-3D visualization tool for ROS。&lt;br&gt;&lt;em&gt;环境: ubuntu 14.04 LTS 32bits &lt;/em&gt;&lt;br&gt;&lt;em&gt;ROS&lt;/em&gt;: &lt;em&gt;Indigo&lt;/em&gt;&lt;br&gt;开启仿真之旅。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS Simulation" scheme="http://stevenshi.me/tags/ROS-Simulation/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 下 hexo 安装与配置</title>
    <link href="http://stevenshi.me/2017/05/23/ubuntu-hexo/"/>
    <id>http://stevenshi.me/2017/05/23/ubuntu-hexo/</id>
    <published>2017-05-23T12:39:56.000Z</published>
    <updated>2017-05-27T01:16:39.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有时候调试 <em>linux</em>，写代码都是在 <em>ubuntu</em> 环境下，随时需要记录一些调试的过程，这时候就需要在 <em>ubuntu</em> 下配置 <em>hexo</em> 环境，并撰写博客。<br><a id="more"></a></p>
<h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1> <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install git</span></div></pre></td></tr></table></figure>
<h1 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h1>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> config --global user<span class="selector-class">.name</span> <span class="string">"your username"</span>  </div><div class="line"><span class="variable">$git</span> config --global user<span class="selector-class">.email</span> <span class="string">"your_email@youremail.com"</span></div><div class="line"><span class="variable">$ssh</span>-keygen -t rsa -C <span class="string">"youremail@email.com"</span></div></pre></td></tr></table></figure>
<p>如果自己使用多台电脑更新博客，可以使用多个 <em>SSH Key</em>,但这样做根本没必要，完全可以使用一个。拷贝之前电脑~/.ssh/中生成的id_rsa和id_rsa.pub到本电脑目录 <em>~/.ssh/</em> 中，并确保文件的权限，私钥 <em>id_rsa</em> 的权限是600，公钥 <em>id_rsa.pub</em> 权限是644。</p>
<h1 id="github验证机制"><a href="#github验证机制" class="headerlink" title="github验证机制"></a>github验证机制</h1><p>说到这里就多说一下github的验证机制。公钥和私钥是成对使用的，一般是使用 <em>RSA</em>算法生成 <em>id_rsa.pub</em> 和 <em>id_rsa</em>。公钥是可以暴露在网络上传输的，但私钥不可以，私钥只能放在本地。所以这两个文件的权限也不同。当使用时，客户端发出公钥登录的请求，服务器端返回一段随机字符，客户端收到该字符使用私钥对这段字符进行加密，并发送给服务器端，服务器端使用事先存储的公钥去解密这段字符，如果成功即表示客户端身份验证通过。</p>
<h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>不建议使用 <em>apt-get</em> 命令安装，安装可能不成功<br>使用如下命令安装参考 <a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm-github</a>:<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span> &amp;&amp; (</div><div class="line">  git <span class="built_in">clone</span> https://github.com/creationix/nvm.git <span class="string">"<span class="variable">$NVM_DIR</span>"</span></div><div class="line">  <span class="built_in">cd</span> <span class="string">"<span class="variable">$NVM_DIR</span>"</span></div><div class="line">  git checkout `git describe --abbrev=0 --tags --match <span class="string">"v[0-9]*"</span> origin`</div><div class="line">) &amp;&amp; . <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span></div></pre></td></tr></table></figure></p>
<p>使nvm开机自启动，将如下内容添加到 <em>~/.bashrc</em> 中：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> <span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></div><div class="line">[ <span class="_">-s</span> <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; . <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span></div></pre></td></tr></table></figure></p>
<p>不要忘记重启 <em>terminal</em> 或者重新 <em>source</em> 一下 <em>~/.bashrc</em><br>执行以下命令：<br>   <figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$nvm</span> <span class="keyword">ls</span>-remote <span class="comment">//列出所有安装包的版本信息</span></div><div class="line"><span class="variable">$nvm</span> install stable <span class="comment">//安装最稳定版本</span></div><div class="line"><span class="variable">$nvm</span> <span class="keyword">use</span> node <span class="comment">//使用当前版本</span></div><div class="line"><span class="variable">$nvm</span> <span class="keyword">run</span> node --<span class="keyword">version</span> <span class="comment">//也可以使用该命令 使用当前版本</span></div><div class="line"><span class="variable">$nvm</span> alias default node <span class="comment">//设置默认版本</span></div></pre></td></tr></table></figure></p>
<p>如果需要更新则手动更新 <em>nvm</em>:<br>     <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(</div><div class="line"> <span class="built_in">cd</span> <span class="string">"<span class="variable">$NVM_DIR</span>"</span></div><div class="line"> git fetch origin</div><div class="line"> git checkout `git describe --abbrev=0 --tags --match <span class="string">"v[0-9]*"</span> origin`</div><div class="line">) &amp;&amp; . <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span></div></pre></td></tr></table></figure></p>
<h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> install  hexo-cli -g</span></div><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> install hexo-server -g</span></div><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> install hexo-deployer-git -g</span></div><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> install hexo-util -g</span></div></pre></td></tr></table></figure>
<p>接下来建立博客目录，进入给目录下：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> init <span class="regexp">//</span>初始化 下载必要的建站文件</div><div class="line"><span class="variable">$npm</span> install <span class="regexp">//</span>安装依赖项</div></pre></td></tr></table></figure></p>
<h1 id="安装remarkable"><a href="#安装remarkable" class="headerlink" title="安装remarkable"></a>安装remarkable</h1><p>linux 下有很多好用的 <em>markdown</em> 博客撰写工具，诸如<a href="https://atom.io/" target="_blank" rel="external">Atom</a>、<a href="http://pad.haroopress.com/" target="_blank" rel="external">Haroopad</a>、<a href="https://github.com/voldyman/MarkMyWords" target="_blank" rel="external">Mark My Words</a>、<a href="http://remarkableapp.github.io/linux/download.html" target="_blank" rel="external">remarkable</a> 等等。其中 <a href="http://remarkableapp.github.io/linux/download.html" target="_blank" rel="external">remarkable</a> 最为流行。 <a href="http://remarkableapp.github.io/linux/download.html" target="_blank" rel="external">remarkable</a> 是linux下一款免费的 <em>markdown</em> 编辑器。关于它的介绍这里不多说，可自行查阅。<br>安装之前先安装一些依赖：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$sudo</span> apt-<span class="meta">get</span> install   python3-<span class="keyword">markdown </span>  python3-<span class="keyword">bs4 </span> wkhtmltopdf</div></pre></td></tr></table></figure></p>
<p>下载<a href="http://remarkableapp.github.io/linux/download.html" target="_blank" rel="external">remarkable-deb</a> 目前的版本为 1.87：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$wget</span> http:<span class="regexp">//</span>remarkableapp.github.io<span class="regexp">/files/</span>remarkable_1.<span class="number">87</span>_all.deb</div></pre></td></tr></table></figure></p>
<p>安装：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> dpkg -<span class="selector-tag">i</span> remarkable_1.<span class="number">87</span>_all<span class="selector-class">.deb</span></div><div class="line"><span class="variable">$sudo</span> apt-get install -f 补足有可能的缺失依赖项</div></pre></td></tr></table></figure></p>
<p>接下来就可以开始博客的撰写了，关于博客的撰写与发布请参考我站内关于 <em>hexo</em> 的文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;有时候调试 &lt;em&gt;linux&lt;/em&gt;，写代码都是在 &lt;em&gt;ubuntu&lt;/em&gt; 环境下，随时需要记录一些调试的过程，这时候就需要在 &lt;em&gt;ubuntu&lt;/em&gt; 下配置 &lt;em&gt;hexo&lt;/em&gt; 环境，并撰写博客。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://stevenshi.me/categories/hexo/"/>
    
    
      <category term="ubuntu hexo" scheme="http://stevenshi.me/tags/ubuntu-hexo/"/>
    
  </entry>
  
  <entry>
    <title>贝叶斯滤波库在树莓派上的移植</title>
    <link href="http://stevenshi.me/2017/05/23/ros-navigation-compile/"/>
    <id>http://stevenshi.me/2017/05/23/ros-navigation-compile/</id>
    <published>2017-05-23T05:05:18.000Z</published>
    <updated>2017-05-23T23:50:31.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>计划在树莓派上仿真一下<a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 的导航功能，需要安装 <a href="https://github.com/ros-planning/navigation" target="_blank" rel="external">navigation</a>包，结果编译 <a href="https://github.com/ros-planning/navigation" target="_blank" rel="external">navigation</a>包 时提示错误：<br>　　<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">– <span class="keyword">package</span> ‘orocos-bfl’ not found </div><div class="line">CMake Error at <span class="regexp">/usr/</span>share<span class="regexp">/cmake-2.8/</span>Modules/FindPkgConfig.<span class="string">cmake:</span><span class="number">283</span> (message): </div><div class="line">A required <span class="keyword">package</span> was not found </div><div class="line">Call Stack (most recent call first): </div><div class="line"><span class="regexp">/usr/</span>share<span class="regexp">/cmake-2.8/</span>Modules/FindPkgConfig.<span class="string">cmake:</span><span class="number">337</span> (_pkg_check_modules_internal) </div><div class="line">robot_pose_ekf/CMakeLists.<span class="string">txt:</span><span class="number">6</span> (pkg_check_modules)</div></pre></td></tr></table></figure></p>
<p>于是填了后面的坑…<br><a id="more"></a></p>
<h1 id="贝叶斯滤波库"><a href="#贝叶斯滤波库" class="headerlink" title="贝叶斯滤波库"></a>贝叶斯滤波库</h1><p> <em>package ‘orocos-bfl’</em>是贝叶斯滤波库，参考 <a href="http://www.orocos.org/bfl" target="_blank" rel="external">BFL</a>。贝叶斯滤波库能够为动态贝叶斯网络的推理提供一个应用程序独立框架，以及递归信息处理和基于贝叶斯规则的估计算法,如卡尔曼滤波器,粒子过滤器、蒙特卡洛方法等，多应用于机器人的导航中。</p>
<h2 id="移植"><a href="#移植" class="headerlink" title="移植"></a>移植</h2><p>首先下载源码：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$wget</span> http:<span class="regexp">//</span>people.mech.kuleuven.be<span class="regexp">/~tdelaet/</span>bfl_tar<span class="regexp">/orocos-bfl-0.6.1-src.tar.bz2</span></div></pre></td></tr></table></figure></p>
<p>解压并建立 <em>build</em> 目录：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">tar jxvf orocos-bfl-0.6.1-src.tar.bz2</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span>  orocos-bfl-0.6.1-src</span></div><div class="line"><span class="meta">$</span><span class="bash">mkdir build</span></div></pre></td></tr></table></figure></p>
<p>编译：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$cmake</span> .</span></div></pre></td></tr></table></figure></p>
<p>提示错误：<img src="/2017/05/23/ros-navigation-compile/ltierror.jpg" alt=""><br>缺少 <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 库, <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 是一个基于 <em>C++</em> 的面向对象的图像处理和计算机视觉库。</p>
<h3 id="LTI-Lib库的移植"><a href="#LTI-Lib库的移植" class="headerlink" title="LTI-Lib库的移植"></a>LTI-Lib库的移植</h3><p>方法参考 <a href="https://people.mech.kuleuven.be/~tdelaet/bfl_doc/installation_guide/node5.html" target="_blank" rel="external">LTI-Install-Guide</a>，树莓派貌似只能源码安装。<br>安装之前先安装 <em>libxt-dev</em> 和 <em>libboost</em><br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install libxt-dev</span></div><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install libboost-dev</span></div></pre></td></tr></table></figure></p>
<p>当然也可以源码安装<em>libxt-dev</em>：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$https</span>:<span class="comment">//launchpad.net/ubuntu/+archive/primary/+files/libxt_1.1.4.orig.tar.gz</span></div><div class="line"><span class="variable">$tar</span> zxvf libxt_1.<span class="number">1.4</span><span class="selector-class">.orig</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line"><span class="variable">$cd</span> libxt_1.<span class="number">1.4</span><span class="selector-class">.orig</span></div><div class="line"><span class="variable">$make</span>  </div><div class="line"><span class="variable">$sudo</span> make install</div></pre></td></tr></table></figure></p>
<p>源码安装 <a href="https://sourceforge.net/projects/boost/files/" target="_blank" rel="external">libboost-dev</a> 参考 <a href="https://people.mech.kuleuven.be/~tdelaet/bfl_doc/installation_guide/node7.html" target="_blank" rel="external">Boost-Install</a><br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">tar -xzvf boost_1_34_0.tar.gz</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> boost_1_34_o</span></div><div class="line"><span class="meta">$</span><span class="bash">./configure</span></div><div class="line"><span class="meta">$</span><span class="bash">make </span></div><div class="line"><span class="meta">$</span><span class="bash">sudo make install</span></div></pre></td></tr></table></figure></p>
<p>源码安装<a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a><br>下载源码<a href="https://sourceforge.net/projects/ltilib/files/LTI-Lib-1/1.9.16/" target="_blank" rel="external">LTI-Source-Code</a>,并解压进入到 <em>linux</em> 目录：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$tar</span> zxvf <span class="number">100410</span>_ltilib-<span class="number">1.9</span>.<span class="number">16</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line"><span class="variable">$tar</span> zxvf <span class="number">100410</span>_ltilib-extras-<span class="number">1.9</span>.<span class="number">16</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line"><span class="variable">$cd</span> ltilib/linux</div></pre></td></tr></table></figure></p>
<p>生成Makefile：</p>
<p>　　<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$make -f Makefile.cvs</div><div class="line">$<span class="string">./configure</span> <span class="params">--disable-debug</span> <span class="params">--without-gtk</span> <span class="params">--disable-gtk</span> <span class="params">--prefix=</span>~<span class="string">/install</span></div></pre></td></tr></table></figure></p>
<p>编译安装,默认的安装目录是/usr/local/:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$make</span></span></div><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> make install</span></div></pre></td></tr></table></figure></p>
<h2 id="再次回到BFL的编译"><a href="#再次回到BFL的编译" class="headerlink" title="再次回到BFL的编译"></a>再次回到BFL的编译</h2><p>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">tar -xjvf orocos-bfl-0.6.1-src.tar.bz2<span class="comment">#解压</span></span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> orocos-ocl-1.8.0</span></div><div class="line"><span class="meta">$</span><span class="bash">mkdir build</span></div><div class="line"><span class="meta">$</span><span class="bash">cmake .</span></div><div class="line"><span class="meta">$</span><span class="bash">make</span></div><div class="line"><span class="meta">$</span><span class="bash">make check //测试编译结果</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo make install //安装</span></div></pre></td></tr></table></figure></p>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>编译过程中遇到很多问题，尤其是 <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 库的编译，该库貌似最近没有更新，而且不适应新的 <em>G++</em>编译器。</p>
<h2 id="aclocal-not-found"><a href="#aclocal-not-found" class="headerlink" title="aclocal: not found"></a>aclocal: not found</h2><p>编译 <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 时在步骤 <em>make</em> 提示错误：<br>　　<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$<span class="built_in">make</span> -f Makefile.cvs</div><div class="line"> Calling aclocal...</div><div class="line"> /bin/sh: <span class="number">2</span>: aclocal: <span class="keyword">not</span> found</div><div class="line"> <span class="built_in">make</span>: *** [aclocal.m4] <span class="built_in">Error</span> <span class="number">127</span></div></pre></td></tr></table></figure></p>
<p>需要安装 <em>autoconf</em><br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install autoconf</span></div></pre></td></tr></table></figure></p>
<h2 id="cannot-run-bin-bash-config-sub"><a href="#cannot-run-bin-bash-config-sub" class="headerlink" title="cannot run /bin/bash ./config.sub"></a>cannot run /bin/bash ./config.sub</h2><p>在 <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 的编译配置步骤./configure出现错误：<br>　　<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cannot <span class="built_in">run</span> /bin/bash ./<span class="built_in">config</span>.sub</div></pre></td></tr></table></figure></p>
<p>确定已安装libtool libtool-ltdl libtool-ltdl-devel<br>如果没安装，使用以下命令安装：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get  install  libtool</span></div><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get  install  libltdl-dev</span></div></pre></td></tr></table></figure></p>
<p>如果都已安装应该是链接出了问题。<br>　　<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ls -al <span class="built_in">config</span>/* 查看链接路径</div><div class="line">$<span class="built_in">find</span> / -name <span class="built_in">config</span>.<span class="built_in">sub</span> 或者locate <span class="built_in">config</span>.<span class="built_in">sub</span> 查找<span class="built_in">config</span>.<span class="built_in">sub</span>的路径</div><div class="line">$ln -s -f /正确路径/<span class="built_in">config</span>.<span class="built_in">sub</span> <span class="built_in">config</span>.<span class="built_in">sub</span></div></pre></td></tr></table></figure></p>
<p>例如我的:<br>　　<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ln -s -f /usr/share/libtool/<span class="built_in">config</span>/<span class="built_in">config</span>.<span class="built_in">sub</span> <span class="built_in">config</span>.<span class="built_in">sub</span></div></pre></td></tr></table></figure></p>
<p>同样的道理：config.guess路径不对也这样改过来,或者直接拷贝系统下的文件：<br> <em>/usr/share/libtool/config/config.sub</em> 和 <em>config.guess </em>到LTI源码目录。</p>
<h2 id="configure-error-cannot-compile-a-simple-Fortran-program"><a href="#configure-error-cannot-compile-a-simple-Fortran-program" class="headerlink" title="configure: error: cannot compile a simple Fortran program"></a>configure: error: cannot compile a simple Fortran program</h2><p> 配置 <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 时出现错误：<br>　　<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">./configure</div><div class="line">checking <span class="keyword">for</span> Fortran <span class="number">77</span> libraries <span class="keyword">of</span> ...</div><div class="line">checking <span class="keyword">for</span> gcc... gcc</div><div class="line">checking whether we are <span class="keyword">using</span> the GNU C compiler... yes</div><div class="line">checking whether gcc accepts -g... yes</div><div class="line">checking <span class="keyword">for</span> gcc <span class="keyword">option</span> <span class="keyword">to</span> accept ISO C89... none needed</div><div class="line">checking <span class="keyword">for</span> dummy main <span class="keyword">to</span> link <span class="keyword">with</span> Fortran <span class="number">77</span> libraries... none</div><div class="line">checking <span class="keyword">for</span> Fortran <span class="number">77</span> name-mangling scheme... configure: <span class="keyword">error</span>: <span class="keyword">in</span> `/home/steven/workspace/ros/ ltilib/linux<span class="comment">':</span></div><div class="line">configure: <span class="keyword">error</span>: cannot compile a simple Fortran program</div><div class="line">See `config.log<span class="comment">' for more details</span></div></pre></td></tr></table></figure></p>
<p>解决：<br>　　<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sudo apt-<span class="built_in">get</span> install f2c gfortran libblas-<span class="built_in">dev</span> liblapack-<span class="built_in">dev</span> libpcre3-<span class="built_in">dev</span> libreadline-<span class="built_in">dev</span></div></pre></td></tr></table></figure></p>
<h2 id="setParameters’-was-not-declared-in-this-scope"><a href="#setParameters’-was-not-declared-in-this-scope" class="headerlink" title="setParameters’ was not declared in this scope"></a>setParameters’ was not declared in this scope</h2><p>　　<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">make</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span> In instantiation of ‘<span class="symbol">lti:</span><span class="symbol">:cyclicTridiagonalEquationSystem&lt;T&gt;</span><span class="symbol">:</span><span class="symbol">:cyclicTridiagonalEquationSystem</span>(const <span class="symbol">lti:</span><span class="symbol">:cyclicTridiagonalEquationSystem&lt;T&gt;</span><span class="symbol">:</span><span class="symbol">:parameters&amp;</span>) [with T = double]’:</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem.<span class="symbol">cpp:</span><span class="number">44</span><span class="symbol">:</span><span class="number">18</span>:   required from here</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span><span class="number">40</span><span class="symbol">:</span><span class="number">28</span>: <span class="symbol">error:</span> ‘setParameters’ was <span class="keyword">not</span> declared <span class="keyword">in</span> this scope, <span class="keyword">and</span> no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]</div><div class="line">    setParameters(theParams);</div><div class="line">                           ^</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span><span class="number">40</span><span class="symbol">:</span><span class="number">28</span>: <span class="symbol">note:</span> declarations <span class="keyword">in</span> dependent  base ‘<span class="symbol">lti:</span><span class="symbol">:functor</span>’ are <span class="keyword">not</span> found by unqualified lookup</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span><span class="number">40</span><span class="symbol">:</span><span class="number">28</span>: <span class="symbol">note:</span> <span class="keyword">use</span> ‘this-&gt;setParameters’ instead</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span> In instantiation of ‘<span class="symbol">lti:</span><span class="symbol">:cyclicTridiagonalEquationSystem&lt;T&gt;</span><span class="symbol">:</span><span class="symbol">:cyclicTridiagonalEquationSystem</span>(<span class="symbol">lti:</span><span class="symbol">:vector&lt;T&gt;</span>, <span class="symbol">lti:</span><span class="symbol">:vector&lt;T&gt;</span>, <span class="symbol">lti:</span><span class="symbol">:vector&lt;T&gt;</span>, const T&amp;, const T&amp;) [with T = double]’:</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem.<span class="symbol">cpp:</span><span class="number">44</span><span class="symbol">:</span><span class="number">18</span>:   required from here</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span><span class="number">54</span><span class="symbol">:</span><span class="number">20</span>: <span class="symbol">error:</span> ‘setParameters’ was <span class="keyword">not</span> declared <span class="keyword">in</span> this scope, <span class="keyword">and</span> no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]</div></pre></td></tr></table></figure></p>
<p>经确认 <em>setParameters</em> 是有定义的，在文件 <em>src/basics/ltiFunctor.h</em> 中。突然想到是不是编译器的版本问题，果断降级编译器，考虑将GCC降级 目前系统的gcc版本为4.8将其降级为4.6：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install gcc-4.6 g++-4.6</span></div></pre></td></tr></table></figure></p>
<p>如果下载deb文件，则安装使用命令：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> dpkg –<span class="selector-tag">i</span> *<span class="selector-class">.deb</span></div><div class="line"><span class="variable">$sudo</span> apt-get -f install <span class="comment">//然后修改系统依赖</span></div></pre></td></tr></table></figure></p>
<p>设置系统使用的默认 GCC<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ln</span> -f -s <span class="regexp">/usr/</span>bin<span class="regexp">/gcc-4.6 /u</span>sr<span class="regexp">/bin/g</span>cc</div><div class="line"><span class="variable">$ln</span> -f -s <span class="regexp">/usr/</span>bin<span class="regexp">/gcc-ar-4.6 /u</span>sr<span class="regexp">/bin/g</span>cc-ar</div><div class="line"><span class="variable">$ln</span> -f -s <span class="regexp">/usr/</span>bin<span class="regexp">/gcc-nm-4.6 /u</span>sr<span class="regexp">/bin/g</span>cc-nm</div><div class="line"><span class="variable">$ln</span> -f -s <span class="regexp">/usr/</span>bin<span class="regexp">/gcc-ranlib-4.6 /u</span>sr<span class="regexp">/bin/g</span>cc-ranlib</div><div class="line"><span class="variable">$ln</span> -f -s <span class="regexp">/usr/</span>bin<span class="regexp">/g++-4.6 /u</span>sr<span class="regexp">/bin/g</span>++</div></pre></td></tr></table></figure></p>
<h2 id="linux-videodev-h-No-such-file-or-directory"><a href="#linux-videodev-h-No-such-file-or-directory" class="headerlink" title="linux/videodev.h: No such file or directory"></a>linux/videodev.h: No such file or directory</h2><p>make 后出现的错误：<br>　　<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">../src/io/ltiJPEGLibFunctor.cpp: In member function ‘bool lti::loadJPEG::<span class="keyword">load</span>(<span class="keyword">FILE</span>*, lti::image&amp;, bool&amp;)’:</div><div class="line">../src/io/ltiJPEGLibFunctor.cpp:<span class="number">309</span>:<span class="number">35</span>: <span class="keyword">warning</span>: <span class="keyword">variable</span> ‘rowCounter’ <span class="keyword">set</span> but <span class="keyword">not</span> used [-Wunused-but-<span class="keyword">set</span>-<span class="keyword">variable</span>]</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiLeutronFrameGrabber.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiLncFeatureFile.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiLoadImageList.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiLoadVectorImageList.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiLTIFunctor.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiMicroEnablePulnix.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiPanTiltUnit.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiPNGFunctor.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiPNGLibFunctor.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiQuickCam.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiRunLengthCodec.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiSonyEviD100P.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiToUCam.cpp</div><div class="line">../src/io/ltiToUCam.cpp:<span class="number">57</span>:<span class="number">28</span>: fatal <span class="keyword">error</span>: linux/videodev.h: <span class="keyword">No</span> such <span class="keyword">file</span> <span class="keyword">or</span> <span class="keyword">directory</span></div><div class="line">compilation terminated.</div><div class="line">make: *** [../obj/debug/ltiToUCam.o] <span class="keyword">Error</span> <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>新版内核中已经不再有 <em>videodev.h</em> 文件，而是用 <em>libv4l1-videodev.h</em> 代替。先查找系统中是否有该文件：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> find / -name videodev.h</span></div></pre></td></tr></table></figure></p>
<p>系统不存在此文件需要安装：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install libv4l-dev</span></div></pre></td></tr></table></figure></p>
<p>指向：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> ln -s <span class="regexp">/usr/i</span>nclude<span class="regexp">/libv4l1-videodev.h /u</span>sr<span class="regexp">/include/</span>linux<span class="regexp">/videodev.h</span></div></pre></td></tr></table></figure></p>
<h2 id="pwc-ioctl-h-No-such-file-or-directory"><a href="#pwc-ioctl-h-No-such-file-or-directory" class="headerlink" title="pwc-ioctl.h: No such file or directory"></a>pwc-ioctl.h: No such file or directory</h2><p>lit库make 后的错误：<br>　　<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> ..<span class="regexp">/src/</span>io/ltiToUCam.<span class="string">cpp:</span><span class="number">58</span>:<span class="number">23</span>: fatal <span class="string">error:</span> pwc-ioctl.<span class="string">h:</span> No such file or directory</div><div class="line">compilation terminated.</div></pre></td></tr></table></figure></p>
<p>系统提示不存在文件 <a href="https://saillard.org/linux/pwc/" target="_blank" rel="external">pwc-ioctl.h</a> 这个文件应该是webcamera的驱动文件,下载地址: <a href="https://saillard.org/linux/pwc/files/pwc-10.0.11.tar.bz2" target="_blank" rel="external">https://saillard.org/linux/pwc/files/pwc-10.0.11.tar.bz2</a><br>下载完后，解压并找到 <em>pwc-ioctl.h</em> 文件，拷贝到 <em>lti</em> 源代码 的 <em>/src/io/</em> 目录下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;计划在树莓派上仿真一下&lt;a href=&quot;http://www.ros.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS&lt;/a&gt; 的导航功能，需要安装 &lt;a href=&quot;https://github.com/ros-planning/navigation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;navigation&lt;/a&gt;包，结果编译 &lt;a href=&quot;https://github.com/ros-planning/navigation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;navigation&lt;/a&gt;包 时提示错误：&lt;br&gt;　　&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;– &lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; ‘orocos-bfl’ not found &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CMake Error at &lt;span class=&quot;regexp&quot;&gt;/usr/&lt;/span&gt;share&lt;span class=&quot;regexp&quot;&gt;/cmake-2.8/&lt;/span&gt;Modules/FindPkgConfig.&lt;span class=&quot;string&quot;&gt;cmake:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;283&lt;/span&gt; (message): &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;A required &lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; was not found &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Call Stack (most recent call first): &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;/usr/&lt;/span&gt;share&lt;span class=&quot;regexp&quot;&gt;/cmake-2.8/&lt;/span&gt;Modules/FindPkgConfig.&lt;span class=&quot;string&quot;&gt;cmake:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;337&lt;/span&gt; (_pkg_check_modules_internal) &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;robot_pose_ekf/CMakeLists.&lt;span class=&quot;string&quot;&gt;txt:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; (pkg_check_modules)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;于是填了后面的坑…&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="BayesianFiltering" scheme="http://stevenshi.me/tags/BayesianFiltering/"/>
    
  </entry>
  
  <entry>
    <title>ROS多机通信</title>
    <link href="http://stevenshi.me/2017/05/22/ros-communication/"/>
    <id>http://stevenshi.me/2017/05/22/ros-communication/</id>
    <published>2017-05-22T12:43:31.000Z</published>
    <updated>2017-05-23T00:23:33.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ROS移动平台使用的是树莓派3B，资源有限，只能运行一些低级任务，又不具备显示器，想实时的看到ROS的运行情况只能依靠远程登录的方式。可以让PC负责运行界面，树莓派负责底层的传感器数据采集，比如激光雷达的数据采集，通过网络传给PC，PC上运行界面程序，将树莓派传过来的数据进行处理，并生成地图。要实现类似功能，需要进行多个运行ROS的设备间的通讯。<br><a id="more"></a></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>首先保证 <em>raspberryPi</em> 与 <em>PC</em>在一个局域网内，并获取各自的 <em>IP</em> 地址。假设 <em>PC</em> 的 <em>IP</em>：192.168.2.102；<em>raspberryPi</em> 的 <em>IP</em>：192.168.2.105；之后查看各自的主机名,使用命令：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$hostname</span></span></div></pre></td></tr></table></figure></p>
<p>假设 <em>PC</em> 的主机名为： <em>steven-laptop</em>,而 <em>raspberryPi</em> 的主机名为 <em>raspberry</em>。我们需要将各自的主机名通知对方。在 <em>raspberryPi</em> 中打开 <em>/etc/hosts</em>文件加入 <em>PC</em> 的主机名以及IP地址：<br>　　<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.2</span><span class="selector-class">.102</span> <span class="selector-tag">steven-laptop</span></div></pre></td></tr></table></figure></p>
<p>同样在 <em>PC</em> 中告知 <em>raspberryPi</em> 的主机名和 <em>IP</em> 地址,修改<em>/etc/hosts</em>：<br>　　<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.2</span><span class="selector-class">.105</span> <span class="selector-tag">raspberry</span></div></pre></td></tr></table></figure></p>
<p>此时，可以使用:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$ping</span> 对方主机名</span></div></pre></td></tr></table></figure></p>
<p>进行连接测试。完成之后在 <em>PC</em> 中指定ROS通讯的主机名以及ROS服务器的地,让 <em>PC</em> 作为ROS服务器：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> ROS_HOSTNAME=steven-laptop</div><div class="line"><span class="keyword">export</span> ROS_MASTER_URI=http:<span class="comment">//steven-laptop:11311</span></div></pre></td></tr></table></figure></p>
<p>在 <em>raspberryPi</em> 中指定 <em>PC</em> 作为 <em>ROS Master</em>:<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> ROS_MASTER_URI=http:<span class="comment">//steven-laptop:11311</span></div></pre></td></tr></table></figure></p>
<h1 id="跨机运行talker-listenner"><a href="#跨机运行talker-listenner" class="headerlink" title="跨机运行talker/listenner"></a>跨机运行talker/listenner</h1><p>做完以上配置，即可进行多机通信的测试。先在 <em>PC</em> 上开一个 <em>terminal</em> 运行 <em>roscore</em>:<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$roscore</span> &amp; <span class="regexp">//</span><span class="string">'&amp;'</span>指后台运行</div></pre></td></tr></table></figure></p>
<p>然后运行 <em>beginner_tutorials</em>(参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials" target="_blank" rel="external">ROS tutorial</a>) 中的节点 <em>talker</em>;在  <em>raspberryPi</em> 中运行 <em>beginner_tutorials</em> 中的 <em>listenner</em> 节点。保证两个节点中发布的主题和订阅的主题名字一样。<br>此时可以在 <em>raspberryPi</em> 中收到 <em>PC</em> 传过来的信息：<br><img src="/2017/05/22/ros-communication/talker.jpg" alt=""></p>
<h1 id="跨机运行turtlesim"><a href="#跨机运行turtlesim" class="headerlink" title="跨机运行turtlesim"></a>跨机运行turtlesim</h1><p>在PC上运行：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscore</span> &amp; </span></div><div class="line"><span class="meta"><span class="meta-keyword">$rosrun</span> turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>
<p>在 <em>raspberryPi</em> 上使用键盘进行控制：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rosrun</span> turtlesim turtle_teleop_key</span></div></pre></td></tr></table></figure></p>
<p>效果图：<img src="/2017/05/22/ros-communication/turtle.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;ROS移动平台使用的是树莓派3B，资源有限，只能运行一些低级任务，又不具备显示器，想实时的看到ROS的运行情况只能依靠远程登录的方式。可以让PC负责运行界面，树莓派负责底层的传感器数据采集，比如激光雷达的数据采集，通过网络传给PC，PC上运行界面程序，将树莓派传过来的数据进行处理，并生成地图。要实现类似功能，需要进行多个运行ROS的设备间的通讯。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="Communication" scheme="http://stevenshi.me/tags/Communication/"/>
    
  </entry>
  
</feed>
