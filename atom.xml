<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Steven&#39;s blog</title>
  <subtitle>点一盏灯 给需要的人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://stevenshi.me/"/>
  <updated>2017-05-26T08:08:18.183Z</updated>
  <id>http://stevenshi.me/</id>
  
  <author>
    <name>Steven Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ROS 初级&lt;四&gt; 编译 catkin 程序包</title>
    <link href="http://stevenshi.me/2017/05/26/ros-primary-tutorial-4/"/>
    <id>http://stevenshi.me/2017/05/26/ros-primary-tutorial-4/</id>
    <published>2017-05-26T07:10:04.000Z</published>
    <updated>2017-05-26T08:08:18.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>Catkin 程序包的编译使用命令 <a href="http://wiki.ros.org/catkin/commands/catkin_make" target="_blank" rel="external">catkin_make</a>。在 catkin 工作空间的根目录下 <em>~/catkin_ws</em> 执行该命令即可编译 catkin 程序包：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>该命令会在 <em>~/catkin_ws</em> 目录下生成 <em>build </em> 和 <em>devel</em> 文件夹，<em>build </em>是 <em>cmake</em> 和 <em>make</em> 命令执行的地方，<em>devel</em> 文件夹内部用于保存编译生成文件，目标文件以及配置文件 setup.*sh等。该命令等价于：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> src</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_init_workspace</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ..</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir build</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> build</span></div><div class="line"><span class="meta">$</span><span class="bash"> cmake ../src -DCMAKE_INSTALL_PREFIX=../install -DCATKIN_DEVEL_PREFIX=../devel</span></div><div class="line"><span class="meta">$</span><span class="bash"> make</span></div></pre></td></tr></table></figure></p>
<p>如果只想编译指定的某个包或几个包可以使用以下命令：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class="string">"package1;package2"</span></span></div></pre></td></tr></table></figure></p>
<p>比如我只想编译 mypackage 和 beginner_tutorial这两个包，那么命令可写成：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class="string">"mypackage,beginner_tutorial"</span></span></div></pre></td></tr></table></figure></p>
<p>注意命令中的 = 前后不能有空格。<br>输出：<br>  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Base <span class="string">path:</span> <span class="regexp">/home/</span>steven/catkin_ws</div><div class="line">Source <span class="string">space:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>src</div><div class="line">Build <span class="string">space:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>build</div><div class="line">Devel <span class="string">space:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>devel</div><div class="line">Install <span class="string">space:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>install</div><div class="line"></div><div class="line"> Running <span class="string">command:</span> <span class="string">"cmake /home/steven/catkin_ws/src -DCATKIN_WHITELIST_PACKAGES=mypackage,beginner_tutorial -DCATKIN_DEVEL_PREFIX=/home/steven/catkin_ws/devel -DCMAKE_INSTALL_PREFIX=/home/steven/catkin_ws/install -G Unix Makefiles"</span> <span class="keyword">in</span> <span class="string">"/home/steven/catkin_ws/build"</span></div><div class="line"></div><div class="line">-- Using <span class="string">CATKIN_DEVEL_PREFIX:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>devel</div><div class="line">-- Using <span class="string">CMAKE_PREFIX_PATH:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>devel;<span class="regexp">/opt/</span>ros/indigo</div><div class="line">-- This workspace <span class="string">overlays:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>devel;<span class="regexp">/opt/</span>ros/indigo</div><div class="line">-- Using <span class="string">PYTHON_EXECUTABLE:</span> <span class="regexp">/usr/</span>bin/python</div><div class="line">-- Using Debian Python <span class="keyword">package</span> layout</div><div class="line">-- Using <span class="string">empy:</span> <span class="regexp">/usr/</span>bin/empy</div><div class="line">-- Using <span class="string">CATKIN_ENABLE_TESTING:</span> ON</div><div class="line">-- Call enable_testing()</div><div class="line">-- Using <span class="string">CATKIN_TEST_RESULTS_DIR:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>build/test_results</div><div class="line">-- Found <span class="string">gtest:</span> gtests will be built</div><div class="line">-- Using Python <span class="string">nosetests:</span> <span class="regexp">/usr/</span>bin/nosetests<span class="number">-2.7</span></div><div class="line">-- catkin <span class="number">0.6</span><span class="number">.18</span></div><div class="line">-- BUILD_SHARED_LIBS is on</div><div class="line">-- Using <span class="string">CATKIN_WHITELIST_PACKAGES:</span> mypackage,beginner_tutorial</div><div class="line">-- Configuring done</div><div class="line">-- Generating done</div><div class="line">-- Build files have been written <span class="string">to:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>build</div><div class="line"></div><div class="line"> Running <span class="string">command:</span> <span class="string">"make -j1 -l1"</span> <span class="keyword">in</span> <span class="string">"/home/steven/catkin_ws/build"</span></div></pre></td></tr></table></figure></p>
<p>如果想恢复编译所有包使用命令：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class="string">""</span></span></div></pre></td></tr></table></figure></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>编译完成后生成的文件位于 <em>devel</em> 目录下，可以使用以下命令进行安装：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make install</span></div></pre></td></tr></table></figure></p>
<p>以上命令等价于：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/build</span></div><div class="line">//If cmake hasn't already been called</div><div class="line"><span class="meta">$</span><span class="bash"> cmake ../src -DCMAKE_INSTALL_PREFIX=../install -DCATKIN_DEVEL_PREFIX=../devel</span></div><div class="line"><span class="meta">$</span><span class="bash"> make</span></div><div class="line"><span class="meta">$</span><span class="bash"> make install</span></div></pre></td></tr></table></figure></p>
<p>执行完以上命令后会在 <em>~/catkin_ws</em> 目录下生成 <em>install</em> 文件夹，所有编译完成的包都安装到了 <em>install</em> 下。里面包含 <em>setup.bash</em> 配置文件，可以使用 <em>source</em> 让系统可以找到这些编译完后的可执行包。<br>可以通过以下命令改变安装位置：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make -DCMAKE_INSTALL_PREFIX=/opt/ros/indigo install</span></div></pre></td></tr></table></figure></p>
<p>位置 <em>/opt/ros/indigo</em> 为系统目录，一般不建议将自己的包安装于此。安装完后记得 <em>source</em> 一下才能使用：<br>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$source</span> <span class="regexp">/opt/</span>ros<span class="regexp">/indigo/</span>setup.bash</div></pre></td></tr></table></figure></p>
<p>或者：<br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span></div></pre></td></tr></table></figure></p>
<p>可以将这句话添加到自己的 <em>~/.bashrc</em> 中：<br>  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">source</span> ~<span class="regexp">/catkin_ws/</span>devel<span class="regexp">/setup.bash</span></div></pre></td></tr></table></figure></p>
<p>参考 <a href="http://wiki.ros.org/catkin/commands/catkin_make" target="_blank" rel="external">catkin_make</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;编译&quot;&gt;&lt;a href=&quot;#编译&quot; class=&quot;headerlink&quot; title=&quot;编译&quot;&gt;&lt;/a&gt;编译&lt;/h1&gt;&lt;p&gt;Catkin 程序包的编译使用命令 &lt;a href=&quot;http://wiki.ros.org/catkin/commands/catkin_make&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;catkin_make&lt;/a&gt;。在 catkin 工作空间的根目录下 &lt;em&gt;~/catkin_ws&lt;/em&gt; 执行该命令即可编译 catkin 程序包：&lt;br&gt;   &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/catkin_ws&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;catkin_make&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="Catkin_make" scheme="http://stevenshi.me/tags/Catkin-make/"/>
    
  </entry>
  
  <entry>
    <title>ROS 初级&lt;三&gt; 创建ROS程序包</title>
    <link href="http://stevenshi.me/2017/05/26/ros-primary-tutorial-3/"/>
    <id>http://stevenshi.me/2017/05/26/ros-primary-tutorial-3/</id>
    <published>2017-05-26T03:23:13.000Z</published>
    <updated>2017-05-26T07:10:49.960Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习 ROS 程序包的创建，使用工具 <a href="http://wiki.ros.org/catkin/commands/catkin_create_pkg" target="_blank" rel="external">catkin_create_pkg</a> 创建新程序包。</p>
<h1 id="catkin-程序包的组成"><a href="#catkin-程序包的组成" class="headerlink" title="catkin 程序包的组成"></a>catkin 程序包的组成</h1><p> catkin 程序包必须包含 <a href="http://wiki.ros.org/catkin/package.xml" target="_blank" rel="external">package.xml</a> 文件和 <a href="http://wiki.ros.org/catkin/CMakeLists.txt" target="_blank" rel="external">CMakeLists.txt</a> 文件。<em>package.xml</em> 提供有关程序包的元信息，每个目录下只能有一个程序包：<br>   <figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">beginner_tutorials/ </span>    </div><div class="line"> <span class="meta">include</span>/                   </div><div class="line"> msg/                       </div><div class="line"> src/                        </div><div class="line"> srv/                       </div><div class="line"> CMakeLists.txt              </div><div class="line"> package.xml</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="catkin工作空间"><a href="#catkin工作空间" class="headerlink" title="catkin工作空间"></a>catkin工作空间</h1><p>一个简单的 <a href="http://wiki.ros.org/catkin/workspaces" target="_blank" rel="external">catkin workspace</a> 结构如下：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">workspace_folder/        -- WORKSPACE</div><div class="line">  src/                   -- SOURCE SPACE</div><div class="line">    CMakeLists<span class="selector-class">.txt</span>       -- <span class="string">'Toplevel'</span> CMake file, provided by catkin</div><div class="line">    package_1/</div><div class="line">      CMakeLists<span class="selector-class">.txt</span>     -- CMakeLists<span class="selector-class">.txt</span> file <span class="keyword">for</span> package_1</div><div class="line">      package<span class="selector-class">.xml</span>        -- Package manifest <span class="keyword">for</span> package_1</div><div class="line">    ...</div><div class="line">    package_n/</div><div class="line">      CMakeLists<span class="selector-class">.txt</span>     -- CMakeLists<span class="selector-class">.txt</span> file <span class="keyword">for</span> package_n</div><div class="line">      package<span class="selector-class">.xml</span>        -- Package manifest <span class="keyword">for</span> package_n</div></pre></td></tr></table></figure></p>
<h1 id="创建catkin程序包"><a href="#创建catkin程序包" class="headerlink" title="创建catkin程序包"></a>创建catkin程序包</h1><p>使用 <a href="http://wiki.ros.org/catkin/commands/catkin_create_pkg" target="_blank" rel="external">catkin_create_pkg</a> 创建自己的 catkin 程序包，格式：<br>   <figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$catkin_create_pkg</span> &lt;package_name&gt; <span class="selector-attr">[depend1]</span> <span class="selector-attr">[depend2]</span> <span class="selector-attr">[depend3]</span></div></pre></td></tr></table></figure></p>
<p>实例：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/src </span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_create_pkg beginner_tutorials std_msgs rospy roscpp</span></div></pre></td></tr></table></figure></p>
<p>上面命令创建了一个名为 <em>beginner_tutorials</em> 的 catkin 程序包，这个程序包依赖于 std_msgs、roscpp 和 rospy。执行这个命令后在 <em>~/catkin_ws/src</em> 目录下将会创建一个名为 <em>beginner_tutorials</em> 的文件夹，这个文件夹里面包含一个 <em>package.xml</em> 文件和一个 <em>CMakeLists.txt</em> 文件，这两个文件都已经自动包含了部分在执行 <a href="http://wiki.ros.org/catkin/commands/catkin_create_pkg" target="_blank" rel="external">catkin_create_pkg</a> 命令时提供的信息。 </p>
<h1 id="程序包依赖关系"><a href="#程序包依赖关系" class="headerlink" title="程序包依赖关系"></a>程序包依赖关系</h1><p>可以使用 <em>rospack</em> 命令来查看某个程序包的依赖包：<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rospack</span> depends1 beginner_tutorials <span class="regexp">//</span>查看一级依赖</div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">roscpp</span></div><div class="line">rospy</div><div class="line">std_msgs</div></pre></td></tr></table></figure></p>
<p>列出的依赖包正是我们在用 <a href="http://wiki.ros.org/catkin/commands/catkin_create_pkg" target="_blank" rel="external">catkin_create_pkg</a> 创建 beginner_tutorials 程序包时指定的依赖包。而这些依赖已经自动添加到 <em>package.xml</em> 文件中：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscd</span> beginner_tutorials</span></div><div class="line"><span class="meta"><span class="meta-keyword">$cat</span> package.xml</span></div></pre></td></tr></table></figure></p>
<p>package.xml内容：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span>&gt;</span></div><div class="line">...</div><div class="line"> <span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>列出所有的间接依赖包：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rospack</span> depends beginner_tutorials</span></div><div class="line">cpp_common</div><div class="line">rostime</div><div class="line">roscpp_traits</div><div class="line">roscpp_serialization</div><div class="line">genmsg</div><div class="line">genpy</div><div class="line">message_runtime</div><div class="line">rosconsole</div><div class="line">std_msgs</div><div class="line">rosgraph_msgs</div><div class="line">xmlrpcpp</div><div class="line">roscpp</div><div class="line">rosgraph</div><div class="line">catkin</div><div class="line">rospack</div><div class="line">roslib</div><div class="line">rospy</div></pre></td></tr></table></figure></p>
<h1 id="自定义程序包"><a href="#自定义程序包" class="headerlink" title="自定义程序包"></a>自定义程序包</h1><p>修改 <em>package.xml</em>, 更新必要的信息。<br>描述标签：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>The beginner_tutorials package<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>将描述信息修改为任何喜欢的内容，但是按照约定第一句话应该简短一些，因为它覆盖了程序包的范围。如果用一句话难以描述完全那就需要换行了。<br>维护者标签：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!-- One maintainer tag required, multiple allowed, one person per tag --&gt;</span> </div><div class="line"><span class="comment">&lt;!-- Example:  --&gt;</span></div><div class="line"><span class="comment">&lt;!-- &lt;maintainer email="jane.doe@example.com"&gt;Jane Doe&lt;/maintainer&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">"user@todo.todo"</span>&gt;</span>user<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这是 <em>package.xml</em> 中要求填写的一个重要标签，因为它能够让其他人联系到程序包的相关人员。至少需要填写一个维护者名称，但如果有需要的话你可以添加多个。除了在标签里面填写维护者的名称外，还应该在标签的 <em>email</em> 属性中填写邮箱地址。<br>许可标签：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- One license tag required, multiple allowed, one license per tag --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Commonly used license strings: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">license</span>&gt;</span>TODO<span class="tag">&lt;/<span class="name">license</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>选择一种许可协议并将它填写到这里。一些常见的开源许可协议有BSD、MIT、Boost Software License、GPLv2、GPLv3、LGPLv2.1和LGPLv3。可以在 <a href="https://opensource.org/licenses/alphabetical" target="_blank" rel="external">Open Source Initiative</a> 中获取许可协议的相关信息。我们使用BSD协议，因为ROS核心组件的剩余部分已经使用了该协议。<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">license</span>&gt;</span>BSD<span class="tag">&lt;/<span class="name">license</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>依赖项标签：<br>依赖项标签用来描述程序包的各种依赖项，包括 build_depend、buildtool_depend、run_depend、test_depend。<br>关于这些标签的更详细介绍请参考 <a href="http://wiki.ros.org/catkin/package.xml#Build.2C_Run.2C_and_Test_Dependencies" target="_blank" rel="external">Catkin Dependencies</a> 相关的文档。在之前的操作中，因为我们将 std_msgs、 roscpp、 和 rospy 作为 catkin_create_pkg 命令的参数，所以生成的依赖项看起来如下:<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- The *_depend tags are used to specify dependencies --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Dependencies can be catkin packages or system dependencies --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Examples: --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Use build_depend for packages you need at compile time: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   &lt;build_depend&gt;genmsg&lt;/build_depend&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Use buildtool_depend for build tool packages: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Use run_depend for packages you need at runtime: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   &lt;run_depend&gt;python-yaml&lt;/run_depend&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Use test_depend for packages you need only for testing: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   &lt;test_depend&gt;gtest&lt;/test_depend&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>除了 <em>catkin</em> 中默认提供的 <em>buildtool_depend</em>，所有我们列出的依赖包都已经被添加到 <em>build_depend</em> 标签中。因为在编译和运行时我们需要用到所有指定的依赖包，因此还需要将每一个依赖包分别添加到 <em>run_depend</em> 标签中:<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>完整的 <a href="http://wiki.ros.org/catkin/package.xml" target="_blank" rel="external">package.xml</a> :<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line">   <span class="tag">&lt;<span class="name">package</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>beginner_tutorials<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">description</span>&gt;</span>The beginner_tutorials package<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">   </div><div class="line">     <span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">"you@yourdomain.tld"</span>&gt;</span>Your Name<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">license</span>&gt;</span>BSD<span class="tag">&lt;/<span class="name">license</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">url</span> <span class="attr">type</span>=<span class="string">"website"</span>&gt;</span>http://wiki.ros.org/beginner_tutorials<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">author</span> <span class="attr">email</span>=<span class="string">"you@yourdomain.tld"</span>&gt;</span>Jane Doe<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习 ROS 程序包的创建，使用工具 &lt;a href=&quot;http://wiki.ros.org/catkin/commands/catkin_create_pkg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;catkin_create_pkg&lt;/a&gt; 创建新程序包。&lt;/p&gt;
&lt;h1 id=&quot;catkin-程序包的组成&quot;&gt;&lt;a href=&quot;#catkin-程序包的组成&quot; class=&quot;headerlink&quot; title=&quot;catkin 程序包的组成&quot;&gt;&lt;/a&gt;catkin 程序包的组成&lt;/h1&gt;&lt;p&gt; catkin 程序包必须包含 &lt;a href=&quot;http://wiki.ros.org/catkin/package.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;package.xml&lt;/a&gt; 文件和 &lt;a href=&quot;http://wiki.ros.org/catkin/CMakeLists.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CMakeLists.txt&lt;/a&gt; 文件。&lt;em&gt;package.xml&lt;/em&gt; 提供有关程序包的元信息，每个目录下只能有一个程序包：&lt;br&gt;   &lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;beginner_tutorials/ &lt;/span&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;meta&quot;&gt;include&lt;/span&gt;/                   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; msg/                       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; src/                        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; srv/                       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; CMakeLists.txt              &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; package.xml&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="catkin_create_pkg" scheme="http://stevenshi.me/tags/catkin-create-pkg/"/>
    
  </entry>
  
  <entry>
    <title>ROS 初级&lt;二&gt; 文件系统介绍</title>
    <link href="http://stevenshi.me/2017/05/26/ros-primary-tutorial-2/"/>
    <id>http://stevenshi.me/2017/05/26/ros-primary-tutorial-2/</id>
    <published>2017-05-26T01:54:15.000Z</published>
    <updated>2017-05-26T02:46:46.801Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习 ROS 的文件系统，包括一些命令行工具 <a href="http://wiki.ros.org/rosbash#roscd" target="_blank" rel="external">roscd</a>、 <a href="http://wiki.ros.org/rosbash#rosls" target="_blank" rel="external">rosls</a>、 <a href="http://wiki.ros.org/rospack" target="_blank" rel="external">rospack</a> 等的使用。</p>
<h1 id="安装-tutorial-程序包："><a href="#安装-tutorial-程序包：" class="headerlink" title="安装 tutorial 程序包："></a>安装 tutorial 程序包：</h1>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install ros-indigo-ros-tutorials</span></div></pre></td></tr></table></figure>
<p>源码位于: <a href="https://github.com/ros/ros_tutorials.git" target="_blank" rel="external">ros_tutorials</a>。<br> 一般一个 ROS 软件包中包括 <em>CMakeLists.txt</em>、  <em>include</em>、   <em>package.xml</em>、  <em>src</em> 等几个文件及文件目录。Packages 软件包是ROS 应用程序代码的组织单元，每个软件包都可以包含程序库、可执行文件、脚本或者其它手动创建的东西。 Manifest (package.xml): 清单，是对于软件包相关信息的描述,用于定义软件包相关元信息之间的依赖关系，这些信息包括版本、维护者和许可协议等。<br><a id="more"></a></p>
<h1 id="文件系统工具"><a href="#文件系统工具" class="headerlink" title="文件系统工具"></a>文件系统工具</h1><h2 id="rospack"><a href="#rospack" class="headerlink" title="rospack"></a><a href="http://wiki.ros.org/rospack" target="_blank" rel="external">rospack</a></h2><p> <a href="http://wiki.ros.org/rospack" target="_blank" rel="external">rospack</a> 命令允许获取 ROS 软件包的信息，可以通过 <em>rospack help</em> 查看它的使用方法：<br>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">$rospack <span class="keyword">help</span></div><div class="line"><span class="keyword">USAGE</span>: rospack &lt;command&gt; [options] [<span class="keyword">package</span>]</div><div class="line"> Allowed commands:</div><div class="line">   <span class="keyword">help</span></div><div class="line">   cflags-<span class="keyword">only</span>-I     [<span class="comment">--deps-only] [package]</span></div><div class="line">   cflags-<span class="keyword">only</span>-other [<span class="comment">--deps-only] [package]</span></div><div class="line">   depends           [<span class="keyword">package</span>] (<span class="keyword">alias</span>: deps)</div><div class="line">   depends-indent    [<span class="keyword">package</span>] (<span class="keyword">alias</span>: deps-indent)</div><div class="line">   depends-manifests [<span class="keyword">package</span>] (<span class="keyword">alias</span>: deps-manifests)</div><div class="line">   depends-msgsrv    [<span class="keyword">package</span>] (<span class="keyword">alias</span>: deps-msgsrv)</div><div class="line">   depends-<span class="keyword">on</span>        [<span class="keyword">package</span>]</div><div class="line">   depends-on1       [<span class="keyword">package</span>]</div><div class="line">   depends-why <span class="comment">--target=&lt;target&gt; [package] (alias: deps-why)</span></div><div class="line">   depends1          [<span class="keyword">package</span>] (<span class="keyword">alias</span>: deps1)</div><div class="line">   <span class="keyword">export</span> [<span class="comment">--deps-only] --lang=&lt;lang&gt; --attrib=&lt;attrib&gt; [package]</span></div><div class="line">   find [<span class="keyword">package</span>]</div><div class="line">   langs</div><div class="line">   libs-<span class="keyword">only</span>-L     [<span class="comment">--deps-only] [package]</span></div><div class="line">   libs-<span class="keyword">only</span>-l     [<span class="comment">--deps-only] [package]</span></div><div class="line">   libs-<span class="keyword">only</span>-other [<span class="comment">--deps-only] [package]</span></div><div class="line">   <span class="keyword">list</span></div><div class="line">   <span class="keyword">list</span>-duplicates</div><div class="line">   <span class="keyword">list</span>-<span class="keyword">names</span></div><div class="line">   plugins <span class="comment">--attrib=&lt;attrib&gt; [--top=&lt;toppkg&gt;] [package]</span></div><div class="line">   profile [<span class="comment">--length=&lt;length&gt;] [--zombie-only]</span></div><div class="line">   rosdep  [<span class="keyword">package</span>] (<span class="keyword">alias</span>: rosdeps)</div><div class="line">   rosdep0 [<span class="keyword">package</span>] (<span class="keyword">alias</span>: rosdeps0)</div><div class="line">   vcs  [<span class="keyword">package</span>]</div><div class="line">   vcs0 [<span class="keyword">package</span>]</div><div class="line"> Extra options:</div><div class="line">   -q     Quiets <span class="keyword">error</span> reports.</div><div class="line"></div><div class="line"><span class="keyword">If</span> [<span class="keyword">package</span>] <span class="keyword">is</span> omitted, the <span class="keyword">current</span> working <span class="keyword">directory</span></div><div class="line"><span class="keyword">is</span> used (<span class="keyword">if</span> it contains a package.xml <span class="keyword">or</span> manifest.xml).</div></pre></td></tr></table></figure></p>
<p> 一般我们常用的 <em>rospack find xxx</em> 命令查找某个包位于何处，比如我们想知道 <em>turtlesim</em> 包位于哪里：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rospack</span> find turtlesim</span></div></pre></td></tr></table></figure></p>
<p> 系统会输出turtlesim 的路径 <em>/opt/ros/indigo/share/turtlesim</em></p>
<h2 id="roscd"><a href="#roscd" class="headerlink" title="roscd"></a><a href="http://wiki.ros.org/rosbash#roscd" target="_blank" rel="external">roscd</a></h2><p> <a href="http://wiki.ros.org/rosbash#roscd" target="_blank" rel="external">roscd</a> 是 <a href="http://wiki.ros.org/rosbash" target="_blank" rel="external">rosbash</a> 命令集中的一部分，它可以直接切换(cd)工作目录到某个软件包或者软件包集当中。<br> 使用方法：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscd</span> [本地包名称[/子目录]]</span></div></pre></td></tr></table></figure></p>
<p> 比如：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscd</span> beginner_tutorials/src</span></div></pre></td></tr></table></figure></p>
<p> 直接进入到 <em>beginner_tutorials/src</em> 目录下，此时查看当前目录<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$pwd</span></div><div class="line"><span class="regexp">/home/y</span>ourusername<span class="regexp">/catkin_ws/</span>src<span class="regexp">/beginner_tutorials/</span>src</div></pre></td></tr></table></figure></p>
<p>值得注意的是 <a href="http://wiki.ros.org/rosbash#roscd" target="_blank" rel="external">roscd</a> 只能切换到那些路径已经包含在 ROS_PACKAGE_PATH 环境变量中的软件包。<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">roscd <span class="built_in">log</span></span></div></pre></td></tr></table></figure></p>
<p>roscd log可以切换到ROS保存日记文件的目录下,如果你没有执行过任何ROS程序，系统会报错说该目录不存在。 此时查看当前目录：<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$pwd</span></div><div class="line"><span class="regexp">/home/y</span>ourusername<span class="regexp">/.ros/</span>log</div></pre></td></tr></table></figure></p>
<h2 id="rosls"><a href="#rosls" class="headerlink" title="rosls"></a><a href="http://wiki.ros.org/rosbash#rosls" target="_blank" rel="external">rosls</a></h2><p><a href="http://wiki.ros.org/rosbash#rosls" target="_blank" rel="external">rosls</a> 是 <a href="http://wiki.ros.org/rosbash" target="_blank" rel="external">rosbash</a> 命令集中的一部分,允许直接按软件包的名称而不是绝对路径执行ls命令,使用方法：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rosls</span> [本地包名称[/子目录]]</span></div></pre></td></tr></table></figure></p>
<p>比如在任意目录下执行，而不需要进入到 beginner_tutorials 所在目录：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rosls</span> beginner_tutorials/</span></div></pre></td></tr></table></figure></p>
<p>应输出：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CMakeLists<span class="selector-class">.txt</span>  include  msg  package<span class="selector-class">.xml</span>  src  srv</div></pre></td></tr></table></figure></p>
<h1 id="TAB补全"><a href="#TAB补全" class="headerlink" title="TAB补全"></a>TAB补全</h1><p>ROS 命令同样支持TAB补全，这里不再细讲。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习 ROS 的文件系统，包括一些命令行工具 &lt;a href=&quot;http://wiki.ros.org/rosbash#roscd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;roscd&lt;/a&gt;、 &lt;a href=&quot;http://wiki.ros.org/rosbash#rosls&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rosls&lt;/a&gt;、 &lt;a href=&quot;http://wiki.ros.org/rospack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rospack&lt;/a&gt; 等的使用。&lt;/p&gt;
&lt;h1 id=&quot;安装-tutorial-程序包：&quot;&gt;&lt;a href=&quot;#安装-tutorial-程序包：&quot; class=&quot;headerlink&quot; title=&quot;安装 tutorial 程序包：&quot;&gt;&lt;/a&gt;安装 tutorial 程序包：&lt;/h1&gt;   &lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;span class=&quot;meta-keyword&quot;&gt;$sudo&lt;/span&gt; apt-get install ros-indigo-ros-tutorials&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;源码位于: &lt;a href=&quot;https://github.com/ros/ros_tutorials.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ros_tutorials&lt;/a&gt;。&lt;br&gt; 一般一个 ROS 软件包中包括 &lt;em&gt;CMakeLists.txt&lt;/em&gt;、  &lt;em&gt;include&lt;/em&gt;、   &lt;em&gt;package.xml&lt;/em&gt;、  &lt;em&gt;src&lt;/em&gt; 等几个文件及文件目录。Packages 软件包是ROS 应用程序代码的组织单元，每个软件包都可以包含程序库、可执行文件、脚本或者其它手动创建的东西。 Manifest (package.xml): 清单，是对于软件包相关信息的描述,用于定义软件包相关元信息之间的依赖关系，这些信息包括版本、维护者和许可协议等。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS File&#39;s System" scheme="http://stevenshi.me/tags/ROS-File-s-System/"/>
    
  </entry>
  
  <entry>
    <title>ROS 初级&lt;一&gt; 安装与配置</title>
    <link href="http://stevenshi.me/2017/05/26/ros-primary-tutorial-1/"/>
    <id>http://stevenshi.me/2017/05/26/ros-primary-tutorial-1/</id>
    <published>2017-05-26T00:23:23.000Z</published>
    <updated>2017-05-26T01:52:31.216Z</updated>
    
    <content type="html"><![CDATA[<p>一直想记录一下ROS学习过程中的点滴，先从最基础的 ROS-Beginner-Tutorials开始， 以便于帮助更多的人。本篇是ROS学习的开篇，参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials" target="_blank" rel="external">ROS-Beginner-Tutorials</a>。</p>
<h1 id="ROS安装"><a href="#ROS安装" class="headerlink" title="ROS安装"></a>ROS安装</h1><p>目前ROS官方还在维护的版本有4个(截至201705),参考 <a href="http://wiki.ros.org/Distributions" target="_blank" rel="external">ROS-Distributions</a>：<img src="/2017/05/26/ros-primary-tutorial-1/rosv.jpg" alt=""><br><a id="more"></a><br>因为我的环境是ubuntu14.04,支持的 ROS 版本为 <a href="http://wiki.ros.org/indigo" target="_blank" rel="external">ROS-Indigo</a>, 因此我选择安装 <a href="http://wiki.ros.org/indigo" target="_blank" rel="external">ROS-Indigo</a>。<br><em>环境： ubuntu 14.04 Trusty LTS 32bits</em><br>安装可以参考官网: <a href="http://wiki.ros.org/indigo/Installation/Ubuntu" target="_blank" rel="external">ROS-Indigo-Installation-ubuntu</a><br>添加代码仓：<br>   <figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> <span class="keyword">sh</span> -c 'echo <span class="string">"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main"</span> &gt; /etc/apt/sources.<span class="keyword">list</span>.<span class="keyword">d</span>/ros-latest.<span class="keyword">list</span>'</div></pre></td></tr></table></figure></p>
<p>设定key:<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sudo apt-key adv <span class="params">--keyserver</span> hkp:<span class="string">//ha.pool.sks-keyservers.net</span><span class="function">:80</span> <span class="params">--recv-key</span> 421C365BD9FF1F717815A3895523BAEEB01FA116</div></pre></td></tr></table></figure></p>
<p>更新：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get update</span></div></pre></td></tr></table></figure></p>
<p>选择桌面版完全安装：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install ros-indigo-desktop-full</span></div></pre></td></tr></table></figure></p>
<p>初始化rosdep:<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> rosdep init</span></div><div class="line"><span class="meta"><span class="meta-keyword">$rosdep</span> update</span></div></pre></td></tr></table></figure></p>
<p>设定环境变量让系统能找到ROS：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">echo</span> <span class="string">"source /opt/ros/indigo/setup.bash"</span> &gt;&gt; ~/.bashrc</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">source</span> ~/.bashrc</span></div></pre></td></tr></table></figure></p>
<p>安装rosinstall工具，方便下载ROS：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install python-rosinstall</span></div></pre></td></tr></table></figure></p>
<h1 id="管理环境"><a href="#管理环境" class="headerlink" title="管理环境"></a>管理环境</h1><p>检查我们是否配置好了环境变量：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">export</span> | grep ROS</span></div></pre></td></tr></table></figure></p>
<p>检查是否有 <a href="http://wiki.ros.org/ROS/EnvironmentVariables#ROS_ROOT" target="_blank" rel="external">ROS_ROOT</a> 和 <a href="http://wiki.ros.org/ROS/EnvironmentVariables#ROS_PACKAGE_PATH" target="_blank" rel="external">ROS_PACKAGE_PATH</a> 的配置。</p>
<h1 id="创建ROS工作空间"><a href="#创建ROS工作空间" class="headerlink" title="创建ROS工作空间"></a>创建ROS工作空间</h1><p><a href="http://wiki.ros.org/catkin/commands/catkin_make" target="_blank" rel="external">catkin_make</a> 命令只适用于 ROS Groovy 及其以后的版本。</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">mkdir -p ~/catkin_ws/src</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/src</span></div></pre></td></tr></table></figure>
<p>这就创建了一个 <a href="http://wiki.ros.org/catkin/workspaces" target="_blank" rel="external">catkin 工作空间</a>, 里面是空的，只有一个 <a href="http://wiki.ros.org/catkin/CMakeLists.txt" target="_blank" rel="external">CMakeLists.txt</a>, 但依然可以编译它：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make</span></div></pre></td></tr></table></figure></p>
<p>当前目录下会生成 <em>build</em> 和 <em>devel</em> 这两个文件夹。在 <em>devel</em> 文件夹里面可以看到几个 setup.*sh 文件。 source 这些文件中的任何一个都可以将当前工作空间设置在ROS工作环境的最顶层，参考 <a href="http://wiki.ros.org/catkin" target="_blank" rel="external">catkin</a>文档。接下来首先 source 一下新生成的 setup.bash 文件：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span></div></pre></td></tr></table></figure></p>
<p>也可以将这句命令加入到 ~/.bashrc 中，这样每次打开一个 <em>terminal</em> 会自动 <em>source</em> 。<br>确保工作空间已经正确配置可以通过以下命令查看：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span></span></div></pre></td></tr></table></figure></p>
<p>正确的输出一般为：<br>   <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/home/</span>yourusername<span class="regexp">/catkin_ws/</span><span class="string">src:</span><span class="regexp">/opt/</span>ros<span class="regexp">/indigo/</span><span class="string">share:</span><span class="regexp">/opt/</span>ros<span class="regexp">/indigo/</span>stacks</div></pre></td></tr></table></figure></p>
<p>至此，ROS的安装与配置已经搭建完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直想记录一下ROS学习过程中的点滴，先从最基础的 ROS-Beginner-Tutorials开始， 以便于帮助更多的人。本篇是ROS学习的开篇，参考 &lt;a href=&quot;http://wiki.ros.org/cn/ROS/Tutorials&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS-Beginner-Tutorials&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;ROS安装&quot;&gt;&lt;a href=&quot;#ROS安装&quot; class=&quot;headerlink&quot; title=&quot;ROS安装&quot;&gt;&lt;/a&gt;ROS安装&lt;/h1&gt;&lt;p&gt;目前ROS官方还在维护的版本有4个(截至201705),参考 &lt;a href=&quot;http://wiki.ros.org/Distributions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS-Distributions&lt;/a&gt;：&lt;img src=&quot;/2017/05/26/ros-primary-tutorial-1/rosv.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS Installation" scheme="http://stevenshi.me/tags/ROS-Installation/"/>
    
  </entry>
  
  <entry>
    <title>ROS导航仿真</title>
    <link href="http://stevenshi.me/2017/05/24/ros-navigation-simulation/"/>
    <id>http://stevenshi.me/2017/05/24/ros-navigation-simulation/</id>
    <published>2017-05-24T05:36:03.000Z</published>
    <updated>2017-05-24T06:54:53.570Z</updated>
    
    <content type="html"><![CDATA[<p>在进入实际的机器人运动控制之前，先使用空白地图或现有地图进行ROS导航功能的仿真,以便于更进一步了解机器人的导航控制策略。<br><em>环境: ubuntu 14.04 LTS 32bits </em><br><em>ROS</em>: <em>Indigo</em><br><a id="more"></a></p>
<h1 id="Navigation-安装"><a href="#Navigation-安装" class="headerlink" title="Navigation 安装"></a>Navigation 安装</h1><p>在进行导航仿真之前，需要先下载 <em>ROS</em> 官方提供的 <a href="http://wiki.ros.org/cn/navigation" target="_blank" rel="external">ROS-Navigation</a>，安装下载：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/src</span></div><div class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> https://github.com/ros-planning/navigation.git</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> navigation　</span></div><div class="line"><span class="meta">$</span><span class="bash">git checkout indigo-devel</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make</span></div><div class="line"><span class="meta">$</span><span class="bash">rospack profile</span></div></pre></td></tr></table></figure></p>
<p>可能会报错：<br>   <figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">catkin_ws<span class="meta-keyword">/src/</span>navigation/map_server<span class="meta-keyword">/src/</span>image_loader.cpp:<span class="number">43</span>:<span class="number">27</span>: fatal error: SDL/SDL_image.h: No such file or directory</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL/SDL_image.h&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>安装 <a href="https://www.libsdl.org/" target="_blank" rel="external">SDL</a>,SDL（Simple DirectMedia Layer）是一套开放源代码的跨平台多媒体开发库，使用C语言写成。SDL提供了数种控制图像、声音、输出入的函数，让开发者只要用相同或是相似的代码就可以开发出跨多个平台（Linux、Windows、Mac OS X等）的应用软件。参考 <a href="https://zh.wikipedia.org/wiki/SDL" target="_blank" rel="external">SDL</a>:<br>   <figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-<span class="built_in">get</span> install libsdl-image1<span class="number">.2</span>-<span class="built_in">dev</span> libsdl1<span class="number">.2</span>-<span class="built_in">dev</span></div></pre></td></tr></table></figure></p>
<h1 id="使用-arbotix-测试-move-base"><a href="#使用-arbotix-测试-move-base" class="headerlink" title="使用 arbotix 测试 move_base"></a>使用 arbotix 测试 move_base</h1><p><a href="http://wiki.ros.org/move_base" target="_blank" rel="external">move_base</a> 是导航功能里比较重要的一项，它获取传感器数据并负责路径规划、距离计算、成本计算等。</p>
<p><img src="/2017/05/24/ros-navigation-simulation/movebase.png" alt=""></p>
<p><em>move_base</em> 节点运行前需要四个配置文件，它们定义了路径规划需要的一些配置参数，包括越过障碍物的代价、机器人的半径、即时距离计算、机器人移动速度等参数。在 <em>ROS by example</em> 中的示例代码 <em>rbx1</em> 中有关于每个机器人的四个配置文件，它们位于 <em>rbx1/rbx1_nav/config</em> 中，每个机器人下面都有对应的四个配置文件：<br><em>base_local_planner_params.yaml</em><br><em>costmap_common_params.yaml</em><br><em>global_costmap_params.yaml</em><br><em>local_costmap_params.yaml</em><br>里面的参数说明可以参考官方文档<a href=""></a><br>下面的命令启动启动一个机器人，使用 <em>move_base</em>使其向前移动 2m：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$roslaunch</span> rbx1_bringup fake_turtlebot<span class="selector-class">.launch</span> <span class="comment">//启动一个机器人 使用ArbotiX模拟器</span></div><div class="line"><span class="variable">$roslaunch</span> rbx1_nav fake_move_base_blank_map<span class="selector-class">.launch</span> <span class="comment">///以空白地图启动move_base节点</span></div><div class="line"><span class="variable">$rosrun</span> rviz rviz -d `rospack find rbx1_nav`/<span class="selector-tag">nav</span><span class="selector-class">.rviz</span> <span class="comment">//启动Rviz</span></div><div class="line">$ rostopic pub /move_base_simple/goal geometry_msgs/PoseStamped <span class="string">'&#123;header: &#123;frame_id: "map"&#125;,pose: &#123;position: &#123;x: 1.0,y: 0,z: 0&#125;,orientation: &#123;x: 0,y: 0,z: 0,w: 2&#125;&#125;&#125;'</span> <span class="comment">//向前运动2m</span></div></pre></td></tr></table></figure></p>
<p>返回原地：<br>   <figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml">$ rostopic pub /move_base_simple/goal geometry_msgs/PoseStamped '</span><span class="template-variable">&#123;header: &#123;frame_id: "map"&#125;</span><span class="xml">,pose: </span><span class="template-variable">&#123;position: &#123;x: 0.0,y: 0,z: 0&#125;</span><span class="xml">,orientation: </span><span class="template-variable">&#123;x: 0,y: 0,z: 0,w: 2&#125;</span><span class="xml">&#125;&#125;' //返回</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/24/ros-navigation-simulation/forward.jpg" alt=""></p>
<p>让机器人走一个正方形：<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rosrun</span> rbx1_nav move_base_square.py<span class="regexp">//</span>让机器人走正方形</div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/24/ros-navigation-simulation/square.jpg" alt=""></p>
<h1 id="带障碍物的导航"><a href="#带障碍物的导航" class="headerlink" title="带障碍物的导航"></a>带障碍物的导航</h1><p>将空白地图换做带障碍物的地图再次使机器人运行一个正方形：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$roscore</span></div><div class="line"><span class="variable">$roslaunch</span> rbx1_bringup fake_turtlebot<span class="selector-class">.launch</span> <span class="comment">//加载一个模拟机器人</span></div><div class="line"><span class="variable">$roslaunch</span> rbx1_nav fake_move_base_map_with_obstacles<span class="selector-class">.launch</span>  <span class="comment">//加载一张带障碍物的地图</span></div><div class="line"><span class="variable">$rosrun</span>  rviz rviz -d `rospack find rbx1_nav`/nav_obstacles<span class="selector-class">.rviz</span> <span class="comment">//加载rviz  带障碍物的导航</span></div><div class="line"><span class="variable">$rosrun</span> rbx1_nav move_base_square<span class="selector-class">.py</span> <span class="comment">//使其自动走一个正方形</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/24/ros-navigation-simulation/obstacle.jpg" alt=""></p>
<h1 id="复杂地图导航与蒙特卡洛定位"><a href="#复杂地图导航与蒙特卡洛定位" class="headerlink" title="复杂地图导航与蒙特卡洛定位"></a>复杂地图导航与蒙特卡洛定位</h1><p>使用ROS导航包里现有的复杂地图结合 <a href="http://wiki.ros.org/amcl" target="_blank" rel="external">ACML</a>-(Adaptive Monte Carlo Localization) 进行导航功能的测试。<a href="http://wiki.ros.org/amcl" target="_blank" rel="external">ACML</a> 即自适应蒙特卡罗定位，关于它的原理回头再仔细分析。<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$roscore</span></div><div class="line"><span class="variable">$roslaunch</span> rbx1_bringup fake_turtlebot<span class="selector-class">.launch</span> <span class="comment">//运行一个机器人</span></div><div class="line"><span class="variable">$roslaunch</span> rbx1_nav fake_amcl<span class="selector-class">.launch</span> <span class="comment">//运行fake_amcl.launch调用已有的测试地图</span></div><div class="line"><span class="variable">$rosrun</span> rviz rviz -d `rospack find rbx1_nav`/amcl<span class="selector-class">.rviz</span> <span class="comment">//启动rviz 并调用amcl配置文件</span></div></pre></td></tr></table></figure></p>
<p>也可以手动指定要调用的地图：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$roslaunch</span> rbx1_nav fake_amcl<span class="selector-class">.launch</span> map:=test_map.yaml</div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/24/ros-navigation-simulation/amcl.jpg" alt=""></p>
<p>此时点击2D New Goal按钮，让机器人运动到指定目标：<br><img src="/2017/05/24/ros-navigation-simulation/amcl-move.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在进入实际的机器人运动控制之前，先使用空白地图或现有地图进行ROS导航功能的仿真,以便于更进一步了解机器人的导航控制策略。&lt;br&gt;&lt;em&gt;环境: ubuntu 14.04 LTS 32bits &lt;/em&gt;&lt;br&gt;&lt;em&gt;ROS&lt;/em&gt;: &lt;em&gt;Indigo&lt;/em&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS Navigation" scheme="http://stevenshi.me/tags/ROS-Navigation/"/>
    
  </entry>
  
  <entry>
    <title>ROS机器人仿真</title>
    <link href="http://stevenshi.me/2017/05/24/ros-simulation/"/>
    <id>http://stevenshi.me/2017/05/24/ros-simulation/</id>
    <published>2017-05-24T02:07:50.000Z</published>
    <updated>2017-05-24T05:33:51.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 <em>PC</em> 环境下进行机器人的运动仿真是 <em>ROS</em> 开发者必经的一个环节，<em>ROS</em> 官方提供了好用且强大的3D可视化工具 <a href="http://wiki.ros.org/rviz" target="_blank" rel="external">rviz</a>-3D visualization tool for ROS。<br><em>环境: ubuntu 14.04 LTS 32bits </em><br><em>ROS</em>: <em>Indigo</em><br>开启仿真之旅。<br><a id="more"></a></p>
<h1 id="安装-rviz"><a href="#安装-rviz" class="headerlink" title="安装 rviz"></a>安装 <a href="http://wiki.ros.org/rviz" target="_blank" rel="external">rviz</a></h1><p>安装之前首先确保在 <em>ubuntu</em> 系统下配置安装好了 <em>ROS</em> 环境，如果没有请参考官网安装，点击 <a href="http://wiki.ros.org/indigo/Installation/Ubuntu" target="_blank" rel="external">ROS-Install-on-Ubuntu</a>。安装3D可视化工具 <a href="http://wiki.ros.org/rviz" target="_blank" rel="external">rviz</a> 参考 <a href="http://wiki.ros.org/rviz/UserGuide" target="_blank" rel="external">Rviz-Installation</a><br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install ros-indigo-rviz</span></div></pre></td></tr></table></figure></p>
<p><a href="http://wiki.ros.org/rviz" target="_blank" rel="external">rviz</a> 只是一个3D可视化工具，需要安装一个模拟器 <a href="http://wiki.ros.org/arbotix" target="_blank" rel="external">Arbotix</a> 才能进行机器人的仿真，安装模拟器 <a href="http://wiki.ros.org/arbotix" target="_blank" rel="external">Arbotix</a>：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install ros-indigo-arbotix*</span></div><div class="line"><span class="meta"><span class="meta-keyword">$rospack</span> profile //更新ros软件包</span></div></pre></td></tr></table></figure></p>
<h1 id="开始仿真"><a href="#开始仿真" class="headerlink" title="开始仿真"></a>开始仿真</h1><p>仿真之前下载 <a href="https://github.com/pirobot/rbx1" target="_blank" rel="external">ros-by-example</a> 自带的例程代码：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/src</span></div><div class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> https://github.com/pirobot/rbx1.git</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> rbx1</span></div><div class="line"><span class="meta">$</span><span class="bash">git checkout indigo-devel</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span></div><div class="line"><span class="meta">$</span><span class="bash">rospack profile</span></div></pre></td></tr></table></figure></p>
<p>使用 <em>rbx1</em> 包之前运行包里自带的 <em>rbx1-prereq.sh</em> 文件，安装一下依赖项，如果安装了可以略过：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sh</span> rbx1-prereq.sh　</span></div><div class="line"><span class="meta"><span class="meta-keyword">$rospack</span> profile</span></div></pre></td></tr></table></figure></p>
<p>运行 <em>roscore</em> 先：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscore</span> &amp;</span></div></pre></td></tr></table></figure></p>
<p>开启一个机器人模型,模型位于<em>/rbx1/rbx1_bringup/launch</em>目录下：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roslaunch</span> rbx1_bringup fake_pi_robot.launch</span></div></pre></td></tr></table></figure></p>
<p>也可以选择其他的模型。之后开启 <em>Rviz</em> 可视化工具：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">rosrun rviz rviz <span class="_">-d</span> `rospack find rbx1_nav`/sim.rviz</span></div></pre></td></tr></table></figure></p>
<p>一定要注意反单引号的使用，否则系统会报错。（ESC下面那个键）<br>此时就可以看到机器人模型：<img src="/2017/05/24/ros-simulation/rviz.jpg" alt=""><br>参数 <em>sim.rviz</em> 是 <em>rviz</em> 的配置文件。机器人目前处于静止状态，我们发布一个命令，让它动起来，命令冒号后的空格必须有：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rostopic</span> pub -r <span class="number">10</span> <span class="regexp">/cmd_vel geometry_msgs/</span>Twist <span class="string">'&#123;linear: &#123;x: 0.2, y: 0, z: 0&#125;, angular: &#123;x: 0, y: 0, z: 0.5&#125;&#125;'</span></div></pre></td></tr></table></figure></p>
<p>效果：<img src="/2017/05/24/ros-simulation/rviz-move.jpg" alt=""><br>需要停止机器人，可以在同一个窗口按下 <em>ctrl-c</em> 或者发布一个空的指令：<br>　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rostopic</span> pub -<span class="number">1</span> <span class="regexp">/cmd_vel geometry_msgs/</span>Twist <span class="string">'&#123;&#125;'</span></div></pre></td></tr></table></figure></p>
<h1 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h1><p><em>fake_pi_robot.launch</em> 文件是机器人的模型描述文件，功能是生成一个pi类型的机器人模型；<br>　<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"/use_sim_time"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line"> </div><div class="line">    <span class="comment">&lt;!-- Load the URDF/Xacro model of our robot --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">"urdf_file"</span> <span class="attr">default</span>=<span class="string">"$(find xacro)/xacro.py '$(find rbx1_description)/urdf/pi_robot.xacro'"</span> /&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"robot_description"</span> <span class="attr">command</span>=<span class="string">"$(arg urdf_file)"</span> /&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"arbotix"</span> <span class="attr">pkg</span>=<span class="string">"arbotix_python"</span> <span class="attr">type</span>=<span class="string">"arbotix_driver"</span> <span class="attr">output</span>=<span class="string">"screen"</span> <span class="attr">clear_params</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find rbx1_bringup)/config/fake_pi_arbotix.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> /&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"sim"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">node</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"move_fake_pi_arm_start"</span> <span class="attr">pkg</span>=<span class="string">"rbx1_bringup"</span> <span class="attr">type</span>=<span class="string">"move_fake_pi_arm_start.py"</span> <span class="attr">output</span>=<span class="string">"screen"</span> /&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"robot_state_publisher"</span> <span class="attr">pkg</span>=<span class="string">"robot_state_publisher"</span> <span class="attr">type</span>=<span class="string">"state_publisher"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"publish_frequency"</span> <span class="attr">type</span>=<span class="string">"double"</span> <span class="attr">value</span>=<span class="string">"20.0"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">node</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="comment">&lt;!-- Run a static transform between /base_link and /base_footprint needed for SLAM --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"tf"</span> <span class="attr">type</span>=<span class="string">"static_transform_publisher"</span> <span class="attr">name</span>=<span class="string">"base_footprint_broadcaster"</span> <span class="attr">args</span>=<span class="string">"0 0 0 0 0 0 /base_link /base_footprint 100"</span> /&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"> <span class="tag">&lt;/<span class="name">launch</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>大致过程先加载一个 <em>urdf</em>文件，这个文件用于描述机器人的样子，然后启动 <em>arbotix</em> 仿真，启动仿真节点，发布状态，最后是 <em>tf</em> 坐标变换。<em>sim.rviz</em>配置文件描述了 <em>rviz</em> 的配置，位于目录 <em>rbx1/rbx1_nav</em> 中，它的配置代码很长，大致描述的是一些显示配置，即 <em>rviz</em> 左侧那部分：<img src="/2017/05/24/ros-simulation/rviz-left.jpg" alt=""></p>
<p>速度发布命令一个是角速度，一个是线速度，参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingTopics" target="_blank" rel="external">ROStopic</a>。<br>x y z 的方向遵循右手坐标系，机器人正前方为x轴，自地面向上为z轴，y轴垂直于其他两轴位于左方:</p>
<p><img src="/2017/05/24/ros-simulation/axis.jpg" alt=""><img src="/2017/05/24/ros-simulation/screw-rule.jpg" alt=""></p>
<p>机器人只能贴着地面运动，只能绕Z轴做旋转运动，不可能沿Z轴做直线运动；也不可能绕着x轴或者绕着y轴做旋转运动。机器人只能向前运动或向后运动，即x方向；做旋转运动可以绕z轴顺时针或者逆时针，逆时针为正方向。旋转方向遵循右手螺旋法则，逆时针为正，顺时针为负。</p>
<p><em>linear: {x: 0.2, y: 0, z: 0}</em>的意思就是机器人沿着x轴正方向，即向前运动，速度为 <em>0.2m/s</em> ;<br><em>angular: {x: 0, y: 0, z: 0.5}</em> 的意思是机器人沿着z轴做逆时针旋转的角速度为 <em>0.5rad/s</em>;因此会得出以上机器人运动轨迹。<br>关于速度发布的语法遵循 <a href="http://wiki.ros.org/ROS/YAMLCommandLine" target="_blank" rel="external">YAML</a> 。<br>速度单位 <em>m/s</em>-米/秒<br>角速度单位 <em>rad/s</em>-弧度/秒</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在 &lt;em&gt;PC&lt;/em&gt; 环境下进行机器人的运动仿真是 &lt;em&gt;ROS&lt;/em&gt; 开发者必经的一个环节，&lt;em&gt;ROS&lt;/em&gt; 官方提供了好用且强大的3D可视化工具 &lt;a href=&quot;http://wiki.ros.org/rviz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rviz&lt;/a&gt;-3D visualization tool for ROS。&lt;br&gt;&lt;em&gt;环境: ubuntu 14.04 LTS 32bits &lt;/em&gt;&lt;br&gt;&lt;em&gt;ROS&lt;/em&gt;: &lt;em&gt;Indigo&lt;/em&gt;&lt;br&gt;开启仿真之旅。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS Simulation" scheme="http://stevenshi.me/tags/ROS-Simulation/"/>
    
  </entry>
  
  <entry>
    <title>贝叶斯滤波库在树莓派上的移植</title>
    <link href="http://stevenshi.me/2017/05/23/ros-navigation-compile/"/>
    <id>http://stevenshi.me/2017/05/23/ros-navigation-compile/</id>
    <published>2017-05-23T05:05:18.000Z</published>
    <updated>2017-05-23T23:50:31.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>计划在树莓派上仿真一下<a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 的导航功能，需要安装 <a href="https://github.com/ros-planning/navigation" target="_blank" rel="external">navigation</a>包，结果编译 <a href="https://github.com/ros-planning/navigation" target="_blank" rel="external">navigation</a>包 时提示错误：<br>　　<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">– <span class="keyword">package</span> ‘orocos-bfl’ not found </div><div class="line">CMake Error at <span class="regexp">/usr/</span>share<span class="regexp">/cmake-2.8/</span>Modules/FindPkgConfig.<span class="string">cmake:</span><span class="number">283</span> (message): </div><div class="line">A required <span class="keyword">package</span> was not found </div><div class="line">Call Stack (most recent call first): </div><div class="line"><span class="regexp">/usr/</span>share<span class="regexp">/cmake-2.8/</span>Modules/FindPkgConfig.<span class="string">cmake:</span><span class="number">337</span> (_pkg_check_modules_internal) </div><div class="line">robot_pose_ekf/CMakeLists.<span class="string">txt:</span><span class="number">6</span> (pkg_check_modules)</div></pre></td></tr></table></figure></p>
<p>于是填了后面的坑…<br><a id="more"></a></p>
<h1 id="贝叶斯滤波库"><a href="#贝叶斯滤波库" class="headerlink" title="贝叶斯滤波库"></a>贝叶斯滤波库</h1><p> <em>package ‘orocos-bfl’</em>是贝叶斯滤波库，参考 <a href="http://www.orocos.org/bfl" target="_blank" rel="external">BFL</a>。贝叶斯滤波库能够为动态贝叶斯网络的推理提供一个应用程序独立框架，以及递归信息处理和基于贝叶斯规则的估计算法,如卡尔曼滤波器,粒子过滤器、蒙特卡洛方法等，多应用于机器人的导航中。</p>
<h2 id="移植"><a href="#移植" class="headerlink" title="移植"></a>移植</h2><p>首先下载源码：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$wget</span> http:<span class="regexp">//</span>people.mech.kuleuven.be<span class="regexp">/~tdelaet/</span>bfl_tar<span class="regexp">/orocos-bfl-0.6.1-src.tar.bz2</span></div></pre></td></tr></table></figure></p>
<p>解压并建立 <em>build</em> 目录：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">tar jxvf orocos-bfl-0.6.1-src.tar.bz2</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span>  orocos-bfl-0.6.1-src</span></div><div class="line"><span class="meta">$</span><span class="bash">mkdir build</span></div></pre></td></tr></table></figure></p>
<p>编译：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$cmake</span> .</span></div></pre></td></tr></table></figure></p>
<p>提示错误：<img src="/2017/05/23/ros-navigation-compile/ltierror.jpg" alt=""><br>缺少 <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 库, <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 是一个基于 <em>C++</em> 的面向对象的图像处理和计算机视觉库。</p>
<h3 id="LTI-Lib库的移植"><a href="#LTI-Lib库的移植" class="headerlink" title="LTI-Lib库的移植"></a>LTI-Lib库的移植</h3><p>方法参考 <a href="https://people.mech.kuleuven.be/~tdelaet/bfl_doc/installation_guide/node5.html" target="_blank" rel="external">LTI-Install-Guide</a>，树莓派貌似只能源码安装。<br>安装之前先安装 <em>libxt-dev</em> 和 <em>libboost</em><br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install libxt-dev</span></div><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install libboost-dev</span></div></pre></td></tr></table></figure></p>
<p>当然也可以源码安装<em>libxt-dev</em>：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$https</span>:<span class="comment">//launchpad.net/ubuntu/+archive/primary/+files/libxt_1.1.4.orig.tar.gz</span></div><div class="line"><span class="variable">$tar</span> zxvf libxt_1.<span class="number">1.4</span><span class="selector-class">.orig</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line"><span class="variable">$cd</span> libxt_1.<span class="number">1.4</span><span class="selector-class">.orig</span></div><div class="line"><span class="variable">$make</span>  </div><div class="line"><span class="variable">$sudo</span> make install</div></pre></td></tr></table></figure></p>
<p>源码安装 <a href="https://sourceforge.net/projects/boost/files/" target="_blank" rel="external">libboost-dev</a> 参考 <a href="https://people.mech.kuleuven.be/~tdelaet/bfl_doc/installation_guide/node7.html" target="_blank" rel="external">Boost-Install</a><br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">tar -xzvf boost_1_34_0.tar.gz</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> boost_1_34_o</span></div><div class="line"><span class="meta">$</span><span class="bash">./configure</span></div><div class="line"><span class="meta">$</span><span class="bash">make </span></div><div class="line"><span class="meta">$</span><span class="bash">sudo make install</span></div></pre></td></tr></table></figure></p>
<p>源码安装<a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a><br>下载源码<a href="https://sourceforge.net/projects/ltilib/files/LTI-Lib-1/1.9.16/" target="_blank" rel="external">LTI-Source-Code</a>,并解压进入到 <em>linux</em> 目录：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$tar</span> zxvf <span class="number">100410</span>_ltilib-<span class="number">1.9</span>.<span class="number">16</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line"><span class="variable">$tar</span> zxvf <span class="number">100410</span>_ltilib-extras-<span class="number">1.9</span>.<span class="number">16</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line"><span class="variable">$cd</span> ltilib/linux</div></pre></td></tr></table></figure></p>
<p>生成Makefile：</p>
<p>　　<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$make -f Makefile.cvs</div><div class="line">$<span class="string">./configure</span> <span class="params">--disable-debug</span> <span class="params">--without-gtk</span> <span class="params">--disable-gtk</span> <span class="params">--prefix=</span>~<span class="string">/install</span></div></pre></td></tr></table></figure></p>
<p>编译安装,默认的安装目录是/usr/local/:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$make</span></span></div><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> make install</span></div></pre></td></tr></table></figure></p>
<h2 id="再次回到BFL的编译"><a href="#再次回到BFL的编译" class="headerlink" title="再次回到BFL的编译"></a>再次回到BFL的编译</h2><p>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">tar -xjvf orocos-bfl-0.6.1-src.tar.bz2<span class="comment">#解压</span></span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> orocos-ocl-1.8.0</span></div><div class="line"><span class="meta">$</span><span class="bash">mkdir build</span></div><div class="line"><span class="meta">$</span><span class="bash">cmake .</span></div><div class="line"><span class="meta">$</span><span class="bash">make</span></div><div class="line"><span class="meta">$</span><span class="bash">make check //测试编译结果</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo make install //安装</span></div></pre></td></tr></table></figure></p>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>编译过程中遇到很多问题，尤其是 <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 库的编译，该库貌似最近没有更新，而且不适应新的 <em>G++</em>编译器。</p>
<h2 id="aclocal-not-found"><a href="#aclocal-not-found" class="headerlink" title="aclocal: not found"></a>aclocal: not found</h2><p>编译 <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 时在步骤 <em>make</em> 提示错误：<br>　　<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$<span class="built_in">make</span> -f Makefile.cvs</div><div class="line"> Calling aclocal...</div><div class="line"> /bin/sh: <span class="number">2</span>: aclocal: <span class="keyword">not</span> found</div><div class="line"> <span class="built_in">make</span>: *** [aclocal.m4] <span class="built_in">Error</span> <span class="number">127</span></div></pre></td></tr></table></figure></p>
<p>需要安装 <em>autoconf</em><br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install autoconf</span></div></pre></td></tr></table></figure></p>
<h2 id="cannot-run-bin-bash-config-sub"><a href="#cannot-run-bin-bash-config-sub" class="headerlink" title="cannot run /bin/bash ./config.sub"></a>cannot run /bin/bash ./config.sub</h2><p>在 <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 的编译配置步骤./configure出现错误：<br>　　<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cannot <span class="built_in">run</span> /bin/bash ./<span class="built_in">config</span>.sub</div></pre></td></tr></table></figure></p>
<p>确定已安装libtool libtool-ltdl libtool-ltdl-devel<br>如果没安装，使用以下命令安装：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get  install  libtool</span></div><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get  install  libltdl-dev</span></div></pre></td></tr></table></figure></p>
<p>如果都已安装应该是链接出了问题。<br>　　<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ls -al <span class="built_in">config</span>/* 查看链接路径</div><div class="line">$<span class="built_in">find</span> / -name <span class="built_in">config</span>.<span class="built_in">sub</span> 或者locate <span class="built_in">config</span>.<span class="built_in">sub</span> 查找<span class="built_in">config</span>.<span class="built_in">sub</span>的路径</div><div class="line">$ln -s -f /正确路径/<span class="built_in">config</span>.<span class="built_in">sub</span> <span class="built_in">config</span>.<span class="built_in">sub</span></div></pre></td></tr></table></figure></p>
<p>例如我的:<br>　　<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ln -s -f /usr/share/libtool/<span class="built_in">config</span>/<span class="built_in">config</span>.<span class="built_in">sub</span> <span class="built_in">config</span>.<span class="built_in">sub</span></div></pre></td></tr></table></figure></p>
<p>同样的道理：config.guess路径不对也这样改过来,或者直接拷贝系统下的文件：<br> <em>/usr/share/libtool/config/config.sub</em> 和 <em>config.guess </em>到LTI源码目录。</p>
<h2 id="configure-error-cannot-compile-a-simple-Fortran-program"><a href="#configure-error-cannot-compile-a-simple-Fortran-program" class="headerlink" title="configure: error: cannot compile a simple Fortran program"></a>configure: error: cannot compile a simple Fortran program</h2><p> 配置 <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 时出现错误：<br>　　<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">./configure</div><div class="line">checking <span class="keyword">for</span> Fortran <span class="number">77</span> libraries <span class="keyword">of</span> ...</div><div class="line">checking <span class="keyword">for</span> gcc... gcc</div><div class="line">checking whether we are <span class="keyword">using</span> the GNU C compiler... yes</div><div class="line">checking whether gcc accepts -g... yes</div><div class="line">checking <span class="keyword">for</span> gcc <span class="keyword">option</span> <span class="keyword">to</span> accept ISO C89... none needed</div><div class="line">checking <span class="keyword">for</span> dummy main <span class="keyword">to</span> link <span class="keyword">with</span> Fortran <span class="number">77</span> libraries... none</div><div class="line">checking <span class="keyword">for</span> Fortran <span class="number">77</span> name-mangling scheme... configure: <span class="keyword">error</span>: <span class="keyword">in</span> `/home/steven/workspace/ros/ ltilib/linux<span class="comment">':</span></div><div class="line">configure: <span class="keyword">error</span>: cannot compile a simple Fortran program</div><div class="line">See `config.log<span class="comment">' for more details</span></div></pre></td></tr></table></figure></p>
<p>解决：<br>　　<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sudo apt-<span class="built_in">get</span> install f2c gfortran libblas-<span class="built_in">dev</span> liblapack-<span class="built_in">dev</span> libpcre3-<span class="built_in">dev</span> libreadline-<span class="built_in">dev</span></div></pre></td></tr></table></figure></p>
<h2 id="setParameters’-was-not-declared-in-this-scope"><a href="#setParameters’-was-not-declared-in-this-scope" class="headerlink" title="setParameters’ was not declared in this scope"></a>setParameters’ was not declared in this scope</h2><p>　　<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">make</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span> In instantiation of ‘<span class="symbol">lti:</span><span class="symbol">:cyclicTridiagonalEquationSystem&lt;T&gt;</span><span class="symbol">:</span><span class="symbol">:cyclicTridiagonalEquationSystem</span>(const <span class="symbol">lti:</span><span class="symbol">:cyclicTridiagonalEquationSystem&lt;T&gt;</span><span class="symbol">:</span><span class="symbol">:parameters&amp;</span>) [with T = double]’:</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem.<span class="symbol">cpp:</span><span class="number">44</span><span class="symbol">:</span><span class="number">18</span>:   required from here</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span><span class="number">40</span><span class="symbol">:</span><span class="number">28</span>: <span class="symbol">error:</span> ‘setParameters’ was <span class="keyword">not</span> declared <span class="keyword">in</span> this scope, <span class="keyword">and</span> no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]</div><div class="line">    setParameters(theParams);</div><div class="line">                           ^</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span><span class="number">40</span><span class="symbol">:</span><span class="number">28</span>: <span class="symbol">note:</span> declarations <span class="keyword">in</span> dependent  base ‘<span class="symbol">lti:</span><span class="symbol">:functor</span>’ are <span class="keyword">not</span> found by unqualified lookup</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span><span class="number">40</span><span class="symbol">:</span><span class="number">28</span>: <span class="symbol">note:</span> <span class="keyword">use</span> ‘this-&gt;setParameters’ instead</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span> In instantiation of ‘<span class="symbol">lti:</span><span class="symbol">:cyclicTridiagonalEquationSystem&lt;T&gt;</span><span class="symbol">:</span><span class="symbol">:cyclicTridiagonalEquationSystem</span>(<span class="symbol">lti:</span><span class="symbol">:vector&lt;T&gt;</span>, <span class="symbol">lti:</span><span class="symbol">:vector&lt;T&gt;</span>, <span class="symbol">lti:</span><span class="symbol">:vector&lt;T&gt;</span>, const T&amp;, const T&amp;) [with T = double]’:</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem.<span class="symbol">cpp:</span><span class="number">44</span><span class="symbol">:</span><span class="number">18</span>:   required from here</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span><span class="number">54</span><span class="symbol">:</span><span class="number">20</span>: <span class="symbol">error:</span> ‘setParameters’ was <span class="keyword">not</span> declared <span class="keyword">in</span> this scope, <span class="keyword">and</span> no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]</div></pre></td></tr></table></figure></p>
<p>经确认 <em>setParameters</em> 是有定义的，在文件 <em>src/basics/ltiFunctor.h</em> 中。突然想到是不是编译器的版本问题，果断降级编译器，考虑将GCC降级 目前系统的gcc版本为4.8将其降级为4.6：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install gcc-4.6 g++-4.6</span></div></pre></td></tr></table></figure></p>
<p>如果下载deb文件，则安装使用命令：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> dpkg –<span class="selector-tag">i</span> *<span class="selector-class">.deb</span></div><div class="line"><span class="variable">$sudo</span> apt-get -f install <span class="comment">//然后修改系统依赖</span></div></pre></td></tr></table></figure></p>
<p>设置系统使用的默认 GCC<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ln</span> -f -s <span class="regexp">/usr/</span>bin<span class="regexp">/gcc-4.6 /u</span>sr<span class="regexp">/bin/g</span>cc</div><div class="line"><span class="variable">$ln</span> -f -s <span class="regexp">/usr/</span>bin<span class="regexp">/gcc-ar-4.6 /u</span>sr<span class="regexp">/bin/g</span>cc-ar</div><div class="line"><span class="variable">$ln</span> -f -s <span class="regexp">/usr/</span>bin<span class="regexp">/gcc-nm-4.6 /u</span>sr<span class="regexp">/bin/g</span>cc-nm</div><div class="line"><span class="variable">$ln</span> -f -s <span class="regexp">/usr/</span>bin<span class="regexp">/gcc-ranlib-4.6 /u</span>sr<span class="regexp">/bin/g</span>cc-ranlib</div><div class="line"><span class="variable">$ln</span> -f -s <span class="regexp">/usr/</span>bin<span class="regexp">/g++-4.6 /u</span>sr<span class="regexp">/bin/g</span>++</div></pre></td></tr></table></figure></p>
<h2 id="linux-videodev-h-No-such-file-or-directory"><a href="#linux-videodev-h-No-such-file-or-directory" class="headerlink" title="linux/videodev.h: No such file or directory"></a>linux/videodev.h: No such file or directory</h2><p>make 后出现的错误：<br>　　<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">../src/io/ltiJPEGLibFunctor.cpp: In member function ‘bool lti::loadJPEG::<span class="keyword">load</span>(<span class="keyword">FILE</span>*, lti::image&amp;, bool&amp;)’:</div><div class="line">../src/io/ltiJPEGLibFunctor.cpp:<span class="number">309</span>:<span class="number">35</span>: <span class="keyword">warning</span>: <span class="keyword">variable</span> ‘rowCounter’ <span class="keyword">set</span> but <span class="keyword">not</span> used [-Wunused-but-<span class="keyword">set</span>-<span class="keyword">variable</span>]</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiLeutronFrameGrabber.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiLncFeatureFile.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiLoadImageList.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiLoadVectorImageList.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiLTIFunctor.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiMicroEnablePulnix.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiPanTiltUnit.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiPNGFunctor.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiPNGLibFunctor.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiQuickCam.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiRunLengthCodec.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiSonyEviD100P.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiToUCam.cpp</div><div class="line">../src/io/ltiToUCam.cpp:<span class="number">57</span>:<span class="number">28</span>: fatal <span class="keyword">error</span>: linux/videodev.h: <span class="keyword">No</span> such <span class="keyword">file</span> <span class="keyword">or</span> <span class="keyword">directory</span></div><div class="line">compilation terminated.</div><div class="line">make: *** [../obj/debug/ltiToUCam.o] <span class="keyword">Error</span> <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>新版内核中已经不再有 <em>videodev.h</em> 文件，而是用 <em>libv4l1-videodev.h</em> 代替。先查找系统中是否有该文件：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> find / -name videodev.h</span></div></pre></td></tr></table></figure></p>
<p>系统不存在此文件需要安装：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install libv4l-dev</span></div></pre></td></tr></table></figure></p>
<p>指向：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> ln -s <span class="regexp">/usr/i</span>nclude<span class="regexp">/libv4l1-videodev.h /u</span>sr<span class="regexp">/include/</span>linux<span class="regexp">/videodev.h</span></div></pre></td></tr></table></figure></p>
<h2 id="pwc-ioctl-h-No-such-file-or-directory"><a href="#pwc-ioctl-h-No-such-file-or-directory" class="headerlink" title="pwc-ioctl.h: No such file or directory"></a>pwc-ioctl.h: No such file or directory</h2><p>lit库make 后的错误：<br>　　<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> ..<span class="regexp">/src/</span>io/ltiToUCam.<span class="string">cpp:</span><span class="number">58</span>:<span class="number">23</span>: fatal <span class="string">error:</span> pwc-ioctl.<span class="string">h:</span> No such file or directory</div><div class="line">compilation terminated.</div></pre></td></tr></table></figure></p>
<p>系统提示不存在文件 <a href="https://saillard.org/linux/pwc/" target="_blank" rel="external">pwc-ioctl.h</a> 这个文件应该是webcamera的驱动文件,下载地址: <a href="https://saillard.org/linux/pwc/files/pwc-10.0.11.tar.bz2" target="_blank" rel="external">https://saillard.org/linux/pwc/files/pwc-10.0.11.tar.bz2</a><br>下载完后，解压并找到 <em>pwc-ioctl.h</em> 文件，拷贝到 <em>lti</em> 源代码 的 <em>/src/io/</em> 目录下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;计划在树莓派上仿真一下&lt;a href=&quot;http://www.ros.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS&lt;/a&gt; 的导航功能，需要安装 &lt;a href=&quot;https://github.com/ros-planning/navigation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;navigation&lt;/a&gt;包，结果编译 &lt;a href=&quot;https://github.com/ros-planning/navigation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;navigation&lt;/a&gt;包 时提示错误：&lt;br&gt;　　&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;– &lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; ‘orocos-bfl’ not found &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CMake Error at &lt;span class=&quot;regexp&quot;&gt;/usr/&lt;/span&gt;share&lt;span class=&quot;regexp&quot;&gt;/cmake-2.8/&lt;/span&gt;Modules/FindPkgConfig.&lt;span class=&quot;string&quot;&gt;cmake:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;283&lt;/span&gt; (message): &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;A required &lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; was not found &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Call Stack (most recent call first): &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;/usr/&lt;/span&gt;share&lt;span class=&quot;regexp&quot;&gt;/cmake-2.8/&lt;/span&gt;Modules/FindPkgConfig.&lt;span class=&quot;string&quot;&gt;cmake:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;337&lt;/span&gt; (_pkg_check_modules_internal) &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;robot_pose_ekf/CMakeLists.&lt;span class=&quot;string&quot;&gt;txt:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; (pkg_check_modules)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;于是填了后面的坑…&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="BayesianFiltering" scheme="http://stevenshi.me/tags/BayesianFiltering/"/>
    
  </entry>
  
  <entry>
    <title>ROS多机通信</title>
    <link href="http://stevenshi.me/2017/05/22/ros-communication/"/>
    <id>http://stevenshi.me/2017/05/22/ros-communication/</id>
    <published>2017-05-22T12:43:31.000Z</published>
    <updated>2017-05-23T00:23:33.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ROS移动平台使用的是树莓派3B，资源有限，只能运行一些低级任务，又不具备显示器，想实时的看到ROS的运行情况只能依靠远程登录的方式。可以让PC负责运行界面，树莓派负责底层的传感器数据采集，比如激光雷达的数据采集，通过网络传给PC，PC上运行界面程序，将树莓派传过来的数据进行处理，并生成地图。要实现类似功能，需要进行多个运行ROS的设备间的通讯。<br><a id="more"></a></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>首先保证 <em>raspberryPi</em> 与 <em>PC</em>在一个局域网内，并获取各自的 <em>IP</em> 地址。假设 <em>PC</em> 的 <em>IP</em>：192.168.2.102；<em>raspberryPi</em> 的 <em>IP</em>：192.168.2.105；之后查看各自的主机名,使用命令：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$hostname</span></span></div></pre></td></tr></table></figure></p>
<p>假设 <em>PC</em> 的主机名为： <em>steven-laptop</em>,而 <em>raspberryPi</em> 的主机名为 <em>raspberry</em>。我们需要将各自的主机名通知对方。在 <em>raspberryPi</em> 中打开 <em>/etc/hosts</em>文件加入 <em>PC</em> 的主机名以及IP地址：<br>　　<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.2</span><span class="selector-class">.102</span> <span class="selector-tag">steven-laptop</span></div></pre></td></tr></table></figure></p>
<p>同样在 <em>PC</em> 中告知 <em>raspberryPi</em> 的主机名和 <em>IP</em> 地址,修改<em>/etc/hosts</em>：<br>　　<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.2</span><span class="selector-class">.105</span> <span class="selector-tag">raspberry</span></div></pre></td></tr></table></figure></p>
<p>此时，可以使用:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$ping</span> 对方主机名</span></div></pre></td></tr></table></figure></p>
<p>进行连接测试。完成之后在 <em>PC</em> 中指定ROS通讯的主机名以及ROS服务器的地,让 <em>PC</em> 作为ROS服务器：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> ROS_HOSTNAME=steven-laptop</div><div class="line"><span class="keyword">export</span> ROS_MASTER_URI=http:<span class="comment">//steven-laptop:11311</span></div></pre></td></tr></table></figure></p>
<p>在 <em>raspberryPi</em> 中指定 <em>PC</em> 作为 <em>ROS Master</em>:<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> ROS_MASTER_URI=http:<span class="comment">//steven-laptop:11311</span></div></pre></td></tr></table></figure></p>
<h1 id="跨机运行talker-listenner"><a href="#跨机运行talker-listenner" class="headerlink" title="跨机运行talker/listenner"></a>跨机运行talker/listenner</h1><p>做完以上配置，即可进行多机通信的测试。先在 <em>PC</em> 上开一个 <em>terminal</em> 运行 <em>roscore</em>:<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$roscore</span> &amp; <span class="regexp">//</span><span class="string">'&amp;'</span>指后台运行</div></pre></td></tr></table></figure></p>
<p>然后运行 <em>beginner_tutorials</em>(参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials" target="_blank" rel="external">ROS tutorial</a>) 中的节点 <em>talker</em>;在  <em>raspberryPi</em> 中运行 <em>beginner_tutorials</em> 中的 <em>listenner</em> 节点。保证两个节点中发布的主题和订阅的主题名字一样。<br>此时可以在 <em>raspberryPi</em> 中收到 <em>PC</em> 传过来的信息：<br><img src="/2017/05/22/ros-communication/talker.jpg" alt=""></p>
<h1 id="跨机运行turtlesim"><a href="#跨机运行turtlesim" class="headerlink" title="跨机运行turtlesim"></a>跨机运行turtlesim</h1><p>在PC上运行：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscore</span> &amp; </span></div><div class="line"><span class="meta"><span class="meta-keyword">$rosrun</span> turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>
<p>在 <em>raspberryPi</em> 上使用键盘进行控制：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rosrun</span> turtlesim turtle_teleop_key</span></div></pre></td></tr></table></figure></p>
<p>效果图：<img src="/2017/05/22/ros-communication/turtle.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;ROS移动平台使用的是树莓派3B，资源有限，只能运行一些低级任务，又不具备显示器，想实时的看到ROS的运行情况只能依靠远程登录的方式。可以让PC负责运行界面，树莓派负责底层的传感器数据采集，比如激光雷达的数据采集，通过网络传给PC，PC上运行界面程序，将树莓派传过来的数据进行处理，并生成地图。要实现类似功能，需要进行多个运行ROS的设备间的通讯。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="Communication" scheme="http://stevenshi.me/tags/Communication/"/>
    
  </entry>
  
  <entry>
    <title>如何让Vim变的爱不释手</title>
    <link href="http://stevenshi.me/2017/05/18/vim/"/>
    <id>http://stevenshi.me/2017/05/18/vim/</id>
    <published>2017-05-18T01:02:06.000Z</published>
    <updated>2017-05-19T09:11:08.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><em>linux</em> 下有很多好用的 IDE，比如常见的 <a href="https://eclipse.org/" target="_blank" rel="external">Eclipse</a>、<a href="http://bluefish.openoffice.nl/index.html" target="_blank" rel="external">Bluefish</a>、<a href="https://netbeans.org/" target="_blank" rel="external">NetBeans</a> 等等，功能很多，有些功能我们不一定用得上,天天面对 <em>terminal</em> 敲命令的我们天生不喜欢鼠标。<em>linux</em> 下的文本编辑器使用最多的还是 <a href="http://www.vim.org/" target="_blank" rel="external">Vim</a> 。可不可以将 <a href="http://www.vim.org/" target="_blank" rel="external">Vim</a> 打造成一个好用的 IDE 来替代或者部分替代这些高大上的 IDE 呢? -程序猿天生喜欢折腾。话不多说先上图：<img src="/2017/05/18/vim/ycm.gif" alt=""><br><a id="more"></a></p>
<h1 id="vim-插件管理"><a href="#vim-插件管理" class="headerlink" title="vim 插件管理"></a>vim 插件管理</h1><p>首先安装 <a href="https://github.com/vim/vim.git" target="_blank" rel="external">Vim</a>, 确保版本在 7.4 以上。可以源码安装 <a href="https://github.com/vim/vim.git" target="_blank" rel="external">Vim</a> 也可以自动安装：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install vim</span></div></pre></td></tr></table></figure></p>
<p>由于发行版的不同，这种方式安装的 <a href="https://github.com/vim/vim.git" target="_blank" rel="external">Vim</a> 版本不一定是最新的，如果版本低于 7.4 请采用源码安装。 <a href="https://github.com/vim/vim.git" target="_blank" rel="external">Vim</a> 的插件管理一般是通过 <a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="external">Vundle</a> 来实现。 安装 <a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="external">Vundle</a>:<br>　　<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/VundleVim/Vundle.<span class="keyword">vim</span>.git ~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></div></pre></td></tr></table></figure></p>
<p>完成后修改用户目录下的 <em>.vimrc</em> 文件，添加以下项：<br>　　<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">"-----------Vundle configuration--------------------</span></div><div class="line"><span class="keyword">set</span> nocompatible <span class="comment">"去掉vi一致性</span></div><div class="line"><span class="keyword">filetype</span> off  </div><div class="line"><span class="comment">"包含vundle路径</span></div><div class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></div><div class="line"><span class="keyword">call</span> vundle#begin()</div><div class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></div><div class="line">Plugin <span class="string">'xxx/xxx'</span> <span class="comment">"新插件</span></div><div class="line"><span class="keyword">call</span> vundle#end()</div><div class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></div></pre></td></tr></table></figure></p>
<p>当需要安装新的插件时，将插件的仓库名按格式填入到<em>.vimrc</em> 文件：<br>　　<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Plugin</span> <span class="string">'xxx/xxx'</span></div></pre></td></tr></table></figure></p>
<p>插件的安装格式为：<br>　　<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Plugin <span class="string">'repository'</span> <span class="comment">//在Github vim-scripts 用户下的仓库,只需要写出仓库名称</span></div><div class="line">Plugin <span class="string">'username/repository'</span> <span class="comment">//在Github其他用户下的仓库, 需要写出”用户名/仓库名”</span></div><div class="line">Plugin <span class="string">'git://github.com/something.git'</span> <span class="comment">//不在Github上的插件，需要写出git全路径</span></div></pre></td></tr></table></figure></p>
<p>启动 <em>Vim</em>,运行命令安装插件：</p>
<p>　　<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">：PluginInstall</div></pre></td></tr></table></figure></p>
<p>卸载插件时先在 <em>.vimrc</em> 中删除掉不用的插件行然后运行清除命令：<br>　　<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">：PluginClean</div></pre></td></tr></table></figure></p>
<p>参考 <a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="external">Vundle</a> 和 <a href="https://github.com/vim-scripts" target="_blank" rel="external">vim-scripts</a></p>
<h1 id="项目树"><a href="#项目树" class="headerlink" title="项目树"></a>项目树</h1><p><a href="https://github.com/scrooloose/nerdtree" target="_blank" rel="external">NerdTree</a> 是一个树形目录插件，方便查看项目中的各个文件。<br>安装：<br>　　<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Plugin</span> <span class="string">'scrooloose/nerdtree'</span></div></pre></td></tr></table></figure></p>
<p>完成后在 <em>.vimrc</em> 中进行必要的配置：<br>　<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">"---------NERDTree Configruation-----------------------------------</span></div><div class="line"><span class="keyword">let</span> NERDTreeShowBookmarks=<span class="number">1</span> <span class="comment">" 当打开 NERDTree 窗口时，自动显示 Bookmarks</span></div><div class="line"><span class="keyword">let</span> NERDTreeWinPos=<span class="string">'left'</span> <span class="comment">"目录树在左边显示</span></div><div class="line"><span class="keyword">let</span> NERDTreeWinSize=<span class="number">30</span> <span class="comment">"目录树的窗口宽度</span></div><div class="line"><span class="comment">"开启和关闭快捷键为F2 或者 直接输入命令:NERDTree</span></div><div class="line"><span class="keyword">map</span> <span class="symbol">&lt;F2&gt;</span> :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></div></pre></td></tr></table></figure></p>
<p>效果：<br><img src="/2017/05/18/vim/tree.jpg" alt=""></p>
<h1 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h1><p><a href="https://github.com/Lokaltog/vim-powerline" target="_blank" rel="external">Vim-Powerline</a> <em>vim</em> 状态栏的显示，可以显示文件名、行列数、编码方式等。<br>安装：<br>　　<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Plugin</span> <span class="string">'Lokaltog/vim-powerline'</span></div></pre></td></tr></table></figure></p>
<p>现在新的仓库已迁移到 <a href="https://github.com/powerline/powerline" target="_blank" rel="external">powerline</a>。<br>效果：<br><img src="/2017/05/18/vim/powerline.jpg" alt=""></p>
<h1 id="括号自动补全"><a href="#括号自动补全" class="headerlink" title="括号自动补全"></a>括号自动补全</h1><p><a href="https://github.com/jiangmiao/auto-pairs" target="_blank" rel="external">auto-pair</a> 插件可以自动补全代码中的括号。安装：<br>　　<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Plugin</span> <span class="string">'jiangmiao/auto-pairs'</span></div></pre></td></tr></table></figure></p>
<h1 id="代码自动补全"><a href="#代码自动补全" class="headerlink" title="代码自动补全"></a>代码自动补全</h1><p>代码自动补全是各种IDE的必备功能，这里强烈推荐<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a>。它基于 <a href="https://zh.wikipedia.org/wiki/Clang" target="_blank" rel="external">clang</a> 能够为 <em>C/C++</em> 代码提供代码提示，也支持 <em>python C#</em>。<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a> 的安装正如传说中一样，非常麻烦，但使用起来非常爽。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>源码下载：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> clone --recursive https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Valloric/</span>YouCompleteMe.git ~<span class="regexp">/.vim/</span>bundle<span class="regexp">/YouCompleteMe</span></div></pre></td></tr></table></figure></p>
<p>安装 <a href="https://clang.llvm.org/get_started.html" target="_blank" rel="external">clang</a>：<br>　　<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install clang</span></div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a> 要求 <a href="https://clang.llvm.org/get_started.html" target="_blank" rel="external">clang</a> 最低版本为 3.9，如果不是可以在 <a href="http://releases.llvm.org/download.html" target="_blank" rel="external">这里</a> 下载。如果 <em>Ubuntu</em> 为32bits则需要下载源码手动编译。<br>安装 <em>python-dev</em>:<br>　　<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sudo apt-<span class="built_in">get</span> install python-<span class="built_in">dev</span> python3-<span class="built_in">dev</span></div></pre></td></tr></table></figure></p>
<p>安装 <em>Cmake</em>:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install cmake</span></div></pre></td></tr></table></figure></p>
<p>源码编译：<br>　　<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$<span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></div><div class="line">$<span class="string">./install.py</span> <span class="params">--clang-completer</span> <span class="params">--system-libclang</span></div></pre></td></tr></table></figure></p>
<p>–system-libclang是指使用系统的<em>libclang</em>。新版 <em>YouCompleteMe</em> 编译时不再需要 <em>make ycm_support_libs</em>。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>拷贝系统配置到用户目录下：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cp</span> ~<span class="regexp">/.vim/</span>bundle<span class="regexp">/YouCompleteMe/</span>third_party<span class="regexp">/ycmd/</span>cpp<span class="regexp">/ycm/</span>.ycm_extra_conf.py  ~<span class="regexp">/</span></div></pre></td></tr></table></figure></p>
<p><em>.vimrc</em>中的配置：<br>　　<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">"----------YouCompleteMe configuration---</span></div><div class="line"><span class="keyword">set</span> runtimepath+=~/.<span class="keyword">vim</span>/bundle/YouCompleteMe <span class="comment">"使用插件</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_global_ycm_extra_conf</span> = <span class="string">'~/.ycm_extra_conf.py'</span> <span class="comment">"指定全局配置文件路径</span></div><div class="line"><span class="keyword">set</span> completeopt=longest,<span class="keyword">menu</span>    <span class="comment">"让Vim的补全菜单行为与一般IDE一致</span></div><div class="line"><span class="keyword">autocmd</span> InsertLeave * <span class="keyword">if</span> <span class="built_in">pumvisible</span>() == <span class="number">0</span>|<span class="keyword">pclose</span>|<span class="keyword">endif</span> <span class="comment">"离开插入模式后自动关闭预览窗口</span></div><div class="line"><span class="comment">"回车即选中当前项</span></div><div class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;CR&gt;</span>       <span class="built_in">pumvisible</span>() ? <span class="string">"\&lt;C-y&gt;"</span> : <span class="string">"\&lt;CR&gt;"</span></div><div class="line"><span class="comment">"上下左右键的行为</span></div><div class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;Down&gt;</span>     <span class="built_in">pumvisible</span>() ? <span class="string">"\&lt;C-n&gt;"</span> : <span class="string">"\&lt;Down&gt;"</span></div><div class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;Up&gt;</span>       <span class="built_in">pumvisible</span>() ? <span class="string">"\&lt;C-p&gt;"</span> : <span class="string">"\&lt;Up&gt;"</span></div><div class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;PageDown&gt;</span> <span class="built_in">pumvisible</span>() ? <span class="string">"\&lt;PageDown&gt;\&lt;C-p&gt;\&lt;C-n&gt;"</span>:</div><div class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;PageUp&gt;</span>   <span class="built_in">pumvisible</span>() ? <span class="string">"\&lt;PageUp&gt;\&lt;C-p&gt;\&lt;C-n&gt;"</span> : <span class="string">"\&lt;PageUp&gt;"</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_key_list_select_completion</span> = [<span class="string">'&lt;Down&gt;'</span>]</div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_key_list_previous_completion</span> = [<span class="string">'&lt;Up&gt;'</span>]</div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_confirm_extra_conf</span>=<span class="number">0</span> <span class="comment">"关闭加载.ycm_extra_conf.py提示</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_collect_identifiers_from_tags_files</span>=<span class="number">1</span> <span class="comment">" 开启 YCM 基于标签引擎</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_min_num_of_chars_for_completion</span>=<span class="number">2</span> <span class="comment">" 从第2个键入字符就开始罗列匹配项</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_cache_omnifunc</span>=<span class="number">0</span>  <span class="comment">" 禁止缓存匹配项,每次都重新生成匹配项</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_seed_identifiers_with_syntax</span>=<span class="number">1</span>    <span class="comment">" 语法关键字补全</span></div><div class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;F5&gt;</span> :YcmForceCompileAndDiagnostics<span class="symbol">&lt;CR&gt;</span><span class="comment">"force recomile with syntastic</span></div><div class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="symbol">&lt;leader&gt;</span> <span class="symbol">&lt;C-x&gt;</span><span class="symbol">&lt;C-o&gt;</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_complete_in_comments</span> = <span class="number">1</span> <span class="comment">"在注释输入中也能补全</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_complete_in_strings</span> = <span class="number">1</span> <span class="comment">"在字符串输入中也能补全</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_collect_identifiers_from_comments_and_strings</span> = <span class="number">1</span> <span class="comment">"注释和字符串中的文字也会被收入补全</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:clang_user_options</span>=<span class="string">'|| exit 0'</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_goto_buffer_command</span> = <span class="string">'horizontal-split'</span> <span class="comment">"跳转到定义处，分屏打开</span></div><div class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>jd :YcmCompleter GoToDefinitionElseDeclaration<span class="symbol">&lt;CR&gt;</span> <span class="comment">" 跳转到定义处</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_error_symbol</span> = <span class="string">'&gt;&gt;'</span> <span class="comment">"错误提示符</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_warning_symbol</span> = <span class="string">'&gt;*'</span> <span class="comment">"警告提示符</span></div></pre></td></tr></table></figure></p>
<h2 id="32位系统安装"><a href="#32位系统安装" class="headerlink" title="32位系统安装"></a>32位系统安装</h2><p>由于我使用的是ubuntu14.04 32bit系统，所以有很多软件需要手动编译，在这里将遇到的问题悉数总结一下，有和我同样配置的小伙伴可以参考。32位系统没有合适的 <em>clang</em> 和 <em>vim</em>发行包，需要手动编译安装。</p>
<h3 id="Cmake-安装"><a href="#Cmake-安装" class="headerlink" title="Cmake 安装"></a>Cmake 安装</h3><p>使用sudo apt-get install cmake 默认安装的 <a href="https://cmake.org/" target="_blank" rel="external">Cmake</a> 版本为2.8.12.2。当使用 <a href="https://cmake.org/" target="_blank" rel="external">Cmake</a> 编译LLVM时提示 <a href="https://cmake.org/" target="_blank" rel="external">Cmake</a> 版本太低，要求至少为3.4.3以上 因此需要升级<a href="https://cmake.org/" target="_blank" rel="external">Cmake</a>。<br>下载源码：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$wget</span> https:<span class="regexp">//</span>cmake.org<span class="regexp">/files/</span>v3.<span class="number">4</span><span class="regexp">/cmake-3.4.3.tar.gz</span></div></pre></td></tr></table></figure></p>
<p>编译安装：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">./configure</span></div><div class="line"><span class="meta">$</span><span class="bash">make</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo make install</span></div></pre></td></tr></table></figure></p>
<h3 id="Clang-编译安装"><a href="#Clang-编译安装" class="headerlink" title="Clang 编译安装"></a>Clang 编译安装</h3><p>下载LLVM源代码并放到指定目录:<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$wget</span> http:<span class="comment">//llvm.org/releases/3.9.0/llvm-3.9.0.src.tar.xz</span></div><div class="line"><span class="variable">$tar</span> xf llvm-<span class="number">3.9</span>.<span class="number">0</span><span class="selector-class">.src</span><span class="selector-class">.tar</span><span class="selector-class">.xz</span></div><div class="line"><span class="variable">$mv</span> llvm-<span class="number">3.9</span>.<span class="number">0</span><span class="selector-class">.src</span>  llvm</div></pre></td></tr></table></figure></p>
<p>下载clang的源码并放到指定目录：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cd</span> llvm/tools</div><div class="line"><span class="variable">$wget</span> http:<span class="comment">//llvm.org/releases/3.9.0/cfe-3.9.0.src.tar.xz</span></div><div class="line"><span class="variable">$tar</span> xf cfe-<span class="number">3.9</span>.<span class="number">0</span><span class="selector-class">.src</span><span class="selector-class">.tar</span><span class="selector-class">.xz</span></div><div class="line"><span class="variable">$mv</span> cfe-<span class="number">3.9</span>.<span class="number">0</span><span class="selector-class">.src</span> clang</div></pre></td></tr></table></figure></p>
<p>下载clang-tools-extra源码并放到指定目录：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cd</span> llvm/tools/clang/tools</div><div class="line"><span class="variable">$wget</span> http:<span class="comment">//llvm.org/releases/3.9.0/clang-tools-extra-3.9.0.src.tar.xz</span></div><div class="line"><span class="variable">$tar</span> xf clang-tools-extra-<span class="number">3.9</span>.<span class="number">0</span><span class="selector-class">.src</span><span class="selector-class">.tar</span><span class="selector-class">.xz</span></div><div class="line"><span class="variable">$mv</span> clang-tools-extra-<span class="number">3.9</span>.<span class="number">0</span><span class="selector-class">.src</span>  extra</div></pre></td></tr></table></figure></p>
<p>下载compiler-rt源码并放到指定目录：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cd</span> llvm/projects</div><div class="line"><span class="variable">$wget</span> http:<span class="comment">//llvm.org/releases/3.9.0/compiler-rt-3.9.0.src.tar.xz</span></div><div class="line"><span class="variable">$tar</span> xf compiler-rt-<span class="number">3.9</span>.<span class="number">0</span><span class="selector-class">.src</span><span class="selector-class">.tar</span><span class="selector-class">.xz</span></div><div class="line"><span class="variable">$mv</span> compiler-rt-<span class="number">3.9</span>.<span class="number">0</span><span class="selector-class">.src</span> compiler-rt</div></pre></td></tr></table></figure></p>
<p>配置参考 <a href="http://llvm.org/docs/GettingStarted.html#local-llvm-configuration" target="_blank" rel="external">llvm官网</a>。<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cmake</span> –G “Unix Makefiles” <span class="regexp">/home/</span>steven<span class="regexp">/software/</span>llvm –DCMAKE_BUILD_TYPE=RELEASE –DLLVM_TARGETS_TO_BUILD=X86 –DLLVM_OPTIMIZED_TABLEGEN=ON –DCMAKE_INSTALL_PREFIX=<span class="regexp">/usr/</span>local<span class="regexp">/llvm</span></div></pre></td></tr></table></figure></p>
<p>编译参考<a href="http://llvm.org/docs/CMake.html" target="_blank" rel="external">llvm-cmake</a>：<br>3.7.0以后，不允许在源码树中进行构建，我们可以在llvm源码目录同级目录中创建一个目录build，然后使用绝对路径进行构建。<br>退出llvm目录，在llvm同级目录下建立build目录，进入到build目录</p>
<p>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ../..</span></div><div class="line"><span class="meta">$</span><span class="bash">mkdir build</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> build</span></div><div class="line"><span class="meta">$</span><span class="bash">cmake --build . //后面的 . 不能少,意思是当前目录</span></div></pre></td></tr></table></figure></p>
<p>安装：<br>　　<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$sudo</span> <span class="comment">cmake</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">build</span> <span class="string">.</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">target</span> <span class="comment">install</span></div></pre></td></tr></table></figure></p>
<p>也可以在安装时改变安装路径：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cmake</span> –DCMAKE_INSTALL_PREFIX=<span class="regexp">/tmp/</span>llvm –P cmake_install.cmake</div></pre></td></tr></table></figure></p>
<p>安装后看系统是否能找到，如果不能需要手动添加到环境变量。</p>
<h3 id="vim升级"><a href="#vim升级" class="headerlink" title="vim升级"></a>vim升级</h3><p>如果不升级 <em>Vim</em>,当调用 <em>YouCompleteMe</em> 时系统会提示错误：<br>　　<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">YouCompleteMe</span> <span class="selector-tag">unavailable</span>: <span class="selector-tag">requires</span> <span class="selector-tag">Vim</span> 7<span class="selector-class">.4</span><span class="selector-class">.143</span>+</div></pre></td></tr></table></figure></p>
<p>因此需要升级 <em>Vim</em>。先卸载原有版本：<br>　　<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> <span class="keyword">vim</span></div><div class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> <span class="keyword">vim</span>-<span class="keyword">runtime</span></div><div class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> <span class="keyword">vim</span> -tiny</div><div class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> <span class="keyword">vim</span>-common</div><div class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> <span class="keyword">vim</span>-doc</div><div class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> <span class="keyword">vim</span>-scripts</div></pre></td></tr></table></figure></p>
<p>首先安装一些依赖项：<br>　　<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> install libncurses5-<span class="built_in">dev</span> libgnome2-<span class="built_in">dev</span> libgnomeui-<span class="built_in">dev</span> libgtk2<span class="number">.0</span>-<span class="built_in">dev</span> libatk1<span class="number">.0</span>-<span class="built_in">dev</span> libbonoboui2-<span class="built_in">dev</span> libcairo2-<span class="built_in">dev</span> libx11-<span class="built_in">dev</span> libxpm-<span class="built_in">dev</span> libxt-<span class="built_in">dev</span> python-<span class="built_in">dev</span> python3-<span class="built_in">dev</span> ruby-<span class="built_in">dev</span> lua5<span class="number">.1</span> lua5<span class="number">.1</span>-<span class="built_in">dev</span></div></pre></td></tr></table></figure></p>
<p><em>–enable-pythoninterp</em> 和 <em>–enable-python3interp</em> 是 <em>vim</em> 对 <em>python</em> 版本的支持，安装 <em>YouCompleteMe</em> 必须要有这两个配置。<br>下载 <a href="http://mirror.metrocast.net/vim/unix/vim-8.0.tar.bz2" target="_blank" rel="external">vim-8.0</a>:<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$wget</span> http:<span class="regexp">//mi</span>rror.metrocast.net<span class="regexp">/vim/u</span>nix<span class="regexp">/vim-8.0.tar.bz2</span></div></pre></td></tr></table></figure></p>
<p>解压后配置：<br>　　<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">./configure</span> <span class="params">--with-features=huge</span> <span class="params">--enable-multibyte</span> <span class="params">--enable-rubyinterp</span> <span class="params">--enable-pythoninterp</span> <span class="params">--with-python-config-dir=/usr/lib/python2</span>.7/config-i386-linux-gnu  <span class="params">--enable-python3interp</span> <span class="params">--with-python3-config-dir=/usr/lib/python3</span>.4/config-3.4m-i386-linux-gnu <span class="params">--enable-perlinterp</span> <span class="params">--enable-luainterp</span> <span class="params">--enable-gui=gtk2</span> <span class="params">--enable-cscope</span> <span class="params">--prefix=/usr</span></div></pre></td></tr></table></figure></p>
<p>注意上面的 <em>–with-python3-config-dir</em> 一定要指定 <em>python3</em> 的完全路径，否则系统找不到。<br>编译安装：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$make</span> VIMRUNTIMEDIR=<span class="regexp">/usr/</span>share<span class="regexp">/vim/</span>vim80</div><div class="line"><span class="variable">$sudo</span> make install</div></pre></td></tr></table></figure></p>
<p>安装完后一定要测试一下依赖项是否完整，特别是对 <em>python3</em> 的依赖：<br>　　<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$<span class="keyword">vim</span> --<span class="keyword">version</span> | <span class="keyword">grep</span> <span class="keyword">python</span></div></pre></td></tr></table></figure></p>
<p>如果输出包含则表示安装完整：<br>　　<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">+cryptv          +linebreak       +<span class="keyword">python</span>/dyn      +vreplace</div><div class="line">+<span class="keyword">cscope</span>          +<span class="built_in">lispindent</span>      +<span class="keyword">python3</span>/dyn     +wildignore</div></pre></td></tr></table></figure></p>
<p>再回到以上YouCompleteMe的安装即可。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p><em>Vim</em> 还有很多有用的插件，需要慢慢研究，目前先装这些，对于常用的补全、跳转、快速查看目录等都可以实现，基本满足需求。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;em&gt;linux&lt;/em&gt; 下有很多好用的 IDE，比如常见的 &lt;a href=&quot;https://eclipse.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Eclipse&lt;/a&gt;、&lt;a href=&quot;http://bluefish.openoffice.nl/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bluefish&lt;/a&gt;、&lt;a href=&quot;https://netbeans.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NetBeans&lt;/a&gt; 等等，功能很多，有些功能我们不一定用得上,天天面对 &lt;em&gt;terminal&lt;/em&gt; 敲命令的我们天生不喜欢鼠标。&lt;em&gt;linux&lt;/em&gt; 下的文本编辑器使用最多的还是 &lt;a href=&quot;http://www.vim.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vim&lt;/a&gt; 。可不可以将 &lt;a href=&quot;http://www.vim.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vim&lt;/a&gt; 打造成一个好用的 IDE 来替代或者部分替代这些高大上的 IDE 呢? -程序猿天生喜欢折腾。话不多说先上图：&lt;img src=&quot;/2017/05/18/vim/ycm.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://stevenshi.me/categories/Linux/"/>
    
    
      <category term="Vim" scheme="http://stevenshi.me/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>linux串口数据不连续问题</title>
    <link href="http://stevenshi.me/2017/05/17/linux-serial/"/>
    <id>http://stevenshi.me/2017/05/17/linux-serial/</id>
    <published>2017-05-17T06:51:26.000Z</published>
    <updated>2017-05-19T09:11:08.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><em>linux</em> 下编写串口应用程序，无论是中断模式，还是 <em>select/poll</em> 模式，每次接收到的数据不一定是自己希望得到的数据。比如数据帧长度为40，有可能先接收到18个字节，接着接收到了12个字节，最后接收到了10个字节。不管怎么折腾，一帧数据总是不能一次接收完全。查阅相关资料，貌似是串口芯片缓存所致。串口芯片缓存满或着超时时间到都会触发读或写中断，这个说法是否真的如此，暂且不管，能不能用一种机制保证一次读到的是一帧数据呢？只有自己编写协议，先把数据分多次接收过来满足一个有效的帧长度之后，再进行处理。<br><a id="more"></a></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>关于 <em>linux</em> 串口编程有很多参考例子：<a href="http://www.faqs.org/docs/Linux-HOWTO/Serial-Programming-HOWTO.html" target="_blank" rel="external">serial-how-to</a> <a href="http://digilander.libero.it/robang/rubrica/serial.htm" target="_blank" rel="external">serial-Programming-Guide-For-POSIX-OS</a>。其他读者可自行 <a href="www.google.com">google</a>。为避免重复造轮子，本次采用 <a href="https://github.com/mwheels/libcssl" target="_blank" rel="external">libcssl</a>,也可以从 <a href="https://sourceforge.net/projects/cssl/" target="_blank" rel="external">sourceforge</a> 下载它是基于事件驱动的异步串口驱动库，用该库测试时，即出现上面的现象，一帧数据总是分多次接收。为了避免该现象，修改代码如下：<br>　　<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">static void callback(<span class="keyword">int</span> id,</div><div class="line">              uint8_t *buf,</div><div class="line">              <span class="keyword">int</span> <span class="keyword">length</span>)</div><div class="line"> &#123;</div><div class="line">     <span class="keyword">int</span> i;</div><div class="line">     <span class="regexp">//printf</span>(<span class="string">"length:%d\n"</span>,<span class="keyword">length</span>);</div><div class="line">     <span class="regexp">//printf</span>(<span class="string">"length:%d\n"</span>,<span class="keyword">length</span>);</div><div class="line">     <span class="regexp">//</span>如果数据帧不是一次接收到的</div><div class="line">     //则进行下面的处理，数据包的长度为FRAMELENGTH</div><div class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="keyword">length</span>;i++) &#123;</div><div class="line">         data[i+<span class="keyword">pos</span>] = buf[i];</div><div class="line">         <span class="regexp">//printf</span>(<span class="string">"0x%02x "</span>,buf[i]);</div><div class="line">     &#125;</div><div class="line">     //记录位置</div><div class="line">     <span class="keyword">pos</span> += <span class="keyword">length</span>;</div><div class="line">     <span class="regexp">//</span>收到既定的一帧</div><div class="line">     <span class="keyword">if</span>(<span class="keyword">pos</span> &gt;= FRAMELENGTH)&#123;</div><div class="line">         <span class="keyword">pos</span> = <span class="number">0</span>;</div><div class="line">         data_already = <span class="number">1</span>;</div><div class="line">     &#125;</div><div class="line">     //进行处理</div><div class="line">     <span class="keyword">if</span>(data_already == <span class="number">1</span>)&#123;<span class="regexp">//</span></div><div class="line"></div><div class="line">         <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;FRAMELENGTH;i++)</div><div class="line">             <span class="keyword">printf</span>(<span class="string">"0x%02x "</span>,data[i]);</div><div class="line">         memset(data,<span class="number">0</span>,FRAMELENGTH);</div><div class="line">         data_already = <span class="number">0</span> ;<span class="regexp">//</span>数据包准备好信号置零</div><div class="line">         <span class="keyword">printf</span>(<span class="string">"\n"</span>);</div><div class="line">     &#125;</div><div class="line"></div><div class="line"></div><div class="line">     //<span class="keyword">printf</span>(<span class="string">"\n"</span>);</div><div class="line">     <span class="regexp">//fflush</span>(stdout);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>在中断回调函数中，每次记录收到字节的个数 <em>pos</em> ，直到满足既定帧长度。测试结果可正常接收既定的一帧数据包，测试时可自行指定帧长度。<br>本次测试一帧数据长度为32字节：<br><img src="/2017/05/17/linux-serial/libcssl.jpg" alt=""><br>完整代码已 <em>push</em> 到 <a href="https://github.com/StevenShiChina/libcssl-cpp" target="_blank" rel="external">github</a>，欢迎下载测试交流。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;em&gt;linux&lt;/em&gt; 下编写串口应用程序，无论是中断模式，还是 &lt;em&gt;select/poll&lt;/em&gt; 模式，每次接收到的数据不一定是自己希望得到的数据。比如数据帧长度为40，有可能先接收到18个字节，接着接收到了12个字节，最后接收到了10个字节。不管怎么折腾，一帧数据总是不能一次接收完全。查阅相关资料，貌似是串口芯片缓存所致。串口芯片缓存满或着超时时间到都会触发读或写中断，这个说法是否真的如此，暂且不管，能不能用一种机制保证一次读到的是一帧数据呢？只有自己编写协议，先把数据分多次接收过来满足一个有效的帧长度之后，再进行处理。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://stevenshi.me/categories/Linux/"/>
    
    
      <category term="Linux serial" scheme="http://stevenshi.me/tags/Linux-serial/"/>
    
  </entry>
  
  <entry>
    <title>ROS串口通信</title>
    <link href="http://stevenshi.me/2017/05/17/ros-serial/"/>
    <id>http://stevenshi.me/2017/05/17/ros-serial/</id>
    <published>2017-05-17T02:03:49.000Z</published>
    <updated>2017-05-17T05:52:53.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>移植 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 的目的是控制机器人移动或者控制飞行器按既定轨道飞行，那么如何实现 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 与底层的移动控制设备通信呢？底层设备一般都是ARM架构实现，资源有限，不可能跑个ubuntu，当然也可以移植 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 的框架，但这个要对底层设备进行 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 框架的封装，实现起来麻烦一些。普遍来讲，底层设备一般都具备串口，通过串口与底层设备通讯，也许是一种高效便捷的方法。<br><a id="more"></a></p>
<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>在 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 平台下，设计一个串口节点，该节点订阅talker控制节点发来的命令主题，将命令通过串口设备发送到移动底座也可以是飞控设备；同时串口节点实时接收移动底座通过串口发送过来的传感器实时数据，并将该数据封装后以 <em>sensor</em> 主题的模式进行发布， <em>listenner</em> 节点可以实现订阅该主题。这样就实现了 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 与移动底座的串口通信过程。<img src="/2017/05/17/ros-serial/arch.jpg" alt=""></p>
<h1 id="串口节点"><a href="#串口节点" class="headerlink" title="串口节点"></a>串口节点</h1><p><em>linux</em> 下的串口有很多现成的实现例子，比如 <a href="https://github.com/mwheels/libcssl" target="_blank" rel="external">libcssl</a> ,当然也可以自己编程实现。对于 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 架构的串口也有现成的例子 <a href="http://wiki.ros.org/serial" target="_blank" rel="external">serial</a> ,源代码 <a href="https://github.com/wjwwood/serial.git" target="_blank" rel="external">serial code</a> 。也有基于 <a href="https://github.com/spiralray/stm32f1_rosserial" target="_blank" rel="external">stm32</a> 的 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 串口代码框架。也可以参考 <a href="https://github.com/openrobots-dev/uROSnode" target="_blank" rel="external">uROSnode</a> 避免重复造轮子，这里使用 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 现有的串口源码。</p>
<h2 id="建立工作目录"><a href="#建立工作目录" class="headerlink" title="建立工作目录"></a>建立工作目录</h2><p>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$mkdir</span> -p ~<span class="regexp">/catkin_ws/</span>src<span class="regexp">/mypackage/</span></div></pre></td></tr></table></figure></p>
<h2 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h2><p>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cd</span> ~<span class="regexp">/catkin_ws/</span>src<span class="regexp">/mypackage/</span></div><div class="line"><span class="variable">$git</span> clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/wjwwood/</span>serial.git</div></pre></td></tr></table></figure></p>
<h2 id="建立串口节点"><a href="#建立串口节点" class="headerlink" title="建立串口节点"></a>建立串口节点</h2><p>　　在 <em>mypackage</em> 目录下建立自己的节点程序包：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$catkin</span>_create_pkg my_serial_node std_msgs rospy roscpp</span></div></pre></td></tr></table></figure></p>
<p>此时会在 <em>mypackage/my_serial_node </em>目录下生成两个文件 <em>CMakeLists.txt</em> 和 <em>package.xml</em> 以及两个文件夹 <em>include/</em> 和 <em>src/</em>。修改 <em>CMakeLists.txt</em> 的内容：<br>　　<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">cmake_minimum_required(<span class="name">VERSION</span> <span class="number">2.8</span>.<span class="number">3</span>)</div><div class="line">project( <span class="name">my_serial_node</span> )</div><div class="line"></div><div class="line"> find_package(<span class="name">catkin</span> REQUIRED COMPONENTS</div><div class="line">    roscpp</div><div class="line">    serial</div><div class="line">    std_msgs</div><div class="line">  )</div><div class="line"> </div><div class="line"> catkin_package(</div><div class="line">   <span class="name">CATKIN_DEPENDS</span></div><div class="line">     serial</div><div class="line">     std_msgs</div><div class="line"> )</div><div class="line"></div><div class="line"> include_directories(</div><div class="line">   $&#123;catkin_INCLUDE_DIRS&#125;</div><div class="line"> )</div><div class="line"></div><div class="line"> add_executable( <span class="name">my_serial_node</span> src/my_serial_node.cpp)</div><div class="line"></div><div class="line"> target_link_libraries( <span class="name">my_serial_node</span></div><div class="line">   $&#123;catkin_LIBRARIES&#125;</div><div class="line"> )</div></pre></td></tr></table></figure></p>
<p>修改 <em>package.xml</em> 内容添加刚刚下载的 <em>serial</em> 依赖：<br>　　<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">package</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span> my_serial_node<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>my serial node <span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">license</span>&gt;</span>BSD<span class="tag">&lt;/<span class="name">license</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>serial<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>serial<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line"></div><div class="line"> <span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在 <em>src</em> 目录下建立 <em>my_serial_node.cpp</em> 文件：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;serial/serial.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;std_msgs/String.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;std_msgs/Empty.h&gt;</span></span></div><div class="line"></div><div class="line">serial::Serial ros_ser;</div><div class="line"><span class="comment">//回调函数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">callback</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span>&#123;</div><div class="line">     ROS_INFO_STREAM(<span class="string">"Write to serial port"</span> &lt;&lt; msg-&gt;data);</div><div class="line">     ros_ser.write(msg-&gt;data);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line">     ros::init(argc, argv, <span class="string">"my_serial_node"</span>);</div><div class="line">     ros::NodeHandle n;</div><div class="line">     <span class="comment">//订阅主题command</span></div><div class="line">     ros::Subscriber command_sub = n.subscribe(<span class="string">"command"</span>, <span class="number">1000</span>, callback);</div><div class="line">     <span class="comment">//发布主题sensor</span></div><div class="line">     ros::Publisher sensor_pub = n.advertise&lt;std_msgs::String&gt;(<span class="string">"sensor"</span>, <span class="number">1000</span>);</div><div class="line"></div><div class="line">     <span class="keyword">try</span></div><div class="line">     &#123;</div><div class="line">         ros_ser.setPort(<span class="string">"/dev/ttyUSB0"</span>);</div><div class="line">         ros_ser.setBaudrate(<span class="number">115200</span>);</div><div class="line">         ros_serial::Timeout to = serial::Timeout::simpleTimeout(<span class="number">1000</span>);</div><div class="line">         ros_ser.setTimeout(to);</div><div class="line">         ros_ser.open();</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">catch</span> (serial::IOException&amp; e)</div><div class="line">     &#123;</div><div class="line">         ROS_ERROR_STREAM(<span class="string">"Unable to open port "</span>);</div><div class="line">         <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">if</span>(ros_ser.isOpen())&#123;</div><div class="line">         ROS_INFO_STREAM(<span class="string">"Serial Port opened"</span>);</div><div class="line">     &#125;<span class="keyword">else</span>&#123;</div><div class="line">         <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     ros::<span class="function">Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>;</div><div class="line">     <span class="keyword">while</span>(ros::ok())&#123;</div><div class="line"></div><div class="line">         ros::spinOnce();</div><div class="line"></div><div class="line">         <span class="keyword">if</span>(ros_ser.available())&#123;</div><div class="line">             ROS_INFO_STREAM(<span class="string">"Reading from serial port"</span>);</div><div class="line">             std_msgs::String serial_data;</div><div class="line">             <span class="comment">//获取串口数据</span></div><div class="line">             serial_data.data = ros_ser.read(ros_ser.available());</div><div class="line">             ROS_INFO_STREAM(<span class="string">"Read: "</span> &lt;&lt; serial_data.data);</div><div class="line">             <span class="comment">//将串口数据发布到主题sensor</span></div><div class="line">             sensor_pub.publish(serial_data);</div><div class="line">         &#125;</div><div class="line">         loop_rate.sleep();</div><div class="line"></div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="建立talker节点"><a href="#建立talker节点" class="headerlink" title="建立talker节点"></a>建立talker节点</h2><p>同样在 <em>src</em> 目录下新建文件 <em>talker.cpp</em> ,并在 <em>CMakeLists.txt</em> 中添加以下内容：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(talker src/talker.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(talker $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p><em>talker.cpp</em>内容：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"std_msgs/String.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line"> ros::init(argc, argv, <span class="string">"talker"</span>);</div><div class="line"> ros::NodeHandle n;</div><div class="line"> <span class="comment">//发布主题command</span></div><div class="line"> ros::Publisher command_pub = n.advertise&lt;std_msgs::String&gt;(<span class="string">"command"</span>, <span class="number">1000</span>);</div><div class="line"> ros::<span class="function">Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>;</div><div class="line"> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"> <span class="keyword">while</span> (ros::ok())</div><div class="line"> &#123;</div><div class="line">   std_msgs::String msg;</div><div class="line">   <span class="built_in">std</span>::<span class="built_in">stringstream</span> ss_data;</div><div class="line">   ss_data &lt;&lt; <span class="string">"talker publish command "</span> &lt;&lt; count;</div><div class="line">   msg.data = ss_data.str();</div><div class="line">   ROS_INFO(<span class="string">"%s"</span>, msg.data.c_str());</div><div class="line">   command_pub.publish(msg);</div><div class="line">   ros::spinOnce();</div><div class="line">   loop_rate.sleep();</div><div class="line">   ++count;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="建立listenner节点"><a href="#建立listenner节点" class="headerlink" title="建立listenner节点"></a>建立listenner节点</h2><p>方式同 <em>talker</em> 节点。代码如下：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"std_msgs/String.h"</span></span></div><div class="line"><span class="comment">//回调函数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">callback</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span></div><div class="line">&#123;</div><div class="line"> ROS_INFO(<span class="string">"listener got: [%s]"</span>, msg-&gt;data.c_str());</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line"> ros::init(argc, argv, <span class="string">"listener"</span>);</div><div class="line"> ros::NodeHandle n;</div><div class="line"> <span class="comment">//订阅主题</span></div><div class="line"> ros::Subscriber sub = n.subscribe(<span class="string">"sensor"</span>, <span class="number">1000</span>, callback);</div><div class="line"> ros::spin();</div><div class="line"> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>回到目录 <em>catkin_ws</em> 进行编译：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make</span></div></pre></td></tr></table></figure></p>
<p>测试时将底层设备通过串口与运行 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 系统设备的串口连接，并写好底层设备的串口驱动程序。在 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 平台上开三个终端运行三个节点：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscore</span> //必须先运行</span></div><div class="line"><span class="meta"><span class="meta-keyword">$rosrun</span> my_serial_node my_serial_node</span></div><div class="line"><span class="meta"><span class="meta-keyword">$rosrun</span> my_serial_node talker</span></div><div class="line"><span class="meta"><span class="meta-keyword">$rosrun</span> my_serial_node listenner</span></div></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="/2017/05/17/ros-serial/serial.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;移植 &lt;a href=&quot;http://www.ros.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS&lt;/a&gt; 的目的是控制机器人移动或者控制飞行器按既定轨道飞行，那么如何实现 &lt;a href=&quot;http://www.ros.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS&lt;/a&gt; 与底层的移动控制设备通信呢？底层设备一般都是ARM架构实现，资源有限，不可能跑个ubuntu，当然也可以移植 &lt;a href=&quot;http://www.ros.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS&lt;/a&gt; 的框架，但这个要对底层设备进行 &lt;a href=&quot;http://www.ros.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS&lt;/a&gt; 框架的封装，实现起来麻烦一些。普遍来讲，底层设备一般都具备串口，通过串口与底层设备通讯，也许是一种高效便捷的方法。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS serial" scheme="http://stevenshi.me/tags/ROS-serial/"/>
    
  </entry>
  
  <entry>
    <title>树莓派3b安装ROS-Indigo</title>
    <link href="http://stevenshi.me/2017/05/15/ros-indigo-raspberry/"/>
    <id>http://stevenshi.me/2017/05/15/ros-indigo-raspberry/</id>
    <published>2017-05-15T03:24:49.000Z</published>
    <updated>2017-05-15T08:12:20.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前对于基于<a href="http://www.ros.org/" target="_blank" rel="external">ROS</a>的可移动平台，有两种方案较为流行，用户较多，可参考的资料也多。一种是使用英伟达的<a href="http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html" target="_blank" rel="external">TK1</a>，另外一种是使用<a href="https://www.raspberrypi.org/" target="_blank" rel="external">raspberryPi</a>。相对于<a href="http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html" target="_blank" rel="external">TK1</a>，树莓派在价格上更亲民，虽然性能上差一些，在计算<a href="https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%97%B6%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%9C%B0%E5%9B%BE%E6%9E%84%E5%BB%BA" target="_blank" rel="external">SLAM</a>时会有卡顿现象，但对于入门级用户来说，也是个不错的选择。<br><a id="more"></a></p>
<h1 id="树莓派3B上安装ROS-Indigo"><a href="#树莓派3B上安装ROS-Indigo" class="headerlink" title="树莓派3B上安装ROS-Indigo"></a>树莓派3B上安装ROS-Indigo</h1><p> <em>环境</em>： <em>Raspbian OS Jessie</em><br> <em>硬件</em>： <em>raspberryPi 3B</em>以及一张<em>16G SD 卡</em><br> <em>参考</em>： <a href="http://wiki.ros.org/ROSberryPi/Installing%20ROS%20Indigo%20on%20Raspberry%20Pi" target="_blank" rel="external">InstallROSIndigoOnRaspberryPi</a></p>
<h2 id="添加ROS代码仓"><a href="#添加ROS代码仓" class="headerlink" title="添加ROS代码仓"></a>添加ROS代码仓</h2><p>添加ROS源以及key<br>　　<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> <span class="keyword">sh</span> -c 'echo <span class="string">"deb http://packages.ros.org/ros/ubuntu jessie main"</span> &gt; /etc/apt/sources.<span class="keyword">list</span>.<span class="keyword">d</span>/ros-latest.<span class="keyword">list</span>'</div><div class="line"><span class="variable">$wget</span> https:<span class="comment">//raw.githubusercontent.com/ros/rosdistro/master/ros.key -O - | sudo apt-key add -</span></div></pre></td></tr></table></figure></p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get update</span></div><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get upgrade</span></div></pre></td></tr></table></figure></p>
<h2 id="安装引导程序依赖项"><a href="#安装引导程序依赖项" class="headerlink" title="安装引导程序依赖项"></a>安装引导程序依赖项</h2><p>　　<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$sudo apt-get install <span class="keyword">python</span>-pip <span class="keyword">python</span>-setuptools <span class="keyword">python</span>-yaml <span class="keyword">python</span>-distribute <span class="keyword">python</span>-docutils <span class="keyword">python</span>-dateutil <span class="keyword">python</span>-six</div><div class="line">$sudo pip install rosdep rosinstall_generator wstool rosinstall</div></pre></td></tr></table></figure></p>
<h2 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h2><p>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install vim</span></div></pre></td></tr></table></figure></p>
<h2 id="增大swap空间"><a href="#增大swap空间" class="headerlink" title="增大swap空间"></a>增大swap空间</h2><p>修改/etc/dphys-swapfile文件，增大交换空间，以免编译ROS源码时出现内存不足现象。将CONF_SWAPSIZE 修改为 2048<br>　　<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">CONF_SWAPSIZE</span>=<span class="number">2048</span></div></pre></td></tr></table></figure></p>
<h2 id="初始化rosdep"><a href="#初始化rosdep" class="headerlink" title="初始化rosdep"></a>初始化rosdep</h2><p>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> rosdep init</span></div><div class="line"><span class="meta"><span class="meta-keyword">$rosdep</span> update</span></div></pre></td></tr></table></figure></p>
<h2 id="创建workspace"><a href="#创建workspace" class="headerlink" title="创建workspace"></a>创建workspace</h2><p>创建一个workspace用于存储和编译ROS源码<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">mkdir ~/ros_catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/ros_catkin_ws/</span></div></pre></td></tr></table></figure></p>
<h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p>选择desktop完全版本<br>　　<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$rosinstall_generator</span> <span class="comment">desktop</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">rosdistro</span> <span class="comment">indigo</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">deps</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">wet</span><span class="literal">-</span><span class="comment">only</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">exclude</span> <span class="comment">roslisp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">tar</span> &gt; <span class="comment">indigo</span><span class="literal">-</span><span class="comment">desktop</span><span class="literal">-</span><span class="comment">wet</span><span class="string">.</span><span class="comment">rosinstall</span></div><div class="line"><span class="comment">$wstool</span> <span class="comment">init</span> <span class="literal">-</span><span class="comment">j4</span> <span class="comment">src</span> <span class="comment">indigo</span><span class="literal">-</span><span class="comment">desktop</span><span class="literal">-</span><span class="comment">wet</span><span class="string">.</span><span class="comment">rosinstall</span></div></pre></td></tr></table></figure></p>
<p>源代码将会保存在目录 <em>~/ros_catkin_ws/src</em> 下，<em>-j4</em>意思是开启4个线程同时下载。如果下载异常中断，可以尝试使用下面命令恢复：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$wstool</span> update -j4 -t src</span></div></pre></td></tr></table></figure></p>
<p>下载时间很漫长。</p>
<h2 id="解决ROS依赖"><a href="#解决ROS依赖" class="headerlink" title="解决ROS依赖"></a>解决ROS依赖</h2><p>在正式编译ROS之前，我们还需要手动安装以下几个依赖包：<br> <em>libconsole-bridge-dev</em><br> <em>liblz4-dev</em><br> <em>liburdfdom-headers-dev</em><br> <em>liburdfdom-dev</em><br> <em>collada-dom-dev</em><br>为这些依赖包建立单独的用于编译安装的文件夹，同时安装checkinstall和cmake：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$mkdir</span> ~/ros_catkin_ws/external_src</span></div><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install checkinstall cmake</span></div></pre></td></tr></table></figure></p>
<p>如果无法安装，更新一下再安装：<br>　　<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sudo apt-<span class="built_in">get</span> <span class="keyword">update</span> &amp;&amp; sudo apt-<span class="built_in">get</span> upgrade</div></pre></td></tr></table></figure></p>
<p>然后添加：<br>　　<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> <span class="keyword">sh</span> -c 'echo <span class="string">"deb-src http://mirrordirector.raspbian.org/raspbian/ testing main contrib non-free rpi"</span> &gt;&gt; /etc/apt/sources.<span class="keyword">list</span>'</div></pre></td></tr></table></figure></p>
<p>更新：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get update</span></div></pre></td></tr></table></figure></p>
<h2 id="安装libconsole-bridge-dev"><a href="#安装libconsole-bridge-dev" class="headerlink" title="安装libconsole-bridge-dev"></a>安装libconsole-bridge-dev</h2><p>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/ros_catkin_ws/external_src</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo apt-get build-dep console-bridge</span></div><div class="line"><span class="meta">$</span><span class="bash">apt-get <span class="built_in">source</span> -b console-bridge</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo dpkg -i libconsole-bridge0.2*.deb libconsole-bridge-dev_*.deb</span></div></pre></td></tr></table></figure></p>
<h2 id="安装liblz4-dev"><a href="#安装liblz4-dev" class="headerlink" title="安装liblz4-dev"></a>安装liblz4-dev</h2><p>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cd</span> ~/ros_catkin_ws/external_src</div><div class="line"><span class="variable">$apt</span>-get source -<span class="selector-tag">b</span> lz4 <span class="comment">//获取，该步骤耗时很长</span></div><div class="line"><span class="variable">$sudo</span> dpkg -<span class="selector-tag">i</span> liblz4-*<span class="selector-class">.deb</span> <span class="comment">//安装</span></div></pre></td></tr></table></figure></p>
<h2 id="安装liburdfdom-headers-dev"><a href="#安装liburdfdom-headers-dev" class="headerlink" title="安装liburdfdom-headers-dev"></a>安装liburdfdom-headers-dev</h2><p>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/ros_catkin_ws/external_src</span></div><div class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> https://github.com/ros/urdfdom_headers.git</span></div><div class="line"><span class="meta">$</span><span class="bash">git reset --hard 9aed725</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> urdfdom_headers</span></div><div class="line"><span class="meta">$</span><span class="bash">cmake .</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo checkinstall make installl</span></div></pre></td></tr></table></figure></p>
<p>最后一步提示：<br>　　<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">The <span class="keyword">package</span> documentation directory ./doc-pak does not exist.</div><div class="line">Should I create a <span class="keyword">default</span> set of <span class="keyword">package</span> docs?  [y]: y</div><div class="line">This <span class="keyword">package</span> will be built according to these <span class="string">values:</span></div><div class="line"></div><div class="line"><span class="number">0</span> -  <span class="string">Maintainer:</span> [ root<span class="meta">@raspberrypi</span> ]</div><div class="line"><span class="number">1</span> -  <span class="string">Summary:</span> [ Package created with checkinstall <span class="number">1.6</span><span class="number">.2</span> ]</div><div class="line"><span class="number">2</span> -  <span class="string">Name:</span>    [ urdfdom-headers ]</div><div class="line"><span class="number">3</span> -  <span class="string">Version:</span> [ <span class="number">20170318</span> ]</div><div class="line"><span class="number">4</span> -  <span class="string">Release:</span> [ <span class="number">1</span> ]</div><div class="line"><span class="number">5</span> -  <span class="string">License:</span> [ GPL ]</div><div class="line"><span class="number">6</span> -  <span class="string">Group:</span>   [ checkinstall ]</div><div class="line"><span class="number">7</span> -  <span class="string">Architecture:</span> [ armhf ]</div><div class="line"><span class="number">8</span> -  Source <span class="string">location:</span> [ urdfdom_headers ]</div><div class="line"><span class="number">9</span> -  Alternate source <span class="string">location:</span> [  ]</div><div class="line"><span class="number">10</span> - <span class="string">Requires:</span> [  ]</div><div class="line"><span class="number">11</span> - <span class="string">Provides:</span> [ urdfdom-headers ]</div><div class="line"><span class="number">12</span> - <span class="string">Conflicts:</span> [  ]</div><div class="line"><span class="number">13</span> - <span class="string">Replaces:</span> [  ]</div></pre></td></tr></table></figure></p>
<p>这里的’9aed725’就是将”liburdfdom-headers-dev”的安装版本变成我们需要的1.0.0版本。check-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从”urdfdom-headers” 改为 “liburdfdom-headers-dev”，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错<br>完成后检查安装的包是否正确:<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">dpkg <span class="_">-l</span> | grep urdf</span></div></pre></td></tr></table></figure></p>
<p>如果正确会输出：<br>　　<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ii  liburdfdom-headers-dev       <span class="number">20170318</span><span class="number">-1</span>     armhf        Package created with checkinstall <span class="number">1.6</span><span class="number">.2</span></div></pre></td></tr></table></figure></p>
<h2 id="安装liburdfdom-dev"><a href="#安装liburdfdom-dev" class="headerlink" title="安装liburdfdom-dev"></a>安装liburdfdom-dev</h2><p>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/ros_catkin_ws/external_src</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo apt-get install libboost-test-dev libtinyxml-dev</span></div><div class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> https://github.com/ros/urdfdom.git</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> urdfdom</span></div><div class="line"><span class="meta">$</span><span class="bash">cmake .</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo checkinstall make install</span></div></pre></td></tr></table></figure></p>
<p>check-install开始会让提示输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 “urdfdom”改为”liburdfdom-dev” ，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错。<br>编译出错提示找不到文件：utils.h<br>添加一个文件(utils.h)到/usr/local/include/urdf_model目录下：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cd</span> <span class="regexp">/usr/</span>local<span class="regexp">/include/u</span>rdf_model</div><div class="line"><span class="variable">$sudo</span> wget https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/ros/u</span>rdfdom_headers<span class="regexp">/master/u</span>rdf_model<span class="regexp">/include/u</span>rdf_model<span class="regexp">/utils.h</span></div></pre></td></tr></table></figure></p>
<p>重新编译</p>
<h2 id="安装collada-dom-dev"><a href="#安装collada-dom-dev" class="headerlink" title="安装collada-dom-dev"></a>安装collada-dom-dev</h2><p>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/ros_catkin_ws/external_src</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo apt-get install libboost-filesystem-dev libxml2-dev</span></div><div class="line"><span class="meta">$</span><span class="bash">wget http://downloads.sourceforge.net/project/collada-dom/Collada%20DOM/Collada%20DOM%202.4/collada-dom-2.4.0.tgz</span></div><div class="line"><span class="meta">$</span><span class="bash">tar -xzf collada-dom-2.4.0.tgz</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> collada-dom-2.4.0</span></div><div class="line"><span class="meta">$</span><span class="bash">cmake .</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo checkinstall make install</span></div></pre></td></tr></table></figure></p>
<p>check-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 “collada-dom”改为 “collada-dom-dev” ，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错。</p>
<h2 id="rosdep依赖"><a href="#rosdep依赖" class="headerlink" title="rosdep依赖"></a>rosdep依赖</h2><p>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/ros_catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo rosdep init</span></div><div class="line"><span class="meta">$</span><span class="bash">rosdep update</span></div><div class="line"><span class="meta">$</span><span class="bash">rosdep install --from-paths src --ignore-src --rosdistro indigo -y -r --os=debian:Jessie</span></div></pre></td></tr></table></figure></p>
<p><em>rosdep install</em>命令会寻找所有src目录的package并递归安装依赖，要安装的依赖包有点多，耐心等待。rosdep会检查src文件夹，安装其他的依赖包。</p>
<h2 id="编译catkin工作空间"><a href="#编译catkin工作空间" class="headerlink" title="编译catkin工作空间"></a>编译catkin工作空间</h2><p>在开始编译之前，先打两个补丁<br>打开文件:<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$vim</span> ~<span class="regexp">/ros_catkin_ws/</span>src<span class="regexp">/robot_model/</span>collada_urdf<span class="regexp">/src/</span>collada_urdf.cpp</div></pre></td></tr></table></figure></p>
<p>在最后一个#include后添加<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __arm__  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strings.h&gt;</span></span></div><div class="line"><span class="keyword">bool</span> Assimp::IOSystem::ComparePaths(<span class="keyword">const</span> <span class="keyword">char</span> *p1, <span class="keyword">const</span> <span class="keyword">char</span> *p2) <span class="keyword">const</span>  </div><div class="line">&#123;  </div><div class="line"><span class="keyword">return</span> !::strcasecmp(p1,p2);  </div><div class="line">&#125; </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>修改~/ros_catkin_ws/src/rviz/src/rviz/mesh_loader.cpp文件，在最后一个#include（如果#include的下一行是#endif则放到#endif后）行后加入以下代码<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __arm__                 <span class="comment">// fix for ARM build</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strings.h&gt;</span></span></div><div class="line"><span class="keyword">bool</span> Assimp::IOSystem::ComparePaths(<span class="keyword">const</span> <span class="keyword">char</span> *p1, <span class="keyword">const</span> <span class="keyword">char</span> *p2) <span class="keyword">const</span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">return</span> !::strcasecmp(p1, p2);</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>编译：<br>　　<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$<span class="keyword">cd</span> ~<span class="string">/ros_catkin_ws</span></div><div class="line">$sudo <span class="string">./src/catkin/bin/catkin_make_isolated</span> <span class="params">--install</span> -DCMAKE_BUILD_TYPE=Release <span class="params">--install-space</span> <span class="string">/opt/ros/indigo</span> -j4</div></pre></td></tr></table></figure></p>
<p>上面命令将编译文件安装到/opt/ros/indigo –j4是使用4个线程编译.</p>
<h2 id="出现的错误"><a href="#出现的错误" class="headerlink" title="出现的错误"></a>出现的错误</h2><p>###error: ‘shared_ptr’ in namespace ‘std’ does not name a template type<br>执行上面的编译命令提示错误：<br>　　<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">in</span> file included from <span class="regexp">/home/</span>pi<span class="regexp">/ros_catkin_ws/</span>src<span class="regexp">/robot_model/</span>urdf<span class="regexp">/include/</span>urdf/model.<span class="string">h:</span><span class="number">43</span>:<span class="number">0</span>, </div><div class="line">                 from <span class="regexp">/home/</span>pi<span class="regexp">/ros_catkin_ws/</span>src<span class="regexp">/robot_model/</span>urdf<span class="regexp">/src/</span>model.<span class="string">cpp:</span><span class="number">37</span>: </div><div class="line"><span class="regexp">/home/</span>pi<span class="regexp">/ros_catkin_ws/</span>devel_isolated<span class="regexp">/urdf/</span>include<span class="regexp">/urdf/</span>urdfdom_compatibility.<span class="string">h:</span><span class="number">78</span>:<span class="number">14</span>: <span class="string">error:</span> ‘shared_ptr’ <span class="keyword">in</span> namespace ‘std’ does not name a template type </div><div class="line"> typedef <span class="string">std:</span>:shared_ptr&lt;ModelInterface&gt; ModelInterfaceSharedPtr; </div><div class="line">              ^ </div><div class="line"><span class="regexp">/home/</span>pi<span class="regexp">/ros_catkin_ws/</span>devel_isolated<span class="regexp">/urdf/</span>include<span class="regexp">/urdf/</span>urdfdom_compatibility.<span class="string">h:</span><span class="number">79</span>:<span class="number">14</span>: <span class="string">error:</span> ‘shared_ptr’ <span class="keyword">in</span> namespace ‘std’ does not name a template type </div><div class="line"> typedef <span class="string">std:</span>:shared_ptr&lt;const ModelInterface&gt; ModelInterfaceConstSharedPtr; </div><div class="line">              ^ </div><div class="line"><span class="regexp">/home/</span>pi<span class="regexp">/ros_catkin_ws/</span>devel_isolated<span class="regexp">/urdf/</span>include<span class="regexp">/urdf/</span>urdfdom_compatibility.<span class="string">h:</span><span class="number">80</span>:<span class="number">14</span>: <span class="string">error:</span> ‘weak_ptr’ <span class="keyword">in</span> namespace ‘std’ does not name a template type </div><div class="line"> typedef <span class="string">std:</span>:weak_ptr&lt;ModelInterface&gt; ModelInterfaceWeakPtr; </div><div class="line">              ^ </div><div class="line">CMakeFiles<span class="regexp">/urdf.dir/</span>build.<span class="string">make:</span><span class="number">62</span>: recipe <span class="keyword">for</span> target <span class="string">'CMakeFiles/urdf.dir/src/model.cpp.o'</span> failed</div></pre></td></tr></table></figure></p>
<p>修改文件：<br>/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h<br>从78行开始到80行都屏蔽掉<br>　　<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> /*</div><div class="line"> typedef <span class="symbol">std:</span><span class="symbol">:shared_ptr&lt;ModelInterface&gt;</span> ModelInterfaceSharedPtr;</div><div class="line"> typedef <span class="symbol">std:</span><span class="symbol">:shared_ptr&lt;const</span> ModelInterface&gt; ModelInterfaceConstSharedPtr;</div><div class="line"> typedef <span class="symbol">std:</span><span class="symbol">:weak_ptr&lt;ModelInterface&gt;</span> ModelInterfaceWeakPtr;</div><div class="line">*<span class="regexp">/</span></div></pre></td></tr></table></figure></p>
<p>再次编译成功。这个过程非常漫长。<img src="/2017/05/15/ros-indigo-raspberry/catkin.jpg" alt=""></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>完成之后设置环境变量：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$source</span> <span class="regexp">/opt/</span>ros<span class="regexp">/indigo/</span>setup.bash</div></pre></td></tr></table></figure></p>
<p>设置ROS环境变量在每次启动shell时自动添加到bash会话<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">echo</span> <span class="string">"source /opt/ros/indigo/setup.bash"</span> &gt;&gt; ~/.bashrc</span></div></pre></td></tr></table></figure></p>
<p>到这里我们的ROS完整版就已经成功安装好了，不妨运行roscore试一下<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscore</span></span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/15/ros-indigo-raspberry/roscore.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;目前对于基于&lt;a href=&quot;http://www.ros.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS&lt;/a&gt;的可移动平台，有两种方案较为流行，用户较多，可参考的资料也多。一种是使用英伟达的&lt;a href=&quot;http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TK1&lt;/a&gt;，另外一种是使用&lt;a href=&quot;https://www.raspberrypi.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raspberryPi&lt;/a&gt;。相对于&lt;a href=&quot;http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TK1&lt;/a&gt;，树莓派在价格上更亲民，虽然性能上差一些，在计算&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%97%B6%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%9C%B0%E5%9B%BE%E6%9E%84%E5%BB%BA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SLAM&lt;/a&gt;时会有卡顿现象，但对于入门级用户来说，也是个不错的选择。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="raspberryPi ros-indigo jessie" scheme="http://stevenshi.me/tags/raspberryPi-ros-indigo-jessie/"/>
    
  </entry>
  
  <entry>
    <title>树莓派3B使用前的配置</title>
    <link href="http://stevenshi.me/2017/05/15/raspberryPi/"/>
    <id>http://stevenshi.me/2017/05/15/raspberryPi/</id>
    <published>2017-05-15T01:32:02.000Z</published>
    <updated>2017-05-19T09:13:51.480Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间入手一块树莓派<a href="https://www.raspberrypi.org/" target="_blank" rel="external">raspberryPi</a>型号为3B。关于它的介绍这里就不多说了，可自行<a href="https://www.google.com" target="_blank" rel="external">google</a>。使用前需要准备一张SD卡用于安装系统镜像。容量尽可能大，最好不低于16G。树莓派支持多种平台，因后续要安装<a href="http://www.ros.org/" target="_blank" rel="external">ROS</a>，考虑到官方支持的稳定性，选用 <em>Raspbian</em> 平台镜像。因为<em>Raspbian</em> 是官方推荐的支持的操作系统，而<a href="http://wiki.ros.org/cn/indigo" target="_blank" rel="external">Ros-indigo</a>也刚好有基于该平台的安装包。</p>
<h1 id="镜像安装"><a href="#镜像安装" class="headerlink" title="镜像安装"></a>镜像安装</h1><p>参考官网<a href="https://www.raspberrypi.org/documentation/installation/installing-images/" target="_blank" rel="external">Install-Images</a>。我安装的版本为<em>2017-03-02-raspbian-jessie.img</em><br><a id="more"></a></p>
<h1 id="开启SSH和串口"><a href="#开启SSH和串口" class="headerlink" title="开启SSH和串口"></a>开启SSH和串口</h1><p>该版本默认不开启SSH以及串口功能，需要手动开启。树莓派板子需要连接显示器、键盘、鼠标。在终端中输入:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> raspi-config</span></div></pre></td></tr></table></figure></p>
<p>进行配置。树莓派默认的用户名为<em>pi</em>密码为<em>raspberry</em>。<br><img src="/2017/05/15/raspberryPi/config.jpg" alt=""><br>进入第5项开启SSH以及GPIO14 GPIO15对应的串口控制台功能。串口功能开启后就可以抛弃鼠标、键盘、显示器直接在控制台访问树莓派。</p>
<h1 id="开启VNC远程桌面"><a href="#开启VNC远程桌面" class="headerlink" title="开启VNC远程桌面"></a>开启VNC远程桌面</h1><p>同样在配置菜单的第5项开启:<img src="/2017/05/15/raspberryPi/portconfig.jpg" alt=""><br>在windows上安装<a href="https://www.realvnc.com/" target="_blank" rel="external">VNC Viewer</a>并且输入树莓派的IP地址就可以远程访问树莓派。<img src="/2017/05/15/raspberryPi/vnc.jpg" alt=""><br>如果不知道IP地址，可以使用工具<a href="http://www.eusing.com/ipscan/free_ip_scanner.htm" target="_blank" rel="external">freeIpScanner</a>获取IP地址。或者使用linux下的nmap命令,nmap命令说明：<br>　　<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$namp <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.1</span>/<span class="number">24</span> //扫描整个子网</div><div class="line">$namp <span class="number">192.168</span><span class="meta">.1</span>.x (x:<span class="number">0</span>-<span class="number">255</span>) //扫描单个主机</div><div class="line">$namp <span class="number">192.168</span><span class="meta">.1</span>.x <span class="number">192.168</span><span class="meta">.1</span>.y //扫描多个目标</div><div class="line">$namp <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.100</span>-<span class="number">255</span> 扫描某个范围内的目标#<span class="built_in">ip</span>地址在<span class="number">192.168</span><span class="meta">.1</span><span class="meta">.100</span>和<span class="number">192.168</span><span class="meta">.1</span><span class="meta">.255</span>之间 </div><div class="line">$nmap <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.1</span>/<span class="number">24</span> -exclude <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.1</span> 扫描一个网段除了某个主机</div><div class="line">$nmap -p80,<span class="number">21</span>,<span class="number">23</span> <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.1</span> 扫描某个主机下的端口（<span class="number">80</span>端口 <span class="number">21</span>端口 <span class="number">23</span> 端口）</div></pre></td></tr></table></figure></p>
<h1 id="手动配置wifi"><a href="#手动配置wifi" class="headerlink" title="手动配置wifi"></a>手动配置wifi</h1><p>命令行下启动 <em>wpa_cli</em> 参考 <a href="http://w1.fi/wpa_supplicant/" target="_blank" rel="external">WPA_supplicant</a>：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> wpa_cli</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/15/raspberryPi/wpacli.jpg" alt=""><br>　 <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">status <span class="string">//</span>列出目前的联网状态</div><div class="line">list_networks <span class="string">//</span>记住网络ID</div><div class="line"><span class="keyword">set</span>_network <span class="string">"ID"</span> key_mgmt WPA-PSK  <span class="string">//</span>设置无线网络加密方式</div><div class="line"><span class="keyword">set</span>_network <span class="string">"ID"</span> psk <span class="string">"yourpassword"</span>   <span class="string">//</span>设置密码</div><div class="line">enable_network <span class="string">"ID"</span>   <span class="string">//</span>使能该网络</div><div class="line">save_config <span class="string">//</span>保存配置</div></pre></td></tr></table></figure></p>
<p>完成之后会在文件/etc/wpa_supplicant/wpa_supplicant.conf看到配置信息已经写入到文件,此时可以查看网络是否连接:<br>  　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$ifconfig</span></span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间入手一块树莓派&lt;a href=&quot;https://www.raspberrypi.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raspberryPi&lt;/a&gt;型号为3B。关于它的介绍这里就不多说了，可自行&lt;a href=&quot;https://www.google.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;google&lt;/a&gt;。使用前需要准备一张SD卡用于安装系统镜像。容量尽可能大，最好不低于16G。树莓派支持多种平台，因后续要安装&lt;a href=&quot;http://www.ros.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS&lt;/a&gt;，考虑到官方支持的稳定性，选用 &lt;em&gt;Raspbian&lt;/em&gt; 平台镜像。因为&lt;em&gt;Raspbian&lt;/em&gt; 是官方推荐的支持的操作系统，而&lt;a href=&quot;http://wiki.ros.org/cn/indigo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ros-indigo&lt;/a&gt;也刚好有基于该平台的安装包。&lt;/p&gt;
&lt;h1 id=&quot;镜像安装&quot;&gt;&lt;a href=&quot;#镜像安装&quot; class=&quot;headerlink&quot; title=&quot;镜像安装&quot;&gt;&lt;/a&gt;镜像安装&lt;/h1&gt;&lt;p&gt;参考官网&lt;a href=&quot;https://www.raspberrypi.org/documentation/installation/installing-images/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Install-Images&lt;/a&gt;。我安装的版本为&lt;em&gt;2017-03-02-raspbian-jessie.img&lt;/em&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://stevenshi.me/categories/Linux/"/>
    
    
      <category term="raspberryPi" scheme="http://stevenshi.me/tags/raspberryPi/"/>
    
  </entry>
  
  <entry>
    <title>hexo问题汇总</title>
    <link href="http://stevenshi.me/2017/05/13/hexo-error/"/>
    <id>http://stevenshi.me/2017/05/13/hexo-error/</id>
    <published>2017-05-13T09:42:11.000Z</published>
    <updated>2017-05-14T23:56:22.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unable-to-call-the-return-value-of-posts-“first”-“updated”-“toISOString”-which-is-undefined-or-falsey"><a href="#Unable-to-call-the-return-value-of-posts-“first”-“updated”-“toISOString”-which-is-undefined-or-falsey" class="headerlink" title="Unable to call the return value of (posts[“first”])[“updated”][“toISOString”], which is undefined or falsey"></a>Unable to call the return value of (posts[“first”])[“updated”][“toISOString”], which is undefined or falsey</h1><p> 运行<em>hexo g</em>生成静态文件时提示错误：<br>　　<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">INFO  Start processing</div><div class="line">FATAL Something<span class="comment">'s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span></div><div class="line">Template render <span class="keyword">error</span>: (unknown path) [Line <span class="number">7</span>, Column <span class="number">23</span>]</div><div class="line"><span class="keyword">Error</span>: Unable <span class="keyword">to</span> <span class="keyword">call</span> `the <span class="keyword">return</span> value <span class="keyword">of</span> (posts[<span class="string">"first"</span>])[<span class="string">"updated"</span>][<span class="string">"toISOString"</span>]`, which <span class="keyword">is</span> undefined <span class="keyword">or</span> falsey</div></pre></td></tr></table></figure></p>
 <a id="more"></a>
<p> 当移除掉插件hexo-generator-feed和hexo-generator-sitemap后错误消失，怀疑该插件与hexo兼容性不好<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> uninstall hexo-generator-feed</span></div><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> uninstall hexo-generator-sitemap</span></div></pre></td></tr></table></figure></p>
<h1 id="WARN-No-layout-index-html"><a href="#WARN-No-layout-index-html" class="headerlink" title="WARN No layout: index.html?"></a>WARN No layout: index.html?</h1><p> 查看主题目录是否为空，如果为空下载主题</p>
<h1 id="fatal-AggregateException-encountered"><a href="#fatal-AggregateException-encountered" class="headerlink" title="fatal: AggregateException encountered"></a>fatal: AggregateException encountered</h1><p> 当推送至远程分支时提示错误:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$git</span> push origin hexo</span></div><div class="line">fatal: AggregateException encountered</div><div class="line">  •¢ÉúÒ»¸ö»ò¶à¸ö´íÎó¡£</div><div class="line">Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>:</div></pre></td></tr></table></figure></p>
<p> 多数是网络问题，重来一次即可。</p>
<h2 id="Cannot-GET"><a href="#Cannot-GET" class="headerlink" title="Cannot GET /"></a>Cannot GET /</h2><p> 当启动服务器后，浏览器输入<em><a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></em>，却提示错误：<em>Cannot GET</em><br> 一般是配置文件错误，当在其他电脑从远程clone下来代码仓后，安装必要的工具使用 <em>hexo clean</em> 以及 <em>hexo g</em> 后产生的 <em>public</em> 文件与本地电脑原有源码仓生成的 <em>public</em> 不一样，查看里面并没有生成以日期命名的文章文件，怀疑是配置文件出了问题，对比两个配置文件都一样，最后发现 <em>node_modules</em> 文件夹问题，就是hexo的配置和安装问题，其他文件都推送到远程仓库，唯独没有推送这个文件夹，它保存有hexo的一些可执行文件。按照hexo安装教程在clone下来的代码仓重新安装一遍hexo，最后还是不行。使用<a href="http://winmerge.org/" target="_blank" rel="external">WinMerge</a>比较原电脑中和现在电脑中的两个node_modules文件的不同，发现hexo的很多二进制文件都不同。无语-<br> 当使用 <em>hexo init</em> 后，再把远程仓库的配置文件覆盖到本地电脑后，可以正常生成静态网页。肯定是 <em>hexo</em> 安装不完整缺少某些依赖项。<br> 所以，当在一台新电脑部署 <em>hexo</em> 的正确做法是安装好 <em>hexo</em> 之后需要 <em>hexo init</em> 一下，这样会安装依赖项，得到完整的 <em>node_modules</em>文件夹：<br>　　<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$npm</span> install hexo --<span class="keyword">save</span></div><div class="line"><span class="variable">$npm</span> install hexo-server  --<span class="keyword">save</span></div><div class="line"><span class="variable">$npm</span> install hexo-generator-<span class="keyword">search</span> --<span class="keyword">save</span></div><div class="line"><span class="variable">$npm</span> install hexo-deployer-git --<span class="keyword">save</span></div><div class="line"><span class="variable">$hexo</span> init <span class="comment">//</span></div></pre></td></tr></table></figure></p>
<p> 初始化之后，保留node_modules文件夹，其它删除，之后获取远程仓库最新更新：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> remote add origin https:<span class="regexp">//gi</span>thub.com<span class="regexp">/yourusername/y</span>ourusername.github.io.git</div><div class="line"><span class="variable">$git</span> pull origin hexo</div></pre></td></tr></table></figure></p>
<h1 id="bash-dev-tty-No-such-device-or-address-error-failed-to-execute-prompt-script-exit-code-1"><a href="#bash-dev-tty-No-such-device-or-address-error-failed-to-execute-prompt-script-exit-code-1" class="headerlink" title="bash: /dev/tty: No such device or address.error: failed to execute prompt script (exit code 1)"></a>bash: /dev/tty: No such device or address.error: failed to execute prompt script (exit code 1)</h1><p> 当部署自己的博客文件时：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$hexo</span> d</span></div></pre></td></tr></table></figure></p>
<p> 出现以下错误：<br>　　<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bash: /dev/tty: No such device or address</div><div class="line"><span class="keyword">error: </span>failed to execute prompt script (exit code 1)</div><div class="line">fatal: could not read Username for 'https://github.com': Invalid argument</div><div class="line">FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</div><div class="line"><span class="keyword">Error: </span>bash: /dev/tty: No such device or address</div><div class="line"><span class="keyword">error: </span>failed to execute prompt script (exit code 1)</div><div class="line">fatal: could not read Username for 'https://github.com': Invalid argument.</div></pre></td></tr></table></figure></p>
<p> 出现该现象是 <em>windows</em> 环境下的<em>git bash shell</em>配置问题，当改用 <em>github for windows</em> 下的<em>git bash shell</em> 再次部署时问题解决。由于国内的网络问题，官网下载很难安装成功，这里附上一个CSDN上的大神的离线安装包地址<a href="http://download.csdn.net/user/devsplash" target="_blank" rel="external">GithubforWindows</a>。</p>
<h1 id="Permission-denied-publickey"><a href="#Permission-denied-publickey" class="headerlink" title="Permission denied (publickey)."></a>Permission denied (publickey).</h1><p> 当部署博客文件时提示错误：<br>　　<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$hexo d</div><div class="line">The authenticity <span class="keyword">of</span> host <span class="symbol">'github.com</span> (<span class="number">192.30</span>.<span class="number">255.112</span>)' can<span class="symbol">'t</span> be established.</div><div class="line">Permission denied (publickey).</div></pre></td></tr></table></figure></p>
<p> 本机没有配置SSH Key：<br> 　<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span></div></pre></td></tr></table></figure></p>
<p> 将生成的SSH Key拷贝下来，粘贴到自己的github网站的new ssh key中即可。或者使用原来电脑的SSH Key。完成后查看配置是否成功：<br> 　<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ssh -T git<span class="symbol">@github</span>.com</div></pre></td></tr></table></figure></p>
<h1 id="Changes-not-staged-for-commit-Untracked-files"><a href="#Changes-not-staged-for-commit-Untracked-files" class="headerlink" title="Changes not staged for commit: Untracked files:"></a>Changes not staged for commit: Untracked files:</h1><p>当每次git commit提交更改时，总是提示以下错误：<br>　　<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$git <span class="keyword">commit</span> -m <span class="string">""</span></div><div class="line"><span class="keyword">On</span> branch hexo</div><div class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> <span class="keyword">commit</span>:</div><div class="line">      </div><div class="line">Untracked files:</div></pre></td></tr></table></figure></p>
<p> 通过输入git status查看提示：<br>　　<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch hexo</div><div class="line">Changes not staged for <span class="keyword">commit</span>:</div><div class="line"> (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</div><div class="line"> (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</div><div class="line"></div><div class="line">       </div><div class="line">Untracked files:</div><div class="line"> (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">include</span> <span class="keyword">in</span> what will be committed)</div><div class="line"></div><div class="line">       </div><div class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure></p>
<p> <em>Changes not staged for commit</em> 说明 <em>git</em> 已经跟踪到这些文件的修改，但还没有放到暂存区，需要使用 <em>git add</em> 命令提交更新到暂存区。之后再通过 <em>git status</em> 查看状态：<br>　　<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$git status</div><div class="line"><span class="keyword">On</span> branch hexo</div><div class="line">Changes <span class="keyword">to</span> be committed:</div><div class="line"> (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</div></pre></td></tr></table></figure></p>
<p> 状态已经变成了Changes to be committed。提示未被跟踪的文件Untracked files说明是新建立的文件，在git之前的提交中没有这些文件，git不会自动将它们纳入跟踪范围，必须手动添加这些文件。使用 <em>git add</em> 命令跟踪新文件：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> add <span class="string">"file"</span> <span class="regexp">//</span>添加未被跟踪的文件</div></pre></td></tr></table></figure></p>
<p> 如果还有错误，直接清除缓存:<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">git rm -r --cached .</span></div><div class="line"><span class="meta">$</span><span class="bash">git add --all //跟踪所有文件</span></div><div class="line"><span class="meta">$</span><span class="bash">git commit -m <span class="string">"your commit"</span> //提交更新</span></div><div class="line"><span class="meta">$</span><span class="bash">git push origin <span class="string">"yourbranch"</span> //推送到远程分支yourbranch</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unable-to-call-the-return-value-of-posts-“first”-“updated”-“toISOString”-which-is-undefined-or-falsey&quot;&gt;&lt;a href=&quot;#Unable-to-call-the-return-value-of-posts-“first”-“updated”-“toISOString”-which-is-undefined-or-falsey&quot; class=&quot;headerlink&quot; title=&quot;Unable to call the return value of (posts[“first”])[“updated”][“toISOString”], which is undefined or falsey&quot;&gt;&lt;/a&gt;Unable to call the return value of (posts[“first”])[“updated”][“toISOString”], which is undefined or falsey&lt;/h1&gt;&lt;p&gt; 运行&lt;em&gt;hexo g&lt;/em&gt;生成静态文件时提示错误：&lt;br&gt;　　&lt;figure class=&quot;highlight vbnet&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo g&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;INFO  Start processing&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;FATAL Something&lt;span class=&quot;comment&quot;&gt;&#39;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Template render &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;: (unknown path) [Line &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, Column &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Error&lt;/span&gt;: Unable &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;call&lt;/span&gt; `the &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; (posts[&lt;span class=&quot;string&quot;&gt;&quot;first&quot;&lt;/span&gt;])[&lt;span class=&quot;string&quot;&gt;&quot;updated&quot;&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&quot;toISOString&quot;&lt;/span&gt;]`, which &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; undefined &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; falsey&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://stevenshi.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://stevenshi.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>浮点数与16进制的相互转换</title>
    <link href="http://stevenshi.me/2017/05/11/float-to-byte/"/>
    <id>http://stevenshi.me/2017/05/11/float-to-byte/</id>
    <published>2017-05-11T05:35:03.000Z</published>
    <updated>2017-05-19T09:11:08.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 在嵌入式中经常会遇到浮点数的传输问题，一般将浮点数转换成4字节的16进制传输，这里的浮点数仅限于单精度浮点。大多数人的做法都是使用指针实现强制类型转换，其实浮点数在CPU里就是以4字节存储，既然在同一块内存，那我们能不能使用联合体呢？答案是肯定的。除了强制类型转换，这里介绍使用联合体实现浮点和16进制的转换，简单易用，你绝对会爱上这种方法。<br><a id="more"></a></p>
<h1 id="强制转换法"><a href="#强制转换法" class="headerlink" title="强制转换法"></a>强制转换法</h1><p> 浮点转换成4字节16进制:<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">float2bytes</span><span class="params">(<span class="keyword">float</span> p,<span class="keyword">unsigned</span> <span class="keyword">char</span> *bytes)</span></span></div><div class="line">&#123;</div><div class="line"> <span class="keyword">unsigned</span> <span class="keyword">char</span> *pchar = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)&amp;p;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; <span class="keyword">sizeof</span>(<span class="keyword">float</span>);i++)</div><div class="line"> &#123;</div><div class="line">   *bytes = *pchar;</div><div class="line">   pchar++;</div><div class="line">   bytes++;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 16进制4字节转换成浮点：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">float</span> <span class="title">bytes2float</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *bytes)</span></span></div><div class="line">&#123;</div><div class="line"> <span class="keyword">return</span> *((<span class="keyword">float</span>*)bytes);<span class="comment">//强制转换</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="联合体法"><a href="#联合体法" class="headerlink" title="联合体法"></a>联合体法</h1><p> 话不多说，直接上代码：<br>　<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typedef <span class="class"><span class="keyword">union</span>&#123;</span></div><div class="line"></div><div class="line">unsigned char cvalue[<span class="number">4</span>];</div><div class="line">float fvalue;</div><div class="line"></div><div class="line">&#125;float_union;</div></pre></td></tr></table></figure></p>
<p> 定义联合体变量:<br>　<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">float_union trans_data<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p> 此时如果给变量trans_data赋值一个浮点数:<br> 　<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">trans_data.fvalue = <span class="number">10.05</span><span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p> 那么直接调用cvalue即可获取浮点数10.05的4字节16进制数据：<br>　 <figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</div><div class="line"><span class="keyword">printf</span>(<span class="string">" 0x%02x"</span>,trans_data.cvalue[i]);</div></pre></td></tr></table></figure></p>
<p> 是不是非常简单实用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt; 在嵌入式中经常会遇到浮点数的传输问题，一般将浮点数转换成4字节的16进制传输，这里的浮点数仅限于单精度浮点。大多数人的做法都是使用指针实现强制类型转换，其实浮点数在CPU里就是以4字节存储，既然在同一块内存，那我们能不能使用联合体呢？答案是肯定的。除了强制类型转换，这里介绍使用联合体实现浮点和16进制的转换，简单易用，你绝对会爱上这种方法。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://stevenshi.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://stevenshi.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>hexo进阶</title>
    <link href="http://stevenshi.me/2017/05/09/hexo-advance/"/>
    <id>http://stevenshi.me/2017/05/09/hexo-advance/</id>
    <published>2017-05-09T06:32:38.000Z</published>
    <updated>2017-05-15T01:22:34.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h1><p>页面指的是分类页<em>categories</em>、标签页<em>tags</em>、关于页<em>about</em>等。使用以下命令生成以上页面参考<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">nexT</a>:<br>　　<figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">$hexo</span> <span class="keyword">new</span> page categories</div><div class="line"><span class="built_in">$hexo</span> <span class="keyword">new</span> page tags</div><div class="line"><span class="built_in">$hexo</span> <span class="keyword">new</span> page about</div></pre></td></tr></table></figure></p>
<p>在 <em>hexo</em> 配置文件 <em>_config.yml</em> 文件中设置 <em>post_asset_folder</em> 为true,当新建页面后会自动生成一个同名文件夹，用于存储所需的资源图片等。生成以上页面后在主题配置文件中 <em>themes/nexT/_config.yml</em> 打开相关配置项:<br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">menu:</span></div><div class="line"><span class="symbol">  home:</span> /</div><div class="line"><span class="symbol">  categories:</span> /categories</div><div class="line"><span class="symbol">  about:</span> /about</div><div class="line"><span class="symbol">  archives:</span> /archives</div><div class="line"><span class="symbol">  tags:</span> /tags</div><div class="line">  <span class="meta">#sitemap: /sitemap.xml</span></div><div class="line">  <span class="meta">#commonweal: /404.html</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>设置自己的标签页面位于<em>hexo/source/tags</em>:<br>  <figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">title: 标签</div><div class="line">date: 2017<span class="string">-05</span><span class="string">-05</span> 12:30:52</div><div class="line">type: "tags"</div><div class="line">comments: false</div><div class="line"><span class="keyword">tags:</span></div><div class="line"> - Qt</div><div class="line"> - Linux</div><div class="line"> - Hexo</div><div class="line"> - ROS</div></pre></td></tr></table></figure></p>
<p>可以在上面添加自己的标签。<br>分类页的示例如下:<br>　<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">title:</span> 分类</div><div class="line"><span class="string">date:</span> <span class="number">2017</span><span class="number">-05</span><span class="number">-05</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">42</span></div><div class="line"><span class="string">type:</span> <span class="string">"categories"</span></div><div class="line"><span class="string">comments:</span> <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h1 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h1><p>新文章的发表使用以下命令：<br>　　<figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">$hexo</span> <span class="keyword">new</span> post <span class="string">"文章名"</span> 或者 hexo n <span class="string">"文章名"</span></div></pre></td></tr></table></figure></p>
<p>一个文章的开头应包含:<br>　<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: #文章题目</div><div class="line">date: #日期</div><div class="line"><span class="keyword">tags:</span> #标签</div><div class="line">categories: #分类</div></pre></td></tr></table></figure></p>
<p>文章存储在<em>hexo/source/_posts</em>目录下，后缀为<em>.md</em>。可以在适当位置插入以下符号用于部分显示:<br>　　<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--more--&gt;</span></div></pre></td></tr></table></figure></p>
<p>插入该符号之前的文字可以直接显示出来，之后的需要鼠标点击<em>阅读全文</em>来显示全部。<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> g <span class="regexp">//</span>生成静态文件</div><div class="line"><span class="variable">$hexo</span> d <span class="regexp">//</span>部署</div></pre></td></tr></table></figure></p>
<h1 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h1><p>安装RSS插件：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> install hexo-generator-feed --save</span></div></pre></td></tr></table></figure></p>
<p>修改<em>hexo/_config.yml</em>根目录下的全局配置文件，添加以下内容:<br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#RSS 订阅支持</span></div><div class="line"><span class="symbol">plugin:</span></div><div class="line">- hexo-generator-feed</div><div class="line"><span class="meta">#feed Atom</span></div><div class="line"><span class="symbol">feed:</span></div><div class="line"><span class="symbol">  type:</span> atom</div><div class="line"><span class="symbol">  path:</span> atom.xml</div><div class="line"><span class="symbol">  limit:</span> <span class="number">20</span></div></pre></td></tr></table></figure></p>
<p>修改主题目录下的配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">rss:</span> /atom.xml</div></pre></td></tr></table></figure></p>
<h1 id="添加sitemap"><a href="#添加sitemap" class="headerlink" title="添加sitemap"></a>添加sitemap</h1><p>安装<em>sitemap</em>插件:<br>　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> install hexo-generator-sitemap --save</span></div></pre></td></tr></table></figure></p>
<p>修改<em>hexo/_config.yml</em>根目录下的全局配置文件:<br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">sitemap:</span></div><div class="line"><span class="symbol">　　　path:</span> sitemap.xml</div></pre></td></tr></table></figure></p>
<p>添加baidusitemap：<br>  <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> install hexo-generator-baidu-sitemap --save</span></div></pre></td></tr></table></figure></p>
<p>修改<em>hexo/_config.yml</em>根目录下的全局配置文件:<br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">baidusitemap:</span></div><div class="line"><span class="symbol">　　　path:</span> baidusitemap.xml</div></pre></td></tr></table></figure></p>
<h1 id="添加侧栏社交链接"><a href="#添加侧栏社交链接" class="headerlink" title="添加侧栏社交链接"></a>添加侧栏社交链接</h1><p>修改主题目录下的配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># <span class="selector-tag">Social</span> <span class="selector-tag">Links</span></div><div class="line"># <span class="selector-tag">Key</span> <span class="selector-tag">is</span> <span class="selector-tag">the</span> <span class="selector-tag">link</span> <span class="selector-tag">label</span> <span class="selector-tag">showing</span> <span class="selector-tag">to</span> <span class="selector-tag">end</span> <span class="selector-tag">users</span>.</div><div class="line"># <span class="selector-tag">Value</span> <span class="selector-tag">is</span> <span class="selector-tag">the</span> <span class="selector-tag">target</span> <span class="selector-tag">link</span> (E.g. <span class="attribute">GitHub</span>: <span class="attribute">https</span>:<span class="comment">//github.com/iissnan)</span></div><div class="line"><span class="attribute">social</span>:</div><div class="line">  <span class="attribute">Github</span>: <span class="attribute">https</span>:<span class="comment">//github.com/username</span></div><div class="line">  知乎: <span class="attribute">http</span>:<span class="comment">//www.zhihu.com/people/username</span></div><div class="line">  <span class="attribute">Email</span>: <span class="attribute">mailto</span>: user<span class="variable">@xx</span>.com</div></pre></td></tr></table></figure></p>
<p>设置链接的图标，对应的字段是<em>social_icons</em>在主题配置文件中:<br>　<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Social Icons</span></div><div class="line"><span class="attr">social_icons:</span></div><div class="line"><span class="attr">enable:</span> <span class="literal">true</span></div><div class="line"><span class="comment"># Icon Mappings</span></div><div class="line"><span class="attr">GitHub:</span> <span class="string">github</span></div><div class="line"><span class="attr">Email:</span> <span class="string">envelope</span></div></pre></td></tr></table></figure></p>
<p>nexT使用的图标来自<a href="http://fontawesome.io/" target="_blank" rel="external">FontAwesome</a>，只要上面有的都可以配置到nexT使用。</p>
<h1 id="添加本地搜索"><a href="#添加本地搜索" class="headerlink" title="添加本地搜索"></a>添加本地搜索</h1><p>安装<em>hexo-generator-serarch</em><br>　　<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$npm <span class="keyword">install</span> hexo-generator-<span class="keyword">search</span> <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<p>修改<em>hexo/_config.yml</em>根目录下的全局配置文件添加:<br>　　<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line"> path: search.<span class="keyword">xml</span></div><div class="line"> <span class="title">field</span>: post</div></pre></td></tr></table></figure></p>
<h1 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h1><p>在hexo/source/目录下建立images文件夹，将头像放置在该文件夹下，修改主题目录下的配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">avatar:</span> <span class="meta-keyword">/images/</span>avatar.jpg</div></pre></td></tr></table></figure></p>
<h1 id="生成网站二维码"><a href="#生成网站二维码" class="headerlink" title="生成网站二维码"></a>生成网站二维码</h1><p>二维码生成工具很多，这个<a href="https://www.unitag.io/qrcode" target="_blank" rel="external">Custom QR Code Generator</a>比较不错。生成后将二维码添加到关于页面。</p>
<h1 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h1><p>NexT 使用<a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="external">TomorrowTheme</a>作为代码高亮，共有5款主题供选择。 打开主题配置文件<em>themes/nexT/_config.yml</em>修改:<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> Code Highlight theme</span></div><div class="line"><span class="meta">#</span><span class="bash"> Available value:</span></div><div class="line"><span class="meta">#</span><span class="bash">    normal | night | night eighties | night blue | night bright</span></div><div class="line"><span class="meta">#</span><span class="bash"> https://github.com/chriskempson/tomorrow-theme</span></div><div class="line">highlight_theme: night bright</div></pre></td></tr></table></figure></p>
<h1 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h1><p>只需要主题配置文件中填入微信和支付宝收款二维码图片地址，即可开启该功能。修改主题配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">reward_comment:</span> 您的支持是我原创的动力</div><div class="line"><span class="symbol"> wechatpay:</span> <span class="meta-keyword">/path/</span>to/wechat-reward-image</div><div class="line"><span class="symbol"> alipay:</span> <span class="meta-keyword">/path/</span>to/alipay-reward-image</div></pre></td></tr></table></figure></p>
<p>鼠标放置在二维码上面时，下面的字来回晃眼，修改如下文件:<br><em>themes/next/source/css/_common/components/post/post-reward.styl</em><br>注释掉以下代码：<img src="/2017/05/09/hexo-advance/pay.jpg" alt="Alt text"></p>
<h1 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h1><p>修改主题配置文件<em>themes/next/_config.yml</em><br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Blog rolls</span></div><div class="line"><span class="symbol">links_title:</span> 友情链接</div><div class="line"><span class="meta">#links_layout: block</span></div><div class="line"><span class="meta">#links_layout: inline</span></div><div class="line"><span class="symbol">links:</span></div><div class="line"><span class="symbol"> hexo:</span> https:<span class="comment">//hexo.io/zh-cn/docs</span></div><div class="line"><span class="symbol"> nexT:</span> http:<span class="comment">//theme-next.iissnan.com/</span></div></pre></td></tr></table></figure></p>
<h1 id="开启动画背景"><a href="#开启动画背景" class="headerlink" title="开启动画背景"></a>开启动画背景</h1><p><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">nexT</a> 自带两种背景动画效果，canvas_nest以及three_waves,在主题配置文件:<br> <em>themes/next/_config.yml</em>中设置为true即可开启,<br>　　<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Canvas-nest</span></div><div class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<h1 id="开启JiaThis分享"><a href="#开启JiaThis分享" class="headerlink" title="开启JiaThis分享"></a>开启JiaThis分享</h1><p><a href="http://www.jiathis.com/" target="_blank" rel="external">Jiathis</a>为文章提供社会化分享功能。修改主题配置文件<em>themes/next/_config.yml</em>:<br>　　<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Share</span></div><div class="line"><span class="attr">jiathis:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<h1 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h1><p>两种分享只能同时开启一种，百度分享需要在站点配置文件<em>hexo/_config.yml</em>中添加：<br>　　<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># baidu share</span></div><div class="line"><span class="attr">baidushare:</span> <span class="literal">true</span> <span class="comment">#百度分享功能</span></div></pre></td></tr></table></figure></p>
<p>另外需要在主题配置文件<em>themes/next/_config.yml</em>中开启百度分享功能：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> Baidu Share</span></div><div class="line"><span class="meta">#</span><span class="bash"> Available value:</span></div><div class="line"><span class="meta">#</span><span class="bash">    button | slide</span></div><div class="line"><span class="meta">#</span><span class="bash"> Warning: Baidu Share does not support https.</span></div><div class="line">baidushare: </div><div class="line"> type: button</div></pre></td></tr></table></figure></p>
<h1 id="添加DISQUS评论"><a href="#添加DISQUS评论" class="headerlink" title="添加DISQUS评论"></a>添加DISQUS评论</h1><p>修改主题配置文件开启<a href="https://disqus.com/" target="_blank" rel="external">DISQUS</a>功能：<br>　　<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Disqus</span></div><div class="line"><span class="attr">disqus:</span></div><div class="line"><span class="attr"> enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr"> shortname:</span></div><div class="line"><span class="attr"> count:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>去<a href="https://disqus.com/" target="_blank" rel="external">DISQUS</a>官网注册，并获取自己的shortname,填写至主题配置文件中的对应字段中。取消一篇文章的评论只需要在文章的头部修改：<br>　　<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">comments:</span> <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h1 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h1><p>图标制作网站<a href="http://www.faviconer.com/" target="_blank" rel="external">faviconer</a>，制作完成自己的网站图标后放到<em>hexo/source</em>根目录下，并修改主题配置文件：<br>　　<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Put your favicon.ico into `hexo-site/source/` directory.</div><div class="line">favicon: /favicon.ico</div></pre></td></tr></table></figure></p>
<h1 id="页面中插入图片"><a href="#页面中插入图片" class="headerlink" title="页面中插入图片"></a>页面中插入图片</h1><p>图片的插入可以使用<a href="http://markdownpad.com/" title="markdown Editor for Windows" target="_blank" rel="external">MarkdownPad</a>的语法：<br>　　<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">图片名称</span>](<span class="link">图片地址</span>)</div></pre></td></tr></table></figure></p>
<p>图片可以放在本地，也可以放在云端。建议放在云端，因为github的空间有限，云端可以使用<a href="https://www.qiniu.com/" target="_blank" rel="external">七牛云存储</a>。<br>本地图片的插入有两种方法，早期的<a href="https://hexo.io/zh-cn/docs/" title="hexo说明" target="_blank" rel="external">hexo</a>需要将图片放在网站根目录下的<em>source/</em>文件夹中比如<em>source/images/</em>文件夹，将图片放到该处，即可在页面中引用：<br>　　<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">test</span>](<span class="link">source/images/test.jgp</span>)</div></pre></td></tr></table></figure></p>
<p><a href="https://hexo.io/zh-cn/docs/" title="hexo说明" target="_blank" rel="external">hexo</a>2.0之后，引入新方法，参考<a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">CodeFalling/hexo-asset-image</a><br>安装插件：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> install hexo-asset-image --save</span></div></pre></td></tr></table></figure></p>
<p> 修改配置文件中的 <em>post_asset_folder:</em> 为 <em>true</em> ，这样新建文章时，会在 <em>_post</em> 目录下生成同名的文件夹，页面需要的各种图片都可以放到此处。比如：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">my-Publish</div><div class="line">├── my<span class="selector-class">.jpg</span></div><div class="line">├── logo<span class="selector-class">.jpg</span></div><div class="line">└── test<span class="selector-class">.jpg</span></div><div class="line">my-Publish.md</div></pre></td></tr></table></figure></p>
<p>新建名为 <em>my-Publish</em> 的新文章，文章需要的图片都放到该文件夹中。引用:<br>　　<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">xx</span>](<span class="link">my-Publish/my.jpg</span>)</div></pre></td></tr></table></figure></p>
<p>即可插入图片，<em>xx</em>可以随意。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;添加页面&quot;&gt;&lt;a href=&quot;#添加页面&quot; class=&quot;headerlink&quot; title=&quot;添加页面&quot;&gt;&lt;/a&gt;添加页面&lt;/h1&gt;&lt;p&gt;页面指的是分类页&lt;em&gt;categories&lt;/em&gt;、标签页&lt;em&gt;tags&lt;/em&gt;、关于页&lt;em&gt;about&lt;/em&gt;等。使用以下命令生成以上页面参考&lt;a href=&quot;http://theme-next.iissnan.com/theme-settings.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nexT&lt;/a&gt;:&lt;br&gt;　　&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;$hexo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; page categories&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;$hexo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; page tags&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;$hexo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; page about&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;em&gt;hexo&lt;/em&gt; 配置文件 &lt;em&gt;_config.yml&lt;/em&gt; 文件中设置 &lt;em&gt;post_asset_folder&lt;/em&gt; 为true,当新建页面后会自动生成一个同名文件夹，用于存储所需的资源图片等。生成以上页面后在主题配置文件中 &lt;em&gt;themes/nexT/_config.yml&lt;/em&gt; 打开相关配置项:&lt;br&gt;　　&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;menu:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;  home:&lt;/span&gt; /&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;  categories:&lt;/span&gt; /categories&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;  about:&lt;/span&gt; /about&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;  archives:&lt;/span&gt; /archives&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;  tags:&lt;/span&gt; /tags&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;#sitemap: /sitemap.xml&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;#commonweal: /404.html&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://stevenshi.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://stevenshi.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Qt如何在指定位置显示控件</title>
    <link href="http://stevenshi.me/2017/05/09/qt-widget-designated-location/"/>
    <id>http://stevenshi.me/2017/05/09/qt-widget-designated-location/</id>
    <published>2017-05-09T01:20:14.000Z</published>
    <updated>2017-05-14T23:56:22.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>假如窗体背景为一张图片，想要在图片的某一个位置放置一个<em>Qlabel</em>，用于显示一个实时变量，但又不知道这个位置的精确坐标，这个时候该如何实现呢？</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>一种方法是借用图片工具，找到指定位置的相对坐标，然后将控件放置在该坐标处;另一种方法可以将图片用网格划分，然后添加一个网格布局，查看指定的位置位于哪一行哪一列，然后将控件放置到布局中。这种方式不能做到精确的定位，但大体上可以使用。考虑到简单实用，选择第二种方法。</p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><a id="more"></a>
<h2 id="添加资源文件"><a href="#添加资源文件" class="headerlink" title="添加资源文件"></a>添加资源文件</h2><p>首先创建一个<em>QWidget</em>，并设置背景图片。在工程目录下创建一个名为<em>icons</em>的文件夹，将图片放置到这个位置。回到<em>Qt</em>工程目录，右键自己的工程选择添加新文件-&gt;<em>qt</em>资源文件: <img src="/2017/05/09/qt-widget-designated-location/qrc.jpg" alt="Alt text"></p>
<p>假如建立后的资源文件为<em>res.qrc</em>,打开后，选择添加前缀，并添加刚才放置的图片文件，添加后的<em>res.qrc</em>如下:<img src="/2017/05/09/qt-widget-designated-location/res-qrc.jpg" alt="Alt text"></p>
<h2 id="设置背景图片"><a href="#设置背景图片" class="headerlink" title="设置背景图片"></a>设置背景图片</h2><p>在设置背景图片后要保证窗口变化时，背景图片能够随着窗口的变化而变化。因此需要重写窗口的<em>resizeEvent</em>事件。<br>　　<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::resizeEvent(QResizeEvent *event)</div><div class="line">&#123;</div><div class="line">　QWidget::resizeEvent(event);</div><div class="line">　QImage <span class="built_in">image</span>;</div><div class="line">　<span class="built_in">image</span>.load(<span class="string">":/icons/linux.jpeg"</span>);</div><div class="line">　QPalette palette;</div><div class="line">　palette.setBrush(<span class="keyword">this</span>-&gt;backgroundRole(),QBrush(<span class="built_in">image</span>.scaled(event-&gt;<span class="built_in">size</span>(),Qt::IgnoreAspectRatio,Qt::SmoothTransformation)));</div><div class="line">　<span class="keyword">this</span>-&gt;setPalette(palette);</div><div class="line">　&#125;</div></pre></td></tr></table></figure></p>
<p>显示效果如下：<img src="/2017/05/09/qt-widget-designated-location/linux.jpg" alt="Alt text"></p>
<h2 id="将窗体网格化"><a href="#将窗体网格化" class="headerlink" title="将窗体网格化"></a>将窗体网格化</h2><p>假如我想在X字符下面显示一个<em>Qlabel</em>，现将窗体分成8行9列因为我的显示器是16:9尺寸，并显示所画的网格线，重写窗体的<em>paintEvent</em>事件：<br>　　<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">void</span> MainWindow::paintEvent(QPaintEvent *event)</div><div class="line"> &#123;</div><div class="line">　<span class="comment">//画网格线</span></div><div class="line">  QPainter painter(<span class="keyword">this</span>);</div><div class="line">  drawMyGrid(&amp;painter,<span class="number">8</span>,<span class="number">9</span>);</div><div class="line">  painter.setPen(Qt::black);</div><div class="line">　&#125;</div><div class="line"> <span class="keyword">void</span> MainWindow::drawMyGrid(QPainter *painter,<span class="keyword">int</span> row,<span class="keyword">int</span> col)</div><div class="line"> &#123;</div><div class="line">  <span class="keyword">int</span> mgin=<span class="number">1</span>;<span class="comment">//边界</span></div><div class="line">  QRect <span class="built_in">rect</span>;</div><div class="line">  <span class="keyword">int</span> i,j,x,y;</div><div class="line">  <span class="built_in">rect</span>=QRect(mgin,mgin,<span class="built_in">width</span>()-mgin,<span class="built_in">height</span>()-mgin);</div><div class="line"></div><div class="line">  <span class="built_in">for</span>( j=<span class="number">0</span>;j&lt;=row;j++)<span class="comment">//行</span></div><div class="line">  &#123;</div><div class="line">   y=<span class="built_in">rect</span>.bottom()-(j*(<span class="built_in">rect</span>.<span class="built_in">height</span>()-mgin)/row);</div><div class="line">   painter-&gt;drawLine(<span class="built_in">rect</span>.left(),y,<span class="built_in">rect</span>.right(),y);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">for</span>(i=<span class="number">0</span>;i&lt;=col;i++)<span class="comment">//列</span></div><div class="line">  &#123;</div><div class="line">   x=<span class="built_in">rect</span>.left()+(i*(<span class="built_in">rect</span>.<span class="built_in">width</span>()-mgin)/col);</div><div class="line">   painter-&gt;drawLine(x,<span class="built_in">rect</span>.top(),x,<span class="built_in">rect</span>.bottom());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>显示效果：<img src="/2017/05/09/qt-widget-designated-location/grid.jpg" alt="Alt text"></p>
<h2 id="在指定位置放置控件"><a href="#在指定位置放置控件" class="headerlink" title="在指定位置放置控件"></a>在指定位置放置控件</h2><p>字符X下方的位置为第六行第七列。首先给窗体安装一个<em>QGridLayout</em>布局，将<em>Qlabel</em>放置到该布局中。<br>　　<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">　label1  = new QLabel(<span class="name">tr</span>(<span class="string">"Text"</span>))<span class="comment">;</span></div><div class="line">　label1-&gt;setStyleSheet(<span class="string">"color:white;font:bold;font-size:30"</span>)<span class="comment">;</span></div><div class="line">　QGridLayout *mylayout     = new QGridLayout<span class="comment">;</span></div><div class="line">　mylayout-&gt;addWidget(<span class="name">label1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">1</span>)<span class="comment">;//第六行第七列，占用1行1列</span></div><div class="line">　QWidget * widget = new QWidget(<span class="name">this</span>)<span class="comment">;</span></div><div class="line">　widget-&gt;setLayout(<span class="name">mylayout</span>)<span class="comment">;//安装布局</span></div><div class="line">　setCentralWidget(<span class="name">widget</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>通过以下代码设置行列的宽高比例:<br>　　<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mylayout-&gt;setColumnStretch(<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//设置第一列的宽度比例</span></div><div class="line">mylayout-&gt;setRowStretch(<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//设置第一行的高度比例</span></div></pre></td></tr></table></figure></p>
<p>必须指定每一行每一列的高度和宽度比。<br>最后效果:<img src="/2017/05/09/qt-widget-designated-location/final.jpg" alt="Alt text"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;假如窗体背景为一张图片，想要在图片的某一个位置放置一个&lt;em&gt;Qlabel&lt;/em&gt;，用于显示一个实时变量，但又不知道这个位置的精确坐标，这个时候该如何实现呢？&lt;/p&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;一种方法是借用图片工具，找到指定位置的相对坐标，然后将控件放置在该坐标处;另一种方法可以将图片用网格划分，然后添加一个网格布局，查看指定的位置位于哪一行哪一列，然后将控件放置到布局中。这种方式不能做到精确的定位，但大体上可以使用。考虑到简单实用，选择第二种方法。&lt;/p&gt;
&lt;h1 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h1&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://stevenshi.me/categories/Qt/"/>
    
    
      <category term="Qt" scheme="http://stevenshi.me/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>hexo 博客备份</title>
    <link href="http://stevenshi.me/2017/05/07/hexo-backup/"/>
    <id>http://stevenshi.me/2017/05/07/hexo-backup/</id>
    <published>2017-05-07T13:25:07.000Z</published>
    <updated>2017-05-14T23:56:22.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在公司电脑中做好了hexo博客撰写，也将文章推送到了github并且发布了;回到家中在自己的电脑上想给自己的博客添加一篇文章，按照hexo建站流程，又建了一遍，但写完文章后发现，之前在公司写得博客被覆盖了，想哭的感觉有木有。当使用不同的电脑撰写博客时，会涉及到博客资源的备份和更新，如果简单的拷贝会比较麻烦，当然也可以tar整个hexo工作目录;单纯的push到github会有部分文件不全,由于主题文件目录也是git管理方式，当push后，主题默认是不会被推送到github上的。所以，必须稍作修改，才能正确的备份。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在自己的github仓库中默认有master分支，比如username目录下的：<br>username.github.io仓库。使用master分支保存自己的hexo博客静态文件，新建hexo分支用于保存hexo资源文件。每次撰写完博客后，顺便将自己的hexo工作目录push到远程仓库的hexo分支;当在另外一台电脑上写博客时，先获取远程仓库的分支，之后就可以编辑了<br><a id="more"></a></p>
<h2 id="推送到远程"><a href="#推送到远程" class="headerlink" title="推送到远程"></a>推送到远程</h2><p>进入到自己的博客工作目录比如<em>github\hexo</em>,先查看远程主机<br>　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$git</span> remote -v</span></div></pre></td></tr></table></figure></p>
<p>如果有输出，查看下是否是自己远程仓库的名字，如果不是username.github.io则删除：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$git</span> remote rm origin</span></div></pre></td></tr></table></figure></p>
<p>添加远程主机：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> remote add origin https:<span class="regexp">//gi</span>thub.com<span class="regexp">/yourusername/y</span>ourusername.github.io.git</div><div class="line"><span class="variable">$git</span> init</div></pre></td></tr></table></figure></p>
<p>删除掉<em>theme\nexT</em>目录下的<em>.git</em>文件夹，因为我们要将主题配置一同推送。如果删除后还是不能推送nexT主题，就将nexT改个名字，但要注意在hexo的_config.yml中对应的主题名字与这个文件夹名字要保持一致。<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">git add --all //add之后可以用*git status*查看刚刚改过的文件状态</span></div><div class="line"><span class="meta">$</span><span class="bash">git commit -m <span class="string">"backup hexo"</span></span></div><div class="line"><span class="meta">$</span><span class="bash">git push origin hexo //将本地文件push到远程仓库的hexo分支，没有则建立该分支</span></div></pre></td></tr></table></figure></p>
<p>在远程仓库查看，username.github.io的仓库下已经有了两个分支，一个叫master,一个叫hexo。但发现有些不想推送的文件也被推送到了远程，比如hexo根目录下的public文件夹，这个文件夹是生成的博客静态文件，它是在博客部署后被推送到：username.github.io的master分支的，我们这里并不需要保存该文件夹。编辑hexo根目录下的.gitignore文件，添加不需要推送的文件或文件夹：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.DS_Store</span></div><div class="line">Thumbs<span class="selector-class">.db</span></div><div class="line">*<span class="selector-class">.log</span></div><div class="line">node_modules/</div><div class="line">public/</div><div class="line">.deploy*/</div></pre></td></tr></table></figure></p>
<p>由于之前推送过，可能.gitignore没有起作用，.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。这个时候就需要删除缓存改变未被追踪状态，重新提交：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">git rm -r --cached .</span></div><div class="line"><span class="meta">$</span><span class="bash">git add --all</span></div><div class="line"><span class="meta">$</span><span class="bash">git commit -m <span class="string">"update .gitignore"</span></span></div></pre></td></tr></table></figure></p>
<p> 之后再次推送即可。</p>
<h2 id="获取远程分支"><a href="#获取远程分支" class="headerlink" title="获取远程分支"></a>获取远程分支</h2><p>前面已经将写好的博客资源文件推送到远程仓库username.github.io的分支hexo,无论在哪里都可以获取远程分支至本地进行博客撰写，并且保持文章的更新状态。假如我在家中的电脑的目录<em>F:\github\home</em>下想撰写一篇新博客文章，首先要做的是进入到该目录下，进行hexo环境的安装，参考我的前一篇博客。<br>　　<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$npm</span> install hexo-<span class="keyword">cli</span> --<span class="keyword">save</span> <span class="comment">//在新电脑上配置hexo</span></div><div class="line"><span class="variable">$npm</span> install hexo --<span class="keyword">save</span></div><div class="line"><span class="variable">$npm</span> install hexo-server --<span class="keyword">save</span></div><div class="line"><span class="variable">$npm</span> install hexo-generator-<span class="keyword">search</span> --<span class="keyword">save</span></div><div class="line"><span class="variable">$npm</span> install hexo-deployer-git --<span class="keyword">save</span></div></pre></td></tr></table></figure></p>
<p>当环境建立好后，运行<em>hexo init</em>命令：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$hexo</span> init</span></div></pre></td></tr></table></figure></p>
<p>然后删除<em>hexo init</em>命令产生的其它文件夹，只保留生成的node_modules文件夹，建立博客需要的hexo各种命令以及依赖项都在这里:<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rm</span> _config<span class="selector-class">.yml</span> db<span class="selector-class">.json</span> package<span class="selector-class">.json</span> </div><div class="line"><span class="variable">$rm</span> -rf scaffolds/ themes/ source/</div><div class="line"><span class="variable">$rm</span> .npmignore</div></pre></td></tr></table></figure></p>
<p>之后添加远程仓库分支至本地：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> init</div><div class="line"><span class="variable">$git</span> remote add origin https:<span class="regexp">//gi</span>thub.com<span class="regexp">/yourusername/y</span>ourusername.github.io.git</div></pre></td></tr></table></figure></p>
<p> 查看远程仓库所有分支：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$git</span> branch -r</span></div></pre></td></tr></table></figure></p>
<p> 一般输出为：<br>　　<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*<span class="built_in">origin</span>/HEAD -&gt; <span class="built_in">origin</span>/master*</div><div class="line">*<span class="built_in">origin</span>/hexo*</div><div class="line">*<span class="built_in">origin</span>/master*</div></pre></td></tr></table></figure></p>
<p>此时可以看到远程仓库有两个分支，但默认的分支为master,我们需要的是hexo分支，所以需要将默认分支修改为hexo:<br><img src="/2017/05/07/hexo-backup/setbranch.jpg" alt="Alt text"></p>
<p>如果不修改则需要获取分支hexo到本地：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$git</span> fetch origin hexo:hexo</span></div></pre></td></tr></table></figure></p>
<p>或者：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$git</span> pull origin hexo</span></div></pre></td></tr></table></figure></p>
<p>切换到hexo分支：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> checkout hexo <span class="regexp">//</span>此处为hexo分支</div></pre></td></tr></table></figure></p>
<p>此时就可以在该目录下进行博客的撰写工作了，撰写完可以将最新更新提交，并push到远程仓库的hexo分支，至此完成多个电脑同步的问题。<br>当再次回到公司电脑时，进入到博客目录使用<em>git pull</em>即可同步更新。<br>在写新文章之前先配置好git的用户名和邮箱：<br>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*<span class="variable">$git</span> config --global user<span class="selector-class">.name</span> <span class="string">"yourusername"</span> </div><div class="line">*<span class="variable">$git</span> config --global user<span class="selector-class">.email</span> <span class="string">"yourusername@xxx.com"</span>*</div></pre></td></tr></table></figure></p>
<p> 新电脑需要生成SSH Key，<em>github</em>允许一个用户使用多个SSH Key。如果不想使用那么多个，可以拷贝原来电脑下的SSH Key之后就可以开始新文章的撰写和发布了：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">git pull //获取更新</span></div><div class="line"><span class="meta">$</span><span class="bash">hexo n post <span class="string">"new blog"</span></span></div><div class="line"><span class="meta">$</span><span class="bash">hexo clean //清除生成的静态文件</span></div><div class="line"><span class="meta">$</span><span class="bash">hexo g //生成静态文件</span></div><div class="line"><span class="meta">$</span><span class="bash">hexo d //部署到远程</span></div><div class="line"><span class="meta">$</span><span class="bash">git add --all //添加所有文件</span></div><div class="line"><span class="meta">$</span><span class="bash">git commit -m <span class="string">"add new blog"</span></span></div><div class="line"><span class="meta">$</span><span class="bash">git push origin hexo //推送到远程分支hexo</span></div></pre></td></tr></table></figure></p>
<p> 如果不小心搞乱了，或者误删了，使用命令恢复到前一个版本:<br>　　<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$git <span class="keyword">log</span> <span class="comment">//查看记录</span></div><div class="line">$git reset -<span class="params">-hard</span> HEAD^ <span class="comment">//恢复到前一个记录</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在公司电脑中做好了hexo博客撰写，也将文章推送到了github并且发布了;回到家中在自己的电脑上想给自己的博客添加一篇文章，按照hexo建站流程，又建了一遍，但写完文章后发现，之前在公司写得博客被覆盖了，想哭的感觉有木有。当使用不同的电脑撰写博客时，会涉及到博客资源的备份和更新，如果简单的拷贝会比较麻烦，当然也可以tar整个hexo工作目录;单纯的push到github会有部分文件不全,由于主题文件目录也是git管理方式，当push后，主题默认是不会被推送到github上的。所以，必须稍作修改，才能正确的备份。&lt;/p&gt;
&lt;h1 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h1&gt;&lt;p&gt;在自己的github仓库中默认有master分支，比如username目录下的：&lt;br&gt;username.github.io仓库。使用master分支保存自己的hexo博客静态文件，新建hexo分支用于保存hexo资源文件。每次撰写完博客后，顺便将自己的hexo工作目录push到远程仓库的hexo分支;当在另外一台电脑上写博客时，先获取远程仓库的分支，之后就可以编辑了&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://stevenshi.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://stevenshi.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github建立个人博客</title>
    <link href="http://stevenshi.me/2017/05/07/hexo-blog/"/>
    <id>http://stevenshi.me/2017/05/07/hexo-blog/</id>
    <published>2017-05-07T03:07:34.000Z</published>
    <updated>2017-05-23T23:55:18.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><em>hexo</em>是一个高效简洁的静态博客框架，基于<em>Node.js</em>使用Markdown解析文章，几秒内即可利用靓丽的主题生成静态网页。</p>
<p>#环境：<br><em>windows10 64bits</em></p>
<p>#所需软件：<br>　　1. <a href="https://nodejs.org/en/" title="Java Script运行环境" target="_blank" rel="external">Node.js</a>　基于Chrome V8引擎的JavaScript运行环境；<br>　　2. <a href="https://github.com/git-for-windows/git/releases" title="git for windows" target="_blank" rel="external">Git-for-windows</a>　windows平台下git 运行环境；也可以使用 <a href="https://github.com/gavincook/githubOfflineInstaller" target="_blank" rel="external">github-for-windows</a> 里的 <em>git shell</em>, 由于在线安装 <a href="https://github.com/gavincook/githubOfflineInstaller" target="_blank" rel="external">github-for-windows</a> 在国内不翻墙是不可能成功的，所以上面的链接是离线版的安装版本。<br>　　3. <a href="http://markdownpad.com/" title="markdown Editor for Windows" target="_blank" rel="external">MarkdownPad</a>　博客撰写工具</p>
<p><em>开始之前先去 <a href="www.github.com">github</a> 注册一个账户，并新建一个名为username.github.io的仓库，最后生成的仓库地址：<a href="https://github.com/username/username.github.io" target="_blank" rel="external">https://github.com/username/username.github.io</a>  注：username替换为自己的用户名</em></p>
<h1 id="hexo安装与配置"><a href="#hexo安装与配置" class="headerlink" title="hexo安装与配置"></a>hexo安装与配置</h1><p>首先在本地建立自己的博客文件夹，比如 <em>F:\github\hexo</em>，进入该文件夹内，右键点击<em>Git Bash Here</em>,打开<em>git for windows</em>环境，开始安装 <a href="https://hexo.io/zh-cn/docs/" title="hexo说明" target="_blank" rel="external">hexo</a>：<br><a id="more"></a><br>　　<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　<span class="variable">$npm</span> install hexo-<span class="keyword">cli</span> -<span class="keyword">g</span> <span class="comment">//注: -g表示全局安装</span></div><div class="line">　<span class="variable">$npm</span> install hexo-server -<span class="keyword">g</span> <span class="comment">//注： hexo3.0之后server模块是独立的,需要单独安装</span></div></pre></td></tr></table></figure></p>
<p>完成之后可以通过命令查看<em>hexo</em>是否安装成功：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">　$</span><span class="bash">hexo -v</span></div></pre></td></tr></table></figure></p>
<p><em>hexo</em>根目录下的<em>_config.yml</em>文件是全局配置文件，修改该文件实现自己的配置。具体可参考<a href="https://hexo.io/zh-cn/docs/" title="hexo说明" target="_blank" rel="external">hexo</a>官网。</p>
<h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><p>hexo常用命令可以参考hexo的帮助说明，下面列举几个常用命令：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　<span class="variable">$hexo</span> g <span class="regexp">//</span>等同于hexo generate,用于生成静态文件</div><div class="line">　<span class="variable">$hexo</span> s <span class="regexp">//</span>等同于hexo server,用于启动本地服务器，预览网页</div><div class="line">　<span class="variable">$hexo</span> d <span class="regexp">//</span>等同于hexo deploy,用于部署文件到github</div></pre></td></tr></table></figure></p>
<h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>在自己的博客文件夹下<em>F:\github\hexo</em>,执行命令：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　<span class="variable">$hexo</span> init <span class="regexp">//</span>初始化，自动下载搭建网站所需的所有文件</div><div class="line">　<span class="variable">$npm</span> install <span class="regexp">//</span>安装依赖包</div><div class="line">　<span class="variable">$hexo</span> g <span class="regexp">//</span>产生静态文件</div><div class="line">　<span class="variable">$hexo</span> s <span class="regexp">//</span>启动本地服务器，开启预览功能</div></pre></td></tr></table></figure></p>
<p>这个时候在浏览器输入localhost:4000即可查看到生成的静态网页：<img src="/2017/05/07/hexo-blog/hello-world.jpg" alt="Alt text"></p>
<h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><p>在hexo根目录下找到配置文件_config.yml，使用<a href="http://markdownpad.com/" title="markdown Editor for Windows" target="_blank" rel="external">MarkdownPad</a> 打开，编辑最后的deploy字段，将自己的github仓库地址输入进去：<br>　　<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　<span class="attribute">deploy</span>:</div><div class="line">　　　<span class="attribute">type</span>: git <span class="comment">//注意冒号':'后面的空格一定要有</span></div><div class="line">　　　<span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//github.com/username/username.github.io.git</span></div><div class="line">　　　<span class="attribute">branch</span>: master</div></pre></td></tr></table></figure></p>
<h3 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h3><p>在桌面空白处鼠标右键选择<em>Git Bash Here</em>,输入以下命令配置SSH Key:<br>　　<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span></div></pre></td></tr></table></figure></p>
<p>引号里面的内容输入邮箱地址，然后回车，会提示文件保存的路径，这时候按回车键确认，然后会提示你输入密码，然后会确认输入一次，在<em>c:/user/username/.ssh/</em>文件夹内看到生成了两个文件，一个是id_rsa，另一个是id_rsa.pub，打开id_rsa.pub然后选中里面的全部内容，复制下来。登录<a href="https://github.com/login" target="_blank" rel="external">github</a>,点击<em>setting</em>,左边有一个<em>SSH and GPG keys</em>选项，进入<em>New SSH</em>选项，<em>title</em>随意，将之前复制的内容粘贴到key里面去。回到<em>Git bash</em>命令行，输入以下命令验证:<br>　　<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ssh -T git<span class="symbol">@github</span>.com</div></pre></td></tr></table></figure></p>
<h3 id="配置用户名和密码"><a href="#配置用户名和密码" class="headerlink" title="配置用户名和密码"></a>配置用户名和密码</h3><p>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> config --global user<span class="selector-class">.name</span> <span class="string">"your username"</span>  </div><div class="line"><span class="variable">$git</span> config --global user<span class="selector-class">.email</span> <span class="string">"your_email@youremail.com"</span></div></pre></td></tr></table></figure></p>
<p>重新生成一下静态文件：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　<span class="variable">$hexo</span> clean <span class="regexp">//</span>清除缓存文件db.json和已生成的静态文件public</div><div class="line">　<span class="variable">$hexo</span> g <span class="regexp">//</span>产生静态文件</div><div class="line">　<span class="variable">$hexo</span> d <span class="regexp">//</span>部署到github</div></pre></td></tr></table></figure></p>
<p>在运行<em>hexo d</em>之前需要安装git部署工具<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">　$</span><span class="bash">npm install hexo-deployer-git -g</span></div></pre></td></tr></table></figure></p>
<p>第一次执行<em>hexo d</em>会弹出对话框提示输入github的用户名和密码。此时在浏览器输入：<br><em><a href="https://github.com/username/username.github.io" target="_blank" rel="external">https://github.com/username/username.github.io</a></em>即可看到自己的博客已经搭建成功。<br>注: username替换为自己的用户名.</p>
<h1 id="nexT主题"><a href="#nexT主题" class="headerlink" title="nexT主题"></a>nexT主题</h1><p>hexo安装完成后，默认的主题是landscape，保存在hexo/themes/文件夹下。<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">nexT</a> 主题需要自行下载。在博客文件目录下F:\github\hexo右键单击Git Bash Here，输入命令:<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　<span class="variable">$git</span> clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/iissnan/</span>hexo-theme-<span class="keyword">next</span>.git themes<span class="regexp">/nexT</span></div></pre></td></tr></table></figure></p>
<p>下载后的nexT主题会保存在themes目录下。修改hexo根目录下的配置文件_config.yml使主题生效:<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">　#</span><span class="bash"> Extensions</span></div><div class="line"><span class="meta">　#</span><span class="bash"><span class="comment"># Plugins: https://hexo.io/plugins/</span></span></div><div class="line"><span class="meta">　#</span><span class="bash"><span class="comment"># Themes: https://hexo.io/themes/</span></span></div><div class="line">　theme: nexT</div></pre></td></tr></table></figure></p>
<p>接下来选择nexT的Scheme，打开nexT的配置文件themes/nexT/_config.yml中，修改:<br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　<span class="meta"># Schemes</span></div><div class="line">　<span class="meta">#scheme: Muse <span class="comment">//默认Scheme，黑白主调，大量留白</span></span></div><div class="line">　<span class="meta">#scheme: Mist <span class="comment">//紧凑版本，整洁有序</span></span></div><div class="line"><span class="symbol">　scheme:</span> Pisces <span class="comment">//双栏显示，清新</span></div></pre></td></tr></table></figure></p>
<p>更多的设置请参考: <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">nexT</a></p>
<h2 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h2><p>打开hexo的配置文件F:\github\hexo_config.yml，修改:<br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">　language:</span> zh-Hans <span class="comment">//中文汉字</span></div></pre></td></tr></table></figure></p>
<h1 id="访问量统计"><a href="#访问量统计" class="headerlink" title="访问量统计"></a>访问量统计</h1><h3 id="文章阅读量统计"><a href="#文章阅读量统计" class="headerlink" title="文章阅读量统计"></a>文章阅读量统计</h3><p>使用 <a href="https://leancloud.cn" target="_blank" rel="external">leancloud</a> 实现文章阅读次数统计。注册完成后，点击访问控制台，选择创建新应用:<img src="/2017/05/07/hexo-blog/leancloudc.jpg" alt="Alt-text"></p>
<p>创建名为Counter的class。之后找到该应用的AppID、AppKey，将这两个值写入到nexT的主题配置文件中_config.yml:<br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">　<span class="meta"># Show number of visitors to each article.</span></div><div class="line">　<span class="meta"># You can visit https:<span class="comment">//leancloud.cn get AppID and AppKey.</span></span></div><div class="line"><span class="symbol">　leancloud_visitors:</span></div><div class="line"><span class="symbol">  　　enable:</span> true</div><div class="line"><span class="symbol">  　　app_id:</span> <span class="meta">#&lt;app_id&gt; <span class="comment">//复制刚才创建的应用的AppID</span></span></div><div class="line"><span class="symbol">  　　app_key:</span> <span class="meta">#&lt;app_key&gt; <span class="comment">//复制刚才创建的应用的AppKey</span></span></div></pre></td></tr></table></figure></p>
<p>为了安全，将自己的域名加入安全中心-&gt;web安全域名中，防止恶意修改。完成后部署网站，看效果是不是已经有了文章阅读量显示了。</p>
<h3 id="站点访问统计"><a href="#站点访问统计" class="headerlink" title="站点访问统计"></a>站点访问统计</h3><p>使用 <a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="external">不蒜子</a> 脚本实现。<br>在themes\nexT\layout_partials目录下找到文件footer.swig，在文件的头部添加:<br>　　<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　<span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span></div><div class="line">　<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　</p>
<p>　　
　　</p>
<p>　　</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;em&gt;hexo&lt;/em&gt;是一个高效简洁的静态博客框架，基于&lt;em&gt;Node.js&lt;/em&gt;使用Markdown解析文章，几秒内即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;p&gt;#环境：&lt;br&gt;&lt;em&gt;windows10 64bits&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;#所需软件：&lt;br&gt;　　1. &lt;a href=&quot;https://nodejs.org/en/&quot; title=&quot;Java Script运行环境&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;　基于Chrome V8引擎的JavaScript运行环境；&lt;br&gt;　　2. &lt;a href=&quot;https://github.com/git-for-windows/git/releases&quot; title=&quot;git for windows&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git-for-windows&lt;/a&gt;　windows平台下git 运行环境；也可以使用 &lt;a href=&quot;https://github.com/gavincook/githubOfflineInstaller&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github-for-windows&lt;/a&gt; 里的 &lt;em&gt;git shell&lt;/em&gt;, 由于在线安装 &lt;a href=&quot;https://github.com/gavincook/githubOfflineInstaller&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github-for-windows&lt;/a&gt; 在国内不翻墙是不可能成功的，所以上面的链接是离线版的安装版本。&lt;br&gt;　　3. &lt;a href=&quot;http://markdownpad.com/&quot; title=&quot;markdown Editor for Windows&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MarkdownPad&lt;/a&gt;　博客撰写工具&lt;/p&gt;
&lt;p&gt;&lt;em&gt;开始之前先去 &lt;a href=&quot;www.github.com&quot;&gt;github&lt;/a&gt; 注册一个账户，并新建一个名为username.github.io的仓库，最后生成的仓库地址：&lt;a href=&quot;https://github.com/username/username.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/username/username.github.io&lt;/a&gt;  注：username替换为自己的用户名&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;hexo安装与配置&quot;&gt;&lt;a href=&quot;#hexo安装与配置&quot; class=&quot;headerlink&quot; title=&quot;hexo安装与配置&quot;&gt;&lt;/a&gt;hexo安装与配置&lt;/h1&gt;&lt;p&gt;首先在本地建立自己的博客文件夹，比如 &lt;em&gt;F:\github\hexo&lt;/em&gt;，进入该文件夹内，右键点击&lt;em&gt;Git Bash Here&lt;/em&gt;,打开&lt;em&gt;git for windows&lt;/em&gt;环境，开始安装 &lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; title=&quot;hexo说明&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo&lt;/a&gt;：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://stevenshi.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://stevenshi.me/tags/hexo/"/>
    
  </entry>
  
</feed>
