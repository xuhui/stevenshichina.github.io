<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Steven&#39;s blog</title>
  <subtitle>点一盏灯 给需要的人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://stevenshi.me/"/>
  <updated>2017-07-10T08:26:38.991Z</updated>
  <id>http://stevenshi.me/</id>
  
  <author>
    <name>Steven Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ROS中级一 配置并使用ROS导航功能包集</title>
    <link href="http://stevenshi.me/2017/07/10/ros-intermediate-tutorial-1/"/>
    <id>http://stevenshi.me/2017/07/10/ros-intermediate-tutorial-1/</id>
    <published>2017-07-10T01:41:05.000Z</published>
    <updated>2017-07-10T08:26:38.991Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习如何配置 ROS 的 Navigation 功能包以及如何让导航功能在机器人上运行起来。先来看一下 ROS 导航架构图：</p>
<p><img src="/2017/07/10/ros-intermediate-tutorial-1/overview_navigation.png" alt=""></p>
<a id="more"></a>
<h1 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h1><p>ROS 的二维导航功能包 navigation 根据输入的里程计消息以及激光雷达等传感器信息通过内部导航算法计算出安全的机器人速度控制指令，移动机器人到指定位置，从而完成既定的导航任务。尽管导航功能包设计的尽量通用，但仍然对机器人的硬件有一定的要求：<br>a,导航功能包目前只对差分或全向轮式机器人起作用，并且假定机器人可以使用速度指令进行控制，速度指令格式遵循x方向、y方向以及角度。<br>b,导航功能包要求机器人必须安装有激光雷达或深度相机等二维平面测距设备。<br>c,导航功能包起初以正方形机器人为模型开发，因此对正方形的机器人支持较好，对于其他形状的机器人也支持，但可能表现不佳。</p>
<h1 id="导航架构分析"><a href="#导航架构分析" class="headerlink" title="导航架构分析"></a>导航架构分析</h1><p>从上图中可以看出， navigation 功能包集的输入有 传感器 tf 变换 (sensor transforms)、里程计 (odometry source) 以及激光雷达或者点云数据 (sensor sources)，输出是 cmd_vel 速度消息 (base controller)。框内部分为 navigation 的核心 move_base 功能，它负责规划整个导航所需的流程，它是导航所必须的，灰色框内部分是可选的，蓝色框内是需要我们提供的组件。一般在 ROS 中进行导航功能使用到的三个包分别为 move_base、gmapping、amcl; move_base 根据获取的传感器消息进行路径规划，并移动机器人到达指定位置；gmapping 根据获取的激光雷达数据或者深度相机建立地图；amcl可以根据已有地图进行机器人的定位。</p>
<h1 id="机器人配置"><a href="#机器人配置" class="headerlink" title="机器人配置"></a>机器人配置</h1><h2 id="TF变换"><a href="#TF变换" class="headerlink" title="TF变换"></a>TF变换</h2><p>导航功能包集需要机器人不断的使用 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 发布机器人的坐标系之间的变换关系，关于这一块可以参考 <a href="http://wiki.ros.org/cn/navigation/Tutorials/RobotSetup/TF" target="_blank" rel="external">TF配置</a> 也可以参考本站文章 <a href="http://stevenshi.me/2017/06/08/ros-primary-tutorial-14/">tf 配置</a>.</p>
<h2 id="传感器信息-sensor-source"><a href="#传感器信息-sensor-source" class="headerlink" title="传感器信息(sensor source)"></a>传感器信息(sensor source)</h2><p>机器人要想避开现实环境中的障碍物离不开传感器信息的实时获取，这里的传感器我们假定为激光雷达或点云数据，传感器需要不断的发布 sensor_msgs/LaserScan 或者 sensor_msgs/PointCloud 消息。关于如何发布这些消息可以参考站内文章 <a href="http://stevenshi.me/2017/07/07/ros-primary-tutorial-16/#more">发布传感器数据流</a> 或者参考 <a href="http://wiki.ros.org/cn/navigation/Tutorials/RobotSetup/Sensors" target="_blank" rel="external">在ROS上发布传感器数据流</a>。</p>
<h2 id="里程计消息-odometry-source"><a href="#里程计消息-odometry-source" class="headerlink" title="里程计消息(odometry source)"></a>里程计消息(odometry source)</h2><p>ROS 导航功能包集在正确的导航之前需要获取底层传过来的里程计消息，里程计消息使用 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 和 nav_msgs/Odometry 发布，关于如何发布可参考 <a href="http://wiki.ros.org/navigation/Tutorials/RobotSetup/Odom" target="_blank" rel="external">Publishing Odometry Information over ROS</a> 也可参考站内文章 <a href="http://stevenshi.me/2017/07/07/ros-primary-tutorial-15/">发布里程计消息</a>。</p>
<h2 id="基座控制器-base-controller"><a href="#基座控制器-base-controller" class="headerlink" title="基座控制器(base controller)"></a>基座控制器(base controller)</h2><p>ROS 导航功能包集 navigation 可以通过 cmd_vel 话题发布 geometry_msgs/Twist 类型的消息，这个消息基于机器人的基座坐标系 base_link ,它负责将运动命令传递给移动基座。也就是必须有一个节点负责定制 cmd_vel 话题，并将该话题上的速度(vx, vy, vtheta)指令转化为电机指令(cmd_vel.linear.x, cmd_vel.linear.y, cmd_vel.angular.z)发送到移动底座，使机器人按既定要求移动。</p>
<h2 id="地图-map-server"><a href="#地图-map-server" class="headerlink" title="地图(map_server)"></a>地图(map_server)</h2><p>地图并不是 ROS 导航功能包集所必须的。</p>
<h1 id="导航功能包集配置"><a href="#导航功能包集配置" class="headerlink" title="导航功能包集配置"></a>导航功能包集配置</h1><p>假设上述需要的所有环境配置都已完成，机器人使用 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a>发布坐标变换，并从传感器接收 sensor_msgs/LaserScan 或者 sensor_msgs/PointCloud 消息以便于导航，同时需要使用 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 和 nav_msgs/Odometry 消息发布导航消息，消息以命令形式发布给移动底座，从而控制机器人到既定位置。</p>
<h2 id="创建一个软件包"><a href="#创建一个软件包" class="headerlink" title="创建一个软件包"></a>创建一个软件包</h2><p>首先创建一个软件包用于保存我们需要的所有配置文件以及启动文件。创建功能包时需要添加一些依赖项，包括机器人配置中所使用到的功能包，其中 move_base 是必须添加的依赖项：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg my_robot_name_2dnav move_base my_tf_configuration_dep my_odom_configuration_dep my_sensor_configuration_dep</span></div></pre></td></tr></table></figure></p>
<p>使用时将后面的依赖项修改为自己机器人配置所需的依赖，这是我自己的机器人所有使用的依赖项：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg my_robot_2dnav move_base roscpp tf geometry_msgs sensor_msgs nav_msgs</span></div></pre></td></tr></table></figure></p>
<h2 id="创建机器人启动配置文件"><a href="#创建机器人启动配置文件" class="headerlink" title="创建机器人启动配置文件"></a>创建机器人启动配置文件</h2><p>创建一个ROS launch 配置文件以及发布机器人所需的 tf 变换树。新建文件 my_robot_configuration.launch 并放到我们的软件包的launch目录下:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd my_robot_2dnav</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir launch</span></div><div class="line"><span class="meta">$</span><span class="bash"> vim my_robot_configuration.launch</span></div></pre></td></tr></table></figure></p>
<p>添加以下内容到文件 my_robot_configuration.launch 中：<br>   <figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;launch&gt;</div><div class="line">      &lt;node pkg=<span class="string">"sensor_node_pkg"</span> <span class="built_in">type</span>=<span class="string">"sensor_node_type"</span> <span class="built_in">name</span>=<span class="string">"sensor_node_name"</span> output=<span class="string">"screen"</span>&gt;</div><div class="line">          &lt;<span class="built_in">param</span> <span class="built_in">name</span>=<span class="string">"sensor_param"</span> value=<span class="string">"param_value"</span> /&gt;</div><div class="line">      &lt;/node&gt;</div><div class="line">      &lt;node pkg=<span class="string">"odom_node_pkg"</span> <span class="built_in">type</span>=<span class="string">"odom_node_type"</span> <span class="built_in">name</span>=<span class="string">"odom_node"</span> output=<span class="string">"screen"</span>&gt;</div><div class="line">          &lt;<span class="built_in">param</span> <span class="built_in">name</span>=<span class="string">"odom_param"</span> value=<span class="string">"param_value"</span> /&gt;</div><div class="line">      &lt;/node&gt;</div><div class="line"> </div><div class="line">      &lt;node pkg=<span class="string">"transform_configuration_pkg"</span> <span class="built_in">type</span>=<span class="string">"transform_configuration_type"</span> <span class="built_in">name</span>=<span class="string">"transform_configuration_name"</span> output=<span class="string">"screen"</span>&gt;</div><div class="line">         &lt;<span class="built_in">param</span> <span class="built_in">name</span>=<span class="string">"transform_configuration_param"</span> value=<span class="string">"param_value"</span> /&gt;</div><div class="line">     &lt;/node&gt;</div><div class="line"> &lt;/launch&gt;</div></pre></td></tr></table></figure></p>
<p>这里只是一个launch模板，接下来我们根据自己的机器人去完善修改它。上面代码会首先启动机器人运行导航功能包所需的所有传感器，实际使用时需要将我们自己的传感器对应的ROS驱动包替换 sensor_node_pkg，将自己的传感器类型替换 sensor_node_type，通常与节点名一致；用自己的传感器节点名替换 sensor_node_name, sensor_param 包含所有必须的参数，如果有多个传感器，在这里一起启动它们。接下来，我们启动移动底座的里程计，同样将我们自己的里程计替换pkg,type,name,并根据实际情况指定相关参数。最后启动相应的 tf 变换，同样将我们自己的 tf 变换替换对应的 pkg,type,name 根据实际情况修改相关参数。</p>
<h2 id="代价地图配置-local-costmap-amp-global-costmap"><a href="#代价地图配置-local-costmap-amp-global-costmap" class="headerlink" title="代价地图配置(local_costmap &amp; global_costmap)"></a>代价地图配置(local_costmap &amp; global_costmap)</h2><p>导航功能包集需要两个代价地图来保存现实环境中的障碍物信息，这两个代价地图分别为 local_costmap 和 global_costmap。前者用于局部路径规划与避障，后者用于全局的路径规划。有些参数是两个代价地图都必须的，也有一些参数为各自所有。对于代价地图，有三个配置项分别为 common 配置项、 global 配置项以及 local 配置项。如果想看完整的配置，请参阅 <a href="http://wiki.ros.org/costmap_2d" target="_blank" rel="external">costmap_2d</a>。</p>
<h3 id="共同配置common"><a href="#共同配置common" class="headerlink" title="共同配置common"></a>共同配置common</h3><p>导航功能包集使用代价地图存储障碍物信息，我们需要指出要监听的传感器话题，以便于更新数据。创建一个名为 costmap_common_params.yaml 的文件，添加以下内容：</p>
   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">obstacle_range:</span> <span class="number">2.5</span></div><div class="line"><span class="attr">raytrace_range:</span> <span class="number">3.0</span></div><div class="line"><span class="attr">footprint:</span> <span class="string">[[x0,</span> <span class="string">y0],</span> <span class="string">[x1,</span> <span class="string">y1],</span> <span class="string">...</span> <span class="string">[xn,</span> <span class="string">yn]]</span></div><div class="line"><span class="comment">#robot_radius: ir_of_robot</span></div><div class="line"><span class="attr">inflation_radius:</span> <span class="number">0.55</span></div><div class="line"></div><div class="line"><span class="attr">observation_sources:</span> <span class="string">laser_scan_sensor</span> <span class="string">point_cloud_sensor</span></div><div class="line"></div><div class="line"><span class="attr">laser_scan_sensor:</span> <span class="string">&#123;sensor_frame:</span> <span class="string">frame_name,</span> <span class="attr">data_type:</span> <span class="string">LaserScan,</span> <span class="attr">topic:</span> <span class="string">topic_name,</span> <span class="attr">marking:</span> <span class="literal">true</span><span class="string">,</span> <span class="attr">clearing:</span> <span class="literal">true</span><span class="string">&#125;</span></div><div class="line"></div><div class="line"><span class="attr">point_cloud_sensor:</span> <span class="string">&#123;sensor_frame:</span> <span class="string">frame_name,</span> <span class="attr">data_type:</span> <span class="string">PointCloud,</span> <span class="attr">topic:</span> <span class="string">topic_name,</span> <span class="attr">marking:</span> <span class="literal">true</span><span class="string">,</span> <span class="attr">clearing:</span> <span class="literal">true</span><span class="string">&#125;</span></div></pre></td></tr></table></figure>
<p>obstacle_range 参数决定了引入障碍物到代价地图的传感器读数的最大范围，此处我们设置为 2.5m，这意味着机器人只会更新以其底盘中心为半径2.5m以内的障碍物信息。raytrace_range 参数确定空白区域内光线追踪的范围，此处我们设置为3.0m，意味着机器人将试图根据传感器读数清除其前面3.0m远的空间。<br>footprint 为机器人的形状设置，如果是圆形可以直接指定机器人半径 robot_radius。当指定 footprint 时，机器人的中心默认是在(0.0,0.0)，支持顺时针和逆时针方向。inflation_radius 为代价地图膨胀半径，膨胀半径应该设置为障碍物产生代价的最大距离，此处设为0.55意味着机器人所有路径与障碍物保持0.55米或更远的距离。<br>observation_sources 参数定义了一系列传递空间信息给代价地图的各种传感器。frame_name 参数应设置为传感器坐标帧的名称， data_type 参数应设置为 LaserScan 或 PointCloud，这取决于主题使用的消息， topic_name 应该设置为发布传感器数据的主题的名称。  marking 和 clearing 参数确定传感器是否用于向代价地图添加障碍物信息，或从代价地图清除障碍信息，或两者都有。 </p>
<h3 id="全局配置-global-costmap"><a href="#全局配置-global-costmap" class="headerlink" title="全局配置 global_costmap"></a>全局配置 global_costmap</h3><p>新建一个文件命名为 global_costmap_params.yaml 用于存储全局代价地图配置选项，添加以下内容：</p>
   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">global_costmap:</span></div><div class="line"><span class="attr">  global_frame:</span> <span class="string">/map</span></div><div class="line"><span class="attr">  robot_base_frame:</span> <span class="string">base_link</span></div><div class="line"><span class="attr">  update_frequency:</span> <span class="number">5.0</span></div><div class="line"><span class="attr">  static_map:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>global_frame 参数定义了全局代价地图运行所在的坐标系。在这种情况下,我们会选择/map坐标系。 robot_base_frame 参数定义了代价地图参考的的机器人移动底盘的坐标系。update_frequency 参数决定了代价地图更新的频率。 static_map 参数决定代价地图是否根据 map_server 提供的地图初始化。如果不打算使用现有的地图，将其设为false。 </p>
<h3 id="本地配置-local-costmap"><a href="#本地配置-local-costmap" class="headerlink" title="本地配置 local_costmap"></a>本地配置 local_costmap</h3><p>新建一个文件命名为 localal_costmap_params.yaml，添加以下内容：<br>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">local_costmap:</span></div><div class="line"><span class="attr">  global_frame:</span> <span class="string">odom</span></div><div class="line"><span class="attr">  robot_base_frame:</span> <span class="string">base_link</span></div><div class="line"><span class="attr">  update_frequency:</span> <span class="number">5.0</span></div><div class="line"><span class="attr">  publish_frequency:</span> <span class="number">2.0</span></div><div class="line"><span class="attr">  static_map:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  rolling_window:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  width:</span> <span class="number">6.0</span></div><div class="line"><span class="attr">  height:</span> <span class="number">6.0</span></div><div class="line"><span class="attr">  resolution:</span> <span class="number">0.05</span></div></pre></td></tr></table></figure></p>
<p>global_frame，robot_base_frame，update_frequency，static_map参数与全局配置意义相同。publish_frequency 参数决定了代价地图发布可视化信息的频率。 rolling_window 参数设置为true，意味着随着机器人在现实环境中移动，代价地图会保持以机器人为中心。 width 、height、resolution 参数分别设置局部代价地图的宽度(米)、高度(米)和分辨率(米/单元)。 这里的分辨率和静态地图的分辨率可能不同，但我们通常把他们设成一样的。</p>
<h2 id="BaseLocalPlanner-配置"><a href="#BaseLocalPlanner-配置" class="headerlink" title="BaseLocalPlanner 配置"></a>BaseLocalPlanner 配置</h2><p>Base_Local_Planner 负责根据全局路径规划计算速度命令并发送到机器人移动底座，根据自己的机器人规格配置以下参数以便于正常启动和运行机器人。新建一个文件命名为 base_local_planner_params.yaml，添加以下内容：<br>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">TrajectoryPlannerROS:</span></div><div class="line"><span class="attr">  max_vel_x:</span> <span class="number">0.45</span></div><div class="line"><span class="attr">  min_vel_x:</span> <span class="number">0.1</span></div><div class="line"><span class="attr">  max_vel_theta:</span> <span class="number">1.0</span></div><div class="line"><span class="attr">  min_in_place_vel_theta:</span> <span class="number">0.4</span></div><div class="line"></div><div class="line"><span class="attr">  acc_lim_theta:</span> <span class="number">3.2</span></div><div class="line"><span class="attr">  acc_lim_x:</span> <span class="number">2.5</span></div><div class="line"><span class="attr">  acc_lim_y:</span> <span class="number">2.5</span></div><div class="line"></div><div class="line"><span class="attr">  holonomic_robot:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>前面为机器人的速度限制，后面为机器人的加速度限制。</p>
<h2 id="创建一个-launch-启动文件"><a href="#创建一个-launch-启动文件" class="headerlink" title="创建一个 launch 启动文件"></a>创建一个 launch 启动文件</h2><p>当做好前面所有的配置文件后，我们需要一个launch 文件用于一起启动它们，新建一个文件命名为 move_base.launch 添加以下内容：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">master</span> <span class="attr">auto</span>=<span class="string">"start"</span>/&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Run the map server --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"map_server"</span> <span class="attr">pkg</span>=<span class="string">"map_server"</span> <span class="attr">type</span>=<span class="string">"map_server"</span> <span class="attr">args</span>=<span class="string">"$(find my_map_package)/my_map.pgm my_map_resolution"</span>/&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--- Run AMCL --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"$(find amcl)/examples/amcl_omni.launch"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"move_base"</span> <span class="attr">type</span>=<span class="string">"move_base"</span> <span class="attr">respawn</span>=<span class="string">"false"</span> <span class="attr">name</span>=<span class="string">"move_base"</span> <span class="attr">output</span>=<span class="string">"screen"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find my_robot_name_2dnav)/costmap_common_params.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> <span class="attr">ns</span>=<span class="string">"global_costmap"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find my_robot_name_2dnav)/costmap_common_params.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> <span class="attr">ns</span>=<span class="string">"local_costmap"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find my_robot_name_2dnav)/local_costmap_params.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find my_robot_name_2dnav)/global_costmap_params.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find my_robot_name_2dnav)/base_local_planner_params.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">node</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>需要修改的地方是更改地图服务器使指向自己的地图，如果是差分驱动的机器人，将 amcl_omni.launch 改为 amcl_diff.launch 。</p>
<h2 id="AMCL配置"><a href="#AMCL配置" class="headerlink" title="AMCL配置"></a>AMCL配置</h2><p>AMCL 有许多配置选项影响定位的性能，详细可参考 <a href="http://wiki.ros.org/amcl" target="_blank" rel="external">amcl</a></p>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>启动两个终端分别运行：<br>   <figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">roslaunch my_robot_configuration.<span class="built_in">launch</span></div><div class="line">roslaunch move_base.<span class="built_in">launch</span></div></pre></td></tr></table></figure></p>
<p>通过图形化显示给导航功能包发送一个目标信息，可参考<a href="http://wiki.ros.org/navigation/Tutorials/Using%20rviz%20with%20the%20Navigation%20Stack" target="_blank" rel="external">rviz and navigation tutorial</a>，使用代码给导航功能包集发送导航目标，参考 <a href="http://wiki.ros.org/navigation/Tutorials/SendingSimpleGoals" target="_blank" rel="external">sending simple navigation goals</a><br>未完，待修改<br>本篇参考：<br>英文 <a href="http://wiki.ros.org/navigation/Tutorials/RobotSetup" target="_blank" rel="external">Setup and Configuration of the Navigation Stack on a Robot</a><br>中文 <a href="http://wiki.ros.org/cn/navigation/Tutorials/RobotSetup" target="_blank" rel="external">在机器人上配置并使用导航功能包集</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习如何配置 ROS 的 Navigation 功能包以及如何让导航功能在机器人上运行起来。先来看一下 ROS 导航架构图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/07/10/ros-intermediate-tutorial-1/overview_navigation.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS navigation" scheme="http://stevenshi.me/tags/ROS-navigation/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级十六 发布传感器数据流</title>
    <link href="http://stevenshi.me/2017/07/07/ros-primary-tutorial-16/"/>
    <id>http://stevenshi.me/2017/07/07/ros-primary-tutorial-16/</id>
    <published>2017-07-07T05:41:15.000Z</published>
    <updated>2017-07-07T07:50:59.350Z</updated>
    
    <content type="html"><![CDATA[<p>传感器数据发布的正确与否直接影响到 ROS 导航功能的安全和性能。如果没有正确获取传感器的数据，机器人将会迷路或撞上障碍物。有很多传感器为机器人导航提供可用的信息，比如激光雷达、摄像头、声呐、红外以及碰撞传感器等。目前ROS的导航功能包仅支持激光雷达以及点云数据也就是 sensor_msgs/LaserScan 和 sensor_msgs/PointCloud 两种消息类型。本篇学习如何发布导航需要的这两种传感器数据消息。<br><a id="more"></a></p>
<h1 id="ROS-消息头信息"><a href="#ROS-消息头信息" class="headerlink" title="ROS 消息头信息"></a>ROS 消息头信息</h1><p>不管是 sensor_msgs/LaserScan 消息还是 sensor_msgs/PointCloud 消息，都和ROS中的其他消息一样包含  <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 框架以及时间依赖信息。为了标准化这些消息，ROS中提供了 Header 消息类型用于标识诸如此类消息的起始部分。以下消息展示了 Header 类型的三个域，可以参考 <a href="http://docs.ros.org/api/std_msgs/html/msg/Header.html" target="_blank" rel="external">std_msgs/Header.msg</a>。 seq 标识消息的顺序号，自动累加；stamp 用于存储和消息相关的时间信息即时间戳，它必须与数据产生的时间相符； frame_id 用于标识传感器数据采集的参考坐标系，比如激光雷达的数据必须与它的坐标参考系相符。<br>   <figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#Standard metadata for higher-level flow data types</span></div><div class="line"><span class="meta">#sequence ID: consecutively increasing ID </span></div><div class="line"><span class="keyword">uint32</span> seq</div><div class="line"><span class="meta">#Two-integer timestamp that is expressed as:</span></div><div class="line"><span class="meta"># * stamp.secs: seconds (stamp_secs) since epoch</span></div><div class="line"><span class="meta"># * stamp.nsecs: nanoseconds since stamp_secs</span></div><div class="line"><span class="meta"># time-handling sugar is provided by the client library</span></div><div class="line">time stamp</div><div class="line"><span class="meta">#Frame this data is associated with</span></div><div class="line"><span class="meta"># 0: no frame</span></div><div class="line"><span class="meta"># 1: global frame</span></div><div class="line"><span class="keyword">string</span> frame_id</div></pre></td></tr></table></figure></p>
<h1 id="发布激光雷达消息"><a href="#发布激光雷达消息" class="headerlink" title="发布激光雷达消息"></a>发布激光雷达消息</h1><h2 id="激光雷达消息结构"><a href="#激光雷达消息结构" class="headerlink" title="激光雷达消息结构"></a>激光雷达消息结构</h2><p>ROS在 <a href="http://wiki.ros.org/sensor_msgs" target="_blank" rel="external">sensor_msgs</a> 中提供一个特殊的消息类型专门用于存储机器人的激光雷达数据叫做 LaserScan。LaserScan 的消息类型为虚拟的激光雷达数据采集提供了方便。在讨论如何发布激光雷达消息之前，我们先看一下激光雷达消息的格式，参考 <a href="http://docs.ros.org/api/sensor_msgs/html/msg/LaserScan.html" target="_blank" rel="external">sensor_msgs/LaserScan.msg</a>:<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Single scan from a planar laser range-finder</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># If you have another ranging device with different behavior (e.g. a sonar</span></div><div class="line"><span class="comment"># array), please find or create a different message, since applications</span></div><div class="line"><span class="comment"># will make fairly laser-specific assumptions about this data</span></div><div class="line"></div><div class="line">Header header            <span class="comment"># timestamp in the header is the acquisition time of </span></div><div class="line">                         <span class="comment"># the first ray in the scan.</span></div><div class="line">                         <span class="comment">#</span></div><div class="line">                         <span class="comment"># in frame frame_id, angles are measured around </span></div><div class="line">                         <span class="comment"># the positive Z axis (counterclockwise, if Z is up)</span></div><div class="line">                         <span class="comment"># with zero angle being forward along the x axis</span></div><div class="line">                         </div><div class="line"><span class="built_in">float</span>32 angle_min        <span class="comment"># start angle of the scan [rad]</span></div><div class="line"><span class="built_in">float</span>32 angle_max        <span class="comment"># end angle of the scan [rad]</span></div><div class="line"><span class="built_in">float</span>32 angle_increment  <span class="comment"># angular distance between measurements [rad]</span></div><div class="line"></div><div class="line"><span class="built_in">float</span>32 time_increment   <span class="comment"># time between measurements [seconds] - if your scanner</span></div><div class="line">                         <span class="comment"># is moving, this will be used in interpolating position</span></div><div class="line">                         <span class="comment"># of 3d points</span></div><div class="line"><span class="built_in">float</span>32 scan_time        <span class="comment"># time between scans [seconds]</span></div><div class="line"></div><div class="line"><span class="built_in">float</span>32 range_min        <span class="comment"># minimum range value [m]</span></div><div class="line"><span class="built_in">float</span>32 range_max        <span class="comment"># maximum range value [m]</span></div><div class="line"></div><div class="line"><span class="built_in">float</span>32[] ranges         <span class="comment"># range data [m] (<span class="doctag">Note:</span> values &lt; range_min or &gt; range_max should be discarded)</span></div><div class="line"><span class="built_in">float</span>32[] intensities    <span class="comment"># intensity data [device-specific units].  If your</span></div><div class="line">                         <span class="comment"># device does not provide intensities, please leave</span></div><div class="line">                         <span class="comment"># the array empty.</span></div></pre></td></tr></table></figure></p>
<p>为了更进一步理解激光雷达消息，接下来我们写一些代码介绍如何发布激光雷达消息。</p>
<h2 id="代码实现发布LaserScan消息"><a href="#代码实现发布LaserScan消息" class="headerlink" title="代码实现发布LaserScan消息"></a>代码实现发布LaserScan消息</h2><p>新建包 laser_scan_publisher_tutorial，依赖项为 roscpp sensor_msgs<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/src</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg laser_scan_publisher_tutorial sensor_msgs roscpp</span></div></pre></td></tr></table></figure></p>
<p>在 src 目录下新建文件 laser_scan_publisher.cpp 添加以下内容：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sensor_msgs/LaserScan.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line">   ros::init(argc, argv, <span class="string">"laser_scan_publisher"</span>);</div><div class="line"> </div><div class="line">   ros::NodeHandle n;</div><div class="line">    <span class="comment">//定义发布器 scan_pub 消息类型为sensor_msgs::LaserScan</span></div><div class="line">    ros::Publisher scan_pub = n.advertise&lt;sensor_msgs::LaserScan&gt;(<span class="string">"scan"</span>, <span class="number">50</span>);</div><div class="line"></div><div class="line">   <span class="comment">//虚拟一些激光雷达的数据</span></div><div class="line">   <span class="comment">//在真实激光雷达中要替换这些数据使用真实数据</span></div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> num_readings = <span class="number">100</span>;<span class="comment">//每圈扫描点个数</span></div><div class="line">   <span class="keyword">double</span> laser_frequency = <span class="number">40</span>;<span class="comment">//扫描频率</span></div><div class="line">   <span class="keyword">double</span> ranges[num_readings];<span class="comment">//范围</span></div><div class="line">   <span class="keyword">double</span> intensities[num_readings];<span class="comment">//存储 激光雷达的强度数据</span></div><div class="line"></div><div class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">   ros::<span class="function">Rate <span class="title">r</span><span class="params">(<span class="number">1.0</span>)</span></span>;</div><div class="line">   <span class="keyword">while</span>(n.ok())&#123;</div><div class="line">     <span class="comment">//generate some fake data for our laser scan</span></div><div class="line">     <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_readings; ++i)&#123;</div><div class="line">       ranges[i] = count;</div><div class="line">       intensities[i] = <span class="number">100</span> + count;<span class="comment">//模拟一些数据</span></div><div class="line">     &#125;</div><div class="line">     ros::Time scan_time = ros::Time::now();</div><div class="line"></div><div class="line">     <span class="comment">//populate the LaserScan message</span></div><div class="line">     <span class="comment">//填充 LaserScan 消息结构</span></div><div class="line">     sensor_msgs::LaserScan scan;</div><div class="line">     scan.header.stamp = scan_time;<span class="comment">//时间戳</span></div><div class="line">     scan.header.frame_id = <span class="string">"laser_frame"</span>;<span class="comment">//参考坐标系</span></div><div class="line">     scan.angle_min = <span class="number">-1.57</span>;<span class="comment">//扫描起始角度</span></div><div class="line">     scan.angle_max = <span class="number">1.57</span>;<span class="comment">//扫描结束角度</span></div><div class="line">     scan.angle_increment = <span class="number">3.14</span> / num_readings;<span class="comment">//角度递增</span></div><div class="line">     scan.time_increment = (<span class="number">1</span> / laser_frequency) / (num_readings);<span class="comment">//时间递增</span></div><div class="line">     scan.range_min = <span class="number">0.0</span>;<span class="comment">//最小的扫描范围 单位为m</span></div><div class="line">     scan.range_max = <span class="number">100.0</span>;<span class="comment">//最大的扫描范围</span></div><div class="line"></div><div class="line">     scan.ranges.resize(num_readings);<span class="comment">//暂未理解</span></div><div class="line">     scan.intensities.resize(num_readings);</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_readings; ++i)&#123;</div><div class="line">       scan.ranges[i] = ranges[i];</div><div class="line">       scan.intensities[i] = intensities[i];</div><div class="line">     &#125;</div><div class="line">     <span class="comment">//发布激光雷达扫描数据</span></div><div class="line">     scan_pub.publish(scan);</div><div class="line">     ++count;</div><div class="line">     r.sleep();</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>修改CMakeLists.txt添加以下项：<br>   <figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">add_executable</span>(laser_scan_publisher src/laser_scan_publisher.cpp)</div><div class="line"><span class="keyword">if</span>(sensor_msgs_EXPORTED_TARGETS)</div><div class="line">   <span class="keyword">add_dependencies</span>(laser_scan_publisher <span class="variable">$&#123;sensor_msgs_EXPORTED_TARGETS&#125;</span>)</div><div class="line"><span class="keyword">endif</span>()</div><div class="line"><span class="keyword">target_link_libraries</span>(laser_scan_publisher</div><div class="line">   <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></div><div class="line"> )</div><div class="line"><span class="keyword">install</span>(TARGETS laser_scan_publisher</div><div class="line">   ARCHIVE DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</span></div><div class="line">   LIBRARY DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</span></div><div class="line">   RUNTIME DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</span></div><div class="line"> )</div></pre></td></tr></table></figure></p>
<p>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure></p>
<h1 id="发布点云消息数据"><a href="#发布点云消息数据" class="headerlink" title="发布点云消息数据"></a>发布点云消息数据</h1><h2 id="点云消息数据结构"><a href="#点云消息数据结构" class="headerlink" title="点云消息数据结构"></a>点云消息数据结构</h2><p>ROS 提供 sensor_msgs/PointCloud 消息类型用于存储和共享点云数据。它支持三维空间的点云数据，并且支持通道设置，比如可以设置一个强度通道用于存储这些点的数值强度，以下为点云消息的数据结构，参考<a href="http://docs.ros.org/api/sensor_msgs/html/msg/PointCloud.html" target="_blank" rel="external">sensor_msgs/PointCloud.msg</a>:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> This message holds a collection of 3d points, plus optional additional</span></div><div class="line"><span class="meta">#</span><span class="bash"> information about each point.</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Time of sensor data acquisition, coordinate frame ID.</span></div><div class="line">Header header</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Array of 3d points. Each Point32 should be interpreted as a 3d point</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">in</span> the frame given <span class="keyword">in</span> the header.</span></div><div class="line">geometry_msgs/Point32[] points</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Each channel should have the same number of elements as points array,</span></div><div class="line"><span class="meta">#</span><span class="bash"> and the data <span class="keyword">in</span> each channel should correspond 1:1 with each point.</span></div><div class="line"><span class="meta">#</span><span class="bash"> Channel names <span class="keyword">in</span> common practice are listed <span class="keyword">in</span> ChannelFloat32.msg.</span></div><div class="line">ChannelFloat32[] channels</div></pre></td></tr></table></figure></p>
<h2 id="代码实现点云消息数据的发布"><a href="#代码实现点云消息数据的发布" class="headerlink" title="代码实现点云消息数据的发布"></a>代码实现点云消息数据的发布</h2><p>新建包 point_cloud_publisher_tutorial 依赖项为 sensor_msgs roscpp：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg point_cloud_publisher_tutorial sensor_msgs roscpp</span></div></pre></td></tr></table></figure></p>
<p>在 src 目录下新建文件 point_cloud_publisher.cpp 添加以下内容：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sensor_msgs/PointCloud.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line">   ros::init(argc, argv, <span class="string">"point_cloud_publisher"</span>);</div><div class="line"> </div><div class="line">   ros::NodeHandle n;</div><div class="line">   <span class="comment">//创建ROS发布器 名称为 cloud_pub 消息类型为sensor_msgs::PointCloud</span></div><div class="line">   ros::Publisher cloud_pub = n.advertise&lt;sensor_msgs::PointCloud&gt;(<span class="string">"cloud"</span>, <span class="number">50</span>);</div><div class="line"></div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> num_points = <span class="number">100</span>;<span class="comment">//点的个数</span></div><div class="line"></div><div class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">   ros::<span class="function">Rate <span class="title">r</span><span class="params">(<span class="number">1.0</span>)</span></span>;<span class="comment">//发布频率</span></div><div class="line">   <span class="keyword">while</span>(n.ok())&#123;</div><div class="line">     <span class="comment">//定义点云消息数据cloud</span></div><div class="line">     sensor_msgs::PointCloud cloud;</div><div class="line">     cloud.header.stamp = ros::Time::now();<span class="comment">//时间戳</span></div><div class="line">     cloud.header.frame_id = <span class="string">"sensor_frame"</span>;<span class="comment">//参考坐标系</span></div><div class="line"></div><div class="line">     cloud.points.resize(num_points);<span class="comment">//设置点云数据的点数</span></div><div class="line"></div><div class="line">     <span class="comment">//we'll also add an intensity channel to the cloud</span></div><div class="line">     cloud.channels.resize(<span class="number">1</span>);<span class="comment">//添加一个强度通道</span></div><div class="line">     cloud.channels[<span class="number">0</span>].name = <span class="string">"intensities"</span>;</div><div class="line">     cloud.channels[<span class="number">0</span>].values.resize(num_points);<span class="comment">//设置通道的宽度与点数匹配</span></div><div class="line"></div><div class="line">     <span class="comment">//模拟填充一些点云数据并且填充强度通道数据</span></div><div class="line">     <span class="comment">//generate some fake data for our point cloud</span></div><div class="line">     <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_points; ++i)&#123;</div><div class="line">       cloud.points[i].x = <span class="number">1</span> + count;</div><div class="line">       cloud.points[i].y = <span class="number">2</span> + count;</div><div class="line">       cloud.points[i].z = <span class="number">3</span> + count;</div><div class="line">       cloud.channels[<span class="number">0</span>].values[i] = <span class="number">100</span> + count;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">//发布点云数据</span></div><div class="line">     cloud_pub.publish(cloud);</div><div class="line">     ++count;</div><div class="line">     r.sleep();</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>修改 CMakeLists.txt 添加以下项：<br> <figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">add_executable</span>(point_cloud_publisher src/point_cloud_publisher.cpp)</div><div class="line"><span class="keyword">if</span>(sensor_msgs_EXPORTED_TARGETS)</div><div class="line">     <span class="keyword">add_dependencies</span>(point_cloud_publisher <span class="variable">$&#123;sensor_msgs_EXPORTED_TARGETS&#125;</span>)</div><div class="line"><span class="keyword">endif</span>()</div><div class="line"><span class="keyword">target_link_libraries</span>(point_cloud_publisher</div><div class="line">    <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></div><div class="line">  )</div><div class="line"><span class="keyword">install</span>(TARGETS point_cloud_publisher</div><div class="line">    ARCHIVE DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</span></div><div class="line">    LIBRARY DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</span></div><div class="line">    RUNTIME DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</span></div><div class="line">  )</div></pre></td></tr></table></figure></p>
<p>回到 ~/catkin_ws 即可编译。<br>参考 <a href="http://wiki.ros.org/navigation/Tutorials/RobotSetup/Sensors" target="_blank" rel="external">Publishing Sensor Streams Over ROS</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;传感器数据发布的正确与否直接影响到 ROS 导航功能的安全和性能。如果没有正确获取传感器的数据，机器人将会迷路或撞上障碍物。有很多传感器为机器人导航提供可用的信息，比如激光雷达、摄像头、声呐、红外以及碰撞传感器等。目前ROS的导航功能包仅支持激光雷达以及点云数据也就是 sensor_msgs/LaserScan 和 sensor_msgs/PointCloud 两种消息类型。本篇学习如何发布导航需要的这两种传感器数据消息。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS sensor" scheme="http://stevenshi.me/tags/ROS-sensor/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级十五 发布里程计消息</title>
    <link href="http://stevenshi.me/2017/07/07/ros-primary-tutorial-15/"/>
    <id>http://stevenshi.me/2017/07/07/ros-primary-tutorial-15/</id>
    <published>2017-07-07T00:40:30.000Z</published>
    <updated>2017-07-07T06:10:54.622Z</updated>
    
    <content type="html"><![CDATA[<p>ROS导航功能包使用 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 来决定机器人在环境中的位置并根据传感器的数据生成静态地图。但是 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 却不能提供机器人速度的任何信息。因此导航功能包需要里程计信息源能够发布包含速度信息的变换及里程计消息。本篇将学习 nav_msgs/Odometry 消息，并且通过代码学习如何通过 ROS 以及 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 变换发布里程计消息。<br><a id="more"></a></p>
<h1 id="nav-msgs-Odometry-消息"><a href="#nav-msgs-Odometry-消息" class="headerlink" title="nav_msgs/Odometry 消息"></a>nav_msgs/Odometry 消息</h1><p>nav_msgs/Odometry 消息包含机器人在自由空间中的位置估计以及速度值。可以使用消息查看命令来查看 nav_msgs/Odometry 消息的详细信息：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosmsg show nav_msgs/Odometry</span></div></pre></td></tr></table></figure></p>
<p>详细的介绍可参考 <a href="http://docs.ros.org/api/nav_msgs/html/msg/Odometry.html" target="_blank" rel="external">nav_msgs/Odometry.msg</a><br>   <figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This represents an estimate of a position and velocity in free space.  </span></div><div class="line"><span class="comment"># The pose in this message should be specified in the coordinate frame given by header.frame_id.</span></div><div class="line"><span class="comment"># The twist in this message should be specified in the coordinate frame given by the child_frame_id</span></div><div class="line"><span class="attribute"><span class="nomarkup">Header</span></span> header</div><div class="line"><span class="attribute">string</span> child_frame_id</div><div class="line"><span class="attribute">geometry_msgs</span>/PoseWithCovariance pose</div><div class="line"><span class="attribute">geometry_msgs</span>/TwistWithCovariance twist</div></pre></td></tr></table></figure></p>
<p>pose 参数包含机器人在里程计框架下的位置估计并附带一个可选的位姿估算协方差。 twist 参数包含机器人在子坐标系下的速度信息，并附带一个可选的速度估算协方差，这个子坐标系通常是机器人移动基座的坐标参考系。</p>
<h1 id="使用-tf-发布里程计变换"><a href="#使用-tf-发布里程计变换" class="headerlink" title="使用 tf 发布里程计变换"></a>使用 tf 发布里程计变换</h1><p><a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 软件库负责维护机器人坐标系之间的变换树，因此任何里程计源都应该发布它管理的坐标系信息。这一部分的详细使用和说明请参考我的前一篇文章<a href="http://stevenshi.me/2017/06/08/ros-primary-tutorial-14/#more">ROS初级十四 tf 配置</a>。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>下面我们通过编写一些简单的代码实现里程计消息以及利用 tf 实现变换，模拟一个机器人进行圆周运动。新建包 odometry_publisher_tutorial,依赖项为 tf 以及 nav_msgs:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg odometry_publisher_tutorial tf nav_msgs roscpp</span></div></pre></td></tr></table></figure></p>
<p>新建cpp文件，并命名为 odometry_publisher.cpp,拷贝如下代码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line">  <span class="comment">//包含 tf 以及 nav_msgs 相关的头文件</span></div><div class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_broadcaster.h&gt;</span></span></div><div class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;nav_msgs/Odometry.h&gt;</span></span></div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line">    ros::init(argc, argv, <span class="string">"odometry_publisher"</span>);</div><div class="line"></div><div class="line">   ros::NodeHandle n;</div><div class="line"></div><div class="line">   <span class="comment">//创建一个publisher 命名为 odom_pub 消息类型为 nav_msgs::Odometry</span></div><div class="line">   ros::Publisher odom_pub = n.advertise&lt;nav_msgs::Odometry&gt;(<span class="string">"odom"</span>, <span class="number">50</span>);</div><div class="line"></div><div class="line">   <span class="comment">//创建对象 tf 广播变换</span></div><div class="line">   tf::TransformBroadcaster odom_broadcaster;</div><div class="line">   <span class="comment">//假定机器人的起始位置位于odom坐标参考系的原点即0点</span></div><div class="line">   <span class="keyword">double</span> x = <span class="number">0.0</span>;</div><div class="line">   <span class="keyword">double</span> y = <span class="number">0.0</span>;</div><div class="line">   <span class="keyword">double</span> th = <span class="number">0.0</span>;</div><div class="line"></div><div class="line">   <span class="comment">//设定一个初始速度，在 odom 坐标参考系下</span></div><div class="line">   <span class="keyword">double</span> vx = <span class="number">0.1</span>;<span class="comment">// x 方向 0.1m/s</span></div><div class="line">   <span class="keyword">double</span> vy = <span class="number">-0.1</span>;<span class="comment">//  y 方向 -0.1m/s</span></div><div class="line">   <span class="keyword">double</span> vth = <span class="number">0.1</span>;<span class="comment">// 角速度为0.1rad/s</span></div><div class="line"></div><div class="line">   ros::Time current_time, last_time;</div><div class="line">   <span class="comment">//获取系统当前时间</span></div><div class="line">   current_time = ros::Time::now();</div><div class="line">   last_time = ros::Time::now();</div><div class="line"></div><div class="line">   <span class="comment">//以 1HZ频率发布</span></div><div class="line">   ros::<span class="function">Rate <span class="title">r</span><span class="params">(<span class="number">1.0</span>)</span></span>;</div><div class="line">   <span class="keyword">while</span>(n.ok())&#123;</div><div class="line">     current_time = ros::Time::now();</div><div class="line"></div><div class="line">     <span class="comment">//计算里程计信息</span></div><div class="line">     <span class="comment">//compute odometry in a typical way given the velocities of the robot</span></div><div class="line">     <span class="keyword">double</span> dt = (current_time - last_time).toSec();</div><div class="line">     <span class="keyword">double</span> delta_x = (vx * <span class="built_in">cos</span>(th) - vy * <span class="built_in">sin</span>(th)) * dt;</div><div class="line">     <span class="keyword">double</span> delta_y = (vx * <span class="built_in">sin</span>(th) + vy * <span class="built_in">cos</span>(th)) * dt;</div><div class="line">     <span class="keyword">double</span> delta_th = vth * dt;</div><div class="line"></div><div class="line">     <span class="comment">//更新里程计信息</span></div><div class="line">     x += delta_x;</div><div class="line">     y += delta_y;</div><div class="line">     th += delta_th;</div><div class="line"></div><div class="line">     <span class="comment">//以下为了兼容三维系统下的消息结构，将里程计的偏航角转换成四元数</span></div><div class="line">     <span class="comment">//since all odometry is 6DOF we'll need a quaternion created from yaw</span></div><div class="line">     geometry_msgs::Quaternion odom_quat = tf::createQuaternionMsgFromYaw(th);</div><div class="line">        <span class="comment">//first, we'll publish the transform over tf</span></div><div class="line">     <span class="comment">//TransformStamped 类型为tf 发布时需要的类型</span></div><div class="line">     geometry_msgs::TransformStamped odom_trans;</div><div class="line">     <span class="comment">//时间戳</span></div><div class="line">     odom_trans.header.stamp = current_time;</div><div class="line">     <span class="comment">//父参考坐标系 id</span></div><div class="line">     odom_trans.header.frame_id = <span class="string">"odom"</span>;</div><div class="line">     <span class="comment">//子参考系 id</span></div><div class="line">     odom_trans.child_frame_id = <span class="string">"base_link"</span>;</div><div class="line">     <span class="comment">//我们希望发布从odom到base_link的变换，因此这两个坐标系的关系不要搞错</span></div><div class="line"></div><div class="line">     <span class="comment">//填充变换数据</span></div><div class="line">     odom_trans.transform.translation.x = x;</div><div class="line">     odom_trans.transform.translation.y = y;</div><div class="line">     odom_trans.transform.translation.z = <span class="number">0.0</span>;</div><div class="line">     odom_trans.transform.rotation = odom_quat;</div><div class="line"></div><div class="line">     <span class="comment">//发送变换</span></div><div class="line">     <span class="comment">//send the transform</span></div><div class="line">     odom_broadcaster.sendTransform(odom_trans);</div><div class="line"></div><div class="line">     <span class="comment">//填充时间戳，发布nav_msgs/Odometry 里程计消息</span></div><div class="line">     <span class="comment">//以便于导航包可以获取速度信息</span></div><div class="line">     <span class="comment">//还需设置时间戳以及父子参考坐标系</span></div><div class="line">     <span class="comment">//next, we'll publish the odometry message over ROS</span></div><div class="line">     nav_msgs::Odometry odom;</div><div class="line">     odom.header.stamp = current_time;</div><div class="line">     odom.header.frame_id = <span class="string">"odom"</span>;</div><div class="line">     odom.child_frame_id = <span class="string">"base_link"</span>;</div><div class="line"></div><div class="line">     <span class="comment">//最后填充机器人的位置以及速度信息，</span></div><div class="line">     <span class="comment">//并且发布该信息，因为是机器人本体，</span></div><div class="line">     <span class="comment">//所以参考坐标系为 base_link</span></div><div class="line">     <span class="comment">//set the position</span></div><div class="line">     odom.pose.pose.position.x = x;</div><div class="line">     odom.pose.pose.position.y = y;</div><div class="line">     odom.pose.pose.position.z = <span class="number">0.0</span>;</div><div class="line">     odom.pose.pose.orientation = odom_quat;</div><div class="line"></div><div class="line">     <span class="comment">//set the velocity</span></div><div class="line">     odom.twist.twist.linear.x = vx;</div><div class="line">     odom.twist.twist.linear.y = vy;</div><div class="line">     odom.twist.twist.angular.z = vth;</div><div class="line"></div><div class="line">     <span class="comment">//publish the message</span></div><div class="line">     odom_pub.publish(odom);</div><div class="line"></div><div class="line">    last_time = current_time;</div><div class="line">    r.sleep();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>设置 CMakeLists.txt 添加依赖项：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(odometry_publisher src/odometry_publisher.cpp)</span></span></div><div class="line"><span class="function"><span class="title">if</span><span class="params">(nav_msgs_EXPORTED_TARGETS)</span></span></div><div class="line">	add_dependencies(odometry_publisher $&#123;nav_msgs_EXPORTED_TARGETS&#125;)</div><div class="line"><span class="function"><span class="title">endif</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(odometry_publisher $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line">install(TARGETS odometry_publisher</div><div class="line">	ARCHIVE DESTINATION $&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</div><div class="line">	LIBRARY DESTINATION $&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</div><div class="line">	RUNTIME DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</div><div class="line">	)</div></pre></td></tr></table></figure></p>
<p>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure></p>
<p>参考：<a href="http://wiki.ros.org/navigation/Tutorials/RobotSetup/Odom" target="_blank" rel="external">Publishing Odometry Information Over ROS</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ROS导航功能包使用 &lt;a href=&quot;http://wiki.ros.org/tf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tf&lt;/a&gt; 来决定机器人在环境中的位置并根据传感器的数据生成静态地图。但是 &lt;a href=&quot;http://wiki.ros.org/tf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tf&lt;/a&gt; 却不能提供机器人速度的任何信息。因此导航功能包需要里程计信息源能够发布包含速度信息的变换及里程计消息。本篇将学习 nav_msgs/Odometry 消息，并且通过代码学习如何通过 ROS 以及 &lt;a href=&quot;http://wiki.ros.org/tf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tf&lt;/a&gt; 变换发布里程计消息。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS odometry" scheme="http://stevenshi.me/tags/ROS-odometry/"/>
    
  </entry>
  
  <entry>
    <title>三轮全向移动底盘运动学解析</title>
    <link href="http://stevenshi.me/2017/06/28/omniwheel-kinematical-analysis/"/>
    <id>http://stevenshi.me/2017/06/28/omniwheel-kinematical-analysis/</id>
    <published>2017-06-28T05:44:18.000Z</published>
    <updated>2017-06-29T03:13:11.092Z</updated>
    
    <content type="html"><![CDATA[<p>三轮全向移动底盘因其良好的运动性并且结构简单，近年来备受欢迎。三个轮子互相间隔120°，每个全向轮由若干个小滚轮组成，各个滚轮的母线组成一个完整的圆。机器人既可以沿轮面的切线方向移动，也可以沿轮子的轴线方向移动，这两种运动的组合即可以实现平面内任意方向的运动。</p>
<p><img src="/2017/06/28/omniwheel-kinematical-analysis/omnidiagram.jpg" alt=""></p>
<a id="more"></a>
<h1 id="运动学分析"><a href="#运动学分析" class="headerlink" title="运动学分析"></a>运动学分析</h1><p><img src="/2017/06/28/omniwheel-kinematical-analysis/omni.jpg" alt=""><br>为便于运动学分析，我们以理想情况为基础，三个轮子相对于车体的中轴线对称，且物理尺寸重量等完全一致；上层负载均衡，机器人的重心与三个轮子转动轴线的交点重合；三个轮体与地面摩擦力足够大，不会发生打滑现象；机器人中心到三个全向轮的距离相等。<br>定义绝对坐标系 <em>XOY</em>，机器人自身坐标系 <em>X’O’Y’</em>。机器人的姿态角为 <em>θ</em>，即机器人自身坐标相对于绝对坐标的旋转角度。机器人自身旋转的角速度设为 <em>W</em>。 <em>L</em> 为三个轮子相对于机器人中心的距离，$V_A$,$V_B$,$V_C$ 分别表示三个轮子沿驱动方向的速度；角度 <em>ψ</em> 为 轮子与机器人坐标系 <em>X</em> 轴的夹角，这个夹角我们可以算出为 60°。我们假定机器人在任意时刻的速度为 $V = [V_x,V_y,W]$,其中 $V_x$ 和 $V_y$ 分别为机器人在自身坐标系下的  <em>X</em> 轴 <em>Y</em> 轴方向的速度，<em>W</em> 为机器人运动的角速度，假定顺时针方向为正方向。那么可得出机器人运动学方程：<br>$ V_A= V_x + L W $<br>$ V_B= -V_x cosψ + V_y sinψ + L W $<br>$ V_C= -V_x cosψ - V_y sinψ + L W $<br>写成矩阵形式为：<br>$\left[<br>\begin{matrix}<br>V_A \\<br>V_B \\<br>V_C \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; L \\<br>-cosψ &amp; sinψ &amp; L \\<br>-cosψ &amp; -sinψ &amp; L<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>V_x \\<br>V_y \\<br>W \\<br>\end{matrix}<br>\right] $<br>车轮的线速度还可以表示为：<br>$ V_A = Rω_A $<br>$ V_B = Rω_B $<br>$ V_C = Rω_C $<br>式中 R 为全向轮的半径，ω 为全向轮旋转角速度,因此得出：<br>$\left[<br>\begin{matrix}<br>ω_A \\<br>ω_B \\<br>ω_C \\<br>\end{matrix}<br>\right] = R^{-1}<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; L \\<br>-cosψ &amp; sinψ &amp; L \\<br>-cosψ &amp; -sinψ &amp; L<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>V_x \\<br>V_y \\<br>W \\<br>\end{matrix}<br>\right]$<br>以上是机器人在自身坐标系下的运动学方程，实际应用中还需要转换为全局坐标系，上图中机器人自身坐标与全局坐标的夹角为 <em>θ</em>，假设机器人在全局坐标系中的速度为<br>$V_g = [V_gx,V_gy,W_g]$<br>那么可以推出：<br>$V_gx = V_xcosθ - V_ysinθ $<br>$V_gy = V_xsinθ + V_ycosθ $<br>因此可以推出机器人相对于自身坐标下的速度 $V = [V_x,V_y,W]$ 与机器人相对于全局坐标下的速度 $V_g = [V_gx,V_gy,W_g]$ 之间的变换关系：</p>
<p>$R(θ)=<br>\left[<br>\begin{matrix}<br>cosθ &amp; -sinθ &amp; 0 \\<br>sinθ &amp;  cosθ &amp; 0 \\<br>0 &amp; 0 &amp; 1 \\<br>\end{matrix}<br>\right]$</p>
<p>因此两个坐标系下的变换可写成：</p>
<p>$\left[<br>\begin{matrix}<br>V_gx \\<br>V_gy \\<br>W_g \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>cosθ &amp; -sinθ &amp; 0 \\<br>sinθ &amp;  cosθ &amp; 0 \\<br>0 &amp; 0 &amp; 1 \\<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>V_x \\<br>V_y \\<br>W \\<br>\end{matrix}<br>\right]$</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三轮全向移动底盘因其良好的运动性并且结构简单，近年来备受欢迎。三个轮子互相间隔120°，每个全向轮由若干个小滚轮组成，各个滚轮的母线组成一个完整的圆。机器人既可以沿轮面的切线方向移动，也可以沿轮子的轴线方向移动，这两种运动的组合即可以实现平面内任意方向的运动。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/06/28/omniwheel-kinematical-analysis/omnidiagram.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="omniwheel" scheme="http://stevenshi.me/tags/omniwheel/"/>
    
  </entry>
  
  <entry>
    <title>hexo中插入数学公式</title>
    <link href="http://stevenshi.me/2017/06/26/hexo-insert-formula/"/>
    <id>http://stevenshi.me/2017/06/26/hexo-insert-formula/</id>
    <published>2017-06-26T03:28:55.000Z</published>
    <updated>2017-06-29T08:36:10.155Z</updated>
    
    <content type="html"><![CDATA[<p>原生hexo并不支持数学公式，需要安装插件 <a href="https://www.mathjax.org/" target="_blank" rel="external">mathJax</a>。<a href="https://www.mathjax.org/" target="_blank" rel="external">mathJax</a> 是一款运行于浏览器中的开源数学符号渲染引擎，使用 <a href="https://www.mathjax.org/" target="_blank" rel="external">mathJax</a> 可以方便的在浏览器中嵌入数学公式。<a href="https://www.mathjax.org/" target="_blank" rel="external">mathJax</a> 使用网络字体产生高质量的排版，因此可适应各种分辨率，它的显示是基于文本的而非图片，因此显示效果更好。这些公式可以被搜索引擎使用，因此公式里的符号一样可以被搜索引擎检索到。先看一下矩阵的显示效果:</p>
<p>$\left[<br>\begin{matrix}<br>V_A \\<br>V_B \\<br>V_C \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; L \\<br>-cosψ &amp; sinψ &amp; L \\<br>-cosψ &amp; -sinψ &amp; L<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>V_x \\<br>V_y \\<br>W \\<br>\end{matrix}<br>\right] $</p>
<a id="more"></a>
<h1 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h1><p>　　<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-<span class="built_in">math</span> <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<p>在站点配置文件 <em>_config.yml</em> 中添加：<br>　　<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">math</span>:</div><div class="line">  <span class="attribute">engine</span>: <span class="string">'mathjax'</span> # or <span class="string">'katex'</span></div><div class="line">  <span class="attribute">mathjax</span>:</div><div class="line">    # <span class="attribute">src</span>: custom_mathjax_source</div><div class="line">    <span class="attribute">config</span>:</div><div class="line">      # MathJax config</div></pre></td></tr></table></figure></p>
<p>在 next 主题配置文件中 <em>themes/next-theme/_config.yml</em> 中将 mathJax 设为 true:<br>　　<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># MathJax Support</span></div><div class="line"><span class="attr">mathjax:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  per_page:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  cdn:</span> <span class="string">//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span></div></pre></td></tr></table></figure></p>
<p>也可以在文章的开始集成插件支持，但不建议这么做：<br>　　<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span></span></div><div class="line">   <span class="attr">src</span>=<span class="string">"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"</span>&gt;<span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>公式插入格式：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span>数学公式<span class="symbol">$</span> 行内 不独占一行</div><div class="line"><span class="symbol">$</span><span class="symbol">$</span>数学公式<span class="symbol">$</span><span class="symbol">$</span> 行间 独占一行</div></pre></td></tr></table></figure></p>
<p>例如：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$f</span>(x)=ax+b$</span></div></pre></td></tr></table></figure></p>
<p>显示效果为：$f(x)=ax+b$<br>如果是行间则使用：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span><span class="symbol">$</span>f(x)=ax+b<span class="symbol">$</span><span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>显示效果为：$$f(x)=ax+b$$</p>
<h1 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h1><h2 id="上标与下标"><a href="#上标与下标" class="headerlink" title="上标与下标"></a>上标与下标</h2><p>使用 ^ 表示上标，使用 _ 表示下标，如果上下标的内容多于一个字符，可以使用大括号括起来：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span><span class="symbol">$</span>f(x) = a_1x^n + a_2x^&#123;n<span class="number">-1</span>&#125; + a_3x^&#123;n<span class="number">-2</span>&#125;<span class="symbol">$</span><span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>显示效果为：$$f(x) = a_1x^n + a_2x^{n-1} + a_3x^{n-2}$$<br>如果左右两边都有上下标可以使用 \sideset 语法：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span><span class="symbol">$</span>\sideset&#123;^n_k&#125;&#123;^x_y&#125;a<span class="symbol">$</span><span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>显示效果为：$$\sideset{^n_k}{^x_y}a$$</p>
<h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>在 markdown 语法中，\, $, {, }, _都是有特殊含义的，所以需要加\转义。小括号与方括号可以使用原始的() [] 大括号需要转义\也可以使用\lbrace和 \rbrace<br>　　<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">\&#123;</span>x*y<span class="symbol">\&#125;</span></div><div class="line"><span class="symbol">\l</span>brace x*y <span class="symbol">\r</span>brace</div></pre></td></tr></table></figure></p>
<p>显示效果为：$ \lbrace x*y \rbrace $<br>原始符号不会随着公式大小自动缩放，需要使用 \left 和 \right 来实现自动缩放：<br>　　<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="formula">$$<span class="tag">\<span class="name">left</span></span> <span class="tag">\<span class="name">lbrace</span></span> <span class="tag">\<span class="name">sum</span></span>_&#123;i=0&#125;^n i^3 = <span class="tag">\<span class="name">frac</span><span class="string">&#123;(n^2+n)(n+6)&#125;</span><span class="string">&#123;9&#125;</span></span> <span class="tag">\<span class="name">right</span></span> <span class="tag">\<span class="name">rbrace</span></span>$$</span></div></pre></td></tr></table></figure></p>
<p>效果：<br>$$\left \lbrace \sum_{i=0}^n i^3 = \frac{(n^2+n)(n+6)}{9} \right \rbrace$$<br>不使用\left 和 \right的效果：<br>　　<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="formula">$$ <span class="tag">\<span class="name">lbrace</span></span> <span class="tag">\<span class="name">sum</span></span>_&#123;i=0&#125;^n i^3 = <span class="tag">\<span class="name">frac</span><span class="string">&#123;(n^2+n)(n+6)&#125;</span><span class="string">&#123;9&#125;</span></span>  <span class="tag">\<span class="name">rbrace</span></span>$$</span></div></pre></td></tr></table></figure></p>
<p>$$ \lbrace \sum_{i=0}^n i^3 = \frac{(n^2+n)(n+6)}{9}  \rbrace$$</p>
<h2 id="分数与开方"><a href="#分数与开方" class="headerlink" title="分数与开方"></a>分数与开方</h2><p>可以使用\frac 或者 \over 实现分数的显示：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span>\<span class="built-in">frac</span> xy<span class="symbol">$</span></div><div class="line"><span class="symbol">$</span> x+<span class="number">3</span> \over y+<span class="number">5</span> <span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>分别显示为：$\frac xy$ 和 $ x+3 \over y+5 $。<br>开方使用\sqrt:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> \<span class="built-in">sqrt</span>&#123;x^<span class="number">5</span>&#125; <span class="symbol">$</span></div><div class="line"><span class="symbol">$</span> \<span class="built-in">sqrt</span>[<span class="number">3</span>]&#123;\<span class="built-in">frac</span> xy&#125; <span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>分别显示为：$ \sqrt{x^5} $ 和 $ \sqrt[3]{\frac xy} $</p>
<h2 id="求和与积分"><a href="#求和与积分" class="headerlink" title="求和与积分"></a>求和与积分</h2><p>求和使用\sum,可加上下标，积分使用\int可加上下限，双重积分用\iint:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> \sum_&#123;i=<span class="number">0</span>&#125;^n <span class="symbol">$</span></div><div class="line"><span class="symbol">$</span> \int_1^\infty <span class="symbol">$</span></div><div class="line"><span class="symbol">$</span> \iint_1^\infty <span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>分别显示:$ \sum_{i=0}^n $ 和 $ \int_1^\infty $ 以及 $ \iint_1^\infty $</p>
<h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><p>极限使用\lim:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> \lim_&#123;x \to <span class="number">0</span>&#125; <span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>显示为：$ \lim_{x \to 0} $</p>
<h2 id="表格与矩阵"><a href="#表格与矩阵" class="headerlink" title="表格与矩阵"></a>表格与矩阵</h2><p>表格样式lcr表示居中，|加入一条竖线，\hline表示行间横线，列之间用&amp;分隔，行之间用\分隔<br>　　<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="formula">$$<span class="tag">\<span class="name">begin</span><span class="string">&#123;array&#125;</span><span class="string">&#123;c|lcr&#125;</span></span></span></div><div class="line">n &amp; <span class="tag">\<span class="name">text</span><span class="string">&#123;Left&#125;</span></span> &amp; <span class="tag">\<span class="name">text</span><span class="string">&#123;Center&#125;</span></span> &amp; <span class="tag">\<span class="name">text</span><span class="string">&#123;Right&#125;</span></span> <span class="tag">\<span class="name">\</span></span><span class="tag">\<span class="name">\</span></span></div><div class="line"><span class="tag">\<span class="name">hline</span></span></div><div class="line">1 &amp; 1.97 &amp; 5 &amp; 12 <span class="tag">\<span class="name">\</span></span><span class="tag">\<span class="name">\</span></span></div><div class="line">2 &amp; -11 &amp; 19 &amp; -80 <span class="tag">\<span class="name">\</span></span><span class="tag">\<span class="name">\</span></span></div><div class="line">3 &amp; 70 &amp; 209 &amp; 1+i <span class="tag">\<span class="name">\</span></span><span class="tag">\<span class="name">\</span></span></div><div class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;array&#125;</span></span>$$</div></pre></td></tr></table></figure></p>
<p>显示效果为：$$\begin{array}{c|lcr}<br>n &amp; \text{Left} &amp; \text{Center} &amp; \text{Right} \\<br>\hline<br>1 &amp; 1.97 &amp; 5 &amp; 12 \\<br>2 &amp; -11 &amp; 19 &amp; -80 \\<br>3 &amp; 70 &amp; 209 &amp; 1+i \\<br>\end{array}$$<br>矩阵显示和表格很相似<br>　　<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$$<span class="symbol">\l</span>eft[</div><div class="line"><span class="symbol">\b</span>egin&#123;matrix&#125;</div><div class="line">V_A <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">V_B <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">V_C <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line"><span class="symbol">\e</span>nd&#123;matrix&#125;</div><div class="line"><span class="symbol">\r</span>ight] =</div><div class="line"><span class="symbol">\l</span>eft[</div><div class="line"><span class="symbol">\b</span>egin&#123;matrix&#125;</div><div class="line">1 &amp; 0 &amp; L <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">-cosψ &amp; sinψ &amp; L <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">-cosψ &amp; -sinψ &amp; L</div><div class="line"><span class="symbol">\e</span>nd&#123;matrix&#125;</div><div class="line"><span class="symbol">\r</span>ight]</div><div class="line"><span class="symbol">\l</span>eft[</div><div class="line"><span class="symbol">\b</span>egin&#123;matrix&#125;</div><div class="line">V_x <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">V_y <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">W <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line"><span class="symbol">\e</span>nd&#123;matrix&#125;</div><div class="line"><span class="symbol">\r</span>ight] $$</div></pre></td></tr></table></figure></p>
<p>显示效果：　<br>$$\left[<br>\begin{matrix}<br>V_A \\<br>V_B \\<br>V_C \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; L \\<br>-cosψ &amp; sinψ &amp; L \\<br>-cosψ &amp; -sinψ &amp; L<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>V_x \\<br>V_y \\<br>W \\<br>\end{matrix}<br>\right] $$<br>还有其他矩阵如内联矩阵增广矩阵方程组等，下次再补充，未完待续…<br>参考：<br><a href="https://www.mathjax.org" target="_blank" rel="external">mathJax</a><br><a href="http://mohu.org/info/symbols/symbols.htm" target="_blank" rel="external">LaTeX</a><br><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference/5044" target="_blank" rel="external">mathjax-basic-tutorial-and-quick-reference</a><br><a href="http://mlworks.cn/posts/introduction-to-mathjax-and-latex-expression" target="_blank" rel="external">MathJax公式简介</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原生hexo并不支持数学公式，需要安装插件 &lt;a href=&quot;https://www.mathjax.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mathJax&lt;/a&gt;。&lt;a href=&quot;https://www.mathjax.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mathJax&lt;/a&gt; 是一款运行于浏览器中的开源数学符号渲染引擎，使用 &lt;a href=&quot;https://www.mathjax.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mathJax&lt;/a&gt; 可以方便的在浏览器中嵌入数学公式。&lt;a href=&quot;https://www.mathjax.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mathJax&lt;/a&gt; 使用网络字体产生高质量的排版，因此可适应各种分辨率，它的显示是基于文本的而非图片，因此显示效果更好。这些公式可以被搜索引擎使用，因此公式里的符号一样可以被搜索引擎检索到。先看一下矩阵的显示效果:&lt;/p&gt;
&lt;p&gt;$\left[&lt;br&gt;\begin{matrix}&lt;br&gt;V_A \\&lt;br&gt;V_B \\&lt;br&gt;V_C \\&lt;br&gt;\end{matrix}&lt;br&gt;\right] =&lt;br&gt;\left[&lt;br&gt;\begin{matrix}&lt;br&gt;1 &amp;amp; 0 &amp;amp; L \\&lt;br&gt;-cosψ &amp;amp; sinψ &amp;amp; L \\&lt;br&gt;-cosψ &amp;amp; -sinψ &amp;amp; L&lt;br&gt;\end{matrix}&lt;br&gt;\right]&lt;br&gt;\left[&lt;br&gt;\begin{matrix}&lt;br&gt;V_x \\&lt;br&gt;V_y \\&lt;br&gt;W \\&lt;br&gt;\end{matrix}&lt;br&gt;\right] $&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://stevenshi.me/categories/hexo/"/>
    
    
      <category term="formula" scheme="http://stevenshi.me/tags/formula/"/>
    
  </entry>
  
  <entry>
    <title>超经典 ROS 学习电子书</title>
    <link href="http://stevenshi.me/2017/06/12/ros-books/"/>
    <id>http://stevenshi.me/2017/06/12/ros-books/</id>
    <published>2017-06-12T08:55:48.000Z</published>
    <updated>2017-06-29T01:07:41.244Z</updated>
    
    <content type="html"><![CDATA[<p>收藏了几本 ROS 学习的超级经典教材，都是高清晰电子版，在这里和大家分享一下。</p>
<p><img src="/2017/06/12/ros-books/book.jpg" alt=""><br><a id="more"></a></p>
<p>下载地址：<a href="https://github.com/StevenShiChina/books" target="_blank" rel="external">ROS-Books</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;收藏了几本 ROS 学习的超级经典教材，都是高清晰电子版，在这里和大家分享一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/06/12/ros-books/book.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS Books" scheme="http://stevenshi.me/tags/ROS-Books/"/>
    
  </entry>
  
  <entry>
    <title>Putty 远程运行 ubuntu 图形界面程序</title>
    <link href="http://stevenshi.me/2017/06/12/putty-graphics-ubuntu/"/>
    <id>http://stevenshi.me/2017/06/12/putty-graphics-ubuntu/</id>
    <published>2017-06-12T00:16:20.000Z</published>
    <updated>2017-06-12T01:47:53.296Z</updated>
    
    <content type="html"><![CDATA[<p>远程登录 linux 一般通过 SSH 协议，或 telnet 协议，这两种协议一般都只是命令行界面，而不能远程运行带有图形界面的应用程序。但是 putty 这款软件支持 X11 Forwarding,如果再配合一个 <a href="https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1" target="_blank" rel="external">X server</a> 问题就解决了。一般常用的 <a href="https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1" target="_blank" rel="external">X server</a> 有 <a href="https://sourceforge.net/projects/xming/" target="_blank" rel="external">Xming</a> 和 <a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="external">VcXsrv</a>。基本的原理就是 ubuntu 开启 X11 转发服务，putty 负责数据的转发，而 X Server 进行图形界面的显示。<br><a id="more"></a></p>
<h1 id="SSH-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h1><p>配置 ubuntu 允许 X11 转发，打开 /etc/ssh/sshd_config 使能 X11 forwarding:<br>   <figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">X11Forwarding</span> <span class="literal">yes</span></div></pre></td></tr></table></figure></p>
<p>配置完成后记得重启 SSH 服务：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo /etc/init.d/ssh restart</span></div></pre></td></tr></table></figure></p>
<h1 id="X-Server-配置"><a href="#X-Server-配置" class="headerlink" title="X Server 配置"></a>X Server 配置</h1><p>X Server 可以使用 <a href="https://sourceforge.net/projects/xming/" target="_blank" rel="external">Xming</a> 也可以使用 <a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="external">VcXsrv</a>，在 win10 64bits 环境下测试 <a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="external">VcXsrv</a> 的效果较好。</p>
<h2 id="Xming"><a href="#Xming" class="headerlink" title="Xming"></a><a href="https://sourceforge.net/projects/xming/" target="_blank" rel="external">Xming</a></h2><p>Xming 的安装保持默认即可，安装完成后运行 Xlaunch 进行简单的配置：</p>
<p><img src="/2017/06/12/putty-graphics-ubuntu/xmingconfig.jpg" alt=""></p>
<p>主要是 Display number 的配置，记住这个号码，之后在 putty 中会用到。保存配置后即可启动 Xming。</p>
<h2 id="VcXsrv"><a href="#VcXsrv" class="headerlink" title="VcXsrv"></a><a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="external">VcXsrv</a></h2><p>VcXsrv 安装完成后运行 XLaunch 进行配置，和前面 xming 的配置类似，主要是 Display number 我这里配置为 0。</p>
<h1 id="Putty-配置"><a href="#Putty-配置" class="headerlink" title="Putty 配置"></a>Putty 配置</h1><p>Putty 首先选择 SSH 协议，端口 22：<br><img src="/2017/06/12/putty-graphics-ubuntu/puttyssh.jpg" alt=""><br>还需配置X11：<br><img src="/2017/06/12/putty-graphics-ubuntu/puttyx11.jpg" alt=""></p>
<p>注意 X display location 中的 localhost:0 ，这个端口号即是前面设置的 Display number，保持前后一致即可。<br>登录到 ubuntu 后，在命令行界面打开一个图形界面程序：<br><img src="/2017/06/12/putty-graphics-ubuntu/run.jpg" alt=""><br>比较不爽的是当用键盘控制时，turtle 的反应比较慢，不如直接在 ubuntu 系统内运行快。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;远程登录 linux 一般通过 SSH 协议，或 telnet 协议，这两种协议一般都只是命令行界面，而不能远程运行带有图形界面的应用程序。但是 putty 这款软件支持 X11 Forwarding,如果再配合一个 &lt;a href=&quot;https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;X server&lt;/a&gt; 问题就解决了。一般常用的 &lt;a href=&quot;https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;X server&lt;/a&gt; 有 &lt;a href=&quot;https://sourceforge.net/projects/xming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xming&lt;/a&gt; 和 &lt;a href=&quot;https://sourceforge.net/projects/vcxsrv/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VcXsrv&lt;/a&gt;。基本的原理就是 ubuntu 开启 X11 转发服务，putty 负责数据的转发，而 X Server 进行图形界面的显示。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://stevenshi.me/categories/Linux/"/>
    
    
      <category term="PuttyGraphics" scheme="http://stevenshi.me/tags/PuttyGraphics/"/>
    
  </entry>
  
  <entry>
    <title>Git 实用命令总结</title>
    <link href="http://stevenshi.me/2017/06/09/git-summary/"/>
    <id>http://stevenshi.me/2017/06/09/git-summary/</id>
    <published>2017-06-09T02:16:08.000Z</published>
    <updated>2017-06-13T08:57:01.540Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Git 那么久也没来得及总结一下，今天抽空将 Git 经常用到的一些命令记录下来，以备不时之需。</p>
<h1 id="创建代码仓"><a href="#创建代码仓" class="headerlink" title="创建代码仓"></a>创建代码仓</h1><p>如果远程已有代码仓可以直接 clone 至本地：<br>   <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">clone</span> <span class="title">https</span>://github.com/username/repository.git</div></pre></td></tr></table></figure></p>
<p>使用时请将 username 和 repository 替换成自己需要的远程代码仓地址，比如 clone 我的 learning_tf 代码仓至本地：<br>   <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">clone</span> <span class="title">https</span>://github.com/StevenShiChina/learning_tf.git</div></pre></td></tr></table></figure></p>
<p>值得一提得是 git 不仅支持 https 协议，还支持 ssh 协议等，具体可参考 <a href="https://git-scm.com/book/id/v2/Git-on-the-Server-The-Protocols" target="_blank" rel="external">git-protocols</a>。<br>也可以在本地创建一个 git 项目：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git init</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="本地修改与更新"><a href="#本地修改与更新" class="headerlink" title="本地修改与更新"></a>本地修改与更新</h1><p>在本地新建文件或修改文件后，要将文件修改提交到暂存区：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> git add --<span class="keyword">all</span> <span class="comment">// 当前目录下的所有文件都提交到暂存</span></div></pre></td></tr></table></figure></p>
<p>也可以使用如下命令：<br>   <figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">add</span> . <span class="comment">// ‘.’指当前目录下所有文件</span></div></pre></td></tr></table></figure></p>
<p>只添加某个文件：<br>   <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">add</span><span class="bash"> -p &lt;file&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果忘记了当前目录下修改了哪个文件可以用以下命令查看：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git status</span></div></pre></td></tr></table></figure></p>
<p>修改完之后可以提交本地所有修改到暂存区：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git commit <span class="_">-a</span></span></div></pre></td></tr></table></figure></p>
<p>为了区分每次提交的不同可以附加消息提交：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"your message to add here"</span></span></div></pre></td></tr></table></figure></p>
<p> 如果在提交到暂存前提示错误，可以删除 git 的缓存，重新提交到暂存：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git rm -r --cached .</span></div><div class="line"><span class="meta">$</span><span class="bash"> git add --all</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"your message to add here"</span></span></div></pre></td></tr></table></figure></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>在将本地代码仓推送至远程之前，我们还需要对本地 git 进行一些必要的配置，包括全局用户名以及邮件，这个可以配置为全局的也可以配置在自己的代码仓下：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span>  <span class="comment">// 生成SSH Key</span></div><div class="line">$ git config --global user<span class="selector-class">.name</span> <span class="string">"your username"</span> <span class="comment">//配置远程仓的用户名</span></div><div class="line">$ git config --global user<span class="selector-class">.email</span> <span class="string">"your_email@youremail.com"</span> <span class="comment">//配置邮件地址</span></div></pre></td></tr></table></figure></p>
<p>需要将生成的 SSH Key 添加到 github 具体可参考站内文章 <a href="http://stevenshi.me/2017/05/07/hexo-blog/">hexo+github建立个人博客</a>。<br>可以通过以下命令查看是否能连接到远程：<br>   <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>ssh -T git<span class="variable">@github</span>.com</div></pre></td></tr></table></figure></p>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>如果是本地新建的代码仓，需要通过以下命令将远程主机的代码仓与本地对应起来：<br>   <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote <span class="built_in">add</span> origin http<span class="variable">s:</span>//github.<span class="keyword">com</span>/username/repository.git</div></pre></td></tr></table></figure></p>
<p>查看远程分支：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></div><div class="line"><span class="meta">$</span><span class="bash"> git remote show &lt;分支名&gt; //查看某个分支信息</span></div></pre></td></tr></table></figure></p>
<p>如果远程有多个分支，可以通过以下命令切换：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git checkout &lt;分支名&gt;</span></div><div class="line"><span class="meta">$</span><span class="bash"> git checkout -b &lt;分支名&gt; //该命令可以创建分支并切换到分支</span></div></pre></td></tr></table></figure></p>
<p>如果搞错了，可以删除本地分支：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git branch <span class="_">-d</span> &lt;分支名&gt;</span></div></pre></td></tr></table></figure></p>
<p>可以通过 tag 给当前版本打个标签：<br>   <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">tag</span> <span class="title">&lt;tag-name</span>&gt;</div></pre></td></tr></table></figure></p>
<h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><p>本地修改完成后，需要推送至远程：<br>   <figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">push</span> <span class="built_in">origin</span> &lt;分支名&gt;</div></pre></td></tr></table></figure></p>
<h1 id="本地同步"><a href="#本地同步" class="headerlink" title="本地同步"></a>本地同步</h1><p>在本地可以通过 pull 命令来同步远程文件：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> git pull  <span class="comment">// 同步所有</span></div><div class="line"><span class="symbol">$</span> git pull origin &lt;分支名&gt; <span class="comment">//同步某个分支</span></div></pre></td></tr></table></figure></p>
<h1 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h1>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git merge &lt;分支名&gt;</span></div></pre></td></tr></table></figure>
<h1 id="回撤"><a href="#回撤" class="headerlink" title="回撤"></a>回撤</h1><p>如果修改错了，想回退到上一个版本：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD</span></div></pre></td></tr></table></figure></p>
<p>未完待续…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 Git 那么久也没来得及总结一下，今天抽空将 Git 经常用到的一些命令记录下来，以备不时之需。&lt;/p&gt;
&lt;h1 id=&quot;创建代码仓&quot;&gt;&lt;a href=&quot;#创建代码仓&quot; class=&quot;headerlink&quot; title=&quot;创建代码仓&quot;&gt;&lt;/a&gt;创建代码仓&lt;/h1&gt;&lt;p&gt;如果远程已有代码仓可以直接 clone 至本地：&lt;br&gt;   &lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git &lt;span class=&quot;keyword&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;https&lt;/span&gt;://github.com/username/repository.git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用时请将 username 和 repository 替换成自己需要的远程代码仓地址，比如 clone 我的 learning_tf 代码仓至本地：&lt;br&gt;   &lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git &lt;span class=&quot;keyword&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;https&lt;/span&gt;://github.com/StevenShiChina/learning_tf.git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;值得一提得是 git 不仅支持 https 协议，还支持 ssh 协议等，具体可参考 &lt;a href=&quot;https://git-scm.com/book/id/v2/Git-on-the-Server-The-Protocols&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git-protocols&lt;/a&gt;。&lt;br&gt;也可以在本地创建一个 git 项目：&lt;br&gt;   &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; git init&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://stevenshi.me/categories/Linux/"/>
    
    
      <category term="Git Command" scheme="http://stevenshi.me/tags/Git-Command/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级十四 tf 配置</title>
    <link href="http://stevenshi.me/2017/06/08/ros-primary-tutorial-14/"/>
    <id>http://stevenshi.me/2017/06/08/ros-primary-tutorial-14/</id>
    <published>2017-06-08T03:15:29.000Z</published>
    <updated>2017-06-13T05:58:03.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Transform-Configuration-变换配置"><a href="#Transform-Configuration-变换配置" class="headerlink" title="Transform Configuration 变换配置"></a>Transform Configuration 变换配置</h1><p>变换树是一种偏移，体现了不同坐标系之间的变换和旋转。假设有一个简单的机器人，只有移动底座以及一个位于底座上方的激光扫描仪。因此定义两个坐标系，一个对应激光扫描仪的中心点的坐标系，一个对应于移动底座中心点的坐标系，两个坐标系分别取名为 <em>base_laser</em> 和 <em>base_link</em> 。</p>
<p><img src="/2017/06/08/ros-primary-tutorial-14/simple_robot.png" alt=""><br><a id="more"></a><br>假设我们已经从激光扫描仪获取了一些数据，但这些数据都是以物体到激光扫描仪的距离给出的，即坐标系是 <em>base_laser</em>。 现在通过这些数据让机器人避开一些障碍物，如果不将这些激光扫描仪获取的数据从 <em>base_laser</em> 转换到 <em>base_link</em> 那么机器人在避开障碍物的过程中有可能失败，因此需要将激光扫描仪获取的数据从 <em>base_laser</em> 坐标系转换到 <em>base_link</em> 坐标系。因此需要知道两个坐标系的关系。看上图，<em>base_laser</em> 中心点位于 <em>base_link</em> 中心点上方 20cm 处，并向右偏移 10cm 。因此从激光扫描仪到移动底座的转换关系为(x:-0.1m,y:0.0m,z:-0.2m),反过来从移动底座到激光扫描仪的转换关系为(x:0.1m,y:0.0m,z:0.2m)。<br>当然这种变换关系我们可以手动去计算保存，需要的时候再调用，但是如果坐标系统增加，变换关系复杂，那么就需要利用 tf 来实现了。使用 tf 来管理坐标转关系，需要将转换关系添加到转换树中，转换树中的每一个节点都对应着一种坐标系，节点之间的连线即是两个坐标相互转换的一种表示，从当前节点到子节点的表示。 tf 利用树结构保证了两个坐标系之间只存在唯一的转换关系，我们假定节点的连线方向从父节点指向子节点。</p>
<p><img src="/2017/06/08/ros-primary-tutorial-14/tf_robot.png" alt=""></p>
<p>基于以上描述，我们需要创建两个节点，分别命名为 <em>base_laser</em> 以及 <em>base_link</em>。为了明确两者之间的关系，需要指定谁是父节点 parent，谁是子节点 child。因为 tf 假设所有的转换都是从 parent 到 child。这里我们选择 <em>base_link</em> 为 parent 父节点，<em>base_laser</em> 为 child 子节点，将来如果有其他传感器也将作为子节点添加到移动底座。因此转换关系的数学关系为(x:0.1m,y:0.0m,z:0.2m)。知道这个转换关系 <em>base_link</em> 就可以推理出 <em>base_laser</em> 扫描出的数据跟自己的位置关系，因此可以安全的避开障碍物并规划合理的路径。这个转换实质是将 <em>base_laser</em> 坐标系的点转换到 <em>base_link</em> 坐标系中去。本篇涉及的代码已上传至 <a href="https://github.com/StevenShiChina/robot_setup_tf" target="_blank" rel="external">mygithub</a>。</p>
<h1 id="Broadcasting-a-Transform-广播变换"><a href="#Broadcasting-a-Transform-广播变换" class="headerlink" title="Broadcasting a Transform 广播变换"></a>Broadcasting a Transform 广播变换</h1><p>创建源码包，添加依赖项：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/src/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg robot_setup_tf roscpp tf geometry_msgs</span></div></pre></td></tr></table></figure></p>
<p>创建一个节点用于广播变换，我们将节点命名为 tf_broadcaster，在 robot_setup_tf/src 目录下建立文件 tf_broadcaster.cpp，添加以下内容：<br>   <figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_broadcaster.h&gt;</span></span></div><div class="line"> </div><div class="line">  int main(int argc, char** argv)</div><div class="line">  &#123;</div><div class="line"><span class="symbol">      ros:</span>:init(argc, argv, <span class="string">"robot_tf_publisher"</span>);</div><div class="line"><span class="symbol">      ros:</span>:NodeHandle n;</div><div class="line"><span class="symbol"> </span></div><div class="line">      ros::Rate r(<span class="number">100</span>);</div><div class="line">     <span class="comment">//创建TransformBroadcaster对象，用于发布变换关系</span></div><div class="line"><span class="symbol">     tf:</span>:TransformBroadcaster broadcaster;</div><div class="line">     <span class="comment">//通过TransformBroadcaster来发送转换关系，需要附带5个参数。</span></div><div class="line">     <span class="comment">//第1个参数，我们传递了旋转变换，在两个坐标系的发送的任意旋转，</span></div><div class="line">     <span class="comment">//都必须通过调用btQuaternion.现在情况下，我们不想旋转，</span></div><div class="line">     <span class="comment">//所以我们在调用btQauternion的时候，将pitch,roll,yaw的参数都置0.</span></div><div class="line">     <span class="comment">//第2个参数，btVector3，任何变换过程都需要调用它。</span></div><div class="line">     <span class="comment">//相应的传感器的x方向距离机体基准偏移10cm，z方向20cm。</span></div><div class="line">     <span class="comment">//第3个参数，我们需要给定转换关系携带一个时间戳，我们标记为ros::Time::now()。</span></div><div class="line">     <span class="comment">//第4个参数，我们需要传递parent节点的名字。</span></div><div class="line">     <span class="comment">//第5个参数，传递的是child节点的名字。</span></div><div class="line">     while(n.ok())&#123;</div><div class="line">         broadcaster.sendTransform(</div><div class="line"><span class="symbol">             tf:</span>:StampedTransform(</div><div class="line"><span class="symbol">                 tf:</span>:Transform(<span class="symbol">tf::</span>Quaternion(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>), <span class="symbol">tf::</span>Vector3(<span class="number">0.1</span>, <span class="number">0.0</span>, <span class="number">0.2</span>)),</div><div class="line"><span class="symbol">             ros:</span>:<span class="symbol">Time::</span>now(),<span class="string">"base_link"</span>, <span class="string">"base_laser"</span>));</div><div class="line">         r.sleep();</div><div class="line"></div><div class="line">     &#125;</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>通过TransformBroadcaster来发送转换关系，需要附带5个参数。第1个参数，我们传递了旋转变换，在两个坐标系的发送的任意旋转，都必须通过调用 btQuaternion。现在我们不想旋转，所以我们在调用 btQauternion 的时候，将 pitch,roll,yaw 的参数都置0。第2个参数 btVector3，任何变换过程都需要调用它。相应的传感器的 x 方向距离机体基准偏移 10cm，z 方向 20cm。第3个参数，我们需要给定转换关系携带一个时间戳，我们标记为 ros::Time::now()。第4个参数，我们需要传递 parent 节点的名字。第5个参数，传递的是 child 节点的名字。 </p>
<h1 id="Using-a-Transform-调用变换"><a href="#Using-a-Transform-调用变换" class="headerlink" title="Using a Transform 调用变换"></a>Using a Transform 调用变换</h1><p>上面的节点用于发布转换关系，即将 <em>base_laser</em> 的坐标转换为 <em>base_link</em> 的坐标，现在我们利用这个转换关系，将从激光扫描仪获取的数据转换到移动底座对应的坐标系中来，即 <em>base_laser</em> 到 <em>base_link</em> 的转换。需要建立一个节点用于监听这种变换，在 robot_setup_tf/src 目录下新建文件 tf_listener.cpp 并添加以下代码：<br>   <figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;geometry_msgs/PointStamped.h&gt;</span></span></div><div class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_listener.h&gt;</span></span></div><div class="line">  </div><div class="line"><span class="comment">//创建一个函数，参数为TransformListener,作用为将“base_laser”坐标系的点，变换到“base_link”坐标系中。</span></div><div class="line"><span class="comment">//这个函数将会以ros::Timer定义的周期，作为一个回调函数周期调用,目前周期是1s</span></div><div class="line"> void transformPoint(const <span class="symbol">tf::</span>TransformListener&amp; listener)&#123;</div><div class="line">       </div><div class="line">     </div><div class="line">      <span class="comment">//此处，我们创建一个虚拟点，作为geometry_msgs::PointStamped。</span></div><div class="line">      <span class="comment">//消息名字最后的“Stamped”的意义是，它包含了一个头部，</span></div><div class="line">      <span class="comment">//允许我们去把时间戳和消息的frame_id相关联起来。</span></div><div class="line">      <span class="comment">//我们将会设置laser_point的时间戳为ros::time(),</span></div><div class="line">      <span class="comment">//即是允许我们请求TransformListener取得最新的变换数据。</span></div><div class="line">      <span class="comment">//对于header里的frame_id，我们设置为“base_laser”,</span></div><div class="line">      <span class="comment">//因为我们是创建的是扫描仪坐标系里的虚拟点。</span></div><div class="line">      <span class="comment">//最后，我们将会设置具体的虚拟点，比如x:1.0,y:0.2,z:0.0 </span></div><div class="line">      <span class="comment">//we'll create a point in the base_laser frame that we'd like to transform to the base_link frame</span></div><div class="line"><span class="symbol">       geometry_msgs:</span>:PointStamped laser_point;</div><div class="line">       laser_point.header.frame_id = <span class="string">"base_laser"</span>;</div><div class="line">  </div><div class="line">      <span class="comment">//we'll just use the most recent transform available for our simple example</span></div><div class="line">      laser_point.header.stamp = <span class="symbol">ros::</span>Time();</div><div class="line"> </div><div class="line">      <span class="comment">//just an arbitrary point in space</span></div><div class="line">      <span class="comment">//这里我们给定一个固定点</span></div><div class="line">      laser_point.point.x = <span class="number">1.0</span>;</div><div class="line">      laser_point.point.y = <span class="number">0.2</span>;</div><div class="line">      laser_point.point.z = <span class="number">0.0</span>;</div><div class="line"> </div><div class="line">      <span class="comment">//我们已经有了从“base_laser”到“base_link”变换的点数据。</span></div><div class="line">      <span class="comment">//进一步，我们通过TransformListener对象，</span></div><div class="line">      <span class="comment">//调用transformPoint(),填充三个参数来进行数据变换。</span></div><div class="line">      <span class="comment">//第1个参数，代表我们想要变换的目标坐标系的名字。</span></div><div class="line">      <span class="comment">//第2个参数填充需要变换的原始坐标系的点对象，</span></div><div class="line">      <span class="comment">//第3个参数填充，目标坐标系的点对象。</span></div><div class="line">      <span class="comment">//所以，在函数调用后，base_point里存储的信息就是变换后的点坐标。 </span></div><div class="line">      try&#123;</div><div class="line"><span class="symbol">          geometry_msgs:</span>:PointStamped base_point;</div><div class="line">          listener.transformPoint(<span class="string">"base_link"</span>, laser_point, base_point);</div><div class="line"> </div><div class="line">          ROS_INFO(<span class="string">"base_laser: (%.2f, %.2f. %.2f) -----&gt; base_link: (%.2f, %.2f, %.2f) at time %.2f"</span>,</div><div class="line">          laser_point.point.x, laser_point.point.y, laser_point.point.z,</div><div class="line">          base_point.point.x, base_point.point.y, base_point.point.z, base_point.header.stamp.toSec());</div><div class="line">      &#125;</div><div class="line">     <span class="comment">//显示异常信息</span></div><div class="line">      catch(<span class="symbol">tf::</span>TransformException&amp; ex)&#123;</div><div class="line">          ROS_ERROR(<span class="string">"Received an exception trying to transform a point from \"base_laser\" to \"base_link\": %s"</span>, ex.what());</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line"> int main(int argc, char** argv)&#123;</div><div class="line"><span class="symbol">      ros:</span>:init(argc, argv, <span class="string">"robot_tf_listener"</span>);</div><div class="line"><span class="symbol">      ros:</span>:NodeHandle n;</div><div class="line">      <span class="comment">//一个TransformListener目标会自动的订阅ROS系统中的变换消息主题，</span></div><div class="line">      <span class="comment">//同时管理所有的该通道上的变换数据</span></div><div class="line"><span class="symbol">      tf:</span>:TransformListener listener(<span class="symbol">ros::</span>Duration(<span class="number">10</span>));</div><div class="line"> </div><div class="line">      <span class="comment">//we'll transform a point once every second</span></div><div class="line"><span class="symbol">      ros:</span>:Timer timer = n.createTimer(<span class="symbol">ros::</span>Duration(<span class="number">1.0</span>), <span class="symbol">boost::</span>bind(&amp;transformPoint, <span class="symbol">boost::</span>ref(listener)));</div><div class="line"><span class="symbol"> </span></div><div class="line">      ros::spin();</div><div class="line"> </div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h1 id="编译测试"><a href="#编译测试" class="headerlink" title="编译测试"></a>编译测试</h1><p>在编译之前需要修改 CMakeLists.txt 文件，添加构建依赖项<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(tf_broadcaster src/tf_broadcaster.cpp)</span></span></div><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(tf_listener src/tf_listener.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(tf_listener $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p>编译:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div><div class="line"><span class="meta">$</span><span class="bash"> rospack profile</span></div></pre></td></tr></table></figure></p>
<p>开启三个 terminal 分别运行：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun robot_setup_tf tf_broadcaster</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun robot_setup_tf tf_listener</span></div></pre></td></tr></table></figure></p>
<p>在 tf_listener 运行后可以看到如下输出，每隔1秒发布一次：</p>
<p><img src="/2017/06/08/ros-primary-tutorial-14/tf.png" alt=""></p>
<p>参考 <a href="http://wiki.ros.org/cn/navigation/Tutorials/RobotSetup/TF" target="_blank" rel="external">RobotSetup/TF</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Transform-Configuration-变换配置&quot;&gt;&lt;a href=&quot;#Transform-Configuration-变换配置&quot; class=&quot;headerlink&quot; title=&quot;Transform Configuration 变换配置&quot;&gt;&lt;/a&gt;Transform Configuration 变换配置&lt;/h1&gt;&lt;p&gt;变换树是一种偏移，体现了不同坐标系之间的变换和旋转。假设有一个简单的机器人，只有移动底座以及一个位于底座上方的激光扫描仪。因此定义两个坐标系，一个对应激光扫描仪的中心点的坐标系，一个对应于移动底座中心点的坐标系，两个坐标系分别取名为 &lt;em&gt;base_laser&lt;/em&gt; 和 &lt;em&gt;base_link&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/06/08/ros-primary-tutorial-14/simple_robot.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS tf" scheme="http://stevenshi.me/tags/ROS-tf/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级十三 理解ROS坐标转换下</title>
    <link href="http://stevenshi.me/2017/06/07/ros-primary-tutorial-13/"/>
    <id>http://stevenshi.me/2017/06/07/ros-primary-tutorial-13/</id>
    <published>2017-06-07T05:44:30.000Z</published>
    <updated>2017-06-13T05:52:15.456Z</updated>
    
    <content type="html"><![CDATA[<p>本篇继续学习 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a>。通过编写一个简单的 tf broadcaster 以及 tf listener 来更进一步的理解坐标变换。本篇涉及到的代码已上传到 <a href="https://github.com/StevenShiChina/learning_tf" target="_blank" rel="external">mygithub</a>。</p>
<h1 id="tf-broadcaster"><a href="#tf-broadcaster" class="headerlink" title="tf broadcaster"></a>tf broadcaster</h1><p>tf broadcaster 用于广播坐标变换，任何节点都可以监听该变换。先创建一个程序包，名字随心，这里我们命名为 <em>learning_tf</em>,包的依赖项为 <em>roscpp rospy turtlesim</em><br><a id="more"></a><br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/src/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg learning_tf roscpp rospy turtlesim</span></div></pre></td></tr></table></figure></p>
<p>为了便于使用 <em>roscd</em> 我们先编译一下这个程序包:</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div><div class="line"><span class="meta">$</span><span class="bash"> rospack profile</span></div></pre></td></tr></table></figure>
<p>此时使用 roscd 输入lear 再按 TAB 即可出现 <em>learning_tf/</em>。进入 <em>learning_tf/src</em> 目录下，新建文件 <em>turtle_tf_broadcaster.cpp</em> 添加如下代码：</p>
   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_broadcaster.h&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;turtlesim/Pose.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">string</span> turtle_name;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">poseCallback</span><span class="params">(<span class="keyword">const</span> turtlesim::PoseConstPtr&amp; msg)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="comment">//创建一个 TransformBroadcaster 对象用于发布坐标变换</span></div><div class="line">  <span class="keyword">static</span> tf::TransformBroadcaster br;</div><div class="line">  </div><div class="line">  <span class="comment">//创建Transform 对象并将2D的坐标转换为3D坐标系</span></div><div class="line">  tf::Transform transform;</div><div class="line">  transform.setOrigin( tf::Vector3(msg-&gt;x, msg-&gt;y, <span class="number">0.0</span>) );<span class="comment">//获取 x y 坐标，不需要Z坐标 </span></div><div class="line"> </div><div class="line">  tf::Quaternion q;</div><div class="line">  q.setRPY(<span class="number">0</span>, <span class="number">0</span>, msg-&gt;theta);<span class="comment">// x y轴旋转为0因为在地面运动只能绕Z轴的旋转</span></div><div class="line">  transform.setRotation(q);<span class="comment">//</span></div><div class="line">  <span class="comment">//发布坐标变换 ros::Time::now()为转换携带的时间戳 传递父节点的名字 world 子节点为turtle_name</span></div><div class="line">  br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), <span class="string">"world"</span>, turtle_name));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line">&#123;</div><div class="line">  ros::init(argc, argv, <span class="string">"my_tf_broadcaster"</span>);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>)&#123;ROS_ERROR(<span class="string">"need turtle name as argument"</span>); <span class="keyword">return</span> <span class="number">-1</span>;&#125;;</div><div class="line"> </div><div class="line">  turtle_name = argv[<span class="number">1</span>];</div><div class="line"></div><div class="line">  ros::NodeHandle node;</div><div class="line"> <span class="comment">//订阅 turtle_name 的 turtleX/pose 话题，当turtle位置改变时调用回调函数 poseCallback</span></div><div class="line">  ros::Subscriber sub = node.subscribe(turtle_name+<span class="string">"/pose"</span>, <span class="number">10</span>, &amp;poseCallback);</div><div class="line"></div><div class="line">  ros::spin();</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<p>代码的整个流程为：<br>1 订阅 turtleX/pose 位置话题<br>2 发布坐标变换到tf树<br>修改CMakeLists.txt:</p>
   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(turtle_tf_broadcaster src/turtle_tf_broadcaster.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(turtle_tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure>
<p>编译：</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure>
<p>编译报错：</p>
   <figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Linking CXX executable /home/steven/catkin_ws/devel/<span class="keyword">lib</span>/learning_tf/turtle_tf_broadcaster</div><div class="line">CMakeFiles/turtle_tf_broadcaster.dir/src/turtle_tf_broadcaster.cpp.o: <span class="keyword">In</span> <span class="keyword">function</span> `poseCallback(boost::shared_ptr&lt;turtlesim::Pose_&lt;std::allocator&lt;void&gt; &gt; <span class="keyword">const</span>&gt; <span class="keyword">const</span>&amp;)<span class="comment">':</span></div><div class="line">turtle_tf_broadcaster.cpp:(.<span class="keyword">text</span>+<span class="number">0x39</span>): undefined reference <span class="keyword">to</span> `tf::TransformBroadcaster::TransformBroadcaster()<span class="comment">'</span></div><div class="line">turtle_tf_broadcaster.cpp:(.<span class="keyword">text</span>+<span class="number">0x1a3</span>): undefined reference <span class="keyword">to</span> `tf::TransformBroadcaster::sendTransform(tf::StampedTransform <span class="keyword">const</span>&amp;)<span class="comment">'</span></div><div class="line">collect2: ld returned <span class="number">1</span> <span class="keyword">exit</span> status</div><div class="line">make[<span class="number">2</span>]: *** [/home/steven/catkin_ws/devel/<span class="keyword">lib</span>/learning_tf/turtle_tf_broadcaster] <span class="keyword">Error</span> <span class="number">1</span></div><div class="line">make[<span class="number">1</span>]: *** [learning_tf/CMakeFiles/turtle_tf_broadcaster.dir/all] <span class="keyword">Error</span> <span class="number">2</span></div><div class="line">make: *** [all] <span class="keyword">Error</span> <span class="number">2</span></div><div class="line">Invoking <span class="string">"make -j1 -l1"</span> failed</div></pre></td></tr></table></figure>
<p>忘记了在 CMakeLists.txt 文件需要添加 tf 包的依赖：</p>
   <figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">find_package(<span class="name">catkin</span> REQUIRED COMPONENTS</div><div class="line">    roscpp</div><div class="line">    rospy</div><div class="line">    turtlesim</div><div class="line">    tf</div><div class="line">  )</div></pre></td></tr></table></figure>
<p>编译完成后在 ~/catkin_ws/devel/lib/learning_tf/ 目录下会看到编译好的可执行文件 turtle_tf_broadcaster<br>接下来创建一个 launch 文件：</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> mkdir -p ~/catkin_ws/src/learning_tf/launch</span></div><div class="line"><span class="meta">$</span><span class="bash"> roscd learning_tf/launch/</span></div><div class="line"><span class="meta">$</span><span class="bash"> touch start_demo.launch</span></div></pre></td></tr></table></figure>
<p>输入以下内容：</p>
   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Turtlesim Node--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"turtlesim"</span> <span class="attr">type</span>=<span class="string">"turtlesim_node"</span> <span class="attr">name</span>=<span class="string">"sim"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"turtlesim"</span> <span class="attr">type</span>=<span class="string">"turtle_teleop_key"</span> <span class="attr">name</span>=<span class="string">"teleop"</span> <span class="attr">output</span>=<span class="string">"screen"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Axes --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"scale_linear"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">type</span>=<span class="string">"double"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"scale_angular"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">type</span>=<span class="string">"double"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"learning_tf"</span> <span class="attr">type</span>=<span class="string">"turtle_tf_broadcaster"</span></span></div><div class="line">          <span class="attr">args</span>=<span class="string">"/turtle1"</span> <span class="attr">name</span>=<span class="string">"turtle1_tf_broadcaster"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"learning_tf"</span> <span class="attr">type</span>=<span class="string">"turtle_tf_broadcaster"</span></span></div><div class="line">          <span class="attr">args</span>=<span class="string">"/turtle2"</span> <span class="attr">name</span>=<span class="string">"turtle2_tf_broadcaster"</span> /&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">launch</span>&gt;</span></div></pre></td></tr></table></figure>
<p>launch文件启动了4个节点，分别是：<br> 1 turtlesim 包中的类型为 turtlesim_node 名称为 sim 的节点；<br> 2 turtlesim 包中的类型为 turtle_teleop_key 名称为 teleop 的节点；<br> 3 learning_tf 包中类型为 turtle_tf_broadcaster 名称为 turtle1_tf_broadcaster 的节点；<br> 4 learning_tf 包中类型为 turtle_tf_broadcaster 名称为 turtle2_tf_broadcaster 的节点。</p>
<h1 id="tf-listener"><a href="#tf-listener" class="headerlink" title="tf listener"></a>tf listener</h1><p>前面编写了broadcaster 用于发布 turtle 的坐标变换到 tf树，下面来编写 listener 来监听坐标的变换。在 learning_tf/src 目录下新建文件 turtle_tf_listener.cpp 添加如下代码:</p>
   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_listener.h&gt; //接收转换</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;geometry_msgs/Twist.h&gt; //消息</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;turtlesim/Spawn.h&gt; //再生</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line"></div><div class="line">    ros::init(argc, argv, <span class="string">"my_tf_listener"</span>);<span class="comment">//节点名称</span></div><div class="line"> </div><div class="line">    ros::NodeHandle node;<span class="comment">//节点</span></div><div class="line"></div><div class="line">    <span class="comment">//再生服务</span></div><div class="line">    ros::service::waitForService(<span class="string">"spawn"</span>);</div><div class="line">    ros::ServiceClient add_turtle =</div><div class="line">     node.serviceClient&lt;turtlesim::Spawn&gt;(<span class="string">"spawn"</span>);</div><div class="line">    turtlesim::Spawn srv;</div><div class="line">    add_turtle.call(srv);</div><div class="line"></div><div class="line">    <span class="comment">//通过话题 turtle2/cmd_vel 发布 geometry_msgs::Twist 类型消息</span></div><div class="line">    ros::Publisher turtle_vel = </div><div class="line">    node.advertise&lt;geometry_msgs::Twist&gt;(<span class="string">"turtle2/cmd_vel"</span>, <span class="number">10</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//创建接收对象，一旦TransformListener创建，就开始接收tf转换消息</span></div><div class="line">    tf::TransformListener listener; </div><div class="line"></div><div class="line">    ros::<span class="function">Rate <span class="title">rate</span><span class="params">(<span class="number">10.0</span>)</span></span>;</div><div class="line">    <span class="keyword">while</span> (node.ok())&#123;</div><div class="line">      tf::StampedTransform transform;</div><div class="line">      <span class="comment">//from turtle2 到 trutle1 即当 turtle2移动时,turtle1跟随 turtle2 运动</span></div><div class="line">      <span class="keyword">try</span>&#123;</div><div class="line">        listener.lookupTransform(<span class="string">"/turtle2"</span>, <span class="string">"/turtle1"</span>,</div><div class="line">                                 ros::Time(<span class="number">0</span>), transform);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (tf::TransformException &amp;ex) &#123;</div><div class="line">        ROS_ERROR(<span class="string">"%s"</span>,ex.what());</div><div class="line">        ros::Duration(<span class="number">1.0</span>).sleep();</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 计算新的角速度和线速度</span></div><div class="line">      geometry_msgs::Twist vel_msg;</div><div class="line">      vel_msg.angular.z = <span class="number">4.0</span> * <span class="built_in">atan2</span>(transform.getOrigin().y(),</div><div class="line">                                      transform.getOrigin().x());</div><div class="line">      vel_msg.linear.x = <span class="number">0.5</span> * <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(transform.getOrigin().x(), <span class="number">2</span>) +</div><div class="line">                                    <span class="built_in">pow</span>(transform.getOrigin().y(), <span class="number">2</span>));</div><div class="line">      turtle_vel.publish(vel_msg);</div><div class="line"> </div><div class="line">      rate.sleep();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
<p>在CMakeLists.txt中添加依赖项：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(turtle_tf_listener src/turtle_tf_listener.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(turtle_tf_listener $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p>编译如果提示错误：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">turtle_tf_listener<span class="selector-class">.cpp</span>:<span class="number">3</span>:<span class="number">32</span>: fatal error: </div><div class="line">turtlesim/Velocity<span class="selector-class">.h</span>: No such file or directory compilation terminated.</div></pre></td></tr></table></figure></p>
<p>则文件使用的为之前版本，应该选择下载 hydro 版本的 参考 <a href="http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20listener%20%28C%2B%2B%29" target="_blank" rel="external">Writing listener C++</a><br>之后修改start_demo.launch 将listener节点添加进去：<br>   <figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;node pkg=<span class="string">"learning_tf"</span> <span class="class"><span class="keyword">type</span></span>=<span class="string">"turtle_tf_listener"</span> name=<span class="string">"listener"</span> /&gt;</div></pre></td></tr></table></figure></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>停止之前的launch 文件，然后启动 start_demo.launch：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roslaunch learning_tf start_demo.launch</span></div></pre></td></tr></table></figure></p>
<p>可以通过以下命令查看坐标广播信息：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosrun tf tf_<span class="keyword">echo</span> <span class="string">/world</span> <span class="string">/turtle1</span></div></pre></td></tr></table></figure></p>
<p>错误</p>
<p>运行 start_demo.launch 时提示错误<em> [ERROR] [1496887441.589043649]: “turtle2” passed to lookupTransform argument target_frame does not exist. </em>  但是当控制一个 turtle 移动时另外一个也可以跟随移动，参照 <a href="http://answers.ros.org/question/148121/something-wrong-with-tf-tutorial/" target="_blank" rel="external">http://answers.ros.org/question/148121/something-wrong-with-tf-tutorial/</a> 的修改，在函数 listener.lookupTransform 的前面添加 listener.waitForTransform(“/turtle2”, “/turtle1”, ros::Time(0), ros::Duration(3.0));然后重新编译，再次运行错误消失。运行 rviz 可以看到两个 turtle 之间的运动坐标变换<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rviz rviz <span class="_">-d</span> `rospack find turtle_tf`/rviz/turtle_rviz.rviz</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/06/07/ros-primary-tutorial-13/startdemo.jpg" alt=""></p>
<h1 id="adding-a-frame"><a href="#adding-a-frame" class="headerlink" title="adding a frame"></a>adding a frame</h1><p>通常情况下，系统中有一个全局坐标系 world ，当添加一个激光扫描仪，或者再添加一个双目摄像头，那么此时就需要在系统中添加两个坐标参考系，利用 tf 让系统帮我们将激光扫描仪的数据或双目摄像头的数据转换到全局坐标系中去，因此添加一个坐标系是非常必要的。<br>tf 以树形结构维护和保存多个参考系坐标，在这个结构中不能有闭环产生，这就意味着，坐标参考系树形结构中只能有一个父参考系 parent,它可以有多个子参考坐标系 child。下面图中 tf 树形结构中有三个参考坐标系，world，turtle1 和 turtle2。 并且 turtle1 和 trutle2 都是 world 的子参考坐标系，如果再添加一个新的坐标参考系 carrot1 它必须是以上三个参考坐标系的子参考系。</p>
<p><img src="/2017/06/07/ros-primary-tutorial-13/tree.png" alt=""></p>
<p>接着前面，我们在 turtle1 基础上添加一个参考坐标系 carrot1, 它的父参考系是 turtle1。在 learning_tf/src 目录下建立文件 frame_tf_broadcaster.cpp，添加以下代码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_broadcaster.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line">&#123;</div><div class="line">	ros::init(argc, argv, <span class="string">"my_tf_broadcaster"</span>);</div><div class="line">	ros::NodeHandle node;</div><div class="line"></div><div class="line">	tf::TransformBroadcaster br;</div><div class="line">	tf::Transform transform;</div><div class="line">  </div><div class="line">	ros::<span class="function">Rate <span class="title">rate</span><span class="params">(<span class="number">10.0</span>)</span></span>;</div><div class="line">	<span class="keyword">while</span> (node.ok())&#123;</div><div class="line">		transform.setOrigin( tf::Vector3(<span class="number">0.0</span>, <span class="number">2.0</span>, <span class="number">0.0</span>) );</div><div class="line">		transform.setRotation( tf::Quaternion(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>) );</div><div class="line">		br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), <span class="string">"turtle1"</span>, <span class="string">"carrot1"</span>));</div><div class="line">		rate.sleep();</div><div class="line">     &#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>父参考系 turtle1 ，子参考系 carrot1 ，carrot1 在 x y z 方向上与 turtle1 的偏移为 (x:0.0,y:2.0,z:0.0)。修改 CMakeLists.txt 文件添加依赖：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(frame_tf_broadcaster src/frame_tf_broadcaster.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(frame_tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure></p>
<p>在 ~/catkin_ws/devel/lib/learning_tf/ 文件夹下会生成可执行的节点文件 frame_tf_broadcaster ，我们将它的启动放到 start_demo.launch 文件中，添加以下内容：<br>   <figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;node pkg=<span class="string">"learning_tf"</span> <span class="class"><span class="keyword">type</span></span>=<span class="string">"frame_tf_broadcaster"</span> </div><div class="line"> name=<span class="string">"broadcaster_frame"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>运行测试看下效果，roslaunch 会一并执行 roscore 所以不用再提前运行 roscore:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roslaunch learning_tf start_demo.launch</span></div></pre></td></tr></table></figure></p>
<p>我们发现添加了这个坐标系，并没有对之前的 turtle 产生影响，这就恰恰说明了添加一个新的参考坐标系不会影响以前固有的参考坐标系。我们的监听节点依然使用的是之前定义的参考坐标系。现在，我们打开前面编写的监听节点源码 learning_tf/src/turtle_tf_listener.cpp, 我们将 /turtle1 替换成 /carrot1 ：<br>   <figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">listener</span><span class="selector-class">.waitForTransform</span>(<span class="string">"/turtle2"</span>, <span class="string">"/carrot1"</span>,<span class="attribute">ros</span>::Time(<span class="number">0</span>), <span class="attribute">ros</span>::Duration(<span class="number">3.0</span>));</div><div class="line"><span class="selector-tag">listener</span><span class="selector-class">.lookupTransform</span>(<span class="string">"/turtle2"</span>, <span class="string">"/carrot1"</span>,<span class="attribute">ros</span>::Time(<span class="number">0</span>), transform);</div></pre></td></tr></table></figure></p>
<p>再次编译并执行 start_demo.launch，我们发现，当移动 turtle1 时， turtle2 在跟随 turtle1 的同时总是保持一定的距离，这个距离就是 carrot1 参考系相对于 turtle1 的偏移，因此 turtle2 跟随的是 carrot1 虽然我们没有定义这个模型，但依然能感觉到这个随动关系:</p>
<p><img src="/2017/06/07/ros-primary-tutorial-13/carrot1.jpg" alt=""></p>
<h1 id="moving-frame"><a href="#moving-frame" class="headerlink" title="moving frame"></a>moving frame</h1><p>建立移动参考系，让两个参考系的关系不再是固定的而是随着时间变化的，因此可以简单的将固定参考系的关系修改成随着时间而变化的，修改 frame_tf_broadcaster.cpp 文件：<br>   <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span><span class="selector-class">.setOrigin</span>( <span class="selector-tag">tf</span><span class="selector-pseudo">::Vector3(2.0</span>*<span class="selector-tag">sin</span>(<span class="selector-tag">ros</span><span class="selector-pseudo">::Time</span><span class="selector-pseudo">::now().toSec())</span>, 2<span class="selector-class">.0</span>*<span class="selector-tag">cos</span>(<span class="selector-tag">ros</span><span class="selector-pseudo">::Time</span><span class="selector-pseudo">::now().toSec())</span>, 0<span class="selector-class">.0</span>) );</div><div class="line"><span class="selector-tag">transform</span><span class="selector-class">.setRotation</span>( <span class="selector-tag">tf</span><span class="selector-pseudo">::Quaternion(0</span>, 0, 0, 1) )</div></pre></td></tr></table></figure></p>
<p>以上变换将 carrot1 相对于父参考系 turtle1 的坐标变换修改成时间的正余弦函数，我们再次编译并重新运行一下看效果：<br><img src="/2017/06/07/ros-primary-tutorial-13/moving.jpg" alt=""><br>turtle2 一直绕着 turtle1 做画圆运动，因为上面的函数是三角函数 且符合 x2 + y2 = r2 关系。<br>参考:<a href="http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20broadcaster%20%28C%2B%2B%29" target="_blank" rel="external">Writing a tf broadcaster C++</a>   /  <a href="http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20listener%20%28C%2B%2B%29" target="_blank" rel="external">Writing a tf listener C++</a> / <a href="http://wiki.ros.org/tf/Tutorials/Adding%20a%20frame%20%28C%2B%2B%29" target="_blank" rel="external">Adding a frame</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇继续学习 &lt;a href=&quot;http://wiki.ros.org/tf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tf&lt;/a&gt;。通过编写一个简单的 tf broadcaster 以及 tf listener 来更进一步的理解坐标变换。本篇涉及到的代码已上传到 &lt;a href=&quot;https://github.com/StevenShiChina/learning_tf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mygithub&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;tf-broadcaster&quot;&gt;&lt;a href=&quot;#tf-broadcaster&quot; class=&quot;headerlink&quot; title=&quot;tf broadcaster&quot;&gt;&lt;/a&gt;tf broadcaster&lt;/h1&gt;&lt;p&gt;tf broadcaster 用于广播坐标变换，任何节点都可以监听该变换。先创建一个程序包，名字随心，这里我们命名为 &lt;em&gt;learning_tf&lt;/em&gt;,包的依赖项为 &lt;em&gt;roscpp rospy turtlesim&lt;/em&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROStf" scheme="http://stevenshi.me/tags/ROStf/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级十二 理解ROS坐标转换上</title>
    <link href="http://stevenshi.me/2017/06/07/ros-primary-tutorial-12/"/>
    <id>http://stevenshi.me/2017/06/07/ros-primary-tutorial-12/</id>
    <published>2017-06-07T02:30:19.000Z</published>
    <updated>2017-06-13T09:01:20.229Z</updated>
    
    <content type="html"><![CDATA[<p>一个完整的机器人有腿(或轮子)、有眼睛、有手、有大脑，大脑控制机器人去协调的动作。问题来了，大脑是如何知道腿在哪儿？眼睛在哪儿？手臂在哪儿？要帮主人把房门打开，如何控制手臂去开门？这些都涉及到一个关键的问题-机器人的坐标变换。本篇学习 ROS 中的 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 。<br><a id="more"></a></p>
<h1 id="tf-初理解"><a href="#tf-初理解" class="headerlink" title="tf 初理解"></a>tf 初理解</h1><p><img src="/2017/06/07/ros-primary-tutorial-12/tf.png" alt=""><br>tf 是 ROS 中的坐标变换系统，它可以跟踪多个参考坐标系的坐标，使用树形数据结构根据时间缓冲来维护这些坐标及其坐标关系，帮助我们在任意时间完成两个或多个参考系中的坐标变换。 tf 以分布式形式存在，所有节点都可以使用这些变换数据，节点可以监听 tf 变换，接收系统中发布的所有参考坐标系，并查询需要的参考坐标系；节点可以广播 tf 变换，向系统中广播参考系坐标关系，每个节点的参考坐标广播可以直接插入 tf 树中告知系统。</p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>通过一个实例来更好的理解  <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a>，参考 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">官网</a>。<br>启动一个demo:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roslaunch turtle_tf turtle_tf_demo.launch</span></div></pre></td></tr></table></figure></p>
<p>此时会看到有两个 turtle 同时出现，将光标移动到 terminal 以便于用键盘的方向键来控制其中一个 turtle 的移动，可以看到当一个移动时另外一个一直做跟随运动：<br><img src="/2017/06/07/ros-primary-tutorial-12/follow.jpg" alt=""></p>
<p>该例子使用 tf 库创建的三个坐标系，一个是全局坐标系，一个是 turtle1 坐标系，另一个是 turtle2 坐标系。它使用 tf 广播发布 turtle 的坐标，另外一个去监听这个坐标，并计算它们之间的位置差，从而移动一个去跟随另一个的位置。</p>
<h1 id="tf-工具使用"><a href="#tf-工具使用" class="headerlink" title="tf 工具使用"></a>tf 工具使用</h1><p><a href="http://wiki.ros.org/tf#view_frames" target="_blank" rel="external">view_frames</a>：</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun tf view_frames</span></div></pre></td></tr></table></figure>
<p><a href="http://wiki.ros.org/tf#view_frames" target="_blank" rel="external">view_frames</a> 可以以PDF的形式创建当前坐标广播系统树，命令输出如下：<br>   <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Listening <span class="built_in">to</span> /tf <span class="keyword">for</span> <span class="number">5.000000</span> <span class="built_in">seconds</span></div><div class="line">Done Listening</div><div class="line">dot - graphviz <span class="built_in">version</span> <span class="number">2.36</span><span class="number">.0</span> (<span class="number">20140111.2315</span>)</div><div class="line"></div><div class="line">Detected dot <span class="built_in">version</span> <span class="number">2.36</span></div><div class="line">frames.pdf generated</div></pre></td></tr></table></figure></p>
<p>它会在当前目录下生成 frames.pdf 文件，可以使用如下命令查看：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> evince frames.pdf</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/06/07/ros-primary-tutorial-12/pdf.jpg" alt=""><br>从图中可以看出，系统存在三个参考坐标系，world 为父坐标系即全局坐标系，另外两个也都有自己的坐标系，信息中还包括发送频率、缓存长度等信息。</p>
<p><a href="http://wiki.ros.org/rqt_tf_tree" target="_blank" rel="external">rqt_tf_tree</a>:</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rqt_tf_tree rqt_tf_tree</span></div></pre></td></tr></table></figure>
<p><a href="http://wiki.ros.org/rqt_tf_tree" target="_blank" rel="external">rqt_tf_tree</a> 是一个可视化的实时坐标树查看工具，可以随时点击刷新按钮来实时的查看坐标广播树。<img src="/2017/06/07/ros-primary-tutorial-12/runtime.jpg" alt=""></p>
<p><a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf_echo</a>:<br>使用：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosrun tf tf_echo <span class="string">[reference_frame]</span> <span class="string">[target_frame]</span></div></pre></td></tr></table></figure></p>
<p>如何从 turtle1 得到 turtle2 的坐标:<br><img src="/2017/06/07/ros-primary-tutorial-12/matrix.png" alt=""></p>
<p>该命令输出指定的坐标变换关系，如：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun tf tf_echo turtle1 turtle2</span></div></pre></td></tr></table></figure></p>
<p>输出一般为：<br>   <figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">At</span> <span class="selector-tag">time</span> <span class="selector-tag">1496812263</span><span class="selector-class">.516</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Translation</span>: <span class="selector-attr">[0.000, 0.000, 0.000]</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Rotation</span>: <span class="selector-tag">in</span> <span class="selector-tag">Quaternion</span> <span class="selector-attr">[0.000, 0.000, 0.707, 0.707]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (radian) <span class="selector-attr">[0.000, -0.000, 1.571]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (degree) <span class="selector-attr">[0.000, -0.000, 90.000]</span></div><div class="line"><span class="selector-tag">At</span> <span class="selector-tag">time</span> <span class="selector-tag">1496812264</span><span class="selector-class">.205</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Translation</span>: <span class="selector-attr">[0.000, 0.000, 0.000]</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Rotation</span>: <span class="selector-tag">in</span> <span class="selector-tag">Quaternion</span> <span class="selector-attr">[0.000, 0.000, 0.707, 0.707]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (radian) <span class="selector-attr">[0.000, -0.000, 1.571]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (degree) <span class="selector-attr">[0.000, -0.000, 90.000]</span></div><div class="line"><span class="selector-tag">At</span> <span class="selector-tag">time</span> <span class="selector-tag">1496812265</span><span class="selector-class">.213</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Translation</span>: <span class="selector-attr">[0.000, 0.000, 0.000]</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Rotation</span>: <span class="selector-tag">in</span> <span class="selector-tag">Quaternion</span> <span class="selector-attr">[0.000, 0.000, 0.707, 0.707]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (radian) <span class="selector-attr">[0.000, -0.000, 1.571]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (degree) <span class="selector-attr">[0.000, -0.000, 90.000]</span></div><div class="line"><span class="selector-tag">At</span> <span class="selector-tag">time</span> <span class="selector-tag">1496812266</span><span class="selector-class">.205</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Translation</span>: <span class="selector-attr">[0.000, 0.000, 0.000]</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Rotation</span>: <span class="selector-tag">in</span> <span class="selector-tag">Quaternion</span> <span class="selector-attr">[0.000, 0.000, 0.707, 0.707]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (radian) <span class="selector-attr">[0.000, -0.000, 1.571]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (degree) <span class="selector-attr">[0.000, -0.000, 90.000]</span></div></pre></td></tr></table></figure></p>
<p>它是一直输出的，当控制移动 turtle1 时可以看到 turtle2 的坐标是怎么变化的，也就是 turtle2 的坐标是怎么根据 turtle1 的出来的。</p>
<h1 id="rviz"><a href="#rviz" class="headerlink" title="rviz"></a>rviz</h1><p>使用 <a href="">rviz</a> 可视化工具查看坐标系之间的坐标关系<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rviz rviz <span class="_">-d</span> `rospack find turtle_tf`/rviz/turtle_rviz.rviz</span></div></pre></td></tr></table></figure></p>
<p>当通过键盘控制 turtle 运动时，可以在 rviz 中观察到两个 turtle 的位置关系及坐标的变换：<br><img src="/2017/06/07/ros-primary-tutorial-12/rviz.jpg" alt=""><br>远处两个小的坐标系分别为 turtle1 和 turtle2 的坐标系，左下角为系统全局坐标系。本篇先到这里，下一篇进一步学习 tf 坐标变换。<br>参考 <a href="http://wiki.ros.org/tf/Tutorials/Introduction%20to%20tf" target="_blank" rel="external">Introduction tf</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个完整的机器人有腿(或轮子)、有眼睛、有手、有大脑，大脑控制机器人去协调的动作。问题来了，大脑是如何知道腿在哪儿？眼睛在哪儿？手臂在哪儿？要帮主人把房门打开，如何控制手臂去开门？这些都涉及到一个关键的问题-机器人的坐标变换。本篇学习 ROS 中的 &lt;a href=&quot;http://wiki.ros.org/tf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tf&lt;/a&gt; 。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROStf" scheme="http://stevenshi.me/tags/ROStf/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级十一 简单的ROS服务器和客户端</title>
    <link href="http://stevenshi.me/2017/06/01/ros-primary-tutorial-11/"/>
    <id>http://stevenshi.me/2017/06/01/ros-primary-tutorial-11/</id>
    <published>2017-06-01T02:17:27.000Z</published>
    <updated>2017-06-13T05:53:48.462Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习简单的 ROS 服务器和客户端的编写，服务器和客户端也是 ROS 网络中的一个节点，服务器可以提供某些服务，客户端发出请求，服务器做出响应。本篇涉及的代码已上传到 <a href="https://github.com/StevenShiChina/beginner_tutorials" target="_blank" rel="external">mygithub</a>。<br><a id="more"></a></p>
<h1 id="服务器节点"><a href="#服务器节点" class="headerlink" title="服务器节点"></a>服务器节点</h1><p>我们将创建一个 service 节点 (add_two_ints_server)，该节点接收两个整形数字，并返回它们的和。客户端可以给服务器发送请求。<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd beginner_tutorials/src</span></div></pre></td></tr></table></figure></p>
<p>新建 add_two_ints_server.cpp 在  beginner_tutorials/src 目录下，添加源码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">/*beginner_tutorials/AddTwoInts.h由编译系统自动根据我们先前创建的srv文件</span></div><div class="line"> 生成的对应该srv文件的头文件*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"beginner_tutorials/AddTwoInts.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">/*add函数提供两个int值求和的服务，int值从request里面获取，</span></div><div class="line"> 而返回数据装入response内，这些数据类型都定义在srv文件内部，</div><div class="line"> 函数返回一个boolean值*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(beginner_tutorials::AddTwoInts::Request  &amp;req,</span></span></div><div class="line">        beginner_tutorials::AddTwoInts::Response &amp;res)</div><div class="line">&#123;</div><div class="line"> res.sum = req.a + req.b;</div><div class="line"> ROS_INFO(<span class="string">"request: x=%ld, y=%ld"</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)req.a, (<span class="keyword">long</span> <span class="keyword">int</span>)req.b);</div><div class="line"> ROS_INFO(<span class="string">"sending back response: [%ld]"</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)res.sum);</div><div class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line"> ros::init(argc, argv, <span class="string">"add_two_ints_server"</span>);</div><div class="line"> ros::NodeHandle n;</div><div class="line"></div><div class="line"><span class="comment">/*service 服务建立*/</span></div><div class="line"> ros::ServiceServer service = n.advertiseService(<span class="string">"add_two_ints"</span>, add);</div><div class="line"> ROS_INFO(<span class="string">"Ready to add two ints."</span>);</div><div class="line"> ros::spin();</div><div class="line"></div><div class="line"> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="客户端节点"><a href="#客户端节点" class="headerlink" title="客户端节点"></a>客户端节点</h1><p>在目录 beginner_tutorials/src 下，新建 add_two_ints_client.cpp 文件添加如下源码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"beginner_tutorials/AddTwoInts.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">  ros::init(argc, argv, <span class="string">"add_two_ints_client"</span>);</div><div class="line">  <span class="keyword">if</span> (argc != <span class="number">3</span>)</div><div class="line">  &#123;</div><div class="line">    ROS_INFO(<span class="string">"usage: add_two_ints_client X Y"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ros::NodeHandle n;</div><div class="line">  </div><div class="line">  <span class="comment">/*为add_two_ints service创建一个client。ros::ServiceClient 对象待会用来调用service*/</span></div><div class="line"></div><div class="line">  ros::ServiceClient client = n.serviceClient&lt;beginner_tutorials::AddTwoInts&gt;(<span class="string">"add_two_ints"</span>);</div><div class="line"></div><div class="line"> <span class="comment">/*实例化一个由ROS编译系统自动生成的service类，并给其request成员赋值。</span></div><div class="line">  一个service类包含两个成员request和response。同时也包括两个类定义Request和Response*/</div><div class="line"></div><div class="line">  beginner_tutorials::AddTwoInts srv;</div><div class="line">  srv.request.a = atoll(argv[<span class="number">1</span>]);</div><div class="line">  srv.request.b = atoll(argv[<span class="number">2</span>]);</div><div class="line"></div><div class="line">  <span class="comment">/*调用service。由于service的调用是模态过程（调用的时候占用进程阻止其他代码的执行），</span></div><div class="line">  一旦调用完成，将返回调用结果。如果service调用成功，call()函数将返回true，</div><div class="line">  srv.response里面的值将是合法的值。如果调用失败，call()函数将返回false，</div><div class="line">  srv.response里面的值将是非法的*/</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (client.call(srv))</div><div class="line">  &#123;</div><div class="line">    ROS_INFO(<span class="string">"Sum: %ld"</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)srv.response.sum);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    ROS_ERROR(<span class="string">"Failed to call service add_two_ints"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="编译测试"><a href="#编译测试" class="headerlink" title="编译测试"></a>编译测试</h1><p>编译之前先修改下 CMakeLists.txt ,文件位于:<br> ~/catkin_ws/src/beginner_tutorials/CMakeLists.txt，参考 <a href="https://raw.github.com/ros/catkin_tutorials/master/create_package_srvclient/catkin_ws/src/beginner_tutorials/CMakeLists.txt" target="_blank" rel="external">CMakeLists.txt</a>:<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(add_two_ints_server src/add_two_ints_server.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(add_two_ints_server $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line"><span class="function"><span class="title">add_dependencies</span><span class="params">(add_two_ints_server beginner_tutorials_gencpp)</span></span></div><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(add_two_ints_client src/add_two_ints_client.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(add_two_ints_client $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line"><span class="function"><span class="title">add_dependencies</span><span class="params">(add_two_ints_client beginner_tutorials_gencpp)</span></span></div></pre></td></tr></table></figure></p>
<p>生成两个可执行程序 add_two_ints_server 和 add_two_ints_client ，这两个可执行程序默认被放在的 devel space 下的包目录下。可以直接调用可执行程序，或者使用 rosrun 命令去调用它们。它们不会被装在usr/bin目录下，如果希望在安装的时候可执行程序在PATH变量里面，需要设置一下install target，请参考：<a href="http://wiki.ros.org/catkin/CMakeLists.txt" target="_blank" rel="external">catkin/CMakeLists.txt</a><br>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure></p>
<p>编译完成后会在目录 ~/catkin_ws/devel/lib/beginner_tutorials 下生成两个可执行文件 add_two_ints_client  和 add_two_ints_server 现在可以运行并测试它们：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun beginner_tutorials add_two_ints_server</span></div></pre></td></tr></table></figure></p>
<p>如果运行时找不到程序包，运行一下 <em>rospack profile</em> 另外开启一个terminal 运行客户端:<br>   <figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosrun <span class="keyword">beginner_tutorials </span><span class="keyword">add_two_ints_client </span> <span class="number">188</span> <span class="number">102</span></div></pre></td></tr></table></figure></p>
<p>输出结果看图：<img src="/2017/06/01/ros-primary-tutorial-11/service.jpg" alt=""><br>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/WritingServiceClient%28c%2B%2B%29" target="_blank" rel="external">WritingServiceClient</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习简单的 ROS 服务器和客户端的编写，服务器和客户端也是 ROS 网络中的一个节点，服务器可以提供某些服务，客户端发出请求，服务器做出响应。本篇涉及的代码已上传到 &lt;a href=&quot;https://github.com/StevenShiChina/beginner_tutorials&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mygithub&lt;/a&gt;。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ServiceClient" scheme="http://stevenshi.me/tags/ServiceClient/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级十 简单的ROS发布器和订阅器</title>
    <link href="http://stevenshi.me/2017/05/31/ros-primary-tutorial-10/"/>
    <id>http://stevenshi.me/2017/05/31/ros-primary-tutorial-10/</id>
    <published>2017-05-31T07:27:20.000Z</published>
    <updated>2017-06-13T09:06:24.771Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习 ROS 中简单的发布器和订阅器节点的编写。节点就是 ROS 网络中的一个可执行文件，它既可以订阅消息也可以发布消息。本篇涉及的代码已上传至 <a href="https://github.com/StevenShiChina/beginner_tutorials" target="_blank" rel="external">mygithub</a>。<br><a id="more"></a></p>
<h1 id="发布器"><a href="#发布器" class="headerlink" title="发布器"></a>发布器</h1><p>我们将创建一个发布器节点 talker，它将不断的在 ROS 网络中广播消息。在 beginner_tutorials 目录下新建一个 src 目录<br>   <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>mkdir -p ~<span class="regexp">/catkin_ws/src</span><span class="regexp">/beginner_tutorials/src</span></div><div class="line"><span class="variable">$ </span>roscd beginner_tutorials/src/</div></pre></td></tr></table></figure></p>
<p>src 文件夹用于放置 beginner_tutorials 包的所有源代码，新建 talker.cpp 在 beginner_tutorials/src/ 目录下添加如下代码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span> <span class="comment">/*引用ROS系统头文件*/</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"std_msgs/String.h"</span> <span class="comment">/*消息类型定义*/</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="comment">/*初始化ROS talker节点名*</span></div><div class="line">  ros::init(argc, argv, "talker");</div><div class="line"></div><div class="line">  /*为该进程创建一个节点句柄 第一个创建的 NodeHandle 会为节点进行初始化，</div><div class="line">  最后一个销毁的 NodeHandle 则会释放该节点所占用的所有资源*/</div><div class="line">  </div><div class="line">  ros::NodeHandle n;</div><div class="line"></div><div class="line">  <span class="comment">/*告诉 master 我们将要在 command（话题名） 上发布 std_msgs/String 类型的消息。</span></div><div class="line">  这样 master 就会告诉所有订阅了 command 话题的节点，将要有数据发布。第二个参数是发布序列的大小。</div><div class="line">  如果我们发布的消息的频率太高，缓冲区中的消息在大于 1000 个的时候就会开始丢弃先前发布的消息。 </div><div class="line">  NodeHandle::advertise() 返回一个 ros::Publisher 对象,它有两个作用：</div><div class="line">  1) 它有一个 publish() 成员函数可以让你在topic上发布消息； </div><div class="line">  2) 如果消息类型不对,它会拒绝发布*/</div><div class="line">  </div><div class="line">  ros::Publisher chatter_pub = n.advertise&lt;std_msgs::String&gt;(<span class="string">"command"</span>, <span class="number">1000</span>);</div><div class="line">  </div><div class="line">  <span class="comment">/*ros::Rate 对象可以允许指定自循环的频率。它会追踪记录自上一次调用 Rate::sleep() </span></div><div class="line">  后时间的流逝，并休眠直到一个频率周期的时间,本例指定循环频率为10HZ */</div><div class="line"> </div><div class="line">  ros::<span class="function">Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line"> <span class="comment">/*roscpp 会默认生成一个 SIGINT 句柄，它负责处理 Ctrl-C 键盘操作——使得 ros::ok() 返回 false。 </span></div><div class="line">   如果下列条件之一发生，ros::ok() 返回false： </div><div class="line">   1  SIGINT 被触发 (Ctrl-C) </div><div class="line">   2  被另一同名节点踢出 ROS 网络 </div><div class="line">   3  ros::shutdown() 被程序的另一部分调用 </div><div class="line">   4 节点中的所有 ros::NodeHandles 都已经被销毁 </div><div class="line">   一旦 ros::ok() 返回 false, 所有的 ROS 调用都会失效*/</div><div class="line">  </div><div class="line">  <span class="keyword">while</span> (ros::ok())</div><div class="line">  &#123;</div><div class="line">    <span class="comment">/*我们使用一个由 msg file 文件产生的『消息自适应』类在 </span></div><div class="line">    ROS 网络中广播消息。现在我们使用标准的String消息，它只有一个数据成员 "data"。</div><div class="line">    当然，你也可以发布更复杂的消息类型。 */</div><div class="line">    </div><div class="line">    std_msgs::String msg;</div><div class="line">    </div><div class="line">    <span class="built_in">std</span>::<span class="built_in">stringstream</span> ss;</div><div class="line">    </div><div class="line">    ss &lt;&lt; <span class="string">"talker publish command "</span> &lt;&lt; count;</div><div class="line">    </div><div class="line">    msg.data = ss.str();</div><div class="line">    </div><div class="line">    <span class="comment">/*ROS_INFO 和其他类似的函数可以用来代替 printf/cout 等函数。</span></div><div class="line">    具体可以参考 http://wiki.ros.org/rosconsole，以获得更多信息*/</div><div class="line">    </div><div class="line">    ROS_INFO(<span class="string">"%s"</span>, msg.data.c_str()); </div><div class="line">    </div><div class="line">   <span class="comment">/*广播消息*/</span></div><div class="line">    </div><div class="line">    chatter_pub.publish(msg);</div><div class="line">    </div><div class="line">    <span class="comment">/*在这个例子中并不是一定要调用 ros::spinOnce()，因为我们不接受回调。</span></div><div class="line">     如果你的程序里包含其他回调函数，最好在这里加上 ros::spinOnce()这一语句，</div><div class="line">    否则你的回调函数就永远也不会被调用了*/</div><div class="line">   </div><div class="line">    ros::spinOnce();</div><div class="line">    </div><div class="line">    <span class="comment">/*休眠一段时间，使得发布频率为10HZ*/</span></div><div class="line">    loop_rate.sleep();</div><div class="line">   </div><div class="line">    ++count;</div><div class="line">   &#125;</div><div class="line"> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的内容可以总结为：<br> 1 初始化 ROS 系统<br> 2 在 ROS 网络内广播我们将要在 command 话题上发布 std_msgs/String 类型的消息<br> 3 以每秒 10 次的频率在 chatter 上发布消息<br>接下来编写一个订阅器用于接收该节点发布的消息。</p>
<h1 id="订阅器"><a href="#订阅器" class="headerlink" title="订阅器"></a>订阅器</h1><p>新建 listener.cpp 放置于 beginner_tutorials 的 src 目录下：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd beginner_tutorials/src/</span></div><div class="line"><span class="meta">$</span><span class="bash"> vim listener.cpp</span></div></pre></td></tr></table></figure></p>
<p>添加如下代码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"std_msgs/String.h"</span></span></div><div class="line"><span class="comment">/*定义回调函数*/</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">chatterCallback</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="comment">/*打印收到的信息，消息是以 boost shared_ptr 指针的形式传输，这就意味着你可以存储它而又不需要复制数据。 */</span></div><div class="line">  ROS_INFO(<span class="string">"listener got: [%s]"</span>, msg-&gt;data.c_str());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line"> <span class="comment">/*初始化节点，命名为listener*/</span></div><div class="line"> </div><div class="line"> ros::init(argc, argv, <span class="string">"listener"</span>);</div><div class="line"></div><div class="line"> <span class="comment">/*创建节点句柄*/</span></div><div class="line"></div><div class="line">  ros::NodeHandle n;</div><div class="line"> </div><div class="line"> <span class="comment">/*订阅主题,并注册回调函数，当有消息发布到这个话题时，ROS 就会调用 chatterCallback() 函数。</span></div><div class="line">  第二个参数是队列大小，以防我们处理消息的速度不够快，当缓存达到 1000 条消息后，再有新的消息到来就将开始丢弃先前接收的消息。 */</div><div class="line"> </div><div class="line"> ros::Subscriber sub = n.subscribe(<span class="string">"command"</span>, <span class="number">1000</span>, chatterCallback);</div><div class="line"> </div><div class="line"> <span class="comment">/*进入自循环，可以尽可能快的调用消息回调函数。如果没有消息到达，它不会占用很多 CPU，所以不用担心。一旦 ros::ok() 返回 false，</span></div><div class="line">  ros::spin() 就会立刻跳出自循环。这有可能是 ros::shutdown() 被调用，或者是用户按下了 Ctrl-C，</div><div class="line">  使得 master 告诉节点要终止运行。也有可能是节点被人为关闭的。 </div><div class="line">  还有其他的方法进行回调，但在这里我们不涉及。想要了解，可以参考 http://wiki.ros.org/roscpp_tutorials package</div><div class="line">  里的一些 demo 应用。需要更为详尽的信息，可以参考 http://wiki.ros.org/roscpp/Overview。 */</div><div class="line">  </div><div class="line">  ros::spin();</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码可以总结为：<br> 1 初始化ROS系统<br> 2 订阅 chatter 话题<br> 3 进入自循环，等待消息的到达<br> 4 当消息到达，调用 chatterCallback() 函数 </p>
<h1 id="编译测试"><a href="#编译测试" class="headerlink" title="编译测试"></a>编译测试</h1><p>编译测试之前需要修改 beginner_tutorials 中的 CMakeLists.txt 文件，添加以下内容：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">include_directories</span><span class="params">(include $&#123;catkin_INCLUDE_DIRS&#125;)</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(talker src/talker.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(talker $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(listener src/listener.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(listener $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p>这会生成两个可执行文件, talker 和 listener, 默认存储到 <a href="http://wiki.ros.org/catkin/workspaces#Development_.28Devel.29_Space" target="_blank" rel="external">devel space</a> 目录下,具体是在 ~/catkin_ws/devel/lib/beginner_tutorials 中。<br>为可执行文件添加对生成的消息文件的依赖：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_dependencies</span><span class="params">(talker beginner_tutorials_generate_messages_cpp)</span></span></div><div class="line"><span class="function"><span class="title">add_dependencies</span><span class="params">(listener beginner_tutorials_generate_messages_cpp)</span></span></div></pre></td></tr></table></figure></p>
<p>这样就可以确保自定义消息的头文件在被使用之前已经被生成。因为 catkin 把所有的 package 并行的编译，所以如果你要使用其他 catkin 工作空间中其他 package 的消息，同样也需要添加对他们各自生成的消息文件的依赖。<br>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ./devel/setup.bash</span></div></pre></td></tr></table></figure></p>
<p>测试时打开两个 terminal,一个运行 talker 节点，一个运行 listener 节点：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun beginner_tutorials talker // 启动 talker节点</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun beginner_tutorials listener // 启动 listener 节点</span></div></pre></td></tr></table></figure></p>
<p>效果：<br><img src="/2017/05/31/ros-primary-tutorial-10/test.jpg" alt=""><br>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29" target="_blank" rel="external">WritingPublisherSubscriber</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习 ROS 中简单的发布器和订阅器节点的编写。节点就是 ROS 网络中的一个可执行文件，它既可以订阅消息也可以发布消息。本篇涉及的代码已上传至 &lt;a href=&quot;https://github.com/StevenShiChina/beginner_tutorials&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mygithub&lt;/a&gt;。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="Publisher" scheme="http://stevenshi.me/tags/Publisher/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级九 创建ROS消息和ROS服务</title>
    <link href="http://stevenshi.me/2017/05/31/ros-primary-tutorial-9/"/>
    <id>http://stevenshi.me/2017/05/31/ros-primary-tutorial-9/</id>
    <published>2017-05-31T05:31:50.000Z</published>
    <updated>2017-06-13T05:54:21.768Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习如何创建并编译 ROS 消息和服务，以及 <a href="http://wiki.ros.org/rosmsg" target="_blank" rel="external">rosmsg</a> <a href="http://wiki.ros.org/srv" target="_blank" rel="external">rossrv</a> <a href="http://wiki.ros.org/rosbash#roscp" target="_blank" rel="external">roscp</a> <a href="http://wiki.ros.org/rosbash#rosed" target="_blank" rel="external">rosed</a> 等命令的使用。<br><a id="more"></a></p>
<h1 id="rosed"><a href="#rosed" class="headerlink" title="rosed"></a>rosed</h1><p><a href="http://wiki.ros.org/rosbash#rosed" target="_blank" rel="external">rosed</a> 是 <a href="http://wiki.ros.org/rosbash" target="_blank" rel="external">rosbash</a> 的一部分，相当于 ros + edit。利用 <a href="http://wiki.ros.org/rosbash#rosed" target="_blank" rel="external">rosed</a> 可以直接通过 package 名称来获取到待编辑的文件而无需指定该文件的存储路径，使用方法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosed <span class="string">[package_name]</span> <span class="string">[filename]</span></div></pre></td></tr></table></figure></p>
<p>示例直接打开 beginner_tutorials 中的 talker.cpp文件：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosed beginner_tutoris talker.cpp</span></div></pre></td></tr></table></figure></p>
<p><a href="http://wiki.ros.org/rosbash#rosed" target="_blank" rel="external">rosed</a> 默认的编辑器是 <a href="http://www.vim.org/" target="_blank" rel="external">vim</a> ，可以将以下命令添加到 ~/.bashrc 文件中来修改默认的编辑器：<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export EDITOR=<span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>vim</div></pre></td></tr></table></figure></p>
<p>或者修改为使用 <a href="https://www.gnu.org/software/emacs/" target="_blank" rel="external">emacs</a> 为默认编辑器：<br>   <figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> EDITOR=<span class="string">'emacs -nw'</span></div></pre></td></tr></table></figure></p>
<p>打开一个新的终端，看看定义的 EDITOR 是否正确:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$EDITOR</span></span></div></pre></td></tr></table></figure></p>
<h1 id="消息和服务介绍"><a href="#消息和服务介绍" class="headerlink" title="消息和服务介绍"></a>消息和服务介绍</h1><p>消息 msg 文件是一个描述 ROS 中所使用的消息类型的一个简单文本，它们会被用来生成不同语言的源代码。服务 srv 文件用于描述一项服务，它包含两部分，请求和响应。<br>msg 文件存放在 package 的 msg 目录下，srv 文件存放于package 的 srv 目录下。msg 文件每行声明一个数据类型和变量名，目前支持的数据类型有：<br>   <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">int8</span>, <span class="built_in">int16</span>, <span class="built_in">int32</span>, <span class="built_in">int64</span> (plus <span class="built_in">uint</span>*) </div><div class="line"><span class="built_in">float32</span>, <span class="built_in">float64</span> </div><div class="line"><span class="built_in">string</span> </div><div class="line">time, duration </div><div class="line">other msg files </div><div class="line">variable-length <span class="built_in">array</span>[] <span class="keyword">and</span> fixed-length <span class="built_in">array</span>[C]</div></pre></td></tr></table></figure></p>
<p>在 ROS 中有一个特殊的数据类型：Header，它含有时间戳和坐标系信息。在 msg 文件的第一行经常可以看到 Header header的声明。<br>msg 文件样例：<br>   <figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Header</span> <span class="built_in">header</span></div><div class="line"><span class="keyword">string</span> child_frame_id</div><div class="line">geometry_msgs/PoseWithCovariance pose</div><div class="line">geometry_msgs/TwistWithCovariance twist</div></pre></td></tr></table></figure></p>
<p>srv 文件分为请求和响应两部分，由’—‘分隔。样例：<br>   <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int64 A</div><div class="line"><span class="section">int64 B</span></div><div class="line">---</div><div class="line">int64 Sum</div></pre></td></tr></table></figure></p>
<p>A 和 B 是请求，sum 是响应。</p>
<h1 id="msg-的使用"><a href="#msg-的使用" class="headerlink" title="msg 的使用"></a>msg 的使用</h1><p>在之前创建的 beginner_tutorial 里定义新的消息：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd beginner_tutorials/</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir msg</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"int64 num"</span> &gt; msg/Num.msg</span></div></pre></td></tr></table></figure></p>
<p>上面是最简单的例子在.msg文件中只有一行数据。当然，也可以仿造上面的形式多增加几行以得到更为复杂的消息：<br>   <figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">string</span> first_name</div><div class="line"><span class="keyword">string</span> last_name</div><div class="line"><span class="keyword">uint8</span> age</div><div class="line"><span class="keyword">uint32</span> score</div></pre></td></tr></table></figure></p>
<p>接下来需要确保 msg 文件被转换成 C++,Python和其他语言的源代码，查看 package.xml：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosed beginner_tutorials  package.xml</span></div></pre></td></tr></table></figure></p>
<p>确保它包含以下两条语句：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>message_generation<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>message_runtime<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在构建的时候，我们只需要”message_generation”。然而，在运行的时候，我们只需要”message_runtime”。 打开 CMakeLists.txt 文件，利用 find_packag 函数，增加对 message_generation 的依赖，这样就可以生成消息了。 可以直接在 COMPONENTS 的列表里增加 message_generation ：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosed beginner_tutorials CMakeLists.txt</span></div></pre></td></tr></table></figure></p>
   <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// Do <span class="keyword">not</span> just <span class="built_in">add</span> this <span class="built_in">line</span> <span class="built_in">to</span> your CMakeLists.txt,  modify <span class="keyword">the</span> existing <span class="built_in">line</span></div><div class="line"> find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs message_generation)</div></pre></td></tr></table></figure>
<p>即使没有调用 find_package, 也可以编译通过。这是因为 catkin 把所有的 package 都整合在一起，因此，如果其他的 package 调用了 find_package，你的 package 的依赖就会是同样的配置。但是，在单独编译这个 package 时，忘记调用 find_package 会很容易出错。确保设置了运行依赖项：<br>   <figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">catkin_package(</div><div class="line">  ...</div><div class="line">  CATKIN_DEPENDS message_runtime ...</div><div class="line">  ...)</div></pre></td></tr></table></figure></p>
<p>找到如下代码块:<br>   <figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// add_message_files(</span></div><div class="line"><span class="comment">//  FILES</span></div><div class="line"><span class="comment">//  Message1.msg</span></div><div class="line"><span class="comment">//   Message2.msg</span></div><div class="line"><span class="comment">// )</span></div></pre></td></tr></table></figure></p>
<p>去掉注释符号，用前面定义的.msg文件替代Message*.msg<br>   <figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">add_message_files(</div><div class="line"> <span class="name">FILES</span></div><div class="line"> Num.msg</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>手动添加.msg文件后，我们要确保CMake知道在什么时候重新配置我们的project。 确保添加了如下代码：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">generate_messages</span><span class="params">()</span></span></div></pre></td></tr></table></figure></p>
<p>查看自定义的消息文件能否被 ROS 识别，使用方法：<br>   <figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosmsg show [<span class="keyword">message</span> <span class="keyword">type</span>]</div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rosmsg <span class="keyword">show</span> beginner_tutorials/<span class="keyword">Num</span> </div><div class="line">$ rosmsg <span class="keyword">show</span> <span class="keyword">Num</span> // 也可以省略掉 <span class="keyword">package</span> 名</div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int64</span> num</div><div class="line"><span class="keyword">string</span> first_name</div><div class="line"><span class="keyword">string</span> last_name</div><div class="line"><span class="keyword">uint8</span> age</div><div class="line"><span class="keyword">uint8</span> score</div></pre></td></tr></table></figure></p>
<h1 id="srv-的使用"><a href="#srv-的使用" class="headerlink" title="srv 的使用"></a>srv 的使用</h1><p>在 beginner_tutorials 中创建服务，我们从其他 ROS 包中拷贝一个 srv 文件：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd beginner_tutorials</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir srv</span></div><div class="line"><span class="meta">$</span><span class="bash"> roscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv</span></div></pre></td></tr></table></figure></p>
<p>确保 srv 文件被转换成C++ Python 和其他语言的源代码。CMakeLists.txt 文件中关于 message_generation 的配置对 msg 和 srv 都起作用：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Do not just add this line to your CMakeLists.txt, modify the existing line</span></div><div class="line"><span class="function"><span class="title">find_package</span><span class="params">(catkin REQUIRED COMPONENTS roscpp rospy std_msgs message_generation)</span></span></div></pre></td></tr></table></figure></p>
<p>修改 CMakeLists.txt 文件增加 srv 依赖项：<br>   <figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">add_service_files(</span></div><div class="line"> FILES</div><div class="line"> <span class="keyword">AddTwoInts.srv</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>查看服务能否被 ROS 识别，使用方法：<br>   <figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">rossrv</span> show &lt;service <span class="keyword">type</span>&gt;</div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rossrv show beginner_tutorials/AddTwoInts</span></div><div class="line"><span class="meta">$</span><span class="bash"> rossrv show AddTwoInts //也可以不指定 package 名字</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int64 a</div><div class="line"><span class="section">int64 b</span></div><div class="line">---</div><div class="line">int64 sum</div></pre></td></tr></table></figure></p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>通过上面为 beginner_tutorials 包添加的 msg 文件和 srv 文件，接下来就可以编译了。编译之前先在 CMakeLists.txt 文件中添加所有消息文件所依赖的那些含有 .msg 文件的 package ：<br>   <figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">generate_messages(</div><div class="line"> <span class="name">DEPENDENCIES</span></div><div class="line"> std_msgs</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure></p>
<p>编译完成后，所有在 msg 路径下的 .msg 文件都将转换为 ROS 所支持语言的源代码。生成的 C++ 头文件将会放置在 ~/catkin_ws/devel/include/beginner_tutorials/目录下；Python脚本语言会在~/catkin_ws/devel/lib/python2.7/dist-packages/beginner_tutorials/msg 目录下创建。 lisp 文件会出现在 ~/catkin_ws/devel/share/common-lisp/ros/beginner_tutorials/msg/ 路径下。详细格式参考 <a href="http://wiki.ros.org/ROS/Message_Description_Language" target="_blank" rel="external">Message_Description_Language</a> 。</p>
<p>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/CreatingMsgAndSrv" target="_blank" rel="external">CreatingMsgAndSrv</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习如何创建并编译 ROS 消息和服务，以及 &lt;a href=&quot;http://wiki.ros.org/rosmsg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rosmsg&lt;/a&gt; &lt;a href=&quot;http://wiki.ros.org/srv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rossrv&lt;/a&gt; &lt;a href=&quot;http://wiki.ros.org/rosbash#roscp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;roscp&lt;/a&gt; &lt;a href=&quot;http://wiki.ros.org/rosbash#rosed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rosed&lt;/a&gt; 等命令的使用。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS Messages" scheme="http://stevenshi.me/tags/ROS-Messages/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级八 使用rqt_console和roslaunch</title>
    <link href="http://stevenshi.me/2017/05/31/ros-primary-tutorial-8/"/>
    <id>http://stevenshi.me/2017/05/31/ros-primary-tutorial-8/</id>
    <published>2017-05-31T02:26:43.000Z</published>
    <updated>2017-06-13T05:54:37.258Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习 <a href="http://wiki.ros.org/rqt_console" target="_blank" rel="external">rqt_console</a> 与 <a href="http://wiki.ros.org/roslaunch" target="_blank" rel="external">roslaunch</a> 的使用。<a href="http://wiki.ros.org/rqt_console" target="_blank" rel="external">rqt_console</a> 属于 ROS 日志框架的一部分，用来显示节点的输出信息。<a href="http://wiki.ros.org/roslaunch" target="_blank" rel="external">roslaunch</a> 用于节点的运行，可以同时运行多个节点。<br>使用之前先安装以下程序包:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt-common-plugins</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>如果之前已安装，也可忽略。</p>
<h1 id="rqt-console-与-rqt-logger-level"><a href="#rqt-console-与-rqt-logger-level" class="headerlink" title="rqt_console 与 rqt_logger_level"></a>rqt_console 与 rqt_logger_level</h1><p><a href="http://wiki.ros.org/rqt_console" target="_blank" rel="external">rqt_console</a> 显示节点信息， <a href="http://wiki.ros.org/rqt_logger_level" target="_blank" rel="external">rqt_logger_level</a> 用于修改节点运行时输出信息的日志等级。<br>开启 rqt_console 窗口与 rqt_logger_level 窗口：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rqt_console rqt_console</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun rqt_logger_level rqt_logger_level</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/31/ros-primary-tutorial-8/rqtconsole.jpg" alt=""><br><img src="/2017/05/31/ros-primary-tutorial-8/rqtloglevel.jpg" alt=""></p>
<p>开启一个新的 terminal 然后启动 turtlesim 节点：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>
<p>因为默认的日志等级为 info 所以 <a href="http://wiki.ros.org/rqt_console" target="_blank" rel="external">rqt_console</a> 的输出为：<br><img src="/2017/05/31/ros-primary-tutorial-8/info.jpg" alt=""></p>
<p>现在刷新一下 <a href="http://wiki.ros.org/rqt_logger_level" target="_blank" rel="external">rqt_logger_level</a> 窗口，并将日志等级修改为 Warn 并且让 turtle 做旋转动作：<br>   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r <span class="number">1</span> -- '[<span class="number">2.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]' '[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.8</span>]'</div></pre></td></tr></table></figure></p>
<p> 这里我的日志等级并没有修改过来，原因未知，待查。<br>日志等级按以下优先顺序排列：<br>   <figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Fatal</div><div class="line"><span class="keyword">Error</span></div><div class="line">Warn</div><div class="line">Info</div><div class="line">Debug</div></pre></td></tr></table></figure></p>
<p>Fatal是最高优先级，Debug是最低优先级。通过设置日志等级可以获取该等级及其以上优先等级的所有日志消息。比如，将日志等级设为Warn时，会得到Warn、Error和Fatal这三个等级的所有日志消息。</p>
<h1 id="roslaunch"><a href="#roslaunch" class="headerlink" title="roslaunch"></a>roslaunch</h1><p><a href="http://wiki.ros.org/roslaunch" target="_blank" rel="external">roslaunch</a> 可以用来启动定义在 launch 文件中的多个节点，用法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ roslaunch <span class="string">[package]</span> <span class="string">[filename.launch]</span></div></pre></td></tr></table></figure></p>
<p>进入 beginner_tutorials 目录,建立一个 launch 文件，<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd beginner_tutorials</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir launch</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> launch/</span></div><div class="line"><span class="meta">$</span><span class="bash"> vim turtlemimic.launch</span></div></pre></td></tr></table></figure></p>
<p>在 turtlemimic.launch 文件中输入以下内容：<br>   <figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> &lt;launch&gt;</div><div class="line"></div><div class="line">    &lt;<span class="built_in">group</span> ns=<span class="string">"turtlesim1"</span>&gt;</div><div class="line">      &lt;node pkg=<span class="string">"turtlesim"</span> <span class="built_in">name</span>=<span class="string">"sim"</span> <span class="built_in">type</span>=<span class="string">"turtlesim_node"</span>/&gt;</div><div class="line">   &lt;/<span class="built_in">group</span>&gt;</div><div class="line"></div><div class="line">    &lt;<span class="built_in">group</span> ns=<span class="string">"turtlesim2"</span>&gt;</div><div class="line">      &lt;node pkg=<span class="string">"turtlesim"</span> <span class="built_in">name</span>=<span class="string">"sim"</span> <span class="built_in">type</span>=<span class="string">"turtlesim_node"</span>/&gt;</div><div class="line">    &lt;/<span class="built_in">group</span>&gt;</div><div class="line"> </div><div class="line">   &lt;node pkg=<span class="string">"turtlesim"</span> <span class="built_in">name</span>=<span class="string">"mimic"</span> <span class="built_in">type</span>=<span class="string">"mimic"</span>&gt;</div><div class="line">     &lt;remap <span class="keyword">from</span>=<span class="string">"input"</span> <span class="keyword">to</span>=<span class="string">"turtlesim1/turtle1"</span>/&gt;</div><div class="line">     &lt;remap <span class="keyword">from</span>=<span class="string">"output"</span> <span class="keyword">to</span>=<span class="string">"turtlesim2/turtle1"</span>/&gt;</div><div class="line">   &lt;/node&gt;</div><div class="line"> </div><div class="line">&lt;/launch&gt;</div></pre></td></tr></table></figure></p>
<p>创建了两个节点分组，一个名字为 turtlesim1 ，一个名字为 turtlesim2 ，两个组里都是用相同的  turtlesim节点并命名为 sim，在同时启动两个 turtlesim 模拟器时避免冲突。将所有话题的输入重命名为 turtlesim1 输出重命名为 turtlesim2，这样可以使 turtlesim2 模仿 turtlesim1。<br>启动：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roslaunch beginner_tutorials turtlemimic.launch</span></div></pre></td></tr></table></figure></p>
<p> 并在另一个 terminal 下发布运动指令：<br>   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rostopic pub /turtlesim1/turtle1/cmd_vel geometry_msgs/Twist -r <span class="number">1</span> -- '[<span class="number">2.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]' '[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">-1.8</span>]'</div></pre></td></tr></table></figure></p>
<p>可以看到两个 turtle 在做同样的圆周运动<img src="/2017/05/31/ros-primary-tutorial-8/two.jpg" alt=""></p>
<p>也可以通过 <a href="">rqt_graph</a> 来更好的理解 launch文件中所做的事情：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rqt_graph</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/31/ros-primary-tutorial-8/rqtgraph.jpg" alt=""><br>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/UsingRqtconsoleRoslaunch" target="_blank" rel="external">UsingRqtconsoleRoslaunch</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习 &lt;a href=&quot;http://wiki.ros.org/rqt_console&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rqt_console&lt;/a&gt; 与 &lt;a href=&quot;http://wiki.ros.org/roslaunch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;roslaunch&lt;/a&gt; 的使用。&lt;a href=&quot;http://wiki.ros.org/rqt_console&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rqt_console&lt;/a&gt; 属于 ROS 日志框架的一部分，用来显示节点的输出信息。&lt;a href=&quot;http://wiki.ros.org/roslaunch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;roslaunch&lt;/a&gt; 用于节点的运行，可以同时运行多个节点。&lt;br&gt;使用之前先安装以下程序包:&lt;br&gt;   &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo apt-get install ros-indigo-rqt&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo apt-get install ros-indigo-rqt-common-plugins&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="rqt_console" scheme="http://stevenshi.me/tags/rqt-console/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级七 理解ROS服务和参数</title>
    <link href="http://stevenshi.me/2017/05/31/ros-primary-tutorial-7/"/>
    <id>http://stevenshi.me/2017/05/31/ros-primary-tutorial-7/</id>
    <published>2017-05-31T00:23:36.000Z</published>
    <updated>2017-06-13T05:54:47.881Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习 ROS 的服务和参数。</p>
<h1 id="ROS-服务"><a href="#ROS-服务" class="headerlink" title="ROS 服务"></a>ROS 服务</h1><p>Services 是 ROS 节点之间通信的另一种方式，服务允许节点发送请求(request)，并获得响应(response)。<a href="http://wiki.ros.org/rosservice" target="_blank" rel="external">rosservice</a> 命令可以使用 ROS 客户端/服务器框架提供的服务，<a href="http://wiki.ros.org/rosservice" target="_blank" rel="external">rosservice</a> 提供了很多可以在 topic 上使用的命令：<br>   <figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">rosservice <span class="built_in">list</span>         输出可用服务的信息</div><div class="line">rosservice <span class="built_in">call</span>         调用带参数的服务</div><div class="line">rosservice <span class="built_in">type</span>         输出服务类型</div><div class="line">rosservice <span class="built_in">find</span>         依据类型寻找服务<span class="built_in">find</span> services by service <span class="built_in">type</span></div><div class="line">rosservice uri          输出服务的ROSRPC uri</div></pre></td></tr></table></figure></p>
<p>测试上述命令之前先运行 turtlesim 节点:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>
<p>并用键盘进行控制，显示出运动轨迹。<br><a id="more"></a></p>
<h2 id="rosserice-list"><a href="#rosserice-list" class="headerlink" title="rosserice list"></a>rosserice list</h2>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosservice  list</span></div></pre></td></tr></table></figure>
<p>rosservice list 命令显示出 turtlesim 节点提供的一些服务，其中 rosout 为 roscore 提供的服务：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="string">/clear</span> <span class="string">//</span>清除</div><div class="line"><span class="string">/kill</span>  <span class="string">//</span>终止</div><div class="line"><span class="string">/reset</span> <span class="string">//</span>重置</div><div class="line"><span class="string">/rosout/get_loggers</span></div><div class="line"><span class="string">/rosout/set_logger_level</span></div><div class="line"><span class="string">/spawn</span> <span class="string">//</span>再生</div><div class="line"><span class="string">/turtle1/set_pen</span> <span class="string">//</span>设定画笔包括颜色、线条宽度、开关等</div><div class="line"><span class="string">/turtle1/teleport_absolute</span> <span class="string">//</span>绝对参数</div><div class="line"><span class="string">/turtle1/teleport_relative</span> <span class="string">//</span>相对参数</div><div class="line"><span class="string">/turtlesim/get_loggers</span> <span class="string">//</span>日志</div><div class="line"><span class="string">/turtlesim/set_logger_level</span> <span class="string">//</span>日志等级</div></pre></td></tr></table></figure></p>
<p>参数的详细说明参阅 <a href="http://wiki.ros.org/turtlesim" target="_blank" rel="external">turtlesim</a>。</p>
<h2 id="rosservice-type"><a href="#rosservice-type" class="headerlink" title="rosservice type"></a>rosservice type</h2><p>rosservice type 用于显示某个服务的类型，使用方法：<br>   <figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">rosservice</span> <span class="keyword">type</span> [service]</div></pre></td></tr></table></figure></p>
<p>比如我们想查看 turtlesim 节点提供的 clear 服务：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosservice <span class="built_in">type</span> clear</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">std_srvs/<span class="keyword">Empty</span></div></pre></td></tr></table></figure></p>
<p>服务的类型为空Empty,这表明在调用这个服务时不需要参数。那我们调用一次这个参数看下效果，使用方法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosservice call <span class="string">[service]</span> <span class="string">[args]</span></div></pre></td></tr></table></figure></p>
<p>测试：<br>   <figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosservice <span class="keyword">call</span> <span class="keyword">clear</span></div></pre></td></tr></table></figure></p>
<p>之前 turtule 运行的轨迹被清除。上面是不带参数的服务，我们查看一下带参数的服务 spwan:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosservice <span class="built_in">type</span> spawn| rossrv show</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">float32 x</div><div class="line">float32 y</div><div class="line">float32 theta</div><div class="line"><span class="section">string name</span></div><div class="line">---</div><div class="line">string name</div></pre></td></tr></table></figure></p>
<p>以上可以看出 spawn 服务需要的参数有 x y 坐标值、角度以及名字等参数。我们使用 spawn 服务在指定位置再生成一个 turtle :<br>   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosservice call spawn <span class="number">3</span> <span class="number">3</span> <span class="number">1.8</span> <span class="string">"another turtle"</span></div></pre></td></tr></table></figure></p>
<p>上面命令在坐标(3,3) 方位角为 1.8 生成一个名字为 “anotherturtle” 的 turtle,注意名字之间不能有空格。<br><img src="/2017/05/31/ros-primary-tutorial-7/spawn.jpg" alt=""></p>
<h1 id="ROS-参数"><a href="#ROS-参数" class="headerlink" title="ROS 参数"></a>ROS 参数</h1><p><a href="http://wiki.ros.org/rosparam" target="_blank" rel="external">rosparam</a> 使得我们能够存储并操作 ROS 参数服务器 <a href="http://wiki.ros.org/Parameter%20Server" target="_blank" rel="external">Parameter Server</a> 上的数据。参数服务器能够存储整型、浮点、布尔、字符串、字典和列表等数据类型。<a href="http://wiki.ros.org/rosparam" target="_blank" rel="external">rosparam</a> 使用 <a href="https://zh.wikipedia.org/wiki/YAML" target="_blank" rel="external">YAML</a> 标记语言的语法。一般而言，<a href="https://zh.wikipedia.org/wiki/YAML" target="_blank" rel="external">YAML</a> 的表述很自然：1 是整型, 1.0 是浮点型, one 是字符串, true 是布尔, [1, 2, 3]是整型列表, {a: b, c: d}是字典。 <a href="http://wiki.ros.org/rosparam" target="_blank" rel="external">rosparam</a> 有很多指令可以用来操作参数:<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rosparam <span class="keyword">set</span>            设置参数</div><div class="line">rosparam <span class="comment">get</span>            获取参数</div><div class="line">rosparam <span class="comment">load</span>           从文件读取参数</div><div class="line">rosparam <span class="comment">dump</span>           向文件中写入参数</div><div class="line">rosparam <span class="comment">delete</span>         删除参数</div><div class="line">rosparam <span class="comment">list</span>           列出参数名</div></pre></td></tr></table></figure></p>
<p>rosparam list 命令可列出某个节点在参数服务器上的各种参数：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosparam list</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">/background_b</span> <span class="string">//</span>背景颜色 </div><div class="line"><span class="string">/background_g</span> <span class="string">//</span>背景颜色</div><div class="line"><span class="string">/background_r</span> <span class="string">//</span>背景颜色</div><div class="line"><span class="string">/rosdistro</span></div><div class="line"><span class="string">/roslaunch/uris/host_ubuntu__39737</span></div><div class="line"><span class="string">/rosversion</span></div><div class="line"><span class="string">/run_id</span></div></pre></td></tr></table></figure></p>
<p>设置背景颜色通过命令 rosparam set 获取背景颜色使用命令 rosparam get<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rosparam set <span class="string">[param_name]</span></div><div class="line">rosparam get <span class="string">[param_name]</span></div></pre></td></tr></table></figure></p>
<p>我们修改一下红色值：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> rosparam <span class="keyword">set</span> background_r <span class="comment">200</span></div></pre></td></tr></table></figure></p>
<p>调用清除命令参数才能生效：<br>   <figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosservice <span class="keyword">call</span> <span class="keyword">clear</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/31/ros-primary-tutorial-7/rosparam.jpg" alt=""><br>获取参数值：<br>   <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosparam <span class="keyword">get</span> /  <span class="comment">//显示服务器上所有参数内容</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">background_b</span>: <span class="number">255</span></div><div class="line"><span class="attribute">background_g</span>: <span class="number">10</span></div><div class="line"><span class="attribute">background_r</span>: <span class="number">200</span></div><div class="line"><span class="attribute">rosdistro</span>: 'indigo</div><div class="line"></div><div class="line"> '</div><div class="line"><span class="attribute">roslaunch</span>:</div><div class="line"> <span class="attribute">uris</span>: &#123;<span class="attribute">host_ubuntu__39737</span>: <span class="string">'http://ubuntu:39737/'</span>&#125;</div><div class="line"><span class="attribute">rosversion</span>: '<span class="number">1.11</span>.<span class="number">20</span></div><div class="line"></div><div class="line"> '</div><div class="line"><span class="attribute">run_id</span>: <span class="number">0</span>efaaffc-<span class="number">4599</span>-<span class="number">11</span>e7-a400-<span class="number">000</span>c2915ac77</div></pre></td></tr></table></figure></p>
<p>获取某个参数值，比如获取红色通道的值：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosparam get background_r</span></div></pre></td></tr></table></figure></p>
<p>可以使用 rosparam dump 命令将所有参数进行存储，使用 rosparam load 命令读取所有参数：<br>使用方法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rosparam dump <span class="string">[file_name]</span></div><div class="line">rosparam load <span class="string">[file_name]</span> <span class="string">[namespace]</span></div></pre></td></tr></table></figure></p>
<p>将所有参数写入文件 myparams.yaml 中：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosparam dump myparams.yaml</span></div></pre></td></tr></table></figure></p>
<p>载入参数：<br>   <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rosparam load params.yaml <span class="keyword">copy</span><span class="bash">  //将参数载入 copy 空间</span></div><div class="line">$ rosparam get <span class="keyword">copy</span><span class="bash">/background_r</span></div></pre></td></tr></table></figure></p>
<p>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingServicesParams" target="_blank" rel="external">UnderstandingServicesParams</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习 ROS 的服务和参数。&lt;/p&gt;
&lt;h1 id=&quot;ROS-服务&quot;&gt;&lt;a href=&quot;#ROS-服务&quot; class=&quot;headerlink&quot; title=&quot;ROS 服务&quot;&gt;&lt;/a&gt;ROS 服务&lt;/h1&gt;&lt;p&gt;Services 是 ROS 节点之间通信的另一种方式，服务允许节点发送请求(request)，并获得响应(response)。&lt;a href=&quot;http://wiki.ros.org/rosservice&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rosservice&lt;/a&gt; 命令可以使用 ROS 客户端/服务器框架提供的服务，&lt;a href=&quot;http://wiki.ros.org/rosservice&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rosservice&lt;/a&gt; 提供了很多可以在 topic 上使用的命令：&lt;br&gt;   &lt;figure class=&quot;highlight sqf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;rosservice &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;         输出可用服务的信息&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rosservice &lt;span class=&quot;built_in&quot;&gt;call&lt;/span&gt;         调用带参数的服务&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rosservice &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;         输出服务类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rosservice &lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt;         依据类型寻找服务&lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt; services by service &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rosservice uri          输出服务的ROSRPC uri&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;测试上述命令之前先运行 turtlesim 节点:&lt;br&gt;   &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; roscore &amp;amp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; rosrun turtlesim turtlesim_node&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;并用键盘进行控制，显示出运动轨迹。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS Services" scheme="http://stevenshi.me/tags/ROS-Services/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级六 理解ROS话题</title>
    <link href="http://stevenshi.me/2017/05/27/ros-primary-tutorial-6/"/>
    <id>http://stevenshi.me/2017/05/27/ros-primary-tutorial-6/</id>
    <published>2017-05-27T05:13:54.000Z</published>
    <updated>2017-06-13T05:54:56.873Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习 ROS 中的话题 <a href="http://wiki.ros.org/rostopic" target="_blank" rel="external">Topics</a> 以及 <a href="http://wiki.ros.org/rostopic" target="_blank" rel="external">Topics</a> 的使用。源码位于 <a href="https://github.com/ros/ros_comm" target="_blank" rel="external">ROS-communications</a>。开始之前我们先运行 turtlesim 节点，并用键盘来控制它的移动。开一个 terminal 运行：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>
<p>开启另外一个 terminal 运行键盘控制节点：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rosrun</span> turtlesim turtle_teleop_key</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>现在随便移动键盘的方向键，看看 图画里的 turtle 是否在跟随你的指令移动:</p>
<p><img src="/2017/05/27/ros-primary-tutorial-6/turtlesim.jpg" alt=""><br>在此期间键盘是如何控制它移动的，期间到底发生了什么，下面我们来进一步分析。</p>
<h1 id="理解话题"><a href="#理解话题" class="headerlink" title="理解话题"></a>理解话题</h1><p>为了更形象的理解话题，我们使用工具 <a href="http://wiki.ros.org/rqt_graph" target="_blank" rel="external">rqt_graph</a>，如果没有安装则通过以下命令安装：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt //如果使用的其他发行版替换indigo即可</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt-common-plugins</span></div></pre></td></tr></table></figure></p>
<p>保持前面的 turtlesim 节点在运行状态，新开一个 terminal 运行 <a href="http://wiki.ros.org/rqt_graph" target="_blank" rel="external">rqt_graph</a>:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rqt_graph rqt_graph</span></div></pre></td></tr></table></figure></p>
<p>我们会看到下图：<br><img src="/2017/05/27/ros-primary-tutorial-6/rqtgraph.jpg" alt=""><br>将鼠标放置于/turtle1/cmd_vel 上，相应的ROS节点和话题就会高亮显示，turtlesim 和 teleop_turtle 两个节点通过话题 /turtle1/cmd_vel 进行通信。我们可以使用 rostopic 工具查看话题的相关信息。<br>用法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rostopic echo <span class="string">[topic]</span></div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rostopic <span class="built_in">echo</span> /turtle1/cmd_vel</span></div></pre></td></tr></table></figure></p>
<p>这个时候按键盘的向下方向键会看到如下信息：<br>   <figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">linear:</span></div><div class="line"><span class="symbol">  x:</span> <span class="number">-2.0</span></div><div class="line"><span class="symbol">  y:</span> <span class="number">0.0</span></div><div class="line"><span class="symbol">  z:</span> <span class="number">0.0</span></div><div class="line"><span class="symbol">angular:</span></div><div class="line"><span class="symbol">  x:</span> <span class="number">0.0</span></div><div class="line"><span class="symbol">  y:</span> <span class="number">0.0</span></div><div class="line"><span class="symbol">  z:</span> <span class="number">0.0</span></div></pre></td></tr></table></figure></p>
<p>此时刷新一下 rqt_graph 就会看到又多了一个订阅话题 /turtle1/cmd_vel 的节点，红色部分就是。</p>
<p><img src="/2017/05/27/ros-primary-tutorial-6/topic.jpg" alt=""></p>
<h1 id="查看话题"><a href="#查看话题" class="headerlink" title="查看话题"></a>查看话题</h1><p>rostopic list 能够列出所有当前订阅和发布的话题，保持前面的各个节点处于运行状态：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rostopic list -v</span></div></pre></td></tr></table></figure></p>
<p>此时会输出：<br>   <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Published <span class="string">topics:</span></div><div class="line"> * <span class="regexp">/turtle1/</span>color_sensor [turtlesim/Color] <span class="number">1</span> publisher</div><div class="line"> * <span class="regexp">/turtle1/</span>cmd_vel [geometry_msgs/Twist] <span class="number">1</span> publisher</div><div class="line"> * <span class="regexp">/rosout [rosgraph_msgs/</span>Log] <span class="number">4</span> publishers</div><div class="line"> * <span class="regexp">/rosout_agg [rosgraph_msgs/</span>Log] <span class="number">1</span> publisher</div><div class="line"> * <span class="regexp">/turtle1/</span>pose [turtlesim/Pose] <span class="number">1</span> publisher</div><div class="line"></div><div class="line">Subscribed <span class="string">topics:</span></div><div class="line"> * <span class="regexp">/turtle1/</span>cmd_vel [geometry_msgs/Twist] <span class="number">2</span> subscribers</div><div class="line"> * <span class="regexp">/rosout [rosgraph_msgs/</span>Log] <span class="number">1</span> subscriber</div><div class="line"> * <span class="regexp">/statistics [rosgraph_msgs/</span>TopicStatistics] <span class="number">1</span> subscriber</div></pre></td></tr></table></figure></p>
<p>上面列出了所有的订阅和发布的话题及其类型。关于 rostopic list 的其他使用方法可通过帮助命令查看：<br>   <figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rostopic</span> <span class="keyword">list</span> -<span class="built_in">h</span></div></pre></td></tr></table></figure></p>
<h1 id="理解消息"><a href="#理解消息" class="headerlink" title="理解消息"></a>理解消息</h1><p>话题之间的通信是通过在节点之间发送消息 <a href="http://wiki.ros.org/Messages" target="_blank" rel="external">Ros Messages</a> 实现的。发布器 teleop_turtle 和订阅器 turtlesim 之间必须发送和接收相同类型的消息才能通信。也就是说话题的类型是由发布在它上面的消息类型决定的。使用 rostopic type 命令可以查看发布在某个话题上的消息类型：<br>用法：<br>   <figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">rostopic</span> <span class="keyword">type</span> [topic]</div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rostopic <span class="class"><span class="keyword">type</span> <span class="title">turtle1</span></span>/cmd_vel <span class="comment">//查看话题 turtle1/cmd_vel 上的消息类型</span></div></pre></td></tr></table></figure></p>
<p>一般会输出：<br>   <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">geometry_msgs/Twist</div></pre></td></tr></table></figure></p>
<p>可以使用 <a href="http://wiki.ros.org/rosmsg" target="_blank" rel="external">rosmsg</a> 命令查看消息的详细类型：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosmsg show geometry_msgs/Twist</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">geometry_msgs/Vector3 linear</div><div class="line">  <span class="built_in">float</span>64 x</div><div class="line">  <span class="built_in">float</span>64 y</div><div class="line">  <span class="built_in">float</span>64 z</div><div class="line">geometry_msgs/Vector3 angular</div><div class="line">  <span class="built_in">float</span>64 x</div><div class="line">  <span class="built_in">float</span>64 y</div><div class="line">  <span class="built_in">float</span>64 z</div></pre></td></tr></table></figure></p>
<p>上面可以看到消息  geometry_msgs/Twist 的类型 一个是 x y z 三轴的线速度，另外一个是 x y z 三轴的角速度。</p>
<h1 id="使用话题"><a href="#使用话题" class="headerlink" title="使用话题"></a>使用话题</h1><p>rostopic pub 可以把消息发布到某个正在广播的话题上。<br>用法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rostopic pub <span class="string">[topic]</span> <span class="string">[msg_type]</span> <span class="string">[args]</span></div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rostopic pub <span class="number">-1</span> /turtle1/cmd_vel geometry_msgs/Twist -- '[<span class="number">2.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]' '[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.8</span>]'</div></pre></td></tr></table></figure></p>
<p>该命令会发送一条消息到话题 /turtle1/cmd_vel 上，并使得 turtlesim 以2.0大小的线速度和1.8大小的角速度开始移动。 -1 的意思是发布一条消息后马上退出，geometry_msgs/Twist 为消息类型，后面是 x y z 的数值，前面一组代表线速度，后面一组代表角速度。geometry_msgs/Twist 消息里包含两组浮点类型元素 linear 和 angular 。参数格式遵循 <a href="http://wiki.ros.org/ROS/YAMLCommandLine" target="_blank" rel="external">YAML</a> 语法。<br>上面的命令并没有让 turtle 保持一直运动，因为我们的命令只发布了一次就退出了，而要使其一直运动需要控制命令的发布频率：<br>   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r <span class="number">1</span> -- '[<span class="number">2.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]' '[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.8</span>]'</div></pre></td></tr></table></figure></p>
<p>这条命令以 1hz 的频率发布消息到话题 /turtle1/cmd_vel 上，参数 -r 表示频率,后面的 1 为 1hz,此时会看到 turtle 沿着圆形轨迹不停的转动。<br>使用 rostopic hz 命令可以查看消息发布的频率<br>用法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rostopic hz <span class="string">[topic]</span></div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rostopic hz /turtle1/cmd_vel</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">subscribed <span class="keyword">to</span> [/turtle1/cmd_vel]</div><div class="line">average rate: <span class="number">1.000</span></div><div class="line">        <span class="built_in">min</span>: <span class="number">1.000</span>s <span class="built_in">max</span>: <span class="number">1.000</span>s std de<span class="variable">v:</span> <span class="number">0.00000</span>s <span class="keyword">windo</span><span class="variable">w:</span> <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>可见消息发布的频率正如我们前面的设置1 hz。我们也可以查看话题 /turtle1/pose 的发布频率：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rostopic hz /turtle1/pose</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">subscribed <span class="keyword">to</span> [/turtle1/pose]</div><div class="line">average rate: <span class="number">62.534</span></div><div class="line">        <span class="built_in">min</span>: <span class="number">0.015</span>s <span class="built_in">max</span>: <span class="number">0.017</span>s std de<span class="variable">v:</span> <span class="number">0.00052</span>s <span class="keyword">windo</span><span class="variable">w:</span> <span class="number">61</span></div></pre></td></tr></table></figure></p>
<p>可见 turtlesim 正以大约62hz 的频率发布数据给 turtle ，这个应该是位置数据。我们也可以结合 rostopic type 和 rosmsg show 命令来获取关于某个话题的更深层次的信息。<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">rostopic <span class="built_in">type</span> /turtle1/cmd_vel | rosmsg show</span></div></pre></td></tr></table></figure></p>
<h1 id="使用rqt-plot"><a href="#使用rqt-plot" class="headerlink" title="使用rqt_plot"></a>使用rqt_plot</h1><p><a href="http://wiki.ros.org/rqt_plot" target="_blank" rel="external">rqt_plot</a> 是 <a href="https://www.qt.io/" target="_blank" rel="external">Qt</a> 开发的图形用户界面，可以将某个话题上的数据以图形的方式实时的绘制出来，如果没有安装首先通过以下命令安装，参考<a href="http://wiki.ros.org/rqt_plot" target="_blank" rel="external">rqt_plot</a>:</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt-common-plugins</span></div></pre></td></tr></table></figure>
<p>使用：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rqt_plot rqt_plot</span></div></pre></td></tr></table></figure></p>
<p>窗口左上角可以添加需要的话题，右边的减号可以删除不需要的话题。点击那个绿色的对号按钮可以调节时间和坐标等信息：<br><img src="/2017/05/27/ros-primary-tutorial-6/rqtplot.jpg" alt=""></p>
<p>更多 rqt_plot 的使用请参阅官方文档 <a href="http://wiki.ros.org/rqt_plot" target="_blank" rel="external">rqt_plot</a> 或 <a href="http://rosindex.github.io/p/rqt_plot/#indigo" target="_blank" rel="external">rosindex-rqt_plot</a> </p>
<p>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingTopics" target="_blank" rel="external">UnderstandingTopics</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习 ROS 中的话题 &lt;a href=&quot;http://wiki.ros.org/rostopic&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Topics&lt;/a&gt; 以及 &lt;a href=&quot;http://wiki.ros.org/rostopic&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Topics&lt;/a&gt; 的使用。源码位于 &lt;a href=&quot;https://github.com/ros/ros_comm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS-communications&lt;/a&gt;。开始之前我们先运行 turtlesim 节点，并用键盘来控制它的移动。开一个 terminal 运行：&lt;br&gt;   &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; roscore &amp;amp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; rosrun turtlesim turtlesim_node&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;开启另外一个 terminal 运行键盘控制节点：&lt;br&gt;   &lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;span class=&quot;meta-keyword&quot;&gt;$rosrun&lt;/span&gt; turtlesim turtle_teleop_key&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS Topics" scheme="http://stevenshi.me/tags/ROS-Topics/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级五 理解ROS节点</title>
    <link href="http://stevenshi.me/2017/05/27/ros-primary-tutorial-5/"/>
    <id>http://stevenshi.me/2017/05/27/ros-primary-tutorial-5/</id>
    <published>2017-05-27T01:34:16.000Z</published>
    <updated>2017-06-14T08:00:18.888Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习 ROS 节点相关知识。节点是 ROS 程序包中的一个可执行文件，它可以与其他节点进行通信，节点可以发布或订阅话题，也可以提供或使用某种服务 。<br><a id="more"></a></p>
<h1 id="相关介绍"><a href="#相关介绍" class="headerlink" title="相关介绍"></a>相关介绍</h1><p><a href="http://wiki.ros.org/Nodes" target="_blank" rel="external">Nodes</a>: 表示 ROS 中的节点，它表现形式为一个可执行文件，它可以通过 ROS 与其它节点进行通信。<br><a href="http://wiki.ros.org/Messages" target="_blank" rel="external">Messages</a>: 表示消息，它是一种 ROS 数据类型，用于订阅或发布到一个话题。<br><a href="http://wiki.ros.org/Topics" target="_blank" rel="external">Topics</a>: 表示话题，节点可以发布消息到话题，也可以订阅话题以接收消息。<br><a href="http://wiki.ros.org/Master" target="_blank" rel="external">Master</a>: 表示节点管理器，它提供 ROS 名称服务，帮助 ROS 节点找到彼此。<br><a href="http://wiki.ros.org/rosout" target="_blank" rel="external">rosout</a>: 类似标准输出 stdout。<br><a href="http://wiki.ros.org/roscore" target="_blank" rel="external">roscore</a>: 相当于 ROS 中的服务器，运行所有节点前必须先运行 roscore。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>先运行 roscore:<br>   <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>roscore &amp; <span class="regexp">//</span>后台运行</div></pre></td></tr></table></figure></p>
<p>可以使用 rosnode 查看节点信息：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosnode <span class="built_in">list</span> <span class="comment">//列出活跃的节点</span></div></pre></td></tr></table></figure></p>
<p>此时输出一般为：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">/rosout</span></div></pre></td></tr></table></figure></p>
<p>表示当前只有一个 rosout 节点在运行，这个节点用于收集和记录调试输出信息，它必须先于其它节点运行，并且总是一直在运行。<br>返回特定节点的信息：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosnode info /rosout</span></div></pre></td></tr></table></figure></p>
<p>此时输出一般为：<br>   <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Node</span> <span class="title">[/rosout</span>]</div><div class="line">Publications:</div><div class="line"> * /rosout_agg [rosgraph_msgs/Log]</div><div class="line"></div><div class="line">Subscriptions:</div><div class="line"> * /rosout [unknown <span class="keyword">type</span>]</div><div class="line"></div><div class="line">Services:</div><div class="line"> * /rosout/set_logger_level</div><div class="line"> * /rosout/get_loggers</div><div class="line"></div><div class="line"></div><div class="line">contacting <span class="keyword">node</span> http:<span class="title">//ubuntu</span>:<span class="number">56062</span>/ ...</div><div class="line">Pid: <span class="number">2811</span></div></pre></td></tr></table></figure></p>
<p>可以看出，rosout 既发布主题也订阅主题并且提供 log 日志服务。</p>
<h1 id="运行节点"><a href="#运行节点" class="headerlink" title="运行节点"></a>运行节点</h1><p><a href="http://wiki.ros.org/rosrun" target="_blank" rel="external">rosrun</a> 用于运行某个 ROS 程序包内的节点，而不需要知道这个包的路径，当然前提是这个包已经加入到 ROS 的环境变量中，即 ROS 可以找到它。<br>用法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosrun <span class="string">[package_name]</span> <span class="string">[node_name]</span></div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>
<p>运行程序包 turtlesim 中的 turtlesim_node 节点。要使用 <a href="http://wiki.ros.org/turtlesim" target="_blank" rel="external">turtlesim</a> 需要事先安装这个包：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-ros-tutorials</span></div></pre></td></tr></table></figure></p>
<p>或者通过源码下载后自行编译 参考<a href="https://github.com/ros/ros_tutorials" target="_blank" rel="external">ros_tutorials</a> 。运行效果<img src="/2017/05/27/ros-primary-tutorial-5/turtlesim.jpg" alt=""><br>如果此时打开另一个 terminal 并使用前面的命令查看节点信息：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosnode list</span></div></pre></td></tr></table></figure></p>
<p>此时的输出一般为：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">/rosout</span></div><div class="line"><span class="string">/turtlesim</span></div></pre></td></tr></table></figure></p>
<p>也可以查看 /turtlesim 节点的具体信息：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosnode info /turtlesim</span></div></pre></td></tr></table></figure></p>
<p>输出一般为：<br>   <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Node [/turtlesim]</div><div class="line"><span class="string">Publications:</span></div><div class="line"> * <span class="regexp">/turtle1/</span>color_sensor [turtlesim/Color]</div><div class="line"> * <span class="regexp">/rosout [rosgraph_msgs/</span>Log]</div><div class="line"> * <span class="regexp">/turtle1/</span>pose [turtlesim/Pose]</div><div class="line"><span class="symbol"></span></div><div class="line">Subscriptions:</div><div class="line"> * <span class="regexp">/turtle1/</span>cmd_vel [unknown type]</div><div class="line"><span class="symbol"></span></div><div class="line">Services:</div><div class="line"> * <span class="regexp">/turtle1/</span>teleport_absolute</div><div class="line"> * <span class="regexp">/turtlesim/</span>get_loggers</div><div class="line"> * <span class="regexp">/turtlesim/</span>set_logger_level</div><div class="line"> * /reset</div><div class="line"> * /spawn</div><div class="line"> * /clear</div><div class="line"> * <span class="regexp">/turtle1/</span>set_pen</div><div class="line"> * <span class="regexp">/turtle1/</span>teleport_relative</div><div class="line"> * /kill</div><div class="line"></div><div class="line"></div><div class="line">contacting node <span class="string">http:</span><span class="comment">//ubuntu:53732/ ...</span></div><div class="line"><span class="string">Pid:</span> <span class="number">3904</span></div><div class="line"><span class="string">Connections:</span></div><div class="line"> * <span class="string">topic:</span> /rosout</div><div class="line">    * <span class="string">to:</span> /rosout</div><div class="line">    * <span class="string">direction:</span> outbound</div><div class="line">    * <span class="string">transport:</span> TCPROS</div></pre></td></tr></table></figure></p>
<p>我们也可以通过命令行修改节点名字，使用 ROS 的 <a href="http://wiki.ros.org/Remapping%20Arguments" target="_blank" rel="external">RemappingArguments</a> 改变节点名称：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtlesim_node __name:=my_turtle</span></div></pre></td></tr></table></figure></p>
<p>改变节点名称前，先 kill 掉之前运行的节点 turtlesim_node。此时再输入命令查看节点信息，名字已经改变了：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">/my_turtle</span></div><div class="line"><span class="string">/rosout</span></div></pre></td></tr></table></figure></p>
<p>我们可以使用 ping 命令查看节点通讯是否可达：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosnode ping my_turtle</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rosnode: node is [/my_turtle]</div><div class="line">pinging /my_turtle <span class="keyword">with</span> <span class="keyword">a</span> timeout <span class="keyword">of</span> <span class="number">3.0</span>s</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">1.326084</span>ms</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">0.391006</span>ms</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">0.315189</span>ms</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">0.321150</span>ms</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">0.367880</span>ms</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">0.342846</span>ms</div></pre></td></tr></table></figure></p>
<p>至此，关于 ROS 节点的学习告一段落。<br>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingNodes" target="_blank" rel="external">Understanding-Nodes</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习 ROS 节点相关知识。节点是 ROS 程序包中的一个可执行文件，它可以与其他节点进行通信，节点可以发布或订阅话题，也可以提供或使用某种服务 。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="ROS Node" scheme="http://stevenshi.me/tags/ROS-Node/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级四 编译ROS程序包</title>
    <link href="http://stevenshi.me/2017/05/26/ros-primary-tutorial-4/"/>
    <id>http://stevenshi.me/2017/05/26/ros-primary-tutorial-4/</id>
    <published>2017-05-26T07:10:04.000Z</published>
    <updated>2017-06-13T05:55:14.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>ROS 程序包的编译使用命令 <a href="http://wiki.ros.org/catkin/commands/catkin_make" target="_blank" rel="external">catkin_make</a>。在 catkin 工作空间的根目录下 <em>~/catkin_ws</em> 执行该命令即可编译 catkin 程序包：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>该命令会在 <em>~/catkin_ws</em> 目录下生成 <em>build </em> 和 <em>devel</em> 文件夹，<em>build </em>是 <em>cmake</em> 和 <em>make</em> 命令执行的地方，<em>devel</em> 文件夹内部用于保存编译生成文件，目标文件以及配置文件 setup.*sh等。该命令等价于：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> src</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_init_workspace</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ..</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir build</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> build</span></div><div class="line"><span class="meta">$</span><span class="bash"> cmake ../src -DCMAKE_INSTALL_PREFIX=../install -DCATKIN_DEVEL_PREFIX=../devel</span></div><div class="line"><span class="meta">$</span><span class="bash"> make</span></div></pre></td></tr></table></figure></p>
<p>如果只想编译指定的某个包或几个包可以使用以下命令：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class="string">"package1;package2"</span></span></div></pre></td></tr></table></figure></p>
<p>比如我只想编译 mypackage 和 beginner_tutorial这两个包，那么命令可写成：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class="string">"mypackage,beginner_tutorial"</span></span></div></pre></td></tr></table></figure></p>
<p>注意命令中的 = 前后不能有空格。<br>输出：<br>  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Base <span class="string">path:</span> <span class="regexp">/home/</span>steven/catkin_ws</div><div class="line">Source <span class="string">space:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>src</div><div class="line">Build <span class="string">space:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>build</div><div class="line">Devel <span class="string">space:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>devel</div><div class="line">Install <span class="string">space:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>install</div><div class="line"></div><div class="line"> Running <span class="string">command:</span> <span class="string">"cmake /home/steven/catkin_ws/src -DCATKIN_WHITELIST_PACKAGES=mypackage,beginner_tutorial -DCATKIN_DEVEL_PREFIX=/home/steven/catkin_ws/devel -DCMAKE_INSTALL_PREFIX=/home/steven/catkin_ws/install -G Unix Makefiles"</span> <span class="keyword">in</span> <span class="string">"/home/steven/catkin_ws/build"</span></div><div class="line"></div><div class="line">-- Using <span class="string">CATKIN_DEVEL_PREFIX:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>devel</div><div class="line">-- Using <span class="string">CMAKE_PREFIX_PATH:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>devel;<span class="regexp">/opt/</span>ros/indigo</div><div class="line">-- This workspace <span class="string">overlays:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>devel;<span class="regexp">/opt/</span>ros/indigo</div><div class="line">-- Using <span class="string">PYTHON_EXECUTABLE:</span> <span class="regexp">/usr/</span>bin/python</div><div class="line">-- Using Debian Python <span class="keyword">package</span> layout</div><div class="line">-- Using <span class="string">empy:</span> <span class="regexp">/usr/</span>bin/empy</div><div class="line">-- Using <span class="string">CATKIN_ENABLE_TESTING:</span> ON</div><div class="line">-- Call enable_testing()</div><div class="line">-- Using <span class="string">CATKIN_TEST_RESULTS_DIR:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>build/test_results</div><div class="line">-- Found <span class="string">gtest:</span> gtests will be built</div><div class="line">-- Using Python <span class="string">nosetests:</span> <span class="regexp">/usr/</span>bin/nosetests<span class="number">-2.7</span></div><div class="line">-- catkin <span class="number">0.6</span><span class="number">.18</span></div><div class="line">-- BUILD_SHARED_LIBS is on</div><div class="line">-- Using <span class="string">CATKIN_WHITELIST_PACKAGES:</span> mypackage,beginner_tutorial</div><div class="line">-- Configuring done</div><div class="line">-- Generating done</div><div class="line">-- Build files have been written <span class="string">to:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>build</div><div class="line"></div><div class="line"> Running <span class="string">command:</span> <span class="string">"make -j1 -l1"</span> <span class="keyword">in</span> <span class="string">"/home/steven/catkin_ws/build"</span></div></pre></td></tr></table></figure></p>
<p>如果想恢复编译所有包使用命令：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class="string">""</span></span></div></pre></td></tr></table></figure></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>编译完成后生成的文件位于 <em>devel</em> 目录下，可以使用以下命令进行安装：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make install</span></div></pre></td></tr></table></figure></p>
<p>以上命令等价于：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/build</span></div><div class="line">//If cmake hasn't already been called</div><div class="line"><span class="meta">$</span><span class="bash"> cmake ../src -DCMAKE_INSTALL_PREFIX=../install -DCATKIN_DEVEL_PREFIX=../devel</span></div><div class="line"><span class="meta">$</span><span class="bash"> make</span></div><div class="line"><span class="meta">$</span><span class="bash"> make install</span></div></pre></td></tr></table></figure></p>
<p>执行完以上命令后会在 <em>~/catkin_ws</em> 目录下生成 <em>install</em> 文件夹，所有编译完成的包都安装到了 <em>install</em> 下。里面包含 <em>setup.bash</em> 配置文件，可以使用 <em>source</em> 让系统可以找到这些编译完后的可执行包。<br>可以通过以下命令改变安装位置：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make -DCMAKE_INSTALL_PREFIX=/opt/ros/indigo install</span></div></pre></td></tr></table></figure></p>
<p>位置 <em>/opt/ros/indigo</em> 为系统目录，一般不建议将自己的包安装于此。安装完后记得 <em>source</em> 一下才能使用：<br>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$source</span> <span class="regexp">/opt/</span>ros<span class="regexp">/indigo/</span>setup.bash</div></pre></td></tr></table></figure></p>
<p>或者：<br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span></div></pre></td></tr></table></figure></p>
<p>可以将这句话添加到自己的 <em>~/.bashrc</em> 中：<br>  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">source</span> ~<span class="regexp">/catkin_ws/</span>devel<span class="regexp">/setup.bash</span></div></pre></td></tr></table></figure></p>
<p>参考 <a href="http://wiki.ros.org/catkin/commands/catkin_make" target="_blank" rel="external">catkin_make</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;编译&quot;&gt;&lt;a href=&quot;#编译&quot; class=&quot;headerlink&quot; title=&quot;编译&quot;&gt;&lt;/a&gt;编译&lt;/h1&gt;&lt;p&gt;ROS 程序包的编译使用命令 &lt;a href=&quot;http://wiki.ros.org/catkin/commands/catkin_make&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;catkin_make&lt;/a&gt;。在 catkin 工作空间的根目录下 &lt;em&gt;~/catkin_ws&lt;/em&gt; 执行该命令即可编译 catkin 程序包：&lt;br&gt;   &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/catkin_ws&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;catkin_make&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="Catkin_make" scheme="http://stevenshi.me/tags/Catkin-make/"/>
    
  </entry>
  
  <entry>
    <title>ROS初级三 创建ROS程序包</title>
    <link href="http://stevenshi.me/2017/05/26/ros-primary-tutorial-3/"/>
    <id>http://stevenshi.me/2017/05/26/ros-primary-tutorial-3/</id>
    <published>2017-05-26T03:23:13.000Z</published>
    <updated>2017-06-13T05:55:22.440Z</updated>
    
    <content type="html"><![CDATA[<p>本篇学习 ROS 程序包的创建，使用工具 <a href="http://wiki.ros.org/catkin/commands/catkin_create_pkg" target="_blank" rel="external">catkin_create_pkg</a> 创建新程序包。</p>
<h1 id="ROS程序包的组成"><a href="#ROS程序包的组成" class="headerlink" title="ROS程序包的组成"></a>ROS程序包的组成</h1><p> ROS 程序包必须包含 <a href="http://wiki.ros.org/catkin/package.xml" target="_blank" rel="external">package.xml</a> 文件和 <a href="http://wiki.ros.org/catkin/CMakeLists.txt" target="_blank" rel="external">CMakeLists.txt</a> 文件。<em>package.xml</em> 提供有关程序包的元信息，每个目录下只能有一个程序包：<br>   <figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">beginner_tutorials/ </span>    </div><div class="line"> <span class="meta">include</span>/                   </div><div class="line"> msg/                       </div><div class="line"> src/                        </div><div class="line"> srv/                       </div><div class="line"> CMakeLists.txt              </div><div class="line"> package.xml</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="catkin工作空间"><a href="#catkin工作空间" class="headerlink" title="catkin工作空间"></a>catkin工作空间</h1><p>一个简单的 <a href="http://wiki.ros.org/catkin/workspaces" target="_blank" rel="external">catkin workspace</a> 结构如下：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">workspace_folder/        -- WORKSPACE</div><div class="line">  src/                   -- SOURCE SPACE</div><div class="line">    CMakeLists<span class="selector-class">.txt</span>       -- <span class="string">'Toplevel'</span> CMake file, provided by catkin</div><div class="line">    package_1/</div><div class="line">      CMakeLists<span class="selector-class">.txt</span>     -- CMakeLists<span class="selector-class">.txt</span> file <span class="keyword">for</span> package_1</div><div class="line">      package<span class="selector-class">.xml</span>        -- Package manifest <span class="keyword">for</span> package_1</div><div class="line">    ...</div><div class="line">    package_n/</div><div class="line">      CMakeLists<span class="selector-class">.txt</span>     -- CMakeLists<span class="selector-class">.txt</span> file <span class="keyword">for</span> package_n</div><div class="line">      package<span class="selector-class">.xml</span>        -- Package manifest <span class="keyword">for</span> package_n</div></pre></td></tr></table></figure></p>
<h1 id="创建catkin程序包"><a href="#创建catkin程序包" class="headerlink" title="创建catkin程序包"></a>创建catkin程序包</h1><p>使用 <a href="http://wiki.ros.org/catkin/commands/catkin_create_pkg" target="_blank" rel="external">catkin_create_pkg</a> 创建自己的 catkin 程序包，格式：<br>   <figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$catkin_create_pkg</span> &lt;package_name&gt; <span class="selector-attr">[depend1]</span> <span class="selector-attr">[depend2]</span> <span class="selector-attr">[depend3]</span></div></pre></td></tr></table></figure></p>
<p>实例：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/src </span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_create_pkg beginner_tutorials std_msgs rospy roscpp</span></div></pre></td></tr></table></figure></p>
<p>上面命令创建了一个名为 <em>beginner_tutorials</em> 的 catkin 程序包，这个程序包依赖于 std_msgs、roscpp 和 rospy。执行这个命令后在 <em>~/catkin_ws/src</em> 目录下将会创建一个名为 <em>beginner_tutorials</em> 的文件夹，这个文件夹里面包含一个 <em>package.xml</em> 文件和一个 <em>CMakeLists.txt</em> 文件，这两个文件都已经自动包含了部分在执行 <a href="http://wiki.ros.org/catkin/commands/catkin_create_pkg" target="_blank" rel="external">catkin_create_pkg</a> 命令时提供的信息。 </p>
<h1 id="程序包依赖关系"><a href="#程序包依赖关系" class="headerlink" title="程序包依赖关系"></a>程序包依赖关系</h1><p>可以使用 <em>rospack</em> 命令来查看某个程序包的依赖包：<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rospack</span> depends1 beginner_tutorials <span class="regexp">//</span>查看一级依赖</div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">roscpp</span></div><div class="line">rospy</div><div class="line">std_msgs</div></pre></td></tr></table></figure></p>
<p>列出的依赖包正是我们在用 <a href="http://wiki.ros.org/catkin/commands/catkin_create_pkg" target="_blank" rel="external">catkin_create_pkg</a> 创建 beginner_tutorials 程序包时指定的依赖包。而这些依赖已经自动添加到 <em>package.xml</em> 文件中：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscd</span> beginner_tutorials</span></div><div class="line"><span class="meta"><span class="meta-keyword">$cat</span> package.xml</span></div></pre></td></tr></table></figure></p>
<p>package.xml内容：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span>&gt;</span></div><div class="line">...</div><div class="line"> <span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>列出所有的间接依赖包：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rospack</span> depends beginner_tutorials</span></div><div class="line">cpp_common</div><div class="line">rostime</div><div class="line">roscpp_traits</div><div class="line">roscpp_serialization</div><div class="line">genmsg</div><div class="line">genpy</div><div class="line">message_runtime</div><div class="line">rosconsole</div><div class="line">std_msgs</div><div class="line">rosgraph_msgs</div><div class="line">xmlrpcpp</div><div class="line">roscpp</div><div class="line">rosgraph</div><div class="line">catkin</div><div class="line">rospack</div><div class="line">roslib</div><div class="line">rospy</div></pre></td></tr></table></figure></p>
<h1 id="自定义程序包"><a href="#自定义程序包" class="headerlink" title="自定义程序包"></a>自定义程序包</h1><p>修改 <em>package.xml</em>, 更新必要的信息。<br>描述标签：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>The beginner_tutorials package<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>将描述信息修改为任何喜欢的内容，但是按照约定第一句话应该简短一些，因为它覆盖了程序包的范围。如果用一句话难以描述完全那就需要换行了。<br>维护者标签：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!-- One maintainer tag required, multiple allowed, one person per tag --&gt;</span> </div><div class="line"><span class="comment">&lt;!-- Example:  --&gt;</span></div><div class="line"><span class="comment">&lt;!-- &lt;maintainer email="jane.doe@example.com"&gt;Jane Doe&lt;/maintainer&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">"user@todo.todo"</span>&gt;</span>user<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这是 <em>package.xml</em> 中要求填写的一个重要标签，因为它能够让其他人联系到程序包的相关人员。至少需要填写一个维护者名称，但如果有需要的话你可以添加多个。除了在标签里面填写维护者的名称外，还应该在标签的 <em>email</em> 属性中填写邮箱地址。<br>许可标签：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- One license tag required, multiple allowed, one license per tag --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Commonly used license strings: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">license</span>&gt;</span>TODO<span class="tag">&lt;/<span class="name">license</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>选择一种许可协议并将它填写到这里。一些常见的开源许可协议有BSD、MIT、Boost Software License、GPLv2、GPLv3、LGPLv2.1和LGPLv3。可以在 <a href="https://opensource.org/licenses/alphabetical" target="_blank" rel="external">Open Source Initiative</a> 中获取许可协议的相关信息。我们使用BSD协议，因为ROS核心组件的剩余部分已经使用了该协议。<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">license</span>&gt;</span>BSD<span class="tag">&lt;/<span class="name">license</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>依赖项标签：<br>依赖项标签用来描述程序包的各种依赖项，包括 build_depend、buildtool_depend、run_depend、test_depend。<br>关于这些标签的更详细介绍请参考 <a href="http://wiki.ros.org/catkin/package.xml#Build.2C_Run.2C_and_Test_Dependencies" target="_blank" rel="external">Catkin Dependencies</a> 相关的文档。在之前的操作中，因为我们将 std_msgs、 roscpp、 和 rospy 作为 catkin_create_pkg 命令的参数，所以生成的依赖项看起来如下:<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- The *_depend tags are used to specify dependencies --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Dependencies can be catkin packages or system dependencies --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Examples: --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Use build_depend for packages you need at compile time: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   &lt;build_depend&gt;genmsg&lt;/build_depend&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Use buildtool_depend for build tool packages: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Use run_depend for packages you need at runtime: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   &lt;run_depend&gt;python-yaml&lt;/run_depend&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Use test_depend for packages you need only for testing: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   &lt;test_depend&gt;gtest&lt;/test_depend&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>除了 <em>catkin</em> 中默认提供的 <em>buildtool_depend</em>，所有我们列出的依赖包都已经被添加到 <em>build_depend</em> 标签中。因为在编译和运行时我们需要用到所有指定的依赖包，因此还需要将每一个依赖包分别添加到 <em>run_depend</em> 标签中:<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>完整的 <a href="http://wiki.ros.org/catkin/package.xml" target="_blank" rel="external">package.xml</a> :<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line">   <span class="tag">&lt;<span class="name">package</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>beginner_tutorials<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">description</span>&gt;</span>The beginner_tutorials package<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">   </div><div class="line">     <span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">"you@yourdomain.tld"</span>&gt;</span>Your Name<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">license</span>&gt;</span>BSD<span class="tag">&lt;/<span class="name">license</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">url</span> <span class="attr">type</span>=<span class="string">"website"</span>&gt;</span>http://wiki.ros.org/beginner_tutorials<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">author</span> <span class="attr">email</span>=<span class="string">"you@yourdomain.tld"</span>&gt;</span>Jane Doe<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇学习 ROS 程序包的创建，使用工具 &lt;a href=&quot;http://wiki.ros.org/catkin/commands/catkin_create_pkg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;catkin_create_pkg&lt;/a&gt; 创建新程序包。&lt;/p&gt;
&lt;h1 id=&quot;ROS程序包的组成&quot;&gt;&lt;a href=&quot;#ROS程序包的组成&quot; class=&quot;headerlink&quot; title=&quot;ROS程序包的组成&quot;&gt;&lt;/a&gt;ROS程序包的组成&lt;/h1&gt;&lt;p&gt; ROS 程序包必须包含 &lt;a href=&quot;http://wiki.ros.org/catkin/package.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;package.xml&lt;/a&gt; 文件和 &lt;a href=&quot;http://wiki.ros.org/catkin/CMakeLists.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CMakeLists.txt&lt;/a&gt; 文件。&lt;em&gt;package.xml&lt;/em&gt; 提供有关程序包的元信息，每个目录下只能有一个程序包：&lt;br&gt;   &lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;beginner_tutorials/ &lt;/span&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;meta&quot;&gt;include&lt;/span&gt;/                   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; msg/                       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; src/                        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; srv/                       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; CMakeLists.txt              &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; package.xml&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://stevenshi.me/categories/ROS/"/>
    
    
      <category term="catkin_create_pkg" scheme="http://stevenshi.me/tags/catkin-create-pkg/"/>
    
  </entry>
  
</feed>
