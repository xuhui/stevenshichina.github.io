<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[STM32F103驱动ADS1118]]></title>
      <url>/2017/09/07/stm32-ads1118/</url>
      <content type="html"><![CDATA[<p>ADS1118 作为常用温度测量芯片被越来越多的开发者熟知，TI官方给出的是基于 MSP430 的驱动测试程序，由于 STM32 的普及，闲暇中移植了 MSP430 的 ADS1118 驱动程序到 STM32F103 平台下，并进行了测试，特在此记录，以飨读者。<br><a id="more"></a></p>
<h1 id="硬件连接"><a href="#硬件连接" class="headerlink" title="硬件连接"></a>硬件连接</h1><p>使用 STM32F103 的 SPI2 接口连接 ADS1118 的通信接口：</p>
<table>
<thead>
<tr>
<th>STM32F103</th>
<th>ADS1118</th>
</tr>
</thead>
<tbody>
<tr>
<td>PB12</td>
<td>CS</td>
</tr>
<tr>
<td>PB13</td>
<td>SCLK</td>
</tr>
<tr>
<td>PB14</td>
<td>DOUT</td>
</tr>
<tr>
<td>PB15</td>
<td>DIN</td>
</tr>
</tbody>
</table>
<p>ADS1118 手册建议数据线之间接一个50欧电阻，实际测试可不接。ADS1118 电源接3.3V并加滤波电容。</p>
<h1 id="spi-配置"><a href="#SPI-配置" class="headerlink" title="SPI 配置"></a>SPI 配置</h1><p>ADS1118 接口的时序要求如图：<br><img src="/2017/09/07/stm32-ads1118/time.png" alt=""></p>
<p>DIN 接口接收控制器送过来的配置数据，并且在 SCLK 的下降沿将数据锁存读入 ADS1118 内部，并且在 SCLK 的上升沿中将数据送出到 DOUT。基于此将 STM32F103 的 SPI 接口做如下配置，CPOL=0，CPHA = 1;<br>　　<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">void SPI_config(void)&#123;</div><div class="line">	SPI_Cmd(SPI_MASTER, DISABLE);//配置之前先关闭SPI接口</div><div class="line"></div><div class="line">	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;<span class="comment">//全双工</span></div><div class="line">	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;<span class="comment">//主模式</span></div><div class="line">	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;<span class="comment">//8bits</span></div><div class="line">	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;<span class="comment">// CPOL=0</span></div><div class="line">	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;<span class="comment">//CPHA=1</span></div><div class="line">	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;<span class="comment">//CS设置为软件配置</span></div><div class="line">	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;<span class="comment">//通信速率</span></div><div class="line">	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;<span class="comment">//高位在前</span></div><div class="line">	SPI_InitStructure.SPI_CRCPolynomial = <span class="number">7</span>;</div><div class="line">	SPI_Init(SPI_MASTER, &amp;SPI_InitStructure);</div><div class="line">	</div><div class="line">	SPI_Cmd(SPI_MASTER, ENABLE);//配置完成使能SPI接口</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对应 GPIO 的配置：<br>　　<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> SPI<span class="number">_G</span>PIO<span class="number">_</span>Configuration(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">	GPIO<span class="number">_</span>InitTypeDef GPIO<span class="number">_</span>InitStructure;</div><div class="line"></div><div class="line">	<span class="comment">/* Configure SPI_MASTER pins-*/</span></div><div class="line"></div><div class="line">	<span class="comment">// Pin PB13 (SCLK) must be configured as as 50MHz push pull</span></div><div class="line">	GPIO<span class="number">_</span>StructInit(&amp;GPIO<span class="number">_</span>InitStructure);</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_P</span><span class="keyword">in</span> = SPI<span class="number">_M</span>ASTER<span class="number">_P</span>IN<span class="number">_</span>SCK;</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_M</span>ode = GPIO<span class="number">_M</span>ode<span class="number">_</span>AF<span class="number">_P</span>P;</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_</span>Speed = GPIO<span class="number">_</span>Speed<span class="number">_50M</span>Hz;</div><div class="line">	GPIO<span class="number">_</span>Init(SPI<span class="number">_M</span>ASTER<span class="number">_G</span>PIO, &amp;GPIO<span class="number">_</span>InitStructure);</div><div class="line"></div><div class="line">	<span class="comment">// Pin PB14 (MISO) must be configured as as input pull-up</span></div><div class="line">	GPIO<span class="number">_</span>StructInit(&amp;GPIO<span class="number">_</span>InitStructure);</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_P</span><span class="keyword">in</span> = SPI<span class="number">_M</span>ASTER<span class="number">_P</span>IN<span class="number">_M</span>ISO;</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_M</span>ode = GPIO<span class="number">_M</span>ode<span class="number">_</span>IN<span class="number">_</span>FLOATING;</div><div class="line">	GPIO<span class="number">_</span>Init(SPI<span class="number">_M</span>ASTER<span class="number">_G</span>PIO, &amp;GPIO<span class="number">_</span>InitStructure);</div><div class="line"></div><div class="line">	<span class="comment">// Pin PB15 (MOSI) must be configured as as 50MHz push pull</span></div><div class="line">	GPIO<span class="number">_</span>StructInit(&amp;GPIO<span class="number">_</span>InitStructure);</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_P</span><span class="keyword">in</span> = SPI<span class="number">_M</span>ASTER<span class="number">_P</span>IN<span class="number">_M</span>OSI;</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_M</span>ode = GPIO<span class="number">_M</span>ode<span class="number">_</span>AF<span class="number">_P</span>P;</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_</span>Speed = GPIO<span class="number">_</span>Speed<span class="number">_50M</span>Hz;</div><div class="line">	GPIO<span class="number">_</span>Init(SPI<span class="number">_M</span>ASTER<span class="number">_G</span>PIO, &amp;GPIO<span class="number">_</span>InitStructure);</div><div class="line">	</div><div class="line">	<span class="comment">//SPI1 NSS </span></div><div class="line">	GPIO<span class="number">_</span>StructInit(&amp;GPIO<span class="number">_</span>InitStructure);</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_P</span><span class="keyword">in</span> = SPI<span class="number">_M</span>ASTER<span class="number">_P</span>IN<span class="number">_</span>NSS;</div><div class="line">	GPIO<span class="number">_</span>InitStructure.GPIO<span class="number">_M</span>ode = GPIO<span class="number">_M</span>ode<span class="number">_</span>Out<span class="number">_P</span>P;</div><div class="line">	GPIO<span class="number">_</span>Init(SPI<span class="number">_M</span>ASTER<span class="number">_G</span>PIO, &amp;GPIO<span class="number">_</span>InitStructure);</div><div class="line"></div><div class="line">	GPIO<span class="number">_</span>SetBits(SPI<span class="number">_M</span>ASTER<span class="number">_G</span>PIO, SPI<span class="number">_M</span>ASTER<span class="number">_P</span>IN<span class="number">_</span>NSS);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另外记得使能端口时钟：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI_RCC_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">	<span class="comment">/* Enable GPIO clock for SPI_MASTER */</span></div><div class="line">	RCC_APB2PeriphClockCmd(SPI_MASTER_GPIO_CLK | RCC_APB2Periph_AFIO, ENABLE);</div><div class="line">	<span class="comment">/* Enable SPI_MASTER Periph clock */</span></div><div class="line">	RCC_APB1PeriphClockCmd(SPI_MASTER_CLK, ENABLE); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="读写实现"><a href="#读写实现" class="headerlink" title="读写实现"></a>读写实现</h1><p>ADS1118 在发送寄存器配置的同时会传输转换结果，手册中提到既支持16bits 模式也支持32bits模式。</p>
<p>16bits模式：</p>
<p><img src="/2017/09/07/stm32-ads1118/16bits.png" alt=""></p>
<p>32bits模式：</p>
<p><img src="/2017/09/07/stm32-ads1118/32bits.png" alt=""></p>
<p>DIN 接口接收寄存器配置的同时DOUT接口输出转换结果，在32bits模式下发送完寄存器配置后第二次可以发送数据0，具体可参考手册。基于此设计数据发送读取函数：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//读写寄存器16bits模式</span></div><div class="line"><span class="keyword">uint16_t</span> SPI_read_write_Reg(<span class="keyword">uint16_t</span> CofigReg)</div><div class="line">&#123;</div><div class="line"></div><div class="line">	getdata1=SPI_send_Byte((<span class="keyword">uint8_t</span>)(CofigReg&gt;&gt;<span class="number">8</span>));</div><div class="line">	getdata2=SPI_send_Byte((<span class="keyword">uint8_t</span>)CofigReg);</div><div class="line"></div><div class="line">	getdata= (<span class="keyword">uint16_t</span>)getdata2|((<span class="keyword">uint16_t</span>)getdata1&lt;&lt;<span class="number">8</span>);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> getdata;</div><div class="line">&#125;</div><div class="line"><span class="keyword">uint8_t</span> SPI_send_Byte(<span class="keyword">uint8_t</span> byte)</div><div class="line">&#123;</div><div class="line"> </div><div class="line">	<span class="keyword">while</span>(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET)&#123;&#125;</div><div class="line">	</div><div class="line">	SPI_I2S_SendData(SPI2, byte);</div><div class="line">	</div><div class="line">	<span class="keyword">while</span>(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)&#123;&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> SPI_I2S_ReceiveData(SPI2);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>获取 ADS1118 的片内温度需要将 ADS1118 的寄存器的第4bit修改为1，启动单次转换将第15bit写1即可：<br>　　<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">float</span> ads1118_get_temperature(void)</div><div class="line">&#123;</div><div class="line">	uint16_t <span class="keyword">adc=0;</span></div><div class="line">	float value<span class="number">=0</span><span class="comment">;</span></div><div class="line">	adsConfigReg.<span class="keyword">stru.NOP </span>    =  DATA_VALID<span class="comment">;</span></div><div class="line">	adsConfigReg.<span class="keyword">stru.TS_MODE </span>=  TEMPERATURE_MODE<span class="comment">;</span></div><div class="line">	adsConfigReg.<span class="keyword">stru.DR </span>     =  DR_8_SPS<span class="comment">;</span></div><div class="line">	adsConfigReg.<span class="keyword">stru.MODE </span>   =  SIGNLE_SHOT<span class="comment">;</span></div><div class="line">	adsConfigReg.<span class="keyword">stru.OS </span>     =  SINGLE_CONVER_START<span class="comment">;   </span></div><div class="line">	</div><div class="line">	ADS1118_ENABLE<span class="comment">;</span></div><div class="line"> </div><div class="line">	<span class="keyword">adc </span>= SPI_read_write_Reg(adsConfigReg<span class="meta">.word</span>)<span class="comment">;</span></div><div class="line">	</div><div class="line">	//conver to temperture</div><div class="line">	<span class="meta">if</span>(<span class="keyword">adc&amp;0x8000)</span></div><div class="line">	&#123;</div><div class="line">		//-xx.xxx c</div><div class="line">		<span class="keyword">adc&gt;&gt;=2;</span></div><div class="line">		value=(<span class="number">0x3fff</span>-<span class="keyword">adc+1)*(-0.03125);</span></div><div class="line">	&#125;</div><div class="line">	<span class="meta">else</span></div><div class="line">	&#123;</div><div class="line">		//+xx.xxx c</div><div class="line">		<span class="keyword">adc&gt;&gt;=2;</span></div><div class="line">		value<span class="symbol">=adc</span>*<span class="number">0</span>.<span class="number">03125</span><span class="comment">;     </span></div><div class="line">	&#125;</div><div class="line">	ADS1118_DISABLE<span class="comment">;</span></div><div class="line">	return value<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ADS1118默认开启ADC模式，通过配置寄存器的12-14bit可以选择开启哪个通道，具体可参考手册。另外关于片内温度模式时，使用的是14bit左对齐模式。而且ADS1118的转换结果中，负数使用二进制补码格式，因此需要做一个转换，每个值代表0.03125℃<br>关于详细的代码可参考<a href="https://github.com/StevenShiChina/stm32-ads1118" target="_blank" rel="external">mygithub</a>，测试中的SPI通信数据：</p>
<p><img src="/2017/09/07/stm32-ads1118/spi.png" alt=""></p>
<p>测试时没有连接4路输入模拟量的输入，交替采集片内温度传感器的值：<br><img src="/2017/09/07/stm32-ads1118/result.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> STM32F103 ADS1118 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[STM32如何在DMA模式下实现printf]]></title>
      <url>/2017/09/06/stm32-dma-printf/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在调试stm32f103芯片时，想在串口打印一些调试信息，总感觉没有linux下那么顺手。搜索一番，官方有解决方案，但限于使用一般串口模式，而如果使用DMA则实现起来麻烦一些，为了在DMA模式下使用printf，特做此记录。<br><a id="more"></a></p>
<h1 id="一般模式"><a href="#一般模式" class="headerlink" title="一般模式"></a>一般模式</h1><p>一般模式下，就是重定义fputc函数，将输出重定向至串口。首先包含头文件 stdio.h,然后重写fputc函数：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __GNUC__</span></div><div class="line"><span class="comment">/* With GCC/RAISONANCE, small printf (option LD Linker-&gt;Libraries-&gt;Small printf set to 'Yes') calls __io_putchar() */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PUTCHAR_PROTOTYPE int __io_putchar(int ch)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __GNUC__ */</span></span></div><div class="line">PUTCHAR_PROTOTYPE</div><div class="line">&#123;</div><div class="line">  <span class="comment">/* Place your implementation of fputc here */</span></div><div class="line">  <span class="comment">/* e.g. write a character to the USART */</span></div><div class="line">  USART_SendData(USART1, (<span class="keyword">uint8_t</span>) ch);</div><div class="line">  <span class="comment">/* Loop until the end of transmission */</span></div><div class="line">  <span class="keyword">while</span> (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);</div><div class="line">	</div><div class="line">  <span class="keyword">return</span> ch;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样在使用printf函数时，会自动调用fputc函数。另外在工程属性的 “Target” -&gt; “Code Generation” 选项中勾选 “Use MicroLIB”</p>
<h1 id="dma模式"><a href="#DMA模式" class="headerlink" title="DMA模式"></a>DMA模式</h1><p>如果串口使用的是DMA发送，如何实现printf功能呢？串口使用DMA发送数据时，只需要将发送缓存的首地址以及数据长度给DMA即可。那么只要计算出printf要发送的数据首地址与长度也就可以给DMA去发送了。我们可以将要发送的数据放到一个队列里，CPU只负责搬运该数据，将数据的长度与首地址交给DMA即可实现printf的功能。我们简单的修改一下fputc函数：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">PUTCHAR_PROTOTYPE</div><div class="line">&#123;</div><div class="line">  <span class="comment">/* Place your implementation of fputc here */</span></div><div class="line">  <span class="comment">/* e.g. write a character to the USART */</span></div><div class="line">  <span class="comment">//USART_SendData(USART1, (uint8_t) ch);</span></div><div class="line">  <span class="comment">/* Loop until the end of transmission */</span></div><div class="line"> <span class="comment">// while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);</span></div><div class="line">  remote_data_x_usart_In_Queue((<span class="keyword">uint8_t</span>)ch);<span class="comment">//将要发送的数据放入环形队列中</span></div><div class="line">  <span class="keyword">return</span> ch;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另外设计一个函数将数据从队列中取出，并将数据的首地址和长度给DMA：<br>　　<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">int</span> remote_data_x_usart_dma_ctl(<span class="keyword">void</span>) </div><div class="line">&#123; 	</div><div class="line">	uint32_t <span class="built_in">num</span>=<span class="number">0</span>; 	uint8_t data; 	</div><div class="line">	<span class="keyword">if</span>(DMA_GetCurrDataCounter(USARTm_Tx_DMA_Channe)==<span class="number">0</span>) </div><div class="line">	&#123;</div><div class="line">		DMA_Cmd(USARTm_Tx_DMA_Channe,DISABLE); 		</div><div class="line">		<span class="keyword">while</span>((remote_data_x_usart_Out_Queue(&amp;data))!=<span class="number">0</span>)<span class="comment">//数据出列	</span></div><div class="line">		&#123;	 			</div><div class="line">			USARTmTxBuffer[<span class="built_in">num</span>]=data; 			</div><div class="line">			<span class="built_in">num</span>++; 			</div><div class="line">			<span class="keyword">if</span>(<span class="built_in">num</span>==USARTm_Tx_BUFFER_SIZE) 			</div><div class="line">				<span class="keyword">break</span>; 		</div><div class="line">		&#125; 		</div><div class="line">		<span class="keyword">if</span>(<span class="built_in">num</span>&gt;<span class="number">0</span>) 		</div><div class="line">		&#123; 			</div><div class="line">			remote_data_x_usart_dma_start_tx((uint32_t)USARTmTxBuffer,<span class="built_in">num</span>);<span class="comment">//将数据首地址与长度给DMA</span></div><div class="line">		&#125; 		</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>; 	</div><div class="line">	&#125; 	</div><div class="line">	<span class="keyword">else</span> 	</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样即可实现DMA模式下的 printf 功能。不过每次调用printf时必须调用一次 remote_data_x_usart_dma_ctl 函数。为了减少麻烦可以将该函数放到 sysTick 中断中，让CPU每次判断队列是否不为空，这样可能会降低系统效率，但也没降低多少性能。<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (usTicks != <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		usTicks--;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	remote_data_x_usart_dma_ctl();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>数据的入列与出列可以简单设置如下：<br>　　<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将数据插入队列</span></div><div class="line">uint32_t remote_data_x_usart_In_Queue(uint8_t <span class="keyword">data</span>) </div><div class="line">&#123; 	</div><div class="line">	<span class="keyword">if</span>(USARTm_Tx_Buf_Queue.USARTm_Tx_COUNTER &lt;USARTm_Tx_BUFFER_SIZE)<span class="comment">//判断队列是否满，不满才进行以下操作</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(USARTm_Tx_Buf_Queue.USARTm_Tx_PTR_HEAD &gt;= USARTm_Tx_BUFFER_SIZE) <span class="comment">//队列头指针超出队列宽度</span></div><div class="line">				USARTm_Tx_Buf_Queue.USARTm_Tx_PTR_HEAD = <span class="number">0</span>; <span class="comment">//头指针归零 		</span></div><div class="line">			USARTm_Tx_Buf_Queue.USARTm_Tx_Buffer[USARTm_Tx_Buf_Queue.USARTm_Tx_PTR_HEAD] = <span class="keyword">data</span>; <span class="comment">//将数据入列		</span></div><div class="line">			USARTm_Tx_Buf_Queue.USARTm_Tx_PTR_HEAD++; 	<span class="comment">//头指针移动加一	</span></div><div class="line">			USARTm_Tx_Buf_Queue.USARTm_Tx_COUNTER++;  	<span class="comment">//队列宽度加一</span></div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>; 	</div><div class="line">		&#125; 		</div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>;	 	 </div><div class="line">&#125;</div><div class="line"><span class="comment">//从队列中获取一个数</span></div><div class="line">uint32_t remote_data_x_usart_Out_Queue(uint8_t *<span class="keyword">data</span>) </div><div class="line">&#123; 	</div><div class="line">	uint32_t num;</div><div class="line">	<span class="keyword">if</span>(USARTm_Tx_Buf_Queue.USARTm_Tx_COUNTER &gt; <span class="number">0</span>) 	<span class="comment">//判断队列是否为空，不为空才能提取</span></div><div class="line">		&#123; 		</div><div class="line">			<span class="keyword">if</span>(USARTm_Tx_Buf_Queue.USARTm_Tx_PTR_TAIL &gt;= USARTm_Tx_BUFFER_SIZE)<span class="comment">//盘对尾指针是否超出队列宽度			</span></div><div class="line">				USARTm_Tx_Buf_Queue.USARTm_Tx_PTR_TAIL = <span class="number">0</span>;<span class="comment">//超出就归零</span></div><div class="line">			num = USARTm_Tx_Buf_Queue.USARTm_Tx_COUNTER;<span class="comment">//获取队列宽度	</span></div><div class="line">			*<span class="keyword">data</span> = USARTm_Tx_Buf_Queue.USARTm_Tx_Buffer[USARTm_Tx_Buf_Queue.USARTm_Tx_PTR_TAIL]; <span class="comment">//获取一个数据	</span></div><div class="line">			USARTm_Tx_Buf_Queue.USARTm_Tx_PTR_TAIL++; <span class="comment">//尾指针移动加一	</span></div><div class="line">			USARTm_Tx_Buf_Queue.USARTm_Tx_COUNTER--; <span class="comment">//数据被提取，队列宽度减一		</span></div><div class="line">			<span class="keyword">return</span> num; <span class="comment">//返回队列宽度</span></div><div class="line">		&#125; 	</div><div class="line">	<span class="keyword">else</span> 	</div><div class="line">		&#123; 		</div><div class="line">			*<span class="keyword">data</span> = <span class="number">0xFF</span>;<span class="comment">//队列为空填充一个值</span></div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//返回队列宽度</span></div><div class="line">		&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于DMA的配置可参考STM32官方库，或者可以参考我的 <a href="https://github.com/StevenShiChina/stm32-ads1118/blob/master/User/remote_data_x.c" target="_blank" rel="external">remote_data_x.c</a> 以及 <a href="https://github.com/StevenShiChina/stm32-ads1118/blob/master/User/remote_data_x.h" target="_blank" rel="external">remote_data_x.h</a> </p>
<p>测试时sysTick设置的是1ms中断，系统连接一个ADS1118采集4路模拟量并采集片内温度，显示效果：</p>
<p><img src="/2017/09/06/stm32-dma-printf/printf.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> STM32 DMA Printf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[也来聊聊CAN总线]]></title>
      <url>/2017/08/24/can-bus/</url>
      <content type="html"><![CDATA[<h1 id="can-的特点"><a href="#CAN-的特点" class="headerlink" title="CAN 的特点"></a>CAN 的特点</h1><p>为什么汽车行业都用 CAN 总线？它有什么特点？它为什么能存在于工业界这么多年至今仍被广泛应用着？它到底有什么过人之处？因项目需要，重拾 CAN 总线，关于 CAN 的资料浩如烟海，这里只聊干货。<br><a id="more"></a></p>
<h2 id="差分传输"><a href="#差分传输" class="headerlink" title="差分传输"></a>差分传输</h2><p>由于 CAN 总线使用差分信号传输，只需要三根线，CAN_H,CAN_L,GND，其中 GND 作为屏蔽层使用。这种设计方式使得它的传输距离远、可靠性高，最远可达10公里，最高速率可达 1Mbps 。</p>
<h2 id="多主结构"><a href="#多主结构" class="headerlink" title="多主结构"></a>多主结构</h2><p>由于 CAN 设备不需要使用地址标识每个挂接在总线上的设备，它是基于内容的寻址方式，只需要ID来标识，因此 CAN 总线上的设备没有主从之分，任意节点都可以发起通信；</p>
<h2 id="错误检测"><a href="#错误检测" class="headerlink" title="错误检测"></a>错误检测</h2><p>出错的 CAN 节点可自动切断与总线的连接，不影响其他节点通信；如果自身错误超过128个，CAN 节点就会自动关闭，切断与总线的连接。</p>
<h1 id="仲裁"><a href="#仲裁" class="headerlink" title="仲裁"></a>仲裁</h1><p>CAN 总线上的设备不分主从，任意设备都可以主动发送消息到总线，所有挂接在总线上的设备都可以收到该消息；CAN 设备具有载波侦听功能，即设备在发送报文前会先监听总线状态，当总线处于空闲时才会使能发送。CAN 总线使用仲裁来判定哪个节点最终拥有总线使用权，它利用线与特性，当某一时刻出现两个或以上的节点同时操作总线时，CAN 设备在发送消息的同时也检测总线状态，如果自己发送的数据与检测回来的数据不同，则主动放弃总线使用权。当一个节点发送1，另外一节点发送0时，则线与后总线为0，那么发送0的节点则拥有了总线使用权，它可以继续发送数据，而发送1的节点则退出总线使用权。举例说明该情况，假如某一时刻有两个 CAN 节点同时操作总线，消息的前面都会附加11位的 ID 新版提升为29位，这个 ID 决定了消息的优先级，ID 数字越小优先级则越高：<br>   <figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">节点  ID </div><div class="line"> <span class="keyword">A</span>    <span class="number">11110001000</span></div><div class="line"> B    <span class="number">11101110111</span></div><div class="line">总线   <span class="number">11100000000</span></div></pre></td></tr></table></figure></p>
<p>如上面，两个节点A B 同时发送信息，在发送到 ID 的第4位时，B节点发送的是0，A节点发送的是1，线与之后总线为0，因此B节点获取了总线使用权，A节点退出。CAN 总线上的0称为显性，1称为隐性，因为0总是拥有总线使用权。总线上的设备都可以接收任意节点发来的消息，根据ID号判断消息是否是自己需要的，如果发现ID号与自己需要的信息不符，则主动放弃接收，因此它是基于内容的寻址方式。</p>
<h1 id="数据帧结构"><a href="#数据帧结构" class="headerlink" title="数据帧结构"></a>数据帧结构</h1><p><img src="/2017/08/24/can-bus/dataframe.png" alt=""><br>这张图片摘自 wikipedia,CAN 数据的帧结构包括仲裁、控制域、数据域、CRC校验以及结束部分。</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CAN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS通过串口控制移动底座]]></title>
      <url>/2017/07/18/control-mobile-base-by-serial/</url>
      <content type="html"><![CDATA[<p>移动底座与ROS上层的通信一般采用串口或者CAN接口，本次设计选用串口与ROS上层通信。Navigation Stack 中发布给 base_controller 的话题为 cmd_vel ，因此需要设计一个节点用于接收 cmd_vel 话题，获取该话题中的消息将其转换成移动底座可识别的速度及角速度指令，通过串口发送给移动底座，从而控制移动底座按既定要求运动。该节点还需要接收底座的通过串口上传过来的里程编码消息并转换成里程计消息发布到 ROS 上层，为 ROS 导航提供必须的里程计消息。<br><a id="more"></a></p>
<h1 id="订阅cmd_vel话题"><a href="#订阅cmd-vel话题" class="headerlink" title="订阅cmd_vel话题"></a>订阅cmd_vel话题</h1><p>设计一个节点，我们暂时命名为 my_serial_node ,在该节点中借助 <a href="https://github.com/wjwwood/serial" target="_blank" rel="external">ros-serial</a> 实现串口的收发功能，并订阅话题 cmd_vel, 为了方便测试我们这里暂时订阅 /turtle1/cmd_vel 话题，详细看代码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;serial/serial.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;std_msgs/String.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;std_msgs/Empty.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;geometry_msgs/Twist.h&gt;</span></span></div><div class="line"> </div><div class="line">serial::Serial ser;</div><div class="line"> </div><div class="line"><span class="comment">//订阅turtle1/cmd_vel话题的回调函数，用于显示速度以及角速度</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cmd_vel_callback</span><span class="params">(<span class="keyword">const</span> geometry_msgs::Twist&amp; cmd_vel)</span></span>&#123;</div><div class="line">    ROS_INFO(<span class="string">"I heard linear velocity: x-[%f],y-[%f],"</span>,cmd_vel.linear.x,cmd_vel.linear.y);</div><div class="line">    ROS_INFO(<span class="string">"I heard angular velocity: [%f]"</span>,cmd_vel.angular.z);</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Twist Received"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line">    ros::init(argc, argv, <span class="string">"my_serial_node"</span>);</div><div class="line">    ros::NodeHandle nh;</div><div class="line"> </div><div class="line">    </div><div class="line">    <span class="comment">//订阅/turtle1/cmd_vel话题用于测试 $ rosrun turtlesim turtle_teleop_key</span></div><div class="line">    ros::Subscriber write_sub = nh.subscribe(<span class="string">"/turtle1/cmd_vel"</span>,<span class="number">1000</span>,cmd_vel_callback);</div><div class="line">    ros::Publisher read_pub = nh.advertise&lt;std_msgs::String&gt;(<span class="string">"sensor"</span>, <span class="number">1000</span>);</div><div class="line"> </div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">        ser.setPort(<span class="string">"/dev/ttyUSB0"</span>);</div><div class="line">        ser.setBaudrate(<span class="number">115200</span>);</div><div class="line">        serial::Timeout to = serial::Timeout::simpleTimeout(<span class="number">1000</span>);</div><div class="line">        ser.setTimeout(to);</div><div class="line">        ser.open();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (serial::IOException&amp; e)</div><div class="line">    &#123;</div><div class="line">        ROS_ERROR_STREAM(<span class="string">"Unable to open port "</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span>(ser.isOpen())&#123;</div><div class="line">        ROS_INFO_STREAM(<span class="string">"Serial Port initialized"</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>可以通过以下方式简单的测试一下订阅的话题是否可行：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtle_teleop_key</span></div></pre></td></tr></table></figure></p>
<p>在另外一个 terminal 中运行上面的节点:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun my_serial_node my_serial_node</span></div></pre></td></tr></table></figure></p>
<p>当用手按下上下左右方向键时会看到实时的打印速度信息：<br><img src="/2017/07/18/control-mobile-base-by-serial/cmd_vel.jpg" alt=""></p>
<h1 id="串口发送"><a href="#串口发送" class="headerlink" title="串口发送"></a>串口发送</h1><p>节点订阅了 cmd_vel 话题，将速度、角速度数据提取出来之后，需要将这些信息以固定的协议格式通过串口送至移动底座，移动底座接收该命令并执行该命令。这里的协议格式可自行定义，本次开发定义格式如下：</p>
<table>
<thead>
<tr>
<th>head</th>
<th>head</th>
<th>A-speed</th>
<th>B-speed</th>
<th>C-speed</th>
<th>CRC</th>
</tr>
</thead>
<tbody>
<tr>
<td>0xff</td>
<td>0xfe</td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>u8</td>
</tr>
</tbody>
</table>
<p>因此串口发送的总字节数是15字节，在获取到cmd_vel话题后提取有效数据并打包送至底层，串口发送借助 <a href="https://github.com/wjwwood/serial" target="_blank" rel="external">ros-serial</a> 的 write 函数功能即可。<br>　　<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">serial.<span class="built_in">write</span>(<span class="built_in">buffer</span>,buffersize)</div></pre></td></tr></table></figure></p>
<h1 id="串口接收与发布-odometry-话题"><a href="#串口接收与发布-odometry-话题" class="headerlink" title="串口接收与发布 odometry 话题"></a>串口接收与发布 odometry 话题</h1><p>设计本节点还需要通过串口从移动底座获取里程计信息，并发布该里程计信息，为 Navigation stack 提供必要的 odometry 信息。串口接收的数据格式定义如下：</p>
<table>
<thead>
<tr>
<th>head</th>
<th>head</th>
<th>x-position</th>
<th>y-position</th>
<th>x-speed</th>
<th>y-speed</th>
<th>angular-speed</th>
<th>pose-angular</th>
<th>CRC</th>
</tr>
</thead>
<tbody>
<tr>
<td>0xff</td>
<td>0xae</td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>u8</td>
</tr>
</tbody>
</table>
<p>因此串口接收数据总字节数为27字节，串口接收完成后通过校验分析数据无误后，提取对应数据填充到 odometry 消息中，并发布出去。串口接收 <a href="https://github.com/wjwwood/serial" target="_blank" rel="external">ros-serial</a> 提供了很多接口函数，因为底层发送的都是16进制格式，因此数据接收我选择了 Serial::read (uint8_t *buffer, size_t size) 函数，这个可以从 <a href="https://github.com/wjwwood/serial" target="_blank" rel="external">ros-serial</a> 的源码中查到。里程计消息的发布可以参考站内文章: <a href="/2017/07/07/ros-primary-tutorial-15/" title="ROS初级十五 发布里程计消息">ROS初级十五 发布里程计消息</a><br>贴一下本次设计的串口节点的完整代码：<br>　　<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span></span></span></div><div class="line"> * 串口节点，订阅cmd_vel话题并发布odometry话题</div><div class="line"> * 从cmd_vel话题中分解出速度值通过串口送到移动底盘</div><div class="line"> * 从底盘串口接收里程消息整合到odometry话题用于发布</div><div class="line"> * 针对于三轮全向轮底盘 三个轮子120°排列</div><div class="line"> * @StevenShi</div><div class="line"> <span class="bullet">* *</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>/</div><div class="line">#include &lt;ros/ros.h&gt;</div><div class="line">#include &lt;serial/serial.h&gt;</div><div class="line">#include &lt;std_msgs/<span class="built_in">String</span>.h&gt;</div><div class="line">#include &lt;std_msgs/Empty.h&gt;</div><div class="line">#include &lt;geometry_msgs/Twist.h&gt;</div><div class="line">#include &lt;nav_msgs/Odometry.h&gt;</div><div class="line">#include &lt;tf/transform_broadcaster.h&gt;</div><div class="line"></div><div class="line">#define	sBUFFERSIZE	<span class="number">15</span><span class="comment">//send buffer size 串口发送缓存长度</span></div><div class="line">#define	rBUFFERSIZE	<span class="number">27</span><span class="comment">//receive buffer size 串口接收缓存长度</span></div><div class="line">unsigned char s_buffer[sBUFFERSIZE];<span class="comment">//发送缓存</span></div><div class="line">unsigned char r_buffer[rBUFFERSIZE];<span class="comment">//接收缓存</span></div><div class="line"></div><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>*</span></span></div><div class="line"> * 串口数据发送格式共15字节</div><div class="line"> * head head A-Speed B-Speed C-Speed CRC</div><div class="line"> * 0xff 0xfe float   float   float   u8</div><div class="line"> <span class="bullet">* *</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</div><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span></span></span></div><div class="line"> * 串口接收数据格式共27字节</div><div class="line"> * head head x-position y-position x-speed y-speed angular-speed pose-angular CRC</div><div class="line"> * 0xff 0xae float      float      float   float   float         float(yaw)   u8</div><div class="line"> <span class="bullet">* *</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>/</div><div class="line"></div><div class="line"><span class="comment">//联合体，用于浮点数与16进制的快速转换</span></div><div class="line"><span class="keyword">typedef</span> union&#123;</div><div class="line">	unsigned char cvalue[<span class="number">4</span>];</div><div class="line">	float fvalue;</div><div class="line">&#125;float_union;</div><div class="line"></div><div class="line">serial::Serial ser;</div><div class="line"></div><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span></span></span></div><div class="line"> * 运动学解析函数 将获取的 x y 方向的线速度以及角速度转变成</div><div class="line"> * 移动底座三个轮子的速度，并通过串口发送出去</div><div class="line"> <span class="bullet">* VA = Vx + L*</span>W</div><div class="line"> <span class="bullet">* VB = -Vx*</span>cosθ + Vy<span class="emphasis">*sinθ + L*</span>W</div><div class="line"> <span class="bullet">* VC = -Vx*</span>cosθ - Vy<span class="emphasis">*sinθ + L*</span>W</div><div class="line"> * θ 为轮子与移动底座坐标系X轴的夹角，此处为60°</div><div class="line"> * VA VB VC 分别为三个轮子的速度</div><div class="line"> * Vx Vy 为移动底座在x y 方向的速度</div><div class="line"> * W 为移动底座绕Z轴的角速度 </div><div class="line"> * L 为三个轮子到移动底座中心的距离 此处为0.15m</div><div class="line"> <span class="bullet">* *</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>/</div><div class="line"><span class="keyword">void</span> kinematics_analysis(<span class="keyword">const</span> geometry_msgs::Twist&amp; cmd_vel)&#123;</div><div class="line">	float_union VA,VB,VC;</div><div class="line">	VA.fvalue = cmd_vel.linear.x + <span class="number">0.15</span>*cmd_vel.angular.z;</div><div class="line">	VB.fvalue = -cmd_vel.linear.x * <span class="number">0.5</span> + cmd_vel.linear.y * <span class="number">0.867</span> + <span class="number">0.15</span>*cmd_vel.angular.z;</div><div class="line">	VC.fvalue = -cmd_vel.linear.x * <span class="number">0.5</span> - cmd_vel.linear.y * <span class="number">0.867</span> + <span class="number">0.15</span>*cmd_vel.angular.z;</div><div class="line">	memset(s_buffer,<span class="number">0</span>,sizeof(s_buffer));</div><div class="line">	<span class="comment">//数据打包</span></div><div class="line">	s_buffer[<span class="number">0</span>] = <span class="number">0xff</span>;</div><div class="line">	s_buffer[<span class="number">1</span>] = <span class="number">0xfe</span>;</div><div class="line">	<span class="comment">//VA</span></div><div class="line">	s_buffer[<span class="number">2</span>] = VA.cvalue[<span class="number">0</span>];</div><div class="line">	s_buffer[<span class="number">3</span>] = VA.cvalue[<span class="number">1</span>];</div><div class="line">	s_buffer[<span class="number">4</span>] = VA.cvalue[<span class="number">2</span>];</div><div class="line">	s_buffer[<span class="number">5</span>] = VA.cvalue[<span class="number">3</span>];</div><div class="line">	<span class="comment">//VB</span></div><div class="line">	s_buffer[<span class="number">6</span>] = VB.cvalue[<span class="number">0</span>];</div><div class="line">	s_buffer[<span class="number">7</span>] = VB.cvalue[<span class="number">1</span>];</div><div class="line">	s_buffer[<span class="number">8</span>] = VB.cvalue[<span class="number">2</span>];</div><div class="line">	s_buffer[<span class="number">9</span>] = VB.cvalue[<span class="number">3</span>];</div><div class="line">	<span class="comment">//VC</span></div><div class="line">	s_buffer[<span class="number">10</span>] = VC.cvalue[<span class="number">0</span>];</div><div class="line">	s_buffer[<span class="number">11</span>] = VC.cvalue[<span class="number">1</span>];</div><div class="line">	s_buffer[<span class="number">12</span>] = VC.cvalue[<span class="number">2</span>];</div><div class="line">	s_buffer[<span class="number">13</span>] = VC.cvalue[<span class="number">3</span>];</div><div class="line">	<span class="comment">//CRC</span></div><div class="line">	s_buffer[<span class="number">14</span>] = s_buffer[<span class="number">2</span>]^s_buffer[<span class="number">3</span>]^s_buffer[<span class="number">4</span>]^s_buffer[<span class="number">5</span>]^s_buffer[<span class="number">6</span>]^s_buffer[<span class="number">7</span>]^</div><div class="line">					s_buffer[<span class="number">8</span>]^s_buffer[<span class="number">9</span>]^s_buffer[<span class="number">10</span>]^s_buffer[<span class="number">11</span>]^s_buffer[<span class="number">12</span>]^s_buffer[<span class="number">13</span>];</div><div class="line">	ser.write(s_buffer,sBUFFERSIZE);</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//接收数据分析与校验</span></div><div class="line">unsigned char data_analysis(unsigned char *buffer)</div><div class="line">&#123;</div><div class="line">	unsigned char ret=<span class="number">0</span>,csum;</div><div class="line">	<span class="comment">//int i;</span></div><div class="line">	<span class="keyword">if</span>((buffer[<span class="number">0</span>]==<span class="number">0xff</span>) &amp;&amp; (buffer[<span class="number">1</span>]==<span class="number">0xae</span>))&#123;</div><div class="line">		csum = buffer[<span class="number">2</span>]^buffer[<span class="number">3</span>]^buffer[<span class="number">4</span>]^buffer[<span class="number">5</span>]^buffer[<span class="number">6</span>]^buffer[<span class="number">7</span>]^</div><div class="line">				buffer[<span class="number">8</span>]^buffer[<span class="number">9</span>]^buffer[<span class="number">10</span>]^buffer[<span class="number">11</span>]^buffer[<span class="number">12</span>]^buffer[<span class="number">13</span>]^</div><div class="line">				buffer[<span class="number">14</span>]^buffer[<span class="number">15</span>]^buffer[<span class="number">16</span>]^buffer[<span class="number">17</span>]^buffer[<span class="number">18</span>]^buffer[<span class="number">19</span>]^</div><div class="line">				buffer[<span class="number">20</span>]^buffer[<span class="number">21</span>]^buffer[<span class="number">22</span>]^buffer[<span class="number">23</span>]^buffer[<span class="number">24</span>]^buffer[<span class="number">25</span>];</div><div class="line">		<span class="comment">//ROS_INFO("check sum:0x%02x",csum);</span></div><div class="line">		<span class="keyword">if</span>(csum == buffer[<span class="number">26</span>])&#123;</div><div class="line">			ret = <span class="number">1</span>;<span class="comment">//校验通过，数据包正确</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> </div><div class="line">		  ret =<span class="number">0</span>;<span class="comment">//校验失败，丢弃数据包</span></div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	for(i=0;i&lt;rBUFFERSIZE;i++)</div><div class="line">	  ROS_INFO("0x%02x",buffer[i]);</div><div class="line">	*/</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//订阅turtle1/cmd_vel话题的回调函数，用于显示速度以及角速度</span></div><div class="line"><span class="keyword">void</span> cmd_vel_callback(<span class="keyword">const</span> geometry_msgs::Twist&amp; cmd_vel)&#123;</div><div class="line">	ROS_INFO(<span class="string">"I heard linear velocity: x-[%f],y-[%f],"</span>,cmd_vel.linear.x,cmd_vel.linear.y);</div><div class="line">	ROS_INFO(<span class="string">"I heard angular velocity: [%f]"</span>,cmd_vel.angular.z);</div><div class="line">	std::cout &lt;&lt; <span class="string">"Twist Received"</span> &lt;&lt; std::endl;	</div><div class="line">	kinematics_analysis(cmd_vel);</div><div class="line">&#125;</div><div class="line"><span class="built_in">int</span> main (<span class="built_in">int</span> argc, char** argv)&#123;</div><div class="line">    ros::init(argc, argv, <span class="string">"my_serial_node"</span>);</div><div class="line">    ros::NodeHandle nh;</div><div class="line"></div><div class="line">    </div><div class="line">	<span class="comment">//订阅/turtle1/cmd_vel话题用于测试 $ rosrun turtlesim turtle_teleop_key</span></div><div class="line">	ros::Subscriber write_sub = nh.subscribe(<span class="string">"/turtle1/cmd_vel"</span>,<span class="number">1000</span>,cmd_vel_callback);</div><div class="line"> 	</div><div class="line">	<span class="comment">//发布里程计话题 odom</span></div><div class="line">	ros::Publisher read_pub = nh.advertise&lt;nav_msgs::Odometry&gt;(<span class="string">"odom"</span>,<span class="number">1000</span>);</div><div class="line"></div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">        ser.setPort(<span class="string">"/dev/ttyUSB0"</span>);</div><div class="line">        ser.setBaudrate(<span class="number">115200</span>);</div><div class="line">        serial::Timeout to = serial::Timeout::simpleTimeout(<span class="number">1000</span>);</div><div class="line">        ser.setTimeout(to);</div><div class="line">        ser.open();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (serial::IOException&amp; e)</div><div class="line">    &#123;</div><div class="line">        ROS_ERROR_STREAM(<span class="string">"Unable to open port "</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(ser.isOpen())&#123;</div><div class="line">        ROS_INFO_STREAM(<span class="string">"Serial Port initialized"</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">	<span class="comment">//定义tf 对象</span></div><div class="line">	<span class="keyword">static</span> tf::TransformBroadcaster odom_broadcaster;</div><div class="line">	<span class="comment">//定义tf发布时需要的类型消息</span></div><div class="line">	geometry_msgs::TransformStamped odom_trans;</div><div class="line">	<span class="comment">//定义里程计消息对象</span></div><div class="line">	nav_msgs::Odometry odom;</div><div class="line">	<span class="comment">//定义四元数变量</span></div><div class="line">	geometry_msgs::Quaternion odom_quat;</div><div class="line">	<span class="comment">//位置 速度 角速度</span></div><div class="line">	float_union posx,posy,vx,vy,va,yaw;</div><div class="line">	<span class="comment">//定义时间</span></div><div class="line">	ros::Time current_time, last_time;</div><div class="line">	current_time = ros::Time::now();</div><div class="line">	last_time = ros::Time::now();</div><div class="line"></div><div class="line">    <span class="comment">//10hz频率执行</span></div><div class="line">    ros::Rate loop_rate(<span class="number">10</span>);</div><div class="line">    <span class="keyword">while</span>(ros::ok())&#123;</div><div class="line"></div><div class="line">        ros::spinOnce();</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(ser.available())&#123;</div><div class="line">            ROS_INFO_STREAM(<span class="string">"Reading from serial port"</span>);</div><div class="line">            <span class="comment">/*std_msgs::String result;</span></div><div class="line">            result.data = ser.read(ser.available());</div><div class="line">            ROS_INFO_STREAM("Read: " &lt;&lt; result.data);</div><div class="line">            read_pub.publish(result);</div><div class="line">			*/</div><div class="line">			ser.read(r_buffer,rBUFFERSIZE);</div><div class="line">			<span class="comment">/*int i;</span></div><div class="line">			for(i=0;i&lt;rBUFFERSIZE;i++)</div><div class="line">				ROS_INFO("[0x%02x]",r_buffer[i]);</div><div class="line">			ROS_INFO_STREAM("End reading from serial port");</div><div class="line">			*/</div><div class="line">			<span class="keyword">if</span>(data_analysis(r_buffer) != <span class="number">0</span>)&#123;</div><div class="line">				<span class="built_in">int</span> i;</div><div class="line">				<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</div><div class="line">					posx.cvalue[i] = r_buffer[<span class="number">2</span>+i];<span class="comment">//x 坐标</span></div><div class="line">					posy.cvalue[i] = r_buffer[<span class="number">6</span>+i];<span class="comment">//y 坐标</span></div><div class="line">					vx.cvalue[i] = r_buffer[<span class="number">10</span>+i];<span class="comment">// x方向速度</span></div><div class="line">					vy.cvalue[i] = r_buffer[<span class="number">14</span>+i];<span class="comment">//y方向速度</span></div><div class="line">					va.cvalue[i] = r_buffer[<span class="number">18</span>+i];<span class="comment">//角速度</span></div><div class="line">					yaw.cvalue[i] = r_buffer[<span class="number">22</span>+i];	<span class="comment">//yaw 偏航角</span></div><div class="line">				&#125;			</div><div class="line">				<span class="comment">//将偏航角转换成四元数才能发布</span></div><div class="line">				odom_quat = tf::createQuaternionMsgFromYaw(yaw.fvalue);</div><div class="line">				</div><div class="line">				<span class="comment">//发布坐标变换父子坐标系</span></div><div class="line">				odom_trans.header.frame_id = <span class="string">"odom"</span>;</div><div class="line">				odom_trans.child_frame_id = <span class="string">"base_link"</span>;</div><div class="line">				<span class="comment">//填充获取的数据</span></div><div class="line">				odom_trans.transform.translation.x = posx.fvalue;<span class="comment">//x坐标</span></div><div class="line">				odom_trans.transform.translation.y = posy.fvalue;<span class="comment">//y坐标</span></div><div class="line">				odom_trans.transform.translation.z = <span class="number">0</span>;<span class="comment">//z坐标				</span></div><div class="line">				odom_trans.transform.rotation = odom_quat;<span class="comment">//偏航角</span></div><div class="line">				<span class="comment">//发布tf坐标变换</span></div><div class="line">				odom_broadcaster.sendTransform(odom_trans);</div><div class="line">				<span class="comment">//获取当前时间</span></div><div class="line">				current_time = ros::Time::now();</div><div class="line">				<span class="comment">//载入里程计时间戳</span></div><div class="line">				odom.header.stamp = current_time;</div><div class="line">				<span class="comment">//里程计父子坐标系</span></div><div class="line">				odom.header.frame_id = <span class="string">"odom"</span>;</div><div class="line">				odom.child_frame_id = <span class="string">"base_link"</span>;</div><div class="line">				<span class="comment">//里程计位置数据</span></div><div class="line">				odom.pose.pose.position.x = posx.fvalue;</div><div class="line">				odom.pose.pose.position.y = posy.fvalue;</div><div class="line">				odom.pose.pose.position.z = <span class="number">0</span>;</div><div class="line">				odom.pose.pose.orientation = odom_quat;</div><div class="line">				<span class="comment">//载入线速度和角速度</span></div><div class="line">				odom.twist.twist.linear.x = vx.fvalue;</div><div class="line">				odom.twist.twist.linear.y = vy.fvalue;</div><div class="line">				odom.twist.twist.angular.z = va.fvalue;</div><div class="line">				<span class="comment">//发布里程计消息</span></div><div class="line">				read_pub.publish(odom);</div><div class="line">				ROS_INFO(<span class="string">"publish odometry"</span>);</div><div class="line">				last_time = current_time;				</div><div class="line">			&#125;</div><div class="line">			memset(r_buffer,<span class="number">0</span>,rBUFFERSIZE);</div><div class="line">        &#125;</div><div class="line">        loop_rate.sleep();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>全部代码我已上传至 <a href="https://github.com/StevenShiChina/my_ros_serial_node" target="_blank" rel="external">mygithub</a> ，欢迎下载交流。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>在与底盘实际通信前我们先用两台电脑进行串口的通信测试，并查看发布的 odometry 消息。一台电脑跑ROS并通过串口与另一台电脑连接，串口监控软件送出一组模拟数据：</p>
<p>　　<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">0xff</span> <span class="number">0xae</span> <span class="number">0x01</span> <span class="number">0x02</span> <span class="number">0x03</span> <span class="number">0x04</span> <span class="number">0x05</span> </div><div class="line"><span class="number">0x06</span> <span class="number">0x07</span> <span class="number">0x08</span> <span class="number">0x09</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x02</span> </div><div class="line"><span class="number">0x03</span> <span class="number">0x04</span> <span class="number">0x05</span> <span class="number">0x06</span> <span class="number">0x07</span> <span class="number">0x08</span> <span class="number">0x09</span> </div><div class="line"><span class="number">0x00</span> <span class="number">0x12</span> <span class="number">0x13</span> <span class="number">0x14</span> <span class="number">0x15</span> <span class="number">0x00</span></div></pre></td></tr></table></figure></p>
<p>运行节点：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun my_serial_node my_serial_node</span></div></pre></td></tr></table></figure></p>
<p>通过串口监控软件不停的发送上述数据帧，并通过以下命令查看话题：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rostopic <span class="built_in">echo</span> /odom</span></div></pre></td></tr></table></figure></p>
<p>可以看到串口接收到底层送来的数据并实时的进行发布：<br><img src="/2017/07/18/control-mobile-base-by-serial/odom.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS serial </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS中级二 利用Rviz实时观测模拟SLAM过程]]></title>
      <url>/2017/07/11/ros-intermediate-tutorial-2/</url>
      <content type="html"><![CDATA[<p><a href="http://wiki.ros.org/rviz" target="_blank" rel="external">Rviz</a> 是 ROS 提供的一个非常强大的图形化显示工具，在实际机器人上建图之前我们先使用已有的地图记录进行模拟 SLAM 的过程，加深理解，为随后的真实环境建图打下基础。建立封闭环境下的二维地图是导航、定位、路径规划的前提。SLAM 全称 simultaneous localization and mapping 即时定位与地图构建，SLAM 理论最早在1988年由 Smith、Self以及 Cheeseman 共同提出。本篇学习使用 <a href="http://wiki.ros.org/rviz" target="_blank" rel="external">Rviz</a> 实时观测地图构建的过程，需要用到已有的地图建立的数据记录，<a href="http://pr.willowgarage.com/data/gmapping/" target="_blank" rel="external">可在此下载</a>,需要安装 <a href="http://wiki.ros.org/gmapping" target="_blank" rel="external">gmapping</a> 包。<br><a id="more"></a></p>
<h1 id="gmapping-安装"><a href="#gmapping-安装" class="headerlink" title="gmapping 安装"></a>gmapping 安装</h1><p>ROS 目前提供两种方法实现 SLAM，一种叫做 <a href="http://wiki.ros.org/hector_mapping" target="_blank" rel="external">hector_mapping</a>,另外一种叫做 <a href="http://wiki.ros.org/gmapping" target="_blank" rel="external">gmapping</a>。两种算法不同，<a href="http://wiki.ros.org/gmapping" target="_blank" rel="external">gmapping</a> 算法较早，它使用粒子滤波并且需要里程计输入，但对传感器性能要求较低，适合初学者；<a href="http://wiki.ros.org/hector_mapping" target="_blank" rel="external">hector_mapping</a> 性能不错，它通过最小二乘法匹配扫描点，并且依赖高精度的激光雷达数据，但是不需要里程计输入。我们先尝试 <a href="http://wiki.ros.org/gmapping" target="_blank" rel="external">gmapping</a>，安装：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-slam-gmapping</span></div></pre></td></tr></table></figure></p>
<h1 id="rviz开启slam观测"><a href="#Rviz开启SLAM观测" class="headerlink" title="Rviz开启SLAM观测"></a>Rviz开启SLAM观测</h1><p>ROS 启用重放时的数据中的时间不是现在的本地时间，而是历史时间，因此我们需要告诉 ROS 系统，我们使用历史模拟时间：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosparam <span class="built_in">set</span> use_sim_time <span class="literal">true</span></span></div></pre></td></tr></table></figure></p>
<p>准备好已有的激光数据记录文件：<br>   <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/pr.willowgarage.com/data</span><span class="regexp">/gmapping/basic</span>_localization_stage.bag</div></pre></td></tr></table></figure></p>
<p>记得开启 ROS master :<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div></pre></td></tr></table></figure></p>
<p> <a href="http://wiki.ros.org/gmapping" target="_blank" rel="external">gmapping</a> 需要两个输入，一个为激光雷达数据，另外一个是全局 tf转换关系，这个 tf 中需要一个里程计数据以构建坐标系。启用 <a href="http://wiki.ros.org/gmapping" target="_blank" rel="external">gmapping</a> 监听 base_scan 话题发来的消息，该话题由模拟器发布：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun gmapping slam_gmapping scan:=base_scan</span></div></pre></td></tr></table></figure></p>
<p>重放激光扫描的数据记录：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosbag play --clock basic_localization_stage.bag</span></div></pre></td></tr></table></figure></p>
<p>启动 Rviz:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rviz rviz</span></div></pre></td></tr></table></figure></p>
<p>此时只是启动了Rviz 并没有给Rviz添加输入，因此它显示为空的网格，<a href="http://wiki.ros.org/gmapping" target="_blank" rel="external">gmapping</a> 的输出话题为 /map,因此我们将该 topic 添加到Rviz的输入,开启 Rviz 后，点击 add 按钮，选择 map 点击OK，会出现一个空的地图：</p>
<p><img src="/2017/07/11/ros-intermediate-tutorial-2/addmap.jpg" alt=""> </p>
<p>之后点击 map 中的topic，再点击 add 添加话题 /map:</p>
<p><img src="/2017/07/11/ros-intermediate-tutorial-2/addtopic.jpg" alt=""></p>
<p>最后地图会慢慢的展现出来：</p>
<p><img src="/2017/07/11/ros-intermediate-tutorial-2/result.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SLAM Rviz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS中级一 配置并使用ROS导航功能包集]]></title>
      <url>/2017/07/10/ros-intermediate-tutorial-1/</url>
      <content type="html"><![CDATA[<p>本篇学习如何配置 ROS 的 Navigation 功能包以及如何让导航功能在机器人上运行起来。先来看一下 ROS 导航架构图：</p>
<p><img src="/2017/07/10/ros-intermediate-tutorial-1/overview_navigation.png" alt=""></p>
<a id="more"></a>
<h1 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h1><p>ROS 的二维导航功能包 navigation 根据输入的里程计消息以及激光雷达等传感器信息通过内部导航算法计算出安全的机器人速度控制指令，移动机器人到指定位置，从而完成既定的导航任务。尽管导航功能包设计的尽量通用，但仍然对机器人的硬件有一定的要求：<br>a,导航功能包目前只对差分或全向轮式机器人起作用，并且假定机器人可以使用速度指令进行控制，速度指令格式遵循x方向、y方向以及角度。<br>b,导航功能包要求机器人必须安装有激光雷达或深度相机等二维平面测距设备。<br>c,导航功能包起初以正方形机器人为模型开发，因此对正方形的机器人支持较好，对于其他形状的机器人也支持，但可能表现不佳。</p>
<h1 id="导航架构分析"><a href="#导航架构分析" class="headerlink" title="导航架构分析"></a>导航架构分析</h1><p>从上图中可以看出， navigation 功能包集的输入有 传感器 tf 变换 (sensor transforms)、里程计 (odometry source) 以及激光雷达或者点云数据 (sensor sources)，输出是 cmd_vel 速度消息 (base controller)。框内部分为 navigation 的核心 move_base 功能，它负责规划整个导航所需的流程，它是导航所必须的，灰色框内部分是可选的，蓝色框内是需要我们提供的组件。一般在 ROS 中进行导航功能使用到的三个包分别为 move_base、gmapping、amcl; move_base 根据获取的传感器消息进行路径规划，并移动机器人到达指定位置；gmapping 根据获取的激光雷达数据或者深度相机建立地图；amcl可以根据已有地图进行机器人的定位。</p>
<h1 id="机器人配置"><a href="#机器人配置" class="headerlink" title="机器人配置"></a>机器人配置</h1><h2 id="tf变换"><a href="#TF变换" class="headerlink" title="TF变换"></a>TF变换</h2><p>导航功能包集需要机器人不断的使用 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 发布机器人的坐标系之间的变换关系，关于这一块可以参考 <a href="http://wiki.ros.org/cn/navigation/Tutorials/RobotSetup/TF" target="_blank" rel="external">TF配置</a> 也可以参考本站文章 <a href="/2017/06/08/ros-primary-tutorial-14/" title="ROS初级十四 tf配置">ROS初级十四 tf配置</a>。</p>
<h2 id="传感器信息sensor-source"><a href="#传感器信息-sensor-source" class="headerlink" title="传感器信息(sensor source)"></a>传感器信息(sensor source)</h2><p>机器人要想避开现实环境中的障碍物离不开传感器信息的实时获取，这里的传感器我们假定为激光雷达或点云数据，传感器需要不断的发布 sensor_msgs/LaserScan 或者 sensor_msgs/PointCloud 消息。关于如何发布这些消息可以参考站内文章 <a href="/2017/07/07/ros-primary-tutorial-16/" title="ROS初级十六发布传感器数据流">ROS初级十六发布传感器数据流</a> 或者参考 <a href="http://wiki.ros.org/cn/navigation/Tutorials/RobotSetup/Sensors" target="_blank" rel="external">在ROS上发布传感器数据流</a>。</p>
<h2 id="里程计消息odometry-source"><a href="#里程计消息-odometry-source" class="headerlink" title="里程计消息(odometry source)"></a>里程计消息(odometry source)</h2><p>ROS 导航功能包集在正确的导航之前需要获取底层传过来的里程计消息，里程计消息使用 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 和 nav_msgs/Odometry 发布，关于如何发布可参考 <a href="http://wiki.ros.org/navigation/Tutorials/RobotSetup/Odom" target="_blank" rel="external">Publishing Odometry Information over ROS</a> 也可参考站内文章 <a href="/2017/07/07/ros-primary-tutorial-15/" title="ROS初级十五 发布里程计消息">ROS初级十五 发布里程计消息</a>。</p>
<h2 id="基座控制器base-controller"><a href="#基座控制器-base-controller" class="headerlink" title="基座控制器(base controller)"></a>基座控制器(base controller)</h2><p>ROS 导航功能包集 navigation 可以通过 cmd_vel 话题发布 geometry_msgs/Twist 类型的消息，这个消息基于机器人的基座坐标系 base_link ,它负责将运动命令传递给移动基座。也就是必须有一个节点负责定制 cmd_vel 话题，并将该话题上的速度(vx, vy, vtheta)指令转化为电机指令(cmd_vel.linear.x, cmd_vel.linear.y, cmd_vel.angular.z)发送到移动底座，使机器人按既定要求移动。</p>
<h2 id="地图map_server"><a href="#地图-map-server" class="headerlink" title="地图(map_server)"></a>地图(map_server)</h2><p>地图并不是 ROS 导航功能包集所必须的。</p>
<h1 id="导航功能包集配置"><a href="#导航功能包集配置" class="headerlink" title="导航功能包集配置"></a>导航功能包集配置</h1><p>假设上述需要的所有环境配置都已完成，机器人使用 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a>发布坐标变换，并从传感器接收 sensor_msgs/LaserScan 或者 sensor_msgs/PointCloud 消息以便于导航，同时需要使用 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 和 nav_msgs/Odometry 消息发布导航消息，消息以命令形式发布给移动底座，从而控制机器人到既定位置。</p>
<h2 id="创建一个软件包"><a href="#创建一个软件包" class="headerlink" title="创建一个软件包"></a>创建一个软件包</h2><p>首先创建一个软件包用于保存我们需要的所有配置文件以及启动文件。创建功能包时需要添加一些依赖项，包括机器人配置中所使用到的功能包，其中 move_base 是必须添加的依赖项：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg my_robot_name_2dnav move_base my_tf_configuration_dep my_odom_configuration_dep my_sensor_configuration_dep</span></div></pre></td></tr></table></figure></p>
<p>使用时将后面的依赖项修改为自己机器人配置所需的依赖，这是我自己的机器人所有使用的依赖项：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg my_robot_2dnav move_base roscpp tf geometry_msgs sensor_msgs nav_msgs</span></div></pre></td></tr></table></figure></p>
<h2 id="创建机器人启动配置文件"><a href="#创建机器人启动配置文件" class="headerlink" title="创建机器人启动配置文件"></a>创建机器人启动配置文件</h2><p>创建一个ROS launch 配置文件以及发布机器人所需的 tf 变换树。新建文件 my_robot_configuration.launch 并放到我们的软件包的launch目录下:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd my_robot_2dnav</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir launch</span></div><div class="line"><span class="meta">$</span><span class="bash"> vim my_robot_configuration.launch</span></div></pre></td></tr></table></figure></p>
<p>添加以下内容到文件 my_robot_configuration.launch 中：<br>   <figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;launch&gt;</div><div class="line">      &lt;node pkg=<span class="string">"sensor_node_pkg"</span> <span class="built_in">type</span>=<span class="string">"sensor_node_type"</span> <span class="built_in">name</span>=<span class="string">"sensor_node_name"</span> output=<span class="string">"screen"</span>&gt;</div><div class="line">          &lt;<span class="built_in">param</span> <span class="built_in">name</span>=<span class="string">"sensor_param"</span> value=<span class="string">"param_value"</span> /&gt;</div><div class="line">      &lt;/node&gt;</div><div class="line">      &lt;node pkg=<span class="string">"odom_node_pkg"</span> <span class="built_in">type</span>=<span class="string">"odom_node_type"</span> <span class="built_in">name</span>=<span class="string">"odom_node"</span> output=<span class="string">"screen"</span>&gt;</div><div class="line">          &lt;<span class="built_in">param</span> <span class="built_in">name</span>=<span class="string">"odom_param"</span> value=<span class="string">"param_value"</span> /&gt;</div><div class="line">      &lt;/node&gt;</div><div class="line"> </div><div class="line">      &lt;node pkg=<span class="string">"transform_configuration_pkg"</span> <span class="built_in">type</span>=<span class="string">"transform_configuration_type"</span> <span class="built_in">name</span>=<span class="string">"transform_configuration_name"</span> output=<span class="string">"screen"</span>&gt;</div><div class="line">         &lt;<span class="built_in">param</span> <span class="built_in">name</span>=<span class="string">"transform_configuration_param"</span> value=<span class="string">"param_value"</span> /&gt;</div><div class="line">     &lt;/node&gt;</div><div class="line"> &lt;/launch&gt;</div></pre></td></tr></table></figure></p>
<p>这里只是一个launch模板，接下来我们根据自己的机器人去完善修改它。上面代码会首先启动机器人运行导航功能包所需的所有传感器，实际使用时需要将我们自己的传感器对应的ROS驱动包替换 sensor_node_pkg，将自己的传感器类型替换 sensor_node_type，通常与节点名一致；用自己的传感器节点名替换 sensor_node_name, sensor_param 包含所有必须的参数，如果有多个传感器，在这里一起启动它们。接下来，我们启动移动底座的里程计，同样将我们自己的里程计替换pkg,type,name,并根据实际情况指定相关参数。最后启动相应的 tf 变换，同样将我们自己的 tf 变换替换对应的 pkg,type,name 根据实际情况修改相关参数。</p>
<h2 id="代价地图配置local_costmap-amp-global_costmap"><a href="#代价地图配置-local-costmap-amp-global-costmap" class="headerlink" title="代价地图配置(local_costmap &amp; global_costmap)"></a>代价地图配置(local_costmap &amp; global_costmap)</h2><p>导航功能包集需要两个代价地图来保存现实环境中的障碍物信息，这两个代价地图分别为 local_costmap 和 global_costmap。前者用于局部路径规划与避障，后者用于全局的路径规划。有些参数是两个代价地图都必须的，也有一些参数为各自所有。对于代价地图，有三个配置项分别为 common 配置项、 global 配置项以及 local 配置项。如果想看完整的配置，请参阅 <a href="http://wiki.ros.org/costmap_2d" target="_blank" rel="external">costmap_2d</a>。</p>
<h3 id="共同配置common"><a href="#共同配置common" class="headerlink" title="共同配置common"></a>共同配置common</h3><p>导航功能包集使用代价地图存储障碍物信息，我们需要指出要监听的传感器话题，以便于更新数据。创建一个名为 costmap_common_params.yaml 的文件，添加以下内容：</p>
   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">obstacle_range:</span> <span class="number">2.5</span></div><div class="line"><span class="attr">raytrace_range:</span> <span class="number">3.0</span></div><div class="line"><span class="attr">footprint:</span> <span class="string">[[x0,</span> <span class="string">y0],</span> <span class="string">[x1,</span> <span class="string">y1],</span> <span class="string">...</span> <span class="string">[xn,</span> <span class="string">yn]]</span></div><div class="line"><span class="comment">#robot_radius: ir_of_robot</span></div><div class="line"><span class="attr">inflation_radius:</span> <span class="number">0.55</span></div><div class="line"></div><div class="line"><span class="attr">observation_sources:</span> <span class="string">laser_scan_sensor</span> <span class="string">point_cloud_sensor</span></div><div class="line"></div><div class="line"><span class="attr">laser_scan_sensor:</span> <span class="string">&#123;sensor_frame:</span> <span class="string">frame_name,</span> <span class="attr">data_type:</span> <span class="string">LaserScan,</span> <span class="attr">topic:</span> <span class="string">topic_name,</span> <span class="attr">marking:</span> <span class="literal">true</span><span class="string">,</span> <span class="attr">clearing:</span> <span class="literal">true</span><span class="string">&#125;</span></div><div class="line"></div><div class="line"><span class="attr">point_cloud_sensor:</span> <span class="string">&#123;sensor_frame:</span> <span class="string">frame_name,</span> <span class="attr">data_type:</span> <span class="string">PointCloud,</span> <span class="attr">topic:</span> <span class="string">topic_name,</span> <span class="attr">marking:</span> <span class="literal">true</span><span class="string">,</span> <span class="attr">clearing:</span> <span class="literal">true</span><span class="string">&#125;</span></div></pre></td></tr></table></figure>
<p>obstacle_range 参数决定了引入障碍物到代价地图的传感器读数的最大范围，此处我们设置为 2.5m，这意味着机器人只会更新以其底盘中心为半径2.5m以内的障碍物信息。raytrace_range 参数确定空白区域内光线追踪的范围，此处我们设置为3.0m，意味着机器人将试图根据传感器读数清除其前面3.0m远的空间。<br>footprint 为机器人的形状设置，如果是圆形可以直接指定机器人半径 robot_radius。当指定 footprint 时，机器人的中心默认是在(0.0,0.0)，支持顺时针和逆时针方向。inflation_radius 为代价地图膨胀半径，膨胀半径应该设置为障碍物产生代价的最大距离，此处设为0.55意味着机器人所有路径与障碍物保持0.55米或更远的距离。<br>observation_sources 参数定义了一系列传递空间信息给代价地图的各种传感器。frame_name 参数应设置为传感器坐标帧的名称， data_type 参数应设置为 LaserScan 或 PointCloud，这取决于主题使用的消息， topic_name 应该设置为发布传感器数据的主题的名称。  marking 和 clearing 参数确定传感器是否用于向代价地图添加障碍物信息，或从代价地图清除障碍信息，或两者都有。 </p>
<h3 id="全局配置-global_costmap"><a href="#全局配置-global-costmap" class="headerlink" title="全局配置 global_costmap"></a>全局配置 global_costmap</h3><p>新建一个文件命名为 global_costmap_params.yaml 用于存储全局代价地图配置选项，添加以下内容：</p>
   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">global_costmap:</span></div><div class="line"><span class="attr">  global_frame:</span> <span class="string">/map</span></div><div class="line"><span class="attr">  robot_base_frame:</span> <span class="string">base_link</span></div><div class="line"><span class="attr">  update_frequency:</span> <span class="number">5.0</span></div><div class="line"><span class="attr">  static_map:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>global_frame 参数定义了全局代价地图运行所在的坐标系。在这种情况下,我们会选择/map坐标系。 robot_base_frame 参数定义了代价地图参考的的机器人移动底盘的坐标系。update_frequency 参数决定了代价地图更新的频率。 static_map 参数决定代价地图是否根据 map_server 提供的地图初始化。如果不打算使用现有的地图，将其设为false。 </p>
<h3 id="本地配置-local_costmap"><a href="#本地配置-local-costmap" class="headerlink" title="本地配置 local_costmap"></a>本地配置 local_costmap</h3><p>新建一个文件命名为 localal_costmap_params.yaml，添加以下内容：<br>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">local_costmap:</span></div><div class="line"><span class="attr">  global_frame:</span> <span class="string">odom</span></div><div class="line"><span class="attr">  robot_base_frame:</span> <span class="string">base_link</span></div><div class="line"><span class="attr">  update_frequency:</span> <span class="number">5.0</span></div><div class="line"><span class="attr">  publish_frequency:</span> <span class="number">2.0</span></div><div class="line"><span class="attr">  static_map:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  rolling_window:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  width:</span> <span class="number">6.0</span></div><div class="line"><span class="attr">  height:</span> <span class="number">6.0</span></div><div class="line"><span class="attr">  resolution:</span> <span class="number">0.05</span></div></pre></td></tr></table></figure></p>
<p>global_frame，robot_base_frame，update_frequency，static_map参数与全局配置意义相同。publish_frequency 参数决定了代价地图发布可视化信息的频率。 rolling_window 参数设置为true，意味着随着机器人在现实环境中移动，代价地图会保持以机器人为中心。 width 、height、resolution 参数分别设置局部代价地图的宽度(米)、高度(米)和分辨率(米/单元)。 这里的分辨率和静态地图的分辨率可能不同，但我们通常把他们设成一样的。</p>
<h2 id="baselocalplanner-配置"><a href="#BaseLocalPlanner-配置" class="headerlink" title="BaseLocalPlanner 配置"></a>BaseLocalPlanner 配置</h2><p>Base_Local_Planner 负责根据全局路径规划计算速度命令并发送到机器人移动底座，根据自己的机器人规格配置以下参数以便于正常启动和运行机器人。新建一个文件命名为 base_local_planner_params.yaml，添加以下内容：<br>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">TrajectoryPlannerROS:</span></div><div class="line"><span class="attr">  max_vel_x:</span> <span class="number">0.45</span></div><div class="line"><span class="attr">  min_vel_x:</span> <span class="number">0.1</span></div><div class="line"><span class="attr">  max_vel_theta:</span> <span class="number">1.0</span></div><div class="line"><span class="attr">  min_in_place_vel_theta:</span> <span class="number">0.4</span></div><div class="line"></div><div class="line"><span class="attr">  acc_lim_theta:</span> <span class="number">3.2</span></div><div class="line"><span class="attr">  acc_lim_x:</span> <span class="number">2.5</span></div><div class="line"><span class="attr">  acc_lim_y:</span> <span class="number">2.5</span></div><div class="line"></div><div class="line"><span class="attr">  holonomic_robot:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>前面为机器人的速度限制，后面为机器人的加速度限制。</p>
<h2 id="创建一个-launch-启动文件"><a href="#创建一个-launch-启动文件" class="headerlink" title="创建一个 launch 启动文件"></a>创建一个 launch 启动文件</h2><p>当做好前面所有的配置文件后，我们需要一个launch 文件用于一起启动它们，新建一个文件命名为 move_base.launch 添加以下内容：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">master</span> <span class="attr">auto</span>=<span class="string">"start"</span>/&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Run the map server --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"map_server"</span> <span class="attr">pkg</span>=<span class="string">"map_server"</span> <span class="attr">type</span>=<span class="string">"map_server"</span> <span class="attr">args</span>=<span class="string">"$(find my_map_package)/my_map.pgm my_map_resolution"</span>/&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--- Run AMCL --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"$(find amcl)/examples/amcl_omni.launch"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"move_base"</span> <span class="attr">type</span>=<span class="string">"move_base"</span> <span class="attr">respawn</span>=<span class="string">"false"</span> <span class="attr">name</span>=<span class="string">"move_base"</span> <span class="attr">output</span>=<span class="string">"screen"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find my_robot_name_2dnav)/costmap_common_params.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> <span class="attr">ns</span>=<span class="string">"global_costmap"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find my_robot_name_2dnav)/costmap_common_params.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> <span class="attr">ns</span>=<span class="string">"local_costmap"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find my_robot_name_2dnav)/local_costmap_params.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find my_robot_name_2dnav)/global_costmap_params.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find my_robot_name_2dnav)/base_local_planner_params.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">node</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>需要修改的地方是更改地图服务器使指向自己的地图，如果是差分驱动的机器人，将 amcl_omni.launch 改为 amcl_diff.launch 。</p>
<h2 id="amcl配置"><a href="#AMCL配置" class="headerlink" title="AMCL配置"></a>AMCL配置</h2><p>AMCL 有许多配置选项影响定位的性能，详细可参考 <a href="http://wiki.ros.org/amcl" target="_blank" rel="external">amcl</a></p>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>启动两个终端分别运行：<br>   <figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">roslaunch my_robot_configuration.<span class="built_in">launch</span></div><div class="line">roslaunch move_base.<span class="built_in">launch</span></div></pre></td></tr></table></figure></p>
<p>通过图形化显示给导航功能包发送一个目标信息，可参考<a href="http://wiki.ros.org/navigation/Tutorials/Using%20rviz%20with%20the%20Navigation%20Stack" target="_blank" rel="external">rviz and navigation tutorial</a>，使用代码给导航功能包集发送导航目标，参考 <a href="http://wiki.ros.org/navigation/Tutorials/SendingSimpleGoals" target="_blank" rel="external">sending simple navigation goals</a></p>
<p>参考：<br>英文 <a href="http://wiki.ros.org/navigation/Tutorials/RobotSetup" target="_blank" rel="external">Setup and Configuration of the Navigation Stack on a Robot</a></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS navigation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS初级十七 URDF解读]]></title>
      <url>/2017/07/08/ros-primary-tutorial-17/</url>
      <content type="html"><![CDATA[<p>URDF的全称为 Unified Robot Description Format，通用机器人描述格式，它是一种特殊的 xml 格式文件，它能够抽象的描述现实中的机器人硬件，包括外形和组件。URDF 包括很多不同的功能包以及组件，它们之间的关系如图所描述：</p>
<p><img src="/2017/07/08/ros-primary-tutorial-17/urdf_diagram.png" alt=""><br><a id="more"></a></p>
<h1 id="构建可视化机器人模型"><a href="#构建可视化机器人模型" class="headerlink" title="构建可视化机器人模型"></a>构建可视化机器人模型</h1><p>开始之前先下载 <a href="http://wiki.ros.org/joint_state_publisher" target="_blank" rel="external">joint_state_publisher</a> 以及 <a href="http://wiki.ros.org/urdf_tutorial" target="_blank" rel="external">urdf_tutorial</a> 两个包。<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/src/</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span>  https://github.com/ros/urdf_tutorial.git</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/ros/robot_model.git</span></div></pre></td></tr></table></figure></p>
<p> <a href="http://wiki.ros.org/joint_state_publisher" target="_blank" rel="external">joint_state_publisher</a> 属于 robot_model 代码仓的一个 package ，需要注意的是 robot_model 有很多分支，我们下载后需要选择 indigo-devel 分支：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/src/robot_model/   </span></div><div class="line"><span class="meta">$</span><span class="bash"> git checkout indigo-devel</span></div></pre></td></tr></table></figure></p>
<h2 id="单个模型"><a href="#单个模型" class="headerlink" title="单个模型"></a>单个模型</h2><p>先看一个简单的模型描述，在 urdf_tutorial/urdf 中的 01-myfirst.urdf 文件：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">"myfirst"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"base_link"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">length</span>=<span class="string">"0.6"</span> <span class="attr">radius</span>=<span class="string">"0.2"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>首先描述了机器人的名字 myfirst,该机器人仅有一个 link 名字为  base_link, 它包含一个 cylinder 长度为 0.6m，半径为 0.2m。<br>使用 Rviz 查看这个模型：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> roslaunch urdf_tutorial <span class="keyword">display</span>.launch <span class="keyword">model</span>:=urdf/<span class="number">01</span>-myfirst.urdf</div></pre></td></tr></table></figure></p>
<p>出现错误：<br>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</div><div class="line">  <span class="keyword">File</span> <span class="string">"/opt/ros/indigo/share/xacro/xacro.py"</span>, line <span class="number">62</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</div><div class="line">    xacro.main()</div><div class="line">  <span class="keyword">File</span> <span class="string">"/opt/ros/indigo/lib/python2.7/dist-packages/xacro/__init__.py"</span>, line <span class="number">673</span>, <span class="keyword">in</span> <span class="keyword">main</span></div><div class="line">    f = <span class="keyword">open</span>(args[<span class="number">0</span>])</div><div class="line">IOError: [Errno <span class="number">2</span>] <span class="keyword">No</span> such <span class="keyword">file</span> <span class="keyword">or</span> <span class="keyword">directory</span>: <span class="string">'urdf/01-myfirst.urdf'</span></div><div class="line">Invalid &lt;param&gt; tag: Cannot <span class="keyword">load</span> command parameter [robot_description]: command [/opt/ros/indigo/<span class="keyword">share</span>/xacro/xacro.py urdf/<span class="number">01</span>-myfirst.urdf] returned <span class="keyword">with</span> code [<span class="number">1</span>]. </div><div class="line"></div><div class="line">Param <span class="keyword">xml</span> <span class="keyword">is</span> &lt;param command=<span class="string">"$(find xacro)/xacro.py $(arg model)"</span> <span class="keyword">name</span>=<span class="string">"robot_description"</span>/&gt;</div><div class="line">The traceback <span class="keyword">for</span> the <span class="keyword">exception</span> was written <span class="keyword">to</span> the <span class="keyword">log</span> <span class="keyword">file</span></div></pre></td></tr></table></figure></p>
<p>错误提示貌似找不到 01-myfirst.urdf 这个文件，但事实上它是存在的，换一种方式打开：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> roslaunch urdf_tutorial <span class="keyword">display</span>.launch <span class="keyword">model</span>:=<span class="string">'$(find urdf_tutorial)/urdf/01-myfirst.urdf'</span></div></pre></td></tr></table></figure></p>
<p>如果进入到目录 ~/catkin_ws/src/urdf_tutorial/urdf_tutorial 下再用上述命令打开就不会出现错误：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/src/urdf_tutorial/urdf_tutorial</span></div><div class="line"><span class="meta">$</span><span class="bash"> roslaunch urdf_tutorial display.launch model:=urdf/01-myfirst.urdf</span></div></pre></td></tr></table></figure></p>
<p>图中所示，我们可以看到只有一个圆柱体存在：</p>
<p><img src="/2017/07/08/ros-primary-tutorial-17/myfirsturdf.png" alt=""></p>
<p>需要注意的两点：<br>a,固定坐标系以网格中心作为参考点，它正是 base_link 的坐标系；<br>b,圆柱体的中心正好位于网格中心即 base_link原点，因此，圆柱体的另一半在网格下面。</p>
<h2 id="多个模型"><a href="#多个模型" class="headerlink" title="多个模型"></a>多个模型</h2><p>一个模型就是一个 link 元素，添加多个模型就需要多个link，link 之间需要使用 joint 连接，joint 有固定于可动之分。下面看一个固定 joint 连接，文件位于 urdf_tutorial/urdf 中的 02-multipleshapes.urdf：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"> <span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">"multipleshapes"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"base_link"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">visual</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">length</span>=<span class="string">"0.6"</span> <span class="attr">radius</span>=<span class="string">"0.2"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">link</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"right_leg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">"0.6 0.1 0.2"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">link</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"base_to_right_leg"</span> <span class="attr">type</span>=<span class="string">"fixed"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"base_link"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"right_leg"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在圆柱体的基础上又定义了一个box，尺寸为 0.6m x 0.1m x 0.2m ,一个 joint 连接两个模型，joint 必须指定它所连接的两个模型的父link与子link,子 link 的位置依赖于父 link 的位置。<br>可以运行命令查看：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> roslaunch urdf_tutorial <span class="keyword">display</span>.launch <span class="keyword">model</span>:=urdf/<span class="number">02</span>-multipleshapes.urdf</div></pre></td></tr></table></figure></p>
<p>图中可以看到两个模型的中心重合，因为他们的坐标原点一样，如果我们不希望他们重合，可以定义多个坐标系原点。</p>
<h2 id="原点"><a href="#原点" class="headerlink" title="原点"></a>原点</h2><p>上图腿的位置位于圆柱体的中间部分，下面我们调整它的位置，参见文件urdf_tutorial/urdf/03-origins.urdf<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line">   <span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">"origins"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"base_link"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">visual</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">length</span>=<span class="string">"0.6"</span> <span class="attr">radius</span>=<span class="string">"0.2"</span>/&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">link</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"right_leg"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">visual</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">"0.6 0.1 0.2"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"0 1.57075 0"</span> <span class="attr">xyz</span>=<span class="string">"0 0 -0.3"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"base_to_right_leg"</span> <span class="attr">type</span>=<span class="string">"fixed"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"base_link"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"right_leg"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 -0.22 0.25"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;/<span class="name">robot</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>由代码可看出，两个 link 即两个零件由名称为 base_to_right_leg 的 joint 连接，joint 的原点相对于 base_link 的原点偏移为x方向0，y 方向-0.22，z 方向 0.25，因此 child link 即 right_leg 的原点位于base_link 的上方 0.25 右方0.22 的位置。如果不指定 child link 的姿态角，它将和base_link具有相同的姿态角，即子坐标系和父坐标系姿态角相同。上述代码既定义了right_leg 在xyz方向的偏移，同时也定义了rpy 姿态角(roll pitch yaw),相对于joint 原点即子坐标参考系，right_leg 在z方向上下移了0.3,俯仰角为pi/2弧度，即相对于之前绕Y轴旋转了90度，之前为水平，现在变为垂直。可以通过 Rviz 查看：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> roslaunch urdf_tutorial <span class="keyword">display</span>.launch <span class="keyword">model</span>:=urdf/<span class="number">03</span>-origins.urdf</div></pre></td></tr></table></figure></p>
<p>姿态角的定义如图：<br><img src="/2017/07/08/ros-primary-tutorial-17/rpy.png" alt=""><br>机身前方为 Roll 轴，一般定义为 X 轴，绕 X 轴的旋转角度称为 Roll 即翻滚角，绕 Pitch 轴的旋转称为俯仰角，此处一般定义为 Y 轴，绕 Yaw 轴的旋转称为偏航角，一般定义为 Z 轴。<br>另外也可以定义机体组件的颜色，可以添加不同形状的组件可以参考 04-materials.urdf 以及 05-visual.urdf。</p>
<h1 id="构建可移动机器人模型"><a href="#构建可移动机器人模型" class="headerlink" title="构建可移动机器人模型"></a>构建可移动机器人模型</h1><p>对应文件为 06-flexible.urdf</p>
<h2 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h2>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"head_swivel"</span> <span class="attr">type</span>=<span class="string">"continuous"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"base_link"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"head"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">"0 0 1"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 0 0.3"</span>/&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></div></pre></td></tr></table></figure>
<p>定义的joint用于连接 base_link 与 head ，类型为 continuous,意思是它可以旋转任意角度，因此这个连接是可移动的连接。需要注意的是必须指定它旋转的轴，上面指定旋转的矢量为 [0,0,1] 即只能绕Z轴旋转。</p>
<h2 id="抓手"><a href="#抓手" class="headerlink" title="抓手"></a>抓手</h2>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"left_gripper_joint"</span> <span class="attr">type</span>=<span class="string">"revolute"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">"0 0 1"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">limit</span> <span class="attr">effort</span>=<span class="string">"1000.0"</span> <span class="attr">lower</span>=<span class="string">"0.0"</span> <span class="attr">upper</span>=<span class="string">"0.548"</span> <span class="attr">velocity</span>=<span class="string">"0.5"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span> <span class="attr">xyz</span>=<span class="string">"0.2 0.01 0"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"gripper_pole"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"left_gripper"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">joint</span>&gt;</span></div></pre></td></tr></table></figure>
<p>joint 为 revolute 即旋转类型，它和 continuous 类型类似，但 revolute 类型有极限约束，指定上下极限位置的同时，还需要指定最大速度以及 effort。注意这里的上下极限是单位是弧度。</p>
<h2 id="夹臂"><a href="#夹臂" class="headerlink" title="夹臂"></a>夹臂</h2>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"gripper_extension"</span> <span class="attr">type</span>=<span class="string">"prismatic"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"base_link"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"gripper_pole"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">limit</span> <span class="attr">effort</span>=<span class="string">"1000.0"</span> <span class="attr">lower</span>=<span class="string">"-0.38"</span> <span class="attr">upper</span>=<span class="string">"0"</span> <span class="attr">velocity</span>=<span class="string">"0.5"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span> <span class="attr">xyz</span>=<span class="string">"0.19 0 0.2"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">joint</span>&gt;</span></div></pre></td></tr></table></figure>
<p>夹臂是一种不同的 joint，称为柱状 joint,也就是说它沿着一个轴运动，而不是绕着轴运动。这里的极限与抓手不同的是极限单位是米而不是弧度。还有两种其它类型的 joint，柱状 joint 只能做一维运动，一个平面 joint 可以做二维运动，一个浮动的 joint 可以做三维运动。</p>
<h2 id="指定姿态"><a href="#指定姿态" class="headerlink" title="指定姿态"></a>指定姿态</h2><p>进入到目录urdf_tutorial/urdf_tutorial中，运行命令：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> roslaunch urdf_tutorial <span class="keyword">display</span>.launch <span class="keyword">model</span>:=urdf/<span class="number">06</span>-flexible.urdf</div></pre></td></tr></table></figure></p>
<p>可以看大如下机器人模型以及 Joint State Publisher 的控制界面：<br><img src="/2017/07/08/ros-primary-tutorial-17/pose.png" alt=""></p>
<p>当在 Rviz 中滑动滑块时，会看到模型移动。首先GUI解析URDF文件，找到所有非固定的 joint 以及他们的运动约束极限，然后，利用滑块的值发布消息 <a href="http://docs.ros.org/api/sensor_msgs/html/msg/JointState.html" target="_blank" rel="external">sensor_msgs/JointState</a> ,之后 <a href="http://wiki.ros.org/robot_state_publisher" target="_blank" rel="external">robot_state_publisher</a> 计算在不同的部件之间的所有变换，变换后的 tf 坐标树被用来在 Rviz 中显示这些形状。</p>
<h1 id="添加物理属性和碰撞属性"><a href="#添加物理属性和碰撞属性" class="headerlink" title="添加物理属性和碰撞属性"></a>添加物理属性和碰撞属性</h1><h2 id="碰撞属性"><a href="#碰撞属性" class="headerlink" title="碰撞属性"></a>碰撞属性</h2><p>为了使机器人能在 <a href="http://www.gazebosim.org/" target="_blank" rel="external">Gazebo</a> 中仿真，需要定义机器人的碰撞属性。这部分的例子可以参考 07-physics.urdf<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"base_link"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">visual</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">length</span>=<span class="string">"0.6"</span> <span class="attr">radius</span>=<span class="string">"0.2"</span>/&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">"blue"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">visual</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">collision</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">length</span>=<span class="string">"0.6"</span> <span class="attr">radius</span>=<span class="string">"0.2"</span>/&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">collision</span>&gt;</span></div><div class="line"> 	<span class="tag">&lt;<span class="name">inertial</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">"1.0"</span> <span class="attr">ixy</span>=<span class="string">"0.0"</span> <span class="attr">ixz</span>=<span class="string">"0.0"</span> <span class="attr">iyy</span>=<span class="string">"1.0"</span> <span class="attr">iyz</span>=<span class="string">"0.0"</span> <span class="attr">izz</span>=<span class="string">"1.0"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">link</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>代码中可见，collision 元素与 visual 元素同级，都属于 link 的直接子元素; collision 元素定义它的外形方式与 visual 元素一样，都使用 geometry 实现。也可以与 visual 一样使用相同的方式指定一个原点。很多情况下我们希望 collision 的几何外形和原点与 visual 的几何外形和原点一样，但是有两种特殊情况：一种情况是快速处理，做碰撞检测的两个网格比两个简单的几何尺寸的计算要复杂的多，因此在碰撞元素中更倾向于使用简单的几何尺寸来代替网格以便于减少计算复杂度。另外一种情况是安全区域，你可能希望限制接近于敏感设备的运动，比如，我们不希望任何东西与R2D2的头部相撞，我们可能会定义碰撞的几何尺寸为一个圆柱，用于防止任何东西靠近它的头部。</p>
<h2 id="物理属性"><a href="#物理属性" class="headerlink" title="物理属性"></a>物理属性</h2><p>在 <a href="http://www.gazebosim.org/" target="_blank" rel="external">Gazebo</a> 中仿真需要定义机器人的物理属性，包括 inertial 惯性、contact coefficients 连接系数 以及 joint dynamics 关节动力等属性。转动惯量可以使用一个3x3的矩阵表示：<br>$\left[<br>\begin{matrix}<br>ixx &amp; ixy &amp; ixz \\<br>ixy &amp; iyy &amp; iyz \\<br>ixz &amp; iyz &amp; izz \\<br>\end{matrix}<br>\right]$<br>因为它是对称的，因此可以仅使用6个元素来表示。这部分同样可参考 07-physics.urdf。</p>
<h2 id="使用-xacro-简化-urdf-文件"><a href="#使用-Xacro-简化-URDF-文件" class="headerlink" title="使用 Xacro 简化 URDF 文件"></a>使用 Xacro 简化 URDF 文件</h2><p><a href="http://wiki.ros.org/xacro" target="_blank" rel="external">xacro</a> 是一宏语言，可以压缩 URDF 文件的大小，增加文件的可读性和可维护性。这部分代码可参考 08-macroed.urdf.xacro ，为了使用 xacro 我们需要指定一个命名空间，以便文件能被正确的解析，一般在文件的头部会加入以下：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">"macroed"</span> <span class="attr">xmlns:xacro</span>=<span class="string">"http://ros.org/wiki/xacro"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>模型的名称此处定义为 macroed 。使用 xacro 声明常量能够避免在很多行重复使用同一个值，当修改该值时只需要修改一处即可，可增加代码维护性。常量的声明方法：<br>   <figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;xacro:<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"width"</span> value=<span class="string">"0.2"</span> /&gt;</div><div class="line">&lt;xacro:<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"bodylen"</span> value=<span class="string">"0.6"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>使用时可以直接使用变量名来引用：<br>   <figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;width&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">length</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;bodylen&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>也可以在${}结构中加入四则运算：<br>   <figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;wheeldiam/2&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">length</span>=<span class="string">"0.1"</span>/&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"$</span></span><span class="template-variable">&#123;baselen*reflect/3&#125;</span><span class="xml"><span class="tag"><span class="string"> 0 -$</span></span></span><span class="template-variable">&#123;wheeldiam/2+.05&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>也可以使用宏更进一步简化：<br>   <figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">"default_inertial"</span> <span class="attr">params</span>=<span class="string">"mass"</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">"$</span></span><span class="template-variable">&#123;mass&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line">       <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">"1.0"</span> <span class="attr">ixy</span>=<span class="string">"0.0"</span> <span class="attr">ixz</span>=<span class="string">"0.0"</span> <span class="attr">iyy</span>=<span class="string">"1.0"</span> <span class="attr">iyz</span>=<span class="string">"0.0"</span> <span class="attr">izz</span>=<span class="string">"1.0"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>使用：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xacro:default_inertial</span> <span class="attr">mass</span>=<span class="string">"10"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>未完<br>参考：<a href="http://wiki.ros.org/urdf/Tutorials" target="_blank" rel="external">urdf/tutorial</a></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> URDF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS初级十六 发布传感器数据流]]></title>
      <url>/2017/07/07/ros-primary-tutorial-16/</url>
      <content type="html"><![CDATA[<p>传感器数据发布的正确与否直接影响到 ROS 导航功能的安全和性能。如果没有正确获取传感器的数据，机器人将会迷路或撞上障碍物。有很多传感器为机器人导航提供可用的信息，比如激光雷达、摄像头、声呐、红外以及碰撞传感器等。目前ROS的导航功能包仅支持激光雷达以及点云数据也就是 sensor_msgs/LaserScan 和 sensor_msgs/PointCloud 两种消息类型。本篇学习如何发布导航需要的这两种传感器数据消息。<br><a id="more"></a></p>
<h1 id="ros-消息头信息"><a href="#ROS-消息头信息" class="headerlink" title="ROS 消息头信息"></a>ROS 消息头信息</h1><p>不管是 sensor_msgs/LaserScan 消息还是 sensor_msgs/PointCloud 消息，都和ROS中的其他消息一样包含  <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 框架以及时间依赖信息。为了标准化这些消息，ROS中提供了 Header 消息类型用于标识诸如此类消息的起始部分。以下消息展示了 Header 类型的三个域，可以参考 <a href="http://docs.ros.org/api/std_msgs/html/msg/Header.html" target="_blank" rel="external">std_msgs/Header.msg</a>。 seq 标识消息的顺序号，自动累加；stamp 用于存储和消息相关的时间信息即时间戳，它必须与数据产生的时间相符； frame_id 用于标识传感器数据采集的参考坐标系，比如激光雷达的数据必须与它的坐标参考系相符。<br>   <figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#Standard metadata for higher-level flow data types</span></div><div class="line"><span class="meta">#sequence ID: consecutively increasing ID </span></div><div class="line"><span class="keyword">uint32</span> seq</div><div class="line"><span class="meta">#Two-integer timestamp that is expressed as:</span></div><div class="line"><span class="meta"># * stamp.secs: seconds (stamp_secs) since epoch</span></div><div class="line"><span class="meta"># * stamp.nsecs: nanoseconds since stamp_secs</span></div><div class="line"><span class="meta"># time-handling sugar is provided by the client library</span></div><div class="line">time stamp</div><div class="line"><span class="meta">#Frame this data is associated with</span></div><div class="line"><span class="meta"># 0: no frame</span></div><div class="line"><span class="meta"># 1: global frame</span></div><div class="line"><span class="keyword">string</span> frame_id</div></pre></td></tr></table></figure></p>
<h1 id="发布激光雷达消息"><a href="#发布激光雷达消息" class="headerlink" title="发布激光雷达消息"></a>发布激光雷达消息</h1><h2 id="激光雷达消息结构"><a href="#激光雷达消息结构" class="headerlink" title="激光雷达消息结构"></a>激光雷达消息结构</h2><p>ROS在 <a href="http://wiki.ros.org/sensor_msgs" target="_blank" rel="external">sensor_msgs</a> 中提供一个特殊的消息类型专门用于存储机器人的激光雷达数据叫做 LaserScan。LaserScan 的消息类型为虚拟的激光雷达数据采集提供了方便。在讨论如何发布激光雷达消息之前，我们先看一下激光雷达消息的格式，参考 <a href="http://docs.ros.org/api/sensor_msgs/html/msg/LaserScan.html" target="_blank" rel="external">sensor_msgs/LaserScan.msg</a>:<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Single scan from a planar laser range-finder</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># If you have another ranging device with different behavior (e.g. a sonar</span></div><div class="line"><span class="comment"># array), please find or create a different message, since applications</span></div><div class="line"><span class="comment"># will make fairly laser-specific assumptions about this data</span></div><div class="line"></div><div class="line">Header header            <span class="comment"># timestamp in the header is the acquisition time of </span></div><div class="line">                         <span class="comment"># the first ray in the scan.</span></div><div class="line">                         <span class="comment">#</span></div><div class="line">                         <span class="comment"># in frame frame_id, angles are measured around </span></div><div class="line">                         <span class="comment"># the positive Z axis (counterclockwise, if Z is up)</span></div><div class="line">                         <span class="comment"># with zero angle being forward along the x axis</span></div><div class="line">                         </div><div class="line"><span class="built_in">float</span>32 angle_min        <span class="comment"># start angle of the scan [rad]</span></div><div class="line"><span class="built_in">float</span>32 angle_max        <span class="comment"># end angle of the scan [rad]</span></div><div class="line"><span class="built_in">float</span>32 angle_increment  <span class="comment"># angular distance between measurements [rad]</span></div><div class="line"></div><div class="line"><span class="built_in">float</span>32 time_increment   <span class="comment"># time between measurements [seconds] - if your scanner</span></div><div class="line">                         <span class="comment"># is moving, this will be used in interpolating position</span></div><div class="line">                         <span class="comment"># of 3d points</span></div><div class="line"><span class="built_in">float</span>32 scan_time        <span class="comment"># time between scans [seconds]</span></div><div class="line"></div><div class="line"><span class="built_in">float</span>32 range_min        <span class="comment"># minimum range value [m]</span></div><div class="line"><span class="built_in">float</span>32 range_max        <span class="comment"># maximum range value [m]</span></div><div class="line"></div><div class="line"><span class="built_in">float</span>32[] ranges         <span class="comment"># range data [m] (<span class="doctag">Note:</span> values &lt; range_min or &gt; range_max should be discarded)</span></div><div class="line"><span class="built_in">float</span>32[] intensities    <span class="comment"># intensity data [device-specific units].  If your</span></div><div class="line">                         <span class="comment"># device does not provide intensities, please leave</span></div><div class="line">                         <span class="comment"># the array empty.</span></div></pre></td></tr></table></figure></p>
<p>为了更进一步理解激光雷达消息，接下来我们写一些代码介绍如何发布激光雷达消息。</p>
<h2 id="代码实现发布laserscan消息"><a href="#代码实现发布LaserScan消息" class="headerlink" title="代码实现发布LaserScan消息"></a>代码实现发布LaserScan消息</h2><p>新建包 laser_scan_publisher_tutorial，依赖项为 roscpp sensor_msgs<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/src</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg laser_scan_publisher_tutorial sensor_msgs roscpp</span></div></pre></td></tr></table></figure></p>
<p>在 src 目录下新建文件 laser_scan_publisher.cpp 添加以下内容：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sensor_msgs/LaserScan.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line">   ros::init(argc, argv, <span class="string">"laser_scan_publisher"</span>);</div><div class="line"> </div><div class="line">   ros::NodeHandle n;</div><div class="line">    <span class="comment">//定义发布器 scan_pub 消息类型为sensor_msgs::LaserScan</span></div><div class="line">    ros::Publisher scan_pub = n.advertise&lt;sensor_msgs::LaserScan&gt;(<span class="string">"scan"</span>, <span class="number">50</span>);</div><div class="line"></div><div class="line">   <span class="comment">//虚拟一些激光雷达的数据</span></div><div class="line">   <span class="comment">//在真实激光雷达中要替换这些数据使用真实数据</span></div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> num_readings = <span class="number">100</span>;<span class="comment">//每圈扫描点个数</span></div><div class="line">   <span class="keyword">double</span> laser_frequency = <span class="number">40</span>;<span class="comment">//扫描频率</span></div><div class="line">   <span class="keyword">double</span> ranges[num_readings];<span class="comment">//范围</span></div><div class="line">   <span class="keyword">double</span> intensities[num_readings];<span class="comment">//存储 激光雷达的强度数据</span></div><div class="line"></div><div class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">   ros::<span class="function">Rate <span class="title">r</span><span class="params">(<span class="number">1.0</span>)</span></span>;</div><div class="line">   <span class="keyword">while</span>(n.ok())&#123;</div><div class="line">     <span class="comment">//generate some fake data for our laser scan</span></div><div class="line">     <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_readings; ++i)&#123;</div><div class="line">       ranges[i] = count;</div><div class="line">       intensities[i] = <span class="number">100</span> + count;<span class="comment">//模拟一些数据</span></div><div class="line">     &#125;</div><div class="line">     ros::Time scan_time = ros::Time::now();</div><div class="line"></div><div class="line">     <span class="comment">//populate the LaserScan message</span></div><div class="line">     <span class="comment">//填充 LaserScan 消息结构</span></div><div class="line">     sensor_msgs::LaserScan scan;</div><div class="line">     scan.header.stamp = scan_time;<span class="comment">//时间戳</span></div><div class="line">     scan.header.frame_id = <span class="string">"laser_frame"</span>;<span class="comment">//参考坐标系</span></div><div class="line">     scan.angle_min = <span class="number">-1.57</span>;<span class="comment">//扫描起始角度</span></div><div class="line">     scan.angle_max = <span class="number">1.57</span>;<span class="comment">//扫描结束角度</span></div><div class="line">     scan.angle_increment = <span class="number">3.14</span> / num_readings;<span class="comment">//角度递增</span></div><div class="line">     scan.time_increment = (<span class="number">1</span> / laser_frequency) / (num_readings);<span class="comment">//时间递增</span></div><div class="line">     scan.range_min = <span class="number">0.0</span>;<span class="comment">//最小的扫描范围 单位为m</span></div><div class="line">     scan.range_max = <span class="number">100.0</span>;<span class="comment">//最大的扫描范围</span></div><div class="line"></div><div class="line">     scan.ranges.resize(num_readings);<span class="comment">//暂未理解</span></div><div class="line">     scan.intensities.resize(num_readings);</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_readings; ++i)&#123;</div><div class="line">       scan.ranges[i] = ranges[i];</div><div class="line">       scan.intensities[i] = intensities[i];</div><div class="line">     &#125;</div><div class="line">     <span class="comment">//发布激光雷达扫描数据</span></div><div class="line">     scan_pub.publish(scan);</div><div class="line">     ++count;</div><div class="line">     r.sleep();</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>修改CMakeLists.txt添加以下项：<br>   <figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">add_executable</span>(laser_scan_publisher src/laser_scan_publisher.cpp)</div><div class="line"><span class="keyword">if</span>(sensor_msgs_EXPORTED_TARGETS)</div><div class="line">   <span class="keyword">add_dependencies</span>(laser_scan_publisher <span class="variable">$&#123;sensor_msgs_EXPORTED_TARGETS&#125;</span>)</div><div class="line"><span class="keyword">endif</span>()</div><div class="line"><span class="keyword">target_link_libraries</span>(laser_scan_publisher</div><div class="line">   <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></div><div class="line"> )</div><div class="line"><span class="keyword">install</span>(TARGETS laser_scan_publisher</div><div class="line">   ARCHIVE DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</span></div><div class="line">   LIBRARY DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</span></div><div class="line">   RUNTIME DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</span></div><div class="line"> )</div></pre></td></tr></table></figure></p>
<p>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure></p>
<h1 id="发布点云消息数据"><a href="#发布点云消息数据" class="headerlink" title="发布点云消息数据"></a>发布点云消息数据</h1><h2 id="点云消息数据结构"><a href="#点云消息数据结构" class="headerlink" title="点云消息数据结构"></a>点云消息数据结构</h2><p>ROS 提供 sensor_msgs/PointCloud 消息类型用于存储和共享点云数据。它支持三维空间的点云数据，并且支持通道设置，比如可以设置一个强度通道用于存储这些点的数值强度，以下为点云消息的数据结构，参考<a href="http://docs.ros.org/api/sensor_msgs/html/msg/PointCloud.html" target="_blank" rel="external">sensor_msgs/PointCloud.msg</a>:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> This message holds a collection of 3d points, plus optional additional</span></div><div class="line"><span class="meta">#</span><span class="bash"> information about each point.</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Time of sensor data acquisition, coordinate frame ID.</span></div><div class="line">Header header</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Array of 3d points. Each Point32 should be interpreted as a 3d point</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">in</span> the frame given <span class="keyword">in</span> the header.</span></div><div class="line">geometry_msgs/Point32[] points</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Each channel should have the same number of elements as points array,</span></div><div class="line"><span class="meta">#</span><span class="bash"> and the data <span class="keyword">in</span> each channel should correspond 1:1 with each point.</span></div><div class="line"><span class="meta">#</span><span class="bash"> Channel names <span class="keyword">in</span> common practice are listed <span class="keyword">in</span> ChannelFloat32.msg.</span></div><div class="line">ChannelFloat32[] channels</div></pre></td></tr></table></figure></p>
<h2 id="代码实现点云消息数据的发布"><a href="#代码实现点云消息数据的发布" class="headerlink" title="代码实现点云消息数据的发布"></a>代码实现点云消息数据的发布</h2><p>新建包 point_cloud_publisher_tutorial 依赖项为 sensor_msgs roscpp：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg point_cloud_publisher_tutorial sensor_msgs roscpp</span></div></pre></td></tr></table></figure></p>
<p>在 src 目录下新建文件 point_cloud_publisher.cpp 添加以下内容：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sensor_msgs/PointCloud.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line">   ros::init(argc, argv, <span class="string">"point_cloud_publisher"</span>);</div><div class="line"> </div><div class="line">   ros::NodeHandle n;</div><div class="line">   <span class="comment">//创建ROS发布器 名称为 cloud_pub 消息类型为sensor_msgs::PointCloud</span></div><div class="line">   ros::Publisher cloud_pub = n.advertise&lt;sensor_msgs::PointCloud&gt;(<span class="string">"cloud"</span>, <span class="number">50</span>);</div><div class="line"></div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> num_points = <span class="number">100</span>;<span class="comment">//点的个数</span></div><div class="line"></div><div class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">   ros::<span class="function">Rate <span class="title">r</span><span class="params">(<span class="number">1.0</span>)</span></span>;<span class="comment">//发布频率</span></div><div class="line">   <span class="keyword">while</span>(n.ok())&#123;</div><div class="line">     <span class="comment">//定义点云消息数据cloud</span></div><div class="line">     sensor_msgs::PointCloud cloud;</div><div class="line">     cloud.header.stamp = ros::Time::now();<span class="comment">//时间戳</span></div><div class="line">     cloud.header.frame_id = <span class="string">"sensor_frame"</span>;<span class="comment">//参考坐标系</span></div><div class="line"></div><div class="line">     cloud.points.resize(num_points);<span class="comment">//设置点云数据的点数</span></div><div class="line"></div><div class="line">     <span class="comment">//we'll also add an intensity channel to the cloud</span></div><div class="line">     cloud.channels.resize(<span class="number">1</span>);<span class="comment">//添加一个强度通道</span></div><div class="line">     cloud.channels[<span class="number">0</span>].name = <span class="string">"intensities"</span>;</div><div class="line">     cloud.channels[<span class="number">0</span>].values.resize(num_points);<span class="comment">//设置通道的宽度与点数匹配</span></div><div class="line"></div><div class="line">     <span class="comment">//模拟填充一些点云数据并且填充强度通道数据</span></div><div class="line">     <span class="comment">//generate some fake data for our point cloud</span></div><div class="line">     <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_points; ++i)&#123;</div><div class="line">       cloud.points[i].x = <span class="number">1</span> + count;</div><div class="line">       cloud.points[i].y = <span class="number">2</span> + count;</div><div class="line">       cloud.points[i].z = <span class="number">3</span> + count;</div><div class="line">       cloud.channels[<span class="number">0</span>].values[i] = <span class="number">100</span> + count;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">//发布点云数据</span></div><div class="line">     cloud_pub.publish(cloud);</div><div class="line">     ++count;</div><div class="line">     r.sleep();</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>修改 CMakeLists.txt 添加以下项：<br> <figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">add_executable</span>(point_cloud_publisher src/point_cloud_publisher.cpp)</div><div class="line"><span class="keyword">if</span>(sensor_msgs_EXPORTED_TARGETS)</div><div class="line">     <span class="keyword">add_dependencies</span>(point_cloud_publisher <span class="variable">$&#123;sensor_msgs_EXPORTED_TARGETS&#125;</span>)</div><div class="line"><span class="keyword">endif</span>()</div><div class="line"><span class="keyword">target_link_libraries</span>(point_cloud_publisher</div><div class="line">    <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></div><div class="line">  )</div><div class="line"><span class="keyword">install</span>(TARGETS point_cloud_publisher</div><div class="line">    ARCHIVE DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</span></div><div class="line">    LIBRARY DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</span></div><div class="line">    RUNTIME DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</span></div><div class="line">  )</div></pre></td></tr></table></figure></p>
<p>回到 ~/catkin_ws 即可编译。<br>参考 <a href="http://wiki.ros.org/navigation/Tutorials/RobotSetup/Sensors" target="_blank" rel="external">Publishing Sensor Streams Over ROS</a></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS sensor </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS初级十五 发布里程计消息]]></title>
      <url>/2017/07/07/ros-primary-tutorial-15/</url>
      <content type="html"><![CDATA[<p>ROS导航功能包使用 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 来决定机器人在环境中的位置并根据传感器的数据生成静态地图。但是 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 却不能提供机器人速度的任何信息。因此导航功能包需要里程计信息源能够发布包含速度信息的变换及里程计消息。本篇将学习 nav_msgs/Odometry 消息，并且通过代码学习如何通过 ROS 以及 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 变换发布里程计消息。<br><a id="more"></a></p>
<h1 id="nav_msgsodometry-消息"><a href="#nav-msgs-Odometry-消息" class="headerlink" title="nav_msgs/Odometry 消息"></a>nav_msgs/Odometry 消息</h1><p>nav_msgs/Odometry 消息包含机器人在自由空间中的位置估计以及速度值。可以使用消息查看命令来查看 nav_msgs/Odometry 消息的详细信息：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosmsg show nav_msgs/Odometry</span></div></pre></td></tr></table></figure></p>
<p>详细的介绍可参考 <a href="http://docs.ros.org/api/nav_msgs/html/msg/Odometry.html" target="_blank" rel="external">nav_msgs/Odometry.msg</a><br>   <figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This represents an estimate of a position and velocity in free space.  </span></div><div class="line"><span class="comment"># The pose in this message should be specified in the coordinate frame given by header.frame_id.</span></div><div class="line"><span class="comment"># The twist in this message should be specified in the coordinate frame given by the child_frame_id</span></div><div class="line"><span class="attribute"><span class="nomarkup">Header</span></span> header</div><div class="line"><span class="attribute">string</span> child_frame_id</div><div class="line"><span class="attribute">geometry_msgs</span>/PoseWithCovariance pose</div><div class="line"><span class="attribute">geometry_msgs</span>/TwistWithCovariance twist</div></pre></td></tr></table></figure></p>
<p>pose 参数包含机器人在里程计框架下的位置估计并附带一个可选的位姿估算协方差。 twist 参数包含机器人在子坐标系下的速度信息，并附带一个可选的速度估算协方差，这个子坐标系通常是机器人移动基座的坐标参考系。</p>
<h1 id="使用-tf-发布里程计变换"><a href="#使用-tf-发布里程计变换" class="headerlink" title="使用 tf 发布里程计变换"></a>使用 tf 发布里程计变换</h1><p><a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 软件库负责维护机器人坐标系之间的变换树，因此任何里程计源都应该发布它管理的坐标系信息。这一部分的详细使用和说明请参考我的前一篇文章 <a href="/2017/06/08/ros-primary-tutorial-14/" title="ROS初级十四 tf配置">ROS初级十四 tf配置</a>。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>下面我们通过编写一些简单的代码实现里程计消息以及利用 tf 实现变换，模拟一个机器人进行圆周运动。新建包 odometry_publisher_tutorial,依赖项为 tf 以及 nav_msgs:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg odometry_publisher_tutorial tf nav_msgs roscpp</span></div></pre></td></tr></table></figure></p>
<p>新建cpp文件，并命名为 odometry_publisher.cpp,拷贝如下代码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line">  <span class="comment">//包含 tf 以及 nav_msgs 相关的头文件</span></div><div class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_broadcaster.h&gt;</span></span></div><div class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;nav_msgs/Odometry.h&gt;</span></span></div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line">    ros::init(argc, argv, <span class="string">"odometry_publisher"</span>);</div><div class="line"></div><div class="line">   ros::NodeHandle n;</div><div class="line"></div><div class="line">   <span class="comment">//创建一个publisher 命名为 odom_pub 消息类型为 nav_msgs::Odometry</span></div><div class="line">   ros::Publisher odom_pub = n.advertise&lt;nav_msgs::Odometry&gt;(<span class="string">"odom"</span>, <span class="number">50</span>);</div><div class="line"></div><div class="line">   <span class="comment">//创建对象 tf 广播变换</span></div><div class="line">   tf::TransformBroadcaster odom_broadcaster;</div><div class="line">   <span class="comment">//假定机器人的起始位置位于odom坐标参考系的原点即0点</span></div><div class="line">   <span class="keyword">double</span> x = <span class="number">0.0</span>;</div><div class="line">   <span class="keyword">double</span> y = <span class="number">0.0</span>;</div><div class="line">   <span class="keyword">double</span> th = <span class="number">0.0</span>;</div><div class="line"></div><div class="line">   <span class="comment">//设定一个初始速度，在 odom 坐标参考系下</span></div><div class="line">   <span class="keyword">double</span> vx = <span class="number">0.1</span>;<span class="comment">// x 方向 0.1m/s</span></div><div class="line">   <span class="keyword">double</span> vy = <span class="number">-0.1</span>;<span class="comment">//  y 方向 -0.1m/s</span></div><div class="line">   <span class="keyword">double</span> vth = <span class="number">0.1</span>;<span class="comment">// 角速度为0.1rad/s</span></div><div class="line"></div><div class="line">   ros::Time current_time, last_time;</div><div class="line">   <span class="comment">//获取系统当前时间</span></div><div class="line">   current_time = ros::Time::now();</div><div class="line">   last_time = ros::Time::now();</div><div class="line"></div><div class="line">   <span class="comment">//以 1HZ频率发布</span></div><div class="line">   ros::<span class="function">Rate <span class="title">r</span><span class="params">(<span class="number">1.0</span>)</span></span>;</div><div class="line">   <span class="keyword">while</span>(n.ok())&#123;</div><div class="line">     current_time = ros::Time::now();</div><div class="line"></div><div class="line">     <span class="comment">//计算里程计信息</span></div><div class="line">     <span class="comment">//compute odometry in a typical way given the velocities of the robot</span></div><div class="line">     <span class="keyword">double</span> dt = (current_time - last_time).toSec();</div><div class="line">     <span class="keyword">double</span> delta_x = (vx * <span class="built_in">cos</span>(th) - vy * <span class="built_in">sin</span>(th)) * dt;</div><div class="line">     <span class="keyword">double</span> delta_y = (vx * <span class="built_in">sin</span>(th) + vy * <span class="built_in">cos</span>(th)) * dt;</div><div class="line">     <span class="keyword">double</span> delta_th = vth * dt;</div><div class="line"></div><div class="line">     <span class="comment">//更新里程计信息</span></div><div class="line">     x += delta_x;</div><div class="line">     y += delta_y;</div><div class="line">     th += delta_th;</div><div class="line"></div><div class="line">     <span class="comment">//以下为了兼容三维系统下的消息结构，将里程计的偏航角转换成四元数</span></div><div class="line">     <span class="comment">//since all odometry is 6DOF we'll need a quaternion created from yaw</span></div><div class="line">     geometry_msgs::Quaternion odom_quat = tf::createQuaternionMsgFromYaw(th);</div><div class="line">        <span class="comment">//first, we'll publish the transform over tf</span></div><div class="line">     <span class="comment">//TransformStamped 类型为tf 发布时需要的类型</span></div><div class="line">     geometry_msgs::TransformStamped odom_trans;</div><div class="line">     <span class="comment">//时间戳</span></div><div class="line">     odom_trans.header.stamp = current_time;</div><div class="line">     <span class="comment">//父参考坐标系 id</span></div><div class="line">     odom_trans.header.frame_id = <span class="string">"odom"</span>;</div><div class="line">     <span class="comment">//子参考系 id</span></div><div class="line">     odom_trans.child_frame_id = <span class="string">"base_link"</span>;</div><div class="line">     <span class="comment">//我们希望发布从odom到base_link的变换，因此这两个坐标系的关系不要搞错</span></div><div class="line"></div><div class="line">     <span class="comment">//填充变换数据</span></div><div class="line">     odom_trans.transform.translation.x = x;</div><div class="line">     odom_trans.transform.translation.y = y;</div><div class="line">     odom_trans.transform.translation.z = <span class="number">0.0</span>;</div><div class="line">     odom_trans.transform.rotation = odom_quat;</div><div class="line"></div><div class="line">     <span class="comment">//发送变换</span></div><div class="line">     <span class="comment">//send the transform</span></div><div class="line">     odom_broadcaster.sendTransform(odom_trans);</div><div class="line"></div><div class="line">     <span class="comment">//填充时间戳，发布nav_msgs/Odometry 里程计消息</span></div><div class="line">     <span class="comment">//以便于导航包可以获取速度信息</span></div><div class="line">     <span class="comment">//还需设置时间戳以及父子参考坐标系</span></div><div class="line">     <span class="comment">//next, we'll publish the odometry message over ROS</span></div><div class="line">     nav_msgs::Odometry odom;</div><div class="line">     odom.header.stamp = current_time;</div><div class="line">     odom.header.frame_id = <span class="string">"odom"</span>;</div><div class="line">     odom.child_frame_id = <span class="string">"base_link"</span>;</div><div class="line"></div><div class="line">     <span class="comment">//最后填充机器人的位置以及速度信息，</span></div><div class="line">     <span class="comment">//并且发布该信息，因为是机器人本体，</span></div><div class="line">     <span class="comment">//所以参考坐标系为 base_link</span></div><div class="line">     <span class="comment">//set the position</span></div><div class="line">     odom.pose.pose.position.x = x;</div><div class="line">     odom.pose.pose.position.y = y;</div><div class="line">     odom.pose.pose.position.z = <span class="number">0.0</span>;</div><div class="line">     odom.pose.pose.orientation = odom_quat;</div><div class="line"></div><div class="line">     <span class="comment">//set the velocity</span></div><div class="line">     odom.twist.twist.linear.x = vx;</div><div class="line">     odom.twist.twist.linear.y = vy;</div><div class="line">     odom.twist.twist.angular.z = vth;</div><div class="line"></div><div class="line">     <span class="comment">//publish the message</span></div><div class="line">     odom_pub.publish(odom);</div><div class="line"></div><div class="line">    last_time = current_time;</div><div class="line">    r.sleep();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>设置 CMakeLists.txt 添加依赖项：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(odometry_publisher src/odometry_publisher.cpp)</span></span></div><div class="line"><span class="function"><span class="title">if</span><span class="params">(nav_msgs_EXPORTED_TARGETS)</span></span></div><div class="line">	add_dependencies(odometry_publisher $&#123;nav_msgs_EXPORTED_TARGETS&#125;)</div><div class="line"><span class="function"><span class="title">endif</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(odometry_publisher $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line">install(TARGETS odometry_publisher</div><div class="line">	ARCHIVE DESTINATION $&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</div><div class="line">	LIBRARY DESTINATION $&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</div><div class="line">	RUNTIME DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</div><div class="line">	)</div></pre></td></tr></table></figure></p>
<p>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure></p>
<p>参考：<a href="http://wiki.ros.org/navigation/Tutorials/RobotSetup/Odom" target="_blank" rel="external">Publishing Odometry Information Over ROS</a></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS odometry </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS 探索]]></title>
      <url>/2017/07/01/directory-for-ros/</url>
      <content type="html"><![CDATA[<h2 id="ros实战"><a href="#ROS实战" class="headerlink" title="ROS实战"></a>ROS实战</h2><ol>
<li><a href="/2017/06/28/omniwheel-kinematical-analysis/" title="三轮全向移动底盘运动学解析">三轮全向移动底盘运动学解析</a></li>
<li><a href="/2017/07/18/control-mobile-base-by-serial/" title="ROS通过串口控制移动底座">ROS通过串口控制移动底座</a>
</li>
</ol>
<h2 id="ros中级教程"><a href="#ROS中级教程" class="headerlink" title="ROS中级教程"></a>ROS中级教程</h2><ol>
<li><a href="/2017/07/10/ros-intermediate-tutorial-1/" title="ROS中级一 配置并使用ROS导航功能包集">ROS中级一 配置并使用ROS导航功能包集</a></li>
<li><a href="/2017/07/11/ros-intermediate-tutorial-2/" title="ROS中级二 利用Rviz实时观测模拟SLAM过程">ROS中级二 利用Rviz实时观测模拟SLAM过程</a>
</li>
</ol>
<h2 id="ros初级教程"><a href="#ROS初级教程" class="headerlink" title="ROS初级教程"></a>ROS初级教程</h2><ol>
<li><a href="/2017/05/26/ros-primary-tutorial-1/" title="ROS初级一 安装与配置">ROS初级一 安装与配置</a></li>
<li><a href="/2017/05/26/ros-primary-tutorial-2/" title="ROS初级二 文件系统介绍">ROS初级二 文件系统介绍</a></li>
<li><a href="/2017/05/26/ros-primary-tutorial-3/" title="ROS初级三 创建ROS程序包">ROS初级三 创建ROS程序包</a></li>
<li><a href="/2017/05/26/ros-primary-tutorial-4/" title="ROS初级四 编译ROS程序包">ROS初级四 编译ROS程序包</a></li>
<li><a href="/2017/05/27/ros-primary-tutorial-5/" title="ROS初级五 理解ROS节点">ROS初级五 理解ROS节点</a></li>
<li><a href="/2017/05/27/ros-primary-tutorial-6/" title="ROS初级六 理解ROS话题">ROS初级六 理解ROS话题</a></li>
<li><a href="/2017/05/31/ros-primary-tutorial-7/" title="ROS初级七 理解ROS服务和参数">ROS初级七 理解ROS服务和参数</a></li>
<li><a href="/2017/05/31/ros-primary-tutorial-8/" title="ROS初级八 使用rqt_console和roslaunch">ROS初级八 使用rqt_console和roslaunch</a></li>
<li><a href="/2017/05/31/ros-primary-tutorial-9/" title="ROS初级九 创建ROS消息和ROS服务">ROS初级九 创建ROS消息和ROS服务</a></li>
<li><a href="/2017/05/31/ros-primary-tutorial-10/" title="ROS初级十 简单的ROS发布器和订阅器">ROS初级十 简单的ROS发布器和订阅器</a></li>
<li><a href="/2017/06/01/ros-primary-tutorial-11/" title="ROS初级十一 简单的ROS服务器和客户端">ROS初级十一 简单的ROS服务器和客户端</a></li>
<li><a href="/2017/06/07/ros-primary-tutorial-12/" title="ROS初级十二 理解ROS坐标转换上">ROS初级十二 理解ROS坐标转换上</a></li>
<li><a href="/2017/06/07/ros-primary-tutorial-13/" title="ROS初级十三 理解ROS坐标转换下">ROS初级十三 理解ROS坐标转换下</a></li>
<li><a href="/2017/06/08/ros-primary-tutorial-14/" title="ROS初级十四 tf 配置">ROS初级十四 tf 配置</a></li>
<li><a href="/2017/07/07/ros-primary-tutorial-15/" title="ROS初级十五 发布里程计消息">ROS初级十五 发布里程计消息</a></li>
<li><a href="/2017/07/07/ros-primary-tutorial-16/" title="ROS初级十六 发布传感器数据流">ROS初级十六 发布传感器数据流</a></li>
<li><a href="/2017/07/08/ros-primary-tutorial-17/" title="ROS初级十七 URDF解读">ROS初级十七 URDF解读</a>
</li>
</ol>
<h2 id="ros初探"><a href="#ROS初探" class="headerlink" title="ROS初探"></a>ROS初探</h2><ol>
<li><a href="/2017/05/15/ros-indigo-raspberry/" title="树莓派3B安装 ROS-Indigo">树莓派3B安装 ROS-Indigo</a></li>
<li><a href="/2017/05/17/ros-serial/" title="ROS 串口通信">ROS 串口通信</a></li>
<li><a href="/2017/05/22/ros-communication/" title="ROS 多机通信">ROS 多机通信</a></li>
<li><a href="/2017/05/23/ros-navigation-compile/" title="贝叶斯滤波库在树莓派上的移植">贝叶斯滤波库在树莓派上的移植</a></li>
<li><a href="/2017/05/24/ros-simulation/" title="ROS 机器人仿真">ROS 机器人仿真</a></li>
<li><a href="/2017/05/24/ros-navigation-simulation/" title="ROS 导航仿真">ROS 导航仿真</a></li>
<li><a href="/2017/05/25/debug-ros-using-qt/" title="使用 Qt 编译 ROS">使用 Qt 编译 ROS</a>
</li>
</ol>
<h2 id="ros-书籍"><a href="#ROS-书籍" class="headerlink" title="ROS 书籍"></a>ROS 书籍</h2><ol>
<li><a href="/2017/06/12/ros-books/" title="ROS 学习电子书">ROS 学习电子书</a>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[三轮全向移动底盘运动学解析]]></title>
      <url>/2017/06/28/omniwheel-kinematical-analysis/</url>
      <content type="html"><![CDATA[<p>三轮全向移动底盘因其良好的运动性并且结构简单，近年来备受欢迎。三个轮子互相间隔120°，每个全向轮由若干个小滚轮组成，各个滚轮的母线组成一个完整的圆。机器人既可以沿轮面的切线方向移动，也可以沿轮子的轴线方向移动，这两种运动的组合即可以实现平面内任意方向的运动。</p>
<p><img src="/2017/06/28/omniwheel-kinematical-analysis/omnidiagram.jpg" alt=""></p>
<a id="more"></a>
<h1 id="运动学分析"><a href="#运动学分析" class="headerlink" title="运动学分析"></a>运动学分析</h1><p><img src="/2017/06/28/omniwheel-kinematical-analysis/omni.jpg" alt=""><br>为便于运动学分析，我们以理想情况为基础，三个轮子相对于车体的中轴线对称，且物理尺寸重量等完全一致；上层负载均衡，机器人的重心与三个轮子转动轴线的交点重合；三个轮体与地面摩擦力足够大，不会发生打滑现象；机器人中心到三个全向轮的距离相等。<br>定义绝对坐标系 <em>XOY</em>，机器人自身坐标系 <em>X’O’Y’</em>。机器人的姿态角为 <em>θ</em>，即机器人自身坐标相对于绝对坐标的旋转角度。机器人自身旋转的角速度设为 <em>W</em>。 <em>L</em> 为三个轮子相对于机器人中心的距离，$V_A$,$V_B$,$V_C$ 分别表示三个轮子沿驱动方向的速度；角度 <em>ψ</em> 为 轮子与机器人坐标系 <em>X</em> 轴的夹角，这个夹角我们可以算出为 60°。我们假定机器人在任意时刻的速度为 $V = [V_x,V_y,W]$,其中 $V_x$ 和 $V_y$ 分别为机器人在自身坐标系下的  <em>X</em> 轴 <em>Y</em> 轴方向的速度，<em>W</em> 为机器人运动的角速度，假定顺时针方向为正方向。那么可得出机器人运动学方程：<br>$ V_A= V_x + L W $<br>$ V_B= -V_x cosψ + V_y sinψ + L W $<br>$ V_C= -V_x cosψ - V_y sinψ + L W $<br>写成矩阵形式为：<br>$\left[<br>\begin{matrix}<br>V_A \\<br>V_B \\<br>V_C \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; L \\<br>-cosψ &amp; sinψ &amp; L \\<br>-cosψ &amp; -sinψ &amp; L<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>V_x \\<br>V_y \\<br>W \\<br>\end{matrix}<br>\right] $<br>车轮的线速度还可以表示为：<br>$ V_A = Rω_A $<br>$ V_B = Rω_B $<br>$ V_C = Rω_C $<br>式中 R 为全向轮的半径，ω 为全向轮旋转角速度,因此得出：<br>$\left[<br>\begin{matrix}<br>ω_A \\<br>ω_B \\<br>ω_C \\<br>\end{matrix}<br>\right] = R^{-1}<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; L \\<br>-cosψ &amp; sinψ &amp; L \\<br>-cosψ &amp; -sinψ &amp; L<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>V_x \\<br>V_y \\<br>W \\<br>\end{matrix}<br>\right]$<br>以上是机器人在自身坐标系下的运动学方程，实际应用中还需要转换为全局坐标系，上图中机器人自身坐标与全局坐标的夹角为 <em>θ</em>，假设机器人在全局坐标系中的速度为<br>$V_g = [V_gx,V_gy,W_g]$<br>那么可以推出：<br>$V_gx = V_xcosθ - V_ysinθ $<br>$V_gy = V_xsinθ + V_ycosθ $<br>因此可以推出机器人相对于自身坐标下的速度 $V = [V_x,V_y,W]$ 与机器人相对于全局坐标下的速度 $V_g = [V_gx,V_gy,W_g]$ 之间的变换关系：</p>
<p>$R(θ)=<br>\left[<br>\begin{matrix}<br>cosθ &amp; -sinθ &amp; 0 \\<br>sinθ &amp;  cosθ &amp; 0 \\<br>0 &amp; 0 &amp; 1 \\<br>\end{matrix}<br>\right]$</p>
<p>因此两个坐标系下的变换可写成：</p>
<p>$\left[<br>\begin{matrix}<br>V_gx \\<br>V_gy \\<br>W_g \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>cosθ &amp; -sinθ &amp; 0 \\<br>sinθ &amp;  cosθ &amp; 0 \\<br>0 &amp; 0 &amp; 1 \\<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>V_x \\<br>V_y \\<br>W \\<br>\end{matrix}<br>\right]$</p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> omniwheel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo中插入数学公式]]></title>
      <url>/2017/06/26/hexo-insert-formula/</url>
      <content type="html"><![CDATA[<p>原生hexo并不支持数学公式，需要安装插件 <a href="https://www.mathjax.org/" target="_blank" rel="external">mathJax</a>。<a href="https://www.mathjax.org/" target="_blank" rel="external">mathJax</a> 是一款运行于浏览器中的开源数学符号渲染引擎，使用 <a href="https://www.mathjax.org/" target="_blank" rel="external">mathJax</a> 可以方便的在浏览器中嵌入数学公式。<a href="https://www.mathjax.org/" target="_blank" rel="external">mathJax</a> 使用网络字体产生高质量的排版，因此可适应各种分辨率，它的显示是基于文本的而非图片，因此显示效果更好。这些公式可以被搜索引擎使用，因此公式里的符号一样可以被搜索引擎检索到。先看一下矩阵的显示效果:</p>
<p>$\left[<br>\begin{matrix}<br>V_A \\<br>V_B \\<br>V_C \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; L \\<br>-cosψ &amp; sinψ &amp; L \\<br>-cosψ &amp; -sinψ &amp; L<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>V_x \\<br>V_y \\<br>W \\<br>\end{matrix}<br>\right] $</p>
<a id="more"></a>
<h1 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h1><p>　　<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-<span class="built_in">math</span> <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<p>在站点配置文件 <em>_config.yml</em> 中添加：<br>　　<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">math</span>:</div><div class="line">  <span class="attribute">engine</span>: <span class="string">'mathjax'</span> # or <span class="string">'katex'</span></div><div class="line">  <span class="attribute">mathjax</span>:</div><div class="line">    # <span class="attribute">src</span>: custom_mathjax_source</div><div class="line">    <span class="attribute">config</span>:</div><div class="line">      # MathJax config</div></pre></td></tr></table></figure></p>
<p>在 next 主题配置文件中 <em>themes/next-theme/_config.yml</em> 中将 mathJax 设为 true:<br>　　<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># MathJax Support</span></div><div class="line"><span class="attr">mathjax:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  per_page:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  cdn:</span> <span class="string">//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span></div></pre></td></tr></table></figure></p>
<p>也可以在文章的开始集成插件支持，但不建议这么做：<br>　　<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span></span></div><div class="line">   <span class="attr">src</span>=<span class="string">"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"</span>&gt;<span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>公式插入格式：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span>数学公式<span class="symbol">$</span> 行内 不独占一行</div><div class="line"><span class="symbol">$</span><span class="symbol">$</span>数学公式<span class="symbol">$</span><span class="symbol">$</span> 行间 独占一行</div></pre></td></tr></table></figure></p>
<p>例如：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$f</span>(x)=ax+b$</span></div></pre></td></tr></table></figure></p>
<p>显示效果为：$f(x)=ax+b$<br>如果是行间则使用：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span><span class="symbol">$</span>f(x)=ax+b<span class="symbol">$</span><span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>显示效果为：$$f(x)=ax+b$$</p>
<h1 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h1><h2 id="上标与下标"><a href="#上标与下标" class="headerlink" title="上标与下标"></a>上标与下标</h2><p>使用 ^ 表示上标，使用 _ 表示下标，如果上下标的内容多于一个字符，可以使用大括号括起来：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span><span class="symbol">$</span>f(x) = a_1x^n + a_2x^&#123;n<span class="number">-1</span>&#125; + a_3x^&#123;n<span class="number">-2</span>&#125;<span class="symbol">$</span><span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>显示效果为：$$f(x) = a_1x^n + a_2x^{n-1} + a_3x^{n-2}$$<br>如果左右两边都有上下标可以使用 \sideset 语法：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span><span class="symbol">$</span>\sideset&#123;^n_k&#125;&#123;^x_y&#125;a<span class="symbol">$</span><span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>显示效果为：$$\sideset{^n_k}{^x_y}a$$</p>
<h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>在 markdown 语法中，\, $, {, }, _都是有特殊含义的，所以需要加\转义。小括号与方括号可以使用原始的() [] 大括号需要转义\也可以使用\lbrace和 \rbrace<br>　　<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">\&#123;</span>x*y<span class="symbol">\&#125;</span></div><div class="line"><span class="symbol">\l</span>brace x*y <span class="symbol">\r</span>brace</div></pre></td></tr></table></figure></p>
<p>显示效果为：$ \lbrace x*y \rbrace $<br>原始符号不会随着公式大小自动缩放，需要使用 \left 和 \right 来实现自动缩放：<br>　　<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="formula">$$<span class="tag">\<span class="name">left</span></span> <span class="tag">\<span class="name">lbrace</span></span> <span class="tag">\<span class="name">sum</span></span>_&#123;i=0&#125;^n i^3 = <span class="tag">\<span class="name">frac</span><span class="string">&#123;(n^2+n)(n+6)&#125;</span><span class="string">&#123;9&#125;</span></span> <span class="tag">\<span class="name">right</span></span> <span class="tag">\<span class="name">rbrace</span></span>$$</span></div></pre></td></tr></table></figure></p>
<p>效果：<br>$$\left \lbrace \sum_{i=0}^n i^3 = \frac{(n^2+n)(n+6)}{9} \right \rbrace$$<br>不使用\left 和 \right的效果：<br>　　<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="formula">$$ <span class="tag">\<span class="name">lbrace</span></span> <span class="tag">\<span class="name">sum</span></span>_&#123;i=0&#125;^n i^3 = <span class="tag">\<span class="name">frac</span><span class="string">&#123;(n^2+n)(n+6)&#125;</span><span class="string">&#123;9&#125;</span></span>  <span class="tag">\<span class="name">rbrace</span></span>$$</span></div></pre></td></tr></table></figure></p>
<p>$$ \lbrace \sum_{i=0}^n i^3 = \frac{(n^2+n)(n+6)}{9}  \rbrace$$</p>
<h2 id="分数与开方"><a href="#分数与开方" class="headerlink" title="分数与开方"></a>分数与开方</h2><p>可以使用\frac 或者 \over 实现分数的显示：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span>\<span class="built-in">frac</span> xy<span class="symbol">$</span></div><div class="line"><span class="symbol">$</span> x+<span class="number">3</span> \over y+<span class="number">5</span> <span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>分别显示为：$\frac xy$ 和 $ x+3 \over y+5 $。<br>开方使用\sqrt:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> \<span class="built-in">sqrt</span>&#123;x^<span class="number">5</span>&#125; <span class="symbol">$</span></div><div class="line"><span class="symbol">$</span> \<span class="built-in">sqrt</span>[<span class="number">3</span>]&#123;\<span class="built-in">frac</span> xy&#125; <span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>分别显示为：$ \sqrt{x^5} $ 和 $ \sqrt[3]{\frac xy} $</p>
<h2 id="求和与积分"><a href="#求和与积分" class="headerlink" title="求和与积分"></a>求和与积分</h2><p>求和使用\sum,可加上下标，积分使用\int可加上下限，双重积分用\iint:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> \sum_&#123;i=<span class="number">0</span>&#125;^n <span class="symbol">$</span></div><div class="line"><span class="symbol">$</span> \int_1^\infty <span class="symbol">$</span></div><div class="line"><span class="symbol">$</span> \iint_1^\infty <span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>分别显示:$ \sum_{i=0}^n $ 和 $ \int_1^\infty $ 以及 $ \iint_1^\infty $</p>
<h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><p>极限使用\lim:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> \lim_&#123;x \to <span class="number">0</span>&#125; <span class="symbol">$</span></div></pre></td></tr></table></figure></p>
<p>显示为：$ \lim_{x \to 0} $</p>
<h2 id="表格与矩阵"><a href="#表格与矩阵" class="headerlink" title="表格与矩阵"></a>表格与矩阵</h2><p>表格样式lcr表示居中，|加入一条竖线，\hline表示行间横线，列之间用&amp;分隔，行之间用\分隔<br>　　<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="formula">$$<span class="tag">\<span class="name">begin</span><span class="string">&#123;array&#125;</span><span class="string">&#123;c|lcr&#125;</span></span></span></div><div class="line">n &amp; <span class="tag">\<span class="name">text</span><span class="string">&#123;Left&#125;</span></span> &amp; <span class="tag">\<span class="name">text</span><span class="string">&#123;Center&#125;</span></span> &amp; <span class="tag">\<span class="name">text</span><span class="string">&#123;Right&#125;</span></span> <span class="tag">\<span class="name">\</span></span><span class="tag">\<span class="name">\</span></span></div><div class="line"><span class="tag">\<span class="name">hline</span></span></div><div class="line">1 &amp; 1.97 &amp; 5 &amp; 12 <span class="tag">\<span class="name">\</span></span><span class="tag">\<span class="name">\</span></span></div><div class="line">2 &amp; -11 &amp; 19 &amp; -80 <span class="tag">\<span class="name">\</span></span><span class="tag">\<span class="name">\</span></span></div><div class="line">3 &amp; 70 &amp; 209 &amp; 1+i <span class="tag">\<span class="name">\</span></span><span class="tag">\<span class="name">\</span></span></div><div class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;array&#125;</span></span>$$</div></pre></td></tr></table></figure></p>
<p>显示效果为：$$\begin{array}{c|lcr}<br>n &amp; \text{Left} &amp; \text{Center} &amp; \text{Right} \\<br>\hline<br>1 &amp; 1.97 &amp; 5 &amp; 12 \\<br>2 &amp; -11 &amp; 19 &amp; -80 \\<br>3 &amp; 70 &amp; 209 &amp; 1+i \\<br>\end{array}$$<br>表格的插入也可以使用以下方式：<br>　　<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">名称|<span class="string">说明</span></div><div class="line">---|<span class="string">---</span>|<span class="string">---</span></div><div class="line">temperature|<span class="string">  室内温度</span></div><div class="line">set temperature|<span class="string">  设定温度</span></div><div class="line">height|<span class="string">  室内高度</span></div></pre></td></tr></table></figure></p>
<p>显示效果：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>temperature</td>
<td>室内温度</td>
</tr>
<tr>
<td>set temperature</td>
<td>设定温度</td>
</tr>
<tr>
<td>height</td>
<td>室内高度</td>
</tr>
</tbody>
</table>
<p>矩阵显示和表格很相似<br>　　<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$$<span class="symbol">\l</span>eft[</div><div class="line"><span class="symbol">\b</span>egin&#123;matrix&#125;</div><div class="line">V_A <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">V_B <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">V_C <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line"><span class="symbol">\e</span>nd&#123;matrix&#125;</div><div class="line"><span class="symbol">\r</span>ight] =</div><div class="line"><span class="symbol">\l</span>eft[</div><div class="line"><span class="symbol">\b</span>egin&#123;matrix&#125;</div><div class="line">1 &amp; 0 &amp; L <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">-cosψ &amp; sinψ &amp; L <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">-cosψ &amp; -sinψ &amp; L</div><div class="line"><span class="symbol">\e</span>nd&#123;matrix&#125;</div><div class="line"><span class="symbol">\r</span>ight]</div><div class="line"><span class="symbol">\l</span>eft[</div><div class="line"><span class="symbol">\b</span>egin&#123;matrix&#125;</div><div class="line">V_x <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">V_y <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line">W <span class="symbol">\\</span><span class="symbol">\\</span></div><div class="line"><span class="symbol">\e</span>nd&#123;matrix&#125;</div><div class="line"><span class="symbol">\r</span>ight] $$</div></pre></td></tr></table></figure></p>
<p>显示效果：　<br>$$\left[<br>\begin{matrix}<br>V_A \\<br>V_B \\<br>V_C \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; L \\<br>-cosψ &amp; sinψ &amp; L \\<br>-cosψ &amp; -sinψ &amp; L<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>V_x \\<br>V_y \\<br>W \\<br>\end{matrix}<br>\right] $$<br>还有其他矩阵如内联矩阵增广矩阵方程组等，下次再补充，未完待续…<br>参考：<br><a href="https://www.mathjax.org" target="_blank" rel="external">mathJax</a><br><a href="http://mohu.org/info/symbols/symbols.htm" target="_blank" rel="external">LaTeX</a><br><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference/5044" target="_blank" rel="external">mathjax-basic-tutorial-and-quick-reference</a><br><a href="http://mlworks.cn/posts/introduction-to-mathjax-and-latex-expression" target="_blank" rel="external">MathJax公式简介</a></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> formula </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[超经典 ROS 学习电子书]]></title>
      <url>/2017/06/12/ros-books/</url>
      <content type="html"><![CDATA[<p>收藏了几本 ROS 学习的超级经典教材，都是高清晰电子版，在这里和大家分享一下。</p>
<p><img src="/2017/06/12/ros-books/book.jpg" alt=""><br><a id="more"></a></p>
<p>下载地址：<a href="https://github.com/StevenShiChina/books" target="_blank" rel="external">ROS-Books</a></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS Books </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Putty 远程运行 ubuntu 图形界面程序]]></title>
      <url>/2017/06/12/putty-graphics-ubuntu/</url>
      <content type="html"><![CDATA[<p>远程登录 linux 一般通过 SSH 协议，或 telnet 协议，这两种协议一般都只是命令行界面，而不能远程运行带有图形界面的应用程序。但是 putty 这款软件支持 X11 Forwarding,如果再配合一个 <a href="https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1" target="_blank" rel="external">X server</a> 问题就解决了。一般常用的 <a href="https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1" target="_blank" rel="external">X server</a> 有 <a href="https://sourceforge.net/projects/xming/" target="_blank" rel="external">Xming</a> 和 <a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="external">VcXsrv</a>。基本的原理就是 ubuntu 开启 X11 转发服务，putty 负责数据的转发，而 X Server 进行图形界面的显示。<br><a id="more"></a></p>
<h1 id="ssh-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h1><p>配置 ubuntu 允许 X11 转发，打开 /etc/ssh/sshd_config 使能 X11 forwarding:<br>   <figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">X11Forwarding</span> <span class="literal">yes</span></div></pre></td></tr></table></figure></p>
<p>配置完成后记得重启 SSH 服务：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo /etc/init.d/ssh restart</span></div></pre></td></tr></table></figure></p>
<h1 id="x-server-配置"><a href="#X-Server-配置" class="headerlink" title="X Server 配置"></a>X Server 配置</h1><p>X Server 可以使用 <a href="https://sourceforge.net/projects/xming/" target="_blank" rel="external">Xming</a> 也可以使用 <a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="external">VcXsrv</a>，在 win10 64bits 环境下测试 <a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="external">VcXsrv</a> 的效果较好。</p>
<h2 id="xming"><a href="#Xming" class="headerlink" title="Xming"></a><a href="https://sourceforge.net/projects/xming/" target="_blank" rel="external">Xming</a></h2><p>Xming 的安装保持默认即可，安装完成后运行 Xlaunch 进行简单的配置：</p>
<p><img src="/2017/06/12/putty-graphics-ubuntu/xmingconfig.jpg" alt=""></p>
<p>主要是 Display number 的配置，记住这个号码，之后在 putty 中会用到。保存配置后即可启动 Xming。</p>
<h2 id="vcxsrv"><a href="#VcXsrv" class="headerlink" title="VcXsrv"></a><a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="external">VcXsrv</a></h2><p>VcXsrv 安装完成后运行 XLaunch 进行配置，和前面 xming 的配置类似，主要是 Display number 我这里配置为 0。</p>
<h1 id="putty-配置"><a href="#Putty-配置" class="headerlink" title="Putty 配置"></a>Putty 配置</h1><p>Putty 首先选择 SSH 协议，端口 22：<br><img src="/2017/06/12/putty-graphics-ubuntu/puttyssh.jpg" alt=""><br>还需配置X11：<br><img src="/2017/06/12/putty-graphics-ubuntu/puttyx11.jpg" alt=""></p>
<p>注意 X display location 中的 localhost:0 ，这个端口号即是前面设置的 Display number，保持前后一致即可。<br>登录到 ubuntu 后，在命令行界面打开一个图形界面程序：<br><img src="/2017/06/12/putty-graphics-ubuntu/run.jpg" alt=""><br>比较不爽的是当用键盘控制时，turtle 的反应比较慢，不如直接在 ubuntu 系统内运行快。</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PuttyGraphics </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git 实用命令总结]]></title>
      <url>/2017/06/09/git-summary/</url>
      <content type="html"><![CDATA[<p>使用 Git 那么久也没来得及总结一下，今天抽空将 Git 经常用到的一些命令记录下来，以备不时之需。</p>
<h1 id="创建代码仓"><a href="#创建代码仓" class="headerlink" title="创建代码仓"></a>创建代码仓</h1><p>如果远程已有代码仓可以直接 clone 至本地：<br>   <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">clone</span> <span class="title">https</span>://github.com/username/repository.git</div></pre></td></tr></table></figure></p>
<p>使用时请将 username 和 repository 替换成自己需要的远程代码仓地址，比如 clone 我的 learning_tf 代码仓至本地：<br>   <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">clone</span> <span class="title">https</span>://github.com/StevenShiChina/learning_tf.git</div></pre></td></tr></table></figure></p>
<p>值得一提得是 git 不仅支持 https 协议，还支持 ssh 协议等，具体可参考 <a href="https://git-scm.com/book/id/v2/Git-on-the-Server-The-Protocols" target="_blank" rel="external">git-protocols</a>。<br>也可以在本地创建一个 git 项目：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git init</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="本地修改与更新"><a href="#本地修改与更新" class="headerlink" title="本地修改与更新"></a>本地修改与更新</h1><p>在本地新建文件或修改文件后，要将文件修改提交到暂存区：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> git add --<span class="keyword">all</span> <span class="comment">// 当前目录下的所有文件都提交到暂存</span></div></pre></td></tr></table></figure></p>
<p>也可以使用如下命令：<br>   <figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">add</span> . <span class="comment">// ‘.’指当前目录下所有文件</span></div></pre></td></tr></table></figure></p>
<p>只添加某个文件：<br>   <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">add</span><span class="bash"> -p &lt;file&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果忘记了当前目录下修改了哪个文件可以用以下命令查看：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git status</span></div></pre></td></tr></table></figure></p>
<p>修改完之后可以提交本地所有修改到暂存区：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git commit <span class="_">-a</span></span></div></pre></td></tr></table></figure></p>
<p>为了区分每次提交的不同可以附加消息提交：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"your message to add here"</span></span></div></pre></td></tr></table></figure></p>
<p> 如果在提交到暂存前提示错误，可以删除 git 的缓存，重新提交到暂存：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git rm -r --cached .</span></div><div class="line"><span class="meta">$</span><span class="bash"> git add --all</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"your message to add here"</span></span></div></pre></td></tr></table></figure></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>在将本地代码仓推送至远程之前，我们还需要对本地 git 进行一些必要的配置，包括全局用户名以及邮件，这个可以配置为全局的也可以配置在自己的代码仓下：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span>  <span class="comment">// 生成SSH Key</span></div><div class="line">$ git config --global user<span class="selector-class">.name</span> <span class="string">"your username"</span> <span class="comment">//配置远程仓的用户名</span></div><div class="line">$ git config --global user<span class="selector-class">.email</span> <span class="string">"your_email@youremail.com"</span> <span class="comment">//配置邮件地址</span></div></pre></td></tr></table></figure></p>
<p>需要将生成的 SSH Key 添加到 github 具体可参考站内文章 <a href="/2017/05/07/hexo-blog/" title="hexo+github建立个人博客">hexo+github建立个人博客</a> 。<br>可以通过以下命令查看是否能连接到远程：<br>   <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>ssh -T git<span class="variable">@github</span>.com</div></pre></td></tr></table></figure></p>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>如果是本地新建的代码仓，需要通过以下命令将远程主机的代码仓与本地对应起来：<br>   <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote <span class="built_in">add</span> origin http<span class="variable">s:</span>//github.<span class="keyword">com</span>/username/repository.git</div></pre></td></tr></table></figure></p>
<p>查看远程分支：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></div><div class="line"><span class="meta">$</span><span class="bash"> git remote show &lt;分支名&gt; //查看某个分支信息</span></div></pre></td></tr></table></figure></p>
<p>如果远程有多个分支，可以通过以下命令切换：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git checkout &lt;分支名&gt;</span></div><div class="line"><span class="meta">$</span><span class="bash"> git checkout -b &lt;分支名&gt; //该命令可以创建分支并切换到分支</span></div></pre></td></tr></table></figure></p>
<p>如果搞错了，可以删除本地分支：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git branch <span class="_">-d</span> &lt;分支名&gt;</span></div></pre></td></tr></table></figure></p>
<p>可以通过 tag 给当前版本打个标签：<br>   <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">tag</span> <span class="title">&lt;tag-name</span>&gt;</div></pre></td></tr></table></figure></p>
<h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><p>本地修改完成后，需要推送至远程：<br>   <figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">push</span> <span class="built_in">origin</span> &lt;分支名&gt;</div></pre></td></tr></table></figure></p>
<h1 id="本地同步"><a href="#本地同步" class="headerlink" title="本地同步"></a>本地同步</h1><p>在本地可以通过 pull 命令来同步远程文件：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> git pull  <span class="comment">// 同步所有</span></div><div class="line"><span class="symbol">$</span> git pull origin &lt;分支名&gt; <span class="comment">//同步某个分支</span></div></pre></td></tr></table></figure></p>
<h1 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h1>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git merge &lt;分支名&gt;</span></div></pre></td></tr></table></figure>
<h1 id="回撤"><a href="#回撤" class="headerlink" title="回撤"></a>回撤</h1><p>如果修改错了，想回退到上一个版本：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD</span></div></pre></td></tr></table></figure></p>
<p>未完待续…</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS初级十四 tf 配置]]></title>
      <url>/2017/06/08/ros-primary-tutorial-14/</url>
      <content type="html"><![CDATA[<h1 id="transform-configuration-变换配置"><a href="#Transform-Configuration-变换配置" class="headerlink" title="Transform Configuration 变换配置"></a>Transform Configuration 变换配置</h1><p>变换树是一种偏移，体现了不同坐标系之间的变换和旋转。假设有一个简单的机器人，只有移动底座以及一个位于底座上方的激光扫描仪。因此定义两个坐标系，一个对应激光扫描仪的中心点的坐标系，一个对应于移动底座中心点的坐标系，两个坐标系分别取名为 <em>base_laser</em> 和 <em>base_link</em> 。</p>
<p><img src="/2017/06/08/ros-primary-tutorial-14/simple_robot.png" alt=""><br><a id="more"></a><br>假设我们已经从激光扫描仪获取了一些数据，但这些数据都是以物体到激光扫描仪的距离给出的，即坐标系是 <em>base_laser</em>。 现在通过这些数据让机器人避开一些障碍物，如果不将这些激光扫描仪获取的数据从 <em>base_laser</em> 转换到 <em>base_link</em> 那么机器人在避开障碍物的过程中有可能失败，因此需要将激光扫描仪获取的数据从 <em>base_laser</em> 坐标系转换到 <em>base_link</em> 坐标系。因此需要知道两个坐标系的关系。看上图，<em>base_laser</em> 中心点位于 <em>base_link</em> 中心点上方 20cm 处，并向右偏移 10cm 。因此从激光扫描仪到移动底座的转换关系为(x:-0.1m,y:0.0m,z:-0.2m),反过来从移动底座到激光扫描仪的转换关系为(x:0.1m,y:0.0m,z:0.2m)。<br>当然这种变换关系我们可以手动去计算保存，需要的时候再调用，但是如果坐标系统增加，变换关系复杂，那么就需要利用 tf 来实现了。使用 tf 来管理坐标转关系，需要将转换关系添加到转换树中，转换树中的每一个节点都对应着一种坐标系，节点之间的连线即是两个坐标相互转换的一种表示，从当前节点到子节点的表示。 tf 利用树结构保证了两个坐标系之间只存在唯一的转换关系，我们假定节点的连线方向从父节点指向子节点。</p>
<p><img src="/2017/06/08/ros-primary-tutorial-14/tf_robot.png" alt=""></p>
<p>基于以上描述，我们需要创建两个节点，分别命名为 <em>base_laser</em> 以及 <em>base_link</em>。为了明确两者之间的关系，需要指定谁是父节点 parent，谁是子节点 child。因为 tf 假设所有的转换都是从 parent 到 child。这里我们选择 <em>base_link</em> 为 parent 父节点，<em>base_laser</em> 为 child 子节点，将来如果有其他传感器也将作为子节点添加到移动底座。因此转换关系的数学关系为(x:0.1m,y:0.0m,z:0.2m)。知道这个转换关系 <em>base_link</em> 就可以推理出 <em>base_laser</em> 扫描出的数据跟自己的位置关系，因此可以安全的避开障碍物并规划合理的路径。这个转换实质是将 <em>base_laser</em> 坐标系的点转换到 <em>base_link</em> 坐标系中去。本篇涉及的代码已上传至 <a href="https://github.com/StevenShiChina/robot_setup_tf" target="_blank" rel="external">mygithub</a>。</p>
<h1 id="broadcasting-a-transform-广播变换"><a href="#Broadcasting-a-Transform-广播变换" class="headerlink" title="Broadcasting a Transform 广播变换"></a>Broadcasting a Transform 广播变换</h1><p>创建源码包，添加依赖项：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/src/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg robot_setup_tf roscpp tf geometry_msgs</span></div></pre></td></tr></table></figure></p>
<p>创建一个节点用于广播变换，我们将节点命名为 tf_broadcaster，在 robot_setup_tf/src 目录下建立文件 tf_broadcaster.cpp，添加以下内容：<br>   <figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_broadcaster.h&gt;</span></span></div><div class="line"> </div><div class="line">  int main(int argc, char** argv)</div><div class="line">  &#123;</div><div class="line"><span class="symbol">      ros:</span>:init(argc, argv, <span class="string">"robot_tf_publisher"</span>);</div><div class="line"><span class="symbol">      ros:</span>:NodeHandle n;</div><div class="line"><span class="symbol"> </span></div><div class="line">      ros::Rate r(<span class="number">100</span>);</div><div class="line">     <span class="comment">//创建TransformBroadcaster对象，用于发布变换关系</span></div><div class="line"><span class="symbol">     tf:</span>:TransformBroadcaster broadcaster;</div><div class="line">     <span class="comment">//通过TransformBroadcaster来发送转换关系，需要附带5个参数。</span></div><div class="line">     <span class="comment">//第1个参数，我们传递了旋转变换，在两个坐标系的发送的任意旋转，</span></div><div class="line">     <span class="comment">//都必须通过调用btQuaternion.现在情况下，我们不想旋转，</span></div><div class="line">     <span class="comment">//所以我们在调用btQauternion的时候，将pitch,roll,yaw的参数都置0.</span></div><div class="line">     <span class="comment">//第2个参数，btVector3，任何变换过程都需要调用它。</span></div><div class="line">     <span class="comment">//相应的传感器的x方向距离机体基准偏移10cm，z方向20cm。</span></div><div class="line">     <span class="comment">//第3个参数，我们需要给定转换关系携带一个时间戳，我们标记为ros::Time::now()。</span></div><div class="line">     <span class="comment">//第4个参数，我们需要传递parent节点的名字。</span></div><div class="line">     <span class="comment">//第5个参数，传递的是child节点的名字。</span></div><div class="line">     while(n.ok())&#123;</div><div class="line">         broadcaster.sendTransform(</div><div class="line"><span class="symbol">             tf:</span>:StampedTransform(</div><div class="line"><span class="symbol">                 tf:</span>:Transform(<span class="symbol">tf::</span>Quaternion(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>), <span class="symbol">tf::</span>Vector3(<span class="number">0.1</span>, <span class="number">0.0</span>, <span class="number">0.2</span>)),</div><div class="line"><span class="symbol">             ros:</span>:<span class="symbol">Time::</span>now(),<span class="string">"base_link"</span>, <span class="string">"base_laser"</span>));</div><div class="line">         r.sleep();</div><div class="line"></div><div class="line">     &#125;</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>通过TransformBroadcaster来发送转换关系，需要附带5个参数。第1个参数，我们传递了旋转变换，在两个坐标系的发送的任意旋转，都必须通过调用 btQuaternion。现在我们不想旋转，所以我们在调用 btQauternion 的时候，将 pitch,roll,yaw 的参数都置0。第2个参数 btVector3，任何变换过程都需要调用它。相应的传感器的 x 方向距离机体基准偏移 10cm，z 方向 20cm。第3个参数，我们需要给定转换关系携带一个时间戳，我们标记为 ros::Time::now()。第4个参数，我们需要传递 parent 节点的名字。第5个参数，传递的是 child 节点的名字。 </p>
<h1 id="using-a-transform-调用变换"><a href="#Using-a-Transform-调用变换" class="headerlink" title="Using a Transform 调用变换"></a>Using a Transform 调用变换</h1><p>上面的节点用于发布转换关系，即将 <em>base_laser</em> 的坐标转换为 <em>base_link</em> 的坐标，现在我们利用这个转换关系，将从激光扫描仪获取的数据转换到移动底座对应的坐标系中来，即 <em>base_laser</em> 到 <em>base_link</em> 的转换。需要建立一个节点用于监听这种变换，在 robot_setup_tf/src 目录下新建文件 tf_listener.cpp 并添加以下代码：<br>   <figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;geometry_msgs/PointStamped.h&gt;</span></span></div><div class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_listener.h&gt;</span></span></div><div class="line">  </div><div class="line"><span class="comment">//创建一个函数，参数为TransformListener,作用为将“base_laser”坐标系的点，变换到“base_link”坐标系中。</span></div><div class="line"><span class="comment">//这个函数将会以ros::Timer定义的周期，作为一个回调函数周期调用,目前周期是1s</span></div><div class="line"> void transformPoint(const <span class="symbol">tf::</span>TransformListener&amp; listener)&#123;</div><div class="line">       </div><div class="line">     </div><div class="line">      <span class="comment">//此处，我们创建一个虚拟点，作为geometry_msgs::PointStamped。</span></div><div class="line">      <span class="comment">//消息名字最后的“Stamped”的意义是，它包含了一个头部，</span></div><div class="line">      <span class="comment">//允许我们去把时间戳和消息的frame_id相关联起来。</span></div><div class="line">      <span class="comment">//我们将会设置laser_point的时间戳为ros::time(),</span></div><div class="line">      <span class="comment">//即是允许我们请求TransformListener取得最新的变换数据。</span></div><div class="line">      <span class="comment">//对于header里的frame_id，我们设置为“base_laser”,</span></div><div class="line">      <span class="comment">//因为我们是创建的是扫描仪坐标系里的虚拟点。</span></div><div class="line">      <span class="comment">//最后，我们将会设置具体的虚拟点，比如x:1.0,y:0.2,z:0.0 </span></div><div class="line">      <span class="comment">//we'll create a point in the base_laser frame that we'd like to transform to the base_link frame</span></div><div class="line"><span class="symbol">       geometry_msgs:</span>:PointStamped laser_point;</div><div class="line">       laser_point.header.frame_id = <span class="string">"base_laser"</span>;</div><div class="line">  </div><div class="line">      <span class="comment">//we'll just use the most recent transform available for our simple example</span></div><div class="line">      laser_point.header.stamp = <span class="symbol">ros::</span>Time();</div><div class="line"> </div><div class="line">      <span class="comment">//just an arbitrary point in space</span></div><div class="line">      <span class="comment">//这里我们给定一个固定点</span></div><div class="line">      laser_point.point.x = <span class="number">1.0</span>;</div><div class="line">      laser_point.point.y = <span class="number">0.2</span>;</div><div class="line">      laser_point.point.z = <span class="number">0.0</span>;</div><div class="line"> </div><div class="line">      <span class="comment">//我们已经有了从“base_laser”到“base_link”变换的点数据。</span></div><div class="line">      <span class="comment">//进一步，我们通过TransformListener对象，</span></div><div class="line">      <span class="comment">//调用transformPoint(),填充三个参数来进行数据变换。</span></div><div class="line">      <span class="comment">//第1个参数，代表我们想要变换的目标坐标系的名字。</span></div><div class="line">      <span class="comment">//第2个参数填充需要变换的原始坐标系的点对象，</span></div><div class="line">      <span class="comment">//第3个参数填充，目标坐标系的点对象。</span></div><div class="line">      <span class="comment">//所以，在函数调用后，base_point里存储的信息就是变换后的点坐标。 </span></div><div class="line">      try&#123;</div><div class="line"><span class="symbol">          geometry_msgs:</span>:PointStamped base_point;</div><div class="line">          listener.transformPoint(<span class="string">"base_link"</span>, laser_point, base_point);</div><div class="line"> </div><div class="line">          ROS_INFO(<span class="string">"base_laser: (%.2f, %.2f. %.2f) -----&gt; base_link: (%.2f, %.2f, %.2f) at time %.2f"</span>,</div><div class="line">          laser_point.point.x, laser_point.point.y, laser_point.point.z,</div><div class="line">          base_point.point.x, base_point.point.y, base_point.point.z, base_point.header.stamp.toSec());</div><div class="line">      &#125;</div><div class="line">     <span class="comment">//显示异常信息</span></div><div class="line">      catch(<span class="symbol">tf::</span>TransformException&amp; ex)&#123;</div><div class="line">          ROS_ERROR(<span class="string">"Received an exception trying to transform a point from \"base_laser\" to \"base_link\": %s"</span>, ex.what());</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line"> int main(int argc, char** argv)&#123;</div><div class="line"><span class="symbol">      ros:</span>:init(argc, argv, <span class="string">"robot_tf_listener"</span>);</div><div class="line"><span class="symbol">      ros:</span>:NodeHandle n;</div><div class="line">      <span class="comment">//一个TransformListener目标会自动的订阅ROS系统中的变换消息主题，</span></div><div class="line">      <span class="comment">//同时管理所有的该通道上的变换数据</span></div><div class="line"><span class="symbol">      tf:</span>:TransformListener listener(<span class="symbol">ros::</span>Duration(<span class="number">10</span>));</div><div class="line"> </div><div class="line">      <span class="comment">//we'll transform a point once every second</span></div><div class="line"><span class="symbol">      ros:</span>:Timer timer = n.createTimer(<span class="symbol">ros::</span>Duration(<span class="number">1.0</span>), <span class="symbol">boost::</span>bind(&amp;transformPoint, <span class="symbol">boost::</span>ref(listener)));</div><div class="line"><span class="symbol"> </span></div><div class="line">      ros::spin();</div><div class="line"> </div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h1 id="编译测试"><a href="#编译测试" class="headerlink" title="编译测试"></a>编译测试</h1><p>在编译之前需要修改 CMakeLists.txt 文件，添加构建依赖项<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(tf_broadcaster src/tf_broadcaster.cpp)</span></span></div><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(tf_listener src/tf_listener.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(tf_listener $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p>编译:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div><div class="line"><span class="meta">$</span><span class="bash"> rospack profile</span></div></pre></td></tr></table></figure></p>
<p>开启三个 terminal 分别运行：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun robot_setup_tf tf_broadcaster</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun robot_setup_tf tf_listener</span></div></pre></td></tr></table></figure></p>
<p>在 tf_listener 运行后可以看到如下输出，每隔1秒发布一次：</p>
<p><img src="/2017/06/08/ros-primary-tutorial-14/tf.png" alt=""></p>
<p>参考 <a href="http://wiki.ros.org/cn/navigation/Tutorials/RobotSetup/TF" target="_blank" rel="external">RobotSetup/TF</a></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS tf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS初级十三 理解ROS坐标转换下]]></title>
      <url>/2017/06/07/ros-primary-tutorial-13/</url>
      <content type="html"><![CDATA[<p>本篇继续学习 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a>。通过编写一个简单的 tf broadcaster 以及 tf listener 来更进一步的理解坐标变换。本篇涉及到的代码已上传到 <a href="https://github.com/StevenShiChina/learning_tf" target="_blank" rel="external">mygithub</a>。</p>
<h1 id="tf-broadcaster"><a href="#tf-broadcaster" class="headerlink" title="tf broadcaster"></a>tf broadcaster</h1><p>tf broadcaster 用于广播坐标变换，任何节点都可以监听该变换。先创建一个程序包，名字随心，这里我们命名为 <em>learning_tf</em>,包的依赖项为 <em>roscpp rospy turtlesim</em><br><a id="more"></a><br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/src/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_create_pkg learning_tf roscpp rospy turtlesim</span></div></pre></td></tr></table></figure></p>
<p>为了便于使用 <em>roscd</em> 我们先编译一下这个程序包:</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div><div class="line"><span class="meta">$</span><span class="bash"> rospack profile</span></div></pre></td></tr></table></figure>
<p>此时使用 roscd 输入lear 再按 TAB 即可出现 <em>learning_tf/</em>。进入 <em>learning_tf/src</em> 目录下，新建文件 <em>turtle_tf_broadcaster.cpp</em> 添加如下代码：</p>
   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_broadcaster.h&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;turtlesim/Pose.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">string</span> turtle_name;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">poseCallback</span><span class="params">(<span class="keyword">const</span> turtlesim::PoseConstPtr&amp; msg)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="comment">//创建一个 TransformBroadcaster 对象用于发布坐标变换</span></div><div class="line">  <span class="keyword">static</span> tf::TransformBroadcaster br;</div><div class="line">  </div><div class="line">  <span class="comment">//创建Transform 对象并将2D的坐标转换为3D坐标系</span></div><div class="line">  tf::Transform transform;</div><div class="line">  transform.setOrigin( tf::Vector3(msg-&gt;x, msg-&gt;y, <span class="number">0.0</span>) );<span class="comment">//获取 x y 坐标，不需要Z坐标 </span></div><div class="line"> </div><div class="line">  tf::Quaternion q;</div><div class="line">  q.setRPY(<span class="number">0</span>, <span class="number">0</span>, msg-&gt;theta);<span class="comment">// x y轴旋转为0因为在地面运动只能绕Z轴的旋转</span></div><div class="line">  transform.setRotation(q);<span class="comment">//</span></div><div class="line">  <span class="comment">//发布坐标变换 ros::Time::now()为转换携带的时间戳 传递父节点的名字 world 子节点为turtle_name</span></div><div class="line">  br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), <span class="string">"world"</span>, turtle_name));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line">&#123;</div><div class="line">  ros::init(argc, argv, <span class="string">"my_tf_broadcaster"</span>);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>)&#123;ROS_ERROR(<span class="string">"need turtle name as argument"</span>); <span class="keyword">return</span> <span class="number">-1</span>;&#125;;</div><div class="line"> </div><div class="line">  turtle_name = argv[<span class="number">1</span>];</div><div class="line"></div><div class="line">  ros::NodeHandle node;</div><div class="line"> <span class="comment">//订阅 turtle_name 的 turtleX/pose 话题，当turtle位置改变时调用回调函数 poseCallback</span></div><div class="line">  ros::Subscriber sub = node.subscribe(turtle_name+<span class="string">"/pose"</span>, <span class="number">10</span>, &amp;poseCallback);</div><div class="line"></div><div class="line">  ros::spin();</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<p>代码的整个流程为：<br>1 订阅 turtleX/pose 位置话题<br>2 发布坐标变换到tf树<br>修改CMakeLists.txt:</p>
   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(turtle_tf_broadcaster src/turtle_tf_broadcaster.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(turtle_tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure>
<p>编译：</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure>
<p>编译报错：</p>
   <figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Linking CXX executable /home/steven/catkin_ws/devel/<span class="keyword">lib</span>/learning_tf/turtle_tf_broadcaster</div><div class="line">CMakeFiles/turtle_tf_broadcaster.dir/src/turtle_tf_broadcaster.cpp.o: <span class="keyword">In</span> <span class="keyword">function</span> `poseCallback(boost::shared_ptr&lt;turtlesim::Pose_&lt;std::allocator&lt;void&gt; &gt; <span class="keyword">const</span>&gt; <span class="keyword">const</span>&amp;)<span class="comment">':</span></div><div class="line">turtle_tf_broadcaster.cpp:(.<span class="keyword">text</span>+<span class="number">0x39</span>): undefined reference <span class="keyword">to</span> `tf::TransformBroadcaster::TransformBroadcaster()<span class="comment">'</span></div><div class="line">turtle_tf_broadcaster.cpp:(.<span class="keyword">text</span>+<span class="number">0x1a3</span>): undefined reference <span class="keyword">to</span> `tf::TransformBroadcaster::sendTransform(tf::StampedTransform <span class="keyword">const</span>&amp;)<span class="comment">'</span></div><div class="line">collect2: ld returned <span class="number">1</span> <span class="keyword">exit</span> status</div><div class="line">make[<span class="number">2</span>]: *** [/home/steven/catkin_ws/devel/<span class="keyword">lib</span>/learning_tf/turtle_tf_broadcaster] <span class="keyword">Error</span> <span class="number">1</span></div><div class="line">make[<span class="number">1</span>]: *** [learning_tf/CMakeFiles/turtle_tf_broadcaster.dir/all] <span class="keyword">Error</span> <span class="number">2</span></div><div class="line">make: *** [all] <span class="keyword">Error</span> <span class="number">2</span></div><div class="line">Invoking <span class="string">"make -j1 -l1"</span> failed</div></pre></td></tr></table></figure>
<p>忘记了在 CMakeLists.txt 文件需要添加 tf 包的依赖：</p>
   <figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">find_package(<span class="name">catkin</span> REQUIRED COMPONENTS</div><div class="line">    roscpp</div><div class="line">    rospy</div><div class="line">    turtlesim</div><div class="line">    tf</div><div class="line">  )</div></pre></td></tr></table></figure>
<p>编译完成后在 ~/catkin_ws/devel/lib/learning_tf/ 目录下会看到编译好的可执行文件 turtle_tf_broadcaster<br>接下来创建一个 launch 文件：</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> mkdir -p ~/catkin_ws/src/learning_tf/launch</span></div><div class="line"><span class="meta">$</span><span class="bash"> roscd learning_tf/launch/</span></div><div class="line"><span class="meta">$</span><span class="bash"> touch start_demo.launch</span></div></pre></td></tr></table></figure>
<p>输入以下内容：</p>
   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Turtlesim Node--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"turtlesim"</span> <span class="attr">type</span>=<span class="string">"turtlesim_node"</span> <span class="attr">name</span>=<span class="string">"sim"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"turtlesim"</span> <span class="attr">type</span>=<span class="string">"turtle_teleop_key"</span> <span class="attr">name</span>=<span class="string">"teleop"</span> <span class="attr">output</span>=<span class="string">"screen"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Axes --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"scale_linear"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">type</span>=<span class="string">"double"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"scale_angular"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">type</span>=<span class="string">"double"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"learning_tf"</span> <span class="attr">type</span>=<span class="string">"turtle_tf_broadcaster"</span></span></div><div class="line">          <span class="attr">args</span>=<span class="string">"/turtle1"</span> <span class="attr">name</span>=<span class="string">"turtle1_tf_broadcaster"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"learning_tf"</span> <span class="attr">type</span>=<span class="string">"turtle_tf_broadcaster"</span></span></div><div class="line">          <span class="attr">args</span>=<span class="string">"/turtle2"</span> <span class="attr">name</span>=<span class="string">"turtle2_tf_broadcaster"</span> /&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">launch</span>&gt;</span></div></pre></td></tr></table></figure>
<p>launch文件启动了4个节点，分别是：<br> 1 turtlesim 包中的类型为 turtlesim_node 名称为 sim 的节点；<br> 2 turtlesim 包中的类型为 turtle_teleop_key 名称为 teleop 的节点；<br> 3 learning_tf 包中类型为 turtle_tf_broadcaster 名称为 turtle1_tf_broadcaster 的节点；<br> 4 learning_tf 包中类型为 turtle_tf_broadcaster 名称为 turtle2_tf_broadcaster 的节点。</p>
<h1 id="tf-listener"><a href="#tf-listener" class="headerlink" title="tf listener"></a>tf listener</h1><p>前面编写了broadcaster 用于发布 turtle 的坐标变换到 tf树，下面来编写 listener 来监听坐标的变换。在 learning_tf/src 目录下新建文件 turtle_tf_listener.cpp 添加如下代码:</p>
   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_listener.h&gt; //接收转换</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;geometry_msgs/Twist.h&gt; //消息</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;turtlesim/Spawn.h&gt; //再生</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line"></div><div class="line">    ros::init(argc, argv, <span class="string">"my_tf_listener"</span>);<span class="comment">//节点名称</span></div><div class="line"> </div><div class="line">    ros::NodeHandle node;<span class="comment">//节点</span></div><div class="line"></div><div class="line">    <span class="comment">//再生服务</span></div><div class="line">    ros::service::waitForService(<span class="string">"spawn"</span>);</div><div class="line">    ros::ServiceClient add_turtle =</div><div class="line">     node.serviceClient&lt;turtlesim::Spawn&gt;(<span class="string">"spawn"</span>);</div><div class="line">    turtlesim::Spawn srv;</div><div class="line">    add_turtle.call(srv);</div><div class="line"></div><div class="line">    <span class="comment">//通过话题 turtle2/cmd_vel 发布 geometry_msgs::Twist 类型消息</span></div><div class="line">    ros::Publisher turtle_vel = </div><div class="line">    node.advertise&lt;geometry_msgs::Twist&gt;(<span class="string">"turtle2/cmd_vel"</span>, <span class="number">10</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//创建接收对象，一旦TransformListener创建，就开始接收tf转换消息</span></div><div class="line">    tf::TransformListener listener; </div><div class="line"></div><div class="line">    ros::<span class="function">Rate <span class="title">rate</span><span class="params">(<span class="number">10.0</span>)</span></span>;</div><div class="line">    <span class="keyword">while</span> (node.ok())&#123;</div><div class="line">      tf::StampedTransform transform;</div><div class="line">      <span class="comment">//from turtle2 到 trutle1 即当 turtle2移动时,turtle1跟随 turtle2 运动</span></div><div class="line">      <span class="keyword">try</span>&#123;</div><div class="line">        listener.lookupTransform(<span class="string">"/turtle2"</span>, <span class="string">"/turtle1"</span>,</div><div class="line">                                 ros::Time(<span class="number">0</span>), transform);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (tf::TransformException &amp;ex) &#123;</div><div class="line">        ROS_ERROR(<span class="string">"%s"</span>,ex.what());</div><div class="line">        ros::Duration(<span class="number">1.0</span>).sleep();</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 计算新的角速度和线速度</span></div><div class="line">      geometry_msgs::Twist vel_msg;</div><div class="line">      vel_msg.angular.z = <span class="number">4.0</span> * <span class="built_in">atan2</span>(transform.getOrigin().y(),</div><div class="line">                                      transform.getOrigin().x());</div><div class="line">      vel_msg.linear.x = <span class="number">0.5</span> * <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(transform.getOrigin().x(), <span class="number">2</span>) +</div><div class="line">                                    <span class="built_in">pow</span>(transform.getOrigin().y(), <span class="number">2</span>));</div><div class="line">      turtle_vel.publish(vel_msg);</div><div class="line"> </div><div class="line">      rate.sleep();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
<p>在CMakeLists.txt中添加依赖项：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(turtle_tf_listener src/turtle_tf_listener.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(turtle_tf_listener $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p>编译如果提示错误：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">turtle_tf_listener<span class="selector-class">.cpp</span>:<span class="number">3</span>:<span class="number">32</span>: fatal error: </div><div class="line">turtlesim/Velocity<span class="selector-class">.h</span>: No such file or directory compilation terminated.</div></pre></td></tr></table></figure></p>
<p>则文件使用的为之前版本，应该选择下载 hydro 版本的 参考 <a href="http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20listener%20%28C%2B%2B%29" target="_blank" rel="external">Writing listener C++</a><br>之后修改start_demo.launch 将listener节点添加进去：<br>   <figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;node pkg=<span class="string">"learning_tf"</span> <span class="class"><span class="keyword">type</span></span>=<span class="string">"turtle_tf_listener"</span> name=<span class="string">"listener"</span> /&gt;</div></pre></td></tr></table></figure></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>停止之前的launch 文件，然后启动 start_demo.launch：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roslaunch learning_tf start_demo.launch</span></div></pre></td></tr></table></figure></p>
<p>可以通过以下命令查看坐标广播信息：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosrun tf tf_<span class="keyword">echo</span> <span class="string">/world</span> <span class="string">/turtle1</span></div></pre></td></tr></table></figure></p>
<p>错误</p>
<p>运行 start_demo.launch 时提示错误<em> [ERROR] [1496887441.589043649]: “turtle2” passed to lookupTransform argument target_frame does not exist. </em>  但是当控制一个 turtle 移动时另外一个也可以跟随移动，参照 <a href="http://answers.ros.org/question/148121/something-wrong-with-tf-tutorial/" target="_blank" rel="external">http://answers.ros.org/question/148121/something-wrong-with-tf-tutorial/</a> 的修改，在函数 listener.lookupTransform 的前面添加 listener.waitForTransform(“/turtle2”, “/turtle1”, ros::Time(0), ros::Duration(3.0));然后重新编译，再次运行错误消失。运行 rviz 可以看到两个 turtle 之间的运动坐标变换<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rviz rviz <span class="_">-d</span> `rospack find turtle_tf`/rviz/turtle_rviz.rviz</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/06/07/ros-primary-tutorial-13/startdemo.jpg" alt=""></p>
<h1 id="adding-a-frame"><a href="#adding-a-frame" class="headerlink" title="adding a frame"></a>adding a frame</h1><p>通常情况下，系统中有一个全局坐标系 world ，当添加一个激光扫描仪，或者再添加一个双目摄像头，那么此时就需要在系统中添加两个坐标参考系，利用 tf 让系统帮我们将激光扫描仪的数据或双目摄像头的数据转换到全局坐标系中去，因此添加一个坐标系是非常必要的。<br>tf 以树形结构维护和保存多个参考系坐标，在这个结构中不能有闭环产生，这就意味着，坐标参考系树形结构中只能有一个父参考系 parent,它可以有多个子参考坐标系 child。下面图中 tf 树形结构中有三个参考坐标系，world，turtle1 和 turtle2。 并且 turtle1 和 trutle2 都是 world 的子参考坐标系，如果再添加一个新的坐标参考系 carrot1 它必须是以上三个参考坐标系的子参考系。</p>
<p><img src="/2017/06/07/ros-primary-tutorial-13/tree.png" alt=""></p>
<p>接着前面，我们在 turtle1 基础上添加一个参考坐标系 carrot1, 它的父参考系是 turtle1。在 learning_tf/src 目录下建立文件 frame_tf_broadcaster.cpp，添加以下代码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_broadcaster.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line">&#123;</div><div class="line">	ros::init(argc, argv, <span class="string">"my_tf_broadcaster"</span>);</div><div class="line">	ros::NodeHandle node;</div><div class="line"></div><div class="line">	tf::TransformBroadcaster br;</div><div class="line">	tf::Transform transform;</div><div class="line">  </div><div class="line">	ros::<span class="function">Rate <span class="title">rate</span><span class="params">(<span class="number">10.0</span>)</span></span>;</div><div class="line">	<span class="keyword">while</span> (node.ok())&#123;</div><div class="line">		transform.setOrigin( tf::Vector3(<span class="number">0.0</span>, <span class="number">2.0</span>, <span class="number">0.0</span>) );</div><div class="line">		transform.setRotation( tf::Quaternion(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>) );</div><div class="line">		br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), <span class="string">"turtle1"</span>, <span class="string">"carrot1"</span>));</div><div class="line">		rate.sleep();</div><div class="line">     &#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>父参考系 turtle1 ，子参考系 carrot1 ，carrot1 在 x y z 方向上与 turtle1 的偏移为 (x:0.0,y:2.0,z:0.0)。修改 CMakeLists.txt 文件添加依赖：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(frame_tf_broadcaster src/frame_tf_broadcaster.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(frame_tf_broadcaster $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure></p>
<p>在 ~/catkin_ws/devel/lib/learning_tf/ 文件夹下会生成可执行的节点文件 frame_tf_broadcaster ，我们将它的启动放到 start_demo.launch 文件中，添加以下内容：<br>   <figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;node pkg=<span class="string">"learning_tf"</span> <span class="class"><span class="keyword">type</span></span>=<span class="string">"frame_tf_broadcaster"</span> </div><div class="line"> name=<span class="string">"broadcaster_frame"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>运行测试看下效果，roslaunch 会一并执行 roscore 所以不用再提前运行 roscore:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roslaunch learning_tf start_demo.launch</span></div></pre></td></tr></table></figure></p>
<p>我们发现添加了这个坐标系，并没有对之前的 turtle 产生影响，这就恰恰说明了添加一个新的参考坐标系不会影响以前固有的参考坐标系。我们的监听节点依然使用的是之前定义的参考坐标系。现在，我们打开前面编写的监听节点源码 learning_tf/src/turtle_tf_listener.cpp, 我们将 /turtle1 替换成 /carrot1 ：<br>   <figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">listener</span><span class="selector-class">.waitForTransform</span>(<span class="string">"/turtle2"</span>, <span class="string">"/carrot1"</span>,<span class="attribute">ros</span>::Time(<span class="number">0</span>), <span class="attribute">ros</span>::Duration(<span class="number">3.0</span>));</div><div class="line"><span class="selector-tag">listener</span><span class="selector-class">.lookupTransform</span>(<span class="string">"/turtle2"</span>, <span class="string">"/carrot1"</span>,<span class="attribute">ros</span>::Time(<span class="number">0</span>), transform);</div></pre></td></tr></table></figure></p>
<p>再次编译并执行 start_demo.launch，我们发现，当移动 turtle1 时， turtle2 在跟随 turtle1 的同时总是保持一定的距离，这个距离就是 carrot1 参考系相对于 turtle1 的偏移，因此 turtle2 跟随的是 carrot1 虽然我们没有定义这个模型，但依然能感觉到这个随动关系:</p>
<p><img src="/2017/06/07/ros-primary-tutorial-13/carrot1.jpg" alt=""></p>
<h1 id="moving-frame"><a href="#moving-frame" class="headerlink" title="moving frame"></a>moving frame</h1><p>建立移动参考系，让两个参考系的关系不再是固定的而是随着时间变化的，因此可以简单的将固定参考系的关系修改成随着时间而变化的，修改 frame_tf_broadcaster.cpp 文件：<br>   <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span><span class="selector-class">.setOrigin</span>( <span class="selector-tag">tf</span><span class="selector-pseudo">::Vector3(2.0</span>*<span class="selector-tag">sin</span>(<span class="selector-tag">ros</span><span class="selector-pseudo">::Time</span><span class="selector-pseudo">::now().toSec())</span>, 2<span class="selector-class">.0</span>*<span class="selector-tag">cos</span>(<span class="selector-tag">ros</span><span class="selector-pseudo">::Time</span><span class="selector-pseudo">::now().toSec())</span>, 0<span class="selector-class">.0</span>) );</div><div class="line"><span class="selector-tag">transform</span><span class="selector-class">.setRotation</span>( <span class="selector-tag">tf</span><span class="selector-pseudo">::Quaternion(0</span>, 0, 0, 1) )</div></pre></td></tr></table></figure></p>
<p>以上变换将 carrot1 相对于父参考系 turtle1 的坐标变换修改成时间的正余弦函数，我们再次编译并重新运行一下看效果：<br><img src="/2017/06/07/ros-primary-tutorial-13/moving.jpg" alt=""><br>turtle2 一直绕着 turtle1 做画圆运动，因为上面的函数是三角函数 且符合 x2 + y2 = r2 关系。<br>参考:<a href="http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20broadcaster%20%28C%2B%2B%29" target="_blank" rel="external">Writing a tf broadcaster C++</a>   /  <a href="http://wiki.ros.org/tf/Tutorials/Writing%20a%20tf%20listener%20%28C%2B%2B%29" target="_blank" rel="external">Writing a tf listener C++</a> / <a href="http://wiki.ros.org/tf/Tutorials/Adding%20a%20frame%20%28C%2B%2B%29" target="_blank" rel="external">Adding a frame</a></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROStf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS初级十二 理解ROS坐标转换上]]></title>
      <url>/2017/06/07/ros-primary-tutorial-12/</url>
      <content type="html"><![CDATA[<p>一个完整的机器人有腿(或轮子)、有眼睛、有手、有大脑，大脑控制机器人去协调的动作。问题来了，大脑是如何知道腿在哪儿？眼睛在哪儿？手臂在哪儿？要帮主人把房门打开，如何控制手臂去开门？这些都涉及到一个关键的问题-机器人的坐标变换。本篇学习 ROS 中的 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a> 。<br><a id="more"></a></p>
<h1 id="tf-初理解"><a href="#tf-初理解" class="headerlink" title="tf 初理解"></a>tf 初理解</h1><p><img src="/2017/06/07/ros-primary-tutorial-12/tf.png" alt=""><br>tf 是 ROS 中的坐标变换系统，它可以跟踪多个参考坐标系的坐标，使用树形数据结构根据时间缓冲来维护这些坐标及其坐标关系，帮助我们在任意时间完成两个或多个参考系中的坐标变换。 tf 以分布式形式存在，所有节点都可以使用这些变换数据，节点可以监听 tf 变换，接收系统中发布的所有参考坐标系，并查询需要的参考坐标系；节点可以广播 tf 变换，向系统中广播参考系坐标关系，每个节点的参考坐标广播可以直接插入 tf 树中告知系统。</p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>通过一个实例来更好的理解  <a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf</a>，参考 <a href="http://wiki.ros.org/tf" target="_blank" rel="external">官网</a>。<br>启动一个demo:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roslaunch turtle_tf turtle_tf_demo.launch</span></div></pre></td></tr></table></figure></p>
<p>此时会看到有两个 turtle 同时出现，将光标移动到 terminal 以便于用键盘的方向键来控制其中一个 turtle 的移动，可以看到当一个移动时另外一个一直做跟随运动：<br><img src="/2017/06/07/ros-primary-tutorial-12/follow.jpg" alt=""></p>
<p>该例子使用 tf 库创建的三个坐标系，一个是全局坐标系，一个是 turtle1 坐标系，另一个是 turtle2 坐标系。它使用 tf 广播发布 turtle 的坐标，另外一个去监听这个坐标，并计算它们之间的位置差，从而移动一个去跟随另一个的位置。</p>
<h1 id="tf-工具使用"><a href="#tf-工具使用" class="headerlink" title="tf 工具使用"></a>tf 工具使用</h1><p><a href="http://wiki.ros.org/tf#view_frames" target="_blank" rel="external">view_frames</a>：</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun tf view_frames</span></div></pre></td></tr></table></figure>
<p><a href="http://wiki.ros.org/tf#view_frames" target="_blank" rel="external">view_frames</a> 可以以PDF的形式创建当前坐标广播系统树，命令输出如下：<br>   <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Listening <span class="built_in">to</span> /tf <span class="keyword">for</span> <span class="number">5.000000</span> <span class="built_in">seconds</span></div><div class="line">Done Listening</div><div class="line">dot - graphviz <span class="built_in">version</span> <span class="number">2.36</span><span class="number">.0</span> (<span class="number">20140111.2315</span>)</div><div class="line"></div><div class="line">Detected dot <span class="built_in">version</span> <span class="number">2.36</span></div><div class="line">frames.pdf generated</div></pre></td></tr></table></figure></p>
<p>它会在当前目录下生成 frames.pdf 文件，可以使用如下命令查看：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> evince frames.pdf</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/06/07/ros-primary-tutorial-12/pdf.jpg" alt=""><br>从图中可以看出，系统存在三个参考坐标系，world 为父坐标系即全局坐标系，另外两个也都有自己的坐标系，信息中还包括发送频率、缓存长度等信息。</p>
<p><a href="http://wiki.ros.org/rqt_tf_tree" target="_blank" rel="external">rqt_tf_tree</a>:</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rqt_tf_tree rqt_tf_tree</span></div></pre></td></tr></table></figure>
<p><a href="http://wiki.ros.org/rqt_tf_tree" target="_blank" rel="external">rqt_tf_tree</a> 是一个可视化的实时坐标树查看工具，可以随时点击刷新按钮来实时的查看坐标广播树。<img src="/2017/06/07/ros-primary-tutorial-12/runtime.jpg" alt=""></p>
<p><a href="http://wiki.ros.org/tf" target="_blank" rel="external">tf_echo</a>:<br>使用：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosrun tf tf_echo <span class="string">[reference_frame]</span> <span class="string">[target_frame]</span></div></pre></td></tr></table></figure></p>
<p>如何从 turtle1 得到 turtle2 的坐标:<br><img src="/2017/06/07/ros-primary-tutorial-12/matrix.png" alt=""></p>
<p>该命令输出指定的坐标变换关系，如：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun tf tf_echo turtle1 turtle2</span></div></pre></td></tr></table></figure></p>
<p>输出一般为：<br>   <figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">At</span> <span class="selector-tag">time</span> <span class="selector-tag">1496812263</span><span class="selector-class">.516</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Translation</span>: <span class="selector-attr">[0.000, 0.000, 0.000]</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Rotation</span>: <span class="selector-tag">in</span> <span class="selector-tag">Quaternion</span> <span class="selector-attr">[0.000, 0.000, 0.707, 0.707]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (radian) <span class="selector-attr">[0.000, -0.000, 1.571]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (degree) <span class="selector-attr">[0.000, -0.000, 90.000]</span></div><div class="line"><span class="selector-tag">At</span> <span class="selector-tag">time</span> <span class="selector-tag">1496812264</span><span class="selector-class">.205</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Translation</span>: <span class="selector-attr">[0.000, 0.000, 0.000]</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Rotation</span>: <span class="selector-tag">in</span> <span class="selector-tag">Quaternion</span> <span class="selector-attr">[0.000, 0.000, 0.707, 0.707]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (radian) <span class="selector-attr">[0.000, -0.000, 1.571]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (degree) <span class="selector-attr">[0.000, -0.000, 90.000]</span></div><div class="line"><span class="selector-tag">At</span> <span class="selector-tag">time</span> <span class="selector-tag">1496812265</span><span class="selector-class">.213</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Translation</span>: <span class="selector-attr">[0.000, 0.000, 0.000]</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Rotation</span>: <span class="selector-tag">in</span> <span class="selector-tag">Quaternion</span> <span class="selector-attr">[0.000, 0.000, 0.707, 0.707]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (radian) <span class="selector-attr">[0.000, -0.000, 1.571]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (degree) <span class="selector-attr">[0.000, -0.000, 90.000]</span></div><div class="line"><span class="selector-tag">At</span> <span class="selector-tag">time</span> <span class="selector-tag">1496812266</span><span class="selector-class">.205</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Translation</span>: <span class="selector-attr">[0.000, 0.000, 0.000]</span></div><div class="line"><span class="selector-tag">-</span> <span class="selector-tag">Rotation</span>: <span class="selector-tag">in</span> <span class="selector-tag">Quaternion</span> <span class="selector-attr">[0.000, 0.000, 0.707, 0.707]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (radian) <span class="selector-attr">[0.000, -0.000, 1.571]</span></div><div class="line">            <span class="selector-tag">in</span> <span class="selector-tag">RPY</span> (degree) <span class="selector-attr">[0.000, -0.000, 90.000]</span></div></pre></td></tr></table></figure></p>
<p>它是一直输出的，当控制移动 turtle1 时可以看到 turtle2 的坐标是怎么变化的，也就是 turtle2 的坐标是怎么根据 turtle1 的出来的。</p>
<h1 id="rviz"><a href="#rviz" class="headerlink" title="rviz"></a>rviz</h1><p>使用 <a href="">rviz</a> 可视化工具查看坐标系之间的坐标关系<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rviz rviz <span class="_">-d</span> `rospack find turtle_tf`/rviz/turtle_rviz.rviz</span></div></pre></td></tr></table></figure></p>
<p>当通过键盘控制 turtle 运动时，可以在 rviz 中观察到两个 turtle 的位置关系及坐标的变换：<br><img src="/2017/06/07/ros-primary-tutorial-12/rviz.jpg" alt=""><br>远处两个小的坐标系分别为 turtle1 和 turtle2 的坐标系，左下角为系统全局坐标系。本篇先到这里，下一篇进一步学习 tf 坐标变换。<br>参考 <a href="http://wiki.ros.org/tf/Tutorials/Introduction%20to%20tf" target="_blank" rel="external">Introduction tf</a>。</p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROStf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS初级十一 简单的ROS服务器和客户端]]></title>
      <url>/2017/06/01/ros-primary-tutorial-11/</url>
      <content type="html"><![CDATA[<p>本篇学习简单的 ROS 服务器和客户端的编写，服务器和客户端也是 ROS 网络中的一个节点，服务器可以提供某些服务，客户端发出请求，服务器做出响应。本篇涉及的代码已上传到 <a href="https://github.com/StevenShiChina/beginner_tutorials" target="_blank" rel="external">mygithub</a>。<br><a id="more"></a></p>
<h1 id="服务器节点"><a href="#服务器节点" class="headerlink" title="服务器节点"></a>服务器节点</h1><p>我们将创建一个 service 节点 (add_two_ints_server)，该节点接收两个整形数字，并返回它们的和。客户端可以给服务器发送请求。<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd beginner_tutorials/src</span></div></pre></td></tr></table></figure></p>
<p>新建 add_two_ints_server.cpp 在  beginner_tutorials/src 目录下，添加源码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">/*beginner_tutorials/AddTwoInts.h由编译系统自动根据我们先前创建的srv文件</span></div><div class="line"> 生成的对应该srv文件的头文件*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"beginner_tutorials/AddTwoInts.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">/*add函数提供两个int值求和的服务，int值从request里面获取，</span></div><div class="line"> 而返回数据装入response内，这些数据类型都定义在srv文件内部，</div><div class="line"> 函数返回一个boolean值*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(beginner_tutorials::AddTwoInts::Request  &amp;req,</span></span></div><div class="line">        beginner_tutorials::AddTwoInts::Response &amp;res)</div><div class="line">&#123;</div><div class="line"> res.sum = req.a + req.b;</div><div class="line"> ROS_INFO(<span class="string">"request: x=%ld, y=%ld"</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)req.a, (<span class="keyword">long</span> <span class="keyword">int</span>)req.b);</div><div class="line"> ROS_INFO(<span class="string">"sending back response: [%ld]"</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)res.sum);</div><div class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line"> ros::init(argc, argv, <span class="string">"add_two_ints_server"</span>);</div><div class="line"> ros::NodeHandle n;</div><div class="line"></div><div class="line"><span class="comment">/*service 服务建立*/</span></div><div class="line"> ros::ServiceServer service = n.advertiseService(<span class="string">"add_two_ints"</span>, add);</div><div class="line"> ROS_INFO(<span class="string">"Ready to add two ints."</span>);</div><div class="line"> ros::spin();</div><div class="line"></div><div class="line"> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="客户端节点"><a href="#客户端节点" class="headerlink" title="客户端节点"></a>客户端节点</h1><p>在目录 beginner_tutorials/src 下，新建 add_two_ints_client.cpp 文件添加如下源码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"beginner_tutorials/AddTwoInts.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">  ros::init(argc, argv, <span class="string">"add_two_ints_client"</span>);</div><div class="line">  <span class="keyword">if</span> (argc != <span class="number">3</span>)</div><div class="line">  &#123;</div><div class="line">    ROS_INFO(<span class="string">"usage: add_two_ints_client X Y"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ros::NodeHandle n;</div><div class="line">  </div><div class="line">  <span class="comment">/*为add_two_ints service创建一个client。ros::ServiceClient 对象待会用来调用service*/</span></div><div class="line"></div><div class="line">  ros::ServiceClient client = n.serviceClient&lt;beginner_tutorials::AddTwoInts&gt;(<span class="string">"add_two_ints"</span>);</div><div class="line"></div><div class="line"> <span class="comment">/*实例化一个由ROS编译系统自动生成的service类，并给其request成员赋值。</span></div><div class="line">  一个service类包含两个成员request和response。同时也包括两个类定义Request和Response*/</div><div class="line"></div><div class="line">  beginner_tutorials::AddTwoInts srv;</div><div class="line">  srv.request.a = atoll(argv[<span class="number">1</span>]);</div><div class="line">  srv.request.b = atoll(argv[<span class="number">2</span>]);</div><div class="line"></div><div class="line">  <span class="comment">/*调用service。由于service的调用是模态过程（调用的时候占用进程阻止其他代码的执行），</span></div><div class="line">  一旦调用完成，将返回调用结果。如果service调用成功，call()函数将返回true，</div><div class="line">  srv.response里面的值将是合法的值。如果调用失败，call()函数将返回false，</div><div class="line">  srv.response里面的值将是非法的*/</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (client.call(srv))</div><div class="line">  &#123;</div><div class="line">    ROS_INFO(<span class="string">"Sum: %ld"</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)srv.response.sum);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    ROS_ERROR(<span class="string">"Failed to call service add_two_ints"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="编译测试"><a href="#编译测试" class="headerlink" title="编译测试"></a>编译测试</h1><p>编译之前先修改下 CMakeLists.txt ,文件位于:<br> ~/catkin_ws/src/beginner_tutorials/CMakeLists.txt，参考 <a href="https://raw.github.com/ros/catkin_tutorials/master/create_package_srvclient/catkin_ws/src/beginner_tutorials/CMakeLists.txt" target="_blank" rel="external">CMakeLists.txt</a>:<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(add_two_ints_server src/add_two_ints_server.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(add_two_ints_server $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line"><span class="function"><span class="title">add_dependencies</span><span class="params">(add_two_ints_server beginner_tutorials_gencpp)</span></span></div><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(add_two_ints_client src/add_two_ints_client.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(add_two_ints_client $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line"><span class="function"><span class="title">add_dependencies</span><span class="params">(add_two_ints_client beginner_tutorials_gencpp)</span></span></div></pre></td></tr></table></figure></p>
<p>生成两个可执行程序 add_two_ints_server 和 add_two_ints_client ，这两个可执行程序默认被放在的 devel space 下的包目录下。可以直接调用可执行程序，或者使用 rosrun 命令去调用它们。它们不会被装在usr/bin目录下，如果希望在安装的时候可执行程序在PATH变量里面，需要设置一下install target，请参考：<a href="http://wiki.ros.org/catkin/CMakeLists.txt" target="_blank" rel="external">catkin/CMakeLists.txt</a><br>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure></p>
<p>编译完成后会在目录 ~/catkin_ws/devel/lib/beginner_tutorials 下生成两个可执行文件 add_two_ints_client  和 add_two_ints_server 现在可以运行并测试它们：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun beginner_tutorials add_two_ints_server</span></div></pre></td></tr></table></figure></p>
<p>如果运行时找不到程序包，运行一下 <em>rospack profile</em> 另外开启一个terminal 运行客户端:<br>   <figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosrun <span class="keyword">beginner_tutorials </span><span class="keyword">add_two_ints_client </span> <span class="number">188</span> <span class="number">102</span></div></pre></td></tr></table></figure></p>
<p>输出结果看图：<img src="/2017/06/01/ros-primary-tutorial-11/service.jpg" alt=""><br>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/WritingServiceClient%28c%2B%2B%29" target="_blank" rel="external">WritingServiceClient</a>。</p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ServiceClient </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS初级十 简单的ROS发布器和订阅器]]></title>
      <url>/2017/05/31/ros-primary-tutorial-10/</url>
      <content type="html"><![CDATA[<p>本篇学习 ROS 中简单的发布器和订阅器节点的编写。节点就是 ROS 网络中的一个可执行文件，它既可以订阅消息也可以发布消息。本篇涉及的代码已上传至 <a href="https://github.com/StevenShiChina/beginner_tutorials" target="_blank" rel="external">mygithub</a>。<br><a id="more"></a></p>
<h1 id="发布器"><a href="#发布器" class="headerlink" title="发布器"></a>发布器</h1><p>我们将创建一个发布器节点 talker，它将不断的在 ROS 网络中广播消息。在 beginner_tutorials 目录下新建一个 src 目录<br>   <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>mkdir -p ~<span class="regexp">/catkin_ws/src</span><span class="regexp">/beginner_tutorials/src</span></div><div class="line"><span class="variable">$ </span>roscd beginner_tutorials/src/</div></pre></td></tr></table></figure></p>
<p>src 文件夹用于放置 beginner_tutorials 包的所有源代码，新建 talker.cpp 在 beginner_tutorials/src/ 目录下添加如下代码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span> <span class="comment">/*引用ROS系统头文件*/</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"std_msgs/String.h"</span> <span class="comment">/*消息类型定义*/</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="comment">/*初始化ROS talker节点名*</span></div><div class="line">  ros::init(argc, argv, "talker");</div><div class="line"></div><div class="line">  /*为该进程创建一个节点句柄 第一个创建的 NodeHandle 会为节点进行初始化，</div><div class="line">  最后一个销毁的 NodeHandle 则会释放该节点所占用的所有资源*/</div><div class="line">  </div><div class="line">  ros::NodeHandle n;</div><div class="line"></div><div class="line">  <span class="comment">/*告诉 master 我们将要在 command（话题名） 上发布 std_msgs/String 类型的消息。</span></div><div class="line">  这样 master 就会告诉所有订阅了 command 话题的节点，将要有数据发布。第二个参数是发布序列的大小。</div><div class="line">  如果我们发布的消息的频率太高，缓冲区中的消息在大于 1000 个的时候就会开始丢弃先前发布的消息。 </div><div class="line">  NodeHandle::advertise() 返回一个 ros::Publisher 对象,它有两个作用：</div><div class="line">  1) 它有一个 publish() 成员函数可以让你在topic上发布消息； </div><div class="line">  2) 如果消息类型不对,它会拒绝发布*/</div><div class="line">  </div><div class="line">  ros::Publisher chatter_pub = n.advertise&lt;std_msgs::String&gt;(<span class="string">"command"</span>, <span class="number">1000</span>);</div><div class="line">  </div><div class="line">  <span class="comment">/*ros::Rate 对象可以允许指定自循环的频率。它会追踪记录自上一次调用 Rate::sleep() </span></div><div class="line">  后时间的流逝，并休眠直到一个频率周期的时间,本例指定循环频率为10HZ */</div><div class="line"> </div><div class="line">  ros::<span class="function">Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line"> <span class="comment">/*roscpp 会默认生成一个 SIGINT 句柄，它负责处理 Ctrl-C 键盘操作——使得 ros::ok() 返回 false。 </span></div><div class="line">   如果下列条件之一发生，ros::ok() 返回false： </div><div class="line">   1  SIGINT 被触发 (Ctrl-C) </div><div class="line">   2  被另一同名节点踢出 ROS 网络 </div><div class="line">   3  ros::shutdown() 被程序的另一部分调用 </div><div class="line">   4 节点中的所有 ros::NodeHandles 都已经被销毁 </div><div class="line">   一旦 ros::ok() 返回 false, 所有的 ROS 调用都会失效*/</div><div class="line">  </div><div class="line">  <span class="keyword">while</span> (ros::ok())</div><div class="line">  &#123;</div><div class="line">    <span class="comment">/*我们使用一个由 msg file 文件产生的『消息自适应』类在 </span></div><div class="line">    ROS 网络中广播消息。现在我们使用标准的String消息，它只有一个数据成员 "data"。</div><div class="line">    当然，你也可以发布更复杂的消息类型。 */</div><div class="line">    </div><div class="line">    std_msgs::String msg;</div><div class="line">    </div><div class="line">    <span class="built_in">std</span>::<span class="built_in">stringstream</span> ss;</div><div class="line">    </div><div class="line">    ss &lt;&lt; <span class="string">"talker publish command "</span> &lt;&lt; count;</div><div class="line">    </div><div class="line">    msg.data = ss.str();</div><div class="line">    </div><div class="line">    <span class="comment">/*ROS_INFO 和其他类似的函数可以用来代替 printf/cout 等函数。</span></div><div class="line">    具体可以参考 http://wiki.ros.org/rosconsole，以获得更多信息*/</div><div class="line">    </div><div class="line">    ROS_INFO(<span class="string">"%s"</span>, msg.data.c_str()); </div><div class="line">    </div><div class="line">   <span class="comment">/*广播消息*/</span></div><div class="line">    </div><div class="line">    chatter_pub.publish(msg);</div><div class="line">    </div><div class="line">    <span class="comment">/*在这个例子中并不是一定要调用 ros::spinOnce()，因为我们不接受回调。</span></div><div class="line">     如果你的程序里包含其他回调函数，最好在这里加上 ros::spinOnce()这一语句，</div><div class="line">    否则你的回调函数就永远也不会被调用了*/</div><div class="line">   </div><div class="line">    ros::spinOnce();</div><div class="line">    </div><div class="line">    <span class="comment">/*休眠一段时间，使得发布频率为10HZ*/</span></div><div class="line">    loop_rate.sleep();</div><div class="line">   </div><div class="line">    ++count;</div><div class="line">   &#125;</div><div class="line"> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的内容可以总结为：<br> 1 初始化 ROS 系统<br> 2 在 ROS 网络内广播我们将要在 command 话题上发布 std_msgs/String 类型的消息<br> 3 以每秒 10 次的频率在 chatter 上发布消息<br>接下来编写一个订阅器用于接收该节点发布的消息。</p>
<h1 id="订阅器"><a href="#订阅器" class="headerlink" title="订阅器"></a>订阅器</h1><p>新建 listener.cpp 放置于 beginner_tutorials 的 src 目录下：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd beginner_tutorials/src/</span></div><div class="line"><span class="meta">$</span><span class="bash"> vim listener.cpp</span></div></pre></td></tr></table></figure></p>
<p>添加如下代码：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"std_msgs/String.h"</span></span></div><div class="line"><span class="comment">/*定义回调函数*/</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">chatterCallback</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="comment">/*打印收到的信息，消息是以 boost shared_ptr 指针的形式传输，这就意味着你可以存储它而又不需要复制数据。 */</span></div><div class="line">  ROS_INFO(<span class="string">"listener got: [%s]"</span>, msg-&gt;data.c_str());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line"> <span class="comment">/*初始化节点，命名为listener*/</span></div><div class="line"> </div><div class="line"> ros::init(argc, argv, <span class="string">"listener"</span>);</div><div class="line"></div><div class="line"> <span class="comment">/*创建节点句柄*/</span></div><div class="line"></div><div class="line">  ros::NodeHandle n;</div><div class="line"> </div><div class="line"> <span class="comment">/*订阅主题,并注册回调函数，当有消息发布到这个话题时，ROS 就会调用 chatterCallback() 函数。</span></div><div class="line">  第二个参数是队列大小，以防我们处理消息的速度不够快，当缓存达到 1000 条消息后，再有新的消息到来就将开始丢弃先前接收的消息。 */</div><div class="line"> </div><div class="line"> ros::Subscriber sub = n.subscribe(<span class="string">"command"</span>, <span class="number">1000</span>, chatterCallback);</div><div class="line"> </div><div class="line"> <span class="comment">/*进入自循环，可以尽可能快的调用消息回调函数。如果没有消息到达，它不会占用很多 CPU，所以不用担心。一旦 ros::ok() 返回 false，</span></div><div class="line">  ros::spin() 就会立刻跳出自循环。这有可能是 ros::shutdown() 被调用，或者是用户按下了 Ctrl-C，</div><div class="line">  使得 master 告诉节点要终止运行。也有可能是节点被人为关闭的。 </div><div class="line">  还有其他的方法进行回调，但在这里我们不涉及。想要了解，可以参考 http://wiki.ros.org/roscpp_tutorials package</div><div class="line">  里的一些 demo 应用。需要更为详尽的信息，可以参考 http://wiki.ros.org/roscpp/Overview。 */</div><div class="line">  </div><div class="line">  ros::spin();</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码可以总结为：<br> 1 初始化ROS系统<br> 2 订阅 chatter 话题<br> 3 进入自循环，等待消息的到达<br> 4 当消息到达，调用 chatterCallback() 函数 </p>
<h1 id="编译测试"><a href="#编译测试" class="headerlink" title="编译测试"></a>编译测试</h1><p>编译测试之前需要修改 beginner_tutorials 中的 CMakeLists.txt 文件，添加以下内容：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">include_directories</span><span class="params">(include $&#123;catkin_INCLUDE_DIRS&#125;)</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(talker src/talker.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(talker $&#123;catkin_LIBRARIES&#125;)</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(listener src/listener.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(listener $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p>这会生成两个可执行文件, talker 和 listener, 默认存储到 <a href="http://wiki.ros.org/catkin/workspaces#Development_.28Devel.29_Space" target="_blank" rel="external">devel space</a> 目录下,具体是在 ~/catkin_ws/devel/lib/beginner_tutorials 中。<br>为可执行文件添加对生成的消息文件的依赖：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_dependencies</span><span class="params">(talker beginner_tutorials_generate_messages_cpp)</span></span></div><div class="line"><span class="function"><span class="title">add_dependencies</span><span class="params">(listener beginner_tutorials_generate_messages_cpp)</span></span></div></pre></td></tr></table></figure></p>
<p>这样就可以确保自定义消息的头文件在被使用之前已经被生成。因为 catkin 把所有的 package 并行的编译，所以如果你要使用其他 catkin 工作空间中其他 package 的消息，同样也需要添加对他们各自生成的消息文件的依赖。<br>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ./devel/setup.bash</span></div></pre></td></tr></table></figure></p>
<p>测试时打开两个 terminal,一个运行 talker 节点，一个运行 listener 节点：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun beginner_tutorials talker // 启动 talker节点</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun beginner_tutorials listener // 启动 listener 节点</span></div></pre></td></tr></table></figure></p>
<p>效果：<br><img src="/2017/05/31/ros-primary-tutorial-10/test.jpg" alt=""><br>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29" target="_blank" rel="external">WritingPublisherSubscriber</a></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Publisher </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS初级九 创建ROS消息和ROS服务]]></title>
      <url>/2017/05/31/ros-primary-tutorial-9/</url>
      <content type="html"><![CDATA[<p>本篇学习如何创建并编译 ROS 消息和服务，以及 <a href="http://wiki.ros.org/rosmsg" target="_blank" rel="external">rosmsg</a> <a href="http://wiki.ros.org/srv" target="_blank" rel="external">rossrv</a> <a href="http://wiki.ros.org/rosbash#roscp" target="_blank" rel="external">roscp</a> <a href="http://wiki.ros.org/rosbash#rosed" target="_blank" rel="external">rosed</a> 等命令的使用。<br><a id="more"></a></p>
<h1 id="rosed"><a href="#rosed" class="headerlink" title="rosed"></a>rosed</h1><p><a href="http://wiki.ros.org/rosbash#rosed" target="_blank" rel="external">rosed</a> 是 <a href="http://wiki.ros.org/rosbash" target="_blank" rel="external">rosbash</a> 的一部分，相当于 ros + edit。利用 <a href="http://wiki.ros.org/rosbash#rosed" target="_blank" rel="external">rosed</a> 可以直接通过 package 名称来获取到待编辑的文件而无需指定该文件的存储路径，使用方法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosed <span class="string">[package_name]</span> <span class="string">[filename]</span></div></pre></td></tr></table></figure></p>
<p>示例直接打开 beginner_tutorials 中的 talker.cpp文件：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosed beginner_tutoris talker.cpp</span></div></pre></td></tr></table></figure></p>
<p><a href="http://wiki.ros.org/rosbash#rosed" target="_blank" rel="external">rosed</a> 默认的编辑器是 <a href="http://www.vim.org/" target="_blank" rel="external">vim</a> ，可以将以下命令添加到 ~/.bashrc 文件中来修改默认的编辑器：<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export EDITOR=<span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>vim</div></pre></td></tr></table></figure></p>
<p>或者修改为使用 <a href="https://www.gnu.org/software/emacs/" target="_blank" rel="external">emacs</a> 为默认编辑器：<br>   <figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> EDITOR=<span class="string">'emacs -nw'</span></div></pre></td></tr></table></figure></p>
<p>打开一个新的终端，看看定义的 EDITOR 是否正确:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$EDITOR</span></span></div></pre></td></tr></table></figure></p>
<h1 id="消息和服务介绍"><a href="#消息和服务介绍" class="headerlink" title="消息和服务介绍"></a>消息和服务介绍</h1><p>消息 msg 文件是一个描述 ROS 中所使用的消息类型的一个简单文本，它们会被用来生成不同语言的源代码。服务 srv 文件用于描述一项服务，它包含两部分，请求和响应。<br>msg 文件存放在 package 的 msg 目录下，srv 文件存放于package 的 srv 目录下。msg 文件每行声明一个数据类型和变量名，目前支持的数据类型有：<br>   <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">int8</span>, <span class="built_in">int16</span>, <span class="built_in">int32</span>, <span class="built_in">int64</span> (plus <span class="built_in">uint</span>*) </div><div class="line"><span class="built_in">float32</span>, <span class="built_in">float64</span> </div><div class="line"><span class="built_in">string</span> </div><div class="line">time, duration </div><div class="line">other msg files </div><div class="line">variable-length <span class="built_in">array</span>[] <span class="keyword">and</span> fixed-length <span class="built_in">array</span>[C]</div></pre></td></tr></table></figure></p>
<p>在 ROS 中有一个特殊的数据类型：Header，它含有时间戳和坐标系信息。在 msg 文件的第一行经常可以看到 Header header的声明。<br>msg 文件样例：<br>   <figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Header</span> <span class="built_in">header</span></div><div class="line"><span class="keyword">string</span> child_frame_id</div><div class="line">geometry_msgs/PoseWithCovariance pose</div><div class="line">geometry_msgs/TwistWithCovariance twist</div></pre></td></tr></table></figure></p>
<p>srv 文件分为请求和响应两部分，由’—‘分隔。样例：<br>   <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int64 A</div><div class="line"><span class="section">int64 B</span></div><div class="line">---</div><div class="line">int64 Sum</div></pre></td></tr></table></figure></p>
<p>A 和 B 是请求，sum 是响应。</p>
<h1 id="msg-的使用"><a href="#msg-的使用" class="headerlink" title="msg 的使用"></a>msg 的使用</h1><p>在之前创建的 beginner_tutorial 里定义新的消息：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd beginner_tutorials/</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir msg</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"int64 num"</span> &gt; msg/Num.msg</span></div></pre></td></tr></table></figure></p>
<p>上面是最简单的例子在.msg文件中只有一行数据。当然，也可以仿造上面的形式多增加几行以得到更为复杂的消息：<br>   <figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">string</span> first_name</div><div class="line"><span class="keyword">string</span> last_name</div><div class="line"><span class="keyword">uint8</span> age</div><div class="line"><span class="keyword">uint32</span> score</div></pre></td></tr></table></figure></p>
<p>接下来需要确保 msg 文件被转换成 C++,Python和其他语言的源代码，查看 package.xml：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosed beginner_tutorials  package.xml</span></div></pre></td></tr></table></figure></p>
<p>确保它包含以下两条语句：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>message_generation<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>message_runtime<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在构建的时候，我们只需要”message_generation”。然而，在运行的时候，我们只需要”message_runtime”。 打开 CMakeLists.txt 文件，利用 find_packag 函数，增加对 message_generation 的依赖，这样就可以生成消息了。 可以直接在 COMPONENTS 的列表里增加 message_generation ：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosed beginner_tutorials CMakeLists.txt</span></div></pre></td></tr></table></figure></p>
   <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// Do <span class="keyword">not</span> just <span class="built_in">add</span> this <span class="built_in">line</span> <span class="built_in">to</span> your CMakeLists.txt,  modify <span class="keyword">the</span> existing <span class="built_in">line</span></div><div class="line"> find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs message_generation)</div></pre></td></tr></table></figure>
<p>即使没有调用 find_package, 也可以编译通过。这是因为 catkin 把所有的 package 都整合在一起，因此，如果其他的 package 调用了 find_package，你的 package 的依赖就会是同样的配置。但是，在单独编译这个 package 时，忘记调用 find_package 会很容易出错。确保设置了运行依赖项：<br>   <figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">catkin_package(</div><div class="line">  ...</div><div class="line">  CATKIN_DEPENDS message_runtime ...</div><div class="line">  ...)</div></pre></td></tr></table></figure></p>
<p>找到如下代码块:<br>   <figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// add_message_files(</span></div><div class="line"><span class="comment">//  FILES</span></div><div class="line"><span class="comment">//  Message1.msg</span></div><div class="line"><span class="comment">//   Message2.msg</span></div><div class="line"><span class="comment">// )</span></div></pre></td></tr></table></figure></p>
<p>去掉注释符号，用前面定义的.msg文件替代Message*.msg<br>   <figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">add_message_files(</div><div class="line"> <span class="name">FILES</span></div><div class="line"> Num.msg</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>手动添加.msg文件后，我们要确保CMake知道在什么时候重新配置我们的project。 确保添加了如下代码：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">generate_messages</span><span class="params">()</span></span></div></pre></td></tr></table></figure></p>
<p>查看自定义的消息文件能否被 ROS 识别，使用方法：<br>   <figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosmsg show [<span class="keyword">message</span> <span class="keyword">type</span>]</div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rosmsg <span class="keyword">show</span> beginner_tutorials/<span class="keyword">Num</span> </div><div class="line">$ rosmsg <span class="keyword">show</span> <span class="keyword">Num</span> // 也可以省略掉 <span class="keyword">package</span> 名</div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int64</span> num</div><div class="line"><span class="keyword">string</span> first_name</div><div class="line"><span class="keyword">string</span> last_name</div><div class="line"><span class="keyword">uint8</span> age</div><div class="line"><span class="keyword">uint8</span> score</div></pre></td></tr></table></figure></p>
<h1 id="srv-的使用"><a href="#srv-的使用" class="headerlink" title="srv 的使用"></a>srv 的使用</h1><p>在 beginner_tutorials 中创建服务，我们从其他 ROS 包中拷贝一个 srv 文件：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd beginner_tutorials</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir srv</span></div><div class="line"><span class="meta">$</span><span class="bash"> roscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv</span></div></pre></td></tr></table></figure></p>
<p>确保 srv 文件被转换成C++ Python 和其他语言的源代码。CMakeLists.txt 文件中关于 message_generation 的配置对 msg 和 srv 都起作用：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Do not just add this line to your CMakeLists.txt, modify the existing line</span></div><div class="line"><span class="function"><span class="title">find_package</span><span class="params">(catkin REQUIRED COMPONENTS roscpp rospy std_msgs message_generation)</span></span></div></pre></td></tr></table></figure></p>
<p>修改 CMakeLists.txt 文件增加 srv 依赖项：<br>   <figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">add_service_files(</span></div><div class="line"> FILES</div><div class="line"> <span class="keyword">AddTwoInts.srv</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>查看服务能否被 ROS 识别，使用方法：<br>   <figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">rossrv</span> show &lt;service <span class="keyword">type</span>&gt;</div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rossrv show beginner_tutorials/AddTwoInts</span></div><div class="line"><span class="meta">$</span><span class="bash"> rossrv show AddTwoInts //也可以不指定 package 名字</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int64 a</div><div class="line"><span class="section">int64 b</span></div><div class="line">---</div><div class="line">int64 sum</div></pre></td></tr></table></figure></p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>通过上面为 beginner_tutorials 包添加的 msg 文件和 srv 文件，接下来就可以编译了。编译之前先在 CMakeLists.txt 文件中添加所有消息文件所依赖的那些含有 .msg 文件的 package ：<br>   <figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">generate_messages(</div><div class="line"> <span class="name">DEPENDENCIES</span></div><div class="line"> std_msgs</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>编译：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_make</span></div></pre></td></tr></table></figure></p>
<p>编译完成后，所有在 msg 路径下的 .msg 文件都将转换为 ROS 所支持语言的源代码。生成的 C++ 头文件将会放置在 ~/catkin_ws/devel/include/beginner_tutorials/目录下；Python脚本语言会在~/catkin_ws/devel/lib/python2.7/dist-packages/beginner_tutorials/msg 目录下创建。 lisp 文件会出现在 ~/catkin_ws/devel/share/common-lisp/ros/beginner_tutorials/msg/ 路径下。详细格式参考 <a href="http://wiki.ros.org/ROS/Message_Description_Language" target="_blank" rel="external">Message_Description_Language</a> 。</p>
<p>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/CreatingMsgAndSrv" target="_blank" rel="external">CreatingMsgAndSrv</a></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS Messages </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS初级八 使用rqt_console和roslaunch]]></title>
      <url>/2017/05/31/ros-primary-tutorial-8/</url>
      <content type="html"><![CDATA[<p>本篇学习 <a href="http://wiki.ros.org/rqt_console" target="_blank" rel="external">rqt_console</a> 与 <a href="http://wiki.ros.org/roslaunch" target="_blank" rel="external">roslaunch</a> 的使用。<a href="http://wiki.ros.org/rqt_console" target="_blank" rel="external">rqt_console</a> 属于 ROS 日志框架的一部分，用来显示节点的输出信息。<a href="http://wiki.ros.org/roslaunch" target="_blank" rel="external">roslaunch</a> 用于节点的运行，可以同时运行多个节点。<br>使用之前先安装以下程序包:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt-common-plugins</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>如果之前已安装，也可忽略。</p>
<h1 id="rqt_console-与-rqt_logger_level"><a href="#rqt-console-与-rqt-logger-level" class="headerlink" title="rqt_console 与 rqt_logger_level"></a>rqt_console 与 rqt_logger_level</h1><p><a href="http://wiki.ros.org/rqt_console" target="_blank" rel="external">rqt_console</a> 显示节点信息， <a href="http://wiki.ros.org/rqt_logger_level" target="_blank" rel="external">rqt_logger_level</a> 用于修改节点运行时输出信息的日志等级。<br>开启 rqt_console 窗口与 rqt_logger_level 窗口：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rqt_console rqt_console</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun rqt_logger_level rqt_logger_level</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/31/ros-primary-tutorial-8/rqtconsole.jpg" alt=""><br><img src="/2017/05/31/ros-primary-tutorial-8/rqtloglevel.jpg" alt=""></p>
<p>开启一个新的 terminal 然后启动 turtlesim 节点：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>
<p>因为默认的日志等级为 info 所以 <a href="http://wiki.ros.org/rqt_console" target="_blank" rel="external">rqt_console</a> 的输出为：<br><img src="/2017/05/31/ros-primary-tutorial-8/info.jpg" alt=""></p>
<p>现在刷新一下 <a href="http://wiki.ros.org/rqt_logger_level" target="_blank" rel="external">rqt_logger_level</a> 窗口，并将日志等级修改为 Warn 并且让 turtle 做旋转动作：<br>   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r <span class="number">1</span> -- '[<span class="number">2.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]' '[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.8</span>]'</div></pre></td></tr></table></figure></p>
<p> 这里我的日志等级并没有修改过来，原因未知，待查。<br>日志等级按以下优先顺序排列：<br>   <figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Fatal</div><div class="line"><span class="keyword">Error</span></div><div class="line">Warn</div><div class="line">Info</div><div class="line">Debug</div></pre></td></tr></table></figure></p>
<p>Fatal是最高优先级，Debug是最低优先级。通过设置日志等级可以获取该等级及其以上优先等级的所有日志消息。比如，将日志等级设为Warn时，会得到Warn、Error和Fatal这三个等级的所有日志消息。</p>
<h1 id="roslaunch"><a href="#roslaunch" class="headerlink" title="roslaunch"></a>roslaunch</h1><p><a href="http://wiki.ros.org/roslaunch" target="_blank" rel="external">roslaunch</a> 可以用来启动定义在 launch 文件中的多个节点，用法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ roslaunch <span class="string">[package]</span> <span class="string">[filename.launch]</span></div></pre></td></tr></table></figure></p>
<p>进入 beginner_tutorials 目录,建立一个 launch 文件，<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscd beginner_tutorials</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir launch</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> launch/</span></div><div class="line"><span class="meta">$</span><span class="bash"> vim turtlemimic.launch</span></div></pre></td></tr></table></figure></p>
<p>在 turtlemimic.launch 文件中输入以下内容：<br>   <figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> &lt;launch&gt;</div><div class="line"></div><div class="line">    &lt;<span class="built_in">group</span> ns=<span class="string">"turtlesim1"</span>&gt;</div><div class="line">      &lt;node pkg=<span class="string">"turtlesim"</span> <span class="built_in">name</span>=<span class="string">"sim"</span> <span class="built_in">type</span>=<span class="string">"turtlesim_node"</span>/&gt;</div><div class="line">   &lt;/<span class="built_in">group</span>&gt;</div><div class="line"></div><div class="line">    &lt;<span class="built_in">group</span> ns=<span class="string">"turtlesim2"</span>&gt;</div><div class="line">      &lt;node pkg=<span class="string">"turtlesim"</span> <span class="built_in">name</span>=<span class="string">"sim"</span> <span class="built_in">type</span>=<span class="string">"turtlesim_node"</span>/&gt;</div><div class="line">    &lt;/<span class="built_in">group</span>&gt;</div><div class="line"> </div><div class="line">   &lt;node pkg=<span class="string">"turtlesim"</span> <span class="built_in">name</span>=<span class="string">"mimic"</span> <span class="built_in">type</span>=<span class="string">"mimic"</span>&gt;</div><div class="line">     &lt;remap <span class="keyword">from</span>=<span class="string">"input"</span> <span class="keyword">to</span>=<span class="string">"turtlesim1/turtle1"</span>/&gt;</div><div class="line">     &lt;remap <span class="keyword">from</span>=<span class="string">"output"</span> <span class="keyword">to</span>=<span class="string">"turtlesim2/turtle1"</span>/&gt;</div><div class="line">   &lt;/node&gt;</div><div class="line"> </div><div class="line">&lt;/launch&gt;</div></pre></td></tr></table></figure></p>
<p>创建了两个节点分组，一个名字为 turtlesim1 ，一个名字为 turtlesim2 ，两个组里都是用相同的  turtlesim节点并命名为 sim，在同时启动两个 turtlesim 模拟器时避免冲突。将所有话题的输入重命名为 turtlesim1 输出重命名为 turtlesim2，这样可以使 turtlesim2 模仿 turtlesim1。<br>启动：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roslaunch beginner_tutorials turtlemimic.launch</span></div></pre></td></tr></table></figure></p>
<p> 并在另一个 terminal 下发布运动指令：<br>   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rostopic pub /turtlesim1/turtle1/cmd_vel geometry_msgs/Twist -r <span class="number">1</span> -- '[<span class="number">2.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]' '[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">-1.8</span>]'</div></pre></td></tr></table></figure></p>
<p>可以看到两个 turtle 在做同样的圆周运动<img src="/2017/05/31/ros-primary-tutorial-8/two.jpg" alt=""></p>
<p>也可以通过 <a href="">rqt_graph</a> 来更好的理解 launch文件中所做的事情：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rqt_graph</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/31/ros-primary-tutorial-8/rqtgraph.jpg" alt=""><br>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/UsingRqtconsoleRoslaunch" target="_blank" rel="external">UsingRqtconsoleRoslaunch</a></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rqt_console </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS初级七 理解ROS服务和参数]]></title>
      <url>/2017/05/31/ros-primary-tutorial-7/</url>
      <content type="html"><![CDATA[<p>本篇学习 ROS 的服务和参数。</p>
<h1 id="ros-服务"><a href="#ROS-服务" class="headerlink" title="ROS 服务"></a>ROS 服务</h1><p>Services 是 ROS 节点之间通信的另一种方式，服务允许节点发送请求(request)，并获得响应(response)。<a href="http://wiki.ros.org/rosservice" target="_blank" rel="external">rosservice</a> 命令可以使用 ROS 客户端/服务器框架提供的服务，<a href="http://wiki.ros.org/rosservice" target="_blank" rel="external">rosservice</a> 提供了很多可以在 topic 上使用的命令：<br>   <figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">rosservice <span class="built_in">list</span>         输出可用服务的信息</div><div class="line">rosservice <span class="built_in">call</span>         调用带参数的服务</div><div class="line">rosservice <span class="built_in">type</span>         输出服务类型</div><div class="line">rosservice <span class="built_in">find</span>         依据类型寻找服务<span class="built_in">find</span> services by service <span class="built_in">type</span></div><div class="line">rosservice uri          输出服务的ROSRPC uri</div></pre></td></tr></table></figure></p>
<p>测试上述命令之前先运行 turtlesim 节点:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>
<p>并用键盘进行控制，显示出运动轨迹。<br><a id="more"></a></p>
<h2 id="rosserice-list"><a href="#rosserice-list" class="headerlink" title="rosserice list"></a>rosserice list</h2>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosservice  list</span></div></pre></td></tr></table></figure>
<p>rosservice list 命令显示出 turtlesim 节点提供的一些服务，其中 rosout 为 roscore 提供的服务：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="string">/clear</span> <span class="string">//</span>清除</div><div class="line"><span class="string">/kill</span>  <span class="string">//</span>终止</div><div class="line"><span class="string">/reset</span> <span class="string">//</span>重置</div><div class="line"><span class="string">/rosout/get_loggers</span></div><div class="line"><span class="string">/rosout/set_logger_level</span></div><div class="line"><span class="string">/spawn</span> <span class="string">//</span>再生</div><div class="line"><span class="string">/turtle1/set_pen</span> <span class="string">//</span>设定画笔包括颜色、线条宽度、开关等</div><div class="line"><span class="string">/turtle1/teleport_absolute</span> <span class="string">//</span>绝对参数</div><div class="line"><span class="string">/turtle1/teleport_relative</span> <span class="string">//</span>相对参数</div><div class="line"><span class="string">/turtlesim/get_loggers</span> <span class="string">//</span>日志</div><div class="line"><span class="string">/turtlesim/set_logger_level</span> <span class="string">//</span>日志等级</div></pre></td></tr></table></figure></p>
<p>参数的详细说明参阅 <a href="http://wiki.ros.org/turtlesim" target="_blank" rel="external">turtlesim</a>。</p>
<h2 id="rosservice-type"><a href="#rosservice-type" class="headerlink" title="rosservice type"></a>rosservice type</h2><p>rosservice type 用于显示某个服务的类型，使用方法：<br>   <figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">rosservice</span> <span class="keyword">type</span> [service]</div></pre></td></tr></table></figure></p>
<p>比如我们想查看 turtlesim 节点提供的 clear 服务：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosservice <span class="built_in">type</span> clear</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">std_srvs/<span class="keyword">Empty</span></div></pre></td></tr></table></figure></p>
<p>服务的类型为空Empty,这表明在调用这个服务时不需要参数。那我们调用一次这个参数看下效果，使用方法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosservice call <span class="string">[service]</span> <span class="string">[args]</span></div></pre></td></tr></table></figure></p>
<p>测试：<br>   <figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosservice <span class="keyword">call</span> <span class="keyword">clear</span></div></pre></td></tr></table></figure></p>
<p>之前 turtule 运行的轨迹被清除。上面是不带参数的服务，我们查看一下带参数的服务 spwan:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosservice <span class="built_in">type</span> spawn| rossrv show</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">float32 x</div><div class="line">float32 y</div><div class="line">float32 theta</div><div class="line"><span class="section">string name</span></div><div class="line">---</div><div class="line">string name</div></pre></td></tr></table></figure></p>
<p>以上可以看出 spawn 服务需要的参数有 x y 坐标值、角度以及名字等参数。我们使用 spawn 服务在指定位置再生成一个 turtle :<br>   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosservice call spawn <span class="number">3</span> <span class="number">3</span> <span class="number">1.8</span> <span class="string">"another turtle"</span></div></pre></td></tr></table></figure></p>
<p>上面命令在坐标(3,3) 方位角为 1.8 生成一个名字为 “anotherturtle” 的 turtle,注意名字之间不能有空格。<br><img src="/2017/05/31/ros-primary-tutorial-7/spawn.jpg" alt=""></p>
<h1 id="ros-参数"><a href="#ROS-参数" class="headerlink" title="ROS 参数"></a>ROS 参数</h1><p><a href="http://wiki.ros.org/rosparam" target="_blank" rel="external">rosparam</a> 使得我们能够存储并操作 ROS 参数服务器 <a href="http://wiki.ros.org/Parameter%20Server" target="_blank" rel="external">Parameter Server</a> 上的数据。参数服务器能够存储整型、浮点、布尔、字符串、字典和列表等数据类型。<a href="http://wiki.ros.org/rosparam" target="_blank" rel="external">rosparam</a> 使用 <a href="https://zh.wikipedia.org/wiki/YAML" target="_blank" rel="external">YAML</a> 标记语言的语法。一般而言，<a href="https://zh.wikipedia.org/wiki/YAML" target="_blank" rel="external">YAML</a> 的表述很自然：1 是整型, 1.0 是浮点型, one 是字符串, true 是布尔, [1, 2, 3]是整型列表, {a: b, c: d}是字典。 <a href="http://wiki.ros.org/rosparam" target="_blank" rel="external">rosparam</a> 有很多指令可以用来操作参数:<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rosparam <span class="keyword">set</span>            设置参数</div><div class="line">rosparam <span class="comment">get</span>            获取参数</div><div class="line">rosparam <span class="comment">load</span>           从文件读取参数</div><div class="line">rosparam <span class="comment">dump</span>           向文件中写入参数</div><div class="line">rosparam <span class="comment">delete</span>         删除参数</div><div class="line">rosparam <span class="comment">list</span>           列出参数名</div></pre></td></tr></table></figure></p>
<p>rosparam list 命令可列出某个节点在参数服务器上的各种参数：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosparam list</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">/background_b</span> <span class="string">//</span>背景颜色 </div><div class="line"><span class="string">/background_g</span> <span class="string">//</span>背景颜色</div><div class="line"><span class="string">/background_r</span> <span class="string">//</span>背景颜色</div><div class="line"><span class="string">/rosdistro</span></div><div class="line"><span class="string">/roslaunch/uris/host_ubuntu__39737</span></div><div class="line"><span class="string">/rosversion</span></div><div class="line"><span class="string">/run_id</span></div></pre></td></tr></table></figure></p>
<p>设置背景颜色通过命令 rosparam set 获取背景颜色使用命令 rosparam get<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rosparam set <span class="string">[param_name]</span></div><div class="line">rosparam get <span class="string">[param_name]</span></div></pre></td></tr></table></figure></p>
<p>我们修改一下红色值：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> rosparam <span class="keyword">set</span> background_r <span class="comment">200</span></div></pre></td></tr></table></figure></p>
<p>调用清除命令参数才能生效：<br>   <figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosservice <span class="keyword">call</span> <span class="keyword">clear</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/31/ros-primary-tutorial-7/rosparam.jpg" alt=""><br>获取参数值：<br>   <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosparam <span class="keyword">get</span> /  <span class="comment">//显示服务器上所有参数内容</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">background_b</span>: <span class="number">255</span></div><div class="line"><span class="attribute">background_g</span>: <span class="number">10</span></div><div class="line"><span class="attribute">background_r</span>: <span class="number">200</span></div><div class="line"><span class="attribute">rosdistro</span>: 'indigo</div><div class="line"></div><div class="line"> '</div><div class="line"><span class="attribute">roslaunch</span>:</div><div class="line"> <span class="attribute">uris</span>: &#123;<span class="attribute">host_ubuntu__39737</span>: <span class="string">'http://ubuntu:39737/'</span>&#125;</div><div class="line"><span class="attribute">rosversion</span>: '<span class="number">1.11</span>.<span class="number">20</span></div><div class="line"></div><div class="line"> '</div><div class="line"><span class="attribute">run_id</span>: <span class="number">0</span>efaaffc-<span class="number">4599</span>-<span class="number">11</span>e7-a400-<span class="number">000</span>c2915ac77</div></pre></td></tr></table></figure></p>
<p>获取某个参数值，比如获取红色通道的值：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosparam get background_r</span></div></pre></td></tr></table></figure></p>
<p>可以使用 rosparam dump 命令将所有参数进行存储，使用 rosparam load 命令读取所有参数：<br>使用方法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rosparam dump <span class="string">[file_name]</span></div><div class="line">rosparam load <span class="string">[file_name]</span> <span class="string">[namespace]</span></div></pre></td></tr></table></figure></p>
<p>将所有参数写入文件 myparams.yaml 中：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosparam dump myparams.yaml</span></div></pre></td></tr></table></figure></p>
<p>载入参数：<br>   <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rosparam load params.yaml <span class="keyword">copy</span><span class="bash">  //将参数载入 copy 空间</span></div><div class="line">$ rosparam get <span class="keyword">copy</span><span class="bash">/background_r</span></div></pre></td></tr></table></figure></p>
<p>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingServicesParams" target="_blank" rel="external">UnderstandingServicesParams</a></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS Services </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS初级六 理解ROS话题]]></title>
      <url>/2017/05/27/ros-primary-tutorial-6/</url>
      <content type="html"><![CDATA[<p>本篇学习 ROS 中的话题 <a href="http://wiki.ros.org/rostopic" target="_blank" rel="external">Topics</a> 以及 <a href="http://wiki.ros.org/rostopic" target="_blank" rel="external">Topics</a> 的使用。源码位于 <a href="https://github.com/ros/ros_comm" target="_blank" rel="external">ROS-communications</a>。开始之前我们先运行 turtlesim 节点，并用键盘来控制它的移动。开一个 terminal 运行：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> roscore &amp;</span></div><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>
<p>开启另外一个 terminal 运行键盘控制节点：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rosrun</span> turtlesim turtle_teleop_key</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>现在随便移动键盘的方向键，看看 图画里的 turtle 是否在跟随你的指令移动:</p>
<p><img src="/2017/05/27/ros-primary-tutorial-6/turtlesim.jpg" alt=""><br>在此期间键盘是如何控制它移动的，期间到底发生了什么，下面我们来进一步分析。</p>
<h1 id="理解话题"><a href="#理解话题" class="headerlink" title="理解话题"></a>理解话题</h1><p>为了更形象的理解话题，我们使用工具 <a href="http://wiki.ros.org/rqt_graph" target="_blank" rel="external">rqt_graph</a>，如果没有安装则通过以下命令安装：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt //如果使用的其他发行版替换indigo即可</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt-common-plugins</span></div></pre></td></tr></table></figure></p>
<p>保持前面的 turtlesim 节点在运行状态，新开一个 terminal 运行 <a href="http://wiki.ros.org/rqt_graph" target="_blank" rel="external">rqt_graph</a>:<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rqt_graph rqt_graph</span></div></pre></td></tr></table></figure></p>
<p>我们会看到下图：<br><img src="/2017/05/27/ros-primary-tutorial-6/rqtgraph.jpg" alt=""><br>将鼠标放置于/turtle1/cmd_vel 上，相应的ROS节点和话题就会高亮显示，turtlesim 和 teleop_turtle 两个节点通过话题 /turtle1/cmd_vel 进行通信。我们可以使用 rostopic 工具查看话题的相关信息。<br>用法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rostopic echo <span class="string">[topic]</span></div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rostopic <span class="built_in">echo</span> /turtle1/cmd_vel</span></div></pre></td></tr></table></figure></p>
<p>这个时候按键盘的向下方向键会看到如下信息：<br>   <figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">linear:</span></div><div class="line"><span class="symbol">  x:</span> <span class="number">-2.0</span></div><div class="line"><span class="symbol">  y:</span> <span class="number">0.0</span></div><div class="line"><span class="symbol">  z:</span> <span class="number">0.0</span></div><div class="line"><span class="symbol">angular:</span></div><div class="line"><span class="symbol">  x:</span> <span class="number">0.0</span></div><div class="line"><span class="symbol">  y:</span> <span class="number">0.0</span></div><div class="line"><span class="symbol">  z:</span> <span class="number">0.0</span></div></pre></td></tr></table></figure></p>
<p>此时刷新一下 rqt_graph 就会看到又多了一个订阅话题 /turtle1/cmd_vel 的节点，红色部分就是。</p>
<p><img src="/2017/05/27/ros-primary-tutorial-6/topic.jpg" alt=""></p>
<h1 id="查看话题"><a href="#查看话题" class="headerlink" title="查看话题"></a>查看话题</h1><p>rostopic list 能够列出所有当前订阅和发布的话题，保持前面的各个节点处于运行状态：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rostopic list -v</span></div></pre></td></tr></table></figure></p>
<p>此时会输出：<br>   <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Published <span class="string">topics:</span></div><div class="line"> * <span class="regexp">/turtle1/</span>color_sensor [turtlesim/Color] <span class="number">1</span> publisher</div><div class="line"> * <span class="regexp">/turtle1/</span>cmd_vel [geometry_msgs/Twist] <span class="number">1</span> publisher</div><div class="line"> * <span class="regexp">/rosout [rosgraph_msgs/</span>Log] <span class="number">4</span> publishers</div><div class="line"> * <span class="regexp">/rosout_agg [rosgraph_msgs/</span>Log] <span class="number">1</span> publisher</div><div class="line"> * <span class="regexp">/turtle1/</span>pose [turtlesim/Pose] <span class="number">1</span> publisher</div><div class="line"></div><div class="line">Subscribed <span class="string">topics:</span></div><div class="line"> * <span class="regexp">/turtle1/</span>cmd_vel [geometry_msgs/Twist] <span class="number">2</span> subscribers</div><div class="line"> * <span class="regexp">/rosout [rosgraph_msgs/</span>Log] <span class="number">1</span> subscriber</div><div class="line"> * <span class="regexp">/statistics [rosgraph_msgs/</span>TopicStatistics] <span class="number">1</span> subscriber</div></pre></td></tr></table></figure></p>
<p>上面列出了所有的订阅和发布的话题及其类型。关于 rostopic list 的其他使用方法可通过帮助命令查看：<br>   <figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rostopic</span> <span class="keyword">list</span> -<span class="built_in">h</span></div></pre></td></tr></table></figure></p>
<h1 id="理解消息"><a href="#理解消息" class="headerlink" title="理解消息"></a>理解消息</h1><p>话题之间的通信是通过在节点之间发送消息 <a href="http://wiki.ros.org/Messages" target="_blank" rel="external">Ros Messages</a> 实现的。发布器 teleop_turtle 和订阅器 turtlesim 之间必须发送和接收相同类型的消息才能通信。也就是说话题的类型是由发布在它上面的消息类型决定的。使用 rostopic type 命令可以查看发布在某个话题上的消息类型：<br>用法：<br>   <figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">rostopic</span> <span class="keyword">type</span> [topic]</div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rostopic <span class="class"><span class="keyword">type</span> <span class="title">turtle1</span></span>/cmd_vel <span class="comment">//查看话题 turtle1/cmd_vel 上的消息类型</span></div></pre></td></tr></table></figure></p>
<p>一般会输出：<br>   <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">geometry_msgs/Twist</div></pre></td></tr></table></figure></p>
<p>可以使用 <a href="http://wiki.ros.org/rosmsg" target="_blank" rel="external">rosmsg</a> 命令查看消息的详细类型：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosmsg show geometry_msgs/Twist</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">geometry_msgs/Vector3 linear</div><div class="line">  <span class="built_in">float</span>64 x</div><div class="line">  <span class="built_in">float</span>64 y</div><div class="line">  <span class="built_in">float</span>64 z</div><div class="line">geometry_msgs/Vector3 angular</div><div class="line">  <span class="built_in">float</span>64 x</div><div class="line">  <span class="built_in">float</span>64 y</div><div class="line">  <span class="built_in">float</span>64 z</div></pre></td></tr></table></figure></p>
<p>上面可以看到消息  geometry_msgs/Twist 的类型 一个是 x y z 三轴的线速度，另外一个是 x y z 三轴的角速度。</p>
<h1 id="使用话题"><a href="#使用话题" class="headerlink" title="使用话题"></a>使用话题</h1><p>rostopic pub 可以把消息发布到某个正在广播的话题上。<br>用法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rostopic pub <span class="string">[topic]</span> <span class="string">[msg_type]</span> <span class="string">[args]</span></div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rostopic pub <span class="number">-1</span> /turtle1/cmd_vel geometry_msgs/Twist -- '[<span class="number">2.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]' '[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.8</span>]'</div></pre></td></tr></table></figure></p>
<p>该命令会发送一条消息到话题 /turtle1/cmd_vel 上，并使得 turtlesim 以2.0大小的线速度和1.8大小的角速度开始移动。 -1 的意思是发布一条消息后马上退出，geometry_msgs/Twist 为消息类型，后面是 x y z 的数值，前面一组代表线速度，后面一组代表角速度。geometry_msgs/Twist 消息里包含两组浮点类型元素 linear 和 angular 。参数格式遵循 <a href="http://wiki.ros.org/ROS/YAMLCommandLine" target="_blank" rel="external">YAML</a> 语法。<br>上面的命令并没有让 turtle 保持一直运动，因为我们的命令只发布了一次就退出了，而要使其一直运动需要控制命令的发布频率：<br>   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r <span class="number">1</span> -- '[<span class="number">2.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]' '[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.8</span>]'</div></pre></td></tr></table></figure></p>
<p>这条命令以 1hz 的频率发布消息到话题 /turtle1/cmd_vel 上，参数 -r 表示频率,后面的 1 为 1hz,此时会看到 turtle 沿着圆形轨迹不停的转动。<br>使用 rostopic hz 命令可以查看消息发布的频率<br>用法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rostopic hz <span class="string">[topic]</span></div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rostopic hz /turtle1/cmd_vel</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">subscribed <span class="keyword">to</span> [/turtle1/cmd_vel]</div><div class="line">average rate: <span class="number">1.000</span></div><div class="line">        <span class="built_in">min</span>: <span class="number">1.000</span>s <span class="built_in">max</span>: <span class="number">1.000</span>s std de<span class="variable">v:</span> <span class="number">0.00000</span>s <span class="keyword">windo</span><span class="variable">w:</span> <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>可见消息发布的频率正如我们前面的设置1 hz。我们也可以查看话题 /turtle1/pose 的发布频率：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rostopic hz /turtle1/pose</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">subscribed <span class="keyword">to</span> [/turtle1/pose]</div><div class="line">average rate: <span class="number">62.534</span></div><div class="line">        <span class="built_in">min</span>: <span class="number">0.015</span>s <span class="built_in">max</span>: <span class="number">0.017</span>s std de<span class="variable">v:</span> <span class="number">0.00052</span>s <span class="keyword">windo</span><span class="variable">w:</span> <span class="number">61</span></div></pre></td></tr></table></figure></p>
<p>可见 turtlesim 正以大约62hz 的频率发布数据给 turtle ，这个应该是位置数据。我们也可以结合 rostopic type 和 rosmsg show 命令来获取关于某个话题的更深层次的信息。<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">rostopic <span class="built_in">type</span> /turtle1/cmd_vel | rosmsg show</span></div></pre></td></tr></table></figure></p>
<h1 id="使用rqt_plot"><a href="#使用rqt-plot" class="headerlink" title="使用rqt_plot"></a>使用rqt_plot</h1><p><a href="http://wiki.ros.org/rqt_plot" target="_blank" rel="external">rqt_plot</a> 是 <a href="https://www.qt.io/" target="_blank" rel="external">Qt</a> 开发的图形用户界面，可以将某个话题上的数据以图形的方式实时的绘制出来，如果没有安装首先通过以下命令安装，参考<a href="http://wiki.ros.org/rqt_plot" target="_blank" rel="external">rqt_plot</a>:</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-rqt-common-plugins</span></div></pre></td></tr></table></figure>
<p>使用：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun rqt_plot rqt_plot</span></div></pre></td></tr></table></figure></p>
<p>窗口左上角可以添加需要的话题，右边的减号可以删除不需要的话题。点击那个绿色的对号按钮可以调节时间和坐标等信息：<br><img src="/2017/05/27/ros-primary-tutorial-6/rqtplot.jpg" alt=""></p>
<p>更多 rqt_plot 的使用请参阅官方文档 <a href="http://wiki.ros.org/rqt_plot" target="_blank" rel="external">rqt_plot</a> 或 <a href="http://rosindex.github.io/p/rqt_plot/#indigo" target="_blank" rel="external">rosindex-rqt_plot</a> </p>
<p>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingTopics" target="_blank" rel="external">UnderstandingTopics</a></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS Topics </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS初级五 理解ROS节点]]></title>
      <url>/2017/05/27/ros-primary-tutorial-5/</url>
      <content type="html"><![CDATA[<p>本篇学习 ROS 节点相关知识。节点是 ROS 程序包中的一个可执行文件，它可以与其他节点进行通信，节点可以发布或订阅话题，也可以提供或使用某种服务 。<br><a id="more"></a></p>
<h1 id="相关介绍"><a href="#相关介绍" class="headerlink" title="相关介绍"></a>相关介绍</h1><p><a href="http://wiki.ros.org/Nodes" target="_blank" rel="external">Nodes</a>: 表示 ROS 中的节点，它表现形式为一个可执行文件，它可以通过 ROS 与其它节点进行通信。<br><a href="http://wiki.ros.org/Messages" target="_blank" rel="external">Messages</a>: 表示消息，它是一种 ROS 数据类型，用于订阅或发布到一个话题。<br><a href="http://wiki.ros.org/Topics" target="_blank" rel="external">Topics</a>: 表示话题，节点可以发布消息到话题，也可以订阅话题以接收消息。<br><a href="http://wiki.ros.org/Master" target="_blank" rel="external">Master</a>: 表示节点管理器，它提供 ROS 名称服务，帮助 ROS 节点找到彼此。<br><a href="http://wiki.ros.org/rosout" target="_blank" rel="external">rosout</a>: 类似标准输出 stdout。<br><a href="http://wiki.ros.org/roscore" target="_blank" rel="external">roscore</a>: 相当于 ROS 中的服务器，运行所有节点前必须先运行 roscore。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>先运行 roscore:<br>   <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>roscore &amp; <span class="regexp">//</span>后台运行</div></pre></td></tr></table></figure></p>
<p>可以使用 rosnode 查看节点信息：<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosnode <span class="built_in">list</span> <span class="comment">//列出活跃的节点</span></div></pre></td></tr></table></figure></p>
<p>此时输出一般为：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">/rosout</span></div></pre></td></tr></table></figure></p>
<p>表示当前只有一个 rosout 节点在运行，这个节点用于收集和记录调试输出信息，它必须先于其它节点运行，并且总是一直在运行。<br>返回特定节点的信息：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosnode info /rosout</span></div></pre></td></tr></table></figure></p>
<p>此时输出一般为：<br>   <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Node</span> <span class="title">[/rosout</span>]</div><div class="line">Publications:</div><div class="line"> * /rosout_agg [rosgraph_msgs/Log]</div><div class="line"></div><div class="line">Subscriptions:</div><div class="line"> * /rosout [unknown <span class="keyword">type</span>]</div><div class="line"></div><div class="line">Services:</div><div class="line"> * /rosout/set_logger_level</div><div class="line"> * /rosout/get_loggers</div><div class="line"></div><div class="line"></div><div class="line">contacting <span class="keyword">node</span> http:<span class="title">//ubuntu</span>:<span class="number">56062</span>/ ...</div><div class="line">Pid: <span class="number">2811</span></div></pre></td></tr></table></figure></p>
<p>可以看出，rosout 既发布主题也订阅主题并且提供 log 日志服务。</p>
<h1 id="运行节点"><a href="#运行节点" class="headerlink" title="运行节点"></a>运行节点</h1><p><a href="http://wiki.ros.org/rosrun" target="_blank" rel="external">rosrun</a> 用于运行某个 ROS 程序包内的节点，而不需要知道这个包的路径，当然前提是这个包已经加入到 ROS 的环境变量中，即 ROS 可以找到它。<br>用法：<br>   <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rosrun <span class="string">[package_name]</span> <span class="string">[node_name]</span></div></pre></td></tr></table></figure></p>
<p>示例：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>
<p>运行程序包 turtlesim 中的 turtlesim_node 节点。要使用 <a href="http://wiki.ros.org/turtlesim" target="_blank" rel="external">turtlesim</a> 需要事先安装这个包：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ros-indigo-ros-tutorials</span></div></pre></td></tr></table></figure></p>
<p>或者通过源码下载后自行编译 参考 <a href="https://github.com/ros/ros_tutorials" target="_blank" rel="external">ros_tutorials</a> 。运行效果<img src="/2017/05/27/ros-primary-tutorial-5/turtlesim.jpg" alt=""><br>如果此时打开另一个 terminal 并使用前面的命令查看节点信息：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosnode list</span></div></pre></td></tr></table></figure></p>
<p>此时的输出一般为：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">/rosout</span></div><div class="line"><span class="string">/turtlesim</span></div></pre></td></tr></table></figure></p>
<p>也可以查看 /turtlesim 节点的具体信息：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosnode info /turtlesim</span></div></pre></td></tr></table></figure></p>
<p>输出一般为：<br>   <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Node [/turtlesim]</div><div class="line"><span class="string">Publications:</span></div><div class="line"> * <span class="regexp">/turtle1/</span>color_sensor [turtlesim/Color]</div><div class="line"> * <span class="regexp">/rosout [rosgraph_msgs/</span>Log]</div><div class="line"> * <span class="regexp">/turtle1/</span>pose [turtlesim/Pose]</div><div class="line"><span class="symbol"></span></div><div class="line">Subscriptions:</div><div class="line"> * <span class="regexp">/turtle1/</span>cmd_vel [unknown type]</div><div class="line"><span class="symbol"></span></div><div class="line">Services:</div><div class="line"> * <span class="regexp">/turtle1/</span>teleport_absolute</div><div class="line"> * <span class="regexp">/turtlesim/</span>get_loggers</div><div class="line"> * <span class="regexp">/turtlesim/</span>set_logger_level</div><div class="line"> * /reset</div><div class="line"> * /spawn</div><div class="line"> * /clear</div><div class="line"> * <span class="regexp">/turtle1/</span>set_pen</div><div class="line"> * <span class="regexp">/turtle1/</span>teleport_relative</div><div class="line"> * /kill</div><div class="line"></div><div class="line"></div><div class="line">contacting node <span class="string">http:</span><span class="comment">//ubuntu:53732/ ...</span></div><div class="line"><span class="string">Pid:</span> <span class="number">3904</span></div><div class="line"><span class="string">Connections:</span></div><div class="line"> * <span class="string">topic:</span> /rosout</div><div class="line">    * <span class="string">to:</span> /rosout</div><div class="line">    * <span class="string">direction:</span> outbound</div><div class="line">    * <span class="string">transport:</span> TCPROS</div></pre></td></tr></table></figure></p>
<p>我们也可以通过命令行修改节点名字，使用 ROS 的 <a href="http://wiki.ros.org/Remapping%20Arguments" target="_blank" rel="external">RemappingArguments</a> 改变节点名称：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosrun turtlesim turtlesim_node __name:=my_turtle</span></div></pre></td></tr></table></figure></p>
<p>改变节点名称前，先 kill 掉之前运行的节点 turtlesim_node。此时再输入命令查看节点信息，名字已经改变了：<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">/my_turtle</span></div><div class="line"><span class="string">/rosout</span></div></pre></td></tr></table></figure></p>
<p>我们可以使用 ping 命令查看节点通讯是否可达：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> rosnode ping my_turtle</span></div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rosnode: node is [/my_turtle]</div><div class="line">pinging /my_turtle <span class="keyword">with</span> <span class="keyword">a</span> timeout <span class="keyword">of</span> <span class="number">3.0</span>s</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">1.326084</span>ms</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">0.391006</span>ms</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">0.315189</span>ms</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">0.321150</span>ms</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">0.367880</span>ms</div><div class="line">xmlrpc reply <span class="built_in">from</span> <span class="keyword">http</span>://ubuntu:<span class="number">40832</span>/  <span class="built_in">time</span>=<span class="number">0.342846</span>ms</div></pre></td></tr></table></figure></p>
<p>至此，关于 ROS 节点的学习告一段落。<br>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingNodes" target="_blank" rel="external">Understanding-Nodes</a></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS Node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo文章末尾添加版权信息]]></title>
      <url>/2017/05/26/hexo-add-copyright/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在文章的末尾添加版权信息，并标出文章链接、作者等信息，这些信息应该便于复制，在文章的末尾自动生成。<br><a id="more"></a></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>我使用的主题是 <a href="http://theme-next.iissnan.com/" target="_blank" rel="external">nexT</a>,为实现版权功能需要手动修改主题目录下的 layout/_macro/post.swig 文件，找到 post-footer 所在的标签，添加以下内容：<br>　　<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"post-footer"</span>&gt;</span> 原有内容</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>    </div><div class="line"> <span class="comment">&#123;# 此处判断是否在索引列表中 #&#125;</span><span class="xml"></span></div><div class="line"> <span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"post-copyright"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-author"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>本文作者：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="template-variable">&#123;&#123; theme.author &#125;&#125;</span><span class="xml"></span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-link"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>本文链接：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span><span class="template-variable">&#123;&#123; url_for(page.path) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; page.title &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123; page.path &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-license"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>版权： <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">    本站文章均采用 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://creativecommons.org/licenses/by-nc-sa/3.0/cn/"</span> <span class="attr">rel</span>=<span class="string">"external nofollow"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>CC BY-NC-SA 3.0 CN<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 许可协议，请勿用于商业，转载注明出处！</div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="添加显示格式"><a href="#添加显示格式" class="headerlink" title="添加显示格式"></a>添加显示格式</h1><p>修改主题目录下的 source/css/_custom/custom.styl 文件：<br>　　<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.post-copyright</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">1em</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1em</span>;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">3px</span> solid <span class="number">#ff1700</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>;</div><div class="line">    <span class="attribute">list-style</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重新部署以下看效果是否显示出来。</p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Copyright </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS初级四 编译ROS程序包]]></title>
      <url>/2017/05/26/ros-primary-tutorial-4/</url>
      <content type="html"><![CDATA[<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>ROS 程序包的编译使用命令 <a href="http://wiki.ros.org/catkin/commands/catkin_make" target="_blank" rel="external">catkin_make</a>。在 catkin 工作空间的根目录下 <em>~/catkin_ws</em> 执行该命令即可编译 catkin 程序包：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>该命令会在 <em>~/catkin_ws</em> 目录下生成 <em>build </em> 和 <em>devel</em> 文件夹，<em>build </em>是 <em>cmake</em> 和 <em>make</em> 命令执行的地方，<em>devel</em> 文件夹内部用于保存编译生成文件，目标文件以及配置文件 setup.*sh等。该命令等价于：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> src</span></div><div class="line"><span class="meta">$</span><span class="bash"> catkin_init_workspace</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ..</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir build</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> build</span></div><div class="line"><span class="meta">$</span><span class="bash"> cmake ../src -DCMAKE_INSTALL_PREFIX=../install -DCATKIN_DEVEL_PREFIX=../devel</span></div><div class="line"><span class="meta">$</span><span class="bash"> make</span></div></pre></td></tr></table></figure></p>
<p>如果只想编译指定的某个包或几个包可以使用以下命令：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class="string">"package1;package2"</span></span></div></pre></td></tr></table></figure></p>
<p>比如我只想编译 mypackage 和 beginner_tutorial这两个包，那么命令可写成：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class="string">"mypackage,beginner_tutorial"</span></span></div></pre></td></tr></table></figure></p>
<p>注意命令中的 = 前后不能有空格。<br>输出：<br>  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Base <span class="string">path:</span> <span class="regexp">/home/</span>steven/catkin_ws</div><div class="line">Source <span class="string">space:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>src</div><div class="line">Build <span class="string">space:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>build</div><div class="line">Devel <span class="string">space:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>devel</div><div class="line">Install <span class="string">space:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>install</div><div class="line"></div><div class="line"> Running <span class="string">command:</span> <span class="string">"cmake /home/steven/catkin_ws/src -DCATKIN_WHITELIST_PACKAGES=mypackage,beginner_tutorial -DCATKIN_DEVEL_PREFIX=/home/steven/catkin_ws/devel -DCMAKE_INSTALL_PREFIX=/home/steven/catkin_ws/install -G Unix Makefiles"</span> <span class="keyword">in</span> <span class="string">"/home/steven/catkin_ws/build"</span></div><div class="line"></div><div class="line">-- Using <span class="string">CATKIN_DEVEL_PREFIX:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>devel</div><div class="line">-- Using <span class="string">CMAKE_PREFIX_PATH:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>devel;<span class="regexp">/opt/</span>ros/indigo</div><div class="line">-- This workspace <span class="string">overlays:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>devel;<span class="regexp">/opt/</span>ros/indigo</div><div class="line">-- Using <span class="string">PYTHON_EXECUTABLE:</span> <span class="regexp">/usr/</span>bin/python</div><div class="line">-- Using Debian Python <span class="keyword">package</span> layout</div><div class="line">-- Using <span class="string">empy:</span> <span class="regexp">/usr/</span>bin/empy</div><div class="line">-- Using <span class="string">CATKIN_ENABLE_TESTING:</span> ON</div><div class="line">-- Call enable_testing()</div><div class="line">-- Using <span class="string">CATKIN_TEST_RESULTS_DIR:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>build/test_results</div><div class="line">-- Found <span class="string">gtest:</span> gtests will be built</div><div class="line">-- Using Python <span class="string">nosetests:</span> <span class="regexp">/usr/</span>bin/nosetests<span class="number">-2.7</span></div><div class="line">-- catkin <span class="number">0.6</span><span class="number">.18</span></div><div class="line">-- BUILD_SHARED_LIBS is on</div><div class="line">-- Using <span class="string">CATKIN_WHITELIST_PACKAGES:</span> mypackage,beginner_tutorial</div><div class="line">-- Configuring done</div><div class="line">-- Generating done</div><div class="line">-- Build files have been written <span class="string">to:</span> <span class="regexp">/home/</span>steven<span class="regexp">/catkin_ws/</span>build</div><div class="line"></div><div class="line"> Running <span class="string">command:</span> <span class="string">"make -j1 -l1"</span> <span class="keyword">in</span> <span class="string">"/home/steven/catkin_ws/build"</span></div></pre></td></tr></table></figure></p>
<p>如果想恢复编译所有包使用命令：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">catkin_make -DCATKIN_WHITELIST_PACKAGES=<span class="string">""</span></span></div></pre></td></tr></table></figure></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>编译完成后生成的文件位于 <em>devel</em> 目录下，可以使用以下命令进行安装：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make install</span></div></pre></td></tr></table></figure></p>
<p>以上命令等价于：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/catkin_ws/build</span></div><div class="line">//If cmake hasn't already been called</div><div class="line"><span class="meta">$</span><span class="bash"> cmake ../src -DCMAKE_INSTALL_PREFIX=../install -DCATKIN_DEVEL_PREFIX=../devel</span></div><div class="line"><span class="meta">$</span><span class="bash"> make</span></div><div class="line"><span class="meta">$</span><span class="bash"> make install</span></div></pre></td></tr></table></figure></p>
<p>执行完以上命令后会在 <em>~/catkin_ws</em> 目录下生成 <em>install</em> 文件夹，所有编译完成的包都安装到了 <em>install</em> 下。里面包含 <em>setup.bash</em> 配置文件，可以使用 <em>source</em> 让系统可以找到这些编译完后的可执行包。<br>可以通过以下命令改变安装位置：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make -DCMAKE_INSTALL_PREFIX=/opt/ros/indigo install</span></div></pre></td></tr></table></figure></p>
<p>位置 <em>/opt/ros/indigo</em> 为系统目录，一般不建议将自己的包安装于此。安装完后记得 <em>source</em> 一下才能使用：<br>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$source</span> <span class="regexp">/opt/</span>ros<span class="regexp">/indigo/</span>setup.bash</div></pre></td></tr></table></figure></p>
<p>或者：<br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span></div></pre></td></tr></table></figure></p>
<p>可以将这句话添加到自己的 <em>~/.bashrc</em> 中：<br>  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">source</span> ~<span class="regexp">/catkin_ws/</span>devel<span class="regexp">/setup.bash</span></div></pre></td></tr></table></figure></p>
<p>参考 <a href="http://wiki.ros.org/catkin/commands/catkin_make" target="_blank" rel="external">catkin_make</a>。</p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Catkin_make </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS初级三 创建ROS程序包]]></title>
      <url>/2017/05/26/ros-primary-tutorial-3/</url>
      <content type="html"><![CDATA[<p>本篇学习 ROS 程序包的创建，使用工具 <a href="http://wiki.ros.org/catkin/commands/catkin_create_pkg" target="_blank" rel="external">catkin_create_pkg</a> 创建新程序包。</p>
<h1 id="ros程序包的组成"><a href="#ROS程序包的组成" class="headerlink" title="ROS程序包的组成"></a>ROS程序包的组成</h1><p> ROS 程序包必须包含 <a href="http://wiki.ros.org/catkin/package.xml" target="_blank" rel="external">package.xml</a> 文件和 <a href="http://wiki.ros.org/catkin/CMakeLists.txt" target="_blank" rel="external">CMakeLists.txt</a> 文件。<em>package.xml</em> 提供有关程序包的元信息，每个目录下只能有一个程序包：<br>   <figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">beginner_tutorials/ </span>    </div><div class="line"> <span class="meta">include</span>/                   </div><div class="line"> msg/                       </div><div class="line"> src/                        </div><div class="line"> srv/                       </div><div class="line"> CMakeLists.txt              </div><div class="line"> package.xml</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="catkin工作空间"><a href="#catkin工作空间" class="headerlink" title="catkin工作空间"></a>catkin工作空间</h1><p>一个简单的 <a href="http://wiki.ros.org/catkin/workspaces" target="_blank" rel="external">catkin workspace</a> 结构如下：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">workspace_folder/        -- WORKSPACE</div><div class="line">  src/                   -- SOURCE SPACE</div><div class="line">    CMakeLists<span class="selector-class">.txt</span>       -- <span class="string">'Toplevel'</span> CMake file, provided by catkin</div><div class="line">    package_1/</div><div class="line">      CMakeLists<span class="selector-class">.txt</span>     -- CMakeLists<span class="selector-class">.txt</span> file <span class="keyword">for</span> package_1</div><div class="line">      package<span class="selector-class">.xml</span>        -- Package manifest <span class="keyword">for</span> package_1</div><div class="line">    ...</div><div class="line">    package_n/</div><div class="line">      CMakeLists<span class="selector-class">.txt</span>     -- CMakeLists<span class="selector-class">.txt</span> file <span class="keyword">for</span> package_n</div><div class="line">      package<span class="selector-class">.xml</span>        -- Package manifest <span class="keyword">for</span> package_n</div></pre></td></tr></table></figure></p>
<h1 id="创建catkin程序包"><a href="#创建catkin程序包" class="headerlink" title="创建catkin程序包"></a>创建catkin程序包</h1><p>使用 <a href="http://wiki.ros.org/catkin/commands/catkin_create_pkg" target="_blank" rel="external">catkin_create_pkg</a> 创建自己的 catkin 程序包，格式：<br>   <figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$catkin_create_pkg</span> &lt;package_name&gt; <span class="selector-attr">[depend1]</span> <span class="selector-attr">[depend2]</span> <span class="selector-attr">[depend3]</span></div></pre></td></tr></table></figure></p>
<p>实例：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/src </span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_create_pkg beginner_tutorials std_msgs rospy roscpp</span></div></pre></td></tr></table></figure></p>
<p>上面命令创建了一个名为 <em>beginner_tutorials</em> 的 catkin 程序包，这个程序包依赖于 std_msgs、roscpp 和 rospy。执行这个命令后在 <em>~/catkin_ws/src</em> 目录下将会创建一个名为 <em>beginner_tutorials</em> 的文件夹，这个文件夹里面包含一个 <em>package.xml</em> 文件和一个 <em>CMakeLists.txt</em> 文件，这两个文件都已经自动包含了部分在执行 <a href="http://wiki.ros.org/catkin/commands/catkin_create_pkg" target="_blank" rel="external">catkin_create_pkg</a> 命令时提供的信息。 </p>
<h1 id="程序包依赖关系"><a href="#程序包依赖关系" class="headerlink" title="程序包依赖关系"></a>程序包依赖关系</h1><p>可以使用 <em>rospack</em> 命令来查看某个程序包的依赖包：<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rospack</span> depends1 beginner_tutorials <span class="regexp">//</span>查看一级依赖</div></pre></td></tr></table></figure></p>
<p>输出：<br>   <figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">roscpp</span></div><div class="line">rospy</div><div class="line">std_msgs</div></pre></td></tr></table></figure></p>
<p>列出的依赖包正是我们在用 <a href="http://wiki.ros.org/catkin/commands/catkin_create_pkg" target="_blank" rel="external">catkin_create_pkg</a> 创建 beginner_tutorials 程序包时指定的依赖包。而这些依赖已经自动添加到 <em>package.xml</em> 文件中：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscd</span> beginner_tutorials</span></div><div class="line"><span class="meta"><span class="meta-keyword">$cat</span> package.xml</span></div></pre></td></tr></table></figure></p>
<p>package.xml内容：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span>&gt;</span></div><div class="line">...</div><div class="line"> <span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>列出所有的间接依赖包：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rospack</span> depends beginner_tutorials</span></div><div class="line">cpp_common</div><div class="line">rostime</div><div class="line">roscpp_traits</div><div class="line">roscpp_serialization</div><div class="line">genmsg</div><div class="line">genpy</div><div class="line">message_runtime</div><div class="line">rosconsole</div><div class="line">std_msgs</div><div class="line">rosgraph_msgs</div><div class="line">xmlrpcpp</div><div class="line">roscpp</div><div class="line">rosgraph</div><div class="line">catkin</div><div class="line">rospack</div><div class="line">roslib</div><div class="line">rospy</div></pre></td></tr></table></figure></p>
<h1 id="自定义程序包"><a href="#自定义程序包" class="headerlink" title="自定义程序包"></a>自定义程序包</h1><p>修改 <em>package.xml</em>, 更新必要的信息。<br>描述标签：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>The beginner_tutorials package<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>将描述信息修改为任何喜欢的内容，但是按照约定第一句话应该简短一些，因为它覆盖了程序包的范围。如果用一句话难以描述完全那就需要换行了。<br>维护者标签：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!-- One maintainer tag required, multiple allowed, one person per tag --&gt;</span> </div><div class="line"><span class="comment">&lt;!-- Example:  --&gt;</span></div><div class="line"><span class="comment">&lt;!-- &lt;maintainer email="jane.doe@example.com"&gt;Jane Doe&lt;/maintainer&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">"user@todo.todo"</span>&gt;</span>user<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这是 <em>package.xml</em> 中要求填写的一个重要标签，因为它能够让其他人联系到程序包的相关人员。至少需要填写一个维护者名称，但如果有需要的话你可以添加多个。除了在标签里面填写维护者的名称外，还应该在标签的 <em>email</em> 属性中填写邮箱地址。<br>许可标签：<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- One license tag required, multiple allowed, one license per tag --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Commonly used license strings: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">license</span>&gt;</span>TODO<span class="tag">&lt;/<span class="name">license</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>选择一种许可协议并将它填写到这里。一些常见的开源许可协议有BSD、MIT、Boost Software License、GPLv2、GPLv3、LGPLv2.1和LGPLv3。可以在 <a href="https://opensource.org/licenses/alphabetical" target="_blank" rel="external">Open Source Initiative</a> 中获取许可协议的相关信息。我们使用BSD协议，因为ROS核心组件的剩余部分已经使用了该协议。<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">license</span>&gt;</span>BSD<span class="tag">&lt;/<span class="name">license</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>依赖项标签：<br>依赖项标签用来描述程序包的各种依赖项，包括 build_depend、buildtool_depend、run_depend、test_depend。<br>关于这些标签的更详细介绍请参考 <a href="http://wiki.ros.org/catkin/package.xml#Build.2C_Run.2C_and_Test_Dependencies" target="_blank" rel="external">Catkin Dependencies</a> 相关的文档。在之前的操作中，因为我们将 std_msgs、 roscpp、 和 rospy 作为 catkin_create_pkg 命令的参数，所以生成的依赖项看起来如下:<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- The *_depend tags are used to specify dependencies --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Dependencies can be catkin packages or system dependencies --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Examples: --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Use build_depend for packages you need at compile time: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   &lt;build_depend&gt;genmsg&lt;/build_depend&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Use buildtool_depend for build tool packages: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Use run_depend for packages you need at runtime: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   &lt;run_depend&gt;python-yaml&lt;/run_depend&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Use test_depend for packages you need only for testing: --&gt;</span></div><div class="line"><span class="comment">&lt;!--   &lt;test_depend&gt;gtest&lt;/test_depend&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>除了 <em>catkin</em> 中默认提供的 <em>buildtool_depend</em>，所有我们列出的依赖包都已经被添加到 <em>build_depend</em> 标签中。因为在编译和运行时我们需要用到所有指定的依赖包，因此还需要将每一个依赖包分别添加到 <em>run_depend</em> 标签中:<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>完整的 <a href="http://wiki.ros.org/catkin/package.xml" target="_blank" rel="external">package.xml</a> :<br>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line">   <span class="tag">&lt;<span class="name">package</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>beginner_tutorials<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">description</span>&gt;</span>The beginner_tutorials package<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">   </div><div class="line">     <span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">"you@yourdomain.tld"</span>&gt;</span>Your Name<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">license</span>&gt;</span>BSD<span class="tag">&lt;/<span class="name">license</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">url</span> <span class="attr">type</span>=<span class="string">"website"</span>&gt;</span>http://wiki.ros.org/beginner_tutorials<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">author</span> <span class="attr">email</span>=<span class="string">"you@yourdomain.tld"</span>&gt;</span>Jane Doe<span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> catkin_create_pkg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS初级二 文件系统介绍]]></title>
      <url>/2017/05/26/ros-primary-tutorial-2/</url>
      <content type="html"><![CDATA[<p>本篇学习 ROS 的文件系统，包括一些命令行工具 <a href="http://wiki.ros.org/rosbash#roscd" target="_blank" rel="external">roscd</a>、 <a href="http://wiki.ros.org/rosbash#rosls" target="_blank" rel="external">rosls</a>、 <a href="http://wiki.ros.org/rospack" target="_blank" rel="external">rospack</a> 等的使用。</p>
<h1 id="安装-tutorial-程序包"><a href="#安装-tutorial-程序包：" class="headerlink" title="安装 tutorial 程序包："></a>安装 tutorial 程序包：</h1>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install ros-indigo-ros-tutorials</span></div></pre></td></tr></table></figure>
<p>源码位于: <a href="https://github.com/ros/ros_tutorials.git" target="_blank" rel="external">ros_tutorials</a>。<br> 一般一个 ROS 软件包中包括 <em>CMakeLists.txt</em>、  <em>include</em>、   <em>package.xml</em>、  <em>src</em> 等几个文件及文件目录。Packages 软件包是ROS 应用程序代码的组织单元，每个软件包都可以包含程序库、可执行文件、脚本或者其它手动创建的东西。 Manifest (package.xml): 清单，是对于软件包相关信息的描述,用于定义软件包相关元信息之间的依赖关系，这些信息包括版本、维护者和许可协议等。<br><a id="more"></a></p>
<h1 id="文件系统工具"><a href="#文件系统工具" class="headerlink" title="文件系统工具"></a>文件系统工具</h1><h2 id="rospack"><a href="#rospack" class="headerlink" title="rospack"></a><a href="http://wiki.ros.org/rospack" target="_blank" rel="external">rospack</a></h2><p> <a href="http://wiki.ros.org/rospack" target="_blank" rel="external">rospack</a> 命令允许获取 ROS 软件包的信息，可以通过 <em>rospack help</em> 查看它的使用方法：<br>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">$rospack <span class="keyword">help</span></div><div class="line"><span class="keyword">USAGE</span>: rospack &lt;command&gt; [options] [<span class="keyword">package</span>]</div><div class="line"> Allowed commands:</div><div class="line">   <span class="keyword">help</span></div><div class="line">   cflags-<span class="keyword">only</span>-I     [<span class="comment">--deps-only] [package]</span></div><div class="line">   cflags-<span class="keyword">only</span>-other [<span class="comment">--deps-only] [package]</span></div><div class="line">   depends           [<span class="keyword">package</span>] (<span class="keyword">alias</span>: deps)</div><div class="line">   depends-indent    [<span class="keyword">package</span>] (<span class="keyword">alias</span>: deps-indent)</div><div class="line">   depends-manifests [<span class="keyword">package</span>] (<span class="keyword">alias</span>: deps-manifests)</div><div class="line">   depends-msgsrv    [<span class="keyword">package</span>] (<span class="keyword">alias</span>: deps-msgsrv)</div><div class="line">   depends-<span class="keyword">on</span>        [<span class="keyword">package</span>]</div><div class="line">   depends-on1       [<span class="keyword">package</span>]</div><div class="line">   depends-why <span class="comment">--target=&lt;target&gt; [package] (alias: deps-why)</span></div><div class="line">   depends1          [<span class="keyword">package</span>] (<span class="keyword">alias</span>: deps1)</div><div class="line">   <span class="keyword">export</span> [<span class="comment">--deps-only] --lang=&lt;lang&gt; --attrib=&lt;attrib&gt; [package]</span></div><div class="line">   find [<span class="keyword">package</span>]</div><div class="line">   langs</div><div class="line">   libs-<span class="keyword">only</span>-L     [<span class="comment">--deps-only] [package]</span></div><div class="line">   libs-<span class="keyword">only</span>-l     [<span class="comment">--deps-only] [package]</span></div><div class="line">   libs-<span class="keyword">only</span>-other [<span class="comment">--deps-only] [package]</span></div><div class="line">   <span class="keyword">list</span></div><div class="line">   <span class="keyword">list</span>-duplicates</div><div class="line">   <span class="keyword">list</span>-<span class="keyword">names</span></div><div class="line">   plugins <span class="comment">--attrib=&lt;attrib&gt; [--top=&lt;toppkg&gt;] [package]</span></div><div class="line">   profile [<span class="comment">--length=&lt;length&gt;] [--zombie-only]</span></div><div class="line">   rosdep  [<span class="keyword">package</span>] (<span class="keyword">alias</span>: rosdeps)</div><div class="line">   rosdep0 [<span class="keyword">package</span>] (<span class="keyword">alias</span>: rosdeps0)</div><div class="line">   vcs  [<span class="keyword">package</span>]</div><div class="line">   vcs0 [<span class="keyword">package</span>]</div><div class="line"> Extra options:</div><div class="line">   -q     Quiets <span class="keyword">error</span> reports.</div><div class="line"></div><div class="line"><span class="keyword">If</span> [<span class="keyword">package</span>] <span class="keyword">is</span> omitted, the <span class="keyword">current</span> working <span class="keyword">directory</span></div><div class="line"><span class="keyword">is</span> used (<span class="keyword">if</span> it contains a package.xml <span class="keyword">or</span> manifest.xml).</div></pre></td></tr></table></figure></p>
<p> 一般我们常用的 <em>rospack find xxx</em> 命令查找某个包位于何处，比如我们想知道 <em>turtlesim</em> 包位于哪里：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rospack</span> find turtlesim</span></div></pre></td></tr></table></figure></p>
<p> 系统会输出turtlesim 的路径 <em>/opt/ros/indigo/share/turtlesim</em></p>
<h2 id="roscd"><a href="#roscd" class="headerlink" title="roscd"></a><a href="http://wiki.ros.org/rosbash#roscd" target="_blank" rel="external">roscd</a></h2><p> <a href="http://wiki.ros.org/rosbash#roscd" target="_blank" rel="external">roscd</a> 是 <a href="http://wiki.ros.org/rosbash" target="_blank" rel="external">rosbash</a> 命令集中的一部分，它可以直接切换(cd)工作目录到某个软件包或者软件包集当中。<br> 使用方法：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscd</span> [本地包名称[/子目录]]</span></div></pre></td></tr></table></figure></p>
<p> 比如：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscd</span> beginner_tutorials/src</span></div></pre></td></tr></table></figure></p>
<p> 直接进入到 <em>beginner_tutorials/src</em> 目录下，此时查看当前目录<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$pwd</span></div><div class="line"><span class="regexp">/home/y</span>ourusername<span class="regexp">/catkin_ws/</span>src<span class="regexp">/beginner_tutorials/</span>src</div></pre></td></tr></table></figure></p>
<p>值得注意的是 <a href="http://wiki.ros.org/rosbash#roscd" target="_blank" rel="external">roscd</a> 只能切换到那些路径已经包含在 ROS_PACKAGE_PATH 环境变量中的软件包。<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">roscd <span class="built_in">log</span></span></div></pre></td></tr></table></figure></p>
<p>roscd log可以切换到ROS保存日记文件的目录下,如果你没有执行过任何ROS程序，系统会报错说该目录不存在。 此时查看当前目录：<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$pwd</span></div><div class="line"><span class="regexp">/home/y</span>ourusername<span class="regexp">/.ros/</span>log</div></pre></td></tr></table></figure></p>
<h2 id="rosls"><a href="#rosls" class="headerlink" title="rosls"></a><a href="http://wiki.ros.org/rosbash#rosls" target="_blank" rel="external">rosls</a></h2><p><a href="http://wiki.ros.org/rosbash#rosls" target="_blank" rel="external">rosls</a> 是 <a href="http://wiki.ros.org/rosbash" target="_blank" rel="external">rosbash</a> 命令集中的一部分,允许直接按软件包的名称而不是绝对路径执行ls命令,使用方法：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rosls</span> [本地包名称[/子目录]]</span></div></pre></td></tr></table></figure></p>
<p>比如在任意目录下执行，而不需要进入到 beginner_tutorials 所在目录：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rosls</span> beginner_tutorials/</span></div></pre></td></tr></table></figure></p>
<p>应输出：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CMakeLists<span class="selector-class">.txt</span>  include  msg  package<span class="selector-class">.xml</span>  src  srv</div></pre></td></tr></table></figure></p>
<h1 id="tab补全"><a href="#TAB补全" class="headerlink" title="TAB补全"></a>TAB补全</h1><p>ROS 命令同样支持TAB补全，这里不再细讲。</p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS File&#39;s System </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS初级一 安装与配置]]></title>
      <url>/2017/05/26/ros-primary-tutorial-1/</url>
      <content type="html"><![CDATA[<p>一直想记录一下ROS学习过程中的点滴，先从最基础的 ROS-Beginner-Tutorials开始， 以便于帮助更多的人，本篇是ROS学习的开篇。</p>
<h1 id="ros安装"><a href="#ROS安装" class="headerlink" title="ROS安装"></a>ROS安装</h1><p>目前ROS官方还在维护的版本有4个(截至201705),参考 <a href="http://wiki.ros.org/Distributions" target="_blank" rel="external">ROS-Distributions</a>：<img src="/2017/05/26/ros-primary-tutorial-1/rosv.jpg" alt=""><br><a id="more"></a><br>因为我的环境是ubuntu14.04,支持的 ROS 版本为 <a href="http://wiki.ros.org/indigo" target="_blank" rel="external">ROS-Indigo</a>, 因此我选择安装 <a href="http://wiki.ros.org/indigo" target="_blank" rel="external">ROS-Indigo</a>。<br><em>环境： ubuntu 14.04 Trusty LTS 32bits</em><br>安装可以参考官网: <a href="http://wiki.ros.org/indigo/Installation/Ubuntu" target="_blank" rel="external">ROS-Indigo-Installation-ubuntu</a><br>添加代码仓：<br>   <figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> <span class="keyword">sh</span> -c 'echo <span class="string">"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main"</span> &gt; /etc/apt/sources.<span class="keyword">list</span>.<span class="keyword">d</span>/ros-latest.<span class="keyword">list</span>'</div></pre></td></tr></table></figure></p>
<p>设定key:<br>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sudo apt-key adv <span class="params">--keyserver</span> hkp:<span class="string">//ha.pool.sks-keyservers.net</span><span class="function">:80</span> <span class="params">--recv-key</span> 421C365BD9FF1F717815A3895523BAEEB01FA116</div></pre></td></tr></table></figure></p>
<p>更新：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get update</span></div></pre></td></tr></table></figure></p>
<p>选择桌面版完全安装：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install ros-indigo-desktop-full</span></div></pre></td></tr></table></figure></p>
<p>初始化rosdep:<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> rosdep init</span></div><div class="line"><span class="meta"><span class="meta-keyword">$rosdep</span> update</span></div></pre></td></tr></table></figure></p>
<p>设定环境变量让系统能找到ROS：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">echo</span> <span class="string">"source /opt/ros/indigo/setup.bash"</span> &gt;&gt; ~/.bashrc</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">source</span> ~/.bashrc</span></div></pre></td></tr></table></figure></p>
<p>安装rosinstall工具，方便下载ROS：<br>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install python-rosinstall</span></div></pre></td></tr></table></figure></p>
<h1 id="管理环境"><a href="#管理环境" class="headerlink" title="管理环境"></a>管理环境</h1><p>检查我们是否配置好了环境变量：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">export</span> | grep ROS</span></div></pre></td></tr></table></figure></p>
<p>检查是否有 <a href="http://wiki.ros.org/ROS/EnvironmentVariables#ROS_ROOT" target="_blank" rel="external">ROS_ROOT</a> 和 <a href="http://wiki.ros.org/ROS/EnvironmentVariables#ROS_PACKAGE_PATH" target="_blank" rel="external">ROS_PACKAGE_PATH</a> 的配置。</p>
<h1 id="创建ros工作空间"><a href="#创建ROS工作空间" class="headerlink" title="创建ROS工作空间"></a>创建ROS工作空间</h1><p><a href="http://wiki.ros.org/catkin/commands/catkin_make" target="_blank" rel="external">catkin_make</a> 命令只适用于 ROS Groovy 及其以后的版本。</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">mkdir -p ~/catkin_ws/src</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/src</span></div></pre></td></tr></table></figure>
<p>这就创建了一个 <a href="http://wiki.ros.org/catkin/workspaces" target="_blank" rel="external">catkin 工作空间</a>, 里面是空的，只有一个 <a href="http://wiki.ros.org/catkin/CMakeLists.txt" target="_blank" rel="external">CMakeLists.txt</a>, 但依然可以编译它：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make</span></div></pre></td></tr></table></figure></p>
<p>当前目录下会生成 <em>build</em> 和 <em>devel</em> 这两个文件夹。在 <em>devel</em> 文件夹里面可以看到几个 setup.*sh 文件。 source 这些文件中的任何一个都可以将当前工作空间设置在ROS工作环境的最顶层，参考 <a href="http://wiki.ros.org/catkin" target="_blank" rel="external">catkin</a>文档。接下来首先 source 一下新生成的 setup.bash 文件：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span></div></pre></td></tr></table></figure></p>
<p>也可以将这句命令加入到 ~/.bashrc 中，这样每次打开一个 <em>terminal</em> 会自动 <em>source</em> 。<br>确保工作空间已经正确配置可以通过以下命令查看：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span></span></div></pre></td></tr></table></figure></p>
<p>正确的输出一般为：<br>   <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/home/</span>yourusername<span class="regexp">/catkin_ws/</span><span class="string">src:</span><span class="regexp">/opt/</span>ros<span class="regexp">/indigo/</span><span class="string">share:</span><span class="regexp">/opt/</span>ros<span class="regexp">/indigo/</span>stacks</div></pre></td></tr></table></figure></p>
<p>至此，ROS的安装与配置已经搭建完成。<br>参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials" target="_blank" rel="external">ROS-Beginner-Tutorials</a>。</p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS Installation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Qt 编译调试 ROS]]></title>
      <url>/2017/05/25/debug-ros-using-qt/</url>
      <content type="html"><![CDATA[<p>其实 vim 配置好后可以很方便的调试 ROS ，就是 Vim 配置比较麻烦，可以参考我的站内文章 <a href="/2017/05/18/vim/" title="如何让VIM变的爱不释手">如何让VIM变的爱不释手</a> 。 相信很多人都用过 Qt ，它原生支持 CMake ，因此 Qt 可以很好的支持 ROS，本篇学习如何使用 Qt 进行 ROS 的开发。<br><a id="more"></a></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>首先找到这个文件 QtProject-qtcreator.desktop 该文件可能位于~/.local/share/applications/，也可能位于/usr/share/applications，可以使用如下命令查找：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo find -name QtProject-qtcreator.desktop</span></div></pre></td></tr></table></figure></p>
<p>打开该文件，在Exec那一行添加 bash -i –c ：<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Exec=bash -i -c <span class="regexp">/usr/</span>local<span class="regexp">/qtcreator-3.4.2/</span>bin<span class="regexp">/qtcreator</span></div></pre></td></tr></table></figure></p>
<p>添加 “bash -i –c” 是为了在通过快捷方式启动Qt Creator的同时加载ROS环境变量，ROS环境变量加载脚本配置在 ~/.bashrc 文件内，类似于加载工作空间里的 <em>devel/setup.bash</em> 。</p>
<h1 id="打开工程"><a href="#打开工程" class="headerlink" title="打开工程"></a>打开工程</h1><p>在桌面上打开 qt-creator，打开某一个ROS工程，找到 CMakelist.txt 因为 qt 本身支持 cmake 项目:</p>
<p><img src="/2017/05/25/debug-ros-using-qt/open.jpg" alt=""></p>
<p>设置编译路径为 catkin_ws 的 build 路径:</p>
<p><img src="/2017/05/25/debug-ros-using-qt/setup.jpg" alt=""></p>
<p>设置CMake编译模式：-DCMAKE_BUILD_TYPE=Debug :</p>
<p><img src="/2017/05/25/debug-ros-using-qt/mode.jpg" alt=""></p>
<p>最后点击 Run CMake 按钮,然后点击 Finish 按钮就可以编译该工程了：</p>
<p><img src="/2017/05/25/debug-ros-using-qt/compile.jpg" alt=""></p>
<p>值得注意的是，在运行前需要新开一个 terminal 运行 roscore,然后再运行编译后的工程节点。</p>
<h1 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h1><p>对于 ROS 新工程的建立需要 <a href="https://www.qt.io/ide/" target="_blank" rel="external">Qt Creator</a> 4.1 以上版本，需要安装 <a href="http://rosindustrial.org/news/2016/6/9/ros-qt-ide-plugin" target="_blank" rel="external">ros_qtc_plugin</a> 插件，该插件位于 <a href="https://github.com/ros-industrial/ros_qtc_plugin" target="_blank" rel="external">github</a>。 因为我安装的版本较低，所以我依然采用 ROS 命令行建立新的 pkg。 至此，可以开始使用 Qt 开发 ROS 了。</p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS Qt </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS导航仿真]]></title>
      <url>/2017/05/24/ros-navigation-simulation/</url>
      <content type="html"><![CDATA[<p>在进入实际的机器人运动控制之前，先使用空白地图或现有地图进行ROS导航功能的仿真,以便于更进一步了解机器人的导航控制策略。<br><em>环境: ubuntu 14.04 LTS 32bits </em><br><em>ROS</em>: <em>Indigo</em><br><a id="more"></a></p>
<h1 id="navigation-安装"><a href="#Navigation-安装" class="headerlink" title="Navigation 安装"></a>Navigation 安装</h1><p>在进行导航仿真之前，需要先下载 <em>ROS</em> 官方提供的 <a href="http://wiki.ros.org/cn/navigation" target="_blank" rel="external">ROS-Navigation</a>，安装下载：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/src</span></div><div class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> https://github.com/ros-planning/navigation.git</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> navigation　</span></div><div class="line"><span class="meta">$</span><span class="bash">git checkout indigo-devel</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make</span></div><div class="line"><span class="meta">$</span><span class="bash">rospack profile</span></div></pre></td></tr></table></figure></p>
<p>可能会报错：<br>   <figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">catkin_ws<span class="meta-keyword">/src/</span>navigation/map_server<span class="meta-keyword">/src/</span>image_loader.cpp:<span class="number">43</span>:<span class="number">27</span>: fatal error: SDL/SDL_image.h: No such file or directory</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL/SDL_image.h&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>安装 <a href="https://www.libsdl.org/" target="_blank" rel="external">SDL</a>,SDL（Simple DirectMedia Layer）是一套开放源代码的跨平台多媒体开发库，使用C语言写成。SDL提供了数种控制图像、声音、输出入的函数，让开发者只要用相同或是相似的代码就可以开发出跨多个平台（Linux、Windows、Mac OS X等）的应用软件。参考 <a href="https://zh.wikipedia.org/wiki/SDL" target="_blank" rel="external">SDL</a>:<br>   <figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-<span class="built_in">get</span> install libsdl-image1<span class="number">.2</span>-<span class="built_in">dev</span> libsdl1<span class="number">.2</span>-<span class="built_in">dev</span></div></pre></td></tr></table></figure></p>
<h1 id="使用-arbotix-测试-move_base"><a href="#使用-arbotix-测试-move-base" class="headerlink" title="使用 arbotix 测试 move_base"></a>使用 arbotix 测试 move_base</h1><p><a href="http://wiki.ros.org/move_base" target="_blank" rel="external">move_base</a> 是导航功能里比较重要的一项，它获取传感器数据并负责路径规划、距离计算、成本计算等。</p>
<p><img src="/2017/05/24/ros-navigation-simulation/movebase.png" alt=""></p>
<p><em>move_base</em> 节点运行前需要四个配置文件，它们定义了路径规划需要的一些配置参数，包括越过障碍物的代价、机器人的半径、即时距离计算、机器人移动速度等参数。在 <em>ROS by example</em> 中的示例代码 <em>rbx1</em> 中有关于每个机器人的四个配置文件，它们位于 <em>rbx1/rbx1_nav/config</em> 中，每个机器人下面都有对应的四个配置文件：<br><em>base_local_planner_params.yaml</em><br><em>costmap_common_params.yaml</em><br><em>global_costmap_params.yaml</em><br><em>local_costmap_params.yaml</em><br>里面的参数说明可以参考官方文档。下面的命令启动启动一个机器人，使用 <em>move_base</em>使其向前移动 2m：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$roslaunch</span> rbx1_bringup fake_turtlebot<span class="selector-class">.launch</span> <span class="comment">//启动一个机器人 使用ArbotiX模拟器</span></div><div class="line"><span class="variable">$roslaunch</span> rbx1_nav fake_move_base_blank_map<span class="selector-class">.launch</span> <span class="comment">///以空白地图启动move_base节点</span></div><div class="line"><span class="variable">$rosrun</span> rviz rviz -d `rospack find rbx1_nav`/<span class="selector-tag">nav</span><span class="selector-class">.rviz</span> <span class="comment">//启动Rviz</span></div><div class="line">$ rostopic pub /move_base_simple/goal geometry_msgs/PoseStamped <span class="string">'&#123;header: &#123;frame_id: "map"&#125;,pose: &#123;position: &#123;x: 1.0,y: 0,z: 0&#125;,orientation: &#123;x: 0,y: 0,z: 0,w: 2&#125;&#125;&#125;'</span> <span class="comment">//向前运动2m</span></div></pre></td></tr></table></figure></p>
<p>返回原地：<br>   <figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml">$ rostopic pub /move_base_simple/goal geometry_msgs/PoseStamped '</span><span class="template-variable">&#123;header: &#123;frame_id: "map"&#125;</span><span class="xml">,pose: </span><span class="template-variable">&#123;position: &#123;x: 0.0,y: 0,z: 0&#125;</span><span class="xml">,orientation: </span><span class="template-variable">&#123;x: 0,y: 0,z: 0,w: 2&#125;</span><span class="xml">&#125;&#125;' //返回</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/24/ros-navigation-simulation/forward.jpg" alt=""></p>
<p>让机器人走一个正方形：<br>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rosrun</span> rbx1_nav move_base_square.py<span class="regexp">//</span>让机器人走正方形</div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/24/ros-navigation-simulation/square.jpg" alt=""></p>
<h1 id="带障碍物的导航"><a href="#带障碍物的导航" class="headerlink" title="带障碍物的导航"></a>带障碍物的导航</h1><p>将空白地图换做带障碍物的地图再次使机器人运行一个正方形：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$roscore</span></div><div class="line"><span class="variable">$roslaunch</span> rbx1_bringup fake_turtlebot<span class="selector-class">.launch</span> <span class="comment">//加载一个模拟机器人</span></div><div class="line"><span class="variable">$roslaunch</span> rbx1_nav fake_move_base_map_with_obstacles<span class="selector-class">.launch</span>  <span class="comment">//加载一张带障碍物的地图</span></div><div class="line"><span class="variable">$rosrun</span>  rviz rviz -d `rospack find rbx1_nav`/nav_obstacles<span class="selector-class">.rviz</span> <span class="comment">//加载rviz  带障碍物的导航</span></div><div class="line"><span class="variable">$rosrun</span> rbx1_nav move_base_square<span class="selector-class">.py</span> <span class="comment">//使其自动走一个正方形</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/24/ros-navigation-simulation/obstacle.jpg" alt=""></p>
<h1 id="复杂地图导航与蒙特卡洛定位"><a href="#复杂地图导航与蒙特卡洛定位" class="headerlink" title="复杂地图导航与蒙特卡洛定位"></a>复杂地图导航与蒙特卡洛定位</h1><p>使用ROS导航包里现有的复杂地图结合 <a href="http://wiki.ros.org/amcl" target="_blank" rel="external">ACML</a>-(Adaptive Monte Carlo Localization) 进行导航功能的测试。<a href="http://wiki.ros.org/amcl" target="_blank" rel="external">ACML</a> 即自适应蒙特卡罗定位，关于它的原理回头再仔细分析。<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$roscore</span></div><div class="line"><span class="variable">$roslaunch</span> rbx1_bringup fake_turtlebot<span class="selector-class">.launch</span> <span class="comment">//运行一个机器人</span></div><div class="line"><span class="variable">$roslaunch</span> rbx1_nav fake_amcl<span class="selector-class">.launch</span> <span class="comment">//运行fake_amcl.launch调用已有的测试地图</span></div><div class="line"><span class="variable">$rosrun</span> rviz rviz -d `rospack find rbx1_nav`/amcl<span class="selector-class">.rviz</span> <span class="comment">//启动rviz 并调用amcl配置文件</span></div></pre></td></tr></table></figure></p>
<p>也可以手动指定要调用的地图：<br>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$roslaunch</span> rbx1_nav fake_amcl<span class="selector-class">.launch</span> map:=test_map.yaml</div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/24/ros-navigation-simulation/amcl.jpg" alt=""></p>
<p>此时点击2D New Goal按钮，让机器人运动到指定目标：<br><img src="/2017/05/24/ros-navigation-simulation/amcl-move.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS Navigation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS机器人仿真]]></title>
      <url>/2017/05/24/ros-simulation/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 <em>PC</em> 环境下进行机器人的运动仿真是 <em>ROS</em> 开发者必经的一个环节，<em>ROS</em> 官方提供了好用且强大的3D可视化工具 <a href="http://wiki.ros.org/rviz" target="_blank" rel="external">rviz</a>-3D visualization tool for ROS。<br><em>环境: ubuntu 14.04 LTS 32bits </em><br><em>ROS</em>: <em>Indigo</em><br>开启仿真之旅。<br><a id="more"></a></p>
<h1 id="安装-rviz"><a href="#安装-rviz" class="headerlink" title="安装 rviz"></a>安装 <a href="http://wiki.ros.org/rviz" target="_blank" rel="external">rviz</a></h1><p>安装之前首先确保在 <em>ubuntu</em> 系统下配置安装好了 <em>ROS</em> 环境，如果没有请参考官网安装，点击 <a href="http://wiki.ros.org/indigo/Installation/Ubuntu" target="_blank" rel="external">ROS-Install-on-Ubuntu</a>。安装3D可视化工具 <a href="http://wiki.ros.org/rviz" target="_blank" rel="external">rviz</a> 参考 <a href="http://wiki.ros.org/rviz/UserGuide" target="_blank" rel="external">Rviz-Installation</a><br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install ros-indigo-rviz</span></div></pre></td></tr></table></figure></p>
<p><a href="http://wiki.ros.org/rviz" target="_blank" rel="external">rviz</a> 只是一个3D可视化工具，需要安装一个模拟器 <a href="http://wiki.ros.org/arbotix" target="_blank" rel="external">Arbotix</a> 才能进行机器人的仿真，安装模拟器 <a href="http://wiki.ros.org/arbotix" target="_blank" rel="external">Arbotix</a>：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install ros-indigo-arbotix*</span></div><div class="line"><span class="meta"><span class="meta-keyword">$rospack</span> profile //更新ros软件包</span></div></pre></td></tr></table></figure></p>
<h1 id="开始仿真"><a href="#开始仿真" class="headerlink" title="开始仿真"></a>开始仿真</h1><p>仿真之前下载 <a href="https://github.com/pirobot/rbx1" target="_blank" rel="external">ros-by-example</a> 自带的例程代码：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/src</span></div><div class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> https://github.com/pirobot/rbx1.git</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> rbx1</span></div><div class="line"><span class="meta">$</span><span class="bash">git checkout indigo-devel</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span></div><div class="line"><span class="meta">$</span><span class="bash">rospack profile</span></div></pre></td></tr></table></figure></p>
<p>使用 <em>rbx1</em> 包之前运行包里自带的 <em>rbx1-prereq.sh</em> 文件，安装一下依赖项，如果安装了可以略过：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sh</span> rbx1-prereq.sh　</span></div><div class="line"><span class="meta"><span class="meta-keyword">$rospack</span> profile</span></div></pre></td></tr></table></figure></p>
<p>运行 <em>roscore</em> 先：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscore</span> &amp;</span></div></pre></td></tr></table></figure></p>
<p>开启一个机器人模型,模型位于<em>/rbx1/rbx1_bringup/launch</em>目录下：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roslaunch</span> rbx1_bringup fake_pi_robot.launch</span></div></pre></td></tr></table></figure></p>
<p>也可以选择其他的模型。之后开启 <em>Rviz</em> 可视化工具：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">rosrun rviz rviz <span class="_">-d</span> `rospack find rbx1_nav`/sim.rviz</span></div></pre></td></tr></table></figure></p>
<p>一定要注意反单引号的使用，否则系统会报错。（ESC下面那个键）<br>此时就可以看到机器人模型：<img src="/2017/05/24/ros-simulation/rviz.jpg" alt=""><br>参数 <em>sim.rviz</em> 是 <em>rviz</em> 的配置文件。机器人目前处于静止状态，我们发布一个命令，让它动起来，命令冒号后的空格必须有：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rostopic</span> pub -r <span class="number">10</span> <span class="regexp">/cmd_vel geometry_msgs/</span>Twist <span class="string">'&#123;linear: &#123;x: 0.2, y: 0, z: 0&#125;, angular: &#123;x: 0, y: 0, z: 0.5&#125;&#125;'</span></div></pre></td></tr></table></figure></p>
<p>效果：<img src="/2017/05/24/ros-simulation/rviz-move.jpg" alt=""><br>需要停止机器人，可以在同一个窗口按下 <em>ctrl-c</em> 或者发布一个空的指令：<br>　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rostopic</span> pub -<span class="number">1</span> <span class="regexp">/cmd_vel geometry_msgs/</span>Twist <span class="string">'&#123;&#125;'</span></div></pre></td></tr></table></figure></p>
<h1 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h1><p><em>fake_pi_robot.launch</em> 文件是机器人的模型描述文件，功能是生成一个pi类型的机器人模型；<br>　<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"/use_sim_time"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line"> </div><div class="line">    <span class="comment">&lt;!-- Load the URDF/Xacro model of our robot --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">"urdf_file"</span> <span class="attr">default</span>=<span class="string">"$(find xacro)/xacro.py '$(find rbx1_description)/urdf/pi_robot.xacro'"</span> /&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"robot_description"</span> <span class="attr">command</span>=<span class="string">"$(arg urdf_file)"</span> /&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"arbotix"</span> <span class="attr">pkg</span>=<span class="string">"arbotix_python"</span> <span class="attr">type</span>=<span class="string">"arbotix_driver"</span> <span class="attr">output</span>=<span class="string">"screen"</span> <span class="attr">clear_params</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find rbx1_bringup)/config/fake_pi_arbotix.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> /&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"sim"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">node</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"move_fake_pi_arm_start"</span> <span class="attr">pkg</span>=<span class="string">"rbx1_bringup"</span> <span class="attr">type</span>=<span class="string">"move_fake_pi_arm_start.py"</span> <span class="attr">output</span>=<span class="string">"screen"</span> /&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"robot_state_publisher"</span> <span class="attr">pkg</span>=<span class="string">"robot_state_publisher"</span> <span class="attr">type</span>=<span class="string">"state_publisher"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"publish_frequency"</span> <span class="attr">type</span>=<span class="string">"double"</span> <span class="attr">value</span>=<span class="string">"20.0"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">node</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="comment">&lt;!-- Run a static transform between /base_link and /base_footprint needed for SLAM --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"tf"</span> <span class="attr">type</span>=<span class="string">"static_transform_publisher"</span> <span class="attr">name</span>=<span class="string">"base_footprint_broadcaster"</span> <span class="attr">args</span>=<span class="string">"0 0 0 0 0 0 /base_link /base_footprint 100"</span> /&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"> <span class="tag">&lt;/<span class="name">launch</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>大致过程先加载一个 <em>urdf</em>文件，这个文件用于描述机器人的样子，然后启动 <em>arbotix</em> 仿真，启动仿真节点，发布状态，最后是 <em>tf</em> 坐标变换。<em>sim.rviz</em>配置文件描述了 <em>rviz</em> 的配置，位于目录 <em>rbx1/rbx1_nav</em> 中，它的配置代码很长，大致描述的是一些显示配置，即 <em>rviz</em> 左侧那部分：<img src="/2017/05/24/ros-simulation/rviz-left.jpg" alt=""></p>
<p>速度发布命令一个是角速度，一个是线速度，参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials/UnderstandingTopics" target="_blank" rel="external">ROStopic</a>。<br>x y z 的方向遵循右手坐标系，机器人正前方为x轴，自地面向上为z轴，y轴垂直于其他两轴位于左方:</p>
<p><img src="/2017/05/24/ros-simulation/axis.jpg" alt=""><img src="/2017/05/24/ros-simulation/screw-rule.jpg" alt=""></p>
<p>机器人只能贴着地面运动，只能绕Z轴做旋转运动，不可能沿Z轴做直线运动；也不可能绕着x轴或者绕着y轴做旋转运动。机器人只能向前运动或向后运动，即x方向；做旋转运动可以绕z轴顺时针或者逆时针，逆时针为正方向。旋转方向遵循右手螺旋法则，逆时针为正，顺时针为负。</p>
<p><em>linear: {x: 0.2, y: 0, z: 0}</em>的意思就是机器人沿着x轴正方向，即向前运动，速度为 <em>0.2m/s</em> ;<br><em>angular: {x: 0, y: 0, z: 0.5}</em> 的意思是机器人沿着z轴做逆时针旋转的角速度为 <em>0.5rad/s</em>;因此会得出以上机器人运动轨迹。<br>关于速度发布的语法遵循 <a href="http://wiki.ros.org/ROS/YAMLCommandLine" target="_blank" rel="external">YAML</a> 。<br>速度单位 <em>m/s</em>-米/秒<br>角速度单位 <em>rad/s</em>-弧度/秒</p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS Simulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu 下 hexo 安装与配置]]></title>
      <url>/2017/05/23/ubuntu-hexo/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有时候调试 <em>linux</em>，写代码都是在 <em>ubuntu</em> 环境下，随时需要记录一些调试的过程，这时候就需要在 <em>ubuntu</em> 下配置 <em>hexo</em> 环境，并撰写博客。<br><a id="more"></a></p>
<h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1> <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install git</span></div></pre></td></tr></table></figure>
<h1 id="生成ssh-key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h1>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> config --global user<span class="selector-class">.name</span> <span class="string">"your username"</span>  </div><div class="line"><span class="variable">$git</span> config --global user<span class="selector-class">.email</span> <span class="string">"your_email@youremail.com"</span></div><div class="line"><span class="variable">$ssh</span>-keygen -t rsa -C <span class="string">"youremail@email.com"</span></div></pre></td></tr></table></figure>
<p>如果自己使用多台电脑更新博客，可以使用多个 <em>SSH Key</em>,但这样做根本没必要，完全可以使用一个。拷贝之前电脑~/.ssh/中生成的id_rsa和id_rsa.pub到本电脑目录 <em>~/.ssh/</em> 中，并确保文件的权限，私钥 <em>id_rsa</em> 的权限是600，公钥 <em>id_rsa.pub</em> 权限是644。</p>
<h1 id="github验证机制"><a href="#github验证机制" class="headerlink" title="github验证机制"></a>github验证机制</h1><p>说到这里就多说一下github的验证机制。公钥和私钥是成对使用的，一般是使用 <em>RSA</em>算法生成 <em>id_rsa.pub</em> 和 <em>id_rsa</em>。公钥是可以暴露在网络上传输的，但私钥不可以，私钥只能放在本地。所以这两个文件的权限也不同。当使用时，客户端发出公钥登录的请求，服务器端返回一段随机字符，客户端收到该字符使用私钥对这段字符进行加密，并发送给服务器端，服务器端使用事先存储的公钥去解密这段字符，如果成功即表示客户端身份验证通过。</p>
<h1 id="安装nodejs"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>不建议使用 <em>apt-get</em> 命令安装，安装可能不成功<br>使用如下命令安装参考 <a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm-github</a>:<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span> &amp;&amp; (</div><div class="line">  git <span class="built_in">clone</span> https://github.com/creationix/nvm.git <span class="string">"<span class="variable">$NVM_DIR</span>"</span></div><div class="line">  <span class="built_in">cd</span> <span class="string">"<span class="variable">$NVM_DIR</span>"</span></div><div class="line">  git checkout `git describe --abbrev=0 --tags --match <span class="string">"v[0-9]*"</span> origin`</div><div class="line">) &amp;&amp; . <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span></div></pre></td></tr></table></figure></p>
<p>使nvm开机自启动，将如下内容添加到 <em>~/.bashrc</em> 中：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> <span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></div><div class="line">[ <span class="_">-s</span> <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; . <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span></div></pre></td></tr></table></figure></p>
<p>不要忘记重启 <em>terminal</em> 或者重新 <em>source</em> 一下 <em>~/.bashrc</em><br>执行以下命令：<br>   <figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$nvm</span> <span class="keyword">ls</span>-remote <span class="comment">//列出所有安装包的版本信息</span></div><div class="line"><span class="variable">$nvm</span> install stable <span class="comment">//安装最稳定版本</span></div><div class="line"><span class="variable">$nvm</span> <span class="keyword">use</span> node <span class="comment">//使用当前版本</span></div><div class="line"><span class="variable">$nvm</span> <span class="keyword">run</span> node --<span class="keyword">version</span> <span class="comment">//也可以使用该命令 使用当前版本</span></div><div class="line"><span class="variable">$nvm</span> alias default node <span class="comment">//设置默认版本</span></div></pre></td></tr></table></figure></p>
<p>如果需要更新则手动更新 <em>nvm</em>:<br>     <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(</div><div class="line"> <span class="built_in">cd</span> <span class="string">"<span class="variable">$NVM_DIR</span>"</span></div><div class="line"> git fetch origin</div><div class="line"> git checkout `git describe --abbrev=0 --tags --match <span class="string">"v[0-9]*"</span> origin`</div><div class="line">) &amp;&amp; . <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span></div></pre></td></tr></table></figure></p>
<h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> install  hexo-cli -g</span></div><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> install hexo-server -g</span></div><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> install hexo-deployer-git -g</span></div><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> install hexo-util -g</span></div></pre></td></tr></table></figure>
<p>接下来建立博客目录，进入给目录下：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> init <span class="regexp">//</span>初始化 下载必要的建站文件</div><div class="line"><span class="variable">$npm</span> install <span class="regexp">//</span>安装依赖项</div></pre></td></tr></table></figure></p>
<h1 id="安装remarkable"><a href="#安装remarkable" class="headerlink" title="安装remarkable"></a>安装remarkable</h1><p>linux 下有很多好用的 <em>markdown</em> 博客撰写工具，诸如<a href="https://atom.io/" target="_blank" rel="external">Atom</a>、<a href="http://pad.haroopress.com/" target="_blank" rel="external">Haroopad</a>、<a href="https://github.com/voldyman/MarkMyWords" target="_blank" rel="external">Mark My Words</a>、<a href="http://remarkableapp.github.io/linux/download.html" target="_blank" rel="external">remarkable</a> 等等。其中 <a href="http://remarkableapp.github.io/linux/download.html" target="_blank" rel="external">remarkable</a> 最为流行。 <a href="http://remarkableapp.github.io/linux/download.html" target="_blank" rel="external">remarkable</a> 是linux下一款免费的 <em>markdown</em> 编辑器。关于它的介绍这里不多说，可自行查阅。<br>安装之前先安装一些依赖：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$sudo</span> apt-<span class="meta">get</span> install   python3-<span class="keyword">markdown </span>  python3-<span class="keyword">bs4 </span> wkhtmltopdf</div></pre></td></tr></table></figure></p>
<p>下载<a href="http://remarkableapp.github.io/linux/download.html" target="_blank" rel="external">remarkable-deb</a> 目前的版本为 1.87：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$wget</span> http:<span class="regexp">//</span>remarkableapp.github.io<span class="regexp">/files/</span>remarkable_1.<span class="number">87</span>_all.deb</div></pre></td></tr></table></figure></p>
<p>安装：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> dpkg -<span class="selector-tag">i</span> remarkable_1.<span class="number">87</span>_all<span class="selector-class">.deb</span></div><div class="line"><span class="variable">$sudo</span> apt-get install -f 补足有可能的缺失依赖项</div></pre></td></tr></table></figure></p>
<p>接下来就可以开始博客的撰写了，关于博客的撰写与发布请参考我站内关于 <em>hexo</em> 的文章。</p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[贝叶斯滤波库在树莓派上的移植]]></title>
      <url>/2017/05/23/ros-navigation-compile/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>计划在树莓派上仿真一下<a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 的导航功能，需要安装 <a href="https://github.com/ros-planning/navigation" target="_blank" rel="external">navigation</a>包，结果编译 <a href="https://github.com/ros-planning/navigation" target="_blank" rel="external">navigation</a> 包时提示错误：<br>　　<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">– <span class="keyword">package</span> ‘orocos-bfl’ not found </div><div class="line">CMake Error at <span class="regexp">/usr/</span>share<span class="regexp">/cmake-2.8/</span>Modules/FindPkgConfig.<span class="string">cmake:</span><span class="number">283</span> (message): </div><div class="line">A required <span class="keyword">package</span> was not found </div><div class="line">Call Stack (most recent call first): </div><div class="line"><span class="regexp">/usr/</span>share<span class="regexp">/cmake-2.8/</span>Modules/FindPkgConfig.<span class="string">cmake:</span><span class="number">337</span> (_pkg_check_modules_internal) </div><div class="line">robot_pose_ekf/CMakeLists.<span class="string">txt:</span><span class="number">6</span> (pkg_check_modules)</div></pre></td></tr></table></figure></p>
<p>于是填了后面的坑…<br><a id="more"></a></p>
<h1 id="贝叶斯滤波库"><a href="#贝叶斯滤波库" class="headerlink" title="贝叶斯滤波库"></a>贝叶斯滤波库</h1><p> <em>package ‘orocos-bfl’</em>是贝叶斯滤波库，参考 <a href="http://www.orocos.org/bfl" target="_blank" rel="external">BFL</a>。贝叶斯滤波库能够为动态贝叶斯网络的推理提供一个应用程序独立框架，以及递归信息处理和基于贝叶斯规则的估计算法,如卡尔曼滤波器,粒子过滤器、蒙特卡洛方法等，多应用于机器人的导航中。</p>
<h2 id="移植"><a href="#移植" class="headerlink" title="移植"></a>移植</h2><p>首先下载源码：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$wget</span> http:<span class="regexp">//</span>people.mech.kuleuven.be<span class="regexp">/~tdelaet/</span>bfl_tar<span class="regexp">/orocos-bfl-0.6.1-src.tar.bz2</span></div></pre></td></tr></table></figure></p>
<p>解压并建立 <em>build</em> 目录：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">tar jxvf orocos-bfl-0.6.1-src.tar.bz2</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span>  orocos-bfl-0.6.1-src</span></div><div class="line"><span class="meta">$</span><span class="bash">mkdir build</span></div></pre></td></tr></table></figure></p>
<p>编译：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$cmake</span> .</span></div></pre></td></tr></table></figure></p>
<p>提示错误：<img src="/2017/05/23/ros-navigation-compile/ltierror.jpg" alt=""><br>缺少 <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 库, <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 是一个基于 <em>C++</em> 的面向对象的图像处理和计算机视觉库。</p>
<h3 id="lti-lib库的移植"><a href="#LTI-Lib库的移植" class="headerlink" title="LTI-Lib库的移植"></a>LTI-Lib库的移植</h3><p>方法参考 <a href="https://people.mech.kuleuven.be/~tdelaet/bfl_doc/installation_guide/node5.html" target="_blank" rel="external">LTI-Install-Guide</a>，树莓派貌似只能源码安装。<br>安装之前先安装 <em>libxt-dev</em> 和 <em>libboost</em><br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install libxt-dev</span></div><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install libboost-dev</span></div></pre></td></tr></table></figure></p>
<p>当然也可以源码安装<em>libxt-dev</em>：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$https</span>:<span class="comment">//launchpad.net/ubuntu/+archive/primary/+files/libxt_1.1.4.orig.tar.gz</span></div><div class="line"><span class="variable">$tar</span> zxvf libxt_1.<span class="number">1.4</span><span class="selector-class">.orig</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line"><span class="variable">$cd</span> libxt_1.<span class="number">1.4</span><span class="selector-class">.orig</span></div><div class="line"><span class="variable">$make</span>  </div><div class="line"><span class="variable">$sudo</span> make install</div></pre></td></tr></table></figure></p>
<p>源码安装 <a href="https://sourceforge.net/projects/boost/files/" target="_blank" rel="external">libboost-dev</a> 参考 <a href="https://people.mech.kuleuven.be/~tdelaet/bfl_doc/installation_guide/node7.html" target="_blank" rel="external">Boost-Install</a><br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">tar -xzvf boost_1_34_0.tar.gz</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> boost_1_34_o</span></div><div class="line"><span class="meta">$</span><span class="bash">./configure</span></div><div class="line"><span class="meta">$</span><span class="bash">make </span></div><div class="line"><span class="meta">$</span><span class="bash">sudo make install</span></div></pre></td></tr></table></figure></p>
<p>源码安装<a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a><br>下载源码<a href="https://sourceforge.net/projects/ltilib/files/LTI-Lib-1/1.9.16/" target="_blank" rel="external">LTI-Source-Code</a>,并解压进入到 <em>linux</em> 目录：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$tar</span> zxvf <span class="number">100410</span>_ltilib-<span class="number">1.9</span>.<span class="number">16</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line"><span class="variable">$tar</span> zxvf <span class="number">100410</span>_ltilib-extras-<span class="number">1.9</span>.<span class="number">16</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line"><span class="variable">$cd</span> ltilib/linux</div></pre></td></tr></table></figure></p>
<p>生成Makefile：</p>
<p>　　<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$make -f Makefile.cvs</div><div class="line">$<span class="string">./configure</span> <span class="params">--disable-debug</span> <span class="params">--without-gtk</span> <span class="params">--disable-gtk</span> <span class="params">--prefix=</span>~<span class="string">/install</span></div></pre></td></tr></table></figure></p>
<p>编译安装,默认的安装目录是/usr/local/:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$make</span></span></div><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> make install</span></div></pre></td></tr></table></figure></p>
<h2 id="再次回到bfl的编译"><a href="#再次回到BFL的编译" class="headerlink" title="再次回到BFL的编译"></a>再次回到BFL的编译</h2><p>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">tar -xjvf orocos-bfl-0.6.1-src.tar.bz2<span class="comment">#解压</span></span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> orocos-ocl-1.8.0</span></div><div class="line"><span class="meta">$</span><span class="bash">mkdir build</span></div><div class="line"><span class="meta">$</span><span class="bash">cmake .</span></div><div class="line"><span class="meta">$</span><span class="bash">make</span></div><div class="line"><span class="meta">$</span><span class="bash">make check //测试编译结果</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo make install //安装</span></div></pre></td></tr></table></figure></p>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>编译过程中遇到很多问题，尤其是 <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 库的编译，该库貌似最近没有更新，而且不适应新的 <em>G++</em>编译器。</p>
<h2 id="aclocal-not-found"><a href="#aclocal-not-found" class="headerlink" title="aclocal: not found"></a>aclocal: not found</h2><p>编译 <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 时在步骤 <em>make</em> 提示错误：<br>　　<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$<span class="built_in">make</span> -f Makefile.cvs</div><div class="line"> Calling aclocal...</div><div class="line"> /bin/sh: <span class="number">2</span>: aclocal: <span class="keyword">not</span> found</div><div class="line"> <span class="built_in">make</span>: *** [aclocal.m4] <span class="built_in">Error</span> <span class="number">127</span></div></pre></td></tr></table></figure></p>
<p>需要安装 <em>autoconf</em><br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install autoconf</span></div></pre></td></tr></table></figure></p>
<h2 id="cannot-run-binbash-configsub"><a href="#cannot-run-bin-bash-config-sub" class="headerlink" title="cannot run /bin/bash ./config.sub"></a>cannot run /bin/bash ./config.sub</h2><p>在 <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 的编译配置步骤./configure出现错误：<br>　　<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cannot <span class="built_in">run</span> /bin/bash ./<span class="built_in">config</span>.sub</div></pre></td></tr></table></figure></p>
<p>确定已安装libtool libtool-ltdl libtool-ltdl-devel<br>如果没安装，使用以下命令安装：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get  install  libtool</span></div><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get  install  libltdl-dev</span></div></pre></td></tr></table></figure></p>
<p>如果都已安装应该是链接出了问题。<br>　　<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ls -al <span class="built_in">config</span>/* 查看链接路径</div><div class="line">$<span class="built_in">find</span> / -name <span class="built_in">config</span>.<span class="built_in">sub</span> 或者locate <span class="built_in">config</span>.<span class="built_in">sub</span> 查找<span class="built_in">config</span>.<span class="built_in">sub</span>的路径</div><div class="line">$ln -s -f /正确路径/<span class="built_in">config</span>.<span class="built_in">sub</span> <span class="built_in">config</span>.<span class="built_in">sub</span></div></pre></td></tr></table></figure></p>
<p>例如我的:<br>　　<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ln -s -f /usr/share/libtool/<span class="built_in">config</span>/<span class="built_in">config</span>.<span class="built_in">sub</span> <span class="built_in">config</span>.<span class="built_in">sub</span></div></pre></td></tr></table></figure></p>
<p>同样的道理：config.guess路径不对也这样改过来,或者直接拷贝系统下的文件：<br> <em>/usr/share/libtool/config/config.sub</em> 和 <em>config.guess </em>到LTI源码目录。</p>
<h2 id="configure-error-cannot-compile-a-simple-fortran-program"><a href="#configure-error-cannot-compile-a-simple-Fortran-program" class="headerlink" title="configure: error: cannot compile a simple Fortran program"></a>configure: error: cannot compile a simple Fortran program</h2><p> 配置 <a href="http://ltilib.sourceforge.net/doc/homepage/index.shtml" target="_blank" rel="external">LTI-Lib</a> 时出现错误：<br>　　<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">./configure</div><div class="line">checking <span class="keyword">for</span> Fortran <span class="number">77</span> libraries <span class="keyword">of</span> ...</div><div class="line">checking <span class="keyword">for</span> gcc... gcc</div><div class="line">checking whether we are <span class="keyword">using</span> the GNU C compiler... yes</div><div class="line">checking whether gcc accepts -g... yes</div><div class="line">checking <span class="keyword">for</span> gcc <span class="keyword">option</span> <span class="keyword">to</span> accept ISO C89... none needed</div><div class="line">checking <span class="keyword">for</span> dummy main <span class="keyword">to</span> link <span class="keyword">with</span> Fortran <span class="number">77</span> libraries... none</div><div class="line">checking <span class="keyword">for</span> Fortran <span class="number">77</span> name-mangling scheme... configure: <span class="keyword">error</span>: <span class="keyword">in</span> `/home/steven/workspace/ros/ ltilib/linux<span class="comment">':</span></div><div class="line">configure: <span class="keyword">error</span>: cannot compile a simple Fortran program</div><div class="line">See `config.log<span class="comment">' for more details</span></div></pre></td></tr></table></figure></p>
<p>解决：<br>　　<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sudo apt-<span class="built_in">get</span> install f2c gfortran libblas-<span class="built_in">dev</span> liblapack-<span class="built_in">dev</span> libpcre3-<span class="built_in">dev</span> libreadline-<span class="built_in">dev</span></div></pre></td></tr></table></figure></p>
<h2 id="setparameters-was-not-declared-in-this-scope"><a href="#setParameters’-was-not-declared-in-this-scope" class="headerlink" title="setParameters’ was not declared in this scope"></a>setParameters’ was not declared in this scope</h2><p>　　<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">make</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span> In instantiation of ‘<span class="symbol">lti:</span><span class="symbol">:cyclicTridiagonalEquationSystem&lt;T&gt;</span><span class="symbol">:</span><span class="symbol">:cyclicTridiagonalEquationSystem</span>(const <span class="symbol">lti:</span><span class="symbol">:cyclicTridiagonalEquationSystem&lt;T&gt;</span><span class="symbol">:</span><span class="symbol">:parameters&amp;</span>) [with T = double]’:</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem.<span class="symbol">cpp:</span><span class="number">44</span><span class="symbol">:</span><span class="number">18</span>:   required from here</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span><span class="number">40</span><span class="symbol">:</span><span class="number">28</span>: <span class="symbol">error:</span> ‘setParameters’ was <span class="keyword">not</span> declared <span class="keyword">in</span> this scope, <span class="keyword">and</span> no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]</div><div class="line">    setParameters(theParams);</div><div class="line">                           ^</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span><span class="number">40</span><span class="symbol">:</span><span class="number">28</span>: <span class="symbol">note:</span> declarations <span class="keyword">in</span> dependent  base ‘<span class="symbol">lti:</span><span class="symbol">:functor</span>’ are <span class="keyword">not</span> found by unqualified lookup</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span><span class="number">40</span><span class="symbol">:</span><span class="number">28</span>: <span class="symbol">note:</span> <span class="keyword">use</span> ‘this-&gt;setParameters’ instead</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span> In instantiation of ‘<span class="symbol">lti:</span><span class="symbol">:cyclicTridiagonalEquationSystem&lt;T&gt;</span><span class="symbol">:</span><span class="symbol">:cyclicTridiagonalEquationSystem</span>(<span class="symbol">lti:</span><span class="symbol">:vector&lt;T&gt;</span>, <span class="symbol">lti:</span><span class="symbol">:vector&lt;T&gt;</span>, <span class="symbol">lti:</span><span class="symbol">:vector&lt;T&gt;</span>, const T&amp;, const T&amp;) [with T = double]’:</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem.<span class="symbol">cpp:</span><span class="number">44</span><span class="symbol">:</span><span class="number">18</span>:   required from here</div><div class="line">../src/math/ltiCyclicTridiagonalEquationSystem_template.<span class="symbol">h:</span><span class="number">54</span><span class="symbol">:</span><span class="number">20</span>: <span class="symbol">error:</span> ‘setParameters’ was <span class="keyword">not</span> declared <span class="keyword">in</span> this scope, <span class="keyword">and</span> no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]</div></pre></td></tr></table></figure></p>
<p>经确认 <em>setParameters</em> 是有定义的，在文件 <em>src/basics/ltiFunctor.h</em> 中。突然想到是不是编译器的版本问题，果断降级编译器，考虑将GCC降级 目前系统的gcc版本为4.8将其降级为4.6：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install gcc-4.6 g++-4.6</span></div></pre></td></tr></table></figure></p>
<p>如果下载deb文件，则安装使用命令：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> dpkg –<span class="selector-tag">i</span> *<span class="selector-class">.deb</span></div><div class="line"><span class="variable">$sudo</span> apt-get -f install <span class="comment">//然后修改系统依赖</span></div></pre></td></tr></table></figure></p>
<p>设置系统使用的默认 GCC<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ln</span> -f -s <span class="regexp">/usr/</span>bin<span class="regexp">/gcc-4.6 /u</span>sr<span class="regexp">/bin/g</span>cc</div><div class="line"><span class="variable">$ln</span> -f -s <span class="regexp">/usr/</span>bin<span class="regexp">/gcc-ar-4.6 /u</span>sr<span class="regexp">/bin/g</span>cc-ar</div><div class="line"><span class="variable">$ln</span> -f -s <span class="regexp">/usr/</span>bin<span class="regexp">/gcc-nm-4.6 /u</span>sr<span class="regexp">/bin/g</span>cc-nm</div><div class="line"><span class="variable">$ln</span> -f -s <span class="regexp">/usr/</span>bin<span class="regexp">/gcc-ranlib-4.6 /u</span>sr<span class="regexp">/bin/g</span>cc-ranlib</div><div class="line"><span class="variable">$ln</span> -f -s <span class="regexp">/usr/</span>bin<span class="regexp">/g++-4.6 /u</span>sr<span class="regexp">/bin/g</span>++</div></pre></td></tr></table></figure></p>
<h2 id="linuxvideodevh-no-such-file-or-directory"><a href="#linux-videodev-h-No-such-file-or-directory" class="headerlink" title="linux/videodev.h: No such file or directory"></a>linux/videodev.h: No such file or directory</h2><p>make 后出现的错误：<br>　　<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">../src/io/ltiJPEGLibFunctor.cpp: In member function ‘bool lti::loadJPEG::<span class="keyword">load</span>(<span class="keyword">FILE</span>*, lti::image&amp;, bool&amp;)’:</div><div class="line">../src/io/ltiJPEGLibFunctor.cpp:<span class="number">309</span>:<span class="number">35</span>: <span class="keyword">warning</span>: <span class="keyword">variable</span> ‘rowCounter’ <span class="keyword">set</span> but <span class="keyword">not</span> used [-Wunused-but-<span class="keyword">set</span>-<span class="keyword">variable</span>]</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiLeutronFrameGrabber.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiLncFeatureFile.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiLoadImageList.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiLoadVectorImageList.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiLTIFunctor.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiMicroEnablePulnix.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiPanTiltUnit.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiPNGFunctor.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiPNGLibFunctor.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiQuickCam.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiRunLengthCodec.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiSonyEviD100P.cpp</div><div class="line">Compiling debug <span class="keyword">version</span> <span class="keyword">of</span> ../src/io/ltiToUCam.cpp</div><div class="line">../src/io/ltiToUCam.cpp:<span class="number">57</span>:<span class="number">28</span>: fatal <span class="keyword">error</span>: linux/videodev.h: <span class="keyword">No</span> such <span class="keyword">file</span> <span class="keyword">or</span> <span class="keyword">directory</span></div><div class="line">compilation terminated.</div><div class="line">make: *** [../obj/debug/ltiToUCam.o] <span class="keyword">Error</span> <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>新版内核中已经不再有 <em>videodev.h</em> 文件，而是用 <em>libv4l1-videodev.h</em> 代替。先查找系统中是否有该文件：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> find / -name videodev.h</span></div></pre></td></tr></table></figure></p>
<p>系统不存在此文件需要安装：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install libv4l-dev</span></div></pre></td></tr></table></figure></p>
<p>指向：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> ln -s <span class="regexp">/usr/i</span>nclude<span class="regexp">/libv4l1-videodev.h /u</span>sr<span class="regexp">/include/</span>linux<span class="regexp">/videodev.h</span></div></pre></td></tr></table></figure></p>
<h2 id="pwc-ioctlh-no-such-file-or-directory"><a href="#pwc-ioctl-h-No-such-file-or-directory" class="headerlink" title="pwc-ioctl.h: No such file or directory"></a>pwc-ioctl.h: No such file or directory</h2><p>lit库make 后的错误：<br>　　<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> ..<span class="regexp">/src/</span>io/ltiToUCam.<span class="string">cpp:</span><span class="number">58</span>:<span class="number">23</span>: fatal <span class="string">error:</span> pwc-ioctl.<span class="string">h:</span> No such file or directory</div><div class="line">compilation terminated.</div></pre></td></tr></table></figure></p>
<p>系统提示不存在文件 <a href="https://saillard.org/linux/pwc/" target="_blank" rel="external">pwc-ioctl.h</a> 这个文件应该是webcamera的驱动文件,下载地址: <a href="https://saillard.org/linux/pwc/files/pwc-10.0.11.tar.bz2" target="_blank" rel="external">https://saillard.org/linux/pwc/files/pwc-10.0.11.tar.bz2</a><br>下载完后，解压并找到 <em>pwc-ioctl.h</em> 文件，拷贝到 <em>lti</em> 源代码 的 <em>/src/io/</em> 目录下。</p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BayesianFiltering </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS多机通信]]></title>
      <url>/2017/05/22/ros-communication/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ROS移动平台使用的是树莓派3B，资源有限，只能运行一些低级任务，又不具备显示器，想实时的看到ROS的运行情况只能依靠远程登录的方式。可以让PC负责运行界面，树莓派负责底层的传感器数据采集，比如激光雷达的数据采集，通过网络传给PC，PC上运行界面程序，将树莓派传过来的数据进行处理，并生成地图。要实现类似功能，需要进行多个运行ROS的设备间的通讯。<br><a id="more"></a></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>首先保证 <em>raspberryPi</em> 与 <em>PC</em>在一个局域网内，并获取各自的 <em>IP</em> 地址。假设 <em>PC</em> 的 <em>IP</em>：192.168.2.102；<em>raspberryPi</em> 的 <em>IP</em>：192.168.2.105；之后查看各自的主机名,使用命令：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$hostname</span></span></div></pre></td></tr></table></figure></p>
<p>假设 <em>PC</em> 的主机名为： <em>steven-laptop</em>,而 <em>raspberryPi</em> 的主机名为 <em>raspberry</em>。我们需要将各自的主机名通知对方。在 <em>raspberryPi</em> 中打开 <em>/etc/hosts</em>文件加入 <em>PC</em> 的主机名以及IP地址：<br>　　<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.2</span><span class="selector-class">.102</span> <span class="selector-tag">steven-laptop</span></div></pre></td></tr></table></figure></p>
<p>同样在 <em>PC</em> 中告知 <em>raspberryPi</em> 的主机名和 <em>IP</em> 地址,修改<em>/etc/hosts</em>：<br>　　<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.2</span><span class="selector-class">.105</span> <span class="selector-tag">raspberry</span></div></pre></td></tr></table></figure></p>
<p>此时，可以使用:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$ping</span> 对方主机名</span></div></pre></td></tr></table></figure></p>
<p>进行连接测试。完成之后在 <em>PC</em> 中指定ROS通讯的主机名以及ROS服务器的地,让 <em>PC</em> 作为ROS服务器：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> ROS_HOSTNAME=steven-laptop</div><div class="line"><span class="keyword">export</span> ROS_MASTER_URI=http:<span class="comment">//steven-laptop:11311</span></div></pre></td></tr></table></figure></p>
<p>在 <em>raspberryPi</em> 中指定 <em>PC</em> 作为 <em>ROS Master</em>:<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> ROS_MASTER_URI=http:<span class="comment">//steven-laptop:11311</span></div></pre></td></tr></table></figure></p>
<h1 id="跨机运行talkerlistenner"><a href="#跨机运行talker-listenner" class="headerlink" title="跨机运行talker/listenner"></a>跨机运行talker/listenner</h1><p>做完以上配置，即可进行多机通信的测试。先在 <em>PC</em> 上开一个 <em>terminal</em> 运行 <em>roscore</em>:<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$roscore</span> &amp; <span class="regexp">//</span><span class="string">'&amp;'</span>指后台运行</div></pre></td></tr></table></figure></p>
<p>然后运行 <em>beginner_tutorials</em>(参考 <a href="http://wiki.ros.org/cn/ROS/Tutorials" target="_blank" rel="external">ROS tutorial</a>) 中的节点 <em>talker</em>;在  <em>raspberryPi</em> 中运行 <em>beginner_tutorials</em> 中的 <em>listenner</em> 节点。保证两个节点中发布的主题和订阅的主题名字一样。<br>此时可以在 <em>raspberryPi</em> 中收到 <em>PC</em> 传过来的信息：<br><img src="/2017/05/22/ros-communication/talker.jpg" alt=""></p>
<h1 id="跨机运行turtlesim"><a href="#跨机运行turtlesim" class="headerlink" title="跨机运行turtlesim"></a>跨机运行turtlesim</h1><p>在PC上运行：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscore</span> &amp; </span></div><div class="line"><span class="meta"><span class="meta-keyword">$rosrun</span> turtlesim turtlesim_node</span></div></pre></td></tr></table></figure></p>
<p>在 <em>raspberryPi</em> 上使用键盘进行控制：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$rosrun</span> turtlesim turtle_teleop_key</span></div></pre></td></tr></table></figure></p>
<p>效果图：<img src="/2017/05/22/ros-communication/turtle.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Communication </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何让Vim变的爱不释手]]></title>
      <url>/2017/05/18/vim/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><em>linux</em> 下有很多好用的 IDE，比如常见的 <a href="https://eclipse.org/" target="_blank" rel="external">Eclipse</a>、<a href="http://bluefish.openoffice.nl/index.html" target="_blank" rel="external">Bluefish</a>、<a href="https://netbeans.org/" target="_blank" rel="external">NetBeans</a> 等等，功能很多，有些功能我们不一定用得上,天天面对 <em>terminal</em> 敲命令的我们天生不喜欢鼠标。<em>linux</em> 下的文本编辑器使用最多的还是 <a href="http://www.vim.org/" target="_blank" rel="external">Vim</a> 。可不可以将 <a href="http://www.vim.org/" target="_blank" rel="external">Vim</a> 打造成一个好用的 IDE 来替代或者部分替代这些高大上的 IDE 呢? -程序猿天生喜欢折腾。话不多说先上图：<img src="/2017/05/18/vim/ycm.jpg" alt=""><br><a id="more"></a></p>
<h1 id="vim-插件管理"><a href="#vim-插件管理" class="headerlink" title="vim 插件管理"></a>vim 插件管理</h1><p>首先安装 <a href="https://github.com/vim/vim.git" target="_blank" rel="external">Vim</a>, 确保版本在 7.4 以上。可以源码安装 <a href="https://github.com/vim/vim.git" target="_blank" rel="external">Vim</a> 也可以自动安装：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install vim</span></div></pre></td></tr></table></figure></p>
<p>由于发行版的不同，这种方式安装的 <a href="https://github.com/vim/vim.git" target="_blank" rel="external">Vim</a> 版本不一定是最新的，如果版本低于 7.4 请采用源码安装。 <a href="https://github.com/vim/vim.git" target="_blank" rel="external">Vim</a> 的插件管理一般是通过 <a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="external">Vundle</a> 来实现。 安装 <a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="external">Vundle</a>:<br>　　<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/VundleVim/Vundle.<span class="keyword">vim</span>.git ~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></div></pre></td></tr></table></figure></p>
<p>完成后修改用户目录下的 <em>.vimrc</em> 文件，添加以下项：<br>　　<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">"-----------Vundle configuration--------------------</span></div><div class="line"><span class="keyword">set</span> nocompatible <span class="comment">"去掉vi一致性</span></div><div class="line"><span class="keyword">filetype</span> off  </div><div class="line"><span class="comment">"包含vundle路径</span></div><div class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></div><div class="line"><span class="keyword">call</span> vundle#begin()</div><div class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></div><div class="line">Plugin <span class="string">'xxx/xxx'</span> <span class="comment">"新插件</span></div><div class="line"><span class="keyword">call</span> vundle#end()</div><div class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></div></pre></td></tr></table></figure></p>
<p>当需要安装新的插件时，将插件的仓库名按格式填入到<em>.vimrc</em> 文件：<br>　　<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Plugin</span> <span class="string">'xxx/xxx'</span></div></pre></td></tr></table></figure></p>
<p>插件的安装格式为：<br>　　<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Plugin <span class="string">'repository'</span> <span class="comment">//在Github vim-scripts 用户下的仓库,只需要写出仓库名称</span></div><div class="line">Plugin <span class="string">'username/repository'</span> <span class="comment">//在Github其他用户下的仓库, 需要写出”用户名/仓库名”</span></div><div class="line">Plugin <span class="string">'git://github.com/something.git'</span> <span class="comment">//不在Github上的插件，需要写出git全路径</span></div></pre></td></tr></table></figure></p>
<p>启动 <em>Vim</em>,运行命令安装插件：</p>
<p>　　<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">：PluginInstall</div></pre></td></tr></table></figure></p>
<p>卸载插件时先在 <em>.vimrc</em> 中删除掉不用的插件行然后运行清除命令：<br>　　<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">：PluginClean</div></pre></td></tr></table></figure></p>
<p>参考 <a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="external">Vundle</a> 和 <a href="https://github.com/vim-scripts" target="_blank" rel="external">vim-scripts</a></p>
<h1 id="项目树"><a href="#项目树" class="headerlink" title="项目树"></a>项目树</h1><p><a href="https://github.com/scrooloose/nerdtree" target="_blank" rel="external">NerdTree</a> 是一个树形目录插件，方便查看项目中的各个文件。<br>安装：<br>　　<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Plugin</span> <span class="string">'scrooloose/nerdtree'</span></div></pre></td></tr></table></figure></p>
<p>完成后在 <em>.vimrc</em> 中进行必要的配置：<br>　<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">"---------NERDTree Configruation-----------------------------------</span></div><div class="line"><span class="keyword">let</span> NERDTreeShowBookmarks=<span class="number">1</span> <span class="comment">" 当打开 NERDTree 窗口时，自动显示 Bookmarks</span></div><div class="line"><span class="keyword">let</span> NERDTreeWinPos=<span class="string">'left'</span> <span class="comment">"目录树在左边显示</span></div><div class="line"><span class="keyword">let</span> NERDTreeWinSize=<span class="number">30</span> <span class="comment">"目录树的窗口宽度</span></div><div class="line"><span class="comment">"开启和关闭快捷键为F2 或者 直接输入命令:NERDTree</span></div><div class="line"><span class="keyword">map</span> <span class="symbol">&lt;F2&gt;</span> :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></div></pre></td></tr></table></figure></p>
<p>效果：<br><img src="/2017/05/18/vim/tree.jpg" alt=""></p>
<h1 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h1><p><a href="https://github.com/Lokaltog/vim-powerline" target="_blank" rel="external">Vim-Powerline</a> <em>vim</em> 状态栏的显示，可以显示文件名、行列数、编码方式等。<br>安装：<br>　　<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Plugin</span> <span class="string">'Lokaltog/vim-powerline'</span></div></pre></td></tr></table></figure></p>
<p>现在新的仓库已迁移到 <a href="https://github.com/powerline/powerline" target="_blank" rel="external">powerline</a>。<br>效果：<br><img src="/2017/05/18/vim/powerline.jpg" alt=""></p>
<h1 id="括号自动补全"><a href="#括号自动补全" class="headerlink" title="括号自动补全"></a>括号自动补全</h1><p><a href="https://github.com/jiangmiao/auto-pairs" target="_blank" rel="external">auto-pair</a> 插件可以自动补全代码中的括号。安装：<br>　　<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Plugin</span> <span class="string">'jiangmiao/auto-pairs'</span></div></pre></td></tr></table></figure></p>
<h1 id="代码自动补全"><a href="#代码自动补全" class="headerlink" title="代码自动补全"></a>代码自动补全</h1><p>代码自动补全是各种IDE的必备功能，这里强烈推荐<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a>。它基于 <a href="https://zh.wikipedia.org/wiki/Clang" target="_blank" rel="external">clang</a> 能够为 <em>C/C++</em> 代码提供代码提示，也支持 <em>python C#</em>。<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a> 的安装正如传说中一样，非常麻烦，但使用起来非常爽。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>源码下载：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> clone --recursive https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Valloric/</span>YouCompleteMe.git ~<span class="regexp">/.vim/</span>bundle<span class="regexp">/YouCompleteMe</span></div></pre></td></tr></table></figure></p>
<p>安装 <a href="https://clang.llvm.org/get_started.html" target="_blank" rel="external">clang</a>：<br>　　<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install clang</span></div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a> 要求 <a href="https://clang.llvm.org/get_started.html" target="_blank" rel="external">clang</a> 最低版本为 3.9，如果不是可以在 <a href="http://releases.llvm.org/download.html" target="_blank" rel="external">这里</a> 下载。如果 <em>Ubuntu</em> 为32bits则需要下载源码手动编译。<br>安装 <em>python-dev</em>:<br>　　<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sudo apt-<span class="built_in">get</span> install python-<span class="built_in">dev</span> python3-<span class="built_in">dev</span></div></pre></td></tr></table></figure></p>
<p>安装 <em>Cmake</em>:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install cmake</span></div></pre></td></tr></table></figure></p>
<p>源码编译：<br>　　<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$<span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></div><div class="line">$<span class="string">./install.py</span> <span class="params">--clang-completer</span> <span class="params">--system-libclang</span></div></pre></td></tr></table></figure></p>
<p>–system-libclang是指使用系统的<em>libclang</em>。新版 <em>YouCompleteMe</em> 编译时不再需要 <em>make ycm_support_libs</em>。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>拷贝系统配置到用户目录下：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cp</span> ~<span class="regexp">/.vim/</span>bundle<span class="regexp">/YouCompleteMe/</span>third_party<span class="regexp">/ycmd/</span>cpp<span class="regexp">/ycm/</span>.ycm_extra_conf.py  ~<span class="regexp">/</span></div></pre></td></tr></table></figure></p>
<p><em>.vimrc</em>中的配置：<br>　　<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">"----------YouCompleteMe configuration---</span></div><div class="line"><span class="keyword">set</span> runtimepath+=~/.<span class="keyword">vim</span>/bundle/YouCompleteMe <span class="comment">"使用插件</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_global_ycm_extra_conf</span> = <span class="string">'~/.ycm_extra_conf.py'</span> <span class="comment">"指定全局配置文件路径</span></div><div class="line"><span class="keyword">set</span> completeopt=longest,<span class="keyword">menu</span>    <span class="comment">"让Vim的补全菜单行为与一般IDE一致</span></div><div class="line"><span class="keyword">autocmd</span> InsertLeave * <span class="keyword">if</span> <span class="built_in">pumvisible</span>() == <span class="number">0</span>|<span class="keyword">pclose</span>|<span class="keyword">endif</span> <span class="comment">"离开插入模式后自动关闭预览窗口</span></div><div class="line"><span class="comment">"回车即选中当前项</span></div><div class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;CR&gt;</span>       <span class="built_in">pumvisible</span>() ? <span class="string">"\&lt;C-y&gt;"</span> : <span class="string">"\&lt;CR&gt;"</span></div><div class="line"><span class="comment">"上下左右键的行为</span></div><div class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;Down&gt;</span>     <span class="built_in">pumvisible</span>() ? <span class="string">"\&lt;C-n&gt;"</span> : <span class="string">"\&lt;Down&gt;"</span></div><div class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;Up&gt;</span>       <span class="built_in">pumvisible</span>() ? <span class="string">"\&lt;C-p&gt;"</span> : <span class="string">"\&lt;Up&gt;"</span></div><div class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;PageDown&gt;</span> <span class="built_in">pumvisible</span>() ? <span class="string">"\&lt;PageDown&gt;\&lt;C-p&gt;\&lt;C-n&gt;"</span>:</div><div class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;PageUp&gt;</span>   <span class="built_in">pumvisible</span>() ? <span class="string">"\&lt;PageUp&gt;\&lt;C-p&gt;\&lt;C-n&gt;"</span> : <span class="string">"\&lt;PageUp&gt;"</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_key_list_select_completion</span> = [<span class="string">'&lt;Down&gt;'</span>]</div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_key_list_previous_completion</span> = [<span class="string">'&lt;Up&gt;'</span>]</div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_confirm_extra_conf</span>=<span class="number">0</span> <span class="comment">"关闭加载.ycm_extra_conf.py提示</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_collect_identifiers_from_tags_files</span>=<span class="number">1</span> <span class="comment">" 开启 YCM 基于标签引擎</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_min_num_of_chars_for_completion</span>=<span class="number">2</span> <span class="comment">" 从第2个键入字符就开始罗列匹配项</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_cache_omnifunc</span>=<span class="number">0</span>  <span class="comment">" 禁止缓存匹配项,每次都重新生成匹配项</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_seed_identifiers_with_syntax</span>=<span class="number">1</span>    <span class="comment">" 语法关键字补全</span></div><div class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;F5&gt;</span> :YcmForceCompileAndDiagnostics<span class="symbol">&lt;CR&gt;</span><span class="comment">"force recomile with syntastic</span></div><div class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="symbol">&lt;leader&gt;</span> <span class="symbol">&lt;C-x&gt;</span><span class="symbol">&lt;C-o&gt;</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_complete_in_comments</span> = <span class="number">1</span> <span class="comment">"在注释输入中也能补全</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_complete_in_strings</span> = <span class="number">1</span> <span class="comment">"在字符串输入中也能补全</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_collect_identifiers_from_comments_and_strings</span> = <span class="number">1</span> <span class="comment">"注释和字符串中的文字也会被收入补全</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:clang_user_options</span>=<span class="string">'|| exit 0'</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_goto_buffer_command</span> = <span class="string">'horizontal-split'</span> <span class="comment">"跳转到定义处，分屏打开</span></div><div class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>jd :YcmCompleter GoToDefinitionElseDeclaration<span class="symbol">&lt;CR&gt;</span> <span class="comment">" 跳转到定义处</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_error_symbol</span> = <span class="string">'&gt;&gt;'</span> <span class="comment">"错误提示符</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ycm_warning_symbol</span> = <span class="string">'&gt;*'</span> <span class="comment">"警告提示符</span></div></pre></td></tr></table></figure></p>
<h2 id="32位系统安装"><a href="#32位系统安装" class="headerlink" title="32位系统安装"></a>32位系统安装</h2><p>由于我使用的是ubuntu14.04 32bit系统，所以有很多软件需要手动编译，在这里将遇到的问题悉数总结一下，有和我同样配置的小伙伴可以参考。32位系统没有合适的 <em>clang</em> 和 <em>vim</em>发行包，需要手动编译安装。</p>
<h3 id="cmake-安装"><a href="#Cmake-安装" class="headerlink" title="Cmake 安装"></a>Cmake 安装</h3><p>使用sudo apt-get install cmake 默认安装的 <a href="https://cmake.org/" target="_blank" rel="external">Cmake</a> 版本为2.8.12.2。当使用 <a href="https://cmake.org/" target="_blank" rel="external">Cmake</a> 编译LLVM时提示 <a href="https://cmake.org/" target="_blank" rel="external">Cmake</a> 版本太低，要求至少为3.4.3以上 因此需要升级<a href="https://cmake.org/" target="_blank" rel="external">Cmake</a>。<br>下载源码：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$wget</span> https:<span class="regexp">//</span>cmake.org<span class="regexp">/files/</span>v3.<span class="number">4</span><span class="regexp">/cmake-3.4.3.tar.gz</span></div></pre></td></tr></table></figure></p>
<p>编译安装：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">./configure</span></div><div class="line"><span class="meta">$</span><span class="bash">make</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo make install</span></div></pre></td></tr></table></figure></p>
<h3 id="clang-编译安装"><a href="#Clang-编译安装" class="headerlink" title="Clang 编译安装"></a>Clang 编译安装</h3><p>下载LLVM源代码并放到指定目录:<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$wget</span> http:<span class="comment">//llvm.org/releases/3.9.0/llvm-3.9.0.src.tar.xz</span></div><div class="line"><span class="variable">$tar</span> xf llvm-<span class="number">3.9</span>.<span class="number">0</span><span class="selector-class">.src</span><span class="selector-class">.tar</span><span class="selector-class">.xz</span></div><div class="line"><span class="variable">$mv</span> llvm-<span class="number">3.9</span>.<span class="number">0</span><span class="selector-class">.src</span>  llvm</div></pre></td></tr></table></figure></p>
<p>下载clang的源码并放到指定目录：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cd</span> llvm/tools</div><div class="line"><span class="variable">$wget</span> http:<span class="comment">//llvm.org/releases/3.9.0/cfe-3.9.0.src.tar.xz</span></div><div class="line"><span class="variable">$tar</span> xf cfe-<span class="number">3.9</span>.<span class="number">0</span><span class="selector-class">.src</span><span class="selector-class">.tar</span><span class="selector-class">.xz</span></div><div class="line"><span class="variable">$mv</span> cfe-<span class="number">3.9</span>.<span class="number">0</span><span class="selector-class">.src</span> clang</div></pre></td></tr></table></figure></p>
<p>下载clang-tools-extra源码并放到指定目录：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cd</span> llvm/tools/clang/tools</div><div class="line"><span class="variable">$wget</span> http:<span class="comment">//llvm.org/releases/3.9.0/clang-tools-extra-3.9.0.src.tar.xz</span></div><div class="line"><span class="variable">$tar</span> xf clang-tools-extra-<span class="number">3.9</span>.<span class="number">0</span><span class="selector-class">.src</span><span class="selector-class">.tar</span><span class="selector-class">.xz</span></div><div class="line"><span class="variable">$mv</span> clang-tools-extra-<span class="number">3.9</span>.<span class="number">0</span><span class="selector-class">.src</span>  extra</div></pre></td></tr></table></figure></p>
<p>下载compiler-rt源码并放到指定目录：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cd</span> llvm/projects</div><div class="line"><span class="variable">$wget</span> http:<span class="comment">//llvm.org/releases/3.9.0/compiler-rt-3.9.0.src.tar.xz</span></div><div class="line"><span class="variable">$tar</span> xf compiler-rt-<span class="number">3.9</span>.<span class="number">0</span><span class="selector-class">.src</span><span class="selector-class">.tar</span><span class="selector-class">.xz</span></div><div class="line"><span class="variable">$mv</span> compiler-rt-<span class="number">3.9</span>.<span class="number">0</span><span class="selector-class">.src</span> compiler-rt</div></pre></td></tr></table></figure></p>
<p>配置参考 <a href="http://llvm.org/docs/GettingStarted.html#local-llvm-configuration" target="_blank" rel="external">llvm官网</a>。<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cmake</span> –G “Unix Makefiles” <span class="regexp">/home/</span>steven<span class="regexp">/software/</span>llvm –DCMAKE_BUILD_TYPE=RELEASE –DLLVM_TARGETS_TO_BUILD=X86 –DLLVM_OPTIMIZED_TABLEGEN=ON –DCMAKE_INSTALL_PREFIX=<span class="regexp">/usr/</span>local<span class="regexp">/llvm</span></div></pre></td></tr></table></figure></p>
<p>编译参考 <a href="http://llvm.org/docs/CMake.html" target="_blank" rel="external">llvm-cmake</a>：<br>3.7.0以后，不允许在源码树中进行构建，我们可以在llvm源码目录同级目录中创建一个目录build，然后使用绝对路径进行构建。<br>退出llvm目录，在llvm同级目录下建立build目录，进入到build目录</p>
<p>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ../..</span></div><div class="line"><span class="meta">$</span><span class="bash">mkdir build</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> build</span></div><div class="line"><span class="meta">$</span><span class="bash">cmake --build . //后面的 . 不能少,意思是当前目录</span></div></pre></td></tr></table></figure></p>
<p>安装：<br>　　<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$sudo</span> <span class="comment">cmake</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">build</span> <span class="string">.</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">target</span> <span class="comment">install</span></div></pre></td></tr></table></figure></p>
<p>也可以在安装时改变安装路径：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cmake</span> –DCMAKE_INSTALL_PREFIX=<span class="regexp">/tmp/</span>llvm –P cmake_install.cmake</div></pre></td></tr></table></figure></p>
<p>安装后看系统是否能找到，如果不能需要手动添加到环境变量。</p>
<h3 id="vim升级"><a href="#vim升级" class="headerlink" title="vim升级"></a>vim升级</h3><p>如果不升级 <em>Vim</em>,当调用 <em>YouCompleteMe</em> 时系统会提示错误：<br>　　<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">YouCompleteMe</span> <span class="selector-tag">unavailable</span>: <span class="selector-tag">requires</span> <span class="selector-tag">Vim</span> 7<span class="selector-class">.4</span><span class="selector-class">.143</span>+</div></pre></td></tr></table></figure></p>
<p>因此需要升级 <em>Vim</em>。先卸载原有版本：<br>　　<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> <span class="keyword">vim</span></div><div class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> <span class="keyword">vim</span>-<span class="keyword">runtime</span></div><div class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> <span class="keyword">vim</span> -tiny</div><div class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> <span class="keyword">vim</span>-common</div><div class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> <span class="keyword">vim</span>-doc</div><div class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> <span class="keyword">vim</span>-scripts</div></pre></td></tr></table></figure></p>
<p>首先安装一些依赖项：<br>　　<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> install libncurses5-<span class="built_in">dev</span> libgnome2-<span class="built_in">dev</span> libgnomeui-<span class="built_in">dev</span> libgtk2<span class="number">.0</span>-<span class="built_in">dev</span> libatk1<span class="number">.0</span>-<span class="built_in">dev</span> libbonoboui2-<span class="built_in">dev</span> libcairo2-<span class="built_in">dev</span> libx11-<span class="built_in">dev</span> libxpm-<span class="built_in">dev</span> libxt-<span class="built_in">dev</span> python-<span class="built_in">dev</span> python3-<span class="built_in">dev</span> ruby-<span class="built_in">dev</span> lua5<span class="number">.1</span> lua5<span class="number">.1</span>-<span class="built_in">dev</span></div></pre></td></tr></table></figure></p>
<p><em>–enable-pythoninterp</em> 和 <em>–enable-python3interp</em> 是 <em>vim</em> 对 <em>python</em> 版本的支持，安装 <em>YouCompleteMe</em> 必须要有这两个配置。<br>下载 <a href="http://mirror.metrocast.net/vim/unix/vim-8.0.tar.bz2" target="_blank" rel="external">vim-8.0</a>:<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$wget</span> http:<span class="regexp">//mi</span>rror.metrocast.net<span class="regexp">/vim/u</span>nix<span class="regexp">/vim-8.0.tar.bz2</span></div></pre></td></tr></table></figure></p>
<p>解压后配置：<br>　　<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">./configure</span> <span class="params">--with-features=huge</span> <span class="params">--enable-multibyte</span> <span class="params">--enable-rubyinterp</span> <span class="params">--enable-pythoninterp</span> <span class="params">--with-python-config-dir=/usr/lib/python2</span>.7/config-i386-linux-gnu  <span class="params">--enable-python3interp</span> <span class="params">--with-python3-config-dir=/usr/lib/python3</span>.4/config-3.4m-i386-linux-gnu <span class="params">--enable-perlinterp</span> <span class="params">--enable-luainterp</span> <span class="params">--enable-gui=gtk2</span> <span class="params">--enable-cscope</span> <span class="params">--prefix=/usr</span></div></pre></td></tr></table></figure></p>
<p>注意上面的 <em>–with-python3-config-dir</em> 一定要指定 <em>python3</em> 的完全路径，否则系统找不到。<br>编译安装：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$make</span> VIMRUNTIMEDIR=<span class="regexp">/usr/</span>share<span class="regexp">/vim/</span>vim80</div><div class="line"><span class="variable">$sudo</span> make install</div></pre></td></tr></table></figure></p>
<p>安装完后一定要测试一下依赖项是否完整，特别是对 <em>python3</em> 的依赖：<br>　　<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$<span class="keyword">vim</span> --<span class="keyword">version</span> | <span class="keyword">grep</span> <span class="keyword">python</span></div></pre></td></tr></table></figure></p>
<p>如果输出包含则表示安装完整：<br>　　<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">+cryptv          +linebreak       +<span class="keyword">python</span>/dyn      +vreplace</div><div class="line">+<span class="keyword">cscope</span>          +<span class="built_in">lispindent</span>      +<span class="keyword">python3</span>/dyn     +wildignore</div></pre></td></tr></table></figure></p>
<p>再回到以上YouCompleteMe的安装即可。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p><em>Vim</em> 还有很多有用的插件，需要慢慢研究，目前先装这些，对于常用的补全、跳转、快速查看目录等都可以实现，基本满足需求。</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux串口数据不连续问题]]></title>
      <url>/2017/05/17/linux-serial/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><em>linux</em> 下编写串口应用程序，无论是中断模式，还是 <em>select/poll</em> 模式，每次接收到的数据不一定是自己希望得到的数据。比如数据帧长度为40，有可能先接收到18个字节，接着接收到了12个字节，最后接收到了10个字节。不管怎么折腾，一帧数据总是不能一次接收完全。查阅相关资料，貌似是串口芯片缓存所致。串口芯片缓存满或着超时时间到都会触发读或写中断，这个说法是否真的如此，暂且不管，能不能用一种机制保证一次读到的是一帧数据呢？只有自己编写协议，先把数据分多次接收过来满足一个有效的帧长度之后，再进行处理。<br><a id="more"></a></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>关于 <em>linux</em> 串口编程有很多参考例子：<a href="http://www.faqs.org/docs/Linux-HOWTO/Serial-Programming-HOWTO.html" target="_blank" rel="external">serial-how-to</a> <a href="http://digilander.libero.it/robang/rubrica/serial.htm" target="_blank" rel="external">serial-Programming-Guide-For-POSIX-OS</a>。其他读者可自行 <a href="www.google.com">google</a>。为避免重复造轮子，本次采用 <a href="https://github.com/mwheels/libcssl" target="_blank" rel="external">libcssl</a>,也可以从 <a href="https://sourceforge.net/projects/cssl/" target="_blank" rel="external">sourceforge</a> 下载它是基于事件驱动的异步串口驱动库，用该库测试时，即出现上面的现象，一帧数据总是分多次接收。为了避免该现象，修改代码如下：<br>　　<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">static void callback(<span class="keyword">int</span> id,</div><div class="line">              uint8_t *buf,</div><div class="line">              <span class="keyword">int</span> <span class="keyword">length</span>)</div><div class="line"> &#123;</div><div class="line">     <span class="keyword">int</span> i;</div><div class="line">     <span class="regexp">//printf</span>(<span class="string">"length:%d\n"</span>,<span class="keyword">length</span>);</div><div class="line">     <span class="regexp">//printf</span>(<span class="string">"length:%d\n"</span>,<span class="keyword">length</span>);</div><div class="line">     <span class="regexp">//</span>如果数据帧不是一次接收到的</div><div class="line">     //则进行下面的处理，数据包的长度为FRAMELENGTH</div><div class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="keyword">length</span>;i++) &#123;</div><div class="line">         data[i+<span class="keyword">pos</span>] = buf[i];</div><div class="line">         <span class="regexp">//printf</span>(<span class="string">"0x%02x "</span>,buf[i]);</div><div class="line">     &#125;</div><div class="line">     //记录位置</div><div class="line">     <span class="keyword">pos</span> += <span class="keyword">length</span>;</div><div class="line">     <span class="regexp">//</span>收到既定的一帧</div><div class="line">     <span class="keyword">if</span>(<span class="keyword">pos</span> &gt;= FRAMELENGTH)&#123;</div><div class="line">         <span class="keyword">pos</span> = <span class="number">0</span>;</div><div class="line">         data_already = <span class="number">1</span>;</div><div class="line">     &#125;</div><div class="line">     //进行处理</div><div class="line">     <span class="keyword">if</span>(data_already == <span class="number">1</span>)&#123;<span class="regexp">//</span></div><div class="line"></div><div class="line">         <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;FRAMELENGTH;i++)</div><div class="line">             <span class="keyword">printf</span>(<span class="string">"0x%02x "</span>,data[i]);</div><div class="line">         memset(data,<span class="number">0</span>,FRAMELENGTH);</div><div class="line">         data_already = <span class="number">0</span> ;<span class="regexp">//</span>数据包准备好信号置零</div><div class="line">         <span class="keyword">printf</span>(<span class="string">"\n"</span>);</div><div class="line">     &#125;</div><div class="line"></div><div class="line"></div><div class="line">     //<span class="keyword">printf</span>(<span class="string">"\n"</span>);</div><div class="line">     <span class="regexp">//fflush</span>(stdout);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>在中断回调函数中，每次记录收到字节的个数 <em>pos</em> ，直到满足既定帧长度。测试结果可正常接收既定的一帧数据包，测试时可自行指定帧长度。<br>本次测试一帧数据长度为32字节：<br><img src="/2017/05/17/linux-serial/libcssl.jpg" alt=""><br>完整代码已 <em>push</em> 到 <a href="https://github.com/StevenShiChina/libcssl-cpp" target="_blank" rel="external">github</a>，欢迎下载测试交流。</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux串口 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS串口通信]]></title>
      <url>/2017/05/17/ros-serial/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>移植 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 的目的是控制机器人移动或者控制飞行器按既定轨道飞行，那么如何实现 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 与底层的移动控制设备通信呢？底层设备一般都是ARM架构实现，资源有限，不可能跑个ubuntu，当然也可以移植 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 的框架，但这个要对底层设备进行 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 框架的封装，实现起来麻烦一些。普遍来讲，底层设备一般都具备串口，通过串口与底层设备通讯，也许是一种高效便捷的方法。<br><a id="more"></a></p>
<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>在 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 平台下，设计一个串口节点，该节点订阅talker控制节点发来的命令主题，将命令通过串口设备发送到移动底座也可以是飞控设备；同时串口节点实时接收移动底座通过串口发送过来的传感器实时数据，并将该数据封装后以 <em>sensor</em> 主题的模式进行发布， <em>listenner</em> 节点可以实现订阅该主题。这样就实现了 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 与移动底座的串口通信过程。<img src="/2017/05/17/ros-serial/arch.jpg" alt=""></p>
<h1 id="串口节点"><a href="#串口节点" class="headerlink" title="串口节点"></a>串口节点</h1><p><em>linux</em> 下的串口有很多现成的实现例子，比如 <a href="https://github.com/mwheels/libcssl" target="_blank" rel="external">libcssl</a> ,当然也可以自己编程实现。对于 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 架构的串口也有现成的例子 <a href="http://wiki.ros.org/serial" target="_blank" rel="external">serial</a> ,源代码 <a href="https://github.com/wjwwood/serial.git" target="_blank" rel="external">serial code</a> 。也有基于 <a href="https://github.com/spiralray/stm32f1_rosserial" target="_blank" rel="external">stm32</a> 的 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 串口代码框架。也可以参考 <a href="https://github.com/openrobots-dev/uROSnode" target="_blank" rel="external">uROSnode</a> 避免重复造轮子，这里使用 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 现有的串口源码。</p>
<h2 id="建立工作目录"><a href="#建立工作目录" class="headerlink" title="建立工作目录"></a>建立工作目录</h2><p>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$mkdir</span> -p ~<span class="regexp">/catkin_ws/</span>src<span class="regexp">/mypackage/</span></div></pre></td></tr></table></figure></p>
<h2 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h2><p>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cd</span> ~<span class="regexp">/catkin_ws/</span>src<span class="regexp">/mypackage/</span></div><div class="line"><span class="variable">$git</span> clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/wjwwood/</span>serial.git</div></pre></td></tr></table></figure></p>
<h2 id="建立串口节点"><a href="#建立串口节点" class="headerlink" title="建立串口节点"></a>建立串口节点</h2><p>　　在 <em>mypackage</em> 目录下建立自己的节点程序包：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$catkin</span>_create_pkg my_serial_node std_msgs rospy roscpp</span></div></pre></td></tr></table></figure></p>
<p>此时会在 <em>mypackage/my_serial_node </em>目录下生成两个文件 <em>CMakeLists.txt</em> 和 <em>package.xml</em> 以及两个文件夹 <em>include/</em> 和 <em>src/</em>。修改 <em>CMakeLists.txt</em> 的内容：<br>　　<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">cmake_minimum_required(<span class="name">VERSION</span> <span class="number">2.8</span>.<span class="number">3</span>)</div><div class="line">project( <span class="name">my_serial_node</span> )</div><div class="line"></div><div class="line"> find_package(<span class="name">catkin</span> REQUIRED COMPONENTS</div><div class="line">    roscpp</div><div class="line">    serial</div><div class="line">    std_msgs</div><div class="line">  )</div><div class="line"> </div><div class="line"> catkin_package(</div><div class="line">   <span class="name">CATKIN_DEPENDS</span></div><div class="line">     serial</div><div class="line">     std_msgs</div><div class="line"> )</div><div class="line"></div><div class="line"> include_directories(</div><div class="line">   $&#123;catkin_INCLUDE_DIRS&#125;</div><div class="line"> )</div><div class="line"></div><div class="line"> add_executable( <span class="name">my_serial_node</span> src/my_serial_node.cpp)</div><div class="line"></div><div class="line"> target_link_libraries( <span class="name">my_serial_node</span></div><div class="line">   $&#123;catkin_LIBRARIES&#125;</div><div class="line"> )</div></pre></td></tr></table></figure></p>
<p>修改 <em>package.xml</em> 内容添加刚刚下载的 <em>serial</em> 依赖：<br>　　<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">package</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span> my_serial_node<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>my serial node <span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">license</span>&gt;</span>BSD<span class="tag">&lt;/<span class="name">license</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>serial<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>serial<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">run_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">run_depend</span>&gt;</span></div><div class="line"></div><div class="line"> <span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在 <em>src</em> 目录下建立 <em>my_serial_node.cpp</em> 文件：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;serial/serial.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;std_msgs/String.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;std_msgs/Empty.h&gt;</span></span></div><div class="line"></div><div class="line">serial::Serial ros_ser;</div><div class="line"><span class="comment">//回调函数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">callback</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span>&#123;</div><div class="line">     ROS_INFO_STREAM(<span class="string">"Write to serial port"</span> &lt;&lt; msg-&gt;data);</div><div class="line">     ros_ser.write(msg-&gt;data);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line">     ros::init(argc, argv, <span class="string">"my_serial_node"</span>);</div><div class="line">     ros::NodeHandle n;</div><div class="line">     <span class="comment">//订阅主题command</span></div><div class="line">     ros::Subscriber command_sub = n.subscribe(<span class="string">"command"</span>, <span class="number">1000</span>, callback);</div><div class="line">     <span class="comment">//发布主题sensor</span></div><div class="line">     ros::Publisher sensor_pub = n.advertise&lt;std_msgs::String&gt;(<span class="string">"sensor"</span>, <span class="number">1000</span>);</div><div class="line"></div><div class="line">     <span class="keyword">try</span></div><div class="line">     &#123;</div><div class="line">         ros_ser.setPort(<span class="string">"/dev/ttyUSB0"</span>);</div><div class="line">         ros_ser.setBaudrate(<span class="number">115200</span>);</div><div class="line">         ros_serial::Timeout to = serial::Timeout::simpleTimeout(<span class="number">1000</span>);</div><div class="line">         ros_ser.setTimeout(to);</div><div class="line">         ros_ser.open();</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">catch</span> (serial::IOException&amp; e)</div><div class="line">     &#123;</div><div class="line">         ROS_ERROR_STREAM(<span class="string">"Unable to open port "</span>);</div><div class="line">         <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">if</span>(ros_ser.isOpen())&#123;</div><div class="line">         ROS_INFO_STREAM(<span class="string">"Serial Port opened"</span>);</div><div class="line">     &#125;<span class="keyword">else</span>&#123;</div><div class="line">         <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     ros::<span class="function">Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>;</div><div class="line">     <span class="keyword">while</span>(ros::ok())&#123;</div><div class="line"></div><div class="line">         ros::spinOnce();</div><div class="line"></div><div class="line">         <span class="keyword">if</span>(ros_ser.available())&#123;</div><div class="line">             ROS_INFO_STREAM(<span class="string">"Reading from serial port"</span>);</div><div class="line">             std_msgs::String serial_data;</div><div class="line">             <span class="comment">//获取串口数据</span></div><div class="line">             serial_data.data = ros_ser.read(ros_ser.available());</div><div class="line">             ROS_INFO_STREAM(<span class="string">"Read: "</span> &lt;&lt; serial_data.data);</div><div class="line">             <span class="comment">//将串口数据发布到主题sensor</span></div><div class="line">             sensor_pub.publish(serial_data);</div><div class="line">         &#125;</div><div class="line">         loop_rate.sleep();</div><div class="line"></div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="建立talker节点"><a href="#建立talker节点" class="headerlink" title="建立talker节点"></a>建立talker节点</h2><p>同样在 <em>src</em> 目录下新建文件 <em>talker.cpp</em> ,并在 <em>CMakeLists.txt</em> 中添加以下内容：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">add_executable</span><span class="params">(talker src/talker.cpp)</span></span></div><div class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(talker $&#123;catkin_LIBRARIES&#125;)</span></span></div></pre></td></tr></table></figure></p>
<p><em>talker.cpp</em>内容：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"std_msgs/String.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line"> ros::init(argc, argv, <span class="string">"talker"</span>);</div><div class="line"> ros::NodeHandle n;</div><div class="line"> <span class="comment">//发布主题command</span></div><div class="line"> ros::Publisher command_pub = n.advertise&lt;std_msgs::String&gt;(<span class="string">"command"</span>, <span class="number">1000</span>);</div><div class="line"> ros::<span class="function">Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>;</div><div class="line"> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"> <span class="keyword">while</span> (ros::ok())</div><div class="line"> &#123;</div><div class="line">   std_msgs::String msg;</div><div class="line">   <span class="built_in">std</span>::<span class="built_in">stringstream</span> ss_data;</div><div class="line">   ss_data &lt;&lt; <span class="string">"talker publish command "</span> &lt;&lt; count;</div><div class="line">   msg.data = ss_data.str();</div><div class="line">   ROS_INFO(<span class="string">"%s"</span>, msg.data.c_str());</div><div class="line">   command_pub.publish(msg);</div><div class="line">   ros::spinOnce();</div><div class="line">   loop_rate.sleep();</div><div class="line">   ++count;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="建立listenner节点"><a href="#建立listenner节点" class="headerlink" title="建立listenner节点"></a>建立listenner节点</h2><p>方式同 <em>talker</em> 节点。代码如下：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"std_msgs/String.h"</span></span></div><div class="line"><span class="comment">//回调函数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">callback</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span></div><div class="line">&#123;</div><div class="line"> ROS_INFO(<span class="string">"listener got: [%s]"</span>, msg-&gt;data.c_str());</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line"> ros::init(argc, argv, <span class="string">"listener"</span>);</div><div class="line"> ros::NodeHandle n;</div><div class="line"> <span class="comment">//订阅主题</span></div><div class="line"> ros::Subscriber sub = n.subscribe(<span class="string">"sensor"</span>, <span class="number">1000</span>, callback);</div><div class="line"> ros::spin();</div><div class="line"> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>回到目录 <em>catkin_ws</em> 进行编译：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/catkin_ws/</span></div><div class="line"><span class="meta">$</span><span class="bash">catkin_make</span></div></pre></td></tr></table></figure></p>
<p>测试时将底层设备通过串口与运行 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 系统设备的串口连接，并写好底层设备的串口驱动程序。在 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 平台上开三个终端运行三个节点：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscore</span> //必须先运行</span></div><div class="line"><span class="meta"><span class="meta-keyword">$rosrun</span> my_serial_node my_serial_node</span></div><div class="line"><span class="meta"><span class="meta-keyword">$rosrun</span> my_serial_node talker</span></div><div class="line"><span class="meta"><span class="meta-keyword">$rosrun</span> my_serial_node listenner</span></div></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="/2017/05/17/ros-serial/serial.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS serial </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派3b安装ROS-Indigo]]></title>
      <url>/2017/05/15/ros-indigo-raspberry/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前对于基于 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a> 的可移动平台，有两种方案较为流行用户较多，可参考的资料也多。一种是使用英伟达的 <a href="http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html" target="_blank" rel="external">TK1</a>，另外一种是使用 <a href="https://www.raspberrypi.org/" target="_blank" rel="external">raspberryPi</a>。相对于 <a href="http://www.nvidia.cn/object/jetson-tk1-embedded-dev-kit-cn.html" target="_blank" rel="external">TK1</a>，树莓派在价格上更亲民，虽然性能上差一些，在计算 <a href="https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%97%B6%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%9C%B0%E5%9B%BE%E6%9E%84%E5%BB%BA" target="_blank" rel="external">SLAM</a> 时会有卡顿现象，但对于入门级用户来说，也是个不错的选择。<br><a id="more"></a></p>
<h1 id="树莓派3b上安装ros-indigo"><a href="#树莓派3B上安装ROS-Indigo" class="headerlink" title="树莓派3B上安装ROS-Indigo"></a>树莓派3B上安装ROS-Indigo</h1><p> <em>环境</em>： <em>Raspbian OS Jessie</em><br> <em>硬件</em>： <em>raspberryPi 3B</em>以及一张<em>16G SD 卡</em><br> <em>参考</em>： <a href="http://wiki.ros.org/ROSberryPi/Installing%20ROS%20Indigo%20on%20Raspberry%20Pi" target="_blank" rel="external">InstallROSIndigoOnRaspberryPi</a></p>
<h2 id="添加ros代码仓"><a href="#添加ROS代码仓" class="headerlink" title="添加ROS代码仓"></a>添加ROS代码仓</h2><p>添加ROS源以及key<br>　　<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> <span class="keyword">sh</span> -c 'echo <span class="string">"deb http://packages.ros.org/ros/ubuntu jessie main"</span> &gt; /etc/apt/sources.<span class="keyword">list</span>.<span class="keyword">d</span>/ros-latest.<span class="keyword">list</span>'</div><div class="line"><span class="variable">$wget</span> https:<span class="comment">//raw.githubusercontent.com/ros/rosdistro/master/ros.key -O - | sudo apt-key add -</span></div></pre></td></tr></table></figure></p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get update</span></div><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get upgrade</span></div></pre></td></tr></table></figure></p>
<h2 id="安装引导程序依赖项"><a href="#安装引导程序依赖项" class="headerlink" title="安装引导程序依赖项"></a>安装引导程序依赖项</h2><p>　　<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$sudo apt-get install <span class="keyword">python</span>-pip <span class="keyword">python</span>-setuptools <span class="keyword">python</span>-yaml <span class="keyword">python</span>-distribute <span class="keyword">python</span>-docutils <span class="keyword">python</span>-dateutil <span class="keyword">python</span>-six</div><div class="line">$sudo pip install rosdep rosinstall_generator wstool rosinstall</div></pre></td></tr></table></figure></p>
<h2 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h2><p>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install vim</span></div></pre></td></tr></table></figure></p>
<h2 id="增大swap空间"><a href="#增大swap空间" class="headerlink" title="增大swap空间"></a>增大swap空间</h2><p>修改/etc/dphys-swapfile文件，增大交换空间，以免编译ROS源码时出现内存不足现象。将CONF_SWAPSIZE 修改为 2048<br>　　<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">CONF_SWAPSIZE</span>=<span class="number">2048</span></div></pre></td></tr></table></figure></p>
<h2 id="初始化rosdep"><a href="#初始化rosdep" class="headerlink" title="初始化rosdep"></a>初始化rosdep</h2><p>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> rosdep init</span></div><div class="line"><span class="meta"><span class="meta-keyword">$rosdep</span> update</span></div></pre></td></tr></table></figure></p>
<h2 id="创建workspace"><a href="#创建workspace" class="headerlink" title="创建workspace"></a>创建workspace</h2><p>创建一个workspace用于存储和编译ROS源码<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">mkdir ~/ros_catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/ros_catkin_ws/</span></div></pre></td></tr></table></figure></p>
<h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p>选择desktop完全版本<br>　　<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$rosinstall_generator</span> <span class="comment">desktop</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">rosdistro</span> <span class="comment">indigo</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">deps</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">wet</span><span class="literal">-</span><span class="comment">only</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">exclude</span> <span class="comment">roslisp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">tar</span> &gt; <span class="comment">indigo</span><span class="literal">-</span><span class="comment">desktop</span><span class="literal">-</span><span class="comment">wet</span><span class="string">.</span><span class="comment">rosinstall</span></div><div class="line"><span class="comment">$wstool</span> <span class="comment">init</span> <span class="literal">-</span><span class="comment">j4</span> <span class="comment">src</span> <span class="comment">indigo</span><span class="literal">-</span><span class="comment">desktop</span><span class="literal">-</span><span class="comment">wet</span><span class="string">.</span><span class="comment">rosinstall</span></div></pre></td></tr></table></figure></p>
<p>源代码将会保存在目录 <em>~/ros_catkin_ws/src</em> 下，<em>-j4</em>意思是开启4个线程同时下载。如果下载异常中断，可以尝试使用下面命令恢复：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$wstool</span> update -j4 -t src</span></div></pre></td></tr></table></figure></p>
<p>下载时间很漫长。</p>
<h2 id="解决ros依赖"><a href="#解决ROS依赖" class="headerlink" title="解决ROS依赖"></a>解决ROS依赖</h2><p>在正式编译ROS之前，我们还需要手动安装以下几个依赖包：<br> <em>libconsole-bridge-dev</em><br> <em>liblz4-dev</em><br> <em>liburdfdom-headers-dev</em><br> <em>liburdfdom-dev</em><br> <em>collada-dom-dev</em><br>为这些依赖包建立单独的用于编译安装的文件夹，同时安装checkinstall和cmake：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$mkdir</span> ~/ros_catkin_ws/external_src</span></div><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get install checkinstall cmake</span></div></pre></td></tr></table></figure></p>
<p>如果无法安装，更新一下再安装：<br>　　<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sudo apt-<span class="built_in">get</span> <span class="keyword">update</span> &amp;&amp; sudo apt-<span class="built_in">get</span> upgrade</div></pre></td></tr></table></figure></p>
<p>然后添加：<br>　　<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> <span class="keyword">sh</span> -c 'echo <span class="string">"deb-src http://mirrordirector.raspbian.org/raspbian/ testing main contrib non-free rpi"</span> &gt;&gt; /etc/apt/sources.<span class="keyword">list</span>'</div></pre></td></tr></table></figure></p>
<p>更新：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> apt-get update</span></div></pre></td></tr></table></figure></p>
<h2 id="安装libconsole-bridge-dev"><a href="#安装libconsole-bridge-dev" class="headerlink" title="安装libconsole-bridge-dev"></a>安装libconsole-bridge-dev</h2><p>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/ros_catkin_ws/external_src</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo apt-get build-dep console-bridge</span></div><div class="line"><span class="meta">$</span><span class="bash">apt-get <span class="built_in">source</span> -b console-bridge</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo dpkg -i libconsole-bridge0.2*.deb libconsole-bridge-dev_*.deb</span></div></pre></td></tr></table></figure></p>
<h2 id="安装liblz4-dev"><a href="#安装liblz4-dev" class="headerlink" title="安装liblz4-dev"></a>安装liblz4-dev</h2><p>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cd</span> ~/ros_catkin_ws/external_src</div><div class="line"><span class="variable">$apt</span>-get source -<span class="selector-tag">b</span> lz4 <span class="comment">//获取，该步骤耗时很长</span></div><div class="line"><span class="variable">$sudo</span> dpkg -<span class="selector-tag">i</span> liblz4-*<span class="selector-class">.deb</span> <span class="comment">//安装</span></div></pre></td></tr></table></figure></p>
<h2 id="安装liburdfdom-headers-dev"><a href="#安装liburdfdom-headers-dev" class="headerlink" title="安装liburdfdom-headers-dev"></a>安装liburdfdom-headers-dev</h2><p>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/ros_catkin_ws/external_src</span></div><div class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> https://github.com/ros/urdfdom_headers.git</span></div><div class="line"><span class="meta">$</span><span class="bash">git reset --hard 9aed725</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> urdfdom_headers</span></div><div class="line"><span class="meta">$</span><span class="bash">cmake .</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo checkinstall make installl</span></div></pre></td></tr></table></figure></p>
<p>最后一步提示：<br>　　<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">The <span class="keyword">package</span> documentation directory ./doc-pak does not exist.</div><div class="line">Should I create a <span class="keyword">default</span> set of <span class="keyword">package</span> docs?  [y]: y</div><div class="line">This <span class="keyword">package</span> will be built according to these <span class="string">values:</span></div><div class="line"></div><div class="line"><span class="number">0</span> -  <span class="string">Maintainer:</span> [ root<span class="meta">@raspberrypi</span> ]</div><div class="line"><span class="number">1</span> -  <span class="string">Summary:</span> [ Package created with checkinstall <span class="number">1.6</span><span class="number">.2</span> ]</div><div class="line"><span class="number">2</span> -  <span class="string">Name:</span>    [ urdfdom-headers ]</div><div class="line"><span class="number">3</span> -  <span class="string">Version:</span> [ <span class="number">20170318</span> ]</div><div class="line"><span class="number">4</span> -  <span class="string">Release:</span> [ <span class="number">1</span> ]</div><div class="line"><span class="number">5</span> -  <span class="string">License:</span> [ GPL ]</div><div class="line"><span class="number">6</span> -  <span class="string">Group:</span>   [ checkinstall ]</div><div class="line"><span class="number">7</span> -  <span class="string">Architecture:</span> [ armhf ]</div><div class="line"><span class="number">8</span> -  Source <span class="string">location:</span> [ urdfdom_headers ]</div><div class="line"><span class="number">9</span> -  Alternate source <span class="string">location:</span> [  ]</div><div class="line"><span class="number">10</span> - <span class="string">Requires:</span> [  ]</div><div class="line"><span class="number">11</span> - <span class="string">Provides:</span> [ urdfdom-headers ]</div><div class="line"><span class="number">12</span> - <span class="string">Conflicts:</span> [  ]</div><div class="line"><span class="number">13</span> - <span class="string">Replaces:</span> [  ]</div></pre></td></tr></table></figure></p>
<p>这里的’9aed725’就是将”liburdfdom-headers-dev”的安装版本变成我们需要的1.0.0版本。check-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从”urdfdom-headers” 改为 “liburdfdom-headers-dev”，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错<br>完成后检查安装的包是否正确:<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">dpkg <span class="_">-l</span> | grep urdf</span></div></pre></td></tr></table></figure></p>
<p>如果正确会输出：<br>　　<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ii  liburdfdom-headers-dev       <span class="number">20170318</span><span class="number">-1</span>     armhf        Package created with checkinstall <span class="number">1.6</span><span class="number">.2</span></div></pre></td></tr></table></figure></p>
<h2 id="安装liburdfdom-dev"><a href="#安装liburdfdom-dev" class="headerlink" title="安装liburdfdom-dev"></a>安装liburdfdom-dev</h2><p>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/ros_catkin_ws/external_src</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo apt-get install libboost-test-dev libtinyxml-dev</span></div><div class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> https://github.com/ros/urdfdom.git</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> urdfdom</span></div><div class="line"><span class="meta">$</span><span class="bash">cmake .</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo checkinstall make install</span></div></pre></td></tr></table></figure></p>
<p>check-install开始会让提示输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 “urdfdom”改为”liburdfdom-dev” ，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错。<br>编译出错提示找不到文件：utils.h<br>添加一个文件(utils.h)到/usr/local/include/urdf_model目录下：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cd</span> <span class="regexp">/usr/</span>local<span class="regexp">/include/u</span>rdf_model</div><div class="line"><span class="variable">$sudo</span> wget https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/ros/u</span>rdfdom_headers<span class="regexp">/master/u</span>rdf_model<span class="regexp">/include/u</span>rdf_model<span class="regexp">/utils.h</span></div></pre></td></tr></table></figure></p>
<p>重新编译</p>
<h2 id="安装collada-dom-dev"><a href="#安装collada-dom-dev" class="headerlink" title="安装collada-dom-dev"></a>安装collada-dom-dev</h2><p>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/ros_catkin_ws/external_src</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo apt-get install libboost-filesystem-dev libxml2-dev</span></div><div class="line"><span class="meta">$</span><span class="bash">wget http://downloads.sourceforge.net/project/collada-dom/Collada%20DOM/Collada%20DOM%202.4/collada-dom-2.4.0.tgz</span></div><div class="line"><span class="meta">$</span><span class="bash">tar -xzf collada-dom-2.4.0.tgz</span></div><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> collada-dom-2.4.0</span></div><div class="line"><span class="meta">$</span><span class="bash">cmake .</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo checkinstall make install</span></div></pre></td></tr></table></figure></p>
<p>check-install开始会让你输入包的描述，可以直接按回车跳过。当checkinstall询问是否改变安装选项时，选择［2］，将名字从 “collada-dom”改为 “collada-dom-dev” ，其余有[y]或[n]的问题都输入’n’按回车， 否则会编译出错。</p>
<h2 id="rosdep依赖"><a href="#rosdep依赖" class="headerlink" title="rosdep依赖"></a>rosdep依赖</h2><p>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> ~/ros_catkin_ws</span></div><div class="line"><span class="meta">$</span><span class="bash">sudo rosdep init</span></div><div class="line"><span class="meta">$</span><span class="bash">rosdep update</span></div><div class="line"><span class="meta">$</span><span class="bash">rosdep install --from-paths src --ignore-src --rosdistro indigo -y -r --os=debian:Jessie</span></div></pre></td></tr></table></figure></p>
<p><em>rosdep install</em>命令会寻找所有src目录的package并递归安装依赖，要安装的依赖包有点多，耐心等待。rosdep会检查src文件夹，安装其他的依赖包。</p>
<h2 id="编译catkin工作空间"><a href="#编译catkin工作空间" class="headerlink" title="编译catkin工作空间"></a>编译catkin工作空间</h2><p>在开始编译之前，先打两个补丁<br>打开文件:<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$vim</span> ~<span class="regexp">/ros_catkin_ws/</span>src<span class="regexp">/robot_model/</span>collada_urdf<span class="regexp">/src/</span>collada_urdf.cpp</div></pre></td></tr></table></figure></p>
<p>在最后一个#include后添加<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __arm__  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strings.h&gt;</span></span></div><div class="line"><span class="keyword">bool</span> Assimp::IOSystem::ComparePaths(<span class="keyword">const</span> <span class="keyword">char</span> *p1, <span class="keyword">const</span> <span class="keyword">char</span> *p2) <span class="keyword">const</span>  </div><div class="line">&#123;  </div><div class="line"><span class="keyword">return</span> !::strcasecmp(p1,p2);  </div><div class="line">&#125; </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>修改~/ros_catkin_ws/src/rviz/src/rviz/mesh_loader.cpp文件，在最后一个#include（如果#include的下一行是#endif则放到#endif后）行后加入以下代码<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __arm__                 <span class="comment">// fix for ARM build</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strings.h&gt;</span></span></div><div class="line"><span class="keyword">bool</span> Assimp::IOSystem::ComparePaths(<span class="keyword">const</span> <span class="keyword">char</span> *p1, <span class="keyword">const</span> <span class="keyword">char</span> *p2) <span class="keyword">const</span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">return</span> !::strcasecmp(p1, p2);</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>编译：<br>　　<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$<span class="keyword">cd</span> ~<span class="string">/ros_catkin_ws</span></div><div class="line">$sudo <span class="string">./src/catkin/bin/catkin_make_isolated</span> <span class="params">--install</span> -DCMAKE_BUILD_TYPE=Release <span class="params">--install-space</span> <span class="string">/opt/ros/indigo</span> -j4</div></pre></td></tr></table></figure></p>
<p>上面命令将编译文件安装到/opt/ros/indigo –j4是使用4个线程编译.</p>
<h2 id="出现的错误"><a href="#出现的错误" class="headerlink" title="出现的错误"></a>出现的错误</h2><p>###error: ‘shared_ptr’ in namespace ‘std’ does not name a template type<br>执行上面的编译命令提示错误：<br>　　<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">in</span> file included from <span class="regexp">/home/</span>pi<span class="regexp">/ros_catkin_ws/</span>src<span class="regexp">/robot_model/</span>urdf<span class="regexp">/include/</span>urdf/model.<span class="string">h:</span><span class="number">43</span>:<span class="number">0</span>, </div><div class="line">                 from <span class="regexp">/home/</span>pi<span class="regexp">/ros_catkin_ws/</span>src<span class="regexp">/robot_model/</span>urdf<span class="regexp">/src/</span>model.<span class="string">cpp:</span><span class="number">37</span>: </div><div class="line"><span class="regexp">/home/</span>pi<span class="regexp">/ros_catkin_ws/</span>devel_isolated<span class="regexp">/urdf/</span>include<span class="regexp">/urdf/</span>urdfdom_compatibility.<span class="string">h:</span><span class="number">78</span>:<span class="number">14</span>: <span class="string">error:</span> ‘shared_ptr’ <span class="keyword">in</span> namespace ‘std’ does not name a template type </div><div class="line"> typedef <span class="string">std:</span>:shared_ptr&lt;ModelInterface&gt; ModelInterfaceSharedPtr; </div><div class="line">              ^ </div><div class="line"><span class="regexp">/home/</span>pi<span class="regexp">/ros_catkin_ws/</span>devel_isolated<span class="regexp">/urdf/</span>include<span class="regexp">/urdf/</span>urdfdom_compatibility.<span class="string">h:</span><span class="number">79</span>:<span class="number">14</span>: <span class="string">error:</span> ‘shared_ptr’ <span class="keyword">in</span> namespace ‘std’ does not name a template type </div><div class="line"> typedef <span class="string">std:</span>:shared_ptr&lt;const ModelInterface&gt; ModelInterfaceConstSharedPtr; </div><div class="line">              ^ </div><div class="line"><span class="regexp">/home/</span>pi<span class="regexp">/ros_catkin_ws/</span>devel_isolated<span class="regexp">/urdf/</span>include<span class="regexp">/urdf/</span>urdfdom_compatibility.<span class="string">h:</span><span class="number">80</span>:<span class="number">14</span>: <span class="string">error:</span> ‘weak_ptr’ <span class="keyword">in</span> namespace ‘std’ does not name a template type </div><div class="line"> typedef <span class="string">std:</span>:weak_ptr&lt;ModelInterface&gt; ModelInterfaceWeakPtr; </div><div class="line">              ^ </div><div class="line">CMakeFiles<span class="regexp">/urdf.dir/</span>build.<span class="string">make:</span><span class="number">62</span>: recipe <span class="keyword">for</span> target <span class="string">'CMakeFiles/urdf.dir/src/model.cpp.o'</span> failed</div></pre></td></tr></table></figure></p>
<p>修改文件：<br>/home/pi/ros_catkin_ws/devel_isolated/urdf/include/urdf/urdfdom_compatibility.h<br>从78行开始到80行都屏蔽掉<br>　　<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> /*</div><div class="line"> typedef <span class="symbol">std:</span><span class="symbol">:shared_ptr&lt;ModelInterface&gt;</span> ModelInterfaceSharedPtr;</div><div class="line"> typedef <span class="symbol">std:</span><span class="symbol">:shared_ptr&lt;const</span> ModelInterface&gt; ModelInterfaceConstSharedPtr;</div><div class="line"> typedef <span class="symbol">std:</span><span class="symbol">:weak_ptr&lt;ModelInterface&gt;</span> ModelInterfaceWeakPtr;</div><div class="line">*<span class="regexp">/</span></div></pre></td></tr></table></figure></p>
<p>再次编译成功。这个过程非常漫长。<img src="/2017/05/15/ros-indigo-raspberry/catkin.jpg" alt=""></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>完成之后设置环境变量：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$source</span> <span class="regexp">/opt/</span>ros<span class="regexp">/indigo/</span>setup.bash</div></pre></td></tr></table></figure></p>
<p>设置ROS环境变量在每次启动shell时自动添加到bash会话<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="built_in">echo</span> <span class="string">"source /opt/ros/indigo/setup.bash"</span> &gt;&gt; ~/.bashrc</span></div></pre></td></tr></table></figure></p>
<p>到这里我们的ROS完整版就已经成功安装好了，不妨运行roscore试一下<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$roscore</span></span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/15/ros-indigo-raspberry/roscore.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> raspberryPi ros-indigo jessie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派3B使用前的配置]]></title>
      <url>/2017/05/15/raspberryPi/</url>
      <content type="html"><![CDATA[<p>前段时间入手一块树莓派 <a href="https://www.raspberrypi.org/" target="_blank" rel="external">raspberryPi</a> 型号为3B。关于它的介绍这里就不多说了，可自行 <a href="https://www.google.com" target="_blank" rel="external">google</a>。使用前需要准备一张SD卡用于安装系统镜像。容量尽可能大，最好不低于16G。树莓派支持多种平台，因后续要安装 <a href="http://www.ros.org/" target="_blank" rel="external">ROS</a>，考虑到官方支持的稳定性，选用 <em>Raspbian</em> 平台镜像。因为<em>Raspbian</em> 是官方推荐的支持的操作系统，而 <a href="http://wiki.ros.org/cn/indigo" target="_blank" rel="external">Ros-indigo</a> 也刚好有基于该平台的安装包。</p>
<h1 id="镜像安装"><a href="#镜像安装" class="headerlink" title="镜像安装"></a>镜像安装</h1><p>参考官网 <a href="https://www.raspberrypi.org/documentation/installation/installing-images/" target="_blank" rel="external">Install-Images</a>。我安装的版本为<em>2017-03-02-raspbian-jessie.img</em><br><a id="more"></a></p>
<h1 id="开启ssh和串口"><a href="#开启SSH和串口" class="headerlink" title="开启SSH和串口"></a>开启SSH和串口</h1><p>该版本默认不开启SSH以及串口功能，需要手动开启。树莓派板子需要连接显示器、键盘、鼠标。在终端中输入:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> raspi-config</span></div></pre></td></tr></table></figure></p>
<p>进行配置。树莓派默认的用户名为<em>pi</em>密码为<em>raspberry</em>。<br><img src="/2017/05/15/raspberryPi/config.jpg" alt=""><br>进入第5项开启SSH以及GPIO14 GPIO15对应的串口控制台功能。串口功能开启后就可以抛弃鼠标、键盘、显示器直接在控制台访问树莓派。</p>
<h1 id="开启vnc远程桌面"><a href="#开启VNC远程桌面" class="headerlink" title="开启VNC远程桌面"></a>开启VNC远程桌面</h1><p>同样在配置菜单的第5项开启:<img src="/2017/05/15/raspberryPi/portconfig.jpg" alt=""><br>在windows上安装 <a href="https://www.realvnc.com/" target="_blank" rel="external">VNC Viewer</a> 并且输入树莓派的IP地址就可以远程访问树莓派。<img src="/2017/05/15/raspberryPi/vnc.jpg" alt=""><br>如果不知道IP地址，可以使用工具 <a href="http://www.eusing.com/ipscan/free_ip_scanner.htm" target="_blank" rel="external">freeIpScanner</a> 获取IP地址。或者使用linux下的nmap命令,nmap命令说明：<br>　　<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$nmap <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.1</span>/<span class="number">24</span> //扫描整个子网</div><div class="line">$nmap <span class="number">192.168</span><span class="meta">.1</span>.x (x:<span class="number">0</span>-<span class="number">255</span>) //扫描单个主机</div><div class="line">$nmap <span class="number">192.168</span><span class="meta">.1</span>.x <span class="number">192.168</span><span class="meta">.1</span>.y //扫描多个目标</div><div class="line">$nmap <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.100</span>-<span class="number">255</span> 扫描某个范围内的目标#<span class="built_in">ip</span>地址在<span class="number">192.168</span><span class="meta">.1</span><span class="meta">.100</span>和<span class="number">192.168</span><span class="meta">.1</span><span class="meta">.255</span>之间 </div><div class="line">$nmap <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.1</span>/<span class="number">24</span> -exclude <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.1</span> 扫描一个网段除了某个主机</div><div class="line">$nmap -p80,<span class="number">21</span>,<span class="number">23</span> <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.1</span> 扫描某个主机下的端口（<span class="number">80</span>端口 <span class="number">21</span>端口 <span class="number">23</span> 端口）</div></pre></td></tr></table></figure></p>
<h1 id="手动配置wifi"><a href="#手动配置wifi" class="headerlink" title="手动配置wifi"></a>手动配置wifi</h1><p>命令行下启动 <em>wpa_cli</em> 参考 <a href="http://w1.fi/wpa_supplicant/" target="_blank" rel="external">WPA_supplicant</a>：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$sudo</span> wpa_cli</span></div></pre></td></tr></table></figure></p>
<p><img src="/2017/05/15/raspberryPi/wpacli.jpg" alt=""><br>　 <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">status <span class="string">//</span>列出目前的联网状态</div><div class="line">list_networks <span class="string">//</span>记住网络ID</div><div class="line"><span class="keyword">set</span>_network <span class="string">"ID"</span> key_mgmt WPA-PSK  <span class="string">//</span>设置无线网络加密方式</div><div class="line"><span class="keyword">set</span>_network <span class="string">"ID"</span> psk <span class="string">"yourpassword"</span>   <span class="string">//</span>设置密码</div><div class="line">enable_network <span class="string">"ID"</span>   <span class="string">//</span>使能该网络</div><div class="line">save_config <span class="string">//</span>保存配置</div></pre></td></tr></table></figure></p>
<p>完成之后会在文件/etc/wpa_supplicant/wpa_supplicant.conf看到配置信息已经写入到文件,此时可以查看网络是否连接:<br>  　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$ifconfig</span></span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> raspberryPi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo问题汇总]]></title>
      <url>/2017/05/13/hexo-error/</url>
      <content type="html"><![CDATA[<h1 id="unable-to-call-the-return-value-of-postsfirstupdatedtoisostring-which-is-undefined-or-falsey"><a href="#Unable-to-call-the-return-value-of-posts-“first”-“updated”-“toISOString”-which-is-undefined-or-falsey" class="headerlink" title="Unable to call the return value of (posts[“first”])[“updated”][“toISOString”], which is undefined or falsey"></a>Unable to call the return value of (posts[“first”])[“updated”][“toISOString”], which is undefined or falsey</h1><p> 运行<em>hexo g</em>生成静态文件时提示错误：<br>　　<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">INFO  Start processing</div><div class="line">FATAL Something<span class="comment">'s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span></div><div class="line">Template render <span class="keyword">error</span>: (unknown path) [Line <span class="number">7</span>, Column <span class="number">23</span>]</div><div class="line"><span class="keyword">Error</span>: Unable <span class="keyword">to</span> <span class="keyword">call</span> `the <span class="keyword">return</span> value <span class="keyword">of</span> (posts[<span class="string">"first"</span>])[<span class="string">"updated"</span>][<span class="string">"toISOString"</span>]`, which <span class="keyword">is</span> undefined <span class="keyword">or</span> falsey</div></pre></td></tr></table></figure></p>
 <a id="more"></a>
<p> 当移除掉插件hexo-generator-feed和hexo-generator-sitemap后错误消失，怀疑该插件与hexo兼容性不好<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> uninstall hexo-generator-feed</span></div><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> uninstall hexo-generator-sitemap</span></div></pre></td></tr></table></figure></p>
<h1 id="warn-no-layout-indexhtml"><a href="#WARN-No-layout-index-html" class="headerlink" title="WARN No layout: index.html?"></a>WARN No layout: index.html?</h1><p> 查看主题目录是否为空，如果为空下载主题</p>
<h1 id="fatal-aggregateexception-encountered"><a href="#fatal-AggregateException-encountered" class="headerlink" title="fatal: AggregateException encountered"></a>fatal: AggregateException encountered</h1><p> 当推送至远程分支时提示错误:<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$git</span> push origin hexo</span></div><div class="line">fatal: AggregateException encountered</div><div class="line">  •¢ÉúÒ»¸ö»ò¶à¸ö´íÎó¡£</div><div class="line">Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>:</div></pre></td></tr></table></figure></p>
<p> 多数是网络问题，重来一次即可。</p>
<h2 id="cannot-get"><a href="#Cannot-GET" class="headerlink" title="Cannot GET /"></a>Cannot GET /</h2><p> 当启动服务器后，浏览器输入<em><a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></em>，却提示错误：<em>Cannot GET</em><br> 一般是配置文件错误，当在其他电脑从远程clone下来代码仓后，安装必要的工具使用 <em>hexo clean</em> 以及 <em>hexo g</em> 后产生的 <em>public</em> 文件与本地电脑原有源码仓生成的 <em>public</em> 不一样，查看里面并没有生成以日期命名的文章文件，怀疑是配置文件出了问题，对比两个配置文件都一样，最后发现 <em>node_modules</em> 文件夹问题，就是hexo的配置和安装问题，其他文件都推送到远程仓库，唯独没有推送这个文件夹，它保存有hexo的一些可执行文件。按照hexo安装教程在clone下来的代码仓重新安装一遍hexo，最后还是不行。使用 <a href="http://winmerge.org/" target="_blank" rel="external">WinMerge</a> 比较原电脑中和现在电脑中的两个node_modules文件的不同，发现hexo的很多二进制文件都不同。无语-<br> 当使用 <em>hexo init</em> 后，再把远程仓库的配置文件覆盖到本地电脑后，可以正常生成静态网页。肯定是 <em>hexo</em> 安装不完整缺少某些依赖项。<br> 所以，当在一台新电脑部署 <em>hexo</em> 的正确做法是安装好 <em>hexo</em> 之后需要 <em>hexo init</em> 一下，这样会安装依赖项，得到完整的 <em>node_modules</em>文件夹：<br>　　<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$npm</span> install hexo --<span class="keyword">save</span></div><div class="line"><span class="variable">$npm</span> install hexo-server  --<span class="keyword">save</span></div><div class="line"><span class="variable">$npm</span> install hexo-generator-<span class="keyword">search</span> --<span class="keyword">save</span></div><div class="line"><span class="variable">$npm</span> install hexo-deployer-git --<span class="keyword">save</span></div><div class="line"><span class="variable">$hexo</span> init <span class="comment">//</span></div></pre></td></tr></table></figure></p>
<p> 初始化之后，保留node_modules文件夹，其它删除，之后获取远程仓库最新更新：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> remote add origin https:<span class="regexp">//gi</span>thub.com<span class="regexp">/yourusername/y</span>ourusername.github.io.git</div><div class="line"><span class="variable">$git</span> pull origin hexo</div></pre></td></tr></table></figure></p>
<h1 id="bash-devtty-no-such-device-or-addresserror-failed-to-execute-prompt-script-exit-code-1"><a href="#bash-dev-tty-No-such-device-or-address-error-failed-to-execute-prompt-script-exit-code-1" class="headerlink" title="bash: /dev/tty: No such device or address.error: failed to execute prompt script (exit code 1)"></a>bash: /dev/tty: No such device or address.error: failed to execute prompt script (exit code 1)</h1><p> 当部署自己的博客文件时：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$hexo</span> d</span></div></pre></td></tr></table></figure></p>
<p> 出现以下错误：<br>　　<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bash: /dev/tty: No such device or address</div><div class="line"><span class="keyword">error: </span>failed to execute prompt script (exit code 1)</div><div class="line">fatal: could not read Username for 'https://github.com': Invalid argument</div><div class="line">FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</div><div class="line"><span class="keyword">Error: </span>bash: /dev/tty: No such device or address</div><div class="line"><span class="keyword">error: </span>failed to execute prompt script (exit code 1)</div><div class="line">fatal: could not read Username for 'https://github.com': Invalid argument.</div></pre></td></tr></table></figure></p>
<p> 出现该现象是 <em>windows</em> 环境下的<em>git bash shell</em>配置问题，当改用 <em>github for windows</em> 下的<em>git bash shell</em> 再次部署时问题解决。由于国内的网络问题，官网下载很难安装成功，这里附上一个CSDN上的大神的离线安装包地址 <a href="http://download.csdn.net/user/devsplash" target="_blank" rel="external">GithubforWindows</a>。</p>
<h1 id="permission-denied-publickey"><a href="#Permission-denied-publickey" class="headerlink" title="Permission denied (publickey)."></a>Permission denied (publickey).</h1><p> 当部署博客文件时提示错误：<br>　　<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$hexo d</div><div class="line">The authenticity <span class="keyword">of</span> host <span class="symbol">'github.com</span> (<span class="number">192.30</span>.<span class="number">255.112</span>)' can<span class="symbol">'t</span> be established.</div><div class="line">Permission denied (publickey).</div></pre></td></tr></table></figure></p>
<p> 本机没有配置SSH Key：<br> 　<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span></div></pre></td></tr></table></figure></p>
<p> 将生成的SSH Key拷贝下来，粘贴到自己的github网站的new ssh key中即可。或者使用原来电脑的SSH Key。完成后查看配置是否成功：<br> 　<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ssh -T git<span class="symbol">@github</span>.com</div></pre></td></tr></table></figure></p>
<h1 id="changes-not-staged-for-commit-untracked-files"><a href="#Changes-not-staged-for-commit-Untracked-files" class="headerlink" title="Changes not staged for commit: Untracked files:"></a>Changes not staged for commit: Untracked files:</h1><p>当每次git commit提交更改时，总是提示以下错误：<br>　　<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$git <span class="keyword">commit</span> -m <span class="string">""</span></div><div class="line"><span class="keyword">On</span> branch hexo</div><div class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> <span class="keyword">commit</span>:</div><div class="line">      </div><div class="line">Untracked files:</div></pre></td></tr></table></figure></p>
<p> 通过输入git status查看提示：<br>　　<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch hexo</div><div class="line">Changes not staged for <span class="keyword">commit</span>:</div><div class="line"> (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</div><div class="line"> (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</div><div class="line"></div><div class="line">       </div><div class="line">Untracked files:</div><div class="line"> (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">include</span> <span class="keyword">in</span> what will be committed)</div><div class="line"></div><div class="line">       </div><div class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure></p>
<p> <em>Changes not staged for commit</em> 说明 <em>git</em> 已经跟踪到这些文件的修改，但还没有放到暂存区，需要使用 <em>git add</em> 命令提交更新到暂存区。之后再通过 <em>git status</em> 查看状态：<br>　　<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$git status</div><div class="line"><span class="keyword">On</span> branch hexo</div><div class="line">Changes <span class="keyword">to</span> be committed:</div><div class="line"> (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</div></pre></td></tr></table></figure></p>
<p> 状态已经变成了Changes to be committed。提示未被跟踪的文件Untracked files说明是新建立的文件，在git之前的提交中没有这些文件，git不会自动将它们纳入跟踪范围，必须手动添加这些文件。使用 <em>git add</em> 命令跟踪新文件：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> add <span class="string">"file"</span> <span class="regexp">//</span>添加未被跟踪的文件</div></pre></td></tr></table></figure></p>
<p> 如果还有错误，直接清除缓存:<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">git rm -r --cached .</span></div><div class="line"><span class="meta">$</span><span class="bash">git add --all //跟踪所有文件</span></div><div class="line"><span class="meta">$</span><span class="bash">git commit -m <span class="string">"your commit"</span> //提交更新</span></div><div class="line"><span class="meta">$</span><span class="bash">git push origin <span class="string">"yourbranch"</span> //推送到远程分支yourbranch</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浮点数与16进制的相互转换]]></title>
      <url>/2017/05/11/float-to-byte/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 在嵌入式中经常会遇到浮点数的传输问题，一般将浮点数转换成4字节的16进制传输，这里的浮点数仅限于单精度浮点。大多数人的做法都是使用指针实现强制类型转换，其实浮点数在CPU里就是以4字节存储，既然在同一块内存，那我们能不能使用联合体呢？答案是肯定的。除了强制类型转换，这里介绍使用联合体实现浮点和16进制的转换，简单易用，你绝对会爱上这种方法。<br><a id="more"></a></p>
<h1 id="强制转换法"><a href="#强制转换法" class="headerlink" title="强制转换法"></a>强制转换法</h1><p> 浮点转换成4字节16进制:<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">float2bytes</span><span class="params">(<span class="keyword">float</span> p,<span class="keyword">unsigned</span> <span class="keyword">char</span> *bytes)</span></span></div><div class="line">&#123;</div><div class="line"> <span class="keyword">unsigned</span> <span class="keyword">char</span> *pchar = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)&amp;p;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; <span class="keyword">sizeof</span>(<span class="keyword">float</span>);i++)</div><div class="line"> &#123;</div><div class="line">   *bytes = *pchar;</div><div class="line">   pchar++;</div><div class="line">   bytes++;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 16进制4字节转换成浮点：<br>　　<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">float</span> <span class="title">bytes2float</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *bytes)</span></span></div><div class="line">&#123;</div><div class="line"> <span class="keyword">return</span> *((<span class="keyword">float</span>*)bytes);<span class="comment">//强制转换</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="联合体法"><a href="#联合体法" class="headerlink" title="联合体法"></a>联合体法</h1><p> 话不多说，直接上代码：<br>　<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typedef <span class="class"><span class="keyword">union</span>&#123;</span></div><div class="line"></div><div class="line">unsigned char cvalue[<span class="number">4</span>];</div><div class="line">float fvalue;</div><div class="line"></div><div class="line">&#125;float_union;</div></pre></td></tr></table></figure></p>
<p> 定义联合体变量:<br>　<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">float_union trans_data<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p> 此时如果给变量trans_data赋值一个浮点数:<br> 　<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">trans_data.fvalue = <span class="number">10.05</span><span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p> 那么直接调用cvalue即可获取浮点数10.05的4字节16进制数据：<br>　 <figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</div><div class="line"><span class="keyword">printf</span>(<span class="string">" 0x%02x"</span>,trans_data.cvalue[i]);</div></pre></td></tr></table></figure></p>
<p> 是不是非常简单实用。</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 浮点与16进制 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo进阶]]></title>
      <url>/2017/05/09/hexo-advance/</url>
      <content type="html"><![CDATA[<h1 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h1><p>页面指的是分类页<em>categories</em>、标签页<em>tags</em>、关于页<em>about</em>等。使用以下命令生成以上页面参考<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">nexT</a>:<br>　　<figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">$hexo</span> <span class="keyword">new</span> page categories</div><div class="line"><span class="built_in">$hexo</span> <span class="keyword">new</span> page tags</div><div class="line"><span class="built_in">$hexo</span> <span class="keyword">new</span> page about</div></pre></td></tr></table></figure></p>
<p>在 <em>hexo</em> 配置文件 <em>_config.yml</em> 文件中设置 <em>post_asset_folder</em> 为true,当新建页面后会自动生成一个同名文件夹，用于存储所需的资源图片等。生成以上页面后在主题配置文件中 <em>themes/nexT/_config.yml</em> 打开相关配置项:<br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">menu:</span></div><div class="line"><span class="symbol">  home:</span> /</div><div class="line"><span class="symbol">  categories:</span> /categories</div><div class="line"><span class="symbol">  about:</span> /about</div><div class="line"><span class="symbol">  archives:</span> /archives</div><div class="line"><span class="symbol">  tags:</span> /tags</div><div class="line">  <span class="meta">#sitemap: /sitemap.xml</span></div><div class="line">  <span class="meta">#commonweal: /404.html</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>设置自己的标签页面位于<em>hexo/source/tags</em>:<br>  <figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">title: 标签</div><div class="line">date: 2017<span class="string">-05</span><span class="string">-05</span> 12:30:52</div><div class="line">type: "tags"</div><div class="line">comments: false</div><div class="line"><span class="keyword">tags:</span></div><div class="line"> - Qt</div><div class="line"> - Linux</div><div class="line"> - Hexo</div><div class="line"> - ROS</div></pre></td></tr></table></figure></p>
<p>可以在上面添加自己的标签。<br>分类页的示例如下:<br>　<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">title:</span> 分类</div><div class="line"><span class="string">date:</span> <span class="number">2017</span><span class="number">-05</span><span class="number">-05</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">42</span></div><div class="line"><span class="string">type:</span> <span class="string">"categories"</span></div><div class="line"><span class="string">comments:</span> <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h1 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h1><p>新文章的发表使用以下命令：<br>　　<figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">$hexo</span> <span class="keyword">new</span> post <span class="string">"文章名"</span> 或者 hexo n <span class="string">"文章名"</span></div></pre></td></tr></table></figure></p>
<p>一个文章的开头应包含:<br>　<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: #文章题目</div><div class="line">date: #日期</div><div class="line"><span class="keyword">tags:</span> #标签</div><div class="line">categories: #分类</div></pre></td></tr></table></figure></p>
<p>文章存储在<em>hexo/source/_posts</em>目录下，后缀为<em>.md</em>。可以在适当位置插入以下符号用于部分显示:<br>　　<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--more--&gt;</span></div></pre></td></tr></table></figure></p>
<p>插入该符号之前的文字可以直接显示出来，之后的需要鼠标点击<em>阅读全文</em>来显示全部。<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> g <span class="regexp">//</span>生成静态文件</div><div class="line"><span class="variable">$hexo</span> d <span class="regexp">//</span>部署</div></pre></td></tr></table></figure></p>
<h1 id="添加rss"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h1><p>安装RSS插件：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> install hexo-generator-feed --save</span></div></pre></td></tr></table></figure></p>
<p>修改<em>hexo/_config.yml</em>根目录下的站点配置文件，添加以下内容:<br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#RSS 订阅支持</span></div><div class="line"><span class="symbol">plugin:</span></div><div class="line">- hexo-generator-feed</div><div class="line"><span class="meta">#feed Atom</span></div><div class="line"><span class="symbol">feed:</span></div><div class="line"><span class="symbol">  type:</span> atom</div><div class="line"><span class="symbol">  path:</span> atom.xml</div><div class="line"><span class="symbol">  limit:</span> <span class="number">20</span></div></pre></td></tr></table></figure></p>
<p>修改主题目录下的配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">rss:</span> /atom.xml</div></pre></td></tr></table></figure></p>
<h1 id="添加sitemap"><a href="#添加sitemap" class="headerlink" title="添加sitemap"></a>添加sitemap</h1><p>sitemap 插件可以方便的管理网站，并生成符合搜索引擎需要的网站格式，供那些网络爬虫抓取，以便于我们的网站可以被搜索到。<br>安装<em>sitemap</em>插件:<br>　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> install hexo-generator-sitemap --save</span></div></pre></td></tr></table></figure></p>
<p>修改<em>hexo/_config.yml</em>根目录下的站点配置文件:<br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">sitemap:</span></div><div class="line"><span class="symbol">　　　path:</span> sitemap.xml</div></pre></td></tr></table></figure></p>
<p>添加baidusitemap：<br>  <figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> install hexo-generator-baidu-sitemap --save</span></div></pre></td></tr></table></figure></p>
<p>修改<em>hexo/_config.yml</em>根目录下的站点配置文件:<br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">baidusitemap:</span></div><div class="line"><span class="symbol">　　　path:</span> baidusitemap.xml</div></pre></td></tr></table></figure></p>
<p>在站点配置文件中添加：<br>　　<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plugin:</div><div class="line">-<span class="ruby"> hexo-generator-sitemap</span></div><div class="line">-<span class="ruby"> hexo-generator-baidu-sitemap</span></div></pre></td></tr></table></figure></p>
<p>修改文件 node_modules/hexo-generator-baidu-sitemap/baidusitemap.ejs ,添加自己的网站地址：<br> 　<figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">loc</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span></span></span><span class="ruby"> encodeURI(<span class="string">"http://stevenshi.me/"</span> + post.path) </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>当执行 hexo g 命令后会在站点目录下的 public/ 下生成 baidusitemap.xml 和 sitemap.xml 文件。将 baidusitemap.xml 提交给百度，<a href="http://www.sousuoyinqingtijiao.com/baidu/tijiao/" target="_blank" rel="external">百度提交入口</a> 将 sitemap.xml 提交给 google,<a href="https://www.google.com/webmasters/verification/home?hl=en" target="_blank" rel="external">Google提交入口</a></p>
<h2 id="百度提交"><a href="#百度提交" class="headerlink" title="百度提交"></a>百度提交</h2><p>先去百度站长平台注册，并添加自己的网站然后开始验证。关于验证方式，百度提供了三种,这里为了简单选择 html 标签验证。将百度提供的标签信息添加到主题目录下的 layout/_partials/head.swig 文件内即可：<br> 　<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.baidu_site_verification %&#125;</span><span class="xml"></span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"baidu-site-verification"</span> <span class="attr">content</span>=   <span class="string">/</span>&gt;</span></div><div class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure></p>
<p>content 内容为百度提供的验证内容，同时在主题目录中的 _config.ym l中将  baidu_site_verification 的值设置为 true 即可。<br> 　<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">baidu_site_verification:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>重新部署网站后开始验证，不出意外很快会验证成功。成功之后转到百度站长找到左边的链接提交，选择自己的站点，选择自动提交，添加自己的sitemap:<br><img src="/2017/05/09/hexo-advance/sitemap.jpg" alt=""><br>填入自己的 sitemap 地址： <em><a href="http://stevenshi.me/baidusitemap.xml">http://stevenshi.me/baidusitemap.xml</a></em>，剩下的时间就是等待了。</p>
<h2 id="谷歌提交"><a href="#谷歌提交" class="headerlink" title="谷歌提交"></a>谷歌提交</h2><p>其实不做谷歌提交，谷歌的网络爬虫每隔一段都会自动在网上抓取一些网页，不过为了及时让谷歌收录，还是做一下提交。首先登陆 <a href="https://www.google.com/webmasters/verification/home?hl=en" target="_blank" rel="external">GoogleWebmasterCentral</a> 进入后如下图：<br><img src="/2017/05/09/hexo-advance/googleconsole.jpg" alt=""><br>点击 ADD A PROPERTY,输入自己的域名，并继续，之后选择一种验证方式，这里选择推荐的方式，下载一个 html 文件放到博客主题根目录下的 source 目录下，并部署网站后开始验证，成功后提示：</p>
<p><img src="/2017/05/09/hexo-advance/googleverify.jpg" alt=""></p>
<p>验证完后登陆 <a href="https://www.google.com/webmasters/tools" target="_blank" rel="external">google站长工具</a>，选择添加站点地图：</p>
<p><img src="/2017/05/09/hexo-advance/addsitemap.jpg" alt=""></p>
<p>至此 google 提交完成。</p>
<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>当在浏览器输入 <em>localhost:4000/baidusitemap.xml</em> 时出现错误：</p>
<p><img src="/2017/05/09/hexo-advance/baidusitemap.jpg" alt=""></p>
<p>貌似是标题格式问题， baidusitemap.xml 和普通的 sitemap.xml 格式不同，它多一个标题,经过仔细检查原来标题中的&lt;&gt;符号问题，标题中有该符号即报上面的错误，去掉该符号后问题解决。</p>
<p>提交网站 sitemap 百度提示抓取失败：</p>
<p><img src="/2017/05/09/hexo-advance/error.jpg" alt=""></p>
<p>原来百度抓取 github 时是被拒绝的，github 屏蔽了百度爬虫，汗..</p>
<p>网络上有几种解决方案，可以选择同时部署到国内的 <a href="https://coding.net/" target="_blank" rel="external">Coding net</a> 和 github,同时配置域名解析国内的解析到 <a href="https://coding.net/" target="_blank" rel="external">Coding net</a> 国外的解析到 github 。这样就能解决百度爬虫的问题，但 <a href="https://coding.net/" target="_blank" rel="external">Coding</a> 目前针对免费用户只提供可怜 256M 的空间。所以还是想其它办法。</p>
<h1 id="添加侧栏社交链接"><a href="#添加侧栏社交链接" class="headerlink" title="添加侧栏社交链接"></a>添加侧栏社交链接</h1><p>修改主题目录下的配置文件 <em>themes/nexT/_config.yml</em><br>　　<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># <span class="selector-tag">Social</span> <span class="selector-tag">Links</span></div><div class="line"># <span class="selector-tag">Key</span> <span class="selector-tag">is</span> <span class="selector-tag">the</span> <span class="selector-tag">link</span> <span class="selector-tag">label</span> <span class="selector-tag">showing</span> <span class="selector-tag">to</span> <span class="selector-tag">end</span> <span class="selector-tag">users</span>.</div><div class="line"># <span class="selector-tag">Value</span> <span class="selector-tag">is</span> <span class="selector-tag">the</span> <span class="selector-tag">target</span> <span class="selector-tag">link</span> (E.g. <span class="attribute">GitHub</span>: <span class="attribute">https</span>:<span class="comment">//github.com/iissnan)</span></div><div class="line"><span class="attribute">social</span>:</div><div class="line">  <span class="attribute">Github</span>: <span class="attribute">https</span>:<span class="comment">//github.com/username</span></div><div class="line">  知乎: <span class="attribute">http</span>:<span class="comment">//www.zhihu.com/people/username</span></div><div class="line">  <span class="attribute">Email</span>: <span class="attribute">mailto</span>: user<span class="variable">@xx</span>.com</div></pre></td></tr></table></figure></p>
<p>设置链接的图标，对应的字段是<em>social_icons</em>在主题配置文件中:<br>　<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Social Icons</span></div><div class="line"><span class="attr">social_icons:</span></div><div class="line"><span class="attr">enable:</span> <span class="literal">true</span></div><div class="line"><span class="comment"># Icon Mappings</span></div><div class="line"><span class="attr">GitHub:</span> <span class="string">github</span></div><div class="line"><span class="attr">Email:</span> <span class="string">envelope</span></div></pre></td></tr></table></figure></p>
<p>nexT使用的图标来自 <a href="http://fontawesome.io/" target="_blank" rel="external">FontAwesome</a>，只要上面有的都可以配置到nexT使用。</p>
<h1 id="添加本地搜索"><a href="#添加本地搜索" class="headerlink" title="添加本地搜索"></a>添加本地搜索</h1><p>安装<em>hexo-generator-serarch</em><br>　　<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$npm <span class="keyword">install</span> hexo-generator-<span class="keyword">search</span> <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<p>修改<em>hexo/_config.yml</em>根目录下的站点配置文件添加:<br>　　<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line"> path: search.<span class="keyword">xml</span></div><div class="line"> <span class="title">field</span>: post</div></pre></td></tr></table></figure></p>
<h1 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h1><p>在hexo/source/目录下建立images文件夹，将头像放置在该文件夹下，修改主题目录下的配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">avatar:</span> <span class="meta-keyword">/images/</span>avatar.jpg</div></pre></td></tr></table></figure></p>
<h1 id="生成网站二维码"><a href="#生成网站二维码" class="headerlink" title="生成网站二维码"></a>生成网站二维码</h1><p>二维码生成工具很多，这个 <a href="https://www.unitag.io/qrcode" target="_blank" rel="external">Custom QR Code Generator</a> 比较不错。生成后将二维码添加到关于页面。</p>
<h1 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h1><p>NexT 使用 <a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="external">TomorrowTheme</a> 作为代码高亮，共有5款主题供选择。 打开主题配置文件<em>themes/nexT/_config.yml</em>修改:<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> Code Highlight theme</span></div><div class="line"><span class="meta">#</span><span class="bash"> Available value:</span></div><div class="line"><span class="meta">#</span><span class="bash">    normal | night | night eighties | night blue | night bright</span></div><div class="line"><span class="meta">#</span><span class="bash"> https://github.com/chriskempson/tomorrow-theme</span></div><div class="line">highlight_theme: night bright</div></pre></td></tr></table></figure></p>
<h1 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h1><p>只需要主题配置文件中填入微信和支付宝收款二维码图片地址，即可开启该功能。修改主题配置文件<em>themes/nexT/_config.yml</em><br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">reward_comment:</span> 您的支持是我原创的动力</div><div class="line"><span class="symbol"> wechatpay:</span> <span class="meta-keyword">/path/</span>to/wechat-reward-image</div><div class="line"><span class="symbol"> alipay:</span> <span class="meta-keyword">/path/</span>to/alipay-reward-image</div></pre></td></tr></table></figure></p>
<p>鼠标放置在二维码上面时，下面的字来回晃眼，修改如下文件:<br><em>themes/next/source/css/_common/components/post/post-reward.styl</em><br>注释掉以下代码：<img src="/2017/05/09/hexo-advance/pay.jpg" alt="Alt text"></p>
<h1 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h1><p>修改主题配置文件<em>themes/next/_config.yml</em><br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Blog rolls</span></div><div class="line"><span class="symbol">links_title:</span> 友情链接</div><div class="line"><span class="meta">#links_layout: block</span></div><div class="line"><span class="meta">#links_layout: inline</span></div><div class="line"><span class="symbol">links:</span></div><div class="line"><span class="symbol"> hexo:</span> https:<span class="comment">//hexo.io/zh-cn/docs</span></div><div class="line"><span class="symbol"> nexT:</span> http:<span class="comment">//theme-next.iissnan.com/</span></div></pre></td></tr></table></figure></p>
<h1 id="开启动画背景"><a href="#开启动画背景" class="headerlink" title="开启动画背景"></a>开启动画背景</h1><p><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">nexT</a> 自带两种背景动画效果，canvas_nest以及three_waves,在主题配置文件:<br> <em>themes/next/_config.yml</em>中设置为true即可开启,<br>　　<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Canvas-nest</span></div><div class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<h1 id="开启jiathis分享"><a href="#开启JiaThis分享" class="headerlink" title="开启JiaThis分享"></a>开启JiaThis分享</h1><p><a href="http://www.jiathis.com/" target="_blank" rel="external">Jiathis</a> 为文章提供社会化分享功能。修改主题配置文件<em>themes/next/_config.yml</em>:<br>　　<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Share</span></div><div class="line"><span class="attr">jiathis:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<h1 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h1><p>两种分享只能同时开启一种，百度分享需要在站点配置文件<em>hexo/_config.yml</em>中添加：<br>　　<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># baidu share</span></div><div class="line"><span class="attr">baidushare:</span> <span class="literal">true</span> <span class="comment">#百度分享功能</span></div></pre></td></tr></table></figure></p>
<p>另外需要在主题配置文件<em>themes/next/_config.yml</em>中开启百度分享功能：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> Baidu Share</span></div><div class="line"><span class="meta">#</span><span class="bash"> Available value:</span></div><div class="line"><span class="meta">#</span><span class="bash">    button | slide</span></div><div class="line"><span class="meta">#</span><span class="bash"> Warning: Baidu Share does not support https.</span></div><div class="line">baidushare: </div><div class="line"> type: button</div></pre></td></tr></table></figure></p>
<h1 id="添加disqus评论"><a href="#添加DISQUS评论" class="headerlink" title="添加DISQUS评论"></a>添加DISQUS评论</h1><p>修改主题配置文件开启 <a href="https://disqus.com/" target="_blank" rel="external">DISQUS</a> 功能：<br>　　<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Disqus</span></div><div class="line"><span class="attr">disqus:</span></div><div class="line"><span class="attr"> enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr"> shortname:</span></div><div class="line"><span class="attr"> count:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>去 <a href="https://disqus.com/" target="_blank" rel="external">DISQUS</a> 官网注册，并获取自己的shortname,填写至主题配置文件中的对应字段中。取消一篇文章的评论只需要在文章的头部修改：<br>　　<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">comments:</span> <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h1 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h1><p>图标制作网站 <a href="http://www.faviconer.com/" target="_blank" rel="external">faviconer</a>，制作完成自己的网站图标后放到<em>hexo/source</em>根目录下，并修改主题配置文件：<br>　　<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Put your favicon.ico into `hexo-site/source/` directory.</div><div class="line">favicon: /favicon.ico</div></pre></td></tr></table></figure></p>
<h1 id="页面中插入图片"><a href="#页面中插入图片" class="headerlink" title="页面中插入图片"></a>页面中插入图片</h1><p>图片的插入可以使用 <a href="http://markdownpad.com/" title="markdown Editor for Windows" target="_blank" rel="external">MarkdownPad</a> 的语法：<br>　　<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">图片名称</span>](<span class="link">图片地址</span>)</div></pre></td></tr></table></figure></p>
<p>图片可以放在本地，也可以放在云端。建议放在云端，因为github的空间有限，云端可以使用 <a href="https://www.qiniu.com/" target="_blank" rel="external">七牛云存储</a>。<br>本地图片的插入有两种方法，早期的 <a href="https://hexo.io/zh-cn/docs/" title="hexo说明" target="_blank" rel="external">hexo</a> 需要将图片放在网站根目录下的<em>source/</em>文件夹中比如<em>source/images/</em>文件夹，将图片放到该处，即可在页面中引用：<br>　　<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">test</span>](<span class="link">source/images/test.jgp</span>)</div></pre></td></tr></table></figure></p>
<p><a href="https://hexo.io/zh-cn/docs/" title="hexo说明" target="_blank" rel="external">hexo</a> 2.0之后，引入新方法，参考 <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">CodeFalling/hexo-asset-image</a><br>安装插件：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$npm</span> install hexo-asset-image --save</span></div></pre></td></tr></table></figure></p>
<p> 修改配置文件中的 <em>post_asset_folder:</em> 为 <em>true</em> ，这样新建文章时，会在 <em>_post</em> 目录下生成同名的文件夹，页面需要的各种图片都可以放到此处。比如：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">my-Publish</div><div class="line">├── my<span class="selector-class">.jpg</span></div><div class="line">├── logo<span class="selector-class">.jpg</span></div><div class="line">└── test<span class="selector-class">.jpg</span></div><div class="line">my-Publish.md</div></pre></td></tr></table></figure></p>
<p>新建名为 <em>my-Publish</em> 的新文章，文章需要的图片都放到该文件夹中。引用:<br>　　<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">xx</span>](<span class="link">my-Publish/my.jpg</span>)</div></pre></td></tr></table></figure></p>
<p>即可插入图片，<em>xx</em>可以随意。</p>
<h1 id="站内链接"><a href="#站内链接" class="headerlink" title="站内链接"></a>站内链接</h1><p>在自己的博客内链接站内文章，以前都直接加上永久链接地址，这种做法有一定的弊端，如果域名更换那就坏了。站内链接简单的做法如下：<br>　　<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">post_link</span> 文章文件名（不要后缀） 文章标题（可选） %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure></p>
<p>比如直接链接本篇文章，使用以下代码：<br>　　<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">post_link</span> hexo-advance hexo进阶 %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure></p>
<p>效果：<a href="/2017/05/09/hexo-advance/" title="hexo进阶">hexo进阶</a></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Qt如何在指定位置显示控件]]></title>
      <url>/2017/05/09/qt-widget-designated-location/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>假如窗体背景为一张图片，想要在图片的某一个位置放置一个<em>Qlabel</em>，用于显示一个实时变量，但又不知道这个位置的精确坐标，这个时候该如何实现呢？</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>一种方法是借用图片工具，找到指定位置的相对坐标，然后将控件放置在该坐标处;另一种方法可以将图片用网格划分，然后添加一个网格布局，查看指定的位置位于哪一行哪一列，然后将控件放置到布局中。这种方式不能做到精确的定位，但大体上可以使用。考虑到简单实用，选择第二种方法。</p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><a id="more"></a>
<h2 id="添加资源文件"><a href="#添加资源文件" class="headerlink" title="添加资源文件"></a>添加资源文件</h2><p>首先创建一个<em>QWidget</em>，并设置背景图片。在工程目录下创建一个名为<em>icons</em>的文件夹，将图片放置到这个位置。回到<em>Qt</em>工程目录，右键自己的工程选择添加新文件-&gt;<em>qt</em>资源文件: <img src="/2017/05/09/qt-widget-designated-location/qrc.jpg" alt="Alt text"></p>
<p>假如建立后的资源文件为<em>res.qrc</em>,打开后，选择添加前缀，并添加刚才放置的图片文件，添加后的<em>res.qrc</em>如下:<img src="/2017/05/09/qt-widget-designated-location/res-qrc.jpg" alt="Alt text"></p>
<h2 id="设置背景图片"><a href="#设置背景图片" class="headerlink" title="设置背景图片"></a>设置背景图片</h2><p>在设置背景图片后要保证窗口变化时，背景图片能够随着窗口的变化而变化。因此需要重写窗口的<em>resizeEvent</em>事件。<br>　　<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::resizeEvent(QResizeEvent *event)</div><div class="line">&#123;</div><div class="line">　QWidget::resizeEvent(event);</div><div class="line">　QImage <span class="built_in">image</span>;</div><div class="line">　<span class="built_in">image</span>.load(<span class="string">":/icons/linux.jpeg"</span>);</div><div class="line">　QPalette palette;</div><div class="line">　palette.setBrush(<span class="keyword">this</span>-&gt;backgroundRole(),QBrush(<span class="built_in">image</span>.scaled(event-&gt;<span class="built_in">size</span>(),Qt::IgnoreAspectRatio,Qt::SmoothTransformation)));</div><div class="line">　<span class="keyword">this</span>-&gt;setPalette(palette);</div><div class="line">　&#125;</div></pre></td></tr></table></figure></p>
<p>显示效果如下：<img src="/2017/05/09/qt-widget-designated-location/linux.jpg" alt="Alt text"></p>
<h2 id="将窗体网格化"><a href="#将窗体网格化" class="headerlink" title="将窗体网格化"></a>将窗体网格化</h2><p>假如我想在X字符下面显示一个<em>Qlabel</em>，现将窗体分成8行9列因为我的显示器是16:9尺寸，并显示所画的网格线，重写窗体的<em>paintEvent</em>事件：<br>　　<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">void</span> MainWindow::paintEvent(QPaintEvent *event)</div><div class="line"> &#123;</div><div class="line">　<span class="comment">//画网格线</span></div><div class="line">  QPainter painter(<span class="keyword">this</span>);</div><div class="line">  drawMyGrid(&amp;painter,<span class="number">8</span>,<span class="number">9</span>);</div><div class="line">  painter.setPen(Qt::black);</div><div class="line">　&#125;</div><div class="line"> <span class="keyword">void</span> MainWindow::drawMyGrid(QPainter *painter,<span class="keyword">int</span> row,<span class="keyword">int</span> col)</div><div class="line"> &#123;</div><div class="line">  <span class="keyword">int</span> mgin=<span class="number">1</span>;<span class="comment">//边界</span></div><div class="line">  QRect <span class="built_in">rect</span>;</div><div class="line">  <span class="keyword">int</span> i,j,x,y;</div><div class="line">  <span class="built_in">rect</span>=QRect(mgin,mgin,<span class="built_in">width</span>()-mgin,<span class="built_in">height</span>()-mgin);</div><div class="line"></div><div class="line">  <span class="built_in">for</span>( j=<span class="number">0</span>;j&lt;=row;j++)<span class="comment">//行</span></div><div class="line">  &#123;</div><div class="line">   y=<span class="built_in">rect</span>.bottom()-(j*(<span class="built_in">rect</span>.<span class="built_in">height</span>()-mgin)/row);</div><div class="line">   painter-&gt;drawLine(<span class="built_in">rect</span>.left(),y,<span class="built_in">rect</span>.right(),y);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">for</span>(i=<span class="number">0</span>;i&lt;=col;i++)<span class="comment">//列</span></div><div class="line">  &#123;</div><div class="line">   x=<span class="built_in">rect</span>.left()+(i*(<span class="built_in">rect</span>.<span class="built_in">width</span>()-mgin)/col);</div><div class="line">   painter-&gt;drawLine(x,<span class="built_in">rect</span>.top(),x,<span class="built_in">rect</span>.bottom());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>显示效果：<img src="/2017/05/09/qt-widget-designated-location/grid.jpg" alt="Alt text"></p>
<h2 id="在指定位置放置控件"><a href="#在指定位置放置控件" class="headerlink" title="在指定位置放置控件"></a>在指定位置放置控件</h2><p>字符X下方的位置为第六行第七列。首先给窗体安装一个<em>QGridLayout</em>布局，将<em>Qlabel</em>放置到该布局中。<br>　　<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">　label1  = new QLabel(<span class="name">tr</span>(<span class="string">"Text"</span>))<span class="comment">;</span></div><div class="line">　label1-&gt;setStyleSheet(<span class="string">"color:white;font:bold;font-size:30"</span>)<span class="comment">;</span></div><div class="line">　QGridLayout *mylayout     = new QGridLayout<span class="comment">;</span></div><div class="line">　mylayout-&gt;addWidget(<span class="name">label1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">1</span>)<span class="comment">;//第六行第七列，占用1行1列</span></div><div class="line">　QWidget * widget = new QWidget(<span class="name">this</span>)<span class="comment">;</span></div><div class="line">　widget-&gt;setLayout(<span class="name">mylayout</span>)<span class="comment">;//安装布局</span></div><div class="line">　setCentralWidget(<span class="name">widget</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>通过以下代码设置行列的宽高比例:<br>　　<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mylayout-&gt;setColumnStretch(<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//设置第一列的宽度比例</span></div><div class="line">mylayout-&gt;setRowStretch(<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//设置第一行的高度比例</span></div></pre></td></tr></table></figure></p>
<p>必须指定每一行每一列的高度和宽度比。<br>最后效果:<img src="/2017/05/09/qt-widget-designated-location/final.jpg" alt="Alt text"></p>
]]></content>
      
        <categories>
            
            <category> Qt </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo 博客备份]]></title>
      <url>/2017/05/07/hexo-backup/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在公司电脑中做好了hexo博客撰写，也将文章推送到了github并且发布了;回到家中在自己的电脑上想给自己的博客添加一篇文章，按照hexo建站流程，又建了一遍，但写完文章后发现，之前在公司写得博客被覆盖了，想哭的感觉有木有。当使用不同的电脑撰写博客时，会涉及到博客资源的备份和更新，如果简单的拷贝会比较麻烦，当然也可以tar整个hexo工作目录;单纯的push到github会有部分文件不全,由于主题文件目录也是git管理方式，当push后，主题默认是不会被推送到github上的。所以，必须稍作修改，才能正确的备份。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在自己的github仓库中默认有master分支，比如username目录下的：<br>username.github.io仓库。使用master分支保存自己的hexo博客静态文件，新建hexo分支用于保存hexo资源文件。每次撰写完博客后，顺便将自己的hexo工作目录push到远程仓库的hexo分支;当在另外一台电脑上写博客时，先获取远程仓库的分支，之后就可以编辑了<br><a id="more"></a></p>
<h2 id="推送到远程"><a href="#推送到远程" class="headerlink" title="推送到远程"></a>推送到远程</h2><p>进入到自己的博客工作目录比如<em>github\hexo</em>,先查看远程主机<br>　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$git</span> remote -v</span></div></pre></td></tr></table></figure></p>
<p>如果有输出，查看下是否是自己远程仓库的名字，如果不是username.github.io则删除：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$git</span> remote rm origin</span></div></pre></td></tr></table></figure></p>
<p>添加远程主机：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> remote add origin https:<span class="regexp">//gi</span>thub.com<span class="regexp">/yourusername/y</span>ourusername.github.io.git</div><div class="line"><span class="variable">$git</span> init</div></pre></td></tr></table></figure></p>
<p>删除掉<em>theme\nexT</em>目录下的<em>.git</em>文件夹，因为我们要将主题配置一同推送。如果删除后还是不能推送nexT主题，就将nexT改个名字，但要注意在hexo的_config.yml中对应的主题名字与这个文件夹名字要保持一致。<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">git add --all //add之后可以用*git status*查看刚刚改过的文件状态</span></div><div class="line"><span class="meta">$</span><span class="bash">git commit -m <span class="string">"backup hexo"</span></span></div><div class="line"><span class="meta">$</span><span class="bash">git push origin hexo //将本地文件push到远程仓库的hexo分支，没有则建立该分支</span></div></pre></td></tr></table></figure></p>
<p>在远程仓库查看，username.github.io的仓库下已经有了两个分支，一个叫master,一个叫hexo。但发现有些不想推送的文件也被推送到了远程，比如hexo根目录下的public文件夹，这个文件夹是生成的博客静态文件，它是在博客部署后被推送到：username.github.io的master分支的，我们这里并不需要保存该文件夹。编辑hexo根目录下的.gitignore文件，添加不需要推送的文件或文件夹：<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.DS_Store</span></div><div class="line">Thumbs<span class="selector-class">.db</span></div><div class="line">*<span class="selector-class">.log</span></div><div class="line">node_modules/</div><div class="line">public/</div><div class="line">.deploy*/</div></pre></td></tr></table></figure></p>
<p>由于之前推送过，可能.gitignore没有起作用，.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。这个时候就需要删除缓存改变未被追踪状态，重新提交：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">git rm -r --cached .</span></div><div class="line"><span class="meta">$</span><span class="bash">git add --all</span></div><div class="line"><span class="meta">$</span><span class="bash">git commit -m <span class="string">"update .gitignore"</span></span></div></pre></td></tr></table></figure></p>
<p> 之后再次推送即可。</p>
<h2 id="获取远程分支"><a href="#获取远程分支" class="headerlink" title="获取远程分支"></a>获取远程分支</h2><p>前面已经将写好的博客资源文件推送到远程仓库username.github.io的分支hexo,无论在哪里都可以获取远程分支至本地进行博客撰写，并且保持文章的更新状态。假如我在家中的电脑的目录<em>F:\github\home</em>下想撰写一篇新博客文章，首先要做的是进入到该目录下，进行hexo环境的安装，参考我的前一篇博客。<br>　　<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$npm</span> install hexo-<span class="keyword">cli</span> --<span class="keyword">save</span> <span class="comment">//在新电脑上配置hexo</span></div><div class="line"><span class="variable">$npm</span> install hexo --<span class="keyword">save</span></div><div class="line"><span class="variable">$npm</span> install hexo-server --<span class="keyword">save</span></div><div class="line"><span class="variable">$npm</span> install hexo-generator-<span class="keyword">search</span> --<span class="keyword">save</span></div><div class="line"><span class="variable">$npm</span> install hexo-deployer-git --<span class="keyword">save</span></div></pre></td></tr></table></figure></p>
<p>当环境建立好后，运行<em>hexo init</em>命令：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$hexo</span> init</span></div></pre></td></tr></table></figure></p>
<p>然后删除<em>hexo init</em>命令产生的其它文件夹，只保留生成的node_modules文件夹，建立博客需要的hexo各种命令以及依赖项都在这里:<br>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rm</span> _config<span class="selector-class">.yml</span> db<span class="selector-class">.json</span> package<span class="selector-class">.json</span> </div><div class="line"><span class="variable">$rm</span> -rf scaffolds/ themes/ source/</div><div class="line"><span class="variable">$rm</span> .npmignore</div></pre></td></tr></table></figure></p>
<p>之后添加远程仓库分支至本地：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> init</div><div class="line"><span class="variable">$git</span> remote add origin https:<span class="regexp">//gi</span>thub.com<span class="regexp">/yourusername/y</span>ourusername.github.io.git</div></pre></td></tr></table></figure></p>
<p> 查看远程仓库所有分支：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$git</span> branch -r</span></div></pre></td></tr></table></figure></p>
<p> 一般输出为：<br>　　<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*<span class="built_in">origin</span>/HEAD -&gt; <span class="built_in">origin</span>/master*</div><div class="line">*<span class="built_in">origin</span>/hexo*</div><div class="line">*<span class="built_in">origin</span>/master*</div></pre></td></tr></table></figure></p>
<p>此时可以看到远程仓库有两个分支，但默认的分支为master,我们需要的是hexo分支，所以需要将默认分支修改为hexo:<br><img src="/2017/05/07/hexo-backup/setbranch.jpg" alt="Alt text"></p>
<p>如果不修改则需要获取分支hexo到本地：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$git</span> fetch origin hexo:hexo</span></div></pre></td></tr></table></figure></p>
<p>或者：<br>　　<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$git</span> pull origin hexo</span></div></pre></td></tr></table></figure></p>
<p>切换到hexo分支：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> checkout hexo <span class="regexp">//</span>此处为hexo分支</div></pre></td></tr></table></figure></p>
<p>此时就可以在该目录下进行博客的撰写工作了，撰写完可以将最新更新提交，并push到远程仓库的hexo分支，至此完成多个电脑同步的问题。<br>当再次回到公司电脑时，进入到博客目录使用<em>git pull</em>即可同步更新。<br>在写新文章之前先配置好git的用户名和邮箱：<br>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*<span class="variable">$git</span> config --global user<span class="selector-class">.name</span> <span class="string">"yourusername"</span> </div><div class="line">*<span class="variable">$git</span> config --global user<span class="selector-class">.email</span> <span class="string">"yourusername@xxx.com"</span>*</div></pre></td></tr></table></figure></p>
<p> 新电脑需要生成SSH Key，<em>github</em>允许一个用户使用多个SSH Key。如果不想使用那么多个，可以拷贝原来电脑下的SSH Key之后就可以开始新文章的撰写和发布了：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">git pull //获取更新</span></div><div class="line"><span class="meta">$</span><span class="bash">hexo n post <span class="string">"new blog"</span></span></div><div class="line"><span class="meta">$</span><span class="bash">hexo clean //清除生成的静态文件</span></div><div class="line"><span class="meta">$</span><span class="bash">hexo g //生成静态文件</span></div><div class="line"><span class="meta">$</span><span class="bash">hexo d //部署到远程</span></div><div class="line"><span class="meta">$</span><span class="bash">git add --all //添加所有文件</span></div><div class="line"><span class="meta">$</span><span class="bash">git commit -m <span class="string">"add new blog"</span></span></div><div class="line"><span class="meta">$</span><span class="bash">git push origin hexo //推送到远程分支hexo</span></div></pre></td></tr></table></figure></p>
<p> 如果不小心搞乱了，或者误删了，使用命令恢复到前一个版本:<br>　　<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$git <span class="keyword">log</span> <span class="comment">//查看记录</span></div><div class="line">$git reset -<span class="params">-hard</span> HEAD^ <span class="comment">//恢复到前一个记录</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo+github建立个人博客]]></title>
      <url>/2017/05/07/hexo-blog/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><em>hexo</em>是一个高效简洁的静态博客框架，基于<em>Node.js</em>使用Markdown解析文章，几秒内即可利用靓丽的主题生成静态网页。</p>
<p>#环境：<br><em>windows10 64bits</em></p>
<p>#所需软件：<br>　　1. <a href="https://nodejs.org/en/" title="Java Script运行环境" target="_blank" rel="external">Node.js</a>　基于Chrome V8引擎的JavaScript运行环境；<br>　　2. <a href="https://github.com/git-for-windows/git/releases" title="git for windows" target="_blank" rel="external">Git-for-windows</a>　windows平台下git 运行环境；也可以使用 <a href="https://github.com/gavincook/githubOfflineInstaller" target="_blank" rel="external">github-for-windows</a> 里的 <em>git shell</em>, 由于在线安装 <a href="https://github.com/gavincook/githubOfflineInstaller" target="_blank" rel="external">github-for-windows</a> 在国内不翻墙是不可能成功的，所以上面的链接是离线版的安装版本。<br>　　3. <a href="http://markdownpad.com/" title="markdown Editor for Windows" target="_blank" rel="external">MarkdownPad</a>　博客撰写工具</p>
<p><em>开始之前先去 <a href="www.github.com">github</a> 注册一个账户，并新建一个名为username.github.io的仓库，最后生成的仓库地址：<a href="https://github.com/username/username.github.io" target="_blank" rel="external">https://github.com/username/username.github.io</a>  注：username替换为自己的用户名</em></p>
<h1 id="hexo安装与配置"><a href="#hexo安装与配置" class="headerlink" title="hexo安装与配置"></a>hexo安装与配置</h1><p>首先在本地建立自己的博客文件夹，比如 <em>F:\github\hexo</em>，进入该文件夹内，右键点击<em>Git Bash Here</em>,打开<em>git for windows</em>环境，开始安装 <a href="https://hexo.io/zh-cn/docs/" title="hexo说明" target="_blank" rel="external">hexo</a>：<br><a id="more"></a><br>　　<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　<span class="variable">$npm</span> install hexo-<span class="keyword">cli</span> -<span class="keyword">g</span> <span class="comment">//注: -g表示全局安装</span></div><div class="line">　<span class="variable">$npm</span> install hexo-server -<span class="keyword">g</span> <span class="comment">//注： hexo3.0之后server模块是独立的,需要单独安装</span></div></pre></td></tr></table></figure></p>
<p>完成之后可以通过命令查看<em>hexo</em>是否安装成功：<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">　$</span><span class="bash">hexo -v</span></div></pre></td></tr></table></figure></p>
<p><em>hexo</em>根目录下的<em>_config.yml</em>文件是全局配置文件，修改该文件实现自己的配置。具体可参考 <a href="https://hexo.io/zh-cn/docs/" title="hexo说明" target="_blank" rel="external">hexo</a> 官网。</p>
<h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><p>hexo常用命令可以参考hexo的帮助说明，下面列举几个常用命令：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　<span class="variable">$hexo</span> g <span class="regexp">//</span>等同于hexo generate,用于生成静态文件</div><div class="line">　<span class="variable">$hexo</span> s <span class="regexp">//</span>等同于hexo server,用于启动本地服务器，预览网页</div><div class="line">　<span class="variable">$hexo</span> d <span class="regexp">//</span>等同于hexo deploy,用于部署文件到github</div></pre></td></tr></table></figure></p>
<h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>在自己的博客文件夹下<em>F:\github\hexo</em>,执行命令：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　<span class="variable">$hexo</span> init <span class="regexp">//</span>初始化，自动下载搭建网站所需的所有文件</div><div class="line">　<span class="variable">$npm</span> install <span class="regexp">//</span>安装依赖包</div><div class="line">　<span class="variable">$hexo</span> g <span class="regexp">//</span>产生静态文件</div><div class="line">　<span class="variable">$hexo</span> s <span class="regexp">//</span>启动本地服务器，开启预览功能</div></pre></td></tr></table></figure></p>
<p>这个时候在浏览器输入localhost:4000即可查看到生成的静态网页：<img src="/2017/05/07/hexo-blog/hello-world.jpg" alt="Alt text"></p>
<h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><p>在hexo根目录下找到配置文件_config.yml，使用 <a href="http://markdownpad.com/" title="markdown Editor for Windows" target="_blank" rel="external">MarkdownPad</a> 打开，编辑最后的deploy字段，将自己的github仓库地址输入进去：<br>　　<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　<span class="attribute">deploy</span>:</div><div class="line">　　　<span class="attribute">type</span>: git <span class="comment">//注意冒号':'后面的空格一定要有</span></div><div class="line">　　　<span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//github.com/username/username.github.io.git</span></div><div class="line">　　　<span class="attribute">branch</span>: master</div></pre></td></tr></table></figure></p>
<h3 id="配置ssh-key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h3><p>在桌面空白处鼠标右键选择<em>Git Bash Here</em>,输入以下命令配置SSH Key:<br>　　<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span></div></pre></td></tr></table></figure></p>
<p>引号里面的内容输入邮箱地址，然后回车，会提示文件保存的路径，这时候按回车键确认，然后会提示你输入密码，然后会确认输入一次，在<em>c:/user/username/.ssh/</em>文件夹内看到生成了两个文件，一个是id_rsa，另一个是id_rsa.pub，打开id_rsa.pub然后选中里面的全部内容，复制下来。登录 <a href="https://github.com/login" target="_blank" rel="external">github</a>,点击<em>setting</em>,左边有一个<em>SSH and GPG keys</em>选项，进入<em>New SSH</em>选项，<em>title</em>随意，将之前复制的内容粘贴到key里面去。回到<em>Git bash</em>命令行，输入以下命令验证:<br>　　<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ssh -T git<span class="symbol">@github</span>.com</div></pre></td></tr></table></figure></p>
<h3 id="配置用户名和密码"><a href="#配置用户名和密码" class="headerlink" title="配置用户名和密码"></a>配置用户名和密码</h3><p>　　<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> config --global user<span class="selector-class">.name</span> <span class="string">"your username"</span>  </div><div class="line"><span class="variable">$git</span> config --global user<span class="selector-class">.email</span> <span class="string">"your_email@youremail.com"</span></div></pre></td></tr></table></figure></p>
<p>重新生成一下静态文件：<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　<span class="variable">$hexo</span> clean <span class="regexp">//</span>清除缓存文件db.json和已生成的静态文件public</div><div class="line">　<span class="variable">$hexo</span> g <span class="regexp">//</span>产生静态文件</div><div class="line">　<span class="variable">$hexo</span> d <span class="regexp">//</span>部署到github</div></pre></td></tr></table></figure></p>
<p>在运行<em>hexo d</em>之前需要安装git部署工具<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">　$</span><span class="bash">npm install hexo-deployer-git -g</span></div></pre></td></tr></table></figure></p>
<p>第一次执行<em>hexo d</em>会弹出对话框提示输入github的用户名和密码。此时在浏览器输入：<br><em><a href="https://github.com/username/username.github.io" target="_blank" rel="external">https://github.com/username/username.github.io</a></em>即可看到自己的博客已经搭建成功。<br>注: username替换为自己的用户名.</p>
<h2 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h2><p>修改 hexo-generator-index 插件，位于  node_modules/hexo-generator-index/lib目录下，文件名为 generator.js,将该文件内容修改为：<br>　　<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</div><div class="line">  <span class="keyword">var</span> posts = locals.posts;</div><div class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></div><div class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></div><div class="line">    &#125;);</div><div class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</div><div class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</div><div class="line">    <span class="attr">perPage</span>: config.index_generator.per_page,</div><div class="line">    <span class="attr">layout</span>: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</div><div class="line">    <span class="attr">format</span>: paginationDir + <span class="string">'/%d/'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">      <span class="attr">__index</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>参考 <a href="https://github.com/ehlxr/java-utils/blob/master/resources/generator.js" target="_blank" rel="external">generator.js</a>,在要置顶的文章中添加 top 值，值越大文章越靠前：<br>　　<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> <span class="string">ROS</span> <span class="string">学习</span></div><div class="line"><span class="attr">categories:</span> <span class="string">ROS</span></div><div class="line"><span class="attr">tags:</span> <span class="string">[picture,naruto]</span></div><div class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-05</span><span class="bullet">-02</span> <span class="number">11</span><span class="string">:30:04</span></div><div class="line"><span class="attr">top:</span> <span class="number">1000</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p>
<h1 id="next主题"><a href="#nexT主题" class="headerlink" title="nexT主题"></a>nexT主题</h1><p>hexo安装完成后，默认的主题是landscape，保存在hexo/themes/文件夹下。<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">nexT</a> 主题需要自行下载。在博客文件目录下F:\github\hexo右键单击Git Bash Here，输入命令:<br>　　<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　<span class="variable">$git</span> clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/iissnan/</span>hexo-theme-<span class="keyword">next</span>.git themes<span class="regexp">/nexT</span></div></pre></td></tr></table></figure></p>
<p>下载后的nexT主题会保存在themes目录下。修改hexo根目录下的配置文件_config.yml使主题生效:<br>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">　#</span><span class="bash"> Extensions</span></div><div class="line"><span class="meta">　#</span><span class="bash"><span class="comment"># Plugins: https://hexo.io/plugins/</span></span></div><div class="line"><span class="meta">　#</span><span class="bash"><span class="comment"># Themes: https://hexo.io/themes/</span></span></div><div class="line">　theme: nexT</div></pre></td></tr></table></figure></p>
<p>接下来选择nexT的Scheme，打开nexT的配置文件themes/nexT/_config.yml中，修改:<br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　<span class="meta"># Schemes</span></div><div class="line">　<span class="meta">#scheme: Muse <span class="comment">//默认Scheme，黑白主调，大量留白</span></span></div><div class="line">　<span class="meta">#scheme: Mist <span class="comment">//紧凑版本，整洁有序</span></span></div><div class="line"><span class="symbol">　scheme:</span> Pisces <span class="comment">//双栏显示，清新</span></div></pre></td></tr></table></figure></p>
<p>更多的设置请参考: <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">nexT</a></p>
<h2 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h2><p>打开hexo的配置文件F:\github\hexo_config.yml，修改:<br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">　language:</span> zh-Hans <span class="comment">//中文汉字</span></div></pre></td></tr></table></figure></p>
<h1 id="访问量统计"><a href="#访问量统计" class="headerlink" title="访问量统计"></a>访问量统计</h1><h3 id="文章阅读量统计"><a href="#文章阅读量统计" class="headerlink" title="文章阅读量统计"></a>文章阅读量统计</h3><p>使用 <a href="https://leancloud.cn" target="_blank" rel="external">leancloud</a> 实现文章阅读次数统计。注册完成后，点击访问控制台，选择创建新应用:<img src="/2017/05/07/hexo-blog/leancloudc.jpg" alt="Alt-text"></p>
<p>创建名为Counter的class。之后找到该应用的AppID、AppKey，将这两个值写入到nexT的主题配置文件中_config.yml:<br>　　<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">　<span class="meta"># Show number of visitors to each article.</span></div><div class="line">　<span class="meta"># You can visit https:<span class="comment">//leancloud.cn get AppID and AppKey.</span></span></div><div class="line"><span class="symbol">　leancloud_visitors:</span></div><div class="line"><span class="symbol">  　　enable:</span> true</div><div class="line"><span class="symbol">  　　app_id:</span> <span class="meta">#&lt;app_id&gt; <span class="comment">//复制刚才创建的应用的AppID</span></span></div><div class="line"><span class="symbol">  　　app_key:</span> <span class="meta">#&lt;app_key&gt; <span class="comment">//复制刚才创建的应用的AppKey</span></span></div></pre></td></tr></table></figure></p>
<p>为了安全，将自己的域名加入安全中心-&gt;web安全域名中，防止恶意修改。完成后部署网站，看效果是不是已经有了文章阅读量显示了。</p>
<h3 id="站点访问统计"><a href="#站点访问统计" class="headerlink" title="站点访问统计"></a>站点访问统计</h3><p>使用 <a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="external">不蒜子</a> 脚本实现。<br>在themes\nexT\layout_partials目录下找到文件footer.swig，在文件的头部添加:<br>　　<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　<span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span></div><div class="line">　<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
